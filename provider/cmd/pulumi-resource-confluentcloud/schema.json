{
    "name": "confluentcloud",
    "displayName": "Confluent",
    "description": "A Pulumi package for creating and managing Confluent cloud resources.",
    "keywords": [
        "pulumi",
        "confluentcloud",
        "category/cloud"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`confluent` Terraform Provider](https://github.com/confluentinc/terraform-provider-confluent).",
    "repository": "https://github.com/pulumi/pulumi-confluentcloud",
    "publisher": "Pulumi",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": {
                "confluentcloud": "ConfluentCloud"
            },
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing Confluent cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/confluentinc/terraform-provider-confluent)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-confluentcloud` repo](https://github.com/pulumi/pulumi-confluentcloud/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-confluent` repo](https://github.com/confluentinc/terraform-provider-confluent/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/confluentinc/terraform-provider-confluent)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-confluentcloud` repo](https://github.com/pulumi/pulumi-confluentcloud/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-confluent` repo](https://github.com/confluentinc/terraform-provider-confluent/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "config": {
        "variables": {
            "cloudApiKey": {
                "type": "string",
                "description": "The Confluent Cloud API Key.\n",
                "secret": true
            },
            "cloudApiSecret": {
                "type": "string",
                "description": "The Confluent Cloud API Secret.\n",
                "secret": true
            },
            "endpoint": {
                "type": "string",
                "description": "The base endpoint of Confluent Cloud API.\n"
            },
            "kafkaApiKey": {
                "type": "string",
                "description": "The Kafka Cluster API Key.\n",
                "secret": true
            },
            "kafkaApiSecret": {
                "type": "string",
                "description": "The Kafka Cluster API Secret.\n",
                "secret": true
            },
            "kafkaRestEndpoint": {
                "type": "string",
                "description": "The Kafka Cluster REST Endpoint.\n"
            }
        }
    },
    "types": {
        "confluentcloud:index/ApiKeyManagedResource:ApiKeyManagedResource": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "The API group and version of the managed resource that the API Key associated with, for example, `cmk/v2`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/ApiKeyManagedResourceEnvironment:ApiKeyManagedResourceEnvironment",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the managed resource belongs to, for example, `env-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of the managed resource that the API Key associated with, for example, `Cluster`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "apiVersion",
                "environment",
                "id",
                "kind"
            ]
        },
        "confluentcloud:index/ApiKeyManagedResourceEnvironment:ApiKeyManagedResourceEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the managed resource belongs to, for example, `env-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/ApiKeyOwner:ApiKeyOwner": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "The API group and version of the managed resource that the API Key associated with, for example, `cmk/v2`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the managed resource belongs to, for example, `env-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of the managed resource that the API Key associated with, for example, `Cluster`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "apiVersion",
                "id",
                "kind"
            ]
        },
        "confluentcloud:index/ClusterLinkDestinationKafkaCluster:ClusterLinkDestinationKafkaCluster": {
            "properties": {
                "bootstrapEndpoint": {
                    "type": "string",
                    "description": "The bootstrap endpoint of the destination Kafka cluster, for example, `SASL_SSL://pkc-00000.us-central1.gcp.confluent.cloud:9092` or `pkc-00000.us-central1.gcp.confluent.cloud:9092`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/ClusterLinkDestinationKafkaClusterCredentials:ClusterLinkDestinationKafkaClusterCredentials",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the destination Kafka cluster, for example, `lkc-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the destination Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/ClusterLinkDestinationKafkaClusterCredentials:ClusterLinkDestinationKafkaClusterCredentials": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Kafka API Key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "description": "The Kafka API Secret.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "secret"
            ]
        },
        "confluentcloud:index/ClusterLinkSourceKafkaCluster:ClusterLinkSourceKafkaCluster": {
            "properties": {
                "bootstrapEndpoint": {
                    "type": "string",
                    "description": "The bootstrap endpoint of the destination Kafka cluster, for example, `SASL_SSL://pkc-00000.us-central1.gcp.confluent.cloud:9092` or `pkc-00000.us-central1.gcp.confluent.cloud:9092`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/ClusterLinkSourceKafkaClusterCredentials:ClusterLinkSourceKafkaClusterCredentials",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the destination Kafka cluster, for example, `lkc-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the destination Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/ClusterLinkSourceKafkaClusterCredentials:ClusterLinkSourceKafkaClusterCredentials": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Kafka API Key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "description": "The Kafka API Secret.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "secret"
            ]
        },
        "confluentcloud:index/ConnectorEnvironment:ConnectorEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Kafka cluster that the connector belongs to, for example, `lkc-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/ConnectorKafkaCluster:ConnectorKafkaCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Kafka cluster that the connector belongs to, for example, `lkc-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/IdentityPoolIdentityProvider:IdentityPoolIdentityProvider": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Identity Provider associated with the Identity Pool, for example, `op-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/KafkaAclCredentials:KafkaAclCredentials": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Kafka API Key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "description": "The Kafka API Secret.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "secret"
            ]
        },
        "confluentcloud:index/KafkaAclKafkaCluster:KafkaAclKafkaCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Kafka cluster, for example, `lkc-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/KafkaClientQuotaEnvironment:KafkaClientQuotaEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the corresponding Kafka Cluster belongs to, for example, `env-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/KafkaClientQuotaKafkaCluster:KafkaClientQuotaKafkaCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the corresponding Kafka Cluster belongs to, for example, `env-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/KafkaClientQuotaThroughput:KafkaClientQuotaThroughput": {
            "properties": {
                "egressByteRate": {
                    "type": "string",
                    "description": "The egress throughput limit in bytes per second.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ingressByteRate": {
                    "type": "string",
                    "description": "The ingress throughput limit in bytes per second.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "egressByteRate",
                "ingressByteRate"
            ]
        },
        "confluentcloud:index/KafkaClusterBasic:KafkaClusterBasic": {
            "type": "object"
        },
        "confluentcloud:index/KafkaClusterConfigCredentials:KafkaClusterConfigCredentials": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Kafka API Key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "description": "The Kafka API Secret.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "secret"
            ]
        },
        "confluentcloud:index/KafkaClusterConfigKafkaCluster:KafkaClusterConfigKafkaCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Dedicated Kafka cluster, for example, `lkc-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/KafkaClusterDedicated:KafkaClusterDedicated": {
            "properties": {
                "cku": {
                    "type": "integer",
                    "description": "The number of Confluent Kafka Units (CKUs) for Dedicated cluster types. The minimum number of CKUs for `SINGLE_ZONE` dedicated clusters is `1` whereas `MULTI_ZONE` dedicated clusters must have more than `2` CKUs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "encryptionKey": {
                    "type": "string",
                    "description": "The ID of the encryption key that is used to encrypt the data in the Kafka cluster, for example, `arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab` (key Amazon Resource Name) for AWS or `projects/my-test-project/locations/global/keyRings/test-byok/cryptoKeys/test` for GCP. Append required permissions to the key policy before creating a Kafka cluster, see [Encrypt Confluent Cloud Clusters using Self-Managed Keys](https://docs.confluent.io/cloud/current/clusters/byok/index.html) for more details. At the moment, self-managed encryption keys are only available for the Dedicated clusters on AWS or GCP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cku"
            ]
        },
        "confluentcloud:index/KafkaClusterEnvironment:KafkaClusterEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Network that the Kafka cluster belongs to, for example, `n-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/KafkaClusterNetwork:KafkaClusterNetwork": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Network that the Kafka cluster belongs to, for example, `n-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/KafkaClusterStandard:KafkaClusterStandard": {
            "type": "object"
        },
        "confluentcloud:index/KafkaMirrorTopicClusterLink:KafkaMirrorTopicClusterLink": {
            "properties": {
                "linkName": {
                    "type": "string",
                    "description": "The name of the cluster link to attach to the mirror topic, for example, `my-cluster-link`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "linkName"
            ]
        },
        "confluentcloud:index/KafkaMirrorTopicKafkaCluster:KafkaMirrorTopicKafkaCluster": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/KafkaMirrorTopicKafkaClusterCredentials:KafkaMirrorTopicKafkaClusterCredentials",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the destination Kafka cluster, for example, `lkc-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the destination Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/KafkaMirrorTopicKafkaClusterCredentials:KafkaMirrorTopicKafkaClusterCredentials": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Kafka API Key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "description": "The Kafka API Secret.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "secret"
            ]
        },
        "confluentcloud:index/KafkaMirrorTopicSourceKafkaTopic:KafkaMirrorTopicSourceKafkaTopic": {
            "properties": {
                "topicName": {
                    "type": "string",
                    "description": "The name of the topic on the source cluster to be mirrored over the cluster link, for example, `orders`. A topic with the exact same name must exist on the source cluster, and no topic with this name should exist on the destination cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "topicName"
            ]
        },
        "confluentcloud:index/KafkaTopicCredentials:KafkaTopicCredentials": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Kafka API Key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "description": "The Kafka API Secret.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "secret"
            ]
        },
        "confluentcloud:index/KafkaTopicKafkaCluster:KafkaTopicKafkaCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Kafka cluster, for example, `lkc-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/KsqlClusterCredentialIdentity:KsqlClusterCredentialIdentity": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the associated service or user account, for example, `sa-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/KsqlClusterEnvironment:KsqlClusterEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the associated service or user account, for example, `sa-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/KsqlClusterKafkaCluster:KsqlClusterKafkaCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the associated service or user account, for example, `sa-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/NetworkAw:NetworkAw": {
            "properties": {
                "account": {
                    "type": "string",
                    "description": "(Required String) The AWS account ID associated with the Confluent Cloud VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateLinkEndpointService": {
                    "type": "string",
                    "description": "(Optional String) The endpoint service of the Confluent Cloud VPC (used for PrivateLink) if available.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpc": {
                    "type": "string",
                    "description": "(Required String) The Confluent Cloud VPC ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "account",
                        "privateLinkEndpointService",
                        "vpc"
                    ]
                }
            }
        },
        "confluentcloud:index/NetworkAzure:NetworkAzure": {
            "properties": {
                "privateLinkServiceAliases": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Optional Map) The mapping of zones to Private Link Service Aliases if available. Keys are zone names, for example, `1` and values are [Azure Private Link Service Aliases](https://docs.microsoft.com/en-us/azure/private-link/private-link-service-overview#share-your-service), for example, `s-nk99e-privatelink-1.8c43dcd0-695c-1234-bc35-11fe6abb303a.centralus.azure.privatelinkservice`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "privateLinkServiceAliases"
                    ]
                }
            }
        },
        "confluentcloud:index/NetworkEnvironment:NetworkEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Network belongs to, for example, `env-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/NetworkGcp:NetworkGcp": {
            "properties": {
                "privateServiceConnectServiceAttachments": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Optional Map) The mapping of zones to Private Service Connect Service Attachments if available. Keys are zones and values are [GCP Private Service Connect service attachment](https://cloud.google.com/vpc/docs/configure-private-service-connect-producer#api_7).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "project": {
                    "type": "string",
                    "description": "(Required String) The GCP Project ID associated with the Confluent Cloud VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcNetwork": {
                    "type": "string",
                    "description": "(Required String) The network name of the Confluent Cloud VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "privateServiceConnectServiceAttachments",
                        "project",
                        "vpcNetwork"
                    ]
                }
            }
        },
        "confluentcloud:index/PeeringAws:PeeringAws": {
            "properties": {
                "account": {
                    "type": "string",
                    "description": "The AWS Account ID of the peer VPC owner. You can find your AWS Account ID [here](https://console.aws.amazon.com/billing/home?#/account) under **My Account** section of the AWS Management Console. Must be a **12 character string**.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "customerRegion": {
                    "type": "string",
                    "description": "The region of the Azure peer VNet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "routes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The AWS VPC CIDR blocks or subsets. This must be from the supported CIDR blocks and must not overlap with your Confluent Cloud CIDR block or any other network peering connection VPC CIDR (learn more about the requirements [here](https://docs.confluent.io/cloud/current/networking/peering/aws-peering.html#vpc-peering-on-aws)). You can find AWS VPC CIDR [here](https://console.aws.amazon.com/vpc/) under **Your VPCs \u003e Target VPC \u003e Details** section of the AWS Management Console.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "vpc": {
                    "type": "string",
                    "description": "The AWS VPC ID of the peer VPC that you're peering with Confluent Cloud. You can find your AWS VPC ID [here](https://console.aws.amazon.com/vpc/) under **Your VPCs** section of the AWS Management Console. Must start with `vpc-`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "account",
                "customerRegion",
                "routes",
                "vpc"
            ]
        },
        "confluentcloud:index/PeeringAzure:PeeringAzure": {
            "properties": {
                "customerRegion": {
                    "type": "string",
                    "description": "The region of the Azure peer VNet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "tenant": {
                    "type": "string",
                    "description": "The Tenant ID that represents an organization in Azure Active Directory. You can find your Azure Tenant ID in the [Azure Portal under Azure Active Directory](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview). Must be a valid **32 character UUID string**.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "vnet": {
                    "type": "string",
                    "description": "The resource (composite) ID of the peer Virtual Network that you're peering with Confluent Cloud, in the format `/subscriptions/\u003cSubscription ID\u003e/resourceGroups/\u003cResource Group Name\u003e/providers/Microsoft.Network/virtualNetworks/\u003cVNet name\u003e`. You can find Subscription ID, Resource Group Name and your VNet name under **Virtual Networks \u003e Target VNet \u003e Essentials** section of your [Microsoft Azure Portal](https://portal.azure.com/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "customerRegion",
                "tenant",
                "vnet"
            ]
        },
        "confluentcloud:index/PeeringEnvironment:PeeringEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Network that the Peering belongs to, for example, `n-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/PeeringGcp:PeeringGcp": {
            "properties": {
                "importCustomRoutes": {
                    "type": "boolean",
                    "description": "The Import Custom Routes option enables connectivity to a Confluent Cloud cluster in Google Cloud from customer premise or other clouds, such as AWS and Azure, through a customer VPC that is peered with Confluent Cloud in the same region. Defaults to `false`. Learn more about considerations / limitations of the Import Custom Routes option [here](https://docs.confluent.io/cloud/current/networking/peering/gcp-peering.html#import-custom-routes).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "project": {
                    "type": "string",
                    "description": "The GCP Project ID. You can find your Google Cloud Project ID under **Project ID** section of your [Google Cloud Console dashboard](https://console.cloud.google.com/home/dashboard).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "vpcNetwork": {
                    "type": "string",
                    "description": "The VPC network name that you're peering to Confluent Cloud. You can find your VPC network name under **VPC Networks** section of your [Google Cloud Console](https://console.cloud.google.com/networking/networks/list).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "project",
                "vpcNetwork"
            ]
        },
        "confluentcloud:index/PeeringNetwork:PeeringNetwork": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Network that the Peering belongs to, for example, `n-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/PrivateLinkAccessAws:PrivateLinkAccessAws": {
            "properties": {
                "account": {
                    "type": "string",
                    "description": "The AWS account ID to enable for the Private Link Access. You can find your AWS account ID [here] (https://console.aws.amazon.com/billing/home?#/account) under **My Account** in your AWS Management Console. Must be a **12 character string**.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "account"
            ]
        },
        "confluentcloud:index/PrivateLinkAccessAzure:PrivateLinkAccessAzure": {
            "properties": {
                "subscription": {
                    "type": "string",
                    "description": "The Azure subscription ID to enable for the Private Link Access. You can find your Azure subscription ID in the subscription section of your [Microsoft Azure Portal] (https://portal.azure.com/#blade/Microsoft_Azure_Billing/SubscriptionsBlade). Must be a valid **32 character UUID string**.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "subscription"
            ]
        },
        "confluentcloud:index/PrivateLinkAccessEnvironment:PrivateLinkAccessEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Network that the Private Link Access belongs to, for example, `n-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/PrivateLinkAccessGcp:PrivateLinkAccessGcp": {
            "properties": {
                "project": {
                    "type": "string",
                    "description": "The GCP project ID to allow for Private Service Connect access. You can find your Google Cloud Project ID under **Project ID** section of your [Google Cloud Console dashboard](https://console.cloud.google.com/home/dashboard).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "project"
            ]
        },
        "confluentcloud:index/PrivateLinkAccessNetwork:PrivateLinkAccessNetwork": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Network that the Private Link Access belongs to, for example, `n-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/SchemaRegistryClusterEnvironment:SchemaRegistryClusterEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Schema Registry region that the Schema Registry cluster belongs to, for example, `sgreg-1`. See [Schema Registry Regions](https://docs.confluent.io/cloud/current/stream-governance/packages.html#stream-governance-regions) to find a corresponding region ID based on desired cloud provider region and types of the billing package.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/SchemaRegistryClusterRegion:SchemaRegistryClusterRegion": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Schema Registry region that the Schema Registry cluster belongs to, for example, `sgreg-1`. See [Schema Registry Regions](https://docs.confluent.io/cloud/current/stream-governance/packages.html#stream-governance-regions) to find a corresponding region ID based on desired cloud provider region and types of the billing package.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/StreamGovernanceClusterEnvironment:StreamGovernanceClusterEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Stream Governance region that the Stream Governance cluster belongs to, for example, `sgreg-1`. See [Stream Governance Regions](https://docs.confluent.io/cloud/current/stream-governance/packages.html#stream-governance-regions) to find a corresponding region ID based on desired cloud provider region and types of the billing package.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/StreamGovernanceClusterRegion:StreamGovernanceClusterRegion": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Stream Governance region that the Stream Governance cluster belongs to, for example, `sgreg-1`. See [Stream Governance Regions](https://docs.confluent.io/cloud/current/stream-governance/packages.html#stream-governance-regions) to find a corresponding region ID based on desired cloud provider region and types of the billing package.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/TransitGatewayAttachmentAws:TransitGatewayAttachmentAws": {
            "properties": {
                "enableCustomRoutes": {
                    "type": "boolean",
                    "description": "Enable custom destination routes in Confluent Cloud. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "ramResourceShareArn": {
                    "type": "string",
                    "description": "The Amazon Resource Name (ARN) of the Resource Access Manager (RAM) Resource Share of the transit gateway your Confluent Cloud network attaches to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "routes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of destination routes for traffic from Confluent VPC to customer VPC via Transit Gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "transitGatewayAttachmentId": {
                    "type": "string",
                    "description": "(Required String) The ID of the AWS Transit Gateway VPC Attachment that attaches Confluent VPC to Transit Gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "transitGatewayId": {
                    "type": "string",
                    "description": "The ID of the AWS Transit Gateway that you want Confluent CLoud to be attached to. Must start with `tgw-`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "ramResourceShareArn",
                "transitGatewayId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ramResourceShareArn",
                        "routes",
                        "transitGatewayAttachmentId",
                        "transitGatewayId"
                    ]
                }
            }
        },
        "confluentcloud:index/TransitGatewayAttachmentEnvironment:TransitGatewayAttachmentEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Network that the Transit Gateway Attachment belongs to, for example, `n-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/TransitGatewayAttachmentNetwork:TransitGatewayAttachmentNetwork": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Network that the Transit Gateway Attachment belongs to, for example, `n-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getIdentityPoolIdentityProvider:getIdentityPoolIdentityProvider": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Identity Provider associated with the Identity Pool, for example, `op-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getKafkaClientQuotaEnvironment:getKafkaClientQuotaEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Kafka Client Quota (for example, `cq-abc123`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getKafkaClientQuotaKafkaCluster:getKafkaClientQuotaKafkaCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Kafka Client Quota (for example, `cq-abc123`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getKafkaClientQuotaThroughput:getKafkaClientQuotaThroughput": {
            "properties": {
                "egressByteRate": {
                    "type": "string",
                    "description": "(Required String) The egress throughput limit in bytes per second.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ingressByteRate": {
                    "type": "string",
                    "description": "(Required String) The ingress throughput limit in bytes per second.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "egressByteRate",
                "ingressByteRate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getKafkaClusterBasic:getKafkaClusterBasic": {
            "type": "object"
        },
        "confluentcloud:index/getKafkaClusterDedicated:getKafkaClusterDedicated": {
            "properties": {
                "cku": {
                    "type": "integer",
                    "description": "(Required Number) The number of Confluent Kafka Units (CKUs) for Dedicated cluster types. The minimum number of CKUs for `SINGLE_ZONE` dedicated clusters is `1` whereas `MULTI_ZONE` dedicated clusters must have more than `2` CKUs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "encryptionKey": {
                    "type": "string",
                    "description": "(Optional String) The ID of the encryption key that is used to encrypt the data in the Kafka cluster, for example, `arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab` (key Amazon Resource Name) for AWS or `projects/my-test-project/locations/global/keyRings/test-byok/cryptoKeys/test` for GCP. Append required permissions to the key policy before creating a Kafka cluster, see [Encrypt Confluent Cloud Clusters using Self-Managed Keys](https://docs.confluent.io/cloud/current/clusters/byok/index.html) for more details. At the moment, self-managed encryption keys are only available for the Dedicated clusters on AWS or GCP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cku",
                "encryptionKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getKafkaClusterEnvironment:getKafkaClusterEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Kafka cluster belongs to, for example, `env-xyz456`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getKafkaClusterNetwork:getKafkaClusterNetwork": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Kafka cluster belongs to, for example, `env-xyz456`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getKafkaClusterStandard:getKafkaClusterStandard": {
            "type": "object"
        },
        "confluentcloud:index/getKafkaTopicCredentials:getKafkaTopicCredentials": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Kafka API Key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "description": "The Kafka API Secret.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "secret"
            ]
        },
        "confluentcloud:index/getKafkaTopicKafkaCluster:getKafkaTopicKafkaCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Kafka cluster, for example, `lkc-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getKsqlClusterCredentialIdentity:getKsqlClusterCredentialIdentity": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the ksqlDB cluster belongs to, for example, `env-xyz456`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getKsqlClusterEnvironment:getKsqlClusterEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the ksqlDB cluster belongs to, for example, `env-xyz456`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getKsqlClusterKafkaCluster:getKsqlClusterKafkaCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the ksqlDB cluster belongs to, for example, `env-xyz456`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getNetworkAw:getNetworkAw": {
            "properties": {
                "account": {
                    "type": "string",
                    "description": "(Required String) The AWS account ID associated with the Confluent Cloud VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateLinkEndpointService": {
                    "type": "string",
                    "description": "(Optional String) The endpoint service of the Confluent Cloud VPC (used for PrivateLink) if available.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpc": {
                    "type": "string",
                    "description": "(Required String) The Confluent Cloud VPC ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "account",
                "privateLinkEndpointService",
                "vpc"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getNetworkAzure:getNetworkAzure": {
            "properties": {
                "privateLinkServiceAliases": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Optional Map) The mapping of zones to Private Link Service Aliases if available. Keys are zones and values are [Azure Private Link Service Aliases](https://docs.microsoft.com/en-us/azure/private-link/private-link-service-overview#share-your-service).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "privateLinkServiceAliases"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getNetworkEnvironment:getNetworkEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Network belongs to, for example, `env-xyz456`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getNetworkGcp:getNetworkGcp": {
            "properties": {
                "privateServiceConnectServiceAttachments": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Optional Map) The mapping of zones to Private Service Connect Service Attachments if available. Keys are zones and values are [GCP Private Service Connect service attachment](https://cloud.google.com/vpc/docs/configure-private-service-connect-producer#api_7).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "project": {
                    "type": "string",
                    "description": "(Required String) The GCP Project ID associated with the Confluent Cloud VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcNetwork": {
                    "type": "string",
                    "description": "(Required String) The network name of the Confluent Cloud VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "privateServiceConnectServiceAttachments",
                "project",
                "vpcNetwork"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getPeeringAw:getPeeringAw": {
            "properties": {
                "account": {
                    "type": "string",
                    "description": "(Required String) The AWS Account ID of the peer VPC owner. You can find your AWS Account ID [here](https://console.aws.amazon.com/billing/home?#/account) under **My Account** section of the AWS Management Console. Must be a **12 character string**.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customerRegion": {
                    "type": "string",
                    "description": "(Required String) The region of the Azure peer VNet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Required String) The AWS VPC CIDR blocks or subsets. This must be from the supported CIDR blocks and must not overlap with your Confluent Cloud CIDR block or any other network peering connection VPC CIDR (learn more about the requirements [here](https://docs.confluent.io/cloud/current/networking/peering/aws-peering.html#vpc-peering-on-aws)). You can find AWS VPC CIDR [here](https://console.aws.amazon.com/vpc/) under **Your VPCs \u003e Target VPC \u003e Details** section of the AWS Management Console.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpc": {
                    "type": "string",
                    "description": "(Required String) The AWS VPC ID of the peer VPC that you're peering with Confluent Cloud. You can find your AWS VPC ID [here](https://console.aws.amazon.com/vpc/) under **Your VPCs** section of the AWS Management Console. Must start with `vpc-`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "account",
                "customerRegion",
                "routes",
                "vpc"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getPeeringAzure:getPeeringAzure": {
            "properties": {
                "customerRegion": {
                    "type": "string",
                    "description": "(Required String) The region of the Azure peer VNet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tenant": {
                    "type": "string",
                    "description": "(Required String) The Tenant ID that represents an organization in Azure Active Directory. You can find your Azure Tenant ID in the [Azure Portal under Azure Active Directory](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview). Must be a valid **32 character UUID string**.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vnet": {
                    "type": "string",
                    "description": "(Required String) The resource (composite) ID of the peer Virtual Network that you're peering with Confluent Cloud, in the format `/subscriptions/\u003cSubscription ID\u003e/resourceGroups/\u003cResource Group Name\u003e/providers/Microsoft.Network/virtualNetworks/\u003cVNet name\u003e`. You can find Subscription ID, Resource Group Name and your VNet name under **Virtual Networks \u003e Target VNet \u003e Essentials** section of your [Microsoft Azure Portal](https://portal.azure.com/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "customerRegion",
                "tenant",
                "vnet"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getPeeringEnvironment:getPeeringEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Peering belongs to, for example, `env-xyz456`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getPeeringGcp:getPeeringGcp": {
            "properties": {
                "importCustomRoutes": {
                    "type": "boolean",
                    "description": "(Optional Boolean) The Import Custom Routes option enables connectivity to a Confluent Cloud cluster in Google Cloud from customer premise or other clouds, such as AWS and Azure, through a customer VPC that is peered with Confluent Cloud in the same region. Defaults to `false`. Learn more about considerations / limitations of the Import Custom Routes option [here](https://docs.confluent.io/cloud/current/networking/peering/gcp-peering.html#import-custom-routes).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "project": {
                    "type": "string",
                    "description": "(Required String) The GCP Project ID. You can find your Google Cloud Project ID under **Project ID** section of your [Google Cloud Console dashboard](https://console.cloud.google.com/home/dashboard).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcNetwork": {
                    "type": "string",
                    "description": "(Required String) The VPC network name that you're peering to Confluent Cloud. You can find your VPC network name under **VPC Networks** section of your [Google Cloud Console](https://console.cloud.google.com/networking/networks/list).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "importCustomRoutes",
                "project",
                "vpcNetwork"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getPeeringNetwork:getPeeringNetwork": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Peering belongs to, for example, `env-xyz456`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getPrivateLinkAccessAw:getPrivateLinkAccessAw": {
            "properties": {
                "account": {
                    "type": "string",
                    "description": "(Required String) The AWS account ID to enable for the Private Link Access. You can find your AWS account ID [here](https://console.aws.amazon.com/billing/home?#/account) under **My Account** in your AWS Management Console. Must be a **12 character string**.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "account"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getPrivateLinkAccessAzure:getPrivateLinkAccessAzure": {
            "properties": {
                "subscription": {
                    "type": "string",
                    "description": "(Required String) The Azure subscription ID to enable for the Private Link Access. You can find your Azure subscription ID in the subscription section of your [Microsoft Azure Portal](https://portal.azure.com/#blade/Microsoft_Azure_Billing/SubscriptionsBlade). Must be a valid **32 character UUID string**.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "subscription"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getPrivateLinkAccessEnvironment:getPrivateLinkAccessEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Private Link Access belongs to, for example, `env-xyz456`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getPrivateLinkAccessGcp:getPrivateLinkAccessGcp": {
            "properties": {
                "project": {
                    "type": "string",
                    "description": "(Required String) The GCP project ID to allow for Private Service Connect access. You can find your Google Cloud Project ID under **Project ID** section of your [Google Cloud Console dashboard](https://console.cloud.google.com/home/dashboard).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "project"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getPrivateLinkAccessNetwork:getPrivateLinkAccessNetwork": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Private Link Access belongs to, for example, `env-xyz456`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getSchemaRegistryClusterEnvironment:getSchemaRegistryClusterEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Schema Registry cluster belongs to, for example, `env-xyz456`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getSchemaRegistryClusterRegion:getSchemaRegistryClusterRegion": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Schema Registry cluster belongs to, for example, `env-xyz456`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getStreatGovernanceClusterEnvironment:getStreatGovernanceClusterEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Stream Governance cluster belongs to, for example, `env-xyz456`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getStreatGovernanceClusterRegion:getStreatGovernanceClusterRegion": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Stream Governance cluster belongs to, for example, `env-xyz456`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getTransitGatewayAttachmentAw:getTransitGatewayAttachmentAw": {
            "properties": {
                "enableCustomRoutes": {
                    "type": "boolean",
                    "description": "(Required String) Enable custom destination routes in Confluent Cloud. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ramResourceShareArn": {
                    "type": "string",
                    "description": "(Required String) The Amazon Resource Name (ARN) of the Resource Access Manager (RAM) Resource Share of the transit gateway your Confluent Cloud network attaches to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Required List of String) List of destination routes for traffic from Confluent VPC to customer VPC via Transit Gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "transitGatewayAttachmentId": {
                    "type": "string",
                    "description": "(Required String) The ID of the AWS Transit Gateway VPC Attachment that attaches Confluent VPC to Transit Gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "transitGatewayId": {
                    "type": "string",
                    "description": "(Required String) The ID of the AWS Transit Gateway that you want Confluent CLoud to be attached to. Must start with `tgw-`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enableCustomRoutes",
                "ramResourceShareArn",
                "routes",
                "transitGatewayAttachmentId",
                "transitGatewayId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getTransitGatewayAttachmentEnvironment:getTransitGatewayAttachmentEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Transit Gateway Attachment belongs to, for example, `env-xyz456`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getTransitGatewayAttachmentNetwork:getTransitGatewayAttachmentNetwork": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Transit Gateway Attachment belongs to, for example, `env-xyz456`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the confluent package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "cloudApiKey": {
                "type": "string",
                "description": "The Confluent Cloud API Key.\n",
                "secret": true
            },
            "cloudApiSecret": {
                "type": "string",
                "description": "The Confluent Cloud API Secret.\n",
                "secret": true
            },
            "endpoint": {
                "type": "string",
                "description": "The base endpoint of Confluent Cloud API.\n"
            },
            "kafkaApiKey": {
                "type": "string",
                "description": "The Kafka Cluster API Key.\n",
                "secret": true
            },
            "kafkaApiSecret": {
                "type": "string",
                "description": "The Kafka Cluster API Secret.\n",
                "secret": true
            },
            "kafkaRestEndpoint": {
                "type": "string",
                "description": "The Kafka Cluster REST Endpoint.\n"
            }
        },
        "inputProperties": {
            "cloudApiKey": {
                "type": "string",
                "description": "The Confluent Cloud API Key.\n",
                "secret": true
            },
            "cloudApiSecret": {
                "type": "string",
                "description": "The Confluent Cloud API Secret.\n",
                "secret": true
            },
            "endpoint": {
                "type": "string",
                "description": "The base endpoint of Confluent Cloud API.\n"
            },
            "kafkaApiKey": {
                "type": "string",
                "description": "The Kafka Cluster API Key.\n",
                "secret": true
            },
            "kafkaApiSecret": {
                "type": "string",
                "description": "The Kafka Cluster API Secret.\n",
                "secret": true
            },
            "kafkaRestEndpoint": {
                "type": "string",
                "description": "The Kafka Cluster REST Endpoint.\n"
            }
        }
    },
    "resources": {
        "confluentcloud:index/apiKey:ApiKey": {
            "description": "\n\n\n## Import\n\nYou can import a Kafka API Key by using the Environment ID and Kafka API Key ID in the format `\u003cEnvironment ID\u003e/\u003cKafka API Key ID\u003e`, for example$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\" $ export API_KEY_SECRET=\"\u003capi_key_secret\u003e\" Option #1Kafka API Key\n\n```sh\n $ pulumi import confluentcloud:index/apiKey:ApiKey example_kafka_api_key \"env-abc123/UTT6WDRXX7FHD2GV\"\n```\n\n You can import a Cloud API Key by using Cloud API Key ID, for example$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\" $ export API_KEY_SECRET=\"\u003capi_key_secret\u003e\" Option #2Cloud API Key\n\n```sh\n $ pulumi import confluentcloud:index/apiKey:ApiKey example_cloud_api_key \"4UEXOMMWIBE5KZQG\"\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A free-form description of the API Account.\n"
                },
                "disableWaitForReady": {
                    "type": "boolean",
                    "description": "An optional flag to disable wait-for-readiness on create. Its primary use case is for Cluster API Keys for private networking options when readiness check fails. Must be unset when importing. Defaults to `false`.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "A human-readable name for the API Key.\n"
                },
                "managedResource": {
                    "$ref": "#/types/confluentcloud:index/ApiKeyManagedResource:ApiKeyManagedResource",
                    "description": "The resource associated with this object. The only resource that is supported is 'cmk.v2.KafkaCluster'.\n"
                },
                "owner": {
                    "$ref": "#/types/confluentcloud:index/ApiKeyOwner:ApiKeyOwner",
                    "description": "The owner to which the API Key belongs. The owner can be one of 'iam.v2.User', 'iam.v2.ServiceAccount'.\n"
                },
                "secret": {
                    "type": "string",
                    "description": "(Required String, Sensitive) The secret of the API Key.\n",
                    "secret": true
                }
            },
            "required": [
                "displayName",
                "owner",
                "secret"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A free-form description of the API Account.\n"
                },
                "disableWaitForReady": {
                    "type": "boolean",
                    "description": "An optional flag to disable wait-for-readiness on create. Its primary use case is for Cluster API Keys for private networking options when readiness check fails. Must be unset when importing. Defaults to `false`.\n",
                    "willReplaceOnChanges": true
                },
                "displayName": {
                    "type": "string",
                    "description": "A human-readable name for the API Key.\n"
                },
                "managedResource": {
                    "$ref": "#/types/confluentcloud:index/ApiKeyManagedResource:ApiKeyManagedResource",
                    "description": "The resource associated with this object. The only resource that is supported is 'cmk.v2.KafkaCluster'.\n",
                    "willReplaceOnChanges": true
                },
                "owner": {
                    "$ref": "#/types/confluentcloud:index/ApiKeyOwner:ApiKeyOwner",
                    "description": "The owner to which the API Key belongs. The owner can be one of 'iam.v2.User', 'iam.v2.ServiceAccount'.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "owner"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApiKey resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A free-form description of the API Account.\n"
                    },
                    "disableWaitForReady": {
                        "type": "boolean",
                        "description": "An optional flag to disable wait-for-readiness on create. Its primary use case is for Cluster API Keys for private networking options when readiness check fails. Must be unset when importing. Defaults to `false`.\n",
                        "willReplaceOnChanges": true
                    },
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the API Key.\n"
                    },
                    "managedResource": {
                        "$ref": "#/types/confluentcloud:index/ApiKeyManagedResource:ApiKeyManagedResource",
                        "description": "The resource associated with this object. The only resource that is supported is 'cmk.v2.KafkaCluster'.\n",
                        "willReplaceOnChanges": true
                    },
                    "owner": {
                        "$ref": "#/types/confluentcloud:index/ApiKeyOwner:ApiKeyOwner",
                        "description": "The owner to which the API Key belongs. The owner can be one of 'iam.v2.User', 'iam.v2.ServiceAccount'.\n",
                        "willReplaceOnChanges": true
                    },
                    "secret": {
                        "type": "string",
                        "description": "(Required String, Sensitive) The secret of the API Key.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/clusterLink:ClusterLink": {
            "description": "\n\n\n## Import\n\nYou can import a Kafka mirror topic by using the cluster link name, cluster link mode, cluster link connection mode, source Kafka cluster ID, and destination Kafka cluster ID, in the format `\u003cCluster link name\u003e/\u003cCluster link mode\u003e/\u003cCluster connection mode\u003e/\u003cSource Kafka cluster ID\u003e/\u003cDestination Kafka cluster ID\u003e`, for example$ export IMPORT_SOURCE_KAFKA_BOOTSTRAP_ENDPOINT=\"\u003csource_kafka_bootstrap_endpoint\u003e\" $ export IMPORT_SOURCE_KAFKA_API_KEY=\"\u003csource_kafka_api_key\u003e\" $ export IMPORT_SOURCE_KAFKA_API_SECRET=\"\u003csource_kafka_api_secret\u003e\" $ export IMPORT_DESTINATION_KAFKA_REST_ENDPOINT=\"\u003cdestination_kafka_rest_endpoint\u003e\" $ export IMPORT_DESTINATION_KAFKA_API_KEY=\"\u003cdestination_kafka_api_key\u003e\" $ export IMPORT_DESTINATION_KAFKA_API_SECRET=\"\u003cdestination_kafka_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/clusterLink:ClusterLink my_cluster_link my-cluster-link/DESTINATION/OUTBOUND/lkc-abc123/lkc-xyz456\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "connectionMode": {
                    "type": "string",
                    "description": "The connection mode of the cluster link. The supported values are `\"INBOUND\"` and `\"OUTBOUND\"`. Defaults to `\"OUTBOUND\"`.\n"
                },
                "destinationKafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/ClusterLinkDestinationKafkaCluster:ClusterLinkDestinationKafkaCluster"
                },
                "link": {
                    "type": "string",
                    "description": "The name of the cluster link, for example, `my-cluster-link`.\n"
                },
                "linkMode": {
                    "type": "string",
                    "description": "The mode of the cluster link. The supported values are `\"DESTINATION\"` and `\"SOURCE\"`. Defaults to `\"DESTINATION\"`.\n"
                },
                "sourceKafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/ClusterLinkSourceKafkaCluster:ClusterLinkSourceKafkaCluster"
                }
            },
            "required": [
                "destinationKafkaCluster",
                "link",
                "sourceKafkaCluster"
            ],
            "inputProperties": {
                "connectionMode": {
                    "type": "string",
                    "description": "The connection mode of the cluster link. The supported values are `\"INBOUND\"` and `\"OUTBOUND\"`. Defaults to `\"OUTBOUND\"`.\n",
                    "willReplaceOnChanges": true
                },
                "destinationKafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/ClusterLinkDestinationKafkaCluster:ClusterLinkDestinationKafkaCluster"
                },
                "link": {
                    "type": "string",
                    "description": "The name of the cluster link, for example, `my-cluster-link`.\n",
                    "willReplaceOnChanges": true
                },
                "linkMode": {
                    "type": "string",
                    "description": "The mode of the cluster link. The supported values are `\"DESTINATION\"` and `\"SOURCE\"`. Defaults to `\"DESTINATION\"`.\n",
                    "willReplaceOnChanges": true
                },
                "sourceKafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/ClusterLinkSourceKafkaCluster:ClusterLinkSourceKafkaCluster"
                }
            },
            "requiredInputs": [
                "destinationKafkaCluster",
                "sourceKafkaCluster"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ClusterLink resources.\n",
                "properties": {
                    "connectionMode": {
                        "type": "string",
                        "description": "The connection mode of the cluster link. The supported values are `\"INBOUND\"` and `\"OUTBOUND\"`. Defaults to `\"OUTBOUND\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "destinationKafkaCluster": {
                        "$ref": "#/types/confluentcloud:index/ClusterLinkDestinationKafkaCluster:ClusterLinkDestinationKafkaCluster"
                    },
                    "link": {
                        "type": "string",
                        "description": "The name of the cluster link, for example, `my-cluster-link`.\n",
                        "willReplaceOnChanges": true
                    },
                    "linkMode": {
                        "type": "string",
                        "description": "The mode of the cluster link. The supported values are `\"DESTINATION\"` and `\"SOURCE\"`. Defaults to `\"DESTINATION\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "sourceKafkaCluster": {
                        "$ref": "#/types/confluentcloud:index/ClusterLinkSourceKafkaCluster:ClusterLinkSourceKafkaCluster"
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/connector:Connector": {
            "description": "\n\n\n## Import\n\nYou can import a connector by using Environment ID, Kafka cluster ID, and connector's name, in the format `\u003cEnvironment ID\u003e/\u003cKafka cluster ID\u003e/\u003cConnector name\u003e`, for example$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/connector:Connector my_connector \"env-abc123/lkc-abc123/S3_SINKConnector_0\"\n```\n\n ",
            "properties": {
                "configNonsensitive": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Block for custom *nonsensitive* configuration properties that are *not* labelled with \"Type: password\" under \"Configuration Properties\" section in [the docs](https://docs.confluent.io/cloud/current/connectors/index.html):\n"
                },
                "configSensitive": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Block for custom *sensitive* configuration properties that are labelled with \"Type: password\" under \"Configuration Properties\" section in [the docs](https://docs.confluent.io/cloud/current/connectors/index.html):\n",
                    "secret": true
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/ConnectorEnvironment:ConnectorEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n"
                },
                "kafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/ConnectorKafkaCluster:ConnectorKafkaCluster"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the connector (one of `\"NONE\"`, `\"PROVISIONING\"`, `\"RUNNING\"`, `\"DEGRADED\"`, `\"FAILED\"`, `\"PAUSED\"`, `\"DELETED\"`). Pausing (`\"RUNNING\" \u003e \"PAUSED\"`) and resuming (`\"PAUSED\" \u003e \"RUNNING\"`) a connector is supported via an update operation.\n"
                }
            },
            "required": [
                "configNonsensitive",
                "configSensitive",
                "environment",
                "kafkaCluster",
                "status"
            ],
            "inputProperties": {
                "configNonsensitive": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Block for custom *nonsensitive* configuration properties that are *not* labelled with \"Type: password\" under \"Configuration Properties\" section in [the docs](https://docs.confluent.io/cloud/current/connectors/index.html):\n"
                },
                "configSensitive": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Block for custom *sensitive* configuration properties that are labelled with \"Type: password\" under \"Configuration Properties\" section in [the docs](https://docs.confluent.io/cloud/current/connectors/index.html):\n",
                    "secret": true
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/ConnectorEnvironment:ConnectorEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                    "willReplaceOnChanges": true
                },
                "kafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/ConnectorKafkaCluster:ConnectorKafkaCluster",
                    "willReplaceOnChanges": true
                },
                "status": {
                    "type": "string",
                    "description": "The status of the connector (one of `\"NONE\"`, `\"PROVISIONING\"`, `\"RUNNING\"`, `\"DEGRADED\"`, `\"FAILED\"`, `\"PAUSED\"`, `\"DELETED\"`). Pausing (`\"RUNNING\" \u003e \"PAUSED\"`) and resuming (`\"PAUSED\" \u003e \"RUNNING\"`) a connector is supported via an update operation.\n"
                }
            },
            "requiredInputs": [
                "configNonsensitive",
                "environment",
                "kafkaCluster"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Connector resources.\n",
                "properties": {
                    "configNonsensitive": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Block for custom *nonsensitive* configuration properties that are *not* labelled with \"Type: password\" under \"Configuration Properties\" section in [the docs](https://docs.confluent.io/cloud/current/connectors/index.html):\n"
                    },
                    "configSensitive": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Block for custom *sensitive* configuration properties that are labelled with \"Type: password\" under \"Configuration Properties\" section in [the docs](https://docs.confluent.io/cloud/current/connectors/index.html):\n",
                        "secret": true
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/ConnectorEnvironment:ConnectorEnvironment",
                        "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                        "willReplaceOnChanges": true
                    },
                    "kafkaCluster": {
                        "$ref": "#/types/confluentcloud:index/ConnectorKafkaCluster:ConnectorKafkaCluster",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the connector (one of `\"NONE\"`, `\"PROVISIONING\"`, `\"RUNNING\"`, `\"DEGRADED\"`, `\"FAILED\"`, `\"PAUSED\"`, `\"DELETED\"`). Pausing (`\"RUNNING\" \u003e \"PAUSED\"`) and resuming (`\"PAUSED\" \u003e \"RUNNING\"`) a connector is supported via an update operation.\n"
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/environment:Environment": {
            "description": "\n\n\n## Import\n\nYou can import an Environment by using Environment ID, for example$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/environment:Environment my_env env-abc123\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "A human-readable name for the Environment. Start and end the name with alphanumeric characters, for example, \"Development\". The name can contain hyphens and underscores.\n"
                },
                "resourceName": {
                    "type": "string",
                    "description": "(Required String) The Confluent Resource Name of the Environment, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123`.\n"
                }
            },
            "required": [
                "displayName",
                "resourceName"
            ],
            "inputProperties": {
                "displayName": {
                    "type": "string",
                    "description": "A human-readable name for the Environment. Start and end the name with alphanumeric characters, for example, \"Development\". The name can contain hyphens and underscores.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Environment resources.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the Environment. Start and end the name with alphanumeric characters, for example, \"Development\". The name can contain hyphens and underscores.\n"
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "(Required String) The Confluent Resource Name of the Environment, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123`.\n"
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/identityPool:IdentityPool": {
            "description": "[![Limited Availability](https://img.shields.io/badge/Lifecycle%20Stage-Limited%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy) [![Request Access To OAuth API](https://img.shields.io/badge/-Request%20Access%20To%20OAuth%20API-%23bc8540)](mailto:ccloud-api-access+iam-v2-closed-preview@confluent.io?subject=Request%20to%20join%20OAuth%20API%20Closed%20Preview\u0026body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Closed%20Preview%20for%20iam/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)\n\n`confluentcloud.IdentityPool` provides an Identity Pool resource that enables creating, editing, and deleting identity pools on Confluent Cloud.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Example Identity Pool to be used with Azure AD\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst azure = new confluentcloud.IdentityProvider(\"azure\", {\n    displayName: \"My OIDC Provider: Azure AD\",\n    description: \"My description\",\n    issuer: \"https://login.microsoftonline.com/{tenant_id}/v2.0\",\n    jwksUri: \"https://login.microsoftonline.com/common/discovery/v2.0/keys\",\n});\nconst example = new confluentcloud.IdentityPool(\"example\", {\n    identityProvider: {\n        id: azure.id,\n    },\n    displayName: \"My Identity Pool\",\n    description: \"Prod Access to Kafka clusters to Release Engineering\",\n    identityClaim: \"claims.sub\",\n    filter: \"claims.aud==\\\"confluent\\\" \u0026\u0026 claims.group!=\\\"invalid_group\\\"\",\n});\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nazure = confluentcloud.IdentityProvider(\"azure\",\n    display_name=\"My OIDC Provider: Azure AD\",\n    description=\"My description\",\n    issuer=\"https://login.microsoftonline.com/{tenant_id}/v2.0\",\n    jwks_uri=\"https://login.microsoftonline.com/common/discovery/v2.0/keys\")\nexample = confluentcloud.IdentityPool(\"example\",\n    identity_provider=confluentcloud.IdentityPoolIdentityProviderArgs(\n        id=azure.id,\n    ),\n    display_name=\"My Identity Pool\",\n    description=\"Prod Access to Kafka clusters to Release Engineering\",\n    identity_claim=\"claims.sub\",\n    filter=\"claims.aud==\\\"confluent\\\" \u0026\u0026 claims.group!=\\\"invalid_group\\\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var azure = new ConfluentCloud.IdentityProvider(\"azure\", new()\n    {\n        DisplayName = \"My OIDC Provider: Azure AD\",\n        Description = \"My description\",\n        Issuer = \"https://login.microsoftonline.com/{tenant_id}/v2.0\",\n        JwksUri = \"https://login.microsoftonline.com/common/discovery/v2.0/keys\",\n    });\n\n    var example = new ConfluentCloud.IdentityPool(\"example\", new()\n    {\n        IdentityProvider = new ConfluentCloud.Inputs.IdentityPoolIdentityProviderArgs\n        {\n            Id = azure.Id,\n        },\n        DisplayName = \"My Identity Pool\",\n        Description = \"Prod Access to Kafka clusters to Release Engineering\",\n        IdentityClaim = \"claims.sub\",\n        Filter = \"claims.aud==\\\"confluent\\\" \u0026\u0026 claims.group!=\\\"invalid_group\\\"\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tazure, err := confluentcloud.NewIdentityProvider(ctx, \"azure\", \u0026confluentcloud.IdentityProviderArgs{\n\t\t\tDisplayName: pulumi.String(\"My OIDC Provider: Azure AD\"),\n\t\t\tDescription: pulumi.String(\"My description\"),\n\t\t\tIssuer:      pulumi.String(\"https://login.microsoftonline.com/{tenant_id}/v2.0\"),\n\t\t\tJwksUri:     pulumi.String(\"https://login.microsoftonline.com/common/discovery/v2.0/keys\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = confluentcloud.NewIdentityPool(ctx, \"example\", \u0026confluentcloud.IdentityPoolArgs{\n\t\t\tIdentityProvider: \u0026IdentityPoolIdentityProviderArgs{\n\t\t\t\tId: azure.ID(),\n\t\t\t},\n\t\t\tDisplayName:   pulumi.String(\"My Identity Pool\"),\n\t\t\tDescription:   pulumi.String(\"Prod Access to Kafka clusters to Release Engineering\"),\n\t\t\tIdentityClaim: pulumi.String(\"claims.sub\"),\n\t\t\tFilter:        pulumi.String(\"claims.aud==\\\"confluent\\\" \u0026\u0026 claims.group!=\\\"invalid_group\\\"\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.IdentityProvider;\nimport com.pulumi.confluentcloud.IdentityProviderArgs;\nimport com.pulumi.confluentcloud.IdentityPool;\nimport com.pulumi.confluentcloud.IdentityPoolArgs;\nimport com.pulumi.confluentcloud.inputs.IdentityPoolIdentityProviderArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var azure = new IdentityProvider(\"azure\", IdentityProviderArgs.builder()        \n            .displayName(\"My OIDC Provider: Azure AD\")\n            .description(\"My description\")\n            .issuer(\"https://login.microsoftonline.com/{tenant_id}/v2.0\")\n            .jwksUri(\"https://login.microsoftonline.com/common/discovery/v2.0/keys\")\n            .build());\n\n        var example = new IdentityPool(\"example\", IdentityPoolArgs.builder()        \n            .identityProvider(IdentityPoolIdentityProviderArgs.builder()\n                .id(azure.id())\n                .build())\n            .displayName(\"My Identity Pool\")\n            .description(\"Prod Access to Kafka clusters to Release Engineering\")\n            .identityClaim(\"claims.sub\")\n            .filter(\"claims.aud==\\\"confluent\\\" \u0026\u0026 claims.group!=\\\"invalid_group\\\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  azure:\n    type: confluentcloud:IdentityProvider\n    properties:\n      displayName: 'My OIDC Provider: Azure AD'\n      description: My description\n      issuer: https://login.microsoftonline.com/{tenant_id}/v2.0\n      jwksUri: https://login.microsoftonline.com/common/discovery/v2.0/keys\n  example:\n    type: confluentcloud:IdentityPool\n    properties:\n      identityProvider:\n        id: ${azure.id}\n      displayName: My Identity Pool\n      description: Prod Access to Kafka clusters to Release Engineering\n      identityClaim: claims.sub\n      filter: claims.aud==\"confluent\" \u0026\u0026 claims.group!=\"invalid_group\"\n```\n{{% /example %}}\n{{% example %}}\n### Example Identity Pool to be used with Okta\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst okta = new confluentcloud.IdentityProvider(\"okta\", {\n    displayName: \"My OIDC Provider: Okta\",\n    description: \"My description\",\n    issuer: \"https://mycompany.okta.com/oauth2/default\",\n    jwksUri: \"https://mycompany.okta.com/oauth2/default/v1/keys\",\n});\nconst example = new confluentcloud.IdentityPool(\"example\", {\n    identityProvider: {\n        id: okta.id,\n    },\n    displayName: \"My Identity Pool\",\n    description: \"Prod Access to Kafka clusters to Release Engineering\",\n    identityClaim: \"claims.sub\",\n    filter: \"claims.aud==\\\"confluent\\\" \u0026\u0026 claims.group!=\\\"invalid_group\\\"\",\n});\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nokta = confluentcloud.IdentityProvider(\"okta\",\n    display_name=\"My OIDC Provider: Okta\",\n    description=\"My description\",\n    issuer=\"https://mycompany.okta.com/oauth2/default\",\n    jwks_uri=\"https://mycompany.okta.com/oauth2/default/v1/keys\")\nexample = confluentcloud.IdentityPool(\"example\",\n    identity_provider=confluentcloud.IdentityPoolIdentityProviderArgs(\n        id=okta.id,\n    ),\n    display_name=\"My Identity Pool\",\n    description=\"Prod Access to Kafka clusters to Release Engineering\",\n    identity_claim=\"claims.sub\",\n    filter=\"claims.aud==\\\"confluent\\\" \u0026\u0026 claims.group!=\\\"invalid_group\\\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var okta = new ConfluentCloud.IdentityProvider(\"okta\", new()\n    {\n        DisplayName = \"My OIDC Provider: Okta\",\n        Description = \"My description\",\n        Issuer = \"https://mycompany.okta.com/oauth2/default\",\n        JwksUri = \"https://mycompany.okta.com/oauth2/default/v1/keys\",\n    });\n\n    var example = new ConfluentCloud.IdentityPool(\"example\", new()\n    {\n        IdentityProvider = new ConfluentCloud.Inputs.IdentityPoolIdentityProviderArgs\n        {\n            Id = okta.Id,\n        },\n        DisplayName = \"My Identity Pool\",\n        Description = \"Prod Access to Kafka clusters to Release Engineering\",\n        IdentityClaim = \"claims.sub\",\n        Filter = \"claims.aud==\\\"confluent\\\" \u0026\u0026 claims.group!=\\\"invalid_group\\\"\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tokta, err := confluentcloud.NewIdentityProvider(ctx, \"okta\", \u0026confluentcloud.IdentityProviderArgs{\n\t\t\tDisplayName: pulumi.String(\"My OIDC Provider: Okta\"),\n\t\t\tDescription: pulumi.String(\"My description\"),\n\t\t\tIssuer:      pulumi.String(\"https://mycompany.okta.com/oauth2/default\"),\n\t\t\tJwksUri:     pulumi.String(\"https://mycompany.okta.com/oauth2/default/v1/keys\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = confluentcloud.NewIdentityPool(ctx, \"example\", \u0026confluentcloud.IdentityPoolArgs{\n\t\t\tIdentityProvider: \u0026IdentityPoolIdentityProviderArgs{\n\t\t\t\tId: okta.ID(),\n\t\t\t},\n\t\t\tDisplayName:   pulumi.String(\"My Identity Pool\"),\n\t\t\tDescription:   pulumi.String(\"Prod Access to Kafka clusters to Release Engineering\"),\n\t\t\tIdentityClaim: pulumi.String(\"claims.sub\"),\n\t\t\tFilter:        pulumi.String(\"claims.aud==\\\"confluent\\\" \u0026\u0026 claims.group!=\\\"invalid_group\\\"\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.IdentityProvider;\nimport com.pulumi.confluentcloud.IdentityProviderArgs;\nimport com.pulumi.confluentcloud.IdentityPool;\nimport com.pulumi.confluentcloud.IdentityPoolArgs;\nimport com.pulumi.confluentcloud.inputs.IdentityPoolIdentityProviderArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var okta = new IdentityProvider(\"okta\", IdentityProviderArgs.builder()        \n            .displayName(\"My OIDC Provider: Okta\")\n            .description(\"My description\")\n            .issuer(\"https://mycompany.okta.com/oauth2/default\")\n            .jwksUri(\"https://mycompany.okta.com/oauth2/default/v1/keys\")\n            .build());\n\n        var example = new IdentityPool(\"example\", IdentityPoolArgs.builder()        \n            .identityProvider(IdentityPoolIdentityProviderArgs.builder()\n                .id(okta.id())\n                .build())\n            .displayName(\"My Identity Pool\")\n            .description(\"Prod Access to Kafka clusters to Release Engineering\")\n            .identityClaim(\"claims.sub\")\n            .filter(\"claims.aud==\\\"confluent\\\" \u0026\u0026 claims.group!=\\\"invalid_group\\\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  okta:\n    type: confluentcloud:IdentityProvider\n    properties:\n      displayName: 'My OIDC Provider: Okta'\n      description: My description\n      issuer: https://mycompany.okta.com/oauth2/default\n      jwksUri: https://mycompany.okta.com/oauth2/default/v1/keys\n  example:\n    type: confluentcloud:IdentityPool\n    properties:\n      identityProvider:\n        id: ${okta.id}\n      displayName: My Identity Pool\n      description: Prod Access to Kafka clusters to Release Engineering\n      identityClaim: claims.sub\n      filter: claims.aud==\"confluent\" \u0026\u0026 claims.group!=\"invalid_group\"\n```\n\n{{% /example %}}\n{{% /examples %}}\n## External Documentation\n\n* [Use identity pools with your OAuth provider](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/identity-pools.html).\n\n\n## Import\n\nYou can import an Identity Pool by using Identity Provider ID and Identity Pool ID, in the format `\u003cIdentity Provider ID\u003e/\u003cIdentity Pool ID\u003e`. The following example shows how to import an Identity Pool$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/identityPool:IdentityPool example op-abc123/pool-xyz456\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A description for the Identity Pool.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "A human-readable name for the Identity Pool.\n"
                },
                "filter": {
                    "type": "string",
                    "description": "A filter expression in [Supported Common Expression Language (CEL)](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/identity-pools.html#supported-common-expression-language-cel-filters) that specifies which identities can authenticate using your identity pool (see [Set identity pool filters](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/identity-pools.html#set-identity-pool-filters) for more details).\n"
                },
                "identityClaim": {
                    "type": "string",
                    "description": "The JSON Web Token (JWT) claim to extract the authenticating identity to Confluent resources from (see [Registered Claim Names](https://datatracker.ietf.org/doc/html/rfc7519#section-4.1) for more details). This appears in the audit log records, showing, for example, that \"identity Z used identity pool X to access topic A\".\n"
                },
                "identityProvider": {
                    "$ref": "#/types/confluentcloud:index/IdentityPoolIdentityProvider:IdentityPoolIdentityProvider",
                    "description": "Identity Provider objects represent external OAuth/OpenID Connect providers within Confluent Cloud.\n"
                }
            },
            "required": [
                "description",
                "displayName",
                "filter",
                "identityClaim",
                "identityProvider"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A description for the Identity Pool.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "A human-readable name for the Identity Pool.\n"
                },
                "filter": {
                    "type": "string",
                    "description": "A filter expression in [Supported Common Expression Language (CEL)](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/identity-pools.html#supported-common-expression-language-cel-filters) that specifies which identities can authenticate using your identity pool (see [Set identity pool filters](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/identity-pools.html#set-identity-pool-filters) for more details).\n"
                },
                "identityClaim": {
                    "type": "string",
                    "description": "The JSON Web Token (JWT) claim to extract the authenticating identity to Confluent resources from (see [Registered Claim Names](https://datatracker.ietf.org/doc/html/rfc7519#section-4.1) for more details). This appears in the audit log records, showing, for example, that \"identity Z used identity pool X to access topic A\".\n"
                },
                "identityProvider": {
                    "$ref": "#/types/confluentcloud:index/IdentityPoolIdentityProvider:IdentityPoolIdentityProvider",
                    "description": "Identity Provider objects represent external OAuth/OpenID Connect providers within Confluent Cloud.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "description",
                "displayName",
                "filter",
                "identityClaim",
                "identityProvider"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IdentityPool resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A description for the Identity Pool.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the Identity Pool.\n"
                    },
                    "filter": {
                        "type": "string",
                        "description": "A filter expression in [Supported Common Expression Language (CEL)](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/identity-pools.html#supported-common-expression-language-cel-filters) that specifies which identities can authenticate using your identity pool (see [Set identity pool filters](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/identity-pools.html#set-identity-pool-filters) for more details).\n"
                    },
                    "identityClaim": {
                        "type": "string",
                        "description": "The JSON Web Token (JWT) claim to extract the authenticating identity to Confluent resources from (see [Registered Claim Names](https://datatracker.ietf.org/doc/html/rfc7519#section-4.1) for more details). This appears in the audit log records, showing, for example, that \"identity Z used identity pool X to access topic A\".\n"
                    },
                    "identityProvider": {
                        "$ref": "#/types/confluentcloud:index/IdentityPoolIdentityProvider:IdentityPoolIdentityProvider",
                        "description": "Identity Provider objects represent external OAuth/OpenID Connect providers within Confluent Cloud.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/identityProvider:IdentityProvider": {
            "description": "[![Limited Availability](https://img.shields.io/badge/Lifecycle%20Stage-Limited%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy) [![Request Access To OAuth API](https://img.shields.io/badge/-Request%20Access%20To%20OAuth%20API-%23bc8540)](mailto:ccloud-api-access+iam-v2-closed-preview@confluent.io?subject=Request%20to%20join%20OAuth%20API%20Closed%20Preview\u0026body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Closed%20Preview%20for%20iam/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)\n\n`confluentcloud.IdentityProvider` provides an Identity Provider resource that enables creating, editing, and deleting identity providers on Confluent Cloud.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Example Identity Provider: Azure AD\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluent from \"@pulumi/confluent\";\n\nconst azure = new confluent.IdentityProvider(\"azure\", {\n    description: \"My description\",\n    displayName: \"My OIDC Provider: Azure AD\",\n    issuer: \"https://login.microsoftonline.com/{tenant_id}/v2.0\",\n    jwksUri: \"https://login.microsoftonline.com/common/discovery/v2.0/keys\",\n});\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nazure = confluentcloud.IdentityProvider(\"azure\",\n    description=\"My description\",\n    display_name=\"My OIDC Provider: Azure AD\",\n    issuer=\"https://login.microsoftonline.com/{tenant_id}/v2.0\",\n    jwks_uri=\"https://login.microsoftonline.com/common/discovery/v2.0/keys\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var azure = new ConfluentCloud.IdentityProvider(\"azure\", new()\n    {\n        Description = \"My description\",\n        DisplayName = \"My OIDC Provider: Azure AD\",\n        Issuer = \"https://login.microsoftonline.com/{tenant_id}/v2.0\",\n        JwksUri = \"https://login.microsoftonline.com/common/discovery/v2.0/keys\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := confluentcloud.NewIdentityProvider(ctx, \"azure\", \u0026confluentcloud.IdentityProviderArgs{\n\t\t\tDescription: pulumi.String(\"My description\"),\n\t\t\tDisplayName: pulumi.String(\"My OIDC Provider: Azure AD\"),\n\t\t\tIssuer:      pulumi.String(\"https://login.microsoftonline.com/{tenant_id}/v2.0\"),\n\t\t\tJwksUri:     pulumi.String(\"https://login.microsoftonline.com/common/discovery/v2.0/keys\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.IdentityProvider;\nimport com.pulumi.confluentcloud.IdentityProviderArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var azure = new IdentityProvider(\"azure\", IdentityProviderArgs.builder()        \n            .description(\"My description\")\n            .displayName(\"My OIDC Provider: Azure AD\")\n            .issuer(\"https://login.microsoftonline.com/{tenant_id}/v2.0\")\n            .jwksUri(\"https://login.microsoftonline.com/common/discovery/v2.0/keys\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  azure:\n    type: confluentcloud:IdentityProvider\n    properties:\n      description: My description\n      displayName: 'My OIDC Provider: Azure AD'\n      issuer: https://login.microsoftonline.com/{tenant_id}/v2.0\n      jwksUri: https://login.microsoftonline.com/common/discovery/v2.0/keys\n```\n{{% /example %}}\n{{% example %}}\n### Example Identity Provider: Okta\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluent from \"@pulumi/confluent\";\n\nconst okta = new confluent.IdentityProvider(\"okta\", {\n    description: \"My description\",\n    displayName: \"My OIDC Provider: Okta\",\n    issuer: \"https://mycompany.okta.com/oauth2/default\",\n    jwksUri: \"https://mycompany.okta.com/oauth2/default/v1/keys\",\n});\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nokta = confluentcloud.IdentityProvider(\"okta\",\n    description=\"My description\",\n    display_name=\"My OIDC Provider: Okta\",\n    issuer=\"https://mycompany.okta.com/oauth2/default\",\n    jwks_uri=\"https://mycompany.okta.com/oauth2/default/v1/keys\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var okta = new ConfluentCloud.IdentityProvider(\"okta\", new()\n    {\n        Description = \"My description\",\n        DisplayName = \"My OIDC Provider: Okta\",\n        Issuer = \"https://mycompany.okta.com/oauth2/default\",\n        JwksUri = \"https://mycompany.okta.com/oauth2/default/v1/keys\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := confluentcloud.NewIdentityProvider(ctx, \"okta\", \u0026confluentcloud.IdentityProviderArgs{\n\t\t\tDescription: pulumi.String(\"My description\"),\n\t\t\tDisplayName: pulumi.String(\"My OIDC Provider: Okta\"),\n\t\t\tIssuer:      pulumi.String(\"https://mycompany.okta.com/oauth2/default\"),\n\t\t\tJwksUri:     pulumi.String(\"https://mycompany.okta.com/oauth2/default/v1/keys\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.IdentityProvider;\nimport com.pulumi.confluentcloud.IdentityProviderArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var okta = new IdentityProvider(\"okta\", IdentityProviderArgs.builder()        \n            .description(\"My description\")\n            .displayName(\"My OIDC Provider: Okta\")\n            .issuer(\"https://mycompany.okta.com/oauth2/default\")\n            .jwksUri(\"https://mycompany.okta.com/oauth2/default/v1/keys\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  okta:\n    type: confluentcloud:IdentityProvider\n    properties:\n      description: My description\n      displayName: 'My OIDC Provider: Okta'\n      issuer: https://mycompany.okta.com/oauth2/default\n      jwksUri: https://mycompany.okta.com/oauth2/default/v1/keys\n```\n\n{{% /example %}}\n{{% /examples %}}\n## External Documentation\n\n* [Authenticating with OAuth](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/overview.html).\n\n\n## Import\n\nYou can import an Identity Provider by using Identity Provider ID, for example$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/identityProvider:IdentityProvider example op-abc123\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A description for the Identity Provider.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "A human-readable name for the Identity Provider.\n"
                },
                "issuer": {
                    "type": "string",
                    "description": "A publicly reachable issuer URI for the Identity Provider. The unique issuer URI string represents the entity for issuing tokens.\n"
                },
                "jwksUri": {
                    "type": "string",
                    "description": "A publicly reachable JSON Web Key Set (JWKS) URI for the Identity Provider. A JSON Web Key Set (JWKS) provides a set of keys containing the public keys used to verify any JSON Web Token (JWT) issued by your OAuth 2.0 identity provider.\n"
                }
            },
            "required": [
                "description",
                "displayName",
                "issuer",
                "jwksUri"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A description for the Identity Provider.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "A human-readable name for the Identity Provider.\n"
                },
                "issuer": {
                    "type": "string",
                    "description": "A publicly reachable issuer URI for the Identity Provider. The unique issuer URI string represents the entity for issuing tokens.\n",
                    "willReplaceOnChanges": true
                },
                "jwksUri": {
                    "type": "string",
                    "description": "A publicly reachable JSON Web Key Set (JWKS) URI for the Identity Provider. A JSON Web Key Set (JWKS) provides a set of keys containing the public keys used to verify any JSON Web Token (JWT) issued by your OAuth 2.0 identity provider.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "description",
                "displayName",
                "issuer",
                "jwksUri"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IdentityProvider resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A description for the Identity Provider.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the Identity Provider.\n"
                    },
                    "issuer": {
                        "type": "string",
                        "description": "A publicly reachable issuer URI for the Identity Provider. The unique issuer URI string represents the entity for issuing tokens.\n",
                        "willReplaceOnChanges": true
                    },
                    "jwksUri": {
                        "type": "string",
                        "description": "A publicly reachable JSON Web Key Set (JWKS) URI for the Identity Provider. A JSON Web Key Set (JWKS) provides a set of keys containing the public keys used to verify any JSON Web Token (JWT) issued by your OAuth 2.0 identity provider.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/kafkaAcl:KafkaAcl": {
            "description": "\n\n\n## Import\n\nYou can import Kafka ACLs by using the Kafka cluster ID and attributes of `confluent_kafka_acl` resource in the format `\u003cKafka cluster ID\u003e/\u003cKafka ACL resource type\u003e#\u003cKafka ACL resource name\u003e#\u003cKafka ACL pattern type\u003e#\u003cKafka ACL principal\u003e#\u003cKafka ACL host\u003e#\u003cKafka ACL operation\u003e#\u003cKafka ACL permission\u003e`, for example$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\" $ export IMPORT_KAFKA_API_KEY=\"\u003ckafka_api_key\u003e\" $ export IMPORT_KAFKA_API_SECRET=\"\u003ckafka_api_secret\u003e\" $ export IMPORT_KAFKA_REST_ENDPOINT=\"\u003ckafka_rest_endpoint\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/kafkaAcl:KafkaAcl describe-cluster \"lkc-12345/CLUSTER#kafka-cluster#LITERAL#User:sa-xyz123#*#DESCRIBE#ALLOW\"\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/KafkaAclCredentials:KafkaAclCredentials",
                    "description": "The Cluster API Credentials.\n",
                    "secret": true
                },
                "host": {
                    "type": "string",
                    "description": "The host for the ACL. Should be set to `*` for Confluent Cloud.\n"
                },
                "kafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/KafkaAclKafkaCluster:KafkaAclKafkaCluster"
                },
                "operation": {
                    "type": "string",
                    "description": "The operation type for the ACL. Accepted values are: `UNKNOWN`, `ANY`, `ALL`, `READ`, `WRITE`, `CREATE`, `DELETE`, `ALTER`, `DESCRIBE`, `CLUSTER_ACTION`, `DESCRIBE_CONFIGS`, `ALTER_CONFIGS`, and `IDEMPOTENT_WRITE`.  See [Authorization using ACLs](https://docs.confluent.io/platform/current/kafka/authorization.html#operations) to find mappings of `(resource_type, operation)` to one or more Kafka APIs or request types.\n"
                },
                "patternType": {
                    "type": "string",
                    "description": "The pattern type for the ACL. Accepted values are: `LITERAL` and `PREFIXED`.\n"
                },
                "permission": {
                    "type": "string",
                    "description": "The permission for the ACL. Accepted values are: `UNKNOWN`, `ANY`, `DENY`, and `ALLOW`.\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The principal for the ACL.\n"
                },
                "resourceName": {
                    "type": "string",
                    "description": "The resource name for the ACL. Must be `kafka-cluster` if `resource_type` equals to `CLUSTER`.\n"
                },
                "resourceType": {
                    "type": "string",
                    "description": "The type of the resource. Accepted values are: `UNKNOWN`, `ANY`, `TOPIC`, `GROUP`, `CLUSTER`, `TRANSACTIONAL_ID`, `DELEGATION_TOKEN`. See [Authorization using ACLs](https://docs.confluent.io/platform/current/kafka/authorization.html#operations) to find definitions of resource types and mappings of `(resource_type, operation)` to one or more Kafka APIs or request types.\n"
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`.\n"
                }
            },
            "required": [
                "host",
                "kafkaCluster",
                "operation",
                "patternType",
                "permission",
                "principal",
                "resourceName",
                "resourceType"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/KafkaAclCredentials:KafkaAclCredentials",
                    "description": "The Cluster API Credentials.\n",
                    "secret": true
                },
                "host": {
                    "type": "string",
                    "description": "The host for the ACL. Should be set to `*` for Confluent Cloud.\n",
                    "willReplaceOnChanges": true
                },
                "kafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/KafkaAclKafkaCluster:KafkaAclKafkaCluster",
                    "willReplaceOnChanges": true
                },
                "operation": {
                    "type": "string",
                    "description": "The operation type for the ACL. Accepted values are: `UNKNOWN`, `ANY`, `ALL`, `READ`, `WRITE`, `CREATE`, `DELETE`, `ALTER`, `DESCRIBE`, `CLUSTER_ACTION`, `DESCRIBE_CONFIGS`, `ALTER_CONFIGS`, and `IDEMPOTENT_WRITE`.  See [Authorization using ACLs](https://docs.confluent.io/platform/current/kafka/authorization.html#operations) to find mappings of `(resource_type, operation)` to one or more Kafka APIs or request types.\n",
                    "willReplaceOnChanges": true
                },
                "patternType": {
                    "type": "string",
                    "description": "The pattern type for the ACL. Accepted values are: `LITERAL` and `PREFIXED`.\n",
                    "willReplaceOnChanges": true
                },
                "permission": {
                    "type": "string",
                    "description": "The permission for the ACL. Accepted values are: `UNKNOWN`, `ANY`, `DENY`, and `ALLOW`.\n",
                    "willReplaceOnChanges": true
                },
                "principal": {
                    "type": "string",
                    "description": "The principal for the ACL.\n",
                    "willReplaceOnChanges": true
                },
                "resourceName": {
                    "type": "string",
                    "description": "The resource name for the ACL. Must be `kafka-cluster` if `resource_type` equals to `CLUSTER`.\n",
                    "willReplaceOnChanges": true
                },
                "resourceType": {
                    "type": "string",
                    "description": "The type of the resource. Accepted values are: `UNKNOWN`, `ANY`, `TOPIC`, `GROUP`, `CLUSTER`, `TRANSACTIONAL_ID`, `DELEGATION_TOKEN`. See [Authorization using ACLs](https://docs.confluent.io/platform/current/kafka/authorization.html#operations) to find definitions of resource types and mappings of `(resource_type, operation)` to one or more Kafka APIs or request types.\n",
                    "willReplaceOnChanges": true
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "host",
                "kafkaCluster",
                "operation",
                "patternType",
                "permission",
                "principal",
                "resourceName",
                "resourceType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KafkaAcl resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/KafkaAclCredentials:KafkaAclCredentials",
                        "description": "The Cluster API Credentials.\n",
                        "secret": true
                    },
                    "host": {
                        "type": "string",
                        "description": "The host for the ACL. Should be set to `*` for Confluent Cloud.\n",
                        "willReplaceOnChanges": true
                    },
                    "kafkaCluster": {
                        "$ref": "#/types/confluentcloud:index/KafkaAclKafkaCluster:KafkaAclKafkaCluster",
                        "willReplaceOnChanges": true
                    },
                    "operation": {
                        "type": "string",
                        "description": "The operation type for the ACL. Accepted values are: `UNKNOWN`, `ANY`, `ALL`, `READ`, `WRITE`, `CREATE`, `DELETE`, `ALTER`, `DESCRIBE`, `CLUSTER_ACTION`, `DESCRIBE_CONFIGS`, `ALTER_CONFIGS`, and `IDEMPOTENT_WRITE`.  See [Authorization using ACLs](https://docs.confluent.io/platform/current/kafka/authorization.html#operations) to find mappings of `(resource_type, operation)` to one or more Kafka APIs or request types.\n",
                        "willReplaceOnChanges": true
                    },
                    "patternType": {
                        "type": "string",
                        "description": "The pattern type for the ACL. Accepted values are: `LITERAL` and `PREFIXED`.\n",
                        "willReplaceOnChanges": true
                    },
                    "permission": {
                        "type": "string",
                        "description": "The permission for the ACL. Accepted values are: `UNKNOWN`, `ANY`, `DENY`, and `ALLOW`.\n",
                        "willReplaceOnChanges": true
                    },
                    "principal": {
                        "type": "string",
                        "description": "The principal for the ACL.\n",
                        "willReplaceOnChanges": true
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "The resource name for the ACL. Must be `kafka-cluster` if `resource_type` equals to `CLUSTER`.\n",
                        "willReplaceOnChanges": true
                    },
                    "resourceType": {
                        "type": "string",
                        "description": "The type of the resource. Accepted values are: `UNKNOWN`, `ANY`, `TOPIC`, `GROUP`, `CLUSTER`, `TRANSACTIONAL_ID`, `DELEGATION_TOKEN`. See [Authorization using ACLs](https://docs.confluent.io/platform/current/kafka/authorization.html#operations) to find definitions of resource types and mappings of `(resource_type, operation)` to one or more Kafka APIs or request types.\n",
                        "willReplaceOnChanges": true
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "The REST endpoint of the Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/kafkaClientQuota:KafkaClientQuota": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst example = new confluentcloud.KafkaClientQuota(\"example\", {\n    displayName: \"test-quota\",\n    description: \"Test Quota\",\n    throughput: {\n        ingressByteRate: \"100\",\n        egressByteRate: \"200\",\n    },\n    principals: [\n        confluent_service_account.app_manager.id,\n        confluent_service_account.app_manager_2.id,\n    ],\n    kafkaCluster: {\n        id: confluent_kafka_cluster.dedicated.id,\n    },\n    environment: {\n        id: confluent_environment.development.id,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample = confluentcloud.KafkaClientQuota(\"example\",\n    display_name=\"test-quota\",\n    description=\"Test Quota\",\n    throughput=confluentcloud.KafkaClientQuotaThroughputArgs(\n        ingress_byte_rate=\"100\",\n        egress_byte_rate=\"200\",\n    ),\n    principals=[\n        confluent_service_account[\"app_manager\"][\"id\"],\n        confluent_service_account[\"app_manager_2\"][\"id\"],\n    ],\n    kafka_cluster=confluentcloud.KafkaClientQuotaKafkaClusterArgs(\n        id=confluent_kafka_cluster[\"dedicated\"][\"id\"],\n    ),\n    environment=confluentcloud.KafkaClientQuotaEnvironmentArgs(\n        id=confluent_environment[\"development\"][\"id\"],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new ConfluentCloud.KafkaClientQuota(\"example\", new()\n    {\n        DisplayName = \"test-quota\",\n        Description = \"Test Quota\",\n        Throughput = new ConfluentCloud.Inputs.KafkaClientQuotaThroughputArgs\n        {\n            IngressByteRate = \"100\",\n            EgressByteRate = \"200\",\n        },\n        Principals = new[]\n        {\n            confluent_service_account.App_manager.Id,\n            confluent_service_account.App_manager_2.Id,\n        },\n        KafkaCluster = new ConfluentCloud.Inputs.KafkaClientQuotaKafkaClusterArgs\n        {\n            Id = confluent_kafka_cluster.Dedicated.Id,\n        },\n        Environment = new ConfluentCloud.Inputs.KafkaClientQuotaEnvironmentArgs\n        {\n            Id = confluent_environment.Development.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := confluentcloud.NewKafkaClientQuota(ctx, \"example\", \u0026confluentcloud.KafkaClientQuotaArgs{\n\t\t\tDisplayName: pulumi.String(\"test-quota\"),\n\t\t\tDescription: pulumi.String(\"Test Quota\"),\n\t\t\tThroughput: \u0026KafkaClientQuotaThroughputArgs{\n\t\t\t\tIngressByteRate: pulumi.String(\"100\"),\n\t\t\t\tEgressByteRate:  pulumi.String(\"200\"),\n\t\t\t},\n\t\t\tPrincipals: pulumi.StringArray{\n\t\t\t\tpulumi.Any(confluent_service_account.App_manager.Id),\n\t\t\t\tpulumi.Any(confluent_service_account.App_manager_2.Id),\n\t\t\t},\n\t\t\tKafkaCluster: \u0026KafkaClientQuotaKafkaClusterArgs{\n\t\t\t\tId: pulumi.Any(confluent_kafka_cluster.Dedicated.Id),\n\t\t\t},\n\t\t\tEnvironment: \u0026KafkaClientQuotaEnvironmentArgs{\n\t\t\t\tId: pulumi.Any(confluent_environment.Development.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.KafkaClientQuota;\nimport com.pulumi.confluentcloud.KafkaClientQuotaArgs;\nimport com.pulumi.confluentcloud.inputs.KafkaClientQuotaThroughputArgs;\nimport com.pulumi.confluentcloud.inputs.KafkaClientQuotaKafkaClusterArgs;\nimport com.pulumi.confluentcloud.inputs.KafkaClientQuotaEnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new KafkaClientQuota(\"example\", KafkaClientQuotaArgs.builder()        \n            .displayName(\"test-quota\")\n            .description(\"Test Quota\")\n            .throughput(KafkaClientQuotaThroughputArgs.builder()\n                .ingressByteRate(\"100\")\n                .egressByteRate(\"200\")\n                .build())\n            .principals(            \n                confluent_service_account.app_manager().id(),\n                confluent_service_account.app_manager_2().id())\n            .kafkaCluster(KafkaClientQuotaKafkaClusterArgs.builder()\n                .id(confluent_kafka_cluster.dedicated().id())\n                .build())\n            .environment(KafkaClientQuotaEnvironmentArgs.builder()\n                .id(confluent_environment.development().id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: confluentcloud:KafkaClientQuota\n    properties:\n      displayName: test-quota\n      description: Test Quota\n      throughput:\n        ingressByteRate: 100\n        egressByteRate: 200\n      principals:\n        - ${confluent_service_account.app_manager.id}\n        - ${confluent_service_account.app_manager_2.id}\n      kafkaCluster:\n        id: ${confluent_kafka_cluster.dedicated.id}\n      environment:\n        id: ${confluent_environment.development.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nYou can import a Kafka Client Quota by using Kafka Client Quota ID. The following example shows how to import a Kafka Client Quota ID$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/kafkaClientQuota:KafkaClientQuota example cq-abc123\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Kafka Client Quota.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the Kafka Client Quota.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/KafkaClientQuotaEnvironment:KafkaClientQuotaEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n"
                },
                "kafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/KafkaClientQuotaKafkaCluster:KafkaClientQuotaKafkaCluster"
                },
                "principals": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of principals (i.e., service accounts or identity pools) to apply the Kafka Client Quota to. Use the special name, \"default\", to represent the default quota for all users and service accounts.\n"
                },
                "throughput": {
                    "$ref": "#/types/confluentcloud:index/KafkaClientQuotaThroughput:KafkaClientQuotaThroughput",
                    "description": "Block for representing a Kafka Quota.\n"
                }
            },
            "required": [
                "displayName",
                "environment",
                "kafkaCluster",
                "principals",
                "throughput"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Kafka Client Quota.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the Kafka Client Quota.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/KafkaClientQuotaEnvironment:KafkaClientQuotaEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                    "willReplaceOnChanges": true
                },
                "kafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/KafkaClientQuotaKafkaCluster:KafkaClientQuotaKafkaCluster",
                    "willReplaceOnChanges": true
                },
                "principals": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of principals (i.e., service accounts or identity pools) to apply the Kafka Client Quota to. Use the special name, \"default\", to represent the default quota for all users and service accounts.\n"
                },
                "throughput": {
                    "$ref": "#/types/confluentcloud:index/KafkaClientQuotaThroughput:KafkaClientQuotaThroughput",
                    "description": "Block for representing a Kafka Quota.\n"
                }
            },
            "requiredInputs": [
                "displayName",
                "environment",
                "kafkaCluster",
                "principals",
                "throughput"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KafkaClientQuota resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the Kafka Client Quota.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name of the Kafka Client Quota.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/KafkaClientQuotaEnvironment:KafkaClientQuotaEnvironment",
                        "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                        "willReplaceOnChanges": true
                    },
                    "kafkaCluster": {
                        "$ref": "#/types/confluentcloud:index/KafkaClientQuotaKafkaCluster:KafkaClientQuotaKafkaCluster",
                        "willReplaceOnChanges": true
                    },
                    "principals": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of principals (i.e., service accounts or identity pools) to apply the Kafka Client Quota to. Use the special name, \"default\", to represent the default quota for all users and service accounts.\n"
                    },
                    "throughput": {
                        "$ref": "#/types/confluentcloud:index/KafkaClientQuotaThroughput:KafkaClientQuotaThroughput",
                        "description": "Block for representing a Kafka Quota.\n"
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/kafkaCluster:KafkaCluster": {
            "description": "\n\n\n## Import\n\nYou can import a Kafka cluster by using Environment ID and Kafka cluster ID, in the format `\u003cEnvironment ID\u003e/\u003cKafka cluster ID\u003e`, e.g. $ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/kafkaCluster:KafkaCluster my_kafka env-abc123/lkc-abc123\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "(Required String) An API Version of the schema version of the Kafka cluster, for example, `cmk/v2`.\n"
                },
                "availability": {
                    "type": "string",
                    "description": "The availability zone configuration of the Kafka cluster. Accepted values are: `SINGLE_ZONE` and `MULTI_ZONE`.\n"
                },
                "basic": {
                    "$ref": "#/types/confluentcloud:index/KafkaClusterBasic:KafkaClusterBasic",
                    "description": "The configuration of the Basic Kafka cluster.\n"
                },
                "bootstrapEndpoint": {
                    "type": "string",
                    "description": "(Required String) The bootstrap endpoint used by Kafka clients to connect to the Kafka cluster. (e.g., `SASL_SSL://pkc-00000.us-central1.gcp.confluent.cloud:9092`).\n"
                },
                "cloud": {
                    "type": "string",
                    "description": "The cloud service provider that runs the Kafka cluster. Accepted values are: `AWS`, `AZURE`, and `GCP`.\n"
                },
                "dedicated": {
                    "$ref": "#/types/confluentcloud:index/KafkaClusterDedicated:KafkaClusterDedicated"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the Kafka cluster.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/KafkaClusterEnvironment:KafkaClusterEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "(Required String) A kind of the Kafka cluster, for example, `Cluster`.\n"
                },
                "network": {
                    "$ref": "#/types/confluentcloud:index/KafkaClusterNetwork:KafkaClusterNetwork",
                    "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n"
                },
                "rbacCrn": {
                    "type": "string",
                    "description": "(Required String) The Confluent Resource Name of the Kafka cluster, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/cloud-cluster=lkc-abc123`.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The cloud service provider region where the Kafka cluster is running, for example, `us-west-2`. See [Cloud Providers and Regions](https://docs.confluent.io/cloud/current/clusters/regions.html#cloud-providers-and-regions) for a full list of options for AWS, Azure, and GCP.\n"
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "(Required String) The REST endpoint of the Kafka cluster (e.g., `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n"
                },
                "standard": {
                    "$ref": "#/types/confluentcloud:index/KafkaClusterStandard:KafkaClusterStandard",
                    "description": "The configuration of the Standard Kafka cluster.\n"
                }
            },
            "required": [
                "apiVersion",
                "availability",
                "bootstrapEndpoint",
                "cloud",
                "displayName",
                "environment",
                "kind",
                "network",
                "rbacCrn",
                "region",
                "restEndpoint"
            ],
            "inputProperties": {
                "availability": {
                    "type": "string",
                    "description": "The availability zone configuration of the Kafka cluster. Accepted values are: `SINGLE_ZONE` and `MULTI_ZONE`.\n",
                    "willReplaceOnChanges": true
                },
                "basic": {
                    "$ref": "#/types/confluentcloud:index/KafkaClusterBasic:KafkaClusterBasic",
                    "description": "The configuration of the Basic Kafka cluster.\n"
                },
                "cloud": {
                    "type": "string",
                    "description": "The cloud service provider that runs the Kafka cluster. Accepted values are: `AWS`, `AZURE`, and `GCP`.\n",
                    "willReplaceOnChanges": true
                },
                "dedicated": {
                    "$ref": "#/types/confluentcloud:index/KafkaClusterDedicated:KafkaClusterDedicated"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the Kafka cluster.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/KafkaClusterEnvironment:KafkaClusterEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                    "willReplaceOnChanges": true
                },
                "network": {
                    "$ref": "#/types/confluentcloud:index/KafkaClusterNetwork:KafkaClusterNetwork",
                    "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The cloud service provider region where the Kafka cluster is running, for example, `us-west-2`. See [Cloud Providers and Regions](https://docs.confluent.io/cloud/current/clusters/regions.html#cloud-providers-and-regions) for a full list of options for AWS, Azure, and GCP.\n",
                    "willReplaceOnChanges": true
                },
                "standard": {
                    "$ref": "#/types/confluentcloud:index/KafkaClusterStandard:KafkaClusterStandard",
                    "description": "The configuration of the Standard Kafka cluster.\n"
                }
            },
            "requiredInputs": [
                "availability",
                "cloud",
                "environment",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KafkaCluster resources.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "(Required String) An API Version of the schema version of the Kafka cluster, for example, `cmk/v2`.\n"
                    },
                    "availability": {
                        "type": "string",
                        "description": "The availability zone configuration of the Kafka cluster. Accepted values are: `SINGLE_ZONE` and `MULTI_ZONE`.\n",
                        "willReplaceOnChanges": true
                    },
                    "basic": {
                        "$ref": "#/types/confluentcloud:index/KafkaClusterBasic:KafkaClusterBasic",
                        "description": "The configuration of the Basic Kafka cluster.\n"
                    },
                    "bootstrapEndpoint": {
                        "type": "string",
                        "description": "(Required String) The bootstrap endpoint used by Kafka clients to connect to the Kafka cluster. (e.g., `SASL_SSL://pkc-00000.us-central1.gcp.confluent.cloud:9092`).\n"
                    },
                    "cloud": {
                        "type": "string",
                        "description": "The cloud service provider that runs the Kafka cluster. Accepted values are: `AWS`, `AZURE`, and `GCP`.\n",
                        "willReplaceOnChanges": true
                    },
                    "dedicated": {
                        "$ref": "#/types/confluentcloud:index/KafkaClusterDedicated:KafkaClusterDedicated"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name of the Kafka cluster.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/KafkaClusterEnvironment:KafkaClusterEnvironment",
                        "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                        "willReplaceOnChanges": true
                    },
                    "kind": {
                        "type": "string",
                        "description": "(Required String) A kind of the Kafka cluster, for example, `Cluster`.\n"
                    },
                    "network": {
                        "$ref": "#/types/confluentcloud:index/KafkaClusterNetwork:KafkaClusterNetwork",
                        "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n"
                    },
                    "rbacCrn": {
                        "type": "string",
                        "description": "(Required String) The Confluent Resource Name of the Kafka cluster, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/cloud-cluster=lkc-abc123`.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The cloud service provider region where the Kafka cluster is running, for example, `us-west-2`. See [Cloud Providers and Regions](https://docs.confluent.io/cloud/current/clusters/regions.html#cloud-providers-and-regions) for a full list of options for AWS, Azure, and GCP.\n",
                        "willReplaceOnChanges": true
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "(Required String) The REST endpoint of the Kafka cluster (e.g., `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n"
                    },
                    "standard": {
                        "$ref": "#/types/confluentcloud:index/KafkaClusterStandard:KafkaClusterStandard",
                        "description": "The configuration of the Standard Kafka cluster.\n"
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/kafkaClusterConfig:KafkaClusterConfig": {
            "description": "[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n`confluentcloud.KafkaClusterConfig` provides a Kafka cluster config resource that enables updating configs on a Dedicated Kafka cluster on Confluent Cloud.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst orders = new confluentcloud.KafkaClusterConfig(\"orders\", {\n    kafkaCluster: {\n        id: confluent_kafka_cluster.dedicated.id,\n    },\n    restEndpoint: confluent_kafka_cluster.dedicated.rest_endpoint,\n    config: {\n        \"auto.create.topics.enable\": \"true\",\n        \"log.retention.ms\": \"604800123\",\n    },\n    credentials: {\n        key: confluent_api_key[\"app-manager-kafka-api-key\"].id,\n        secret: confluent_api_key[\"app-manager-kafka-api-key\"].secret,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\norders = confluentcloud.KafkaClusterConfig(\"orders\",\n    kafka_cluster=confluentcloud.KafkaClusterConfigKafkaClusterArgs(\n        id=confluent_kafka_cluster[\"dedicated\"][\"id\"],\n    ),\n    rest_endpoint=confluent_kafka_cluster[\"dedicated\"][\"rest_endpoint\"],\n    config={\n        \"auto.create.topics.enable\": \"true\",\n        \"log.retention.ms\": \"604800123\",\n    },\n    credentials=confluentcloud.KafkaClusterConfigCredentialsArgs(\n        key=confluent_api_key[\"app-manager-kafka-api-key\"][\"id\"],\n        secret=confluent_api_key[\"app-manager-kafka-api-key\"][\"secret\"],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var orders = new ConfluentCloud.KafkaClusterConfig(\"orders\", new()\n    {\n        KafkaCluster = new ConfluentCloud.Inputs.KafkaClusterConfigKafkaClusterArgs\n        {\n            Id = confluent_kafka_cluster.Dedicated.Id,\n        },\n        RestEndpoint = confluent_kafka_cluster.Dedicated.Rest_endpoint,\n        Config = \n        {\n            { \"auto.create.topics.enable\", \"true\" },\n            { \"log.retention.ms\", \"604800123\" },\n        },\n        Credentials = new ConfluentCloud.Inputs.KafkaClusterConfigCredentialsArgs\n        {\n            Key = confluent_api_key.App_manager_kafka_api_key.Id,\n            Secret = confluent_api_key.App_manager_kafka_api_key.Secret,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := confluentcloud.NewKafkaClusterConfig(ctx, \"orders\", \u0026confluentcloud.KafkaClusterConfigArgs{\n\t\t\tKafkaCluster: \u0026KafkaClusterConfigKafkaClusterArgs{\n\t\t\t\tId: pulumi.Any(confluent_kafka_cluster.Dedicated.Id),\n\t\t\t},\n\t\t\tRestEndpoint: pulumi.Any(confluent_kafka_cluster.Dedicated.Rest_endpoint),\n\t\t\tConfig: pulumi.StringMap{\n\t\t\t\t\"auto.create.topics.enable\": pulumi.String(\"true\"),\n\t\t\t\t\"log.retention.ms\":          pulumi.String(\"604800123\"),\n\t\t\t},\n\t\t\tCredentials: \u0026KafkaClusterConfigCredentialsArgs{\n\t\t\t\tKey:    pulumi.Any(confluent_api_key.App - manager - kafka - api - key.Id),\n\t\t\t\tSecret: pulumi.Any(confluent_api_key.App - manager - kafka - api - key.Secret),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.KafkaClusterConfig;\nimport com.pulumi.confluentcloud.KafkaClusterConfigArgs;\nimport com.pulumi.confluentcloud.inputs.KafkaClusterConfigKafkaClusterArgs;\nimport com.pulumi.confluentcloud.inputs.KafkaClusterConfigCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var orders = new KafkaClusterConfig(\"orders\", KafkaClusterConfigArgs.builder()        \n            .kafkaCluster(KafkaClusterConfigKafkaClusterArgs.builder()\n                .id(confluent_kafka_cluster.dedicated().id())\n                .build())\n            .restEndpoint(confluent_kafka_cluster.dedicated().rest_endpoint())\n            .config(Map.ofEntries(\n                Map.entry(\"auto.create.topics.enable\", \"true\"),\n                Map.entry(\"log.retention.ms\", \"604800123\")\n            ))\n            .credentials(KafkaClusterConfigCredentialsArgs.builder()\n                .key(confluent_api_key.app-manager-kafka-api-key().id())\n                .secret(confluent_api_key.app-manager-kafka-api-key().secret())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  orders:\n    type: confluentcloud:KafkaClusterConfig\n    properties:\n      kafkaCluster:\n        id: ${confluent_kafka_cluster.dedicated.id}\n      restEndpoint: ${confluent_kafka_cluster.dedicated.rest_endpoint}\n      config:\n        auto.create.topics.enable: true\n        log.retention.ms: 604800123\n      credentials:\n        key: ${confluent_api_key\"app-manager-kafka-api-key\"[%!s(MISSING)].id}\n        secret: ${confluent_api_key\"app-manager-kafka-api-key\"[%!s(MISSING)].secret}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nYou can import a Kafka cluster config by using the Kafka cluster ID, for example$ export IMPORT_KAFKA_API_KEY=\"\u003ckafka_api_key\u003e\" $ export IMPORT_KAFKA_API_SECRET=\"\u003ckafka_api_secret\u003e\" $ export IMPORT_KAFKA_REST_ENDPOINT=\"\u003ckafka_rest_endpoint\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/kafkaClusterConfig:KafkaClusterConfig test lkc-abc123\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The custom cluster settings to set:\n"
                },
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/KafkaClusterConfigCredentials:KafkaClusterConfigCredentials",
                    "description": "The Cluster API Credentials.\n",
                    "secret": true
                },
                "kafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/KafkaClusterConfigKafkaCluster:KafkaClusterConfigKafkaCluster"
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the Dedicated Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n"
                }
            },
            "required": [
                "config",
                "kafkaCluster"
            ],
            "inputProperties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The custom cluster settings to set:\n"
                },
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/KafkaClusterConfigCredentials:KafkaClusterConfigCredentials",
                    "description": "The Cluster API Credentials.\n",
                    "secret": true
                },
                "kafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/KafkaClusterConfigKafkaCluster:KafkaClusterConfigKafkaCluster",
                    "willReplaceOnChanges": true
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the Dedicated Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "config",
                "kafkaCluster"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KafkaClusterConfig resources.\n",
                "properties": {
                    "config": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The custom cluster settings to set:\n"
                    },
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/KafkaClusterConfigCredentials:KafkaClusterConfigCredentials",
                        "description": "The Cluster API Credentials.\n",
                        "secret": true
                    },
                    "kafkaCluster": {
                        "$ref": "#/types/confluentcloud:index/KafkaClusterConfigKafkaCluster:KafkaClusterConfigKafkaCluster",
                        "willReplaceOnChanges": true
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "The REST endpoint of the Dedicated Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/kafkaMirrorTopic:KafkaMirrorTopic": {
            "description": "\n\n\n## Import\n\nYou can import a Kafka mirror topic by using the Kafka cluster ID, cluster link name, and Kafka topic name in the format `\u003cKafka cluster ID\u003e/\u003cCluster link name\u003e/\u003cKafka topic name\u003e`, for example$ export IMPORT_KAFKA_API_KEY=\"\u003ckafka_api_key\u003e\" $ export IMPORT_KAFKA_API_SECRET=\"\u003ckafka_api_secret\u003e\" $ export IMPORT_KAFKA_REST_ENDPOINT=\"\u003ckafka_rest_endpoint\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/kafkaMirrorTopic:KafkaMirrorTopic my_mirror_topic lkc-abc123/my-cluster-link/orders-123\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "clusterLink": {
                    "$ref": "#/types/confluentcloud:index/KafkaMirrorTopicClusterLink:KafkaMirrorTopicClusterLink"
                },
                "kafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/KafkaMirrorTopicKafkaCluster:KafkaMirrorTopicKafkaCluster"
                },
                "mirrorTopicName": {
                    "type": "string",
                    "description": "The name of the mirror topic. Only required when there is a prefix configured on the cluster link. For example, when `\u003cprefix\u003e` is configured for the cluster link, the mirror topic name has to be of the format `\u003cprefix\u003e\u003csource_topic_name\u003e`.\n"
                },
                "sourceKafkaTopic": {
                    "$ref": "#/types/confluentcloud:index/KafkaMirrorTopicSourceKafkaTopic:KafkaMirrorTopicSourceKafkaTopic"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the mirror topic. The supported values are `\"ACTIVE\"`, `\"PAUSED\"`, `\"PROMOTED\"`, `\"FAILED_OVER\"`. Pausing (`\"ACTIVE\" \u003e \"PAUSED\"`), resuming (`\"PAUSED\" \u003e \"ACTIVE\"`), promoting, and failing over a mirror topic is supported via an update operation. Defaults to `\"ACTIVE\"`.\n"
                }
            },
            "required": [
                "clusterLink",
                "kafkaCluster",
                "mirrorTopicName",
                "sourceKafkaTopic",
                "status"
            ],
            "inputProperties": {
                "clusterLink": {
                    "$ref": "#/types/confluentcloud:index/KafkaMirrorTopicClusterLink:KafkaMirrorTopicClusterLink",
                    "willReplaceOnChanges": true
                },
                "kafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/KafkaMirrorTopicKafkaCluster:KafkaMirrorTopicKafkaCluster"
                },
                "mirrorTopicName": {
                    "type": "string",
                    "description": "The name of the mirror topic. Only required when there is a prefix configured on the cluster link. For example, when `\u003cprefix\u003e` is configured for the cluster link, the mirror topic name has to be of the format `\u003cprefix\u003e\u003csource_topic_name\u003e`.\n",
                    "willReplaceOnChanges": true
                },
                "sourceKafkaTopic": {
                    "$ref": "#/types/confluentcloud:index/KafkaMirrorTopicSourceKafkaTopic:KafkaMirrorTopicSourceKafkaTopic",
                    "willReplaceOnChanges": true
                },
                "status": {
                    "type": "string",
                    "description": "The status of the mirror topic. The supported values are `\"ACTIVE\"`, `\"PAUSED\"`, `\"PROMOTED\"`, `\"FAILED_OVER\"`. Pausing (`\"ACTIVE\" \u003e \"PAUSED\"`), resuming (`\"PAUSED\" \u003e \"ACTIVE\"`), promoting, and failing over a mirror topic is supported via an update operation. Defaults to `\"ACTIVE\"`.\n"
                }
            },
            "requiredInputs": [
                "clusterLink",
                "kafkaCluster",
                "sourceKafkaTopic"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KafkaMirrorTopic resources.\n",
                "properties": {
                    "clusterLink": {
                        "$ref": "#/types/confluentcloud:index/KafkaMirrorTopicClusterLink:KafkaMirrorTopicClusterLink",
                        "willReplaceOnChanges": true
                    },
                    "kafkaCluster": {
                        "$ref": "#/types/confluentcloud:index/KafkaMirrorTopicKafkaCluster:KafkaMirrorTopicKafkaCluster"
                    },
                    "mirrorTopicName": {
                        "type": "string",
                        "description": "The name of the mirror topic. Only required when there is a prefix configured on the cluster link. For example, when `\u003cprefix\u003e` is configured for the cluster link, the mirror topic name has to be of the format `\u003cprefix\u003e\u003csource_topic_name\u003e`.\n",
                        "willReplaceOnChanges": true
                    },
                    "sourceKafkaTopic": {
                        "$ref": "#/types/confluentcloud:index/KafkaMirrorTopicSourceKafkaTopic:KafkaMirrorTopicSourceKafkaTopic",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the mirror topic. The supported values are `\"ACTIVE\"`, `\"PAUSED\"`, `\"PROMOTED\"`, `\"FAILED_OVER\"`. Pausing (`\"ACTIVE\" \u003e \"PAUSED\"`), resuming (`\"PAUSED\" \u003e \"ACTIVE\"`), promoting, and failing over a mirror topic is supported via an update operation. Defaults to `\"ACTIVE\"`.\n"
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/kafkaTopic:KafkaTopic": {
            "description": "\n\n\n## Import\n\nYou can import a Kafka topic by using the Kafka cluster ID and Kafka topic name in the format `\u003cKafka cluster ID\u003e/\u003cKafka topic name\u003e`, for example$ export IMPORT_KAFKA_API_KEY=\"\u003ckafka_api_key\u003e\" $ export IMPORT_KAFKA_API_SECRET=\"\u003ckafka_api_secret\u003e\" $ export IMPORT_KAFKA_REST_ENDPOINT=\"\u003ckafka_rest_endpoint\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/kafkaTopic:KafkaTopic my_topic lkc-abc123/orders-123\n```\n\n resource \"confluent_kafka_topic\" \"orders\" {\n\n kafka_cluster {\n\n\n\n id = confluent_kafka_cluster.basic-cluster.id\n\n }\n\n topic_name\n\n\n\n\n\n\n\n = \"orders\"\n\n partitions_count\n\n = 4\n\n rest_endpoint\n\n\n\n\n\n= confluent_kafka_cluster.basic-cluster.rest_endpoint\n\n # https://docs.confluent.io/cloud/current/clusters/broker-config.html#custom-topic-settings-for-all-cluster-types-supported-by-kafka-rest-api-and-terraform-provider\n\n config = {\n\n\n\n \"cleanup.policy\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n= \"delete\"\n\n\n\n \"delete.retention.ms\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n = \"86400000\"\n\n\n\n \"max.compaction.lag.ms\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n = \"9223372036854775807\"\n\n\n\n \"max.message.bytes\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n = \"2097164\"\n\n\n\n \"message.timestamp.difference.max.ms\" = \"9223372036854775807\"\n\n\n\n \"message.timestamp.type\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n= \"CreateTime\"\n\n\n\n \"min.compaction.lag.ms\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n = \"0\"\n\n\n\n \"min.insync.replicas\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n = \"2\"\n\n\n\n \"retention.bytes\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n = \"-1\"\n\n\n\n \"retention.ms\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n= \"604800000\"\n\n\n\n \"segment.bytes\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n = \"104857600\"\n\n\n\n \"segment.ms\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n= \"604800000\"\n\n }\n\n credentials {\n\n\n\n key\n\n\n\n= confluent_api_key.app-manager-kafka-api-key.id\n\n\n\n secret = confluent_api_key.app-manager-kafka-api-key.secret\n\n } } !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The custom topic settings to set:\n"
                },
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/KafkaTopicCredentials:KafkaTopicCredentials",
                    "description": "The Cluster API Credentials.\n",
                    "secret": true
                },
                "httpEndpoint": {
                    "type": "string",
                    "description": "The HTTP endpoint of the Kafka cluster (e.g., `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                    "deprecationMessage": "This parameter has been deprecated in favour of Rest Endpoint"
                },
                "kafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/KafkaTopicKafkaCluster:KafkaTopicKafkaCluster"
                },
                "partitionsCount": {
                    "type": "integer",
                    "description": "The number of partitions to create in the topic. Defaults to `6`.\n"
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n"
                },
                "topicName": {
                    "type": "string",
                    "description": "The name of the topic, for example, `orders-1`. The topic name can be up to 249 characters in length, and can include the following characters: a-z, A-Z, 0-9, . (dot), _ (underscore), and - (dash). As a best practice, we recommend against using any personally identifiable information (PII) when naming your topic.\n"
                }
            },
            "required": [
                "config",
                "httpEndpoint",
                "kafkaCluster",
                "topicName"
            ],
            "inputProperties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The custom topic settings to set:\n"
                },
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/KafkaTopicCredentials:KafkaTopicCredentials",
                    "description": "The Cluster API Credentials.\n",
                    "secret": true
                },
                "httpEndpoint": {
                    "type": "string",
                    "description": "The HTTP endpoint of the Kafka cluster (e.g., `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                    "deprecationMessage": "This parameter has been deprecated in favour of Rest Endpoint"
                },
                "kafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/KafkaTopicKafkaCluster:KafkaTopicKafkaCluster",
                    "willReplaceOnChanges": true
                },
                "partitionsCount": {
                    "type": "integer",
                    "description": "The number of partitions to create in the topic. Defaults to `6`.\n",
                    "willReplaceOnChanges": true
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                    "willReplaceOnChanges": true
                },
                "topicName": {
                    "type": "string",
                    "description": "The name of the topic, for example, `orders-1`. The topic name can be up to 249 characters in length, and can include the following characters: a-z, A-Z, 0-9, . (dot), _ (underscore), and - (dash). As a best practice, we recommend against using any personally identifiable information (PII) when naming your topic.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "kafkaCluster",
                "topicName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KafkaTopic resources.\n",
                "properties": {
                    "config": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The custom topic settings to set:\n"
                    },
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/KafkaTopicCredentials:KafkaTopicCredentials",
                        "description": "The Cluster API Credentials.\n",
                        "secret": true
                    },
                    "httpEndpoint": {
                        "type": "string",
                        "description": "The HTTP endpoint of the Kafka cluster (e.g., `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                        "deprecationMessage": "This parameter has been deprecated in favour of Rest Endpoint"
                    },
                    "kafkaCluster": {
                        "$ref": "#/types/confluentcloud:index/KafkaTopicKafkaCluster:KafkaTopicKafkaCluster",
                        "willReplaceOnChanges": true
                    },
                    "partitionsCount": {
                        "type": "integer",
                        "description": "The number of partitions to create in the topic. Defaults to `6`.\n",
                        "willReplaceOnChanges": true
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "The REST endpoint of the Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                        "willReplaceOnChanges": true
                    },
                    "topicName": {
                        "type": "string",
                        "description": "The name of the topic, for example, `orders-1`. The topic name can be up to 249 characters in length, and can include the following characters: a-z, A-Z, 0-9, . (dot), _ (underscore), and - (dash). As a best practice, we recommend against using any personally identifiable information (PII) when naming your topic.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/ksqlCluster:KsqlCluster": {
            "description": "\n\n\n## Import\n\nYou can import a ksqlDB cluster by using Environment ID and ksqlDB cluster ID, in the format `\u003cEnvironment ID\u003e/\u003cksqlDB cluster ID\u003e`, for example$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/ksqlCluster:KsqlCluster example env-abc123/lksqlc-abc123\n```\n\n !\u003e **Warning:**\n\nDo not forget to delete the terminal's command history afterward for security purposes. ",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "(Required String) An API Version of the schema version of the ksqlDB cluster, for example, `ksqldbcm/v2`.\n"
                },
                "credentialIdentity": {
                    "$ref": "#/types/confluentcloud:index/KsqlClusterCredentialIdentity:KsqlClusterCredentialIdentity"
                },
                "csu": {
                    "type": "integer",
                    "description": "The number of Confluent Streaming Units (CSUs) for the ksqlDB cluster.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the ksqlDB cluster.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/KsqlClusterEnvironment:KsqlClusterEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n"
                },
                "kafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/KsqlClusterKafkaCluster:KsqlClusterKafkaCluster"
                },
                "kind": {
                    "type": "string",
                    "description": "(Required String) A kind of the ksqlDB cluster, for example, `Cluster`.\n"
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "(Required String) The API endpoint of the ksqlDB cluster, for example, `https://pksqlc-00000.us-central1.gcp.glb.confluent.cloud`.\n"
                },
                "storage": {
                    "type": "integer",
                    "description": "(Required Integer) The amount of storage (in GB) provisioned to the ksqlDB cluster.\n"
                },
                "topicPrefix": {
                    "type": "string",
                    "description": "(Required String) Topic name prefix used by this ksqlDB cluster. Used to assign ACLs for this ksqlDB cluster to use, for example, `pksqlc-00000`.\n"
                },
                "useDetailedProcessingLog": {
                    "type": "boolean",
                    "description": "Controls whether the row data should be included in the processing log topic. Set it to `false` if you don't want to emit sensitive information to the processing log. Defaults to `true`.\n"
                }
            },
            "required": [
                "apiVersion",
                "credentialIdentity",
                "csu",
                "displayName",
                "environment",
                "kafkaCluster",
                "kind",
                "restEndpoint",
                "storage",
                "topicPrefix"
            ],
            "inputProperties": {
                "credentialIdentity": {
                    "$ref": "#/types/confluentcloud:index/KsqlClusterCredentialIdentity:KsqlClusterCredentialIdentity",
                    "willReplaceOnChanges": true
                },
                "csu": {
                    "type": "integer",
                    "description": "The number of Confluent Streaming Units (CSUs) for the ksqlDB cluster.\n",
                    "willReplaceOnChanges": true
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the ksqlDB cluster.\n",
                    "willReplaceOnChanges": true
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/KsqlClusterEnvironment:KsqlClusterEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                    "willReplaceOnChanges": true
                },
                "kafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/KsqlClusterKafkaCluster:KsqlClusterKafkaCluster",
                    "willReplaceOnChanges": true
                },
                "useDetailedProcessingLog": {
                    "type": "boolean",
                    "description": "Controls whether the row data should be included in the processing log topic. Set it to `false` if you don't want to emit sensitive information to the processing log. Defaults to `true`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "credentialIdentity",
                "csu",
                "displayName",
                "environment",
                "kafkaCluster"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KsqlCluster resources.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "(Required String) An API Version of the schema version of the ksqlDB cluster, for example, `ksqldbcm/v2`.\n"
                    },
                    "credentialIdentity": {
                        "$ref": "#/types/confluentcloud:index/KsqlClusterCredentialIdentity:KsqlClusterCredentialIdentity",
                        "willReplaceOnChanges": true
                    },
                    "csu": {
                        "type": "integer",
                        "description": "The number of Confluent Streaming Units (CSUs) for the ksqlDB cluster.\n",
                        "willReplaceOnChanges": true
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name of the ksqlDB cluster.\n",
                        "willReplaceOnChanges": true
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/KsqlClusterEnvironment:KsqlClusterEnvironment",
                        "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                        "willReplaceOnChanges": true
                    },
                    "kafkaCluster": {
                        "$ref": "#/types/confluentcloud:index/KsqlClusterKafkaCluster:KsqlClusterKafkaCluster",
                        "willReplaceOnChanges": true
                    },
                    "kind": {
                        "type": "string",
                        "description": "(Required String) A kind of the ksqlDB cluster, for example, `Cluster`.\n"
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "(Required String) The API endpoint of the ksqlDB cluster, for example, `https://pksqlc-00000.us-central1.gcp.glb.confluent.cloud`.\n"
                    },
                    "storage": {
                        "type": "integer",
                        "description": "(Required Integer) The amount of storage (in GB) provisioned to the ksqlDB cluster.\n"
                    },
                    "topicPrefix": {
                        "type": "string",
                        "description": "(Required String) Topic name prefix used by this ksqlDB cluster. Used to assign ACLs for this ksqlDB cluster to use, for example, `pksqlc-00000`.\n"
                    },
                    "useDetailedProcessingLog": {
                        "type": "boolean",
                        "description": "Controls whether the row data should be included in the processing log topic. Set it to `false` if you don't want to emit sensitive information to the processing log. Defaults to `true`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/network:Network": {
            "description": "\n\n\n## Import\n\nYou can import a Network by using Environment ID and Network ID, in the format `\u003cEnvironment ID\u003e/\u003cNetwork ID\u003e`. The following example shows how to import a Network$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/network:Network my_network env-abc123/n-abc123\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "aws": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/confluentcloud:index/NetworkAw:NetworkAw"
                    },
                    "description": "(Optional Configuration Block) The AWS-specific network details if available. It supports the following:\n"
                },
                "azures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/confluentcloud:index/NetworkAzure:NetworkAzure"
                    },
                    "description": "(Optional Configuration Block) The Azure-specific network details if available. It supports the following:\n"
                },
                "cidr": {
                    "type": "string",
                    "description": "The IPv4 CIDR block to used for the network. Must be `/16`. Required for VPC peering and AWS TransitGateway.\n"
                },
                "cloud": {
                    "type": "string",
                    "description": "The cloud service provider in which the network exists. Accepted values are: `AWS`, `AZURE`, and `GCP`.\n"
                },
                "connectionTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of connection types that may be used with the network. Accepted connection types are: `PEERING`, `TRANSITGATEWAY`, and `PRIVATELINK`.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the Network.\n"
                },
                "dnsDomain": {
                    "type": "string",
                    "description": "(Optional String) The root DNS domain for the network, for example, `pr123a.us-east-2.aws.confluent.cloud` if applicable. Present on Networks that support Private Link.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/NetworkEnvironment:NetworkEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n"
                },
                "gcps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/confluentcloud:index/NetworkGcp:NetworkGcp"
                    },
                    "description": "(Optional Configuration Block) The GCP-specific network details if available. It supports the following:\n"
                },
                "region": {
                    "type": "string",
                    "description": "The cloud provider region where the network exists.\n"
                },
                "resourceName": {
                    "type": "string",
                    "description": "(Required String) The Confluent Resource Name of the Network.\n"
                },
                "zonalSubdomains": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Optional Map) The DNS subdomain for each zone. Present on networks that support Private Link. Keys are zone names, for example, `use2-az1` and values are DNS domains, for example, `use2-az1.pr123a.us-east-2.aws.confluent.cloud`.\n"
                },
                "zones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The 3 availability zones for this network. They can optionally be specified for AWS networks\nused with Private Link and for GCP networks used with Private Service Connect. Otherwise, they are automatically chosen by Confluent Cloud.\nOn AWS, zones are AWS [AZ IDs](https://docs.aws.amazon.com/ram/latest/userguide/working-with-az-ids.html), for example, `use1-az3`.\nOn GCP, zones are GCP [zones](https://cloud.google.com/compute/docs/regions-zones), for example, `us-central1-c`.\nOn Azure, zones are Confluent-chosen names (for example, `1`, `2`, `3`) since Azure does not have universal zone identifiers.\n"
                }
            },
            "required": [
                "aws",
                "azures",
                "cidr",
                "cloud",
                "connectionTypes",
                "displayName",
                "dnsDomain",
                "environment",
                "gcps",
                "region",
                "resourceName",
                "zonalSubdomains",
                "zones"
            ],
            "inputProperties": {
                "aws": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/confluentcloud:index/NetworkAw:NetworkAw"
                    },
                    "description": "(Optional Configuration Block) The AWS-specific network details if available. It supports the following:\n"
                },
                "azures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/confluentcloud:index/NetworkAzure:NetworkAzure"
                    },
                    "description": "(Optional Configuration Block) The Azure-specific network details if available. It supports the following:\n"
                },
                "cidr": {
                    "type": "string",
                    "description": "The IPv4 CIDR block to used for the network. Must be `/16`. Required for VPC peering and AWS TransitGateway.\n",
                    "willReplaceOnChanges": true
                },
                "cloud": {
                    "type": "string",
                    "description": "The cloud service provider in which the network exists. Accepted values are: `AWS`, `AZURE`, and `GCP`.\n",
                    "willReplaceOnChanges": true
                },
                "connectionTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of connection types that may be used with the network. Accepted connection types are: `PEERING`, `TRANSITGATEWAY`, and `PRIVATELINK`.\n",
                    "willReplaceOnChanges": true
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the Network.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/NetworkEnvironment:NetworkEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                    "willReplaceOnChanges": true
                },
                "gcps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/confluentcloud:index/NetworkGcp:NetworkGcp"
                    },
                    "description": "(Optional Configuration Block) The GCP-specific network details if available. It supports the following:\n"
                },
                "region": {
                    "type": "string",
                    "description": "The cloud provider region where the network exists.\n",
                    "willReplaceOnChanges": true
                },
                "zones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The 3 availability zones for this network. They can optionally be specified for AWS networks\nused with Private Link and for GCP networks used with Private Service Connect. Otherwise, they are automatically chosen by Confluent Cloud.\nOn AWS, zones are AWS [AZ IDs](https://docs.aws.amazon.com/ram/latest/userguide/working-with-az-ids.html), for example, `use1-az3`.\nOn GCP, zones are GCP [zones](https://cloud.google.com/compute/docs/regions-zones), for example, `us-central1-c`.\nOn Azure, zones are Confluent-chosen names (for example, `1`, `2`, `3`) since Azure does not have universal zone identifiers.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "cloud",
                "connectionTypes",
                "environment",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Network resources.\n",
                "properties": {
                    "aws": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/NetworkAw:NetworkAw"
                        },
                        "description": "(Optional Configuration Block) The AWS-specific network details if available. It supports the following:\n"
                    },
                    "azures": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/NetworkAzure:NetworkAzure"
                        },
                        "description": "(Optional Configuration Block) The Azure-specific network details if available. It supports the following:\n"
                    },
                    "cidr": {
                        "type": "string",
                        "description": "The IPv4 CIDR block to used for the network. Must be `/16`. Required for VPC peering and AWS TransitGateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "cloud": {
                        "type": "string",
                        "description": "The cloud service provider in which the network exists. Accepted values are: `AWS`, `AZURE`, and `GCP`.\n",
                        "willReplaceOnChanges": true
                    },
                    "connectionTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of connection types that may be used with the network. Accepted connection types are: `PEERING`, `TRANSITGATEWAY`, and `PRIVATELINK`.\n",
                        "willReplaceOnChanges": true
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name of the Network.\n"
                    },
                    "dnsDomain": {
                        "type": "string",
                        "description": "(Optional String) The root DNS domain for the network, for example, `pr123a.us-east-2.aws.confluent.cloud` if applicable. Present on Networks that support Private Link.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/NetworkEnvironment:NetworkEnvironment",
                        "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                        "willReplaceOnChanges": true
                    },
                    "gcps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/NetworkGcp:NetworkGcp"
                        },
                        "description": "(Optional Configuration Block) The GCP-specific network details if available. It supports the following:\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The cloud provider region where the network exists.\n",
                        "willReplaceOnChanges": true
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "(Required String) The Confluent Resource Name of the Network.\n"
                    },
                    "zonalSubdomains": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Optional Map) The DNS subdomain for each zone. Present on networks that support Private Link. Keys are zone names, for example, `use2-az1` and values are DNS domains, for example, `use2-az1.pr123a.us-east-2.aws.confluent.cloud`.\n"
                    },
                    "zones": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The 3 availability zones for this network. They can optionally be specified for AWS networks\nused with Private Link and for GCP networks used with Private Service Connect. Otherwise, they are automatically chosen by Confluent Cloud.\nOn AWS, zones are AWS [AZ IDs](https://docs.aws.amazon.com/ram/latest/userguide/working-with-az-ids.html), for example, `use1-az3`.\nOn GCP, zones are GCP [zones](https://cloud.google.com/compute/docs/regions-zones), for example, `us-central1-c`.\nOn Azure, zones are Confluent-chosen names (for example, `1`, `2`, `3`) since Azure does not have universal zone identifiers.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/peering:Peering": {
            "description": "\n\n\n## Import\n\nYou can import a Peering by using Environment ID and Peering ID, in the format `\u003cEnvironment ID\u003e/\u003cPeering ID\u003e`. The following example shows how to import a Peering$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/peering:Peering my_peer env-abc123/peer-abc123\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "aws": {
                    "$ref": "#/types/confluentcloud:index/PeeringAws:PeeringAws"
                },
                "azure": {
                    "$ref": "#/types/confluentcloud:index/PeeringAzure:PeeringAzure"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the Peering.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/PeeringEnvironment:PeeringEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n"
                },
                "gcp": {
                    "$ref": "#/types/confluentcloud:index/PeeringGcp:PeeringGcp"
                },
                "network": {
                    "$ref": "#/types/confluentcloud:index/PeeringNetwork:PeeringNetwork",
                    "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n"
                }
            },
            "required": [
                "displayName",
                "environment",
                "network"
            ],
            "inputProperties": {
                "aws": {
                    "$ref": "#/types/confluentcloud:index/PeeringAws:PeeringAws",
                    "willReplaceOnChanges": true
                },
                "azure": {
                    "$ref": "#/types/confluentcloud:index/PeeringAzure:PeeringAzure",
                    "willReplaceOnChanges": true
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the Peering.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/PeeringEnvironment:PeeringEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                    "willReplaceOnChanges": true
                },
                "gcp": {
                    "$ref": "#/types/confluentcloud:index/PeeringGcp:PeeringGcp",
                    "willReplaceOnChanges": true
                },
                "network": {
                    "$ref": "#/types/confluentcloud:index/PeeringNetwork:PeeringNetwork",
                    "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "environment",
                "network"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Peering resources.\n",
                "properties": {
                    "aws": {
                        "$ref": "#/types/confluentcloud:index/PeeringAws:PeeringAws",
                        "willReplaceOnChanges": true
                    },
                    "azure": {
                        "$ref": "#/types/confluentcloud:index/PeeringAzure:PeeringAzure",
                        "willReplaceOnChanges": true
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name of the Peering.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/PeeringEnvironment:PeeringEnvironment",
                        "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                        "willReplaceOnChanges": true
                    },
                    "gcp": {
                        "$ref": "#/types/confluentcloud:index/PeeringGcp:PeeringGcp",
                        "willReplaceOnChanges": true
                    },
                    "network": {
                        "$ref": "#/types/confluentcloud:index/PeeringNetwork:PeeringNetwork",
                        "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/privateLinkAccess:PrivateLinkAccess": {
            "description": "\n\n\n## Import\n\nYou can import a Private Link Access by using Environment ID and Private Link Access ID, in the format `\u003cEnvironment ID\u003e/\u003cPrivate Link Access ID\u003e`. The following example shows how to import a Private Link Access$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/privateLinkAccess:PrivateLinkAccess my_pla env-abc123/pla-abc123\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "aws": {
                    "$ref": "#/types/confluentcloud:index/PrivateLinkAccessAws:PrivateLinkAccessAws"
                },
                "azure": {
                    "$ref": "#/types/confluentcloud:index/PrivateLinkAccessAzure:PrivateLinkAccessAzure"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the Private Link Access.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/PrivateLinkAccessEnvironment:PrivateLinkAccessEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n"
                },
                "gcp": {
                    "$ref": "#/types/confluentcloud:index/PrivateLinkAccessGcp:PrivateLinkAccessGcp"
                },
                "network": {
                    "$ref": "#/types/confluentcloud:index/PrivateLinkAccessNetwork:PrivateLinkAccessNetwork",
                    "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n"
                }
            },
            "required": [
                "displayName",
                "environment",
                "network"
            ],
            "inputProperties": {
                "aws": {
                    "$ref": "#/types/confluentcloud:index/PrivateLinkAccessAws:PrivateLinkAccessAws",
                    "willReplaceOnChanges": true
                },
                "azure": {
                    "$ref": "#/types/confluentcloud:index/PrivateLinkAccessAzure:PrivateLinkAccessAzure",
                    "willReplaceOnChanges": true
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the Private Link Access.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/PrivateLinkAccessEnvironment:PrivateLinkAccessEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                    "willReplaceOnChanges": true
                },
                "gcp": {
                    "$ref": "#/types/confluentcloud:index/PrivateLinkAccessGcp:PrivateLinkAccessGcp",
                    "willReplaceOnChanges": true
                },
                "network": {
                    "$ref": "#/types/confluentcloud:index/PrivateLinkAccessNetwork:PrivateLinkAccessNetwork",
                    "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "environment",
                "network"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PrivateLinkAccess resources.\n",
                "properties": {
                    "aws": {
                        "$ref": "#/types/confluentcloud:index/PrivateLinkAccessAws:PrivateLinkAccessAws",
                        "willReplaceOnChanges": true
                    },
                    "azure": {
                        "$ref": "#/types/confluentcloud:index/PrivateLinkAccessAzure:PrivateLinkAccessAzure",
                        "willReplaceOnChanges": true
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name of the Private Link Access.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/PrivateLinkAccessEnvironment:PrivateLinkAccessEnvironment",
                        "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                        "willReplaceOnChanges": true
                    },
                    "gcp": {
                        "$ref": "#/types/confluentcloud:index/PrivateLinkAccessGcp:PrivateLinkAccessGcp",
                        "willReplaceOnChanges": true
                    },
                    "network": {
                        "$ref": "#/types/confluentcloud:index/PrivateLinkAccessNetwork:PrivateLinkAccessNetwork",
                        "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/roleBinding:RoleBinding": {
            "description": "\n\n\n## Import\n\nYou can import a Role Binding by using Role Binding ID, for example$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/roleBinding:RoleBinding my_rb rb-f3a90de\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "crnPattern": {
                    "type": "string",
                    "description": "A [Confluent Resource Name(CRN)](https://docs.confluent.io/cloud/current/api.html#section/Identifiers-and-URLs/Confluent-Resource-Names-(CRNs)) that specifies the scope and resource patterns necessary for the role to bind.\n"
                },
                "principal": {
                    "type": "string",
                    "description": "A principal User to bind the role to, for example, \"User:u-111aaa\" for binding to a user \"u-111aaa\", or \"User:sa-111aaa\" for binding to a service account \"sa-111aaa\".\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "A name of the role to bind to the principal. See [Confluent Cloud RBAC Roles](https://docs.confluent.io/cloud/current/access-management/access-control/cloud-rbac.html#ccloud-rbac-roles) for a full list of supported role names.\n"
                }
            },
            "required": [
                "crnPattern",
                "principal",
                "roleName"
            ],
            "inputProperties": {
                "crnPattern": {
                    "type": "string",
                    "description": "A [Confluent Resource Name(CRN)](https://docs.confluent.io/cloud/current/api.html#section/Identifiers-and-URLs/Confluent-Resource-Names-(CRNs)) that specifies the scope and resource patterns necessary for the role to bind.\n",
                    "willReplaceOnChanges": true
                },
                "principal": {
                    "type": "string",
                    "description": "A principal User to bind the role to, for example, \"User:u-111aaa\" for binding to a user \"u-111aaa\", or \"User:sa-111aaa\" for binding to a service account \"sa-111aaa\".\n",
                    "willReplaceOnChanges": true
                },
                "roleName": {
                    "type": "string",
                    "description": "A name of the role to bind to the principal. See [Confluent Cloud RBAC Roles](https://docs.confluent.io/cloud/current/access-management/access-control/cloud-rbac.html#ccloud-rbac-roles) for a full list of supported role names.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "crnPattern",
                "principal",
                "roleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RoleBinding resources.\n",
                "properties": {
                    "crnPattern": {
                        "type": "string",
                        "description": "A [Confluent Resource Name(CRN)](https://docs.confluent.io/cloud/current/api.html#section/Identifiers-and-URLs/Confluent-Resource-Names-(CRNs)) that specifies the scope and resource patterns necessary for the role to bind.\n",
                        "willReplaceOnChanges": true
                    },
                    "principal": {
                        "type": "string",
                        "description": "A principal User to bind the role to, for example, \"User:u-111aaa\" for binding to a user \"u-111aaa\", or \"User:sa-111aaa\" for binding to a service account \"sa-111aaa\".\n",
                        "willReplaceOnChanges": true
                    },
                    "roleName": {
                        "type": "string",
                        "description": "A name of the role to bind to the principal. See [Confluent Cloud RBAC Roles](https://docs.confluent.io/cloud/current/access-management/access-control/cloud-rbac.html#ccloud-rbac-roles) for a full list of supported role names.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/schemaRegistryCluster:SchemaRegistryCluster": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst development = new confluentcloud.Environment(\"development\", {});\nconst example = confluentcloud.getSchemaRegistryRegion({\n    cloud: \"AWS\",\n    region: \"us-east-2\",\n    \"package\": \"ESSENTIALS\",\n});\nconst essentials = new confluentcloud.SchemaRegistryCluster(\"essentials\", {\n    \"package\": example.then(example =\u003e example[\"package\"]),\n    environment: {\n        id: development.id,\n    },\n    region: {\n        id: example.then(example =\u003e example.id),\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\ndevelopment = confluentcloud.Environment(\"development\")\nexample = confluentcloud.get_schema_registry_region(cloud=\"AWS\",\n    region=\"us-east-2\",\n    package=\"ESSENTIALS\")\nessentials = confluentcloud.SchemaRegistryCluster(\"essentials\",\n    package=example.package,\n    environment=confluentcloud.SchemaRegistryClusterEnvironmentArgs(\n        id=development.id,\n    ),\n    region=confluentcloud.SchemaRegistryClusterRegionArgs(\n        id=example.id,\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var development = new ConfluentCloud.Environment(\"development\");\n\n    var example = ConfluentCloud.GetSchemaRegistryRegion.Invoke(new()\n    {\n        Cloud = \"AWS\",\n        Region = \"us-east-2\",\n        Package = \"ESSENTIALS\",\n    });\n\n    var essentials = new ConfluentCloud.SchemaRegistryCluster(\"essentials\", new()\n    {\n        Package = example.Apply(getSchemaRegistryRegionResult =\u003e getSchemaRegistryRegionResult.Package),\n        Environment = new ConfluentCloud.Inputs.SchemaRegistryClusterEnvironmentArgs\n        {\n            Id = development.Id,\n        },\n        Region = new ConfluentCloud.Inputs.SchemaRegistryClusterRegionArgs\n        {\n            Id = example.Apply(getSchemaRegistryRegionResult =\u003e getSchemaRegistryRegionResult.Id),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdevelopment, err := confluentcloud.NewEnvironment(ctx, \"development\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample, err := confluentcloud.GetSchemaRegistryRegion(ctx, \u0026GetSchemaRegistryRegionArgs{\n\t\t\tCloud:   \"AWS\",\n\t\t\tRegion:  \"us-east-2\",\n\t\t\tPackage: \"ESSENTIALS\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = confluentcloud.NewSchemaRegistryCluster(ctx, \"essentials\", \u0026confluentcloud.SchemaRegistryClusterArgs{\n\t\t\tPackage: pulumi.String(example.Package),\n\t\t\tEnvironment: \u0026SchemaRegistryClusterEnvironmentArgs{\n\t\t\t\tId: development.ID(),\n\t\t\t},\n\t\t\tRegion: \u0026SchemaRegistryClusterRegionArgs{\n\t\t\t\tId: pulumi.String(example.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.Environment;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetSchemaRegistryRegionArgs;\nimport com.pulumi.confluentcloud.SchemaRegistryCluster;\nimport com.pulumi.confluentcloud.SchemaRegistryClusterArgs;\nimport com.pulumi.confluentcloud.inputs.SchemaRegistryClusterEnvironmentArgs;\nimport com.pulumi.confluentcloud.inputs.SchemaRegistryClusterRegionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var development = new Environment(\"development\");\n\n        final var example = ConfluentcloudFunctions.getSchemaRegistryRegion(GetSchemaRegistryRegionArgs.builder()\n            .cloud(\"AWS\")\n            .region(\"us-east-2\")\n            .package_(\"ESSENTIALS\")\n            .build());\n\n        var essentials = new SchemaRegistryCluster(\"essentials\", SchemaRegistryClusterArgs.builder()        \n            .package_(example.applyValue(getSchemaRegistryRegionResult -\u003e getSchemaRegistryRegionResult.package()))\n            .environment(SchemaRegistryClusterEnvironmentArgs.builder()\n                .id(development.id())\n                .build())\n            .region(SchemaRegistryClusterRegionArgs.builder()\n                .id(example.applyValue(getSchemaRegistryRegionResult -\u003e getSchemaRegistryRegionResult.id()))\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  development:\n    type: confluentcloud:Environment\n  essentials:\n    type: confluentcloud:SchemaRegistryCluster\n    properties:\n      package: ${example.package}\n      environment:\n        id: ${development.id}\n      region:\n        id: ${example.id}\nvariables:\n  example:\n    Fn::Invoke:\n      Function: confluentcloud:getSchemaRegistryRegion\n      Arguments:\n        cloud: AWS\n        region: us-east-2\n        package: ESSENTIALS\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nYou can import a Schema Registry cluster by using Environment ID and Schema Registry cluster ID, in the format `\u003cEnvironment ID\u003e/\u003cSchema Registry cluster ID\u003e`, for example$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/schemaRegistryCluster:SchemaRegistryCluster example env-abc123/lsrc-abc123\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "(Required String) An API Version of the schema version of the Schema Registry cluster, for example, `srcm/v2`.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "(Required String) The name of the Schema Registry cluster, for example, `Stream Governance Package`.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/SchemaRegistryClusterEnvironment:SchemaRegistryClusterEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "(Required String) A kind of the Schema Registry cluster, for example, `Cluster`.\n"
                },
                "package": {
                    "type": "string",
                    "description": "The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.\n"
                },
                "region": {
                    "$ref": "#/types/confluentcloud:index/SchemaRegistryClusterRegion:SchemaRegistryClusterRegion"
                },
                "resourceName": {
                    "type": "string",
                    "description": "(Required String) The Confluent Resource Name of the Schema Registry cluster, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/schema-registry=lsrc-abc123`.\n"
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "(Required String) The HTTP endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-west-2.aws.confluent.cloud`.\n"
                }
            },
            "required": [
                "apiVersion",
                "displayName",
                "environment",
                "kind",
                "package",
                "region",
                "resourceName",
                "restEndpoint"
            ],
            "inputProperties": {
                "environment": {
                    "$ref": "#/types/confluentcloud:index/SchemaRegistryClusterEnvironment:SchemaRegistryClusterEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                    "willReplaceOnChanges": true
                },
                "package": {
                    "type": "string",
                    "description": "The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.\n"
                },
                "region": {
                    "$ref": "#/types/confluentcloud:index/SchemaRegistryClusterRegion:SchemaRegistryClusterRegion",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "environment",
                "package",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SchemaRegistryCluster resources.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "(Required String) An API Version of the schema version of the Schema Registry cluster, for example, `srcm/v2`.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "(Required String) The name of the Schema Registry cluster, for example, `Stream Governance Package`.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/SchemaRegistryClusterEnvironment:SchemaRegistryClusterEnvironment",
                        "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                        "willReplaceOnChanges": true
                    },
                    "kind": {
                        "type": "string",
                        "description": "(Required String) A kind of the Schema Registry cluster, for example, `Cluster`.\n"
                    },
                    "package": {
                        "type": "string",
                        "description": "The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.\n"
                    },
                    "region": {
                        "$ref": "#/types/confluentcloud:index/SchemaRegistryClusterRegion:SchemaRegistryClusterRegion",
                        "willReplaceOnChanges": true
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "(Required String) The Confluent Resource Name of the Schema Registry cluster, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/schema-registry=lsrc-abc123`.\n"
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "(Required String) The HTTP endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-west-2.aws.confluent.cloud`.\n"
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/serviceAccount:ServiceAccount": {
            "description": "\n\n\n## Import\n\nYou can import a Service Account by using Service Account ID, for example$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/serviceAccount:ServiceAccount my_sa sa-abc123\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "(Required String) An API Version of the schema version of the Service Account, for example, `iam/v2`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A free-form description of the Service Account.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "A human-readable name for the Service Account.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "(Required String) A kind of the Service Account, for example, `ServiceAccount`.\n"
                }
            },
            "required": [
                "apiVersion",
                "displayName",
                "kind"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A free-form description of the Service Account.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "A human-readable name for the Service Account.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceAccount resources.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "(Required String) An API Version of the schema version of the Service Account, for example, `iam/v2`.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A free-form description of the Service Account.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the Service Account.\n",
                        "willReplaceOnChanges": true
                    },
                    "kind": {
                        "type": "string",
                        "description": "(Required String) A kind of the Service Account, for example, `ServiceAccount`.\n"
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/streamGovernanceCluster:StreamGovernanceCluster": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst development = new confluentcloud.Environment(\"development\", {});\nconst example = confluentcloud.getStreamGovernanceRegion({\n    cloud: \"AWS\",\n    region: \"us-east-2\",\n    \"package\": \"ESSENTIALS\",\n});\nconst essentials = new confluentcloud.StreamGovernanceCluster(\"essentials\", {\n    \"package\": example.then(example =\u003e example[\"package\"]),\n    environment: {\n        id: development.id,\n    },\n    region: {\n        id: example.then(example =\u003e example.id),\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\ndevelopment = confluentcloud.Environment(\"development\")\nexample = confluentcloud.get_stream_governance_region(cloud=\"AWS\",\n    region=\"us-east-2\",\n    package=\"ESSENTIALS\")\nessentials = confluentcloud.StreamGovernanceCluster(\"essentials\",\n    package=example.package,\n    environment=confluentcloud.StreamGovernanceClusterEnvironmentArgs(\n        id=development.id,\n    ),\n    region=confluentcloud.StreamGovernanceClusterRegionArgs(\n        id=example.id,\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var development = new ConfluentCloud.Environment(\"development\");\n\n    var example = ConfluentCloud.GetStreamGovernanceRegion.Invoke(new()\n    {\n        Cloud = \"AWS\",\n        Region = \"us-east-2\",\n        Package = \"ESSENTIALS\",\n    });\n\n    var essentials = new ConfluentCloud.StreamGovernanceCluster(\"essentials\", new()\n    {\n        Package = example.Apply(getStreamGovernanceRegionResult =\u003e getStreamGovernanceRegionResult.Package),\n        Environment = new ConfluentCloud.Inputs.StreamGovernanceClusterEnvironmentArgs\n        {\n            Id = development.Id,\n        },\n        Region = new ConfluentCloud.Inputs.StreamGovernanceClusterRegionArgs\n        {\n            Id = example.Apply(getStreamGovernanceRegionResult =\u003e getStreamGovernanceRegionResult.Id),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdevelopment, err := confluentcloud.NewEnvironment(ctx, \"development\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample, err := confluentcloud.GetStreamGovernanceRegion(ctx, \u0026GetStreamGovernanceRegionArgs{\n\t\t\tCloud:   \"AWS\",\n\t\t\tRegion:  \"us-east-2\",\n\t\t\tPackage: \"ESSENTIALS\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = confluentcloud.NewStreamGovernanceCluster(ctx, \"essentials\", \u0026confluentcloud.StreamGovernanceClusterArgs{\n\t\t\tPackage: pulumi.String(example.Package),\n\t\t\tEnvironment: \u0026StreamGovernanceClusterEnvironmentArgs{\n\t\t\t\tId: development.ID(),\n\t\t\t},\n\t\t\tRegion: \u0026StreamGovernanceClusterRegionArgs{\n\t\t\t\tId: pulumi.String(example.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.Environment;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetStreamGovernanceRegionArgs;\nimport com.pulumi.confluentcloud.StreamGovernanceCluster;\nimport com.pulumi.confluentcloud.StreamGovernanceClusterArgs;\nimport com.pulumi.confluentcloud.inputs.StreamGovernanceClusterEnvironmentArgs;\nimport com.pulumi.confluentcloud.inputs.StreamGovernanceClusterRegionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var development = new Environment(\"development\");\n\n        final var example = ConfluentcloudFunctions.getStreamGovernanceRegion(GetStreamGovernanceRegionArgs.builder()\n            .cloud(\"AWS\")\n            .region(\"us-east-2\")\n            .package_(\"ESSENTIALS\")\n            .build());\n\n        var essentials = new StreamGovernanceCluster(\"essentials\", StreamGovernanceClusterArgs.builder()        \n            .package_(example.applyValue(getStreamGovernanceRegionResult -\u003e getStreamGovernanceRegionResult.package()))\n            .environment(StreamGovernanceClusterEnvironmentArgs.builder()\n                .id(development.id())\n                .build())\n            .region(StreamGovernanceClusterRegionArgs.builder()\n                .id(example.applyValue(getStreamGovernanceRegionResult -\u003e getStreamGovernanceRegionResult.id()))\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  development:\n    type: confluentcloud:Environment\n  essentials:\n    type: confluentcloud:StreamGovernanceCluster\n    properties:\n      package: ${example.package}\n      environment:\n        id: ${development.id}\n      region:\n        id: ${example.id}\nvariables:\n  example:\n    Fn::Invoke:\n      Function: confluentcloud:getStreamGovernanceRegion\n      Arguments:\n        cloud: AWS\n        region: us-east-2\n        package: ESSENTIALS\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nYou can import a Stream Governance cluster by using Environment ID and Stream Governance cluster ID, in the format `\u003cEnvironment ID\u003e/\u003cStream Governance cluster ID\u003e`, for example$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/streamGovernanceCluster:StreamGovernanceCluster example env-abc123/lsrc-abc123\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "(Required String) An API Version of the schema version of the Stream Governance cluster, for example, `stream-governance/v2`.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "(Required String) The name of the Stream Governance cluster, for example, `Stream Governance Package`.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/StreamGovernanceClusterEnvironment:StreamGovernanceClusterEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n"
                },
                "httpEndpoint": {
                    "type": "string",
                    "description": "(Required String) The HTTP endpoint of the Stream Governance cluster, for example, `https://psrc-00000.us-west-2.aws.confluent.cloud`.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "(Required String) A kind of the Stream Governance cluster, for example, `Cluster`.\n"
                },
                "package": {
                    "type": "string",
                    "description": "The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.\n"
                },
                "region": {
                    "$ref": "#/types/confluentcloud:index/StreamGovernanceClusterRegion:StreamGovernanceClusterRegion"
                },
                "resourceName": {
                    "type": "string",
                    "description": "(Required String) The Confluent Resource Name of the Stream Governance cluster, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/schema-registry=lsrc-abc123`.\n"
                }
            },
            "required": [
                "apiVersion",
                "displayName",
                "environment",
                "httpEndpoint",
                "kind",
                "package",
                "region",
                "resourceName"
            ],
            "inputProperties": {
                "environment": {
                    "$ref": "#/types/confluentcloud:index/StreamGovernanceClusterEnvironment:StreamGovernanceClusterEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                    "willReplaceOnChanges": true
                },
                "package": {
                    "type": "string",
                    "description": "The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.\n"
                },
                "region": {
                    "$ref": "#/types/confluentcloud:index/StreamGovernanceClusterRegion:StreamGovernanceClusterRegion",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "environment",
                "package",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StreamGovernanceCluster resources.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "(Required String) An API Version of the schema version of the Stream Governance cluster, for example, `stream-governance/v2`.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "(Required String) The name of the Stream Governance cluster, for example, `Stream Governance Package`.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/StreamGovernanceClusterEnvironment:StreamGovernanceClusterEnvironment",
                        "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                        "willReplaceOnChanges": true
                    },
                    "httpEndpoint": {
                        "type": "string",
                        "description": "(Required String) The HTTP endpoint of the Stream Governance cluster, for example, `https://psrc-00000.us-west-2.aws.confluent.cloud`.\n"
                    },
                    "kind": {
                        "type": "string",
                        "description": "(Required String) A kind of the Stream Governance cluster, for example, `Cluster`.\n"
                    },
                    "package": {
                        "type": "string",
                        "description": "The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.\n"
                    },
                    "region": {
                        "$ref": "#/types/confluentcloud:index/StreamGovernanceClusterRegion:StreamGovernanceClusterRegion",
                        "willReplaceOnChanges": true
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "(Required String) The Confluent Resource Name of the Stream Governance cluster, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/schema-registry=lsrc-abc123`.\n"
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/transitGatewayAttachment:TransitGatewayAttachment": {
            "description": "\n\n\n## Import\n\nYou can import a Transit Gateway Attachment by using Environment ID and Transit Gateway Attachment ID, in the format `\u003cEnvironment ID\u003e/\u003cTransit Gateway Attachment ID\u003e`. The following example shows how to import a Transit Gateway Attachment$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/transitGatewayAttachment:TransitGatewayAttachment my_tgwa env-abc123/tgwa-abc123\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "aws": {
                    "$ref": "#/types/confluentcloud:index/TransitGatewayAttachmentAws:TransitGatewayAttachmentAws",
                    "description": "(Required Configuration Block) The AWS-specific Transit Gateway Attachment details. It supports the following:\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the Transit Gateway Attachment.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/TransitGatewayAttachmentEnvironment:TransitGatewayAttachmentEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n"
                },
                "network": {
                    "$ref": "#/types/confluentcloud:index/TransitGatewayAttachmentNetwork:TransitGatewayAttachmentNetwork",
                    "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n"
                }
            },
            "required": [
                "displayName",
                "environment",
                "network"
            ],
            "inputProperties": {
                "aws": {
                    "$ref": "#/types/confluentcloud:index/TransitGatewayAttachmentAws:TransitGatewayAttachmentAws",
                    "description": "(Required Configuration Block) The AWS-specific Transit Gateway Attachment details. It supports the following:\n",
                    "willReplaceOnChanges": true
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the Transit Gateway Attachment.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/TransitGatewayAttachmentEnvironment:TransitGatewayAttachmentEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                    "willReplaceOnChanges": true
                },
                "network": {
                    "$ref": "#/types/confluentcloud:index/TransitGatewayAttachmentNetwork:TransitGatewayAttachmentNetwork",
                    "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "environment",
                "network"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TransitGatewayAttachment resources.\n",
                "properties": {
                    "aws": {
                        "$ref": "#/types/confluentcloud:index/TransitGatewayAttachmentAws:TransitGatewayAttachmentAws",
                        "description": "(Required Configuration Block) The AWS-specific Transit Gateway Attachment details. It supports the following:\n",
                        "willReplaceOnChanges": true
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name of the Transit Gateway Attachment.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/TransitGatewayAttachmentEnvironment:TransitGatewayAttachmentEnvironment",
                        "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                        "willReplaceOnChanges": true
                    },
                    "network": {
                        "$ref": "#/types/confluentcloud:index/TransitGatewayAttachmentNetwork:TransitGatewayAttachmentNetwork",
                        "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "confluentcloud:index/getEnvironment:getEnvironment": {
            "description": "[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n`confluentcloud.Environment` describes an Environment data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleUsingIdEnvironment = confluentcloud.getEnvironment({\n    id: \"env-abc123\",\n});\nexport const exampleUsingId = exampleUsingIdEnvironment;\nconst exampleUsingNameEnvironment = confluentcloud.getEnvironment({\n    displayName: \"stag\",\n});\nconst exampleUsingNameServiceAccount = confluentcloud.getServiceAccount({\n    displayName: \"test_sa\",\n});\nconst test_role_binding = new confluentcloud.RoleBinding(\"test-role-binding\", {\n    principal: exampleUsingNameServiceAccount.then(exampleUsingNameServiceAccount =\u003e `User:${exampleUsingNameServiceAccount.id}`),\n    roleName: \"EnvironmentAdmin\",\n    crnPattern: exampleUsingNameEnvironment.then(exampleUsingNameEnvironment =\u003e exampleUsingNameEnvironment.resourceName),\n});\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_using_id_environment = confluentcloud.get_environment(id=\"env-abc123\")\npulumi.export(\"exampleUsingId\", example_using_id_environment)\nexample_using_name_environment = confluentcloud.get_environment(display_name=\"stag\")\nexample_using_name_service_account = confluentcloud.get_service_account(display_name=\"test_sa\")\ntest_role_binding = confluentcloud.RoleBinding(\"test-role-binding\",\n    principal=f\"User:{example_using_name_service_account.id}\",\n    role_name=\"EnvironmentAdmin\",\n    crn_pattern=example_using_name_environment.resource_name)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUsingIdEnvironment = ConfluentCloud.GetEnvironment.Invoke(new()\n    {\n        Id = \"env-abc123\",\n    });\n\n    var exampleUsingNameEnvironment = ConfluentCloud.GetEnvironment.Invoke(new()\n    {\n        DisplayName = \"stag\",\n    });\n\n    var exampleUsingNameServiceAccount = ConfluentCloud.GetServiceAccount.Invoke(new()\n    {\n        DisplayName = \"test_sa\",\n    });\n\n    var test_role_binding = new ConfluentCloud.RoleBinding(\"test-role-binding\", new()\n    {\n        Principal = $\"User:{exampleUsingNameServiceAccount.Apply(getServiceAccountResult =\u003e getServiceAccountResult.Id)}\",\n        RoleName = \"EnvironmentAdmin\",\n        CrnPattern = exampleUsingNameEnvironment.Apply(getEnvironmentResult =\u003e getEnvironmentResult.ResourceName),\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"exampleUsingId\"] = exampleUsingIdEnvironment.Apply(getEnvironmentResult =\u003e getEnvironmentResult),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUsingIdEnvironment, err := confluentcloud.LookupEnvironment(ctx, \u0026GetEnvironmentArgs{\n\t\t\tId: pulumi.StringRef(\"env-abc123\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingId\", exampleUsingIdEnvironment)\n\t\texampleUsingNameEnvironment, err := confluentcloud.LookupEnvironment(ctx, \u0026GetEnvironmentArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"stag\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUsingNameServiceAccount, err := confluentcloud.LookupServiceAccount(ctx, \u0026GetServiceAccountArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"test_sa\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = confluentcloud.NewRoleBinding(ctx, \"test-role-binding\", \u0026confluentcloud.RoleBindingArgs{\n\t\t\tPrincipal:  pulumi.String(fmt.Sprintf(\"User:%v\", exampleUsingNameServiceAccount.Id)),\n\t\t\tRoleName:   pulumi.String(\"EnvironmentAdmin\"),\n\t\t\tCrnPattern: pulumi.String(exampleUsingNameEnvironment.ResourceName),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetEnvironmentArgs;\nimport com.pulumi.confluentcloud.inputs.GetServiceAccountArgs;\nimport com.pulumi.confluentcloud.RoleBinding;\nimport com.pulumi.confluentcloud.RoleBindingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUsingIdEnvironment = ConfluentcloudFunctions.getEnvironment(GetEnvironmentArgs.builder()\n            .id(\"env-abc123\")\n            .build());\n\n        ctx.export(\"exampleUsingId\", exampleUsingIdEnvironment.applyValue(getEnvironmentResult -\u003e getEnvironmentResult));\n        final var exampleUsingNameEnvironment = ConfluentcloudFunctions.getEnvironment(GetEnvironmentArgs.builder()\n            .displayName(\"stag\")\n            .build());\n\n        final var exampleUsingNameServiceAccount = ConfluentcloudFunctions.getServiceAccount(GetServiceAccountArgs.builder()\n            .displayName(\"test_sa\")\n            .build());\n\n        var test_role_binding = new RoleBinding(\"test-role-binding\", RoleBindingArgs.builder()        \n            .principal(String.format(\"User:%s\", exampleUsingNameServiceAccount.applyValue(getServiceAccountResult -\u003e getServiceAccountResult.id())))\n            .roleName(\"EnvironmentAdmin\")\n            .crnPattern(exampleUsingNameEnvironment.applyValue(getEnvironmentResult -\u003e getEnvironmentResult.resourceName()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test-role-binding:\n    type: confluentcloud:RoleBinding\n    properties:\n      principal: User:${exampleUsingNameServiceAccount.id}\n      roleName: EnvironmentAdmin\n      crnPattern: ${exampleUsingNameEnvironment.resourceName}\nvariables:\n  exampleUsingIdEnvironment:\n    Fn::Invoke:\n      Function: confluentcloud:getEnvironment\n      Arguments:\n        id: env-abc123\n  exampleUsingNameEnvironment:\n    Fn::Invoke:\n      Function: confluentcloud:getEnvironment\n      Arguments:\n        displayName: stag\n  exampleUsingNameServiceAccount:\n    Fn::Invoke:\n      Function: confluentcloud:getServiceAccount\n      Arguments:\n        displayName: test_sa\noutputs:\n  exampleUsingId: ${exampleUsingIdEnvironment}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getEnvironment.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the Environment.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Environment, for example, `env-abc123`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getEnvironment.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "(Required String) A human-readable name for the Environment.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the Environment, for example, `env-abc123`.\n"
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "(Required String) The Confluent Resource Name of the Environment, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "displayName",
                    "id",
                    "resourceName"
                ]
            }
        },
        "confluentcloud:index/getIdentityPool:getIdentityPool": {
            "description": "[![Limited Availability](https://img.shields.io/badge/Lifecycle%20Stage-Limited%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy) [![Request Access To OAuth API](https://img.shields.io/badge/-Request%20Access%20To%20OAuth%20API-%23bc8540)](mailto:ccloud-api-access+iam-v2-closed-preview@confluent.io?subject=Request%20to%20join%20OAuth%20API%20Closed%20Preview\u0026body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Closed%20Preview%20for%20iam/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)\n\n`confluentcloud.IdentityPool` describes an Identity Pool data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleUsingIdIdentityPool = confluentcloud.getIdentityPool({\n    id: \"pool-xyz456\",\n    identityProvider: {\n        id: \"op-abc123\",\n    },\n});\nexport const exampleUsingId = exampleUsingIdIdentityPool;\nconst exampleUsingNameIdentityPool = confluentcloud.getIdentityPool({\n    displayName: \"My Identity Pool\",\n    identityProvider: {\n        id: \"op-abc123\",\n    },\n});\nexport const exampleUsingName = exampleUsingNameIdentityPool;\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_using_id_identity_pool = confluentcloud.get_identity_pool(id=\"pool-xyz456\",\n    identity_provider=confluentcloud.GetIdentityPoolIdentityProviderArgs(\n        id=\"op-abc123\",\n    ))\npulumi.export(\"exampleUsingId\", example_using_id_identity_pool)\nexample_using_name_identity_pool = confluentcloud.get_identity_pool(display_name=\"My Identity Pool\",\n    identity_provider=confluentcloud.GetIdentityPoolIdentityProviderArgs(\n        id=\"op-abc123\",\n    ))\npulumi.export(\"exampleUsingName\", example_using_name_identity_pool)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUsingIdIdentityPool = ConfluentCloud.GetIdentityPool.Invoke(new()\n    {\n        Id = \"pool-xyz456\",\n        IdentityProvider = new ConfluentCloud.Inputs.GetIdentityPoolIdentityProviderInputArgs\n        {\n            Id = \"op-abc123\",\n        },\n    });\n\n    var exampleUsingNameIdentityPool = ConfluentCloud.GetIdentityPool.Invoke(new()\n    {\n        DisplayName = \"My Identity Pool\",\n        IdentityProvider = new ConfluentCloud.Inputs.GetIdentityPoolIdentityProviderInputArgs\n        {\n            Id = \"op-abc123\",\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"exampleUsingId\"] = exampleUsingIdIdentityPool.Apply(getIdentityPoolResult =\u003e getIdentityPoolResult),\n        [\"exampleUsingName\"] = exampleUsingNameIdentityPool.Apply(getIdentityPoolResult =\u003e getIdentityPoolResult),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUsingIdIdentityPool, err := confluentcloud.LookupIdentityPool(ctx, \u0026GetIdentityPoolArgs{\n\t\t\tId: pulumi.StringRef(\"pool-xyz456\"),\n\t\t\tIdentityProvider: GetIdentityPoolIdentityProvider{\n\t\t\t\tId: \"op-abc123\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingId\", exampleUsingIdIdentityPool)\n\t\texampleUsingNameIdentityPool, err := confluentcloud.LookupIdentityPool(ctx, \u0026GetIdentityPoolArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"My Identity Pool\"),\n\t\t\tIdentityProvider: GetIdentityPoolIdentityProvider{\n\t\t\t\tId: \"op-abc123\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingName\", exampleUsingNameIdentityPool)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetIdentityPoolArgs;\nimport com.pulumi.confluentcloud.inputs.GetIdentityPoolIdentityProviderArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUsingIdIdentityPool = ConfluentcloudFunctions.getIdentityPool(GetIdentityPoolArgs.builder()\n            .id(\"pool-xyz456\")\n            .identityProvider(GetIdentityPoolIdentityProviderArgs.builder()\n                .id(\"op-abc123\")\n                .build())\n            .build());\n\n        ctx.export(\"exampleUsingId\", exampleUsingIdIdentityPool.applyValue(getIdentityPoolResult -\u003e getIdentityPoolResult));\n        final var exampleUsingNameIdentityPool = ConfluentcloudFunctions.getIdentityPool(GetIdentityPoolArgs.builder()\n            .displayName(\"My Identity Pool\")\n            .identityProvider(GetIdentityPoolIdentityProviderArgs.builder()\n                .id(\"op-abc123\")\n                .build())\n            .build());\n\n        ctx.export(\"exampleUsingName\", exampleUsingNameIdentityPool.applyValue(getIdentityPoolResult -\u003e getIdentityPoolResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleUsingIdIdentityPool:\n    Fn::Invoke:\n      Function: confluentcloud:getIdentityPool\n      Arguments:\n        id: pool-xyz456\n        identityProvider:\n          id: op-abc123\n  exampleUsingNameIdentityPool:\n    Fn::Invoke:\n      Function: confluentcloud:getIdentityPool\n      Arguments:\n        displayName: My Identity Pool\n        identityProvider:\n          id: op-abc123\noutputs:\n  exampleUsingId: ${exampleUsingIdIdentityPool}\n  exampleUsingName: ${exampleUsingNameIdentityPool}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIdentityPool.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the Identity Pool.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Identity Provider associated with the Identity Pool, for example, `op-abc123`.\n"
                    },
                    "identityProvider": {
                        "$ref": "#/types/confluentcloud:index/getIdentityPoolIdentityProvider:getIdentityPoolIdentityProvider"
                    }
                },
                "type": "object",
                "required": [
                    "identityProvider"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIdentityPool.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "(Required String) A description for the Identity Pool.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "(Required String) A human-readable name for the Identity Pool.\n"
                    },
                    "filter": {
                        "type": "string",
                        "description": "(Required String) A filter expression in [Supported Common Expression Language (CEL)](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/identity-pools.html#supported-common-expression-language-cel-filters) that specifies which identities can authenticate using your identity pool (see [Set identity pool filters](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/identity-pools.html#set-identity-pool-filters) for more details).\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the Identity Provider associated with the Identity Pool, for example, `op-abc123`.\n"
                    },
                    "identityClaim": {
                        "type": "string",
                        "description": "(Required String) The JSON Web Token (JWT) claim to extract the authenticating identity to Confluent resources from (see [Registered Claim Names](https://datatracker.ietf.org/doc/html/rfc7519#section-4.1) for more details). This appears in the audit log records, showing, for example, that \"identity Z used identity pool X to access topic A\".\n"
                    },
                    "identityProvider": {
                        "$ref": "#/types/confluentcloud:index/getIdentityPoolIdentityProvider:getIdentityPoolIdentityProvider"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "filter",
                    "id",
                    "identityClaim",
                    "identityProvider"
                ]
            }
        },
        "confluentcloud:index/getIdentityProvider:getIdentityProvider": {
            "description": "[![Limited Availability](https://img.shields.io/badge/Lifecycle%20Stage-Limited%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy) [![Request Access To OAuth API](https://img.shields.io/badge/-Request%20Access%20To%20OAuth%20API-%23bc8540)](mailto:ccloud-api-access+iam-v2-closed-preview@confluent.io?subject=Request%20to%20join%20OAuth%20API%20Closed%20Preview\u0026body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Closed%20Preview%20for%20iam/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)\n\n`confluentcloud.IdentityProvider` describes an Identity Provider data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleUsingIdIdentityProvider = confluentcloud.getIdentityProvider({\n    id: \"op-abc123\",\n});\nexport const exampleUsingId = exampleUsingIdIdentityProvider;\nconst exampleUsingNameIdentityProvider = confluentcloud.getIdentityProvider({\n    displayName: \"My OIDC Provider: Azure AD\",\n});\nexport const exampleUsingName = exampleUsingNameIdentityProvider;\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_using_id_identity_provider = confluentcloud.get_identity_provider(id=\"op-abc123\")\npulumi.export(\"exampleUsingId\", example_using_id_identity_provider)\nexample_using_name_identity_provider = confluentcloud.get_identity_provider(display_name=\"My OIDC Provider: Azure AD\")\npulumi.export(\"exampleUsingName\", example_using_name_identity_provider)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUsingIdIdentityProvider = ConfluentCloud.GetIdentityProvider.Invoke(new()\n    {\n        Id = \"op-abc123\",\n    });\n\n    var exampleUsingNameIdentityProvider = ConfluentCloud.GetIdentityProvider.Invoke(new()\n    {\n        DisplayName = \"My OIDC Provider: Azure AD\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"exampleUsingId\"] = exampleUsingIdIdentityProvider.Apply(getIdentityProviderResult =\u003e getIdentityProviderResult),\n        [\"exampleUsingName\"] = exampleUsingNameIdentityProvider.Apply(getIdentityProviderResult =\u003e getIdentityProviderResult),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUsingIdIdentityProvider, err := confluentcloud.LookupIdentityProvider(ctx, \u0026GetIdentityProviderArgs{\n\t\t\tId: pulumi.StringRef(\"op-abc123\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingId\", exampleUsingIdIdentityProvider)\n\t\texampleUsingNameIdentityProvider, err := confluentcloud.LookupIdentityProvider(ctx, \u0026GetIdentityProviderArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"My OIDC Provider: Azure AD\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingName\", exampleUsingNameIdentityProvider)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetIdentityProviderArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUsingIdIdentityProvider = ConfluentcloudFunctions.getIdentityProvider(GetIdentityProviderArgs.builder()\n            .id(\"op-abc123\")\n            .build());\n\n        ctx.export(\"exampleUsingId\", exampleUsingIdIdentityProvider.applyValue(getIdentityProviderResult -\u003e getIdentityProviderResult));\n        final var exampleUsingNameIdentityProvider = ConfluentcloudFunctions.getIdentityProvider(GetIdentityProviderArgs.builder()\n            .displayName(\"My OIDC Provider: Azure AD\")\n            .build());\n\n        ctx.export(\"exampleUsingName\", exampleUsingNameIdentityProvider.applyValue(getIdentityProviderResult -\u003e getIdentityProviderResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleUsingIdIdentityProvider:\n    Fn::Invoke:\n      Function: confluentcloud:getIdentityProvider\n      Arguments:\n        id: op-abc123\n  exampleUsingNameIdentityProvider:\n    Fn::Invoke:\n      Function: confluentcloud:getIdentityProvider\n      Arguments:\n        displayName: 'My OIDC Provider: Azure AD'\noutputs:\n  exampleUsingId: ${exampleUsingIdIdentityProvider}\n  exampleUsingName: ${exampleUsingNameIdentityProvider}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIdentityProvider.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the Identity Provider.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Identity Provider, for example, `op-abc123`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIdentityProvider.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "(Required String) A description for the Identity Provider.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "(Required String) A human-readable name for the Identity Provider.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the Identity Provider, for example, `op-abc123`.\n"
                    },
                    "issuer": {
                        "type": "string",
                        "description": "(Required String) A publicly reachable issuer URI for the Identity Provider. The unique issuer URI string represents the entity for issuing tokens.\n"
                    },
                    "jwksUri": {
                        "type": "string",
                        "description": "(Required String) A publicly reachable JSON Web Key Set (JWKS) URI for the Identity Provider. A JSON Web Key Set (JWKS) provides a set of keys containing the public keys used to verify any JSON Web Token (JWT) issued by your OAuth 2.0 identity provider.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id",
                    "issuer",
                    "jwksUri"
                ]
            }
        },
        "confluentcloud:index/getKafkaClientQuota:getKafkaClientQuota": {
            "description": "[![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy) [![Request Access To Client Quotas API](https://img.shields.io/badge/-Request%20Access%20To%20Clients%20Quotas-%23bc8540)](mailto:cloud-client-quotas-ea@confluent.io?subject=Request%20to%20join%20Kafka%20Quotas%20Management%20API%20Early%20Access\u0026amp;body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20kafka-quotas/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)\n\n\u003e **Note:** `confluentcloud.KafkaClientQuota` data source is available in **Early Access** for early adopters. Early Access features are introduced to gather customer feedback. This feature should be used only for evaluation and non-production testing purposes or to provide feedback to Confluent, particularly as it becomes more widely available in follow-on editions.  \n**Early Access** features are intended for evaluation use in development and testing environments only, and not for production use. The warranty, SLA, and Support Services provisions of your agreement with Confluent do not apply to Early Access features. Early Access features are considered to be a Proof of Concept as defined in the Confluent Cloud Terms of Service. Confluent may discontinue providing preview releases of the Early Access features at any time in Confluent’s sole discretion.\n\n`confluentcloud.KafkaClientQuota` describes a Kafka Client Quota.\n\n\u003e **Note:** See [Control application usage with Client Quotas](https://docs.confluent.io/cloud/current/clusters/client-quotas.html#control-application-usage-with-client-quotas) for more details.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleKafkaClientQuota = confluentcloud.getKafkaClientQuota({\n    id: \"cq-abc123\",\n});\nexport const example = exampleKafkaClientQuota;\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_kafka_client_quota = confluentcloud.get_kafka_client_quota(id=\"cq-abc123\")\npulumi.export(\"example\", example_kafka_client_quota)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleKafkaClientQuota = ConfluentCloud.GetKafkaClientQuota.Invoke(new()\n    {\n        Id = \"cq-abc123\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"example\"] = exampleKafkaClientQuota.Apply(getKafkaClientQuotaResult =\u003e getKafkaClientQuotaResult),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleKafkaClientQuota, err := confluentcloud.LookupKafkaClientQuota(ctx, \u0026GetKafkaClientQuotaArgs{\n\t\t\tId: \"cq-abc123\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"example\", exampleKafkaClientQuota)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetKafkaClientQuotaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleKafkaClientQuota = ConfluentcloudFunctions.getKafkaClientQuota(GetKafkaClientQuotaArgs.builder()\n            .id(\"cq-abc123\")\n            .build());\n\n        ctx.export(\"example\", exampleKafkaClientQuota.applyValue(getKafkaClientQuotaResult -\u003e getKafkaClientQuotaResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleKafkaClientQuota:\n    Fn::Invoke:\n      Function: confluentcloud:getKafkaClientQuota\n      Arguments:\n        id: cq-abc123\noutputs:\n  example: ${exampleKafkaClientQuota}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getKafkaClientQuota.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the Kafka Client Quota (for example, `cq-abc123`).\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getKafkaClientQuota.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "(Required String) The description of the Kafka Client Quota.\n- `throughput` (Required Configuration Block) supports the following:\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "(Required String) The name of the Kafka Client Quota.\n"
                    },
                    "environments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getKafkaClientQuotaEnvironment:getKafkaClientQuotaEnvironment"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the Environment that the corresponding Kafka Cluster belongs to, for example, `env-abc123`.\n"
                    },
                    "kafkaClusters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getKafkaClientQuotaKafkaCluster:getKafkaClientQuotaKafkaCluster"
                        }
                    },
                    "principals": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Required Set of Strings) The list of principals (i.e., service accounts or identity pools) to apply the Kafka Client Quota to. Use the special name, \"default\", to represent the default quota for all users and service accounts.\n- `kafka_cluster` (Required Configuration Block) supports the following:\n"
                    },
                    "throughputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getKafkaClientQuotaThroughput:getKafkaClientQuotaThroughput"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "environments",
                    "id",
                    "kafkaClusters",
                    "principals",
                    "throughputs"
                ]
            }
        },
        "confluentcloud:index/getKafkaCluster:getKafkaCluster": {
            "description": "[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n`confluentcloud.KafkaCluster` describes a Kafka cluster data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleUsingId = confluentcloud.getKafkaCluster({\n    id: \"lkc-abc123\",\n    environment: {\n        id: \"env-xyz456\",\n    },\n});\nconst test_sa = new confluentcloud.ServiceAccount(\"test-sa\", {description: exampleUsingId.then(exampleUsingId =\u003e `app_mgr for ${exampleUsingId.displayName}`)});\nconst exampleUsingNameKafkaCluster = confluentcloud.getKafkaCluster({\n    displayName: \"basic_kafka_cluster\",\n    environment: {\n        id: \"env-xyz456\",\n    },\n});\nexport const exampleUsingName = exampleUsingNameKafkaCluster;\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_using_id = confluentcloud.get_kafka_cluster(id=\"lkc-abc123\",\n    environment=confluentcloud.GetKafkaClusterEnvironmentArgs(\n        id=\"env-xyz456\",\n    ))\ntest_sa = confluentcloud.ServiceAccount(\"test-sa\", description=f\"app_mgr for {example_using_id.display_name}\")\nexample_using_name_kafka_cluster = confluentcloud.get_kafka_cluster(display_name=\"basic_kafka_cluster\",\n    environment=confluentcloud.GetKafkaClusterEnvironmentArgs(\n        id=\"env-xyz456\",\n    ))\npulumi.export(\"exampleUsingName\", example_using_name_kafka_cluster)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUsingId = ConfluentCloud.GetKafkaCluster.Invoke(new()\n    {\n        Id = \"lkc-abc123\",\n        Environment = new ConfluentCloud.Inputs.GetKafkaClusterEnvironmentInputArgs\n        {\n            Id = \"env-xyz456\",\n        },\n    });\n\n    var test_sa = new ConfluentCloud.ServiceAccount(\"test-sa\", new()\n    {\n        Description = $\"app_mgr for {exampleUsingId.Apply(getKafkaClusterResult =\u003e getKafkaClusterResult.DisplayName)}\",\n    });\n\n    var exampleUsingNameKafkaCluster = ConfluentCloud.GetKafkaCluster.Invoke(new()\n    {\n        DisplayName = \"basic_kafka_cluster\",\n        Environment = new ConfluentCloud.Inputs.GetKafkaClusterEnvironmentInputArgs\n        {\n            Id = \"env-xyz456\",\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"exampleUsingName\"] = exampleUsingNameKafkaCluster.Apply(getKafkaClusterResult =\u003e getKafkaClusterResult),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUsingId, err := confluentcloud.LookupKafkaCluster(ctx, \u0026GetKafkaClusterArgs{\n\t\t\tId: pulumi.StringRef(\"lkc-abc123\"),\n\t\t\tEnvironment: GetKafkaClusterEnvironment{\n\t\t\t\tId: \"env-xyz456\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = confluentcloud.NewServiceAccount(ctx, \"test-sa\", \u0026confluentcloud.ServiceAccountArgs{\n\t\t\tDescription: pulumi.String(fmt.Sprintf(\"app_mgr for %v\", exampleUsingId.DisplayName)),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUsingNameKafkaCluster, err := confluentcloud.LookupKafkaCluster(ctx, \u0026GetKafkaClusterArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"basic_kafka_cluster\"),\n\t\t\tEnvironment: GetKafkaClusterEnvironment{\n\t\t\t\tId: \"env-xyz456\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingName\", exampleUsingNameKafkaCluster)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetKafkaClusterArgs;\nimport com.pulumi.confluentcloud.inputs.GetKafkaClusterEnvironmentArgs;\nimport com.pulumi.confluentcloud.ServiceAccount;\nimport com.pulumi.confluentcloud.ServiceAccountArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUsingId = ConfluentcloudFunctions.getKafkaCluster(GetKafkaClusterArgs.builder()\n            .id(\"lkc-abc123\")\n            .environment(GetKafkaClusterEnvironmentArgs.builder()\n                .id(\"env-xyz456\")\n                .build())\n            .build());\n\n        var test_sa = new ServiceAccount(\"test-sa\", ServiceAccountArgs.builder()        \n            .description(String.format(\"app_mgr for %s\", exampleUsingId.applyValue(getKafkaClusterResult -\u003e getKafkaClusterResult.displayName())))\n            .build());\n\n        final var exampleUsingNameKafkaCluster = ConfluentcloudFunctions.getKafkaCluster(GetKafkaClusterArgs.builder()\n            .displayName(\"basic_kafka_cluster\")\n            .environment(GetKafkaClusterEnvironmentArgs.builder()\n                .id(\"env-xyz456\")\n                .build())\n            .build());\n\n        ctx.export(\"exampleUsingName\", exampleUsingNameKafkaCluster.applyValue(getKafkaClusterResult -\u003e getKafkaClusterResult));\n    }\n}\n```\n```yaml\nresources:\n  test-sa:\n    type: confluentcloud:ServiceAccount\n    properties:\n      description: app_mgr for ${exampleUsingId.displayName}\nvariables:\n  exampleUsingId:\n    Fn::Invoke:\n      Function: confluentcloud:getKafkaCluster\n      Arguments:\n        id: lkc-abc123\n        environment:\n          id: env-xyz456\n  exampleUsingNameKafkaCluster:\n    Fn::Invoke:\n      Function: confluentcloud:getKafkaCluster\n      Arguments:\n        displayName: basic_kafka_cluster\n        environment:\n          id: env-xyz456\noutputs:\n  exampleUsingName: ${exampleUsingNameKafkaCluster}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getKafkaCluster.\n",
                "properties": {
                    "basics": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getKafkaClusterBasic:getKafkaClusterBasic"
                        },
                        "description": "(Optional Configuration Block) The configuration of the Basic Kafka cluster.\n"
                    },
                    "dedicated": {
                        "$ref": "#/types/confluentcloud:index/getKafkaClusterDedicated:getKafkaClusterDedicated",
                        "description": "(Optional Configuration Block) The configuration of the Dedicated Kafka cluster. It supports the following:\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the Kafka cluster.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getKafkaClusterEnvironment:getKafkaClusterEnvironment"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Environment that the Kafka cluster belongs to, for example, `env-xyz456`.\n"
                    },
                    "standards": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getKafkaClusterStandard:getKafkaClusterStandard"
                        },
                        "description": "(Optional Configuration Block) The configuration of the Standard Kafka cluster.\n"
                    }
                },
                "type": "object",
                "required": [
                    "environment"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getKafkaCluster.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "(Required String) An API Version of the schema version of the Kafka cluster, for example, `cmk/v2`.\n"
                    },
                    "availability": {
                        "type": "string",
                        "description": "(Required String) The availability zone configuration of the Kafka cluster. Accepted values are: `SINGLE_ZONE` and `MULTI_ZONE`.\n"
                    },
                    "basics": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getKafkaClusterBasic:getKafkaClusterBasic"
                        },
                        "description": "(Optional Configuration Block) The configuration of the Basic Kafka cluster.\n"
                    },
                    "bootstrapEndpoint": {
                        "type": "string",
                        "description": "(Required String) The bootstrap endpoint used by Kafka clients to connect to the Kafka cluster. (e.g., `pkc-00000.us-central1.gcp.confluent.cloud:9092`).\n"
                    },
                    "cloud": {
                        "type": "string",
                        "description": "(Required String) The cloud service provider that runs the Kafka cluster. Accepted values are: `AWS`, `AZURE`, and `GCP`.\n"
                    },
                    "dedicated": {
                        "$ref": "#/types/confluentcloud:index/getKafkaClusterDedicated:getKafkaClusterDedicated",
                        "description": "(Optional Configuration Block) The configuration of the Dedicated Kafka cluster. It supports the following:\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "(Required String) The name of the Kafka cluster.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getKafkaClusterEnvironment:getKafkaClusterEnvironment"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the Network that the Kafka cluster belongs to, for example, `n-abc123`.\n"
                    },
                    "kind": {
                        "type": "string",
                        "description": "(Required String) A kind of the Kafka cluster, for example, `Cluster`.\n"
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getKafkaClusterNetwork:getKafkaClusterNetwork"
                        }
                    },
                    "rbacCrn": {
                        "type": "string",
                        "description": "(Required String) The Confluent Resource Name of the Kafka cluster, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/cloud-cluster=lkc-abc123`.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "(Required String) The cloud service provider region where the Kafka cluster is running, for example, `us-west-2`. See [Cloud Providers and Regions](https://docs.confluent.io/cloud/current/clusters/regions.html#cloud-providers-and-regions) for a full list of options for AWS, Azure, and GCP.\n"
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "(Required String) The REST endpoint of the Kafka cluster (e.g., `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n"
                    },
                    "standards": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getKafkaClusterStandard:getKafkaClusterStandard"
                        },
                        "description": "(Optional Configuration Block) The configuration of the Standard Kafka cluster.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "availability",
                    "bootstrapEndpoint",
                    "cloud",
                    "displayName",
                    "environment",
                    "id",
                    "kind",
                    "networks",
                    "rbacCrn",
                    "region",
                    "restEndpoint"
                ]
            }
        },
        "confluentcloud:index/getKafkaTopic:getKafkaTopic": {
            "description": "[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n`confluentcloud.KafkaTopic` describes a Kafka Topic data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst orders = confluentcloud.getKafkaTopic({\n    kafkaCluster: {\n        id: confluent_kafka_cluster[\"basic-cluster\"].id,\n    },\n    topicName: \"orders\",\n    restEndpoint: confluent_kafka_cluster[\"basic-cluster\"].rest_endpoint,\n    credentials: {\n        key: \"\u003cKafka API Key for confluent_kafka_cluster.basic-cluster\u003e\",\n        secret: \"\u003cKafka API Secret for confluent_kafka_cluster.basic-cluster\u003e\",\n    },\n});\nexport const config = orders.then(orders =\u003e orders.config);\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\norders = confluentcloud.get_kafka_topic(kafka_cluster=confluentcloud.GetKafkaTopicKafkaClusterArgs(\n        id=confluent_kafka_cluster[\"basic-cluster\"][\"id\"],\n    ),\n    topic_name=\"orders\",\n    rest_endpoint=confluent_kafka_cluster[\"basic-cluster\"][\"rest_endpoint\"],\n    credentials=confluentcloud.GetKafkaTopicCredentialsArgs(\n        key=\"\u003cKafka API Key for confluent_kafka_cluster.basic-cluster\u003e\",\n        secret=\"\u003cKafka API Secret for confluent_kafka_cluster.basic-cluster\u003e\",\n    ))\npulumi.export(\"config\", orders.config)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var orders = ConfluentCloud.GetKafkaTopic.Invoke(new()\n    {\n        KafkaCluster = new ConfluentCloud.Inputs.GetKafkaTopicKafkaClusterInputArgs\n        {\n            Id = confluent_kafka_cluster.Basic_cluster.Id,\n        },\n        TopicName = \"orders\",\n        RestEndpoint = confluent_kafka_cluster.Basic_cluster.Rest_endpoint,\n        Credentials = new ConfluentCloud.Inputs.GetKafkaTopicCredentialsInputArgs\n        {\n            Key = \"\u003cKafka API Key for confluent_kafka_cluster.basic-cluster\u003e\",\n            Secret = \"\u003cKafka API Secret for confluent_kafka_cluster.basic-cluster\u003e\",\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"config\"] = orders.Apply(getKafkaTopicResult =\u003e getKafkaTopicResult.Config),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\torders, err := confluentcloud.LookupKafkaTopic(ctx, \u0026GetKafkaTopicArgs{\n\t\t\tKafkaCluster: GetKafkaTopicKafkaCluster{\n\t\t\t\tId: confluent_kafka_cluster.Basic - cluster.Id,\n\t\t\t},\n\t\t\tTopicName:    \"orders\",\n\t\t\tRestEndpoint: confluent_kafka_cluster.Basic - cluster.Rest_endpoint,\n\t\t\tCredentials: GetKafkaTopicCredentials{\n\t\t\t\tKey:    \"\u003cKafka API Key for confluent_kafka_cluster.basic-cluster\u003e\",\n\t\t\t\tSecret: \"\u003cKafka API Secret for confluent_kafka_cluster.basic-cluster\u003e\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"config\", orders.Config)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetKafkaTopicArgs;\nimport com.pulumi.confluentcloud.inputs.GetKafkaTopicKafkaClusterArgs;\nimport com.pulumi.confluentcloud.inputs.GetKafkaTopicCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var orders = ConfluentcloudFunctions.getKafkaTopic(GetKafkaTopicArgs.builder()\n            .kafkaCluster(GetKafkaTopicKafkaClusterArgs.builder()\n                .id(confluent_kafka_cluster.basic-cluster().id())\n                .build())\n            .topicName(\"orders\")\n            .restEndpoint(confluent_kafka_cluster.basic-cluster().rest_endpoint())\n            .credentials(GetKafkaTopicCredentialsArgs.builder()\n                .key(\"\u003cKafka API Key for confluent_kafka_cluster.basic-cluster\u003e\")\n                .secret(\"\u003cKafka API Secret for confluent_kafka_cluster.basic-cluster\u003e\")\n                .build())\n            .build());\n\n        ctx.export(\"config\", orders.applyValue(getKafkaTopicResult -\u003e getKafkaTopicResult.config()));\n    }\n}\n```\n```yaml\nvariables:\n  orders:\n    Fn::Invoke:\n      Function: confluentcloud:getKafkaTopic\n      Arguments:\n        kafkaCluster:\n          id: ${confluent_kafka_cluster\"basic-cluster\"[%!s(MISSING)].id}\n        topicName: orders\n        restEndpoint: ${confluent_kafka_cluster\"basic-cluster\"[%!s(MISSING)].rest_endpoint}\n        credentials:\n          key: \u003cKafka API Key for confluent_kafka_cluster.basic-cluster\u003e\n          secret: \u003cKafka API Secret for confluent_kafka_cluster.basic-cluster\u003e\noutputs:\n  config: ${orders.config}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getKafkaTopic.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/getKafkaTopicCredentials:getKafkaTopicCredentials",
                        "secret": true
                    },
                    "kafkaCluster": {
                        "$ref": "#/types/confluentcloud:index/getKafkaTopicKafkaCluster:getKafkaTopicKafkaCluster"
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "The REST endpoint of the Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n"
                    },
                    "topicName": {
                        "type": "string",
                        "description": "The name of the topic, for example, `orders-1`. The topic name can be up to 255 characters in length and can contain only alphanumeric characters, hyphens, and underscores.\n"
                    }
                },
                "type": "object",
                "required": [
                    "kafkaCluster",
                    "restEndpoint",
                    "topicName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getKafkaTopic.\n",
                "properties": {
                    "config": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Optional Map) The custom topic settings:\n"
                    },
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/getKafkaTopicCredentials:getKafkaTopicCredentials",
                        "secret": true
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "kafkaCluster": {
                        "$ref": "#/types/confluentcloud:index/getKafkaTopicKafkaCluster:getKafkaTopicKafkaCluster"
                    },
                    "partitionsCount": {
                        "type": "integer",
                        "description": "(Required Number) The number of partitions to create in the topic. Defaults to `6`.\n"
                    },
                    "restEndpoint": {
                        "type": "string"
                    },
                    "topicName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "kafkaCluster",
                    "partitionsCount",
                    "restEndpoint",
                    "topicName",
                    "id"
                ]
            }
        },
        "confluentcloud:index/getKsqlCluster:getKsqlCluster": {
            "description": "## # confluentcloud.KsqlCluster Data Source\n\n[![Open Preview](https://img.shields.io/badge/Lifecycle%20Stage-Open%20Preview-%2300afba)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n\u003e **Note:** `confluentcloud.KsqlCluster` data source is available in **Open Preview** for early adopters. Open Preview features are introduced to gather customer feedback. This feature should be used only for evaluation and non-production testing purposes or to provide feedback to Confluent, particularly as it becomes more widely available in follow-on editions.  \n**Open Preview** features are intended for evaluation use in development and testing environments only, and not for production use. The warranty, SLA, and Support Services provisions of your agreement with Confluent do not apply to Open Preview features. Open Preview features are considered to be a Proof of Concept as defined in the Confluent Cloud Terms of Service. Confluent may discontinue providing preview releases of the Open Preview features at any time in Confluent’s sole discretion.\n\n`confluentcloud.KsqlCluster` describes a ksqlDB cluster data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleUsingIdKsqlCluster = confluentcloud.getKsqlCluster({\n    id: \"lksqlc-abc123\",\n    environment: {\n        id: \"env-xyz456\",\n    },\n});\nexport const exampleUsingId = exampleUsingIdKsqlCluster;\nconst exampleUsingNameKsqlCluster = confluentcloud.getKsqlCluster({\n    displayName: \"ksqldb_cluster\",\n    environment: {\n        id: \"env-xyz456\",\n    },\n});\nexport const exampleUsingName = exampleUsingNameKsqlCluster;\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_using_id_ksql_cluster = confluentcloud.get_ksql_cluster(id=\"lksqlc-abc123\",\n    environment=confluentcloud.GetKsqlClusterEnvironmentArgs(\n        id=\"env-xyz456\",\n    ))\npulumi.export(\"exampleUsingId\", example_using_id_ksql_cluster)\nexample_using_name_ksql_cluster = confluentcloud.get_ksql_cluster(display_name=\"ksqldb_cluster\",\n    environment=confluentcloud.GetKsqlClusterEnvironmentArgs(\n        id=\"env-xyz456\",\n    ))\npulumi.export(\"exampleUsingName\", example_using_name_ksql_cluster)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUsingIdKsqlCluster = ConfluentCloud.GetKsqlCluster.Invoke(new()\n    {\n        Id = \"lksqlc-abc123\",\n        Environment = new ConfluentCloud.Inputs.GetKsqlClusterEnvironmentInputArgs\n        {\n            Id = \"env-xyz456\",\n        },\n    });\n\n    var exampleUsingNameKsqlCluster = ConfluentCloud.GetKsqlCluster.Invoke(new()\n    {\n        DisplayName = \"ksqldb_cluster\",\n        Environment = new ConfluentCloud.Inputs.GetKsqlClusterEnvironmentInputArgs\n        {\n            Id = \"env-xyz456\",\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"exampleUsingId\"] = exampleUsingIdKsqlCluster.Apply(getKsqlClusterResult =\u003e getKsqlClusterResult),\n        [\"exampleUsingName\"] = exampleUsingNameKsqlCluster.Apply(getKsqlClusterResult =\u003e getKsqlClusterResult),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUsingIdKsqlCluster, err := confluentcloud.LookupKsqlCluster(ctx, \u0026GetKsqlClusterArgs{\n\t\t\tId: pulumi.StringRef(\"lksqlc-abc123\"),\n\t\t\tEnvironment: GetKsqlClusterEnvironment{\n\t\t\t\tId: \"env-xyz456\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingId\", exampleUsingIdKsqlCluster)\n\t\texampleUsingNameKsqlCluster, err := confluentcloud.LookupKsqlCluster(ctx, \u0026GetKsqlClusterArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"ksqldb_cluster\"),\n\t\t\tEnvironment: GetKsqlClusterEnvironment{\n\t\t\t\tId: \"env-xyz456\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingName\", exampleUsingNameKsqlCluster)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetKsqlClusterArgs;\nimport com.pulumi.confluentcloud.inputs.GetKsqlClusterEnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUsingIdKsqlCluster = ConfluentcloudFunctions.getKsqlCluster(GetKsqlClusterArgs.builder()\n            .id(\"lksqlc-abc123\")\n            .environment(GetKsqlClusterEnvironmentArgs.builder()\n                .id(\"env-xyz456\")\n                .build())\n            .build());\n\n        ctx.export(\"exampleUsingId\", exampleUsingIdKsqlCluster.applyValue(getKsqlClusterResult -\u003e getKsqlClusterResult));\n        final var exampleUsingNameKsqlCluster = ConfluentcloudFunctions.getKsqlCluster(GetKsqlClusterArgs.builder()\n            .displayName(\"ksqldb_cluster\")\n            .environment(GetKsqlClusterEnvironmentArgs.builder()\n                .id(\"env-xyz456\")\n                .build())\n            .build());\n\n        ctx.export(\"exampleUsingName\", exampleUsingNameKsqlCluster.applyValue(getKsqlClusterResult -\u003e getKsqlClusterResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleUsingIdKsqlCluster:\n    Fn::Invoke:\n      Function: confluentcloud:getKsqlCluster\n      Arguments:\n        id: lksqlc-abc123\n        environment:\n          id: env-xyz456\n  exampleUsingNameKsqlCluster:\n    Fn::Invoke:\n      Function: confluentcloud:getKsqlCluster\n      Arguments:\n        displayName: ksqldb_cluster\n        environment:\n          id: env-xyz456\noutputs:\n  exampleUsingId: ${exampleUsingIdKsqlCluster}\n  exampleUsingName: ${exampleUsingNameKsqlCluster}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getKsqlCluster.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "The name of the ksqlDB cluster.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getKsqlClusterEnvironment:getKsqlClusterEnvironment"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Environment that the ksqlDB cluster belongs to, for example, `env-xyz456`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "environment"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getKsqlCluster.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "(Required String) An API Version of the schema version of the ksqlDB cluster, for example, `ksqldbcm/v2`.\n"
                    },
                    "credentialIdentities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getKsqlClusterCredentialIdentity:getKsqlClusterCredentialIdentity"
                        }
                    },
                    "csu": {
                        "type": "integer",
                        "description": "(Required Number) The number of CSUs (Confluent Streaming Units) in the ksqlDB cluster.\n- `use_detailed_processing_log` (Optional Boolean) Controls whether the row data should be included in the processing log topic.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getKsqlClusterEnvironment:getKsqlClusterEnvironment"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the service or user account that the ksqlDB cluster belongs to, for example, `sa-abc123`.\n"
                    },
                    "kafkaClusters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getKsqlClusterKafkaCluster:getKsqlClusterKafkaCluster"
                        }
                    },
                    "kind": {
                        "type": "string",
                        "description": "(Required String) A kind of the ksqlDB cluster, for example, `Cluster`.\n"
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "(Required String) The API endpoint of the ksqlDB cluster, for example, `https://pksqlc-00000.us-central1.gcp.glb.confluent.cloud`.\n- `kafka_cluster` (Optional Configuration Block) supports the following:\n",
                        "deprecationMessage": "use rest_endpoint instead"
                    },
                    "storage": {
                        "type": "integer",
                        "description": "(Required Integer) The amount of storage (in GB) provisioned to this cluster.\n"
                    },
                    "topicPrefix": {
                        "type": "string",
                        "description": "(Required String) Topic name prefix used by this ksqlDB cluster. Used to assign ACLs for this ksqlDB cluster to use, for example, `pksqlc-00000`.\n"
                    },
                    "useDetailedProcessingLog": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "credentialIdentities",
                    "csu",
                    "displayName",
                    "environment",
                    "id",
                    "kafkaClusters",
                    "kind",
                    "restEndpoint",
                    "storage",
                    "topicPrefix",
                    "useDetailedProcessingLog"
                ]
            }
        },
        "confluentcloud:index/getNetwork:getNetwork": {
            "description": "[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n`confluentcloud.Network` describes a Network data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleUsingId = confluentcloud.getNetwork({\n    id: \"n-abc123\",\n    environment: {\n        id: \"env-xyz456\",\n    },\n});\nconst test_sa = new confluentcloud.ServiceAccount(\"test-sa\", {description: exampleUsingId.then(exampleUsingId =\u003e `test_sa for ${exampleUsingId.displayName}`)});\nconst exampleUsingNameNetwork = confluentcloud.getNetwork({\n    displayName: \"my_network\",\n    environment: {\n        id: \"env-xyz456\",\n    },\n});\nexport const exampleUsingName = exampleUsingNameNetwork;\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_using_id = confluentcloud.get_network(id=\"n-abc123\",\n    environment=confluentcloud.GetNetworkEnvironmentArgs(\n        id=\"env-xyz456\",\n    ))\ntest_sa = confluentcloud.ServiceAccount(\"test-sa\", description=f\"test_sa for {example_using_id.display_name}\")\nexample_using_name_network = confluentcloud.get_network(display_name=\"my_network\",\n    environment=confluentcloud.GetNetworkEnvironmentArgs(\n        id=\"env-xyz456\",\n    ))\npulumi.export(\"exampleUsingName\", example_using_name_network)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUsingId = ConfluentCloud.GetNetwork.Invoke(new()\n    {\n        Id = \"n-abc123\",\n        Environment = new ConfluentCloud.Inputs.GetNetworkEnvironmentInputArgs\n        {\n            Id = \"env-xyz456\",\n        },\n    });\n\n    var test_sa = new ConfluentCloud.ServiceAccount(\"test-sa\", new()\n    {\n        Description = $\"test_sa for {exampleUsingId.Apply(getNetworkResult =\u003e getNetworkResult.DisplayName)}\",\n    });\n\n    var exampleUsingNameNetwork = ConfluentCloud.GetNetwork.Invoke(new()\n    {\n        DisplayName = \"my_network\",\n        Environment = new ConfluentCloud.Inputs.GetNetworkEnvironmentInputArgs\n        {\n            Id = \"env-xyz456\",\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"exampleUsingName\"] = exampleUsingNameNetwork.Apply(getNetworkResult =\u003e getNetworkResult),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUsingId, err := confluentcloud.LookupNetwork(ctx, \u0026GetNetworkArgs{\n\t\t\tId: pulumi.StringRef(\"n-abc123\"),\n\t\t\tEnvironment: GetNetworkEnvironment{\n\t\t\t\tId: \"env-xyz456\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = confluentcloud.NewServiceAccount(ctx, \"test-sa\", \u0026confluentcloud.ServiceAccountArgs{\n\t\t\tDescription: pulumi.String(fmt.Sprintf(\"test_sa for %v\", exampleUsingId.DisplayName)),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUsingNameNetwork, err := confluentcloud.LookupNetwork(ctx, \u0026GetNetworkArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"my_network\"),\n\t\t\tEnvironment: GetNetworkEnvironment{\n\t\t\t\tId: \"env-xyz456\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingName\", exampleUsingNameNetwork)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetNetworkArgs;\nimport com.pulumi.confluentcloud.inputs.GetNetworkEnvironmentArgs;\nimport com.pulumi.confluentcloud.ServiceAccount;\nimport com.pulumi.confluentcloud.ServiceAccountArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUsingId = ConfluentcloudFunctions.getNetwork(GetNetworkArgs.builder()\n            .id(\"n-abc123\")\n            .environment(GetNetworkEnvironmentArgs.builder()\n                .id(\"env-xyz456\")\n                .build())\n            .build());\n\n        var test_sa = new ServiceAccount(\"test-sa\", ServiceAccountArgs.builder()        \n            .description(String.format(\"test_sa for %s\", exampleUsingId.applyValue(getNetworkResult -\u003e getNetworkResult.displayName())))\n            .build());\n\n        final var exampleUsingNameNetwork = ConfluentcloudFunctions.getNetwork(GetNetworkArgs.builder()\n            .displayName(\"my_network\")\n            .environment(GetNetworkEnvironmentArgs.builder()\n                .id(\"env-xyz456\")\n                .build())\n            .build());\n\n        ctx.export(\"exampleUsingName\", exampleUsingNameNetwork.applyValue(getNetworkResult -\u003e getNetworkResult));\n    }\n}\n```\n```yaml\nresources:\n  test-sa:\n    type: confluentcloud:ServiceAccount\n    properties:\n      description: test_sa for ${exampleUsingId.displayName}\nvariables:\n  exampleUsingId:\n    Fn::Invoke:\n      Function: confluentcloud:getNetwork\n      Arguments:\n        id: n-abc123\n        environment:\n          id: env-xyz456\n  exampleUsingNameNetwork:\n    Fn::Invoke:\n      Function: confluentcloud:getNetwork\n      Arguments:\n        displayName: my_network\n        environment:\n          id: env-xyz456\noutputs:\n  exampleUsingName: ${exampleUsingNameNetwork}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNetwork.\n",
                "properties": {
                    "aws": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getNetworkAw:getNetworkAw"
                        },
                        "description": "(Optional Configuration Block) The AWS-specific network details if available. It supports the following:\n"
                    },
                    "azures": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getNetworkAzure:getNetworkAzure"
                        },
                        "description": "(Optional Configuration Block) The Azure-specific network details if available. It supports the following:\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the Network.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getNetworkEnvironment:getNetworkEnvironment"
                    },
                    "gcps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getNetworkGcp:getNetworkGcp"
                        },
                        "description": "(Optional Configuration Block) The GCP-specific network details if available. It supports the following:\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Environment that the Network belongs to, for example, `env-xyz456`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "environment"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNetwork.\n",
                "properties": {
                    "aws": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getNetworkAw:getNetworkAw"
                        },
                        "description": "(Optional Configuration Block) The AWS-specific network details if available. It supports the following:\n"
                    },
                    "azures": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getNetworkAzure:getNetworkAzure"
                        },
                        "description": "(Optional Configuration Block) The Azure-specific network details if available. It supports the following:\n"
                    },
                    "cidr": {
                        "type": "string",
                        "description": "(Required String) The IPv4 CIDR block to used for the network. Must be `/16`. Required for VPC peering and AWS TransitGateway.\n"
                    },
                    "cloud": {
                        "type": "string",
                        "description": "(Required String) The cloud service provider in which the network exists. Accepted values are: `AWS`, `AZURE`, and `GCP`.\n"
                    },
                    "connectionTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Required List of String) The list of connection types that may be used with the network. Accepted connection types are: `PEERING`, `TRANSITGATEWAY`, and `PRIVATELINK`.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "(Required String) The name of the Network.\n"
                    },
                    "dnsDomain": {
                        "type": "string"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getNetworkEnvironment:getNetworkEnvironment"
                    },
                    "gcps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getNetworkGcp:getNetworkGcp"
                        },
                        "description": "(Optional Configuration Block) The GCP-specific network details if available. It supports the following:\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the Network, for example, `n-abc123`.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "(Required String) The cloud provider region where the network exists.\n"
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "(Required String) The Confluent Resource Name of the Network.\n"
                    },
                    "zonalSubdomains": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "zones": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Optional List of String) The 3 availability zones for this network. They can optionally be specified for AWS networks\nused with Private Link. Otherwise, they are automatically chosen by Confluent Cloud.\nOn AWS, zones are AWS [AZ IDs](https://docs.aws.amazon.com/ram/latest/userguide/working-with-az-ids.html), for example, `use1-az3`.\nOn GCP, zones are GCP [zones](https://cloud.google.com/compute/docs/regions-zones), for example, `us-central1-c`.\nOn Azure, zones are Confluent-chosen names (for example, `1`, `2`, `3`) since Azure does not have universal zone identifiers.\n"
                    }
                },
                "type": "object",
                "required": [
                    "aws",
                    "azures",
                    "cidr",
                    "cloud",
                    "connectionTypes",
                    "displayName",
                    "dnsDomain",
                    "environment",
                    "gcps",
                    "id",
                    "region",
                    "resourceName",
                    "zonalSubdomains",
                    "zones"
                ]
            }
        },
        "confluentcloud:index/getOrganization:getOrganization": {
            "description": "[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n`confluentcloud.getOrganization` describes an Organization data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleOrganization = confluentcloud.getOrganization({});\nexport const example = exampleOrganization;\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_organization = confluentcloud.get_organization()\npulumi.export(\"example\", example_organization)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleOrganization = ConfluentCloud.GetOrganization.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"example\"] = exampleOrganization.Apply(getOrganizationResult =\u003e getOrganizationResult),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleOrganization, err := confluentcloud.GetOrganization(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"example\", exampleOrganization)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleOrganization = ConfluentcloudFunctions.getOrganization();\n\n        ctx.export(\"example\", exampleOrganization.applyValue(getOrganizationResult -\u003e getOrganizationResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleOrganization:\n    Fn::Invoke:\n      Function: confluentcloud:getOrganization\n      Arguments: {}\noutputs:\n  example: ${exampleOrganization}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getOrganization.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the Organization, for example, `1111aaaa-11aa-11aa-11aa-111111aaaaaa`.\n"
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "(Required String) The Confluent Resource Name of the Organization, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "resourceName"
                ]
            }
        },
        "confluentcloud:index/getPeering:getPeering": {
            "description": "[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n`confluentcloud.Peering` describes a Peering data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleUsingIdPeering = confluentcloud.getPeering({\n    id: \"peer-abc123\",\n    environment: {\n        id: \"env-xyz456\",\n    },\n});\nexport const exampleUsingId = exampleUsingIdPeering;\nconst exampleUsingNamePeering = confluentcloud.getPeering({\n    displayName: \"my_peering\",\n    environment: {\n        id: \"env-xyz456\",\n    },\n});\nexport const exampleUsingName = exampleUsingNamePeering;\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_using_id_peering = confluentcloud.get_peering(id=\"peer-abc123\",\n    environment=confluentcloud.GetPeeringEnvironmentArgs(\n        id=\"env-xyz456\",\n    ))\npulumi.export(\"exampleUsingId\", example_using_id_peering)\nexample_using_name_peering = confluentcloud.get_peering(display_name=\"my_peering\",\n    environment=confluentcloud.GetPeeringEnvironmentArgs(\n        id=\"env-xyz456\",\n    ))\npulumi.export(\"exampleUsingName\", example_using_name_peering)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUsingIdPeering = ConfluentCloud.GetPeering.Invoke(new()\n    {\n        Id = \"peer-abc123\",\n        Environment = new ConfluentCloud.Inputs.GetPeeringEnvironmentInputArgs\n        {\n            Id = \"env-xyz456\",\n        },\n    });\n\n    var exampleUsingNamePeering = ConfluentCloud.GetPeering.Invoke(new()\n    {\n        DisplayName = \"my_peering\",\n        Environment = new ConfluentCloud.Inputs.GetPeeringEnvironmentInputArgs\n        {\n            Id = \"env-xyz456\",\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"exampleUsingId\"] = exampleUsingIdPeering.Apply(getPeeringResult =\u003e getPeeringResult),\n        [\"exampleUsingName\"] = exampleUsingNamePeering.Apply(getPeeringResult =\u003e getPeeringResult),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUsingIdPeering, err := confluentcloud.LookupPeering(ctx, \u0026GetPeeringArgs{\n\t\t\tId: pulumi.StringRef(\"peer-abc123\"),\n\t\t\tEnvironment: GetPeeringEnvironment{\n\t\t\t\tId: \"env-xyz456\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingId\", exampleUsingIdPeering)\n\t\texampleUsingNamePeering, err := confluentcloud.LookupPeering(ctx, \u0026GetPeeringArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"my_peering\"),\n\t\t\tEnvironment: GetPeeringEnvironment{\n\t\t\t\tId: \"env-xyz456\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingName\", exampleUsingNamePeering)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetPeeringArgs;\nimport com.pulumi.confluentcloud.inputs.GetPeeringEnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUsingIdPeering = ConfluentcloudFunctions.getPeering(GetPeeringArgs.builder()\n            .id(\"peer-abc123\")\n            .environment(GetPeeringEnvironmentArgs.builder()\n                .id(\"env-xyz456\")\n                .build())\n            .build());\n\n        ctx.export(\"exampleUsingId\", exampleUsingIdPeering.applyValue(getPeeringResult -\u003e getPeeringResult));\n        final var exampleUsingNamePeering = ConfluentcloudFunctions.getPeering(GetPeeringArgs.builder()\n            .displayName(\"my_peering\")\n            .environment(GetPeeringEnvironmentArgs.builder()\n                .id(\"env-xyz456\")\n                .build())\n            .build());\n\n        ctx.export(\"exampleUsingName\", exampleUsingNamePeering.applyValue(getPeeringResult -\u003e getPeeringResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleUsingIdPeering:\n    Fn::Invoke:\n      Function: confluentcloud:getPeering\n      Arguments:\n        id: peer-abc123\n        environment:\n          id: env-xyz456\n  exampleUsingNamePeering:\n    Fn::Invoke:\n      Function: confluentcloud:getPeering\n      Arguments:\n        displayName: my_peering\n        environment:\n          id: env-xyz456\noutputs:\n  exampleUsingId: ${exampleUsingIdPeering}\n  exampleUsingName: ${exampleUsingNamePeering}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPeering.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the Peering.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getPeeringEnvironment:getPeeringEnvironment"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Environment that the Peering belongs to, for example, `env-xyz456`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "environment"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPeering.\n",
                "properties": {
                    "aws": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getPeeringAw:getPeeringAw"
                        },
                        "description": "(Optional Configuration Block) The AWS-specific Peering details if available. It supports the following:\n"
                    },
                    "azures": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getPeeringAzure:getPeeringAzure"
                        },
                        "description": "(Optional Configuration Block) The Azure-specific Peering details if available. It supports the following:\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "(Optional String) The name of the Peering.\n- `environment` (Required Configuration Block) supports the following:\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getPeeringEnvironment:getPeeringEnvironment"
                    },
                    "gcps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getPeeringGcp:getPeeringGcp"
                        },
                        "description": "(Optional Configuration Block) The Azure-specific Peering details if available. It supports the following:\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the Network that the Peering belongs to, for example, `n-abc123`.\n"
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getPeeringNetwork:getPeeringNetwork"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "aws",
                    "azures",
                    "displayName",
                    "environment",
                    "gcps",
                    "id",
                    "networks"
                ]
            }
        },
        "confluentcloud:index/getPrivateLinkAccess:getPrivateLinkAccess": {
            "description": "[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n`confluentcloud.PrivateLinkAccess` describes a Network data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleUsingIdPrivateLinkAccess = confluentcloud.getPrivateLinkAccess({\n    id: \"pla-abc123\",\n    environment: {\n        id: \"env-xyz456\",\n    },\n});\nexport const exampleUsingId = exampleUsingIdPrivateLinkAccess;\nconst exampleUsingNamePrivateLinkAccess = confluentcloud.getPrivateLinkAccess({\n    displayName: \"my_pla\",\n    environment: {\n        id: \"env-xyz456\",\n    },\n});\nexport const exampleUsingName = exampleUsingNamePrivateLinkAccess;\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_using_id_private_link_access = confluentcloud.get_private_link_access(id=\"pla-abc123\",\n    environment=confluentcloud.GetPrivateLinkAccessEnvironmentArgs(\n        id=\"env-xyz456\",\n    ))\npulumi.export(\"exampleUsingId\", example_using_id_private_link_access)\nexample_using_name_private_link_access = confluentcloud.get_private_link_access(display_name=\"my_pla\",\n    environment=confluentcloud.GetPrivateLinkAccessEnvironmentArgs(\n        id=\"env-xyz456\",\n    ))\npulumi.export(\"exampleUsingName\", example_using_name_private_link_access)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUsingIdPrivateLinkAccess = ConfluentCloud.GetPrivateLinkAccess.Invoke(new()\n    {\n        Id = \"pla-abc123\",\n        Environment = new ConfluentCloud.Inputs.GetPrivateLinkAccessEnvironmentInputArgs\n        {\n            Id = \"env-xyz456\",\n        },\n    });\n\n    var exampleUsingNamePrivateLinkAccess = ConfluentCloud.GetPrivateLinkAccess.Invoke(new()\n    {\n        DisplayName = \"my_pla\",\n        Environment = new ConfluentCloud.Inputs.GetPrivateLinkAccessEnvironmentInputArgs\n        {\n            Id = \"env-xyz456\",\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"exampleUsingId\"] = exampleUsingIdPrivateLinkAccess.Apply(getPrivateLinkAccessResult =\u003e getPrivateLinkAccessResult),\n        [\"exampleUsingName\"] = exampleUsingNamePrivateLinkAccess.Apply(getPrivateLinkAccessResult =\u003e getPrivateLinkAccessResult),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUsingIdPrivateLinkAccess, err := confluentcloud.LookupPrivateLinkAccess(ctx, \u0026GetPrivateLinkAccessArgs{\n\t\t\tId: pulumi.StringRef(\"pla-abc123\"),\n\t\t\tEnvironment: GetPrivateLinkAccessEnvironment{\n\t\t\t\tId: \"env-xyz456\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingId\", exampleUsingIdPrivateLinkAccess)\n\t\texampleUsingNamePrivateLinkAccess, err := confluentcloud.LookupPrivateLinkAccess(ctx, \u0026GetPrivateLinkAccessArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"my_pla\"),\n\t\t\tEnvironment: GetPrivateLinkAccessEnvironment{\n\t\t\t\tId: \"env-xyz456\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingName\", exampleUsingNamePrivateLinkAccess)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetPrivateLinkAccessArgs;\nimport com.pulumi.confluentcloud.inputs.GetPrivateLinkAccessEnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUsingIdPrivateLinkAccess = ConfluentcloudFunctions.getPrivateLinkAccess(GetPrivateLinkAccessArgs.builder()\n            .id(\"pla-abc123\")\n            .environment(GetPrivateLinkAccessEnvironmentArgs.builder()\n                .id(\"env-xyz456\")\n                .build())\n            .build());\n\n        ctx.export(\"exampleUsingId\", exampleUsingIdPrivateLinkAccess.applyValue(getPrivateLinkAccessResult -\u003e getPrivateLinkAccessResult));\n        final var exampleUsingNamePrivateLinkAccess = ConfluentcloudFunctions.getPrivateLinkAccess(GetPrivateLinkAccessArgs.builder()\n            .displayName(\"my_pla\")\n            .environment(GetPrivateLinkAccessEnvironmentArgs.builder()\n                .id(\"env-xyz456\")\n                .build())\n            .build());\n\n        ctx.export(\"exampleUsingName\", exampleUsingNamePrivateLinkAccess.applyValue(getPrivateLinkAccessResult -\u003e getPrivateLinkAccessResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleUsingIdPrivateLinkAccess:\n    Fn::Invoke:\n      Function: confluentcloud:getPrivateLinkAccess\n      Arguments:\n        id: pla-abc123\n        environment:\n          id: env-xyz456\n  exampleUsingNamePrivateLinkAccess:\n    Fn::Invoke:\n      Function: confluentcloud:getPrivateLinkAccess\n      Arguments:\n        displayName: my_pla\n        environment:\n          id: env-xyz456\noutputs:\n  exampleUsingId: ${exampleUsingIdPrivateLinkAccess}\n  exampleUsingName: ${exampleUsingNamePrivateLinkAccess}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPrivateLinkAccess.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the Private Link Access.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getPrivateLinkAccessEnvironment:getPrivateLinkAccessEnvironment"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Environment that the Private Link Access belongs to, for example, `env-xyz456`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "environment"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPrivateLinkAccess.\n",
                "properties": {
                    "aws": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getPrivateLinkAccessAw:getPrivateLinkAccessAw"
                        },
                        "description": "(Optional Configuration Block) The AWS-specific Private Link Access details if available. It supports the following:\n"
                    },
                    "azures": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getPrivateLinkAccessAzure:getPrivateLinkAccessAzure"
                        },
                        "description": "(Optional Configuration Block) The Azure-specific Private Link Access details if available. It supports the following:\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "(Optional String) The name of the Private Link Access.\n- `environment` (Required Configuration Block) supports the following:\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getPrivateLinkAccessEnvironment:getPrivateLinkAccessEnvironment"
                    },
                    "gcps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getPrivateLinkAccessGcp:getPrivateLinkAccessGcp"
                        },
                        "description": "(Optional Configuration Block) The GCP-specific Private Service Connect details if available. It supports the following:\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the Network that the Private Link Access belongs to, for example, `n-abc123`.\n"
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getPrivateLinkAccessNetwork:getPrivateLinkAccessNetwork"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "aws",
                    "azures",
                    "displayName",
                    "environment",
                    "gcps",
                    "id",
                    "networks"
                ]
            }
        },
        "confluentcloud:index/getRoleBinding:getRoleBinding": {
            "description": "[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n`confluentcloud.RoleBinding` describes a Role Binding.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleRoleBinding = confluentcloud.getRoleBinding({\n    id: \"rb-abc123\",\n});\nexport const example = exampleRoleBinding;\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_role_binding = confluentcloud.get_role_binding(id=\"rb-abc123\")\npulumi.export(\"example\", example_role_binding)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleRoleBinding = ConfluentCloud.GetRoleBinding.Invoke(new()\n    {\n        Id = \"rb-abc123\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"example\"] = exampleRoleBinding.Apply(getRoleBindingResult =\u003e getRoleBindingResult),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleRoleBinding, err := confluentcloud.LookupRoleBinding(ctx, \u0026GetRoleBindingArgs{\n\t\t\tId: \"rb-abc123\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"example\", exampleRoleBinding)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetRoleBindingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleRoleBinding = ConfluentcloudFunctions.getRoleBinding(GetRoleBindingArgs.builder()\n            .id(\"rb-abc123\")\n            .build());\n\n        ctx.export(\"example\", exampleRoleBinding.applyValue(getRoleBindingResult -\u003e getRoleBindingResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleRoleBinding:\n    Fn::Invoke:\n      Function: confluentcloud:getRoleBinding\n      Arguments:\n        id: rb-abc123\noutputs:\n  example: ${exampleRoleBinding}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRoleBinding.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the Role Binding (for example, `rb-abc123`).\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRoleBinding.\n",
                "properties": {
                    "crnPattern": {
                        "type": "string",
                        "description": "(Required String) A [Confluent Resource Name(CRN)](https://docs.confluent.io/cloud/current/api.html#section/Identifiers-and-URLs/Confluent-Resource-Names-(CRNs)) that specifies the scope and resource patterns necessary for the role to bind.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "principal": {
                        "type": "string",
                        "description": "(Required String) A principal User to bind the role to, for example, \"User:u-111aaa\" for binding to a user \"u-111aaa\", or \"User:sa-111aaa\" for binding to a service account \"sa-111aaa\".\n"
                    },
                    "roleName": {
                        "type": "string",
                        "description": "(Required String) A name of the role to bind to the principal. See [Confluent Cloud RBAC Roles](https://docs.confluent.io/cloud/current/access-management/access-control/cloud-rbac.html#ccloud-rbac-roles) for a full list of supported role names.\n"
                    }
                },
                "type": "object",
                "required": [
                    "crnPattern",
                    "id",
                    "principal",
                    "roleName"
                ]
            }
        },
        "confluentcloud:index/getSchemaRegistryCluster:getSchemaRegistryCluster": {
            "description": "[![Open Preview](https://img.shields.io/badge/Lifecycle%20Stage-Open%20Preview-%2300afba)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n\u003e **Note:** `confluentcloud.SchemaRegistryCluster` resource is available in **Open Preview** for early adopters. Open Preview features are introduced to gather customer feedback. This feature should be used only for evaluation and non-production testing purposes or to provide feedback to Confluent, particularly as it becomes more widely available in follow-on editions.  \n**Open Preview** features are intended for evaluation use in development and testing environments only, and not for production use. The warranty, SLA, and Support Services provisions of your agreement with Confluent do not apply to Open Preview features. Open Preview features are considered to be a Proof of Concept as defined in the Confluent Cloud Terms of Service. Confluent may discontinue providing preview releases of the Open Preview features at any time in Confluent’s sole discretion.\n\n`confluentcloud.SchemaRegistryCluster` describes a Schema Registry cluster data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleUsingIdSchemaRegistryCluster = confluentcloud.getSchemaRegistryCluster({\n    id: \"lsrc-abc123\",\n    environment: {\n        id: \"env-xyz456\",\n    },\n});\nexport const exampleUsingId = exampleUsingIdSchemaRegistryCluster;\nconst exampleUsingNameSchemaRegistryCluster = confluentcloud.getSchemaRegistryCluster({\n    displayName: \"Stream Governance Package\",\n    environment: {\n        id: \"env-xyz456\",\n    },\n});\nexport const exampleUsingName = exampleUsingNameSchemaRegistryCluster;\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_using_id_schema_registry_cluster = confluentcloud.get_schema_registry_cluster(id=\"lsrc-abc123\",\n    environment=confluentcloud.GetSchemaRegistryClusterEnvironmentArgs(\n        id=\"env-xyz456\",\n    ))\npulumi.export(\"exampleUsingId\", example_using_id_schema_registry_cluster)\nexample_using_name_schema_registry_cluster = confluentcloud.get_schema_registry_cluster(display_name=\"Stream Governance Package\",\n    environment=confluentcloud.GetSchemaRegistryClusterEnvironmentArgs(\n        id=\"env-xyz456\",\n    ))\npulumi.export(\"exampleUsingName\", example_using_name_schema_registry_cluster)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUsingIdSchemaRegistryCluster = ConfluentCloud.GetSchemaRegistryCluster.Invoke(new()\n    {\n        Id = \"lsrc-abc123\",\n        Environment = new ConfluentCloud.Inputs.GetSchemaRegistryClusterEnvironmentInputArgs\n        {\n            Id = \"env-xyz456\",\n        },\n    });\n\n    var exampleUsingNameSchemaRegistryCluster = ConfluentCloud.GetSchemaRegistryCluster.Invoke(new()\n    {\n        DisplayName = \"Stream Governance Package\",\n        Environment = new ConfluentCloud.Inputs.GetSchemaRegistryClusterEnvironmentInputArgs\n        {\n            Id = \"env-xyz456\",\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"exampleUsingId\"] = exampleUsingIdSchemaRegistryCluster.Apply(getSchemaRegistryClusterResult =\u003e getSchemaRegistryClusterResult),\n        [\"exampleUsingName\"] = exampleUsingNameSchemaRegistryCluster.Apply(getSchemaRegistryClusterResult =\u003e getSchemaRegistryClusterResult),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUsingIdSchemaRegistryCluster, err := confluentcloud.LookupSchemaRegistryCluster(ctx, \u0026GetSchemaRegistryClusterArgs{\n\t\t\tId: pulumi.StringRef(\"lsrc-abc123\"),\n\t\t\tEnvironment: GetSchemaRegistryClusterEnvironment{\n\t\t\t\tId: \"env-xyz456\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingId\", exampleUsingIdSchemaRegistryCluster)\n\t\texampleUsingNameSchemaRegistryCluster, err := confluentcloud.LookupSchemaRegistryCluster(ctx, \u0026GetSchemaRegistryClusterArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"Stream Governance Package\"),\n\t\t\tEnvironment: GetSchemaRegistryClusterEnvironment{\n\t\t\t\tId: \"env-xyz456\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingName\", exampleUsingNameSchemaRegistryCluster)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetSchemaRegistryClusterArgs;\nimport com.pulumi.confluentcloud.inputs.GetSchemaRegistryClusterEnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUsingIdSchemaRegistryCluster = ConfluentcloudFunctions.getSchemaRegistryCluster(GetSchemaRegistryClusterArgs.builder()\n            .id(\"lsrc-abc123\")\n            .environment(GetSchemaRegistryClusterEnvironmentArgs.builder()\n                .id(\"env-xyz456\")\n                .build())\n            .build());\n\n        ctx.export(\"exampleUsingId\", exampleUsingIdSchemaRegistryCluster.applyValue(getSchemaRegistryClusterResult -\u003e getSchemaRegistryClusterResult));\n        final var exampleUsingNameSchemaRegistryCluster = ConfluentcloudFunctions.getSchemaRegistryCluster(GetSchemaRegistryClusterArgs.builder()\n            .displayName(\"Stream Governance Package\")\n            .environment(GetSchemaRegistryClusterEnvironmentArgs.builder()\n                .id(\"env-xyz456\")\n                .build())\n            .build());\n\n        ctx.export(\"exampleUsingName\", exampleUsingNameSchemaRegistryCluster.applyValue(getSchemaRegistryClusterResult -\u003e getSchemaRegistryClusterResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleUsingIdSchemaRegistryCluster:\n    Fn::Invoke:\n      Function: confluentcloud:getSchemaRegistryCluster\n      Arguments:\n        id: lsrc-abc123\n        environment:\n          id: env-xyz456\n  exampleUsingNameSchemaRegistryCluster:\n    Fn::Invoke:\n      Function: confluentcloud:getSchemaRegistryCluster\n      Arguments:\n        displayName: Stream Governance Package\n        environment:\n          id: env-xyz456\noutputs:\n  exampleUsingId: ${exampleUsingIdSchemaRegistryCluster}\n  exampleUsingName: ${exampleUsingNameSchemaRegistryCluster}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSchemaRegistryCluster.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "The name for the Schema Registry cluster.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getSchemaRegistryClusterEnvironment:getSchemaRegistryClusterEnvironment"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Environment that the Schema Registry cluster belongs to, for example, `env-xyz456`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "environment"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSchemaRegistryCluster.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "(Required String) An API Version of the schema version of the Schema Registry cluster, for example, `stream-governance/v2`.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "(Required String) The name of the Schema Registry cluster, for example, `Stream Governance Package`.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getSchemaRegistryClusterEnvironment:getSchemaRegistryClusterEnvironment"
                    },
                    "id": {
                        "type": "string"
                    },
                    "kind": {
                        "type": "string",
                        "description": "(Required String) A kind of the Schema Registry cluster, for example, `Cluster`.\n"
                    },
                    "package": {
                        "type": "string",
                        "description": "(Required String) The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.\n- `region` (Required Configuration Block) supports the following:\n"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getSchemaRegistryClusterRegion:getSchemaRegistryClusterRegion"
                        }
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "(Required String) The Confluent Resource Name of the Schema Registry cluster, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/schema-registry=lsrc-abc123`.\n"
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "(Required String) The HTTP endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-west-2.aws.confluent.cloud`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "displayName",
                    "environment",
                    "id",
                    "kind",
                    "package",
                    "regions",
                    "resourceName",
                    "restEndpoint"
                ]
            }
        },
        "confluentcloud:index/getSchemaRegistryRegion:getSchemaRegistryRegion": {
            "description": "[![Open Preview](https://img.shields.io/badge/Lifecycle%20Stage-Open%20Preview-%2300afba)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n\u003e **Note:** `confluentcloud.getSchemaRegistryRegion` data source is available in **Open Preview** for early adopters. Open Preview features are introduced to gather customer feedback. This feature should be used only for evaluation and non-production testing purposes or to provide feedback to Confluent, particularly as it becomes more widely available in follow-on editions.  \n**Open Preview** features are intended for evaluation use in development and testing environments only, and not for production use. The warranty, SLA, and Support Services provisions of your agreement with Confluent do not apply to Open Preview features. Open Preview features are considered to be a Proof of Concept as defined in the Confluent Cloud Terms of Service. Confluent may discontinue providing preview releases of the Open Preview features at any time in Confluent’s sole discretion.\n\n`confluentcloud.getSchemaRegistryRegion` describes a Schema Registry cluster data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleSchemaRegistryRegion = confluentcloud.getSchemaRegistryRegion({\n    cloud: \"AWS\",\n    region: \"us-east-2\",\n    \"package\": \"ESSENTIALS\",\n});\nexport const example = exampleSchemaRegistryRegion;\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_schema_registry_region = confluentcloud.get_schema_registry_region(cloud=\"AWS\",\n    region=\"us-east-2\",\n    package=\"ESSENTIALS\")\npulumi.export(\"example\", example_schema_registry_region)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleSchemaRegistryRegion = ConfluentCloud.GetSchemaRegistryRegion.Invoke(new()\n    {\n        Cloud = \"AWS\",\n        Region = \"us-east-2\",\n        Package = \"ESSENTIALS\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"example\"] = exampleSchemaRegistryRegion.Apply(getSchemaRegistryRegionResult =\u003e getSchemaRegistryRegionResult),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleSchemaRegistryRegion, err := confluentcloud.GetSchemaRegistryRegion(ctx, \u0026GetSchemaRegistryRegionArgs{\n\t\t\tCloud:   \"AWS\",\n\t\t\tRegion:  \"us-east-2\",\n\t\t\tPackage: \"ESSENTIALS\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"example\", exampleSchemaRegistryRegion)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetSchemaRegistryRegionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleSchemaRegistryRegion = ConfluentcloudFunctions.getSchemaRegistryRegion(GetSchemaRegistryRegionArgs.builder()\n            .cloud(\"AWS\")\n            .region(\"us-east-2\")\n            .package_(\"ESSENTIALS\")\n            .build());\n\n        ctx.export(\"example\", exampleSchemaRegistryRegion.applyValue(getSchemaRegistryRegionResult -\u003e getSchemaRegistryRegionResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleSchemaRegistryRegion:\n    Fn::Invoke:\n      Function: confluentcloud:getSchemaRegistryRegion\n      Arguments:\n        cloud: AWS\n        region: us-east-2\n        package: ESSENTIALS\noutputs:\n  example: ${exampleSchemaRegistryRegion}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSchemaRegistryRegion.\n",
                "properties": {
                    "cloud": {
                        "type": "string",
                        "description": "The cloud service provider that hosts the region. Accepted values are: `AWS`, `AZURE`, and `GCP`.\n"
                    },
                    "package": {
                        "type": "string",
                        "description": "The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The cloud service provider region, for example, `us-east-2`. See [Cloud Providers and Regions](https://docs.confluent.io/cloud/current/clusters/regions.html#cloud-providers-and-regions) for a full list of options for AWS, Azure, and GCP.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cloud",
                    "package",
                    "region"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSchemaRegistryRegion.\n",
                "properties": {
                    "cloud": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the Schema Registry region, for example, `sgreg-1`.\n"
                    },
                    "package": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "cloud",
                    "id",
                    "package",
                    "region"
                ]
            }
        },
        "confluentcloud:index/getServiceAccount:getServiceAccount": {
            "description": "[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n`confluentcloud.ServiceAccount` describes a Service Account data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleUsingIdServiceAccount = confluentcloud.getServiceAccount({\n    id: \"sa-abc123\",\n});\nexport const exampleUsingId = exampleUsingIdServiceAccount;\nconst exampleUsingName = confluentcloud.getServiceAccount({\n    displayName: \"test_sa\",\n});\nconst test_env = new confluentcloud.Environment(\"test-env\", {});\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_using_id_service_account = confluentcloud.get_service_account(id=\"sa-abc123\")\npulumi.export(\"exampleUsingId\", example_using_id_service_account)\nexample_using_name = confluentcloud.get_service_account(display_name=\"test_sa\")\ntest_env = confluentcloud.Environment(\"test-env\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUsingIdServiceAccount = ConfluentCloud.GetServiceAccount.Invoke(new()\n    {\n        Id = \"sa-abc123\",\n    });\n\n    var exampleUsingName = ConfluentCloud.GetServiceAccount.Invoke(new()\n    {\n        DisplayName = \"test_sa\",\n    });\n\n    var test_env = new ConfluentCloud.Environment(\"test-env\");\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"exampleUsingId\"] = exampleUsingIdServiceAccount.Apply(getServiceAccountResult =\u003e getServiceAccountResult),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUsingIdServiceAccount, err := confluentcloud.LookupServiceAccount(ctx, \u0026GetServiceAccountArgs{\n\t\t\tId: pulumi.StringRef(\"sa-abc123\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingId\", exampleUsingIdServiceAccount)\n\t\t_, err = confluentcloud.LookupServiceAccount(ctx, \u0026GetServiceAccountArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"test_sa\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = confluentcloud.NewEnvironment(ctx, \"test-env\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetServiceAccountArgs;\nimport com.pulumi.confluentcloud.Environment;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUsingIdServiceAccount = ConfluentcloudFunctions.getServiceAccount(GetServiceAccountArgs.builder()\n            .id(\"sa-abc123\")\n            .build());\n\n        ctx.export(\"exampleUsingId\", exampleUsingIdServiceAccount.applyValue(getServiceAccountResult -\u003e getServiceAccountResult));\n        final var exampleUsingName = ConfluentcloudFunctions.getServiceAccount(GetServiceAccountArgs.builder()\n            .displayName(\"test_sa\")\n            .build());\n\n        var test_env = new Environment(\"test-env\");\n\n    }\n}\n```\n```yaml\nresources:\n  test-env:\n    type: confluentcloud:Environment\nvariables:\n  exampleUsingIdServiceAccount:\n    Fn::Invoke:\n      Function: confluentcloud:getServiceAccount\n      Arguments:\n        id: sa-abc123\n  exampleUsingName:\n    Fn::Invoke:\n      Function: confluentcloud:getServiceAccount\n      Arguments:\n        displayName: test_sa\noutputs:\n  exampleUsingId: ${exampleUsingIdServiceAccount}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getServiceAccount.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the Service Account.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Service Account (e.g., `sa-abc123`).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getServiceAccount.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "(Required String) An API Version of the schema version of the Service Account.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Required String) A free-form description of the Service Account.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "(Required String) A human-readable name for the Service Account.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the Service Account (e.g., `sa-abc123`).\n"
                    },
                    "kind": {
                        "type": "string",
                        "description": "(Required String) A kind of the Service Account.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "description",
                    "displayName",
                    "id",
                    "kind"
                ]
            }
        },
        "confluentcloud:index/getStreamGovernanceRegion:getStreamGovernanceRegion": {
            "description": "[![Open Preview](https://img.shields.io/badge/Lifecycle%20Stage-Open%20Preview-%2300afba)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n!\u003e **WARNING:** `confluentcloud.getStreamGovernanceRegion` data source is deprecated and will be removed in the next version. Use `confluentcloud.getSchemaRegistryRegion` instead.\n\n\u003e **Note:** `confluentcloud.getStreamGovernanceRegion` data source is available in **Open Preview** for early adopters. Open Preview features are introduced to gather customer feedback. This feature should be used only for evaluation and non-production testing purposes or to provide feedback to Confluent, particularly as it becomes more widely available in follow-on editions.  \n**Open Preview** features are intended for evaluation use in development and testing environments only, and not for production use. The warranty, SLA, and Support Services provisions of your agreement with Confluent do not apply to Open Preview features. Open Preview features are considered to be a Proof of Concept as defined in the Confluent Cloud Terms of Service. Confluent may discontinue providing preview releases of the Open Preview features at any time in Confluent’s sole discretion.\n\n`confluentcloud.getStreamGovernanceRegion` describes a Stream Governance cluster data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleStreamGovernanceRegion = confluentcloud.getStreamGovernanceRegion({\n    cloud: \"AWS\",\n    region: \"us-east-2\",\n    \"package\": \"ESSENTIALS\",\n});\nexport const example = exampleStreamGovernanceRegion;\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_stream_governance_region = confluentcloud.get_stream_governance_region(cloud=\"AWS\",\n    region=\"us-east-2\",\n    package=\"ESSENTIALS\")\npulumi.export(\"example\", example_stream_governance_region)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleStreamGovernanceRegion = ConfluentCloud.GetStreamGovernanceRegion.Invoke(new()\n    {\n        Cloud = \"AWS\",\n        Region = \"us-east-2\",\n        Package = \"ESSENTIALS\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"example\"] = exampleStreamGovernanceRegion.Apply(getStreamGovernanceRegionResult =\u003e getStreamGovernanceRegionResult),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleStreamGovernanceRegion, err := confluentcloud.GetStreamGovernanceRegion(ctx, \u0026GetStreamGovernanceRegionArgs{\n\t\t\tCloud:   \"AWS\",\n\t\t\tRegion:  \"us-east-2\",\n\t\t\tPackage: \"ESSENTIALS\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"example\", exampleStreamGovernanceRegion)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetStreamGovernanceRegionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleStreamGovernanceRegion = ConfluentcloudFunctions.getStreamGovernanceRegion(GetStreamGovernanceRegionArgs.builder()\n            .cloud(\"AWS\")\n            .region(\"us-east-2\")\n            .package_(\"ESSENTIALS\")\n            .build());\n\n        ctx.export(\"example\", exampleStreamGovernanceRegion.applyValue(getStreamGovernanceRegionResult -\u003e getStreamGovernanceRegionResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleStreamGovernanceRegion:\n    Fn::Invoke:\n      Function: confluentcloud:getStreamGovernanceRegion\n      Arguments:\n        cloud: AWS\n        region: us-east-2\n        package: ESSENTIALS\noutputs:\n  example: ${exampleStreamGovernanceRegion}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getStreamGovernanceRegion.\n",
                "properties": {
                    "cloud": {
                        "type": "string",
                        "description": "The cloud service provider that hosts the region. Accepted values are: `AWS`, `AZURE`, and `GCP`.\n"
                    },
                    "package": {
                        "type": "string",
                        "description": "The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The cloud service provider region, for example, `us-east-2`. See [Cloud Providers and Regions](https://docs.confluent.io/cloud/current/clusters/regions.html#cloud-providers-and-regions) for a full list of options for AWS, Azure, and GCP.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cloud",
                    "package",
                    "region"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getStreamGovernanceRegion.\n",
                "properties": {
                    "cloud": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the Stream Governance region, for example, `sgreg-1`.\n"
                    },
                    "package": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "cloud",
                    "id",
                    "package",
                    "region"
                ]
            }
        },
        "confluentcloud:index/getStreatGovernanceCluster:getStreatGovernanceCluster": {
            "description": "[![Open Preview](https://img.shields.io/badge/Lifecycle%20Stage-Open%20Preview-%2300afba)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n!\u003e **WARNING:** `confluentcloud.StreamGovernanceCluster` data source is deprecated and will be removed in the next version. Use `confluentcloud.SchemaRegistryCluster` instead.\n\n\u003e **Note:** `confluentcloud.StreamGovernanceCluster` resource is available in **Open Preview** for early adopters. Open Preview features are introduced to gather customer feedback. This feature should be used only for evaluation and non-production testing purposes or to provide feedback to Confluent, particularly as it becomes more widely available in follow-on editions.  \n**Open Preview** features are intended for evaluation use in development and testing environments only, and not for production use. The warranty, SLA, and Support Services provisions of your agreement with Confluent do not apply to Open Preview features. Open Preview features are considered to be a Proof of Concept as defined in the Confluent Cloud Terms of Service. Confluent may discontinue providing preview releases of the Open Preview features at any time in Confluent’s sole discretion.\n\n`confluentcloud.StreamGovernanceCluster` describes a Stream Governance cluster data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleUsingIdStreatGovernanceCluster = confluentcloud.getStreatGovernanceCluster({\n    id: \"lsrc-abc123\",\n    environment: {\n        id: \"env-xyz456\",\n    },\n});\nexport const exampleUsingId = exampleUsingIdStreatGovernanceCluster;\nconst exampleUsingNameStreatGovernanceCluster = confluentcloud.getStreatGovernanceCluster({\n    displayName: \"Stream Governance Package\",\n    environment: {\n        id: \"env-xyz456\",\n    },\n});\nexport const exampleUsingName = exampleUsingNameStreatGovernanceCluster;\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_using_id_streat_governance_cluster = confluentcloud.get_streat_governance_cluster(id=\"lsrc-abc123\",\n    environment=confluentcloud.GetStreatGovernanceClusterEnvironmentArgs(\n        id=\"env-xyz456\",\n    ))\npulumi.export(\"exampleUsingId\", example_using_id_streat_governance_cluster)\nexample_using_name_streat_governance_cluster = confluentcloud.get_streat_governance_cluster(display_name=\"Stream Governance Package\",\n    environment=confluentcloud.GetStreatGovernanceClusterEnvironmentArgs(\n        id=\"env-xyz456\",\n    ))\npulumi.export(\"exampleUsingName\", example_using_name_streat_governance_cluster)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUsingIdStreatGovernanceCluster = ConfluentCloud.GetStreatGovernanceCluster.Invoke(new()\n    {\n        Id = \"lsrc-abc123\",\n        Environment = new ConfluentCloud.Inputs.GetStreatGovernanceClusterEnvironmentInputArgs\n        {\n            Id = \"env-xyz456\",\n        },\n    });\n\n    var exampleUsingNameStreatGovernanceCluster = ConfluentCloud.GetStreatGovernanceCluster.Invoke(new()\n    {\n        DisplayName = \"Stream Governance Package\",\n        Environment = new ConfluentCloud.Inputs.GetStreatGovernanceClusterEnvironmentInputArgs\n        {\n            Id = \"env-xyz456\",\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"exampleUsingId\"] = exampleUsingIdStreatGovernanceCluster.Apply(getStreatGovernanceClusterResult =\u003e getStreatGovernanceClusterResult),\n        [\"exampleUsingName\"] = exampleUsingNameStreatGovernanceCluster.Apply(getStreatGovernanceClusterResult =\u003e getStreatGovernanceClusterResult),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUsingIdStreatGovernanceCluster, err := confluentcloud.GetStreatGovernanceCluster(ctx, \u0026GetStreatGovernanceClusterArgs{\n\t\t\tId: pulumi.StringRef(\"lsrc-abc123\"),\n\t\t\tEnvironment: GetStreatGovernanceClusterEnvironment{\n\t\t\t\tId: \"env-xyz456\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingId\", exampleUsingIdStreatGovernanceCluster)\n\t\texampleUsingNameStreatGovernanceCluster, err := confluentcloud.GetStreatGovernanceCluster(ctx, \u0026GetStreatGovernanceClusterArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"Stream Governance Package\"),\n\t\t\tEnvironment: GetStreatGovernanceClusterEnvironment{\n\t\t\t\tId: \"env-xyz456\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingName\", exampleUsingNameStreatGovernanceCluster)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetStreatGovernanceClusterArgs;\nimport com.pulumi.confluentcloud.inputs.GetStreatGovernanceClusterEnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUsingIdStreatGovernanceCluster = ConfluentcloudFunctions.getStreatGovernanceCluster(GetStreatGovernanceClusterArgs.builder()\n            .id(\"lsrc-abc123\")\n            .environment(GetStreatGovernanceClusterEnvironmentArgs.builder()\n                .id(\"env-xyz456\")\n                .build())\n            .build());\n\n        ctx.export(\"exampleUsingId\", exampleUsingIdStreatGovernanceCluster.applyValue(getStreatGovernanceClusterResult -\u003e getStreatGovernanceClusterResult));\n        final var exampleUsingNameStreatGovernanceCluster = ConfluentcloudFunctions.getStreatGovernanceCluster(GetStreatGovernanceClusterArgs.builder()\n            .displayName(\"Stream Governance Package\")\n            .environment(GetStreatGovernanceClusterEnvironmentArgs.builder()\n                .id(\"env-xyz456\")\n                .build())\n            .build());\n\n        ctx.export(\"exampleUsingName\", exampleUsingNameStreatGovernanceCluster.applyValue(getStreatGovernanceClusterResult -\u003e getStreatGovernanceClusterResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleUsingIdStreatGovernanceCluster:\n    Fn::Invoke:\n      Function: confluentcloud:getStreatGovernanceCluster\n      Arguments:\n        id: lsrc-abc123\n        environment:\n          id: env-xyz456\n  exampleUsingNameStreatGovernanceCluster:\n    Fn::Invoke:\n      Function: confluentcloud:getStreatGovernanceCluster\n      Arguments:\n        displayName: Stream Governance Package\n        environment:\n          id: env-xyz456\noutputs:\n  exampleUsingId: ${exampleUsingIdStreatGovernanceCluster}\n  exampleUsingName: ${exampleUsingNameStreatGovernanceCluster}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getStreatGovernanceCluster.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "The name for the Stream Governance cluster.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getStreatGovernanceClusterEnvironment:getStreatGovernanceClusterEnvironment"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Environment that the Stream Governance cluster belongs to, for example, `env-xyz456`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "environment"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getStreatGovernanceCluster.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "(Required String) An API Version of the schema version of the Stream Governance cluster, for example, `stream-governance/v2`.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "(Required String) The name of the Stream Governance cluster, for example, `Stream Governance Package`.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getStreatGovernanceClusterEnvironment:getStreatGovernanceClusterEnvironment"
                    },
                    "httpEndpoint": {
                        "type": "string",
                        "description": "(Required String) The HTTP endpoint of the Stream Governance cluster, for example, `https://psrc-00000.us-west-2.aws.confluent.cloud`.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "kind": {
                        "type": "string",
                        "description": "(Required String) A kind of the Stream Governance cluster, for example, `Cluster`.\n"
                    },
                    "package": {
                        "type": "string",
                        "description": "(Required String) The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.\n- `region` (Required Configuration Block) supports the following:\n"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getStreatGovernanceClusterRegion:getStreatGovernanceClusterRegion"
                        }
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "(Required String) The Confluent Resource Name of the Stream Governance cluster, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/schema-registry=lsrc-abc123`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "displayName",
                    "environment",
                    "httpEndpoint",
                    "id",
                    "kind",
                    "package",
                    "regions",
                    "resourceName"
                ]
            }
        },
        "confluentcloud:index/getTransitGatewayAttachment:getTransitGatewayAttachment": {
            "description": "[![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy) [![Request Access To Networking v1](https://img.shields.io/badge/-Request%20Access%20To%20Networking%20v1-%23bc8540)](mailto:ccloud-api-access+networking-v1-early-access@confluent.io?subject=Request%20to%20join%20networking/v1%20API%20Early%20Access\u0026body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20networking/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)\n\n\u003e **Note:** `confluentcloud.TransitGatewayAttachment` data source is available in **Early Access** for early adopters. Early Access features are introduced to gather customer feedback. This feature should be used only for evaluation and non-production testing purposes or to provide feedback to Confluent, particularly as it becomes more widely available in follow-on editions.  \n**Early Access** features are intended for evaluation use in development and testing environments only, and not for production use. The warranty, SLA, and Support Services provisions of your agreement with Confluent do not apply to Early Access features. Early Access features are considered to be a Proof of Concept as defined in the Confluent Cloud Terms of Service. Confluent may discontinue providing preview releases of the Early Access features at any time in Confluent’s sole discretion.\n\n`confluentcloud.TransitGatewayAttachment` describes a Transit Gateway Attachment data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleUsingIdTransitGatewayAttachment = confluentcloud.getTransitGatewayAttachment({\n    id: \"tgwa-abc123\",\n    environment: {\n        id: \"env-xyz456\",\n    },\n});\nexport const exampleUsingId = exampleUsingIdTransitGatewayAttachment;\nconst exampleUsingNameTransitGatewayAttachment = confluentcloud.getTransitGatewayAttachment({\n    displayName: \"my_tgwa\",\n    environment: {\n        id: \"env-xyz456\",\n    },\n});\nexport const exampleUsingName = exampleUsingNameTransitGatewayAttachment;\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_using_id_transit_gateway_attachment = confluentcloud.get_transit_gateway_attachment(id=\"tgwa-abc123\",\n    environment=confluentcloud.GetTransitGatewayAttachmentEnvironmentArgs(\n        id=\"env-xyz456\",\n    ))\npulumi.export(\"exampleUsingId\", example_using_id_transit_gateway_attachment)\nexample_using_name_transit_gateway_attachment = confluentcloud.get_transit_gateway_attachment(display_name=\"my_tgwa\",\n    environment=confluentcloud.GetTransitGatewayAttachmentEnvironmentArgs(\n        id=\"env-xyz456\",\n    ))\npulumi.export(\"exampleUsingName\", example_using_name_transit_gateway_attachment)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUsingIdTransitGatewayAttachment = ConfluentCloud.GetTransitGatewayAttachment.Invoke(new()\n    {\n        Id = \"tgwa-abc123\",\n        Environment = new ConfluentCloud.Inputs.GetTransitGatewayAttachmentEnvironmentInputArgs\n        {\n            Id = \"env-xyz456\",\n        },\n    });\n\n    var exampleUsingNameTransitGatewayAttachment = ConfluentCloud.GetTransitGatewayAttachment.Invoke(new()\n    {\n        DisplayName = \"my_tgwa\",\n        Environment = new ConfluentCloud.Inputs.GetTransitGatewayAttachmentEnvironmentInputArgs\n        {\n            Id = \"env-xyz456\",\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"exampleUsingId\"] = exampleUsingIdTransitGatewayAttachment.Apply(getTransitGatewayAttachmentResult =\u003e getTransitGatewayAttachmentResult),\n        [\"exampleUsingName\"] = exampleUsingNameTransitGatewayAttachment.Apply(getTransitGatewayAttachmentResult =\u003e getTransitGatewayAttachmentResult),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUsingIdTransitGatewayAttachment, err := confluentcloud.LookupTransitGatewayAttachment(ctx, \u0026GetTransitGatewayAttachmentArgs{\n\t\t\tId: pulumi.StringRef(\"tgwa-abc123\"),\n\t\t\tEnvironment: GetTransitGatewayAttachmentEnvironment{\n\t\t\t\tId: \"env-xyz456\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingId\", exampleUsingIdTransitGatewayAttachment)\n\t\texampleUsingNameTransitGatewayAttachment, err := confluentcloud.LookupTransitGatewayAttachment(ctx, \u0026GetTransitGatewayAttachmentArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"my_tgwa\"),\n\t\t\tEnvironment: GetTransitGatewayAttachmentEnvironment{\n\t\t\t\tId: \"env-xyz456\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingName\", exampleUsingNameTransitGatewayAttachment)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetTransitGatewayAttachmentArgs;\nimport com.pulumi.confluentcloud.inputs.GetTransitGatewayAttachmentEnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUsingIdTransitGatewayAttachment = ConfluentcloudFunctions.getTransitGatewayAttachment(GetTransitGatewayAttachmentArgs.builder()\n            .id(\"tgwa-abc123\")\n            .environment(GetTransitGatewayAttachmentEnvironmentArgs.builder()\n                .id(\"env-xyz456\")\n                .build())\n            .build());\n\n        ctx.export(\"exampleUsingId\", exampleUsingIdTransitGatewayAttachment.applyValue(getTransitGatewayAttachmentResult -\u003e getTransitGatewayAttachmentResult));\n        final var exampleUsingNameTransitGatewayAttachment = ConfluentcloudFunctions.getTransitGatewayAttachment(GetTransitGatewayAttachmentArgs.builder()\n            .displayName(\"my_tgwa\")\n            .environment(GetTransitGatewayAttachmentEnvironmentArgs.builder()\n                .id(\"env-xyz456\")\n                .build())\n            .build());\n\n        ctx.export(\"exampleUsingName\", exampleUsingNameTransitGatewayAttachment.applyValue(getTransitGatewayAttachmentResult -\u003e getTransitGatewayAttachmentResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleUsingIdTransitGatewayAttachment:\n    Fn::Invoke:\n      Function: confluentcloud:getTransitGatewayAttachment\n      Arguments:\n        id: tgwa-abc123\n        environment:\n          id: env-xyz456\n  exampleUsingNameTransitGatewayAttachment:\n    Fn::Invoke:\n      Function: confluentcloud:getTransitGatewayAttachment\n      Arguments:\n        displayName: my_tgwa\n        environment:\n          id: env-xyz456\noutputs:\n  exampleUsingId: ${exampleUsingIdTransitGatewayAttachment}\n  exampleUsingName: ${exampleUsingNameTransitGatewayAttachment}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getTransitGatewayAttachment.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the Transit Gateway Attachment.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getTransitGatewayAttachmentEnvironment:getTransitGatewayAttachmentEnvironment"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Environment that the Transit Gateway Attachment belongs to, for example, `env-xyz456`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "environment"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTransitGatewayAttachment.\n",
                "properties": {
                    "aws": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getTransitGatewayAttachmentAw:getTransitGatewayAttachmentAw"
                        },
                        "description": "(Required Configuration Block) The AWS-specific Transit Gateway Attachment details. It supports the following:\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "(Required String) The name of the Transit Gateway Attachment.\n- `environment` (Required Configuration Block) supports the following:\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getTransitGatewayAttachmentEnvironment:getTransitGatewayAttachmentEnvironment"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the Network that the Transit Gateway Attachment belongs to, for example, `n-abc123`.\n"
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getTransitGatewayAttachmentNetwork:getTransitGatewayAttachmentNetwork"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "aws",
                    "displayName",
                    "environment",
                    "id",
                    "networks"
                ]
            }
        },
        "confluentcloud:index/getUser:getUser": {
            "description": "[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n`confluentcloud.getUser` describes a User data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleUsingIdUser = confluentcloud.getUser({\n    id: \"u-abc123\",\n});\nexport const exampleUsingId = exampleUsingIdUser;\nconst exampleUsingEmail = confluentcloud.getUser({\n    email: \"test123@gmail.com\",\n});\nconst test_env = new confluentcloud.Environment(\"test-env\", {});\nconst standard_cluster_on_aws = new confluentcloud.KafkaCluster(\"standard-cluster-on-aws\", {\n    availability: \"SINGLE_ZONE\",\n    cloud: \"AWS\",\n    region: \"us-west-2\",\n    standard: {},\n    environment: {\n        id: test_env.id,\n    },\n});\nconst test_role_binding = new confluentcloud.RoleBinding(\"test-role-binding\", {\n    principal: exampleUsingEmail.then(exampleUsingEmail =\u003e `User:${exampleUsingEmail.id}`),\n    roleName: \"CloudClusterAdmin\",\n    crnPattern: standard_cluster_on_aws.rbacCrn,\n});\nconst exampleUsingFullName = confluentcloud.getUser({\n    fullName: \"John Doe\",\n});\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_using_id_user = confluentcloud.get_user(id=\"u-abc123\")\npulumi.export(\"exampleUsingId\", example_using_id_user)\nexample_using_email = confluentcloud.get_user(email=\"test123@gmail.com\")\ntest_env = confluentcloud.Environment(\"test-env\")\nstandard_cluster_on_aws = confluentcloud.KafkaCluster(\"standard-cluster-on-aws\",\n    availability=\"SINGLE_ZONE\",\n    cloud=\"AWS\",\n    region=\"us-west-2\",\n    standard=confluentcloud.KafkaClusterStandardArgs(),\n    environment=confluentcloud.KafkaClusterEnvironmentArgs(\n        id=test_env.id,\n    ))\ntest_role_binding = confluentcloud.RoleBinding(\"test-role-binding\",\n    principal=f\"User:{example_using_email.id}\",\n    role_name=\"CloudClusterAdmin\",\n    crn_pattern=standard_cluster_on_aws.rbac_crn)\nexample_using_full_name = confluentcloud.get_user(full_name=\"John Doe\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUsingIdUser = ConfluentCloud.GetUser.Invoke(new()\n    {\n        Id = \"u-abc123\",\n    });\n\n    var exampleUsingEmail = ConfluentCloud.GetUser.Invoke(new()\n    {\n        Email = \"test123@gmail.com\",\n    });\n\n    var test_env = new ConfluentCloud.Environment(\"test-env\");\n\n    var standard_cluster_on_aws = new ConfluentCloud.KafkaCluster(\"standard-cluster-on-aws\", new()\n    {\n        Availability = \"SINGLE_ZONE\",\n        Cloud = \"AWS\",\n        Region = \"us-west-2\",\n        Standard = ,\n        Environment = new ConfluentCloud.Inputs.KafkaClusterEnvironmentArgs\n        {\n            Id = test_env.Id,\n        },\n    });\n\n    var test_role_binding = new ConfluentCloud.RoleBinding(\"test-role-binding\", new()\n    {\n        Principal = $\"User:{exampleUsingEmail.Apply(getUserResult =\u003e getUserResult.Id)}\",\n        RoleName = \"CloudClusterAdmin\",\n        CrnPattern = standard_cluster_on_aws.RbacCrn,\n    });\n\n    var exampleUsingFullName = ConfluentCloud.GetUser.Invoke(new()\n    {\n        FullName = \"John Doe\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"exampleUsingId\"] = exampleUsingIdUser.Apply(getUserResult =\u003e getUserResult),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUsingIdUser, err := confluentcloud.GetUser(ctx, \u0026GetUserArgs{\n\t\t\tId: pulumi.StringRef(\"u-abc123\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingId\", exampleUsingIdUser)\n\t\texampleUsingEmail, err := confluentcloud.GetUser(ctx, \u0026GetUserArgs{\n\t\t\tEmail: pulumi.StringRef(\"test123@gmail.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = confluentcloud.NewEnvironment(ctx, \"test-env\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = confluentcloud.NewKafkaCluster(ctx, \"standard-cluster-on-aws\", \u0026confluentcloud.KafkaClusterArgs{\n\t\t\tAvailability: pulumi.String(\"SINGLE_ZONE\"),\n\t\t\tCloud:        pulumi.String(\"AWS\"),\n\t\t\tRegion:       pulumi.String(\"us-west-2\"),\n\t\t\tStandard:     nil,\n\t\t\tEnvironment: \u0026KafkaClusterEnvironmentArgs{\n\t\t\t\tId: test_env.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = confluentcloud.NewRoleBinding(ctx, \"test-role-binding\", \u0026confluentcloud.RoleBindingArgs{\n\t\t\tPrincipal:  pulumi.String(fmt.Sprintf(\"User:%v\", exampleUsingEmail.Id)),\n\t\t\tRoleName:   pulumi.String(\"CloudClusterAdmin\"),\n\t\t\tCrnPattern: standard_cluster_on_aws.RbacCrn,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = confluentcloud.GetUser(ctx, \u0026GetUserArgs{\n\t\t\tFullName: pulumi.StringRef(\"John Doe\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetUserArgs;\nimport com.pulumi.confluentcloud.Environment;\nimport com.pulumi.confluentcloud.KafkaCluster;\nimport com.pulumi.confluentcloud.KafkaClusterArgs;\nimport com.pulumi.confluentcloud.inputs.KafkaClusterStandardArgs;\nimport com.pulumi.confluentcloud.inputs.KafkaClusterEnvironmentArgs;\nimport com.pulumi.confluentcloud.RoleBinding;\nimport com.pulumi.confluentcloud.RoleBindingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUsingIdUser = ConfluentcloudFunctions.getUser(GetUserArgs.builder()\n            .id(\"u-abc123\")\n            .build());\n\n        ctx.export(\"exampleUsingId\", exampleUsingIdUser.applyValue(getUserResult -\u003e getUserResult));\n        final var exampleUsingEmail = ConfluentcloudFunctions.getUser(GetUserArgs.builder()\n            .email(\"test123@gmail.com\")\n            .build());\n\n        var test_env = new Environment(\"test-env\");\n\n        var standard_cluster_on_aws = new KafkaCluster(\"standard-cluster-on-aws\", KafkaClusterArgs.builder()        \n            .availability(\"SINGLE_ZONE\")\n            .cloud(\"AWS\")\n            .region(\"us-west-2\")\n            .standard()\n            .environment(KafkaClusterEnvironmentArgs.builder()\n                .id(test_env.id())\n                .build())\n            .build());\n\n        var test_role_binding = new RoleBinding(\"test-role-binding\", RoleBindingArgs.builder()        \n            .principal(String.format(\"User:%s\", exampleUsingEmail.applyValue(getUserResult -\u003e getUserResult.id())))\n            .roleName(\"CloudClusterAdmin\")\n            .crnPattern(standard_cluster_on_aws.rbacCrn())\n            .build());\n\n        final var exampleUsingFullName = ConfluentcloudFunctions.getUser(GetUserArgs.builder()\n            .fullName(\"John Doe\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test-env:\n    type: confluentcloud:Environment\n  standard-cluster-on-aws:\n    type: confluentcloud:KafkaCluster\n    properties:\n      availability: SINGLE_ZONE\n      cloud: AWS\n      region: us-west-2\n      standard: {}\n      environment:\n        id: ${[\"test-env\"].id}\n  test-role-binding:\n    type: confluentcloud:RoleBinding\n    properties:\n      principal: User:${exampleUsingEmail.id}\n      roleName: CloudClusterAdmin\n      crnPattern: ${[\"standard-cluster-on-aws\"].rbacCrn}\nvariables:\n  exampleUsingIdUser:\n    Fn::Invoke:\n      Function: confluentcloud:getUser\n      Arguments:\n        id: u-abc123\n  exampleUsingEmail:\n    Fn::Invoke:\n      Function: confluentcloud:getUser\n      Arguments:\n        email: test123@gmail.com\n  exampleUsingFullName:\n    Fn::Invoke:\n      Function: confluentcloud:getUser\n      Arguments:\n        fullName: John Doe\noutputs:\n  exampleUsingId: ${exampleUsingIdUser}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The email address of the User.\n"
                    },
                    "fullName": {
                        "type": "string",
                        "description": "The full name of the User.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the User (e.g., `u-abc123`).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "(Required String) An API Version of the schema version of the User.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "(Required String) The email address of the User.\n"
                    },
                    "fullName": {
                        "type": "string",
                        "description": "(Required String) The full name of the User.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the User, for example, `u-abc123`.\n"
                    },
                    "kind": {
                        "type": "string",
                        "description": "(Required String) A kind of the User.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "email",
                    "fullName",
                    "id",
                    "kind"
                ]
            }
        }
    }
}
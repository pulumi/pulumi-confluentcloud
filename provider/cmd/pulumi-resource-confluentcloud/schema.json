{
    "name": "confluentcloud",
    "displayName": "Confluent",
    "description": "A Pulumi package for creating and managing Confluent cloud resources.",
    "keywords": [
        "pulumi",
        "confluentcloud",
        "category/cloud"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`confluent` Terraform Provider](https://github.com/confluentinc/terraform-provider-confluent).",
    "repository": "https://github.com/pulumi/pulumi-confluentcloud",
    "publisher": "Pulumi",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": {
                "confluentcloud": "ConfluentCloud"
            },
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing Confluent cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/confluentinc/terraform-provider-confluent)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-confluentcloud` repo](https://github.com/pulumi/pulumi-confluentcloud/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-confluent` repo](https://github.com/confluentinc/terraform-provider-confluent/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/confluentinc/terraform-provider-confluent)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-confluentcloud` repo](https://github.com/pulumi/pulumi-confluentcloud/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-confluent` repo](https://github.com/confluentinc/terraform-provider-confluent/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "config": {
        "variables": {
            "cloudApiKey": {
                "type": "string",
                "description": "The Confluent Cloud API Key.\n",
                "secret": true
            },
            "cloudApiSecret": {
                "type": "string",
                "description": "The Confluent Cloud API Secret.\n",
                "secret": true
            },
            "endpoint": {
                "type": "string",
                "description": "The base endpoint of Confluent Cloud API.\n"
            },
            "kafkaApiKey": {
                "type": "string",
                "description": "The Kafka Cluster API Key.\n",
                "secret": true
            },
            "kafkaApiSecret": {
                "type": "string",
                "description": "The Kafka Cluster API Secret.\n",
                "secret": true
            },
            "kafkaId": {
                "type": "string",
                "description": "The Kafka Cluster ID.\n"
            },
            "kafkaRestEndpoint": {
                "type": "string",
                "description": "The Kafka Cluster REST Endpoint.\n"
            },
            "maxRetries": {
                "type": "integer",
                "description": "Maximum number of retries of HTTP client. Defaults to 4.\n"
            },
            "schemaRegistryApiKey": {
                "type": "string",
                "description": "The Schema Registry Cluster API Key.\n",
                "secret": true
            },
            "schemaRegistryApiSecret": {
                "type": "string",
                "description": "The Schema Registry Cluster API Secret.\n",
                "secret": true
            },
            "schemaRegistryId": {
                "type": "string",
                "description": "The Schema Registry Cluster ID.\n"
            },
            "schemaRegistryRestEndpoint": {
                "type": "string",
                "description": "The Schema Registry Cluster REST Endpoint.\n"
            }
        }
    },
    "types": {
        "confluentcloud:index/ApiKeyManagedResource:ApiKeyManagedResource": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "The API group and version of the managed resource that the API Key associated with, for example, `cmk/v2`.\n",
                    "willReplaceOnChanges": true
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/ApiKeyManagedResourceEnvironment:ApiKeyManagedResourceEnvironment",
                    "willReplaceOnChanges": true
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the managed resource belongs to, for example, `env-abc123`.\n",
                    "willReplaceOnChanges": true
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of the managed resource that the API Key associated with, for example, `Cluster`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "apiVersion",
                "environment",
                "id",
                "kind"
            ]
        },
        "confluentcloud:index/ApiKeyManagedResourceEnvironment:ApiKeyManagedResourceEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the managed resource belongs to, for example, `env-abc123`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/ApiKeyOwner:ApiKeyOwner": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "The API group and version of the managed resource that the API Key associated with, for example, `cmk/v2`.\n",
                    "willReplaceOnChanges": true
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the managed resource belongs to, for example, `env-abc123`.\n",
                    "willReplaceOnChanges": true
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of the managed resource that the API Key associated with, for example, `Cluster`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "apiVersion",
                "id",
                "kind"
            ]
        },
        "confluentcloud:index/BusinessMetadataAttributeDefinition:BusinessMetadataAttributeDefinition": {
            "properties": {
                "defaultValue": {
                    "type": "string",
                    "description": "The default value of this attribute.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Business Metadata.\n"
                },
                "isOptional": {
                    "type": "boolean",
                    "description": "An optional flag to control whether the attribute should be optional or required. The default value is `false`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the attribute.\n"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Optional Map) Block for the attribute options:\n"
                },
                "type": {
                    "type": "string",
                    "description": "(Required String) The type of the attribute, it always returns `string`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "defaultValue",
                        "description",
                        "isOptional",
                        "name",
                        "options",
                        "type"
                    ]
                }
            }
        },
        "confluentcloud:index/BusinessMetadataBindingCredentials:BusinessMetadataBindingCredentials": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Schema Registry API Key.\n",
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "description": "The Schema Registry API Secret.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "secret"
            ]
        },
        "confluentcloud:index/BusinessMetadataBindingSchemaRegistryCluster:BusinessMetadataBindingSchemaRegistryCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Schema Registry cluster, for example, `lsrc-abc123`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/BusinessMetadataCredentials:BusinessMetadataCredentials": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Schema Registry API Key.\n",
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "description": "The Schema Registry API Secret.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "secret"
            ]
        },
        "confluentcloud:index/BusinessMetadataSchemaRegistryCluster:BusinessMetadataSchemaRegistryCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Schema Registry cluster, for example, `lsrc-abc123`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/ByokKeyAws:ByokKeyAws": {
            "properties": {
                "keyArn": {
                    "type": "string",
                    "description": "The Amazon Resource Name (ARN) of an AWS KMS key.\n",
                    "willReplaceOnChanges": true
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional List of Strings) The Amazon Resource Names (ARNs) of IAM Roles created for this key-environment\n"
                }
            },
            "type": "object",
            "required": [
                "keyArn"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "keyArn",
                        "roles"
                    ]
                }
            }
        },
        "confluentcloud:index/ByokKeyAzure:ByokKeyAzure": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "(Optional String) The Application ID created for this key-environment combination.\n"
                },
                "keyIdentifier": {
                    "type": "string",
                    "description": "The unique Key Object Identifier URL of an Azure Key Vault key.\n",
                    "willReplaceOnChanges": true
                },
                "keyVaultId": {
                    "type": "string",
                    "description": "Key Vault ID containing the key.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "Tenant ID (uuid) hosting the Key Vault containing the key.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "keyIdentifier",
                "keyVaultId",
                "tenantId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "applicationId",
                        "keyIdentifier",
                        "keyVaultId",
                        "tenantId"
                    ]
                }
            }
        },
        "confluentcloud:index/ClusterLinkDestinationKafkaCluster:ClusterLinkDestinationKafkaCluster": {
            "properties": {
                "bootstrapEndpoint": {
                    "type": "string",
                    "description": "The bootstrap endpoint of the destination Kafka cluster, for example, `SASL_SSL://pkc-00000.us-central1.gcp.confluent.cloud:9092` or `pkc-00000.us-central1.gcp.confluent.cloud:9092`).\n",
                    "willReplaceOnChanges": true
                },
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/ClusterLinkDestinationKafkaClusterCredentials:ClusterLinkDestinationKafkaClusterCredentials",
                    "secret": true
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the destination Kafka cluster, for example, `lkc-abc123`.\n",
                    "willReplaceOnChanges": true
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the destination Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/ClusterLinkDestinationKafkaClusterCredentials:ClusterLinkDestinationKafkaClusterCredentials": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Kafka API Key.\n",
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "description": "The Kafka API Secret.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "secret"
            ]
        },
        "confluentcloud:index/ClusterLinkSourceKafkaCluster:ClusterLinkSourceKafkaCluster": {
            "properties": {
                "bootstrapEndpoint": {
                    "type": "string",
                    "description": "The bootstrap endpoint of the destination Kafka cluster, for example, `SASL_SSL://pkc-00000.us-central1.gcp.confluent.cloud:9092` or `pkc-00000.us-central1.gcp.confluent.cloud:9092`).\n",
                    "willReplaceOnChanges": true
                },
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/ClusterLinkSourceKafkaClusterCredentials:ClusterLinkSourceKafkaClusterCredentials",
                    "secret": true
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the destination Kafka cluster, for example, `lkc-abc123`.\n",
                    "willReplaceOnChanges": true
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the destination Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/ClusterLinkSourceKafkaClusterCredentials:ClusterLinkSourceKafkaClusterCredentials": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Kafka API Key.\n",
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "description": "The Kafka API Secret.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "secret"
            ]
        },
        "confluentcloud:index/ConnectorEnvironment:ConnectorEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Kafka cluster that the connector belongs to, for example, `lkc-abc123`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/ConnectorKafkaCluster:ConnectorKafkaCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Kafka cluster that the connector belongs to, for example, `lkc-abc123`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/IdentityPoolIdentityProvider:IdentityPoolIdentityProvider": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Identity Provider associated with the Identity Pool, for example, `op-abc123`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/InvitationCreator:InvitationCreator": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "(Required String) The id of invitation creator.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "confluentcloud:index/InvitationUser:InvitationUser": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "(Required String) The id of invitation creator.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "confluentcloud:index/KafkaAclCredentials:KafkaAclCredentials": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Kafka API Key.\n",
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "description": "The Kafka API Secret.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "secret"
            ]
        },
        "confluentcloud:index/KafkaAclKafkaCluster:KafkaAclKafkaCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Kafka cluster, for example, `lkc-abc123`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/KafkaClientQuotaEnvironment:KafkaClientQuotaEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the corresponding Kafka Cluster belongs to, for example, `env-abc123`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/KafkaClientQuotaKafkaCluster:KafkaClientQuotaKafkaCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the corresponding Kafka Cluster belongs to, for example, `env-abc123`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/KafkaClientQuotaThroughput:KafkaClientQuotaThroughput": {
            "properties": {
                "egressByteRate": {
                    "type": "string",
                    "description": "The egress throughput limit in bytes per second.\n"
                },
                "ingressByteRate": {
                    "type": "string",
                    "description": "The ingress throughput limit in bytes per second.\n"
                }
            },
            "type": "object",
            "required": [
                "egressByteRate",
                "ingressByteRate"
            ]
        },
        "confluentcloud:index/KafkaClusterBasic:KafkaClusterBasic": {
            "type": "object"
        },
        "confluentcloud:index/KafkaClusterByokKey:KafkaClusterByokKey": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Confluent key that is used to encrypt the data in the Kafka cluster, for example, `cck-lye5m`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/KafkaClusterConfigCredentials:KafkaClusterConfigCredentials": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Kafka API Key.\n",
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "description": "The Kafka API Secret.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "secret"
            ]
        },
        "confluentcloud:index/KafkaClusterConfigKafkaCluster:KafkaClusterConfigKafkaCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Dedicated Kafka cluster, for example, `lkc-abc123`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/KafkaClusterDedicated:KafkaClusterDedicated": {
            "properties": {
                "cku": {
                    "type": "integer",
                    "description": "The number of Confluent Kafka Units (CKUs) for Dedicated cluster types. The minimum number of CKUs for `SINGLE_ZONE` dedicated clusters is `1` whereas `MULTI_ZONE` dedicated clusters must have more than `2` CKUs.\n"
                },
                "encryptionKey": {
                    "type": "string"
                },
                "zones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Required List of String) The list of zones the cluster is in.\nOn AWS, zones are AWS [AZ IDs](https://docs.aws.amazon.com/ram/latest/userguide/working-with-az-ids.html), for example, `use1-az3`.\nOn GCP, zones are GCP [zones](https://cloud.google.com/compute/docs/regions-zones), for example, `us-central1-c`.\nOn Azure, zones are Confluent-chosen names (for example, `1`, `2`, `3`) since Azure does not have universal zone identifiers.\n"
                }
            },
            "type": "object",
            "required": [
                "cku"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cku",
                        "zones"
                    ]
                }
            }
        },
        "confluentcloud:index/KafkaClusterEnvironment:KafkaClusterEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Confluent key that is used to encrypt the data in the Kafka cluster, for example, `cck-lye5m`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/KafkaClusterNetwork:KafkaClusterNetwork": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Confluent key that is used to encrypt the data in the Kafka cluster, for example, `cck-lye5m`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/KafkaClusterStandard:KafkaClusterStandard": {
            "type": "object"
        },
        "confluentcloud:index/KafkaMirrorTopicClusterLink:KafkaMirrorTopicClusterLink": {
            "properties": {
                "linkName": {
                    "type": "string",
                    "description": "The name of the cluster link to attach to the mirror topic, for example, `my-cluster-link`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "linkName"
            ]
        },
        "confluentcloud:index/KafkaMirrorTopicKafkaCluster:KafkaMirrorTopicKafkaCluster": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/KafkaMirrorTopicKafkaClusterCredentials:KafkaMirrorTopicKafkaClusterCredentials",
                    "secret": true
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the destination Kafka cluster, for example, `lkc-abc123`.\n",
                    "willReplaceOnChanges": true
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the destination Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/KafkaMirrorTopicKafkaClusterCredentials:KafkaMirrorTopicKafkaClusterCredentials": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Kafka API Key.\n",
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "description": "The Kafka API Secret.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "secret"
            ]
        },
        "confluentcloud:index/KafkaMirrorTopicSourceKafkaTopic:KafkaMirrorTopicSourceKafkaTopic": {
            "properties": {
                "topicName": {
                    "type": "string",
                    "description": "The name of the topic on the source cluster to be mirrored over the cluster link, for example, `orders`. A topic with the exact same name must exist on the source cluster, and no topic with this name should exist on the destination cluster.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "topicName"
            ]
        },
        "confluentcloud:index/KafkaTopicCredentials:KafkaTopicCredentials": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Kafka API Key.\n",
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "description": "The Kafka API Secret.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "secret"
            ]
        },
        "confluentcloud:index/KafkaTopicKafkaCluster:KafkaTopicKafkaCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Kafka cluster, for example, `lkc-abc123`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/KsqlClusterCredentialIdentity:KsqlClusterCredentialIdentity": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the associated service or user account, for example, `sa-abc123`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/KsqlClusterEnvironment:KsqlClusterEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the associated service or user account, for example, `sa-abc123`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/KsqlClusterKafkaCluster:KsqlClusterKafkaCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the associated service or user account, for example, `sa-abc123`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/NetworkAw:NetworkAw": {
            "properties": {
                "account": {
                    "type": "string",
                    "description": "(Required String) The AWS account ID associated with the Confluent Cloud VPC.\n"
                },
                "privateLinkEndpointService": {
                    "type": "string",
                    "description": "(Optional String) The endpoint service of the Confluent Cloud VPC (used for PrivateLink) if available.\n"
                },
                "vpc": {
                    "type": "string",
                    "description": "(Required String) The Confluent Cloud VPC ID.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "account",
                        "privateLinkEndpointService",
                        "vpc"
                    ]
                }
            }
        },
        "confluentcloud:index/NetworkAzure:NetworkAzure": {
            "properties": {
                "privateLinkServiceAliases": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Optional Map) The mapping of zones to Private Link Service Aliases if available. Keys are zone names, for example, `1` and values are [Azure Private Link Service Aliases](https://docs.microsoft.com/en-us/azure/private-link/private-link-service-overview#share-your-service), for example, `s-nk99e-privatelink-1.8c43dcd0-695c-1234-bc35-11fe6abb303a.centralus.azure.privatelinkservice`.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "privateLinkServiceAliases"
                    ]
                }
            }
        },
        "confluentcloud:index/NetworkDnsConfig:NetworkDnsConfig": {
            "properties": {
                "resolution": {
                    "type": "string",
                    "description": "Network DNS resolution.\nWhen resolution is `CHASED_PRIVATE`, clusters in this network require both public and private DNS to resolve cluster endpoints.\nWhen resolution is `PRIVATE`, clusters in this network only require private DNS to resolve cluster endpoints.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "resolution"
            ]
        },
        "confluentcloud:index/NetworkEnvironment:NetworkEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Network belongs to, for example, `env-abc123`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/NetworkGcp:NetworkGcp": {
            "properties": {
                "privateServiceConnectServiceAttachments": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Optional Map) The mapping of zones to Private Service Connect Service Attachments if available. Keys are zones and values are [GCP Private Service Connect service attachment](https://cloud.google.com/vpc/docs/configure-private-service-connect-producer#api_7).\n"
                },
                "project": {
                    "type": "string",
                    "description": "(Required String) The GCP Project ID associated with the Confluent Cloud VPC.\n"
                },
                "vpcNetwork": {
                    "type": "string",
                    "description": "(Required String) The network name of the Confluent Cloud VPC.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "privateServiceConnectServiceAttachments",
                        "project",
                        "vpcNetwork"
                    ]
                }
            }
        },
        "confluentcloud:index/NetworkLinkEndpointEnvironment:NetworkLinkEndpointEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Network Link Endpoint belongs to, for example, `env-xyz456`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/NetworkLinkEndpointNetwork:NetworkLinkEndpointNetwork": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Network Link Endpoint belongs to, for example, `env-xyz456`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/NetworkLinkEndpointNetworkLinkService:NetworkLinkEndpointNetworkLinkService": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Network Link Endpoint belongs to, for example, `env-xyz456`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/NetworkLinkServiceAccept:NetworkLinkServiceAccept": {
            "properties": {
                "environments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of environments ids from which connections can be accepted. All networks within the list of environment will be allowed.\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of network ids from which connections can be accepted.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "environments",
                        "networks"
                    ]
                }
            }
        },
        "confluentcloud:index/NetworkLinkServiceEnvironment:NetworkLinkServiceEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Network that the Network Link Service belongs to, for example, `n-abc123`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/NetworkLinkServiceNetwork:NetworkLinkServiceNetwork": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Network that the Network Link Service belongs to, for example, `n-abc123`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/NetworkZoneInfo:NetworkZoneInfo": {
            "properties": {
                "cidr": {
                    "type": "string",
                    "description": "The IPv4 CIDR block to be used for the network. Must be `/27`. Required for VPC peering and AWS TransitGateway.\n"
                },
                "zoneId": {
                    "type": "string",
                    "description": "Cloud provider zone ID.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cidr",
                        "zoneId"
                    ]
                }
            }
        },
        "confluentcloud:index/PeeringAws:PeeringAws": {
            "properties": {
                "account": {
                    "type": "string",
                    "description": "The AWS Account ID of the peer VPC owner. You can find your AWS Account ID [here](https://console.aws.amazon.com/billing/home?#/account) under **My Account** section of the AWS Management Console. Must be a **12 character string**.\n",
                    "willReplaceOnChanges": true
                },
                "customerRegion": {
                    "type": "string",
                    "description": "The region of the Azure peer VNet.\n",
                    "willReplaceOnChanges": true
                },
                "routes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The AWS VPC CIDR blocks or subsets. This must be from the supported CIDR blocks and must not overlap with your Confluent Cloud CIDR block or any other network peering connection VPC CIDR (learn more about the requirements [here](https://docs.confluent.io/cloud/current/networking/peering/aws-peering.html#vpc-peering-on-aws)). You can find AWS VPC CIDR [here](https://console.aws.amazon.com/vpc/) under **Your VPCs \u003e Target VPC \u003e Details** section of the AWS Management Console.\n",
                    "willReplaceOnChanges": true
                },
                "vpc": {
                    "type": "string",
                    "description": "The AWS VPC ID of the peer VPC that you're peering with Confluent Cloud. You can find your AWS VPC ID [here](https://console.aws.amazon.com/vpc/) under **Your VPCs** section of the AWS Management Console. Must start with `vpc-`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "account",
                "customerRegion",
                "routes",
                "vpc"
            ]
        },
        "confluentcloud:index/PeeringAzure:PeeringAzure": {
            "properties": {
                "customerRegion": {
                    "type": "string",
                    "description": "The region of the Azure peer VNet.\n",
                    "willReplaceOnChanges": true
                },
                "tenant": {
                    "type": "string",
                    "description": "The Tenant ID that represents an organization in Azure Active Directory. You can find your Azure Tenant ID in the [Azure Portal under Azure Active Directory](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview). Must be a valid **32 character UUID string**.\n",
                    "willReplaceOnChanges": true
                },
                "vnet": {
                    "type": "string",
                    "description": "The resource (composite) ID of the peer Virtual Network that you're peering with Confluent Cloud, in the format `/subscriptions/\u003cSubscription ID\u003e/resourceGroups/\u003cResource Group Name\u003e/providers/Microsoft.Network/virtualNetworks/\u003cVNet name\u003e`. You can find Subscription ID, Resource Group Name and your VNet name under **Virtual Networks \u003e Target VNet \u003e Essentials** section of your [Microsoft Azure Portal](https://portal.azure.com/).\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "customerRegion",
                "tenant",
                "vnet"
            ]
        },
        "confluentcloud:index/PeeringEnvironment:PeeringEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Network that the Peering belongs to, for example, `n-abc123`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/PeeringGcp:PeeringGcp": {
            "properties": {
                "importCustomRoutes": {
                    "type": "boolean",
                    "description": "The Import Custom Routes option enables connectivity to a Confluent Cloud cluster in Google Cloud from customer premise or other clouds, such as AWS and Azure, through a customer VPC that is peered with Confluent Cloud in the same region. Defaults to `false`. Learn more about considerations / limitations of the Import Custom Routes option [here](https://docs.confluent.io/cloud/current/networking/peering/gcp-peering.html#import-custom-routes).\n",
                    "willReplaceOnChanges": true
                },
                "project": {
                    "type": "string",
                    "description": "The GCP Project ID. You can find your Google Cloud Project ID under **Project ID** section of your [Google Cloud Console dashboard](https://console.cloud.google.com/home/dashboard).\n",
                    "willReplaceOnChanges": true
                },
                "vpcNetwork": {
                    "type": "string",
                    "description": "The VPC network name that you're peering to Confluent Cloud. You can find your VPC network name under **VPC Networks** section of your [Google Cloud Console](https://console.cloud.google.com/networking/networks/list).\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "project",
                "vpcNetwork"
            ]
        },
        "confluentcloud:index/PeeringNetwork:PeeringNetwork": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Network that the Peering belongs to, for example, `n-abc123`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/PrivateLinkAccessAws:PrivateLinkAccessAws": {
            "properties": {
                "account": {
                    "type": "string",
                    "description": "The AWS account ID to enable for the Private Link Access. You can find your AWS account ID [here] (https://console.aws.amazon.com/billing/home?#/account) under **My Account** in your AWS Management Console. Must be a **12 character string**.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "account"
            ]
        },
        "confluentcloud:index/PrivateLinkAccessAzure:PrivateLinkAccessAzure": {
            "properties": {
                "subscription": {
                    "type": "string",
                    "description": "The Azure subscription ID to enable for the Private Link Access. You can find your Azure subscription ID in the subscription section of your [Microsoft Azure Portal] (https://portal.azure.com/#blade/Microsoft_Azure_Billing/SubscriptionsBlade). Must be a valid **32 character UUID string**.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "subscription"
            ]
        },
        "confluentcloud:index/PrivateLinkAccessEnvironment:PrivateLinkAccessEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Network that the Private Link Access belongs to, for example, `n-abc123`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/PrivateLinkAccessGcp:PrivateLinkAccessGcp": {
            "properties": {
                "project": {
                    "type": "string",
                    "description": "The GCP project ID to allow for Private Service Connect access. You can find your Google Cloud Project ID under **Project ID** section of your [Google Cloud Console dashboard](https://console.cloud.google.com/home/dashboard).\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "project"
            ]
        },
        "confluentcloud:index/PrivateLinkAccessNetwork:PrivateLinkAccessNetwork": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Network that the Private Link Access belongs to, for example, `n-abc123`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/SchemaCredentials:SchemaCredentials": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Schema Registry API Key.\n",
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "description": "The Schema Registry API Secret.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "secret"
            ]
        },
        "confluentcloud:index/SchemaRegistryClusterConfigCredentials:SchemaRegistryClusterConfigCredentials": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Schema Registry API Key.\n",
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "description": "The Schema Registry API Secret.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "secret"
            ]
        },
        "confluentcloud:index/SchemaRegistryClusterConfigSchemaRegistryCluster:SchemaRegistryClusterConfigSchemaRegistryCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Schema Registry cluster, for example, `lsrc-abc123`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/SchemaRegistryClusterEnvironment:SchemaRegistryClusterEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Schema Registry region that the Schema Registry cluster belongs to, for example, `sgreg-1`. See [Schema Registry Regions](https://docs.confluent.io/cloud/current/stream-governance/packages.html#stream-governance-regions) to find a corresponding region ID based on desired cloud provider region and types of the billing package.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/SchemaRegistryClusterModeCredentials:SchemaRegistryClusterModeCredentials": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Schema Registry API Key.\n",
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "description": "The Schema Registry API Secret.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "secret"
            ]
        },
        "confluentcloud:index/SchemaRegistryClusterModeSchemaRegistryCluster:SchemaRegistryClusterModeSchemaRegistryCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Schema Registry cluster, for example, `lsrc-abc123`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/SchemaRegistryClusterRegion:SchemaRegistryClusterRegion": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Schema Registry region that the Schema Registry cluster belongs to, for example, `sgreg-1`. See [Schema Registry Regions](https://docs.confluent.io/cloud/current/stream-governance/packages.html#stream-governance-regions) to find a corresponding region ID based on desired cloud provider region and types of the billing package.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/SchemaSchemaReference:SchemaSchemaReference": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the subject, representing the subject under which the referenced schema is registered.\n"
                },
                "subjectName": {
                    "type": "string",
                    "description": "The name for the reference. (For Avro Schema, the reference name is the fully qualified schema name, for JSON Schema it is a URL, and for Protobuf Schema, it is the name of another Protobuf file.)\n"
                },
                "version": {
                    "type": "integer",
                    "description": "The version, representing the exact version of the schema under the registered subject.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "subjectName",
                "version"
            ]
        },
        "confluentcloud:index/SchemaSchemaRegistryCluster:SchemaSchemaRegistryCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Schema Registry cluster, for example, `lsrc-abc123`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/SubjectConfigCredentials:SubjectConfigCredentials": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Schema Registry API Key.\n",
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "description": "The Schema Registry API Secret.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "secret"
            ]
        },
        "confluentcloud:index/SubjectConfigSchemaRegistryCluster:SubjectConfigSchemaRegistryCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Schema Registry cluster, for example, `lsrc-abc123`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/SubjectModeCredentials:SubjectModeCredentials": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Schema Registry API Key.\n",
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "description": "The Schema Registry API Secret.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "secret"
            ]
        },
        "confluentcloud:index/SubjectModeSchemaRegistryCluster:SubjectModeSchemaRegistryCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Schema Registry cluster, for example, `lsrc-abc123`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/TagBindingCredentials:TagBindingCredentials": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Schema Registry API Key.\n",
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "description": "The Schema Registry API Secret.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "secret"
            ]
        },
        "confluentcloud:index/TagBindingSchemaRegistryCluster:TagBindingSchemaRegistryCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Schema Registry cluster, for example, `lsrc-abc123`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/TagCredentials:TagCredentials": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Schema Registry API Key.\n",
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "description": "The Schema Registry API Secret.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "secret"
            ]
        },
        "confluentcloud:index/TagSchemaRegistryCluster:TagSchemaRegistryCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Schema Registry cluster, for example, `lsrc-abc123`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/TransitGatewayAttachmentAws:TransitGatewayAttachmentAws": {
            "properties": {
                "ramResourceShareArn": {
                    "type": "string",
                    "description": "The Amazon Resource Name (ARN) of the Resource Access Manager (RAM) Resource Share of the transit gateway your Confluent Cloud network attaches to.\n",
                    "willReplaceOnChanges": true
                },
                "routes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of destination routes for traffic from Confluent VPC to customer VPC via Transit Gateway.\n",
                    "willReplaceOnChanges": true
                },
                "transitGatewayAttachmentId": {
                    "type": "string",
                    "description": "(Required String) The ID of the AWS Transit Gateway VPC Attachment that attaches Confluent VPC to Transit Gateway.\n"
                },
                "transitGatewayId": {
                    "type": "string",
                    "description": "The ID of the AWS Transit Gateway that you want Confluent CLoud to be attached to. Must start with `tgw-`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "ramResourceShareArn",
                "routes",
                "transitGatewayId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ramResourceShareArn",
                        "routes",
                        "transitGatewayAttachmentId",
                        "transitGatewayId"
                    ]
                }
            }
        },
        "confluentcloud:index/TransitGatewayAttachmentEnvironment:TransitGatewayAttachmentEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Network that the Transit Gateway Attachment belongs to, for example, `n-abc123`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/TransitGatewayAttachmentNetwork:TransitGatewayAttachmentNetwork": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Network that the Transit Gateway Attachment belongs to, for example, `n-abc123`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getBusinessMetadataAttributeDefinition:getBusinessMetadataAttributeDefinition": {
            "properties": {
                "defaultValue": {
                    "type": "string",
                    "description": "(Optional String) The default value of this attribute.\n"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional String) The description of this attribute.\n"
                },
                "isOptional": {
                    "type": "boolean",
                    "description": "(Optional Boolean) An optional flag to control whether the attribute should be optional or required.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Business Metadata, for example, `PII`.\n"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Optional Map) Block for the attribute options:\n"
                },
                "type": {
                    "type": "string",
                    "description": "(Required String) The type of the attribute, it always returns `string`.\n"
                }
            },
            "type": "object",
            "required": [
                "defaultValue",
                "description",
                "isOptional",
                "name",
                "options",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getBusinessMetadataBindingCredentials:getBusinessMetadataBindingCredentials": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Schema Registry API Key.\n",
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "description": "The Schema Registry API Secret.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "secret"
            ]
        },
        "confluentcloud:index/getBusinessMetadataBindingSchemaRegistryCluster:getBusinessMetadataBindingSchemaRegistryCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Schema Registry cluster, for example, `lsrc-abc123`.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getBusinessMetadataCredentials:getBusinessMetadataCredentials": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Schema Registry API Key.\n",
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "description": "The Schema Registry API Secret.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "secret"
            ]
        },
        "confluentcloud:index/getBusinessMetadataSchemaRegistryCluster:getBusinessMetadataSchemaRegistryCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Schema Registry cluster, for example, `lsrc-abc123`.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getByokKeyAw:getByokKeyAw": {
            "properties": {
                "keyArn": {
                    "type": "string",
                    "description": "(Required String) The Amazon Resource Name (ARN) of an AWS KMS key.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional List of Strings) The Amazon Resource Names (ARNs) of IAM Roles created for this key-environment combination.\n"
                }
            },
            "type": "object",
            "required": [
                "keyArn",
                "roles"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getByokKeyAzure:getByokKeyAzure": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "(Optional String) The Application ID created for this key-environment combination.\n"
                },
                "keyIdentifier": {
                    "type": "string",
                    "description": "(Required String) The unique Key Object Identifier URL of an Azure Key Vault key.\n"
                },
                "keyVaultId": {
                    "type": "string",
                    "description": "(Required String) Key Vault ID containing the key.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "(Required String) Tenant ID (uuid) hosting the Key Vault containing the key.\n"
                }
            },
            "type": "object",
            "required": [
                "applicationId",
                "keyIdentifier",
                "keyVaultId",
                "tenantId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getIdentityPoolIdentityProvider:getIdentityPoolIdentityProvider": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Identity Provider associated with the Identity Pool, for example, `op-abc123`.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getInvitationCreator:getInvitationCreator": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Invitation, for example, `i-zyw30`.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getInvitationUser:getInvitationUser": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Invitation, for example, `i-zyw30`.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getKafkaClientQuotaEnvironment:getKafkaClientQuotaEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Kafka Client Quota (for example, `cq-abc123`).\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getKafkaClientQuotaKafkaCluster:getKafkaClientQuotaKafkaCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Kafka Client Quota (for example, `cq-abc123`).\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getKafkaClientQuotaThroughput:getKafkaClientQuotaThroughput": {
            "properties": {
                "egressByteRate": {
                    "type": "string",
                    "description": "(Required String) The egress throughput limit in bytes per second.\n"
                },
                "ingressByteRate": {
                    "type": "string",
                    "description": "(Required String) The ingress throughput limit in bytes per second.\n"
                }
            },
            "type": "object",
            "required": [
                "egressByteRate",
                "ingressByteRate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getKafkaClusterBasic:getKafkaClusterBasic": {
            "type": "object"
        },
        "confluentcloud:index/getKafkaClusterByokKey:getKafkaClusterByokKey": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Kafka cluster belongs to, for example, `env-xyz456`.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getKafkaClusterDedicated:getKafkaClusterDedicated": {
            "properties": {
                "cku": {
                    "type": "integer",
                    "description": "(Required Number) The number of Confluent Kafka Units (CKUs) for Dedicated cluster types. The minimum number of CKUs for `SINGLE_ZONE` dedicated clusters is `1` whereas `MULTI_ZONE` dedicated clusters must have more than `2` CKUs.\n"
                },
                "encryptionKey": {
                    "type": "string"
                },
                "zones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Required List of String) The list of zones the cluster is in.\nOn AWS, zones are AWS [AZ IDs](https://docs.aws.amazon.com/ram/latest/userguide/working-with-az-ids.html), for example, `use1-az3`.\nOn GCP, zones are GCP [zones](https://cloud.google.com/compute/docs/regions-zones), for example, `us-central1-c`.\nOn Azure, zones are Confluent-chosen names (for example, `1`, `2`, `3`) since Azure does not have universal zone identifiers.\n"
                }
            },
            "type": "object",
            "required": [
                "cku",
                "encryptionKey",
                "zones"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getKafkaClusterEnvironment:getKafkaClusterEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Kafka cluster belongs to, for example, `env-xyz456`.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getKafkaClusterNetwork:getKafkaClusterNetwork": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Kafka cluster belongs to, for example, `env-xyz456`.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getKafkaClusterStandard:getKafkaClusterStandard": {
            "type": "object"
        },
        "confluentcloud:index/getKafkaTopicCredentials:getKafkaTopicCredentials": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Kafka API Key.\n",
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "description": "The Kafka API Secret.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "secret"
            ]
        },
        "confluentcloud:index/getKafkaTopicKafkaCluster:getKafkaTopicKafkaCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Kafka cluster, for example, `lkc-abc123`.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getKsqlClusterCredentialIdentity:getKsqlClusterCredentialIdentity": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the ksqlDB cluster belongs to, for example, `env-xyz456`.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getKsqlClusterEnvironment:getKsqlClusterEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the ksqlDB cluster belongs to, for example, `env-xyz456`.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getKsqlClusterKafkaCluster:getKsqlClusterKafkaCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the ksqlDB cluster belongs to, for example, `env-xyz456`.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getNetworkAw:getNetworkAw": {
            "properties": {
                "account": {
                    "type": "string",
                    "description": "(Required String) The AWS account ID associated with the Confluent Cloud VPC.\n"
                },
                "privateLinkEndpointService": {
                    "type": "string",
                    "description": "(Optional String) The endpoint service of the Confluent Cloud VPC (used for PrivateLink) if available.\n"
                },
                "vpc": {
                    "type": "string",
                    "description": "(Required String) The Confluent Cloud VPC ID.\n"
                }
            },
            "type": "object",
            "required": [
                "account",
                "privateLinkEndpointService",
                "vpc"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getNetworkAzure:getNetworkAzure": {
            "properties": {
                "privateLinkServiceAliases": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Optional Map) The mapping of zones to Private Link Service Aliases if available. Keys are zones and values are [Azure Private Link Service Aliases](https://docs.microsoft.com/en-us/azure/private-link/private-link-service-overview#share-your-service).\n"
                }
            },
            "type": "object",
            "required": [
                "privateLinkServiceAliases"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getNetworkDnsConfig:getNetworkDnsConfig": {
            "properties": {
                "resolution": {
                    "type": "string",
                    "description": "(Required String) Network DNS resolution.\nWhen resolution is `CHASED_PRIVATE`, clusters in this network require both public and private DNS to resolve cluster endpoints.\nWhen resolution is `PRIVATE`, clusters in this network only require private DNS to resolve cluster endpoints.\n"
                }
            },
            "type": "object",
            "required": [
                "resolution"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getNetworkEnvironment:getNetworkEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Network belongs to, for example, `env-xyz456`.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getNetworkGcp:getNetworkGcp": {
            "properties": {
                "privateServiceConnectServiceAttachments": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Optional Map) The mapping of zones to Private Service Connect Service Attachments if available. Keys are zones and values are [GCP Private Service Connect service attachment](https://cloud.google.com/vpc/docs/configure-private-service-connect-producer#api_7).\n"
                },
                "project": {
                    "type": "string",
                    "description": "(Required String) The GCP Project ID associated with the Confluent Cloud VPC.\n"
                },
                "vpcNetwork": {
                    "type": "string",
                    "description": "(Required String) The network name of the Confluent Cloud VPC.\n"
                }
            },
            "type": "object",
            "required": [
                "privateServiceConnectServiceAttachments",
                "project",
                "vpcNetwork"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getNetworkLinkEndpointEnvironment:getNetworkLinkEndpointEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Network Link Endpoint belongs to, for example, `env-xyz456`.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getNetworkLinkEndpointNetwork:getNetworkLinkEndpointNetwork": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Network Link Endpoint belongs to, for example, `env-xyz456`.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getNetworkLinkEndpointNetworkLinkService:getNetworkLinkEndpointNetworkLinkService": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Network Link Endpoint belongs to, for example, `env-xyz456`.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getNetworkLinkServiceAccept:getNetworkLinkServiceAccept": {
            "properties": {
                "environments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional List of Strings) List of environments ids from which connections can be accepted. All networks within the list of environment will be allowed.\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional List of Strings) List of network ids from which connections can be accepted.\n"
                }
            },
            "type": "object",
            "required": [
                "environments",
                "networks"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getNetworkLinkServiceEnvironment:getNetworkLinkServiceEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Network Link Service belongs to, for example, `env-1234`.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getNetworkLinkServiceNetwork:getNetworkLinkServiceNetwork": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Network Link Service belongs to, for example, `env-1234`.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getNetworkZoneInfo:getNetworkZoneInfo": {
            "properties": {
                "cidr": {
                    "type": "string",
                    "description": "(Required String) The IPv4 CIDR block to be used for the network. Must be `/27`. Required for VPC peering and AWS TransitGateway.\n"
                },
                "zoneId": {
                    "type": "string",
                    "description": "(Required String) Cloud provider zone ID.\n"
                }
            },
            "type": "object",
            "required": [
                "cidr",
                "zoneId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getPeeringAw:getPeeringAw": {
            "properties": {
                "account": {
                    "type": "string",
                    "description": "(Required String) The AWS Account ID of the peer VPC owner. You can find your AWS Account ID [here](https://console.aws.amazon.com/billing/home?#/account) under **My Account** section of the AWS Management Console. Must be a **12 character string**.\n"
                },
                "customerRegion": {
                    "type": "string",
                    "description": "(Required String) The region of the Azure peer VNet.\n"
                },
                "routes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Required String) The AWS VPC CIDR blocks or subsets. This must be from the supported CIDR blocks and must not overlap with your Confluent Cloud CIDR block or any other network peering connection VPC CIDR (learn more about the requirements [here](https://docs.confluent.io/cloud/current/networking/peering/aws-peering.html#vpc-peering-on-aws)). You can find AWS VPC CIDR [here](https://console.aws.amazon.com/vpc/) under **Your VPCs \u003e Target VPC \u003e Details** section of the AWS Management Console.\n"
                },
                "vpc": {
                    "type": "string",
                    "description": "(Required String) The AWS VPC ID of the peer VPC that you're peering with Confluent Cloud. You can find your AWS VPC ID [here](https://console.aws.amazon.com/vpc/) under **Your VPCs** section of the AWS Management Console. Must start with `vpc-`.\n"
                }
            },
            "type": "object",
            "required": [
                "account",
                "customerRegion",
                "routes",
                "vpc"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getPeeringAzure:getPeeringAzure": {
            "properties": {
                "customerRegion": {
                    "type": "string",
                    "description": "(Required String) The region of the Azure peer VNet.\n"
                },
                "tenant": {
                    "type": "string",
                    "description": "(Required String) The Tenant ID that represents an organization in Azure Active Directory. You can find your Azure Tenant ID in the [Azure Portal under Azure Active Directory](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview). Must be a valid **32 character UUID string**.\n"
                },
                "vnet": {
                    "type": "string",
                    "description": "(Required String) The resource (composite) ID of the peer Virtual Network that you're peering with Confluent Cloud, in the format `/subscriptions/\u003cSubscription ID\u003e/resourceGroups/\u003cResource Group Name\u003e/providers/Microsoft.Network/virtualNetworks/\u003cVNet name\u003e`. You can find Subscription ID, Resource Group Name and your VNet name under **Virtual Networks \u003e Target VNet \u003e Essentials** section of your [Microsoft Azure Portal](https://portal.azure.com/).\n"
                }
            },
            "type": "object",
            "required": [
                "customerRegion",
                "tenant",
                "vnet"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getPeeringEnvironment:getPeeringEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Peering belongs to, for example, `env-xyz456`.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getPeeringGcp:getPeeringGcp": {
            "properties": {
                "importCustomRoutes": {
                    "type": "boolean",
                    "description": "(Optional Boolean) The Import Custom Routes option enables connectivity to a Confluent Cloud cluster in Google Cloud from customer premise or other clouds, such as AWS and Azure, through a customer VPC that is peered with Confluent Cloud in the same region. Defaults to `false`. Learn more about considerations / limitations of the Import Custom Routes option [here](https://docs.confluent.io/cloud/current/networking/peering/gcp-peering.html#import-custom-routes).\n"
                },
                "project": {
                    "type": "string",
                    "description": "(Required String) The GCP Project ID. You can find your Google Cloud Project ID under **Project ID** section of your [Google Cloud Console dashboard](https://console.cloud.google.com/home/dashboard).\n"
                },
                "vpcNetwork": {
                    "type": "string",
                    "description": "(Required String) The VPC network name that you're peering to Confluent Cloud. You can find your VPC network name under **VPC Networks** section of your [Google Cloud Console](https://console.cloud.google.com/networking/networks/list).\n"
                }
            },
            "type": "object",
            "required": [
                "importCustomRoutes",
                "project",
                "vpcNetwork"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getPeeringNetwork:getPeeringNetwork": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Peering belongs to, for example, `env-xyz456`.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getPrivateLinkAccessAw:getPrivateLinkAccessAw": {
            "properties": {
                "account": {
                    "type": "string",
                    "description": "(Required String) The AWS account ID to enable for the Private Link Access. You can find your AWS account ID [here](https://console.aws.amazon.com/billing/home?#/account) under **My Account** in your AWS Management Console. Must be a **12 character string**.\n"
                }
            },
            "type": "object",
            "required": [
                "account"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getPrivateLinkAccessAzure:getPrivateLinkAccessAzure": {
            "properties": {
                "subscription": {
                    "type": "string",
                    "description": "(Required String) The Azure subscription ID to enable for the Private Link Access. You can find your Azure subscription ID in the subscription section of your [Microsoft Azure Portal](https://portal.azure.com/#blade/Microsoft_Azure_Billing/SubscriptionsBlade). Must be a valid **32 character UUID string**.\n"
                }
            },
            "type": "object",
            "required": [
                "subscription"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getPrivateLinkAccessEnvironment:getPrivateLinkAccessEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Private Link Access belongs to, for example, `env-xyz456`.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getPrivateLinkAccessGcp:getPrivateLinkAccessGcp": {
            "properties": {
                "project": {
                    "type": "string",
                    "description": "(Required String) The GCP project ID to allow for Private Service Connect access. You can find your Google Cloud Project ID under **Project ID** section of your [Google Cloud Console dashboard](https://console.cloud.google.com/home/dashboard).\n"
                }
            },
            "type": "object",
            "required": [
                "project"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getPrivateLinkAccessNetwork:getPrivateLinkAccessNetwork": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Private Link Access belongs to, for example, `env-xyz456`.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getSchemaCredentials:getSchemaCredentials": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Schema Registry API Key.\n",
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "description": "The Schema Registry API Secret.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "secret"
            ]
        },
        "confluentcloud:index/getSchemaRegistryClusterConfigCredentials:getSchemaRegistryClusterConfigCredentials": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Schema Registry API Key.\n",
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "description": "The Schema Registry API Secret.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "secret"
            ]
        },
        "confluentcloud:index/getSchemaRegistryClusterConfigSchemaRegistryCluster:getSchemaRegistryClusterConfigSchemaRegistryCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Schema Registry cluster, for example, `lsrc-abc123`.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getSchemaRegistryClusterEnvironment:getSchemaRegistryClusterEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Schema Registry cluster belongs to, for example, `env-xyz456`.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getSchemaRegistryClusterModeCredentials:getSchemaRegistryClusterModeCredentials": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Schema Registry API Key.\n",
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "description": "The Schema Registry API Secret.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "secret"
            ]
        },
        "confluentcloud:index/getSchemaRegistryClusterModeSchemaRegistryCluster:getSchemaRegistryClusterModeSchemaRegistryCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Schema Registry cluster, for example, `lsrc-abc123`.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getSchemaRegistryClusterRegion:getSchemaRegistryClusterRegion": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Schema Registry cluster belongs to, for example, `env-xyz456`.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getSchemaSchemaReference:getSchemaSchemaReference": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(Required String) The name of the subject, representing the subject under which the referenced schema is registered.\n"
                },
                "subjectName": {
                    "type": "string",
                    "description": "The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`. Schemas evolve safely, following a compatibility mode defined, under a subject name.\n"
                },
                "version": {
                    "type": "integer",
                    "description": "(Required Integer) The version of the Schema, for example, `4`.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "subjectName",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getSchemaSchemaRegistryCluster:getSchemaSchemaRegistryCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Schema Registry cluster, for example, `lsrc-abc123`.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getSchemasCredentials:getSchemasCredentials": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Schema Registry API Key.\n",
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "description": "The Schema Registry API Secret.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "secret"
            ]
        },
        "confluentcloud:index/getSchemasFilter:getSchemasFilter": {
            "properties": {
                "deleted": {
                    "type": "boolean",
                    "description": "The boolean flag to control whether to return soft deleted schemas. Defaults to `false`.\n"
                },
                "latestOnly": {
                    "type": "boolean",
                    "description": "The boolean flag to control whether to return latest schema versions only for each matching subject. Defaults to `false`.\n"
                },
                "subjectPrefix": {
                    "type": "string",
                    "description": "The prefix of the subjects (in other words, the namespaces), representing the subjects under which the schemas are registered.\n"
                }
            },
            "type": "object"
        },
        "confluentcloud:index/getSchemasSchema:getSchemasSchema": {
            "properties": {
                "format": {
                    "type": "string",
                    "description": "(Required String) The format of the schema. Accepted values are: `AVRO`, `PROTOBUF`, and `JSON`.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "(Required String) The schema string.\n"
                },
                "schemaIdentifier": {
                    "type": "integer",
                    "description": "(Required String) The ID of the Schema, for example: `lsrc-abc123/test-subject/100003`.\n"
                },
                "schemaReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/confluentcloud:index/getSchemasSchemaSchemaReference:getSchemasSchemaSchemaReference"
                    },
                    "description": "(Optional List) The list of referenced schemas (see [Schema References](https://docs.confluent.io/platform/current/schema-registry/serdes-develop/index.html#schema-references) for more details):\n"
                },
                "subjectName": {
                    "type": "string",
                    "description": "(Required String) The name for the reference. (For Avro Schema, the reference name is the fully qualified schema name, for JSON Schema it is a URL, and for Protobuf Schema, it is the name of another Protobuf file.)\n"
                },
                "version": {
                    "type": "integer",
                    "description": "(Required Integer) The version of the Schema, for example, `4`.\n"
                }
            },
            "type": "object",
            "required": [
                "format",
                "schema",
                "schemaIdentifier",
                "schemaReferences",
                "subjectName",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getSchemasSchemaRegistryCluster:getSchemasSchemaRegistryCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Schema Registry cluster, for example, `lsrc-abc123`.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getSchemasSchemaSchemaReference:getSchemasSchemaSchemaReference": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(Required String) The name of the subject, representing the subject under which the referenced schema is registered.\n"
                },
                "subjectName": {
                    "type": "string",
                    "description": "(Required String) The name for the reference. (For Avro Schema, the reference name is the fully qualified schema name, for JSON Schema it is a URL, and for Protobuf Schema, it is the name of another Protobuf file.)\n"
                },
                "version": {
                    "type": "integer",
                    "description": "(Required Integer) The version of the Schema, for example, `4`.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "subjectName",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getSubjectConfigCredentials:getSubjectConfigCredentials": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Schema Registry API Key.\n",
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "description": "The Schema Registry API Secret.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "secret"
            ]
        },
        "confluentcloud:index/getSubjectConfigSchemaRegistryCluster:getSubjectConfigSchemaRegistryCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Schema Registry cluster, for example, `lsrc-abc123`.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getSubjectModeCredentials:getSubjectModeCredentials": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Schema Registry API Key.\n",
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "description": "The Schema Registry API Secret.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "secret"
            ]
        },
        "confluentcloud:index/getSubjectModeSchemaRegistryCluster:getSubjectModeSchemaRegistryCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Schema Registry cluster, for example, `lsrc-abc123`.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getTagBindingCredentials:getTagBindingCredentials": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Schema Registry API Key.\n",
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "description": "The Schema Registry API Secret.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "secret"
            ]
        },
        "confluentcloud:index/getTagBindingSchemaRegistryCluster:getTagBindingSchemaRegistryCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Schema Registry cluster, for example, `lsrc-abc123`.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getTagCredentials:getTagCredentials": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Schema Registry API Key.\n",
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "description": "The Schema Registry API Secret.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "secret"
            ]
        },
        "confluentcloud:index/getTagSchemaRegistryCluster:getTagSchemaRegistryCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Schema Registry cluster, for example, `lsrc-abc123`.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getTransitGatewayAttachmentAw:getTransitGatewayAttachmentAw": {
            "properties": {
                "ramResourceShareArn": {
                    "type": "string",
                    "description": "(Required String) The Amazon Resource Name (ARN) of the Resource Access Manager (RAM) Resource Share of the transit gateway your Confluent Cloud network attaches to.\n"
                },
                "routes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Required List of String) List of destination routes for traffic from Confluent VPC to customer VPC via Transit Gateway.\n"
                },
                "transitGatewayAttachmentId": {
                    "type": "string",
                    "description": "(Required String) The ID of the AWS Transit Gateway VPC Attachment that attaches Confluent VPC to Transit Gateway.\n"
                },
                "transitGatewayId": {
                    "type": "string",
                    "description": "(Required String) The ID of the AWS Transit Gateway that you want Confluent CLoud to be attached to. Must start with `tgw-`.\n"
                }
            },
            "type": "object",
            "required": [
                "ramResourceShareArn",
                "routes",
                "transitGatewayAttachmentId",
                "transitGatewayId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getTransitGatewayAttachmentEnvironment:getTransitGatewayAttachmentEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Transit Gateway Attachment belongs to, for example, `env-xyz456`.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getTransitGatewayAttachmentNetwork:getTransitGatewayAttachmentNetwork": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Transit Gateway Attachment belongs to, for example, `env-xyz456`.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the confluent package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "cloudApiKey": {
                "type": "string",
                "description": "The Confluent Cloud API Key.\n",
                "secret": true
            },
            "cloudApiSecret": {
                "type": "string",
                "description": "The Confluent Cloud API Secret.\n",
                "secret": true
            },
            "endpoint": {
                "type": "string",
                "description": "The base endpoint of Confluent Cloud API.\n"
            },
            "kafkaApiKey": {
                "type": "string",
                "description": "The Kafka Cluster API Key.\n",
                "secret": true
            },
            "kafkaApiSecret": {
                "type": "string",
                "description": "The Kafka Cluster API Secret.\n",
                "secret": true
            },
            "kafkaId": {
                "type": "string",
                "description": "The Kafka Cluster ID.\n"
            },
            "kafkaRestEndpoint": {
                "type": "string",
                "description": "The Kafka Cluster REST Endpoint.\n"
            },
            "maxRetries": {
                "type": "integer",
                "description": "Maximum number of retries of HTTP client. Defaults to 4.\n"
            },
            "schemaRegistryApiKey": {
                "type": "string",
                "description": "The Schema Registry Cluster API Key.\n",
                "secret": true
            },
            "schemaRegistryApiSecret": {
                "type": "string",
                "description": "The Schema Registry Cluster API Secret.\n",
                "secret": true
            },
            "schemaRegistryId": {
                "type": "string",
                "description": "The Schema Registry Cluster ID.\n"
            },
            "schemaRegistryRestEndpoint": {
                "type": "string",
                "description": "The Schema Registry Cluster REST Endpoint.\n"
            }
        },
        "inputProperties": {
            "cloudApiKey": {
                "type": "string",
                "description": "The Confluent Cloud API Key.\n",
                "secret": true
            },
            "cloudApiSecret": {
                "type": "string",
                "description": "The Confluent Cloud API Secret.\n",
                "secret": true
            },
            "endpoint": {
                "type": "string",
                "description": "The base endpoint of Confluent Cloud API.\n"
            },
            "kafkaApiKey": {
                "type": "string",
                "description": "The Kafka Cluster API Key.\n",
                "secret": true
            },
            "kafkaApiSecret": {
                "type": "string",
                "description": "The Kafka Cluster API Secret.\n",
                "secret": true
            },
            "kafkaId": {
                "type": "string",
                "description": "The Kafka Cluster ID.\n"
            },
            "kafkaRestEndpoint": {
                "type": "string",
                "description": "The Kafka Cluster REST Endpoint.\n"
            },
            "maxRetries": {
                "type": "integer",
                "description": "Maximum number of retries of HTTP client. Defaults to 4.\n"
            },
            "schemaRegistryApiKey": {
                "type": "string",
                "description": "The Schema Registry Cluster API Key.\n",
                "secret": true
            },
            "schemaRegistryApiSecret": {
                "type": "string",
                "description": "The Schema Registry Cluster API Secret.\n",
                "secret": true
            },
            "schemaRegistryId": {
                "type": "string",
                "description": "The Schema Registry Cluster ID.\n"
            },
            "schemaRegistryRestEndpoint": {
                "type": "string",
                "description": "The Schema Registry Cluster REST Endpoint.\n"
            }
        }
    },
    "resources": {
        "confluentcloud:index/apiKey:ApiKey": {
            "description": "\n\n\n## Import\n\nYou can import a Cluster API Key by using the Environment ID and Cluster API Key ID in the format `\u003cEnvironment ID\u003e/\u003cCluster API Key ID\u003e`, for example$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\" $ export API_KEY_SECRET=\"\u003capi_key_secret\u003e\" Option #1Cluster API Key\n\n```sh\n $ pulumi import confluentcloud:index/apiKey:ApiKey example_kafka_api_key \"env-abc123/UTT6WDRXX7FHD2GV\"\n```\n\n You can import a Cloud API Key by using Cloud API Key ID, for example$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\" $ export API_KEY_SECRET=\"\u003capi_key_secret\u003e\" Option #2Cloud API Key\n\n```sh\n $ pulumi import confluentcloud:index/apiKey:ApiKey example_cloud_api_key \"4UEXOMMWIBE5KZQG\"\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A free-form description of the API Account.\n"
                },
                "disableWaitForReady": {
                    "type": "boolean",
                    "description": "An optional flag to disable wait-for-readiness on create. Its primary use case is for Cluster API Keys for private networking options when readiness check fails. Must be unset when importing. Defaults to `false`.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "A human-readable name for the API Key.\n"
                },
                "managedResource": {
                    "$ref": "#/types/confluentcloud:index/ApiKeyManagedResource:ApiKeyManagedResource",
                    "description": "The resource associated with this object. The only resource that is supported is 'cmk.v2.Cluster', 'srcm.v2.Cluster'.\n"
                },
                "owner": {
                    "$ref": "#/types/confluentcloud:index/ApiKeyOwner:ApiKeyOwner",
                    "description": "The owner to which the API Key belongs. The owner can be one of 'iam.v2.User', 'iam.v2.ServiceAccount'.\n"
                },
                "secret": {
                    "type": "string",
                    "description": "(Required String, Sensitive) The secret of the API Key.\n",
                    "secret": true
                }
            },
            "required": [
                "displayName",
                "owner",
                "secret"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A free-form description of the API Account.\n"
                },
                "disableWaitForReady": {
                    "type": "boolean",
                    "description": "An optional flag to disable wait-for-readiness on create. Its primary use case is for Cluster API Keys for private networking options when readiness check fails. Must be unset when importing. Defaults to `false`.\n",
                    "willReplaceOnChanges": true
                },
                "displayName": {
                    "type": "string",
                    "description": "A human-readable name for the API Key.\n"
                },
                "managedResource": {
                    "$ref": "#/types/confluentcloud:index/ApiKeyManagedResource:ApiKeyManagedResource",
                    "description": "The resource associated with this object. The only resource that is supported is 'cmk.v2.Cluster', 'srcm.v2.Cluster'.\n",
                    "willReplaceOnChanges": true
                },
                "owner": {
                    "$ref": "#/types/confluentcloud:index/ApiKeyOwner:ApiKeyOwner",
                    "description": "The owner to which the API Key belongs. The owner can be one of 'iam.v2.User', 'iam.v2.ServiceAccount'.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "owner"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApiKey resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A free-form description of the API Account.\n"
                    },
                    "disableWaitForReady": {
                        "type": "boolean",
                        "description": "An optional flag to disable wait-for-readiness on create. Its primary use case is for Cluster API Keys for private networking options when readiness check fails. Must be unset when importing. Defaults to `false`.\n",
                        "willReplaceOnChanges": true
                    },
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the API Key.\n"
                    },
                    "managedResource": {
                        "$ref": "#/types/confluentcloud:index/ApiKeyManagedResource:ApiKeyManagedResource",
                        "description": "The resource associated with this object. The only resource that is supported is 'cmk.v2.Cluster', 'srcm.v2.Cluster'.\n",
                        "willReplaceOnChanges": true
                    },
                    "owner": {
                        "$ref": "#/types/confluentcloud:index/ApiKeyOwner:ApiKeyOwner",
                        "description": "The owner to which the API Key belongs. The owner can be one of 'iam.v2.User', 'iam.v2.ServiceAccount'.\n",
                        "willReplaceOnChanges": true
                    },
                    "secret": {
                        "type": "string",
                        "description": "(Required String, Sensitive) The secret of the API Key.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/businessMetadata:BusinessMetadata": {
            "description": "\n\n\n## Import\n\nYou can import a Business Metadata by using the Schema Registry cluster ID, Business Metadata name in the format `\u003cSchema Registry cluster ID\u003e/\u003cBusiness Metadata name\u003e`, for example$ export IMPORT_SCHEMA_REGISTRY_API_KEY=\"\u003cschema_registry_api_key\u003e\" $ export IMPORT_SCHEMA_REGISTRY_API_SECRET=\"\u003cschema_registry_api_secret\u003e\" $ export IMPORT_SCHEMA_REGISTRY_REST_ENDPOINT=\"\u003cschema_registry_rest_endpoint\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/businessMetadata:BusinessMetadata pii lsrc-8wrx70/PII\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "attributeDefinitions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/confluentcloud:index/BusinessMetadataAttributeDefinition:BusinessMetadataAttributeDefinition"
                    },
                    "description": "The list of attribute definitions (see [Business Metadata](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog.html#business-metadata-for-schemas) for more details):\n"
                },
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/BusinessMetadataCredentials:BusinessMetadataCredentials",
                    "description": "The Cluster API Credentials.\n",
                    "secret": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Business Metadata.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the attribute.\n"
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).\n"
                },
                "schemaRegistryCluster": {
                    "$ref": "#/types/confluentcloud:index/BusinessMetadataSchemaRegistryCluster:BusinessMetadataSchemaRegistryCluster"
                },
                "version": {
                    "type": "integer",
                    "description": "(Required Integer) The version of the Business Metadata, for example, `1`.\n"
                }
            },
            "required": [
                "attributeDefinitions",
                "name",
                "version"
            ],
            "inputProperties": {
                "attributeDefinitions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/confluentcloud:index/BusinessMetadataAttributeDefinition:BusinessMetadataAttributeDefinition"
                    },
                    "description": "The list of attribute definitions (see [Business Metadata](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog.html#business-metadata-for-schemas) for more details):\n"
                },
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/BusinessMetadataCredentials:BusinessMetadataCredentials",
                    "description": "The Cluster API Credentials.\n",
                    "secret": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Business Metadata.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the attribute.\n",
                    "willReplaceOnChanges": true
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                    "willReplaceOnChanges": true
                },
                "schemaRegistryCluster": {
                    "$ref": "#/types/confluentcloud:index/BusinessMetadataSchemaRegistryCluster:BusinessMetadataSchemaRegistryCluster",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BusinessMetadata resources.\n",
                "properties": {
                    "attributeDefinitions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/BusinessMetadataAttributeDefinition:BusinessMetadataAttributeDefinition"
                        },
                        "description": "The list of attribute definitions (see [Business Metadata](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog.html#business-metadata-for-schemas) for more details):\n"
                    },
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/BusinessMetadataCredentials:BusinessMetadataCredentials",
                        "description": "The Cluster API Credentials.\n",
                        "secret": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Business Metadata.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the attribute.\n",
                        "willReplaceOnChanges": true
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaRegistryCluster": {
                        "$ref": "#/types/confluentcloud:index/BusinessMetadataSchemaRegistryCluster:BusinessMetadataSchemaRegistryCluster",
                        "willReplaceOnChanges": true
                    },
                    "version": {
                        "type": "integer",
                        "description": "(Required Integer) The version of the Business Metadata, for example, `1`.\n"
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/businessMetadataBinding:BusinessMetadataBinding": {
            "description": "\n\n\n## Import\n\nYou can import a Business Metadata Binding by using the Schema Registry cluster ID, Business Metadata name, entity name and entity type in the format `\u003cSchema Registry Cluster Id\u003e/\u003cBusiness Metadata Name\u003e/\u003cEntity Name\u003e/\u003cEntity Type\u003e`, for example$ export IMPORT_SCHEMA_REGISTRY_API_KEY=\"\u003cschema_registry_api_key\u003e\" $ export IMPORT_SCHEMA_REGISTRY_API_SECRET=\"\u003cschema_registry_api_secret\u003e\" $ export IMPORT_SCHEMA_REGISTRY_REST_ENDPOINT=\"\u003cschema_registry_rest_endpoint\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/businessMetadataBinding:BusinessMetadataBinding main lsrc-8wrx70/PII/lsrc-8wrx70:.:100001/sr_schema\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The block of key-value pair attributes.\n"
                },
                "businessMetadataName": {
                    "type": "string",
                    "description": "The name of the Business Metadata to be applied, for example, `PII`.\n"
                },
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/BusinessMetadataBindingCredentials:BusinessMetadataBindingCredentials",
                    "description": "The Cluster API Credentials.\n",
                    "secret": true
                },
                "entityName": {
                    "type": "string",
                    "description": "The qualified name of the entity., for example, `lsrc-8wrx70:.:100001`.\n"
                },
                "entityType": {
                    "type": "string",
                    "description": "The entity type, for example, `sr_schema`. Refer to the [Entity types](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#entity-types) to learn more about entity types.\n"
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).\n"
                },
                "schemaRegistryCluster": {
                    "$ref": "#/types/confluentcloud:index/BusinessMetadataBindingSchemaRegistryCluster:BusinessMetadataBindingSchemaRegistryCluster"
                }
            },
            "required": [
                "attributes",
                "businessMetadataName",
                "entityName",
                "entityType"
            ],
            "inputProperties": {
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The block of key-value pair attributes.\n"
                },
                "businessMetadataName": {
                    "type": "string",
                    "description": "The name of the Business Metadata to be applied, for example, `PII`.\n",
                    "willReplaceOnChanges": true
                },
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/BusinessMetadataBindingCredentials:BusinessMetadataBindingCredentials",
                    "description": "The Cluster API Credentials.\n",
                    "secret": true
                },
                "entityName": {
                    "type": "string",
                    "description": "The qualified name of the entity., for example, `lsrc-8wrx70:.:100001`.\n",
                    "willReplaceOnChanges": true
                },
                "entityType": {
                    "type": "string",
                    "description": "The entity type, for example, `sr_schema`. Refer to the [Entity types](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#entity-types) to learn more about entity types.\n",
                    "willReplaceOnChanges": true
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                    "willReplaceOnChanges": true
                },
                "schemaRegistryCluster": {
                    "$ref": "#/types/confluentcloud:index/BusinessMetadataBindingSchemaRegistryCluster:BusinessMetadataBindingSchemaRegistryCluster",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "businessMetadataName",
                "entityName",
                "entityType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BusinessMetadataBinding resources.\n",
                "properties": {
                    "attributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The block of key-value pair attributes.\n"
                    },
                    "businessMetadataName": {
                        "type": "string",
                        "description": "The name of the Business Metadata to be applied, for example, `PII`.\n",
                        "willReplaceOnChanges": true
                    },
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/BusinessMetadataBindingCredentials:BusinessMetadataBindingCredentials",
                        "description": "The Cluster API Credentials.\n",
                        "secret": true
                    },
                    "entityName": {
                        "type": "string",
                        "description": "The qualified name of the entity., for example, `lsrc-8wrx70:.:100001`.\n",
                        "willReplaceOnChanges": true
                    },
                    "entityType": {
                        "type": "string",
                        "description": "The entity type, for example, `sr_schema`. Refer to the [Entity types](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#entity-types) to learn more about entity types.\n",
                        "willReplaceOnChanges": true
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaRegistryCluster": {
                        "$ref": "#/types/confluentcloud:index/BusinessMetadataBindingSchemaRegistryCluster:BusinessMetadataBindingSchemaRegistryCluster",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/byokKey:ByokKey": {
            "description": "\n\n\n## Import\n\nYou can import a BYOK Key by using BYOK Key ID. The following example shows how to import a BYOK Key$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/byokKey:ByokKey aws_key cck-abcde\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "aws": {
                    "$ref": "#/types/confluentcloud:index/ByokKeyAws:ByokKeyAws",
                    "description": "(Optional Configuration Block) supports the following:\n"
                },
                "azure": {
                    "$ref": "#/types/confluentcloud:index/ByokKeyAzure:ByokKeyAzure",
                    "description": "(Optional Configuration Block) supports the following:\n"
                }
            },
            "required": [
                "aws",
                "azure"
            ],
            "inputProperties": {
                "aws": {
                    "$ref": "#/types/confluentcloud:index/ByokKeyAws:ByokKeyAws",
                    "description": "(Optional Configuration Block) supports the following:\n",
                    "willReplaceOnChanges": true
                },
                "azure": {
                    "$ref": "#/types/confluentcloud:index/ByokKeyAzure:ByokKeyAzure",
                    "description": "(Optional Configuration Block) supports the following:\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ByokKey resources.\n",
                "properties": {
                    "aws": {
                        "$ref": "#/types/confluentcloud:index/ByokKeyAws:ByokKeyAws",
                        "description": "(Optional Configuration Block) supports the following:\n",
                        "willReplaceOnChanges": true
                    },
                    "azure": {
                        "$ref": "#/types/confluentcloud:index/ByokKeyAzure:ByokKeyAzure",
                        "description": "(Optional Configuration Block) supports the following:\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/clusterLink:ClusterLink": {
            "description": "\n\n\n## Import\n\nYou can import a Kafka mirror topic by using the cluster link name, cluster link mode, cluster link connection mode, source Kafka cluster ID, and destination Kafka cluster ID, in the format `\u003cCluster link name\u003e/\u003cCluster link mode\u003e/\u003cCluster connection mode\u003e/\u003cSource Kafka cluster ID\u003e/\u003cDestination Kafka cluster ID\u003e`, for example$ export IMPORT_SOURCE_KAFKA_BOOTSTRAP_ENDPOINT=\"\u003csource_kafka_bootstrap_endpoint\u003e\" $ export IMPORT_SOURCE_KAFKA_API_KEY=\"\u003csource_kafka_api_key\u003e\" $ export IMPORT_SOURCE_KAFKA_API_SECRET=\"\u003csource_kafka_api_secret\u003e\" $ export IMPORT_DESTINATION_KAFKA_REST_ENDPOINT=\"\u003cdestination_kafka_rest_endpoint\u003e\" $ export IMPORT_DESTINATION_KAFKA_API_KEY=\"\u003cdestination_kafka_api_key\u003e\" $ export IMPORT_DESTINATION_KAFKA_API_SECRET=\"\u003cdestination_kafka_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/clusterLink:ClusterLink my_cluster_link my-cluster-link/DESTINATION/OUTBOUND/lkc-abc123/lkc-xyz456\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The custom cluster link settings to set:\n"
                },
                "connectionMode": {
                    "type": "string",
                    "description": "The connection mode of the cluster link. The supported values are `\"INBOUND\"` and `\"OUTBOUND\"`. Defaults to `\"OUTBOUND\"`.\n"
                },
                "destinationKafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/ClusterLinkDestinationKafkaCluster:ClusterLinkDestinationKafkaCluster"
                },
                "link": {
                    "type": "string",
                    "description": "The name of the cluster link, for example, `my-cluster-link`.\n"
                },
                "linkMode": {
                    "type": "string",
                    "description": "The mode of the cluster link. The supported values are `\"DESTINATION\"` and `\"SOURCE\"`. Defaults to `\"DESTINATION\"`.\n"
                },
                "sourceKafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/ClusterLinkSourceKafkaCluster:ClusterLinkSourceKafkaCluster"
                }
            },
            "required": [
                "config",
                "destinationKafkaCluster",
                "link",
                "sourceKafkaCluster"
            ],
            "inputProperties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The custom cluster link settings to set:\n"
                },
                "connectionMode": {
                    "type": "string",
                    "description": "The connection mode of the cluster link. The supported values are `\"INBOUND\"` and `\"OUTBOUND\"`. Defaults to `\"OUTBOUND\"`.\n",
                    "willReplaceOnChanges": true
                },
                "destinationKafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/ClusterLinkDestinationKafkaCluster:ClusterLinkDestinationKafkaCluster"
                },
                "link": {
                    "type": "string",
                    "description": "The name of the cluster link, for example, `my-cluster-link`.\n",
                    "willReplaceOnChanges": true
                },
                "linkMode": {
                    "type": "string",
                    "description": "The mode of the cluster link. The supported values are `\"DESTINATION\"` and `\"SOURCE\"`. Defaults to `\"DESTINATION\"`.\n",
                    "willReplaceOnChanges": true
                },
                "sourceKafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/ClusterLinkSourceKafkaCluster:ClusterLinkSourceKafkaCluster"
                }
            },
            "requiredInputs": [
                "destinationKafkaCluster",
                "sourceKafkaCluster"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ClusterLink resources.\n",
                "properties": {
                    "config": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The custom cluster link settings to set:\n"
                    },
                    "connectionMode": {
                        "type": "string",
                        "description": "The connection mode of the cluster link. The supported values are `\"INBOUND\"` and `\"OUTBOUND\"`. Defaults to `\"OUTBOUND\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "destinationKafkaCluster": {
                        "$ref": "#/types/confluentcloud:index/ClusterLinkDestinationKafkaCluster:ClusterLinkDestinationKafkaCluster"
                    },
                    "link": {
                        "type": "string",
                        "description": "The name of the cluster link, for example, `my-cluster-link`.\n",
                        "willReplaceOnChanges": true
                    },
                    "linkMode": {
                        "type": "string",
                        "description": "The mode of the cluster link. The supported values are `\"DESTINATION\"` and `\"SOURCE\"`. Defaults to `\"DESTINATION\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "sourceKafkaCluster": {
                        "$ref": "#/types/confluentcloud:index/ClusterLinkSourceKafkaCluster:ClusterLinkSourceKafkaCluster"
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/connector:Connector": {
            "description": "\n\n\n## Import\n\nYou can import a connector by using Environment ID, Kafka cluster ID, and connector's name, in the format `\u003cEnvironment ID\u003e/\u003cKafka cluster ID\u003e/\u003cConnector name\u003e`, for example$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/connector:Connector my_connector \"env-abc123/lkc-abc123/S3_SINKConnector_0\"\n```\n\n ",
            "properties": {
                "configNonsensitive": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Block for custom *nonsensitive* configuration properties that are *not* labelled with \"Type: password\" under \"Configuration Properties\" section in [the docs](https://docs.confluent.io/cloud/current/connectors/index.html):\n"
                },
                "configSensitive": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Block for custom *sensitive* configuration properties that are labelled with \"Type: password\" under \"Configuration Properties\" section in [the docs](https://docs.confluent.io/cloud/current/connectors/index.html):\n",
                    "secret": true
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/ConnectorEnvironment:ConnectorEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n"
                },
                "kafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/ConnectorKafkaCluster:ConnectorKafkaCluster"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the connector (one of `\"NONE\"`, `\"PROVISIONING\"`, `\"RUNNING\"`, `\"DEGRADED\"`, `\"FAILED\"`, `\"PAUSED\"`, `\"DELETED\"`). Pausing (`\"RUNNING\" \u003e \"PAUSED\"`) and resuming (`\"PAUSED\" \u003e \"RUNNING\"`) a connector is supported via an update operation.\n"
                }
            },
            "required": [
                "configNonsensitive",
                "configSensitive",
                "environment",
                "kafkaCluster",
                "status"
            ],
            "inputProperties": {
                "configNonsensitive": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Block for custom *nonsensitive* configuration properties that are *not* labelled with \"Type: password\" under \"Configuration Properties\" section in [the docs](https://docs.confluent.io/cloud/current/connectors/index.html):\n"
                },
                "configSensitive": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Block for custom *sensitive* configuration properties that are labelled with \"Type: password\" under \"Configuration Properties\" section in [the docs](https://docs.confluent.io/cloud/current/connectors/index.html):\n",
                    "secret": true
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/ConnectorEnvironment:ConnectorEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                    "willReplaceOnChanges": true
                },
                "kafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/ConnectorKafkaCluster:ConnectorKafkaCluster",
                    "willReplaceOnChanges": true
                },
                "status": {
                    "type": "string",
                    "description": "The status of the connector (one of `\"NONE\"`, `\"PROVISIONING\"`, `\"RUNNING\"`, `\"DEGRADED\"`, `\"FAILED\"`, `\"PAUSED\"`, `\"DELETED\"`). Pausing (`\"RUNNING\" \u003e \"PAUSED\"`) and resuming (`\"PAUSED\" \u003e \"RUNNING\"`) a connector is supported via an update operation.\n"
                }
            },
            "requiredInputs": [
                "configNonsensitive",
                "environment",
                "kafkaCluster"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Connector resources.\n",
                "properties": {
                    "configNonsensitive": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Block for custom *nonsensitive* configuration properties that are *not* labelled with \"Type: password\" under \"Configuration Properties\" section in [the docs](https://docs.confluent.io/cloud/current/connectors/index.html):\n"
                    },
                    "configSensitive": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Block for custom *sensitive* configuration properties that are labelled with \"Type: password\" under \"Configuration Properties\" section in [the docs](https://docs.confluent.io/cloud/current/connectors/index.html):\n",
                        "secret": true
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/ConnectorEnvironment:ConnectorEnvironment",
                        "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                        "willReplaceOnChanges": true
                    },
                    "kafkaCluster": {
                        "$ref": "#/types/confluentcloud:index/ConnectorKafkaCluster:ConnectorKafkaCluster",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the connector (one of `\"NONE\"`, `\"PROVISIONING\"`, `\"RUNNING\"`, `\"DEGRADED\"`, `\"FAILED\"`, `\"PAUSED\"`, `\"DELETED\"`). Pausing (`\"RUNNING\" \u003e \"PAUSED\"`) and resuming (`\"PAUSED\" \u003e \"RUNNING\"`) a connector is supported via an update operation.\n"
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/environment:Environment": {
            "description": "\n\n\n## Import\n\nYou can import an Environment by using Environment ID, for example$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/environment:Environment my_env env-abc123\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "A human-readable name for the Environment. Start and end the name with alphanumeric characters, for example, \"Development\". The name can contain hyphens and underscores.\n"
                },
                "resourceName": {
                    "type": "string",
                    "description": "(Required String) The Confluent Resource Name of the Environment, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123`.\n"
                }
            },
            "required": [
                "displayName",
                "resourceName"
            ],
            "inputProperties": {
                "displayName": {
                    "type": "string",
                    "description": "A human-readable name for the Environment. Start and end the name with alphanumeric characters, for example, \"Development\". The name can contain hyphens and underscores.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Environment resources.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the Environment. Start and end the name with alphanumeric characters, for example, \"Development\". The name can contain hyphens and underscores.\n"
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "(Required String) The Confluent Resource Name of the Environment, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123`.\n"
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/identityPool:IdentityPool": {
            "description": "[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n`confluentcloud.IdentityPool` provides an Identity Pool resource that enables creating, editing, and deleting identity pools on Confluent Cloud.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Example Identity Pool to be used with Azure AD\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst azure = new confluentcloud.IdentityProvider(\"azure\", {\n    displayName: \"My OIDC Provider: Azure AD\",\n    description: \"My description\",\n    issuer: \"https://login.microsoftonline.com/{tenant_id}/v2.0\",\n    jwksUri: \"https://login.microsoftonline.com/common/discovery/v2.0/keys\",\n});\nconst example = new confluentcloud.IdentityPool(\"example\", {\n    identityProvider: {\n        id: azure.id,\n    },\n    displayName: \"My Identity Pool\",\n    description: \"Prod Access to Kafka clusters to Release Engineering\",\n    identityClaim: \"claims.sub\",\n    filter: \"claims.aud==\\\"confluent\\\" \u0026\u0026 claims.group!=\\\"invalid_group\\\"\",\n});\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nazure = confluentcloud.IdentityProvider(\"azure\",\n    display_name=\"My OIDC Provider: Azure AD\",\n    description=\"My description\",\n    issuer=\"https://login.microsoftonline.com/{tenant_id}/v2.0\",\n    jwks_uri=\"https://login.microsoftonline.com/common/discovery/v2.0/keys\")\nexample = confluentcloud.IdentityPool(\"example\",\n    identity_provider=confluentcloud.IdentityPoolIdentityProviderArgs(\n        id=azure.id,\n    ),\n    display_name=\"My Identity Pool\",\n    description=\"Prod Access to Kafka clusters to Release Engineering\",\n    identity_claim=\"claims.sub\",\n    filter=\"claims.aud==\\\"confluent\\\" \u0026\u0026 claims.group!=\\\"invalid_group\\\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var azure = new ConfluentCloud.IdentityProvider(\"azure\", new()\n    {\n        DisplayName = \"My OIDC Provider: Azure AD\",\n        Description = \"My description\",\n        Issuer = \"https://login.microsoftonline.com/{tenant_id}/v2.0\",\n        JwksUri = \"https://login.microsoftonline.com/common/discovery/v2.0/keys\",\n    });\n\n    var example = new ConfluentCloud.IdentityPool(\"example\", new()\n    {\n        IdentityProvider = new ConfluentCloud.Inputs.IdentityPoolIdentityProviderArgs\n        {\n            Id = azure.Id,\n        },\n        DisplayName = \"My Identity Pool\",\n        Description = \"Prod Access to Kafka clusters to Release Engineering\",\n        IdentityClaim = \"claims.sub\",\n        Filter = \"claims.aud==\\\"confluent\\\" \u0026\u0026 claims.group!=\\\"invalid_group\\\"\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tazure, err := confluentcloud.NewIdentityProvider(ctx, \"azure\", \u0026confluentcloud.IdentityProviderArgs{\n\t\t\tDisplayName: pulumi.String(\"My OIDC Provider: Azure AD\"),\n\t\t\tDescription: pulumi.String(\"My description\"),\n\t\t\tIssuer:      pulumi.String(\"https://login.microsoftonline.com/{tenant_id}/v2.0\"),\n\t\t\tJwksUri:     pulumi.String(\"https://login.microsoftonline.com/common/discovery/v2.0/keys\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = confluentcloud.NewIdentityPool(ctx, \"example\", \u0026confluentcloud.IdentityPoolArgs{\n\t\t\tIdentityProvider: \u0026confluentcloud.IdentityPoolIdentityProviderArgs{\n\t\t\t\tId: azure.ID(),\n\t\t\t},\n\t\t\tDisplayName:   pulumi.String(\"My Identity Pool\"),\n\t\t\tDescription:   pulumi.String(\"Prod Access to Kafka clusters to Release Engineering\"),\n\t\t\tIdentityClaim: pulumi.String(\"claims.sub\"),\n\t\t\tFilter:        pulumi.String(\"claims.aud==\\\"confluent\\\" \u0026\u0026 claims.group!=\\\"invalid_group\\\"\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.IdentityProvider;\nimport com.pulumi.confluentcloud.IdentityProviderArgs;\nimport com.pulumi.confluentcloud.IdentityPool;\nimport com.pulumi.confluentcloud.IdentityPoolArgs;\nimport com.pulumi.confluentcloud.inputs.IdentityPoolIdentityProviderArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var azure = new IdentityProvider(\"azure\", IdentityProviderArgs.builder()        \n            .displayName(\"My OIDC Provider: Azure AD\")\n            .description(\"My description\")\n            .issuer(\"https://login.microsoftonline.com/{tenant_id}/v2.0\")\n            .jwksUri(\"https://login.microsoftonline.com/common/discovery/v2.0/keys\")\n            .build());\n\n        var example = new IdentityPool(\"example\", IdentityPoolArgs.builder()        \n            .identityProvider(IdentityPoolIdentityProviderArgs.builder()\n                .id(azure.id())\n                .build())\n            .displayName(\"My Identity Pool\")\n            .description(\"Prod Access to Kafka clusters to Release Engineering\")\n            .identityClaim(\"claims.sub\")\n            .filter(\"claims.aud==\\\"confluent\\\" \u0026\u0026 claims.group!=\\\"invalid_group\\\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  azure:\n    type: confluentcloud:IdentityProvider\n    properties:\n      displayName: 'My OIDC Provider: Azure AD'\n      description: My description\n      issuer: https://login.microsoftonline.com/{tenant_id}/v2.0\n      jwksUri: https://login.microsoftonline.com/common/discovery/v2.0/keys\n  example:\n    type: confluentcloud:IdentityPool\n    properties:\n      identityProvider:\n        id: ${azure.id}\n      displayName: My Identity Pool\n      description: Prod Access to Kafka clusters to Release Engineering\n      identityClaim: claims.sub\n      filter: claims.aud==\"confluent\" \u0026\u0026 claims.group!=\"invalid_group\"\n```\n{{% /example %}}\n{{% example %}}\n### Example Identity Pool to be used with Okta\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst okta = new confluentcloud.IdentityProvider(\"okta\", {\n    displayName: \"My OIDC Provider: Okta\",\n    description: \"My description\",\n    issuer: \"https://mycompany.okta.com/oauth2/default\",\n    jwksUri: \"https://mycompany.okta.com/oauth2/default/v1/keys\",\n});\nconst example = new confluentcloud.IdentityPool(\"example\", {\n    identityProvider: {\n        id: okta.id,\n    },\n    displayName: \"My Identity Pool\",\n    description: \"Prod Access to Kafka clusters to Release Engineering\",\n    identityClaim: \"claims.sub\",\n    filter: \"claims.aud==\\\"confluent\\\" \u0026\u0026 claims.group!=\\\"invalid_group\\\"\",\n});\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nokta = confluentcloud.IdentityProvider(\"okta\",\n    display_name=\"My OIDC Provider: Okta\",\n    description=\"My description\",\n    issuer=\"https://mycompany.okta.com/oauth2/default\",\n    jwks_uri=\"https://mycompany.okta.com/oauth2/default/v1/keys\")\nexample = confluentcloud.IdentityPool(\"example\",\n    identity_provider=confluentcloud.IdentityPoolIdentityProviderArgs(\n        id=okta.id,\n    ),\n    display_name=\"My Identity Pool\",\n    description=\"Prod Access to Kafka clusters to Release Engineering\",\n    identity_claim=\"claims.sub\",\n    filter=\"claims.aud==\\\"confluent\\\" \u0026\u0026 claims.group!=\\\"invalid_group\\\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var okta = new ConfluentCloud.IdentityProvider(\"okta\", new()\n    {\n        DisplayName = \"My OIDC Provider: Okta\",\n        Description = \"My description\",\n        Issuer = \"https://mycompany.okta.com/oauth2/default\",\n        JwksUri = \"https://mycompany.okta.com/oauth2/default/v1/keys\",\n    });\n\n    var example = new ConfluentCloud.IdentityPool(\"example\", new()\n    {\n        IdentityProvider = new ConfluentCloud.Inputs.IdentityPoolIdentityProviderArgs\n        {\n            Id = okta.Id,\n        },\n        DisplayName = \"My Identity Pool\",\n        Description = \"Prod Access to Kafka clusters to Release Engineering\",\n        IdentityClaim = \"claims.sub\",\n        Filter = \"claims.aud==\\\"confluent\\\" \u0026\u0026 claims.group!=\\\"invalid_group\\\"\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tokta, err := confluentcloud.NewIdentityProvider(ctx, \"okta\", \u0026confluentcloud.IdentityProviderArgs{\n\t\t\tDisplayName: pulumi.String(\"My OIDC Provider: Okta\"),\n\t\t\tDescription: pulumi.String(\"My description\"),\n\t\t\tIssuer:      pulumi.String(\"https://mycompany.okta.com/oauth2/default\"),\n\t\t\tJwksUri:     pulumi.String(\"https://mycompany.okta.com/oauth2/default/v1/keys\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = confluentcloud.NewIdentityPool(ctx, \"example\", \u0026confluentcloud.IdentityPoolArgs{\n\t\t\tIdentityProvider: \u0026confluentcloud.IdentityPoolIdentityProviderArgs{\n\t\t\t\tId: okta.ID(),\n\t\t\t},\n\t\t\tDisplayName:   pulumi.String(\"My Identity Pool\"),\n\t\t\tDescription:   pulumi.String(\"Prod Access to Kafka clusters to Release Engineering\"),\n\t\t\tIdentityClaim: pulumi.String(\"claims.sub\"),\n\t\t\tFilter:        pulumi.String(\"claims.aud==\\\"confluent\\\" \u0026\u0026 claims.group!=\\\"invalid_group\\\"\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.IdentityProvider;\nimport com.pulumi.confluentcloud.IdentityProviderArgs;\nimport com.pulumi.confluentcloud.IdentityPool;\nimport com.pulumi.confluentcloud.IdentityPoolArgs;\nimport com.pulumi.confluentcloud.inputs.IdentityPoolIdentityProviderArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var okta = new IdentityProvider(\"okta\", IdentityProviderArgs.builder()        \n            .displayName(\"My OIDC Provider: Okta\")\n            .description(\"My description\")\n            .issuer(\"https://mycompany.okta.com/oauth2/default\")\n            .jwksUri(\"https://mycompany.okta.com/oauth2/default/v1/keys\")\n            .build());\n\n        var example = new IdentityPool(\"example\", IdentityPoolArgs.builder()        \n            .identityProvider(IdentityPoolIdentityProviderArgs.builder()\n                .id(okta.id())\n                .build())\n            .displayName(\"My Identity Pool\")\n            .description(\"Prod Access to Kafka clusters to Release Engineering\")\n            .identityClaim(\"claims.sub\")\n            .filter(\"claims.aud==\\\"confluent\\\" \u0026\u0026 claims.group!=\\\"invalid_group\\\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  okta:\n    type: confluentcloud:IdentityProvider\n    properties:\n      displayName: 'My OIDC Provider: Okta'\n      description: My description\n      issuer: https://mycompany.okta.com/oauth2/default\n      jwksUri: https://mycompany.okta.com/oauth2/default/v1/keys\n  example:\n    type: confluentcloud:IdentityPool\n    properties:\n      identityProvider:\n        id: ${okta.id}\n      displayName: My Identity Pool\n      description: Prod Access to Kafka clusters to Release Engineering\n      identityClaim: claims.sub\n      filter: claims.aud==\"confluent\" \u0026\u0026 claims.group!=\"invalid_group\"\n```\n\n{{% /example %}}\n{{% /examples %}}\n## External Documentation\n\n* [Use identity pools with your OAuth provider](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/identity-pools.html).\n\n\n## Import\n\nYou can import an Identity Pool by using Identity Provider ID and Identity Pool ID, in the format `\u003cIdentity Provider ID\u003e/\u003cIdentity Pool ID\u003e`. The following example shows how to import an Identity Pool$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/identityPool:IdentityPool example op-abc123/pool-xyz456\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A description for the Identity Pool.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "A human-readable name for the Identity Pool.\n"
                },
                "filter": {
                    "type": "string",
                    "description": "A filter expression in [Supported Common Expression Language (CEL)](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/identity-pools.html#supported-common-expression-language-cel-filters) that specifies which identities can authenticate using your identity pool (see [Set identity pool filters](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/identity-pools.html#set-identity-pool-filters) for more details).\n"
                },
                "identityClaim": {
                    "type": "string",
                    "description": "The JSON Web Token (JWT) claim to extract the authenticating identity to Confluent resources from (see [Registered Claim Names](https://datatracker.ietf.org/doc/html/rfc7519#section-4.1) for more details). This appears in the audit log records, showing, for example, that \"identity Z used identity pool X to access topic A\".\n"
                },
                "identityProvider": {
                    "$ref": "#/types/confluentcloud:index/IdentityPoolIdentityProvider:IdentityPoolIdentityProvider",
                    "description": "Identity Provider objects represent external OAuth/OpenID Connect providers within Confluent Cloud.\n"
                }
            },
            "required": [
                "description",
                "displayName",
                "filter",
                "identityClaim",
                "identityProvider"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A description for the Identity Pool.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "A human-readable name for the Identity Pool.\n"
                },
                "filter": {
                    "type": "string",
                    "description": "A filter expression in [Supported Common Expression Language (CEL)](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/identity-pools.html#supported-common-expression-language-cel-filters) that specifies which identities can authenticate using your identity pool (see [Set identity pool filters](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/identity-pools.html#set-identity-pool-filters) for more details).\n"
                },
                "identityClaim": {
                    "type": "string",
                    "description": "The JSON Web Token (JWT) claim to extract the authenticating identity to Confluent resources from (see [Registered Claim Names](https://datatracker.ietf.org/doc/html/rfc7519#section-4.1) for more details). This appears in the audit log records, showing, for example, that \"identity Z used identity pool X to access topic A\".\n"
                },
                "identityProvider": {
                    "$ref": "#/types/confluentcloud:index/IdentityPoolIdentityProvider:IdentityPoolIdentityProvider",
                    "description": "Identity Provider objects represent external OAuth/OpenID Connect providers within Confluent Cloud.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "description",
                "displayName",
                "filter",
                "identityClaim",
                "identityProvider"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IdentityPool resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A description for the Identity Pool.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the Identity Pool.\n"
                    },
                    "filter": {
                        "type": "string",
                        "description": "A filter expression in [Supported Common Expression Language (CEL)](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/identity-pools.html#supported-common-expression-language-cel-filters) that specifies which identities can authenticate using your identity pool (see [Set identity pool filters](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/identity-pools.html#set-identity-pool-filters) for more details).\n"
                    },
                    "identityClaim": {
                        "type": "string",
                        "description": "The JSON Web Token (JWT) claim to extract the authenticating identity to Confluent resources from (see [Registered Claim Names](https://datatracker.ietf.org/doc/html/rfc7519#section-4.1) for more details). This appears in the audit log records, showing, for example, that \"identity Z used identity pool X to access topic A\".\n"
                    },
                    "identityProvider": {
                        "$ref": "#/types/confluentcloud:index/IdentityPoolIdentityProvider:IdentityPoolIdentityProvider",
                        "description": "Identity Provider objects represent external OAuth/OpenID Connect providers within Confluent Cloud.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/identityProvider:IdentityProvider": {
            "description": "[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n`confluentcloud.IdentityProvider` provides an Identity Provider resource that enables creating, editing, and deleting identity providers on Confluent Cloud.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Example Identity Provider: Azure AD\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst azure = new confluentcloud.IdentityProvider(\"azure\", {\n    description: \"My description\",\n    displayName: \"My OIDC Provider: Azure AD\",\n    issuer: \"https://login.microsoftonline.com/{tenant_id}/v2.0\",\n    jwksUri: \"https://login.microsoftonline.com/common/discovery/v2.0/keys\",\n});\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nazure = confluentcloud.IdentityProvider(\"azure\",\n    description=\"My description\",\n    display_name=\"My OIDC Provider: Azure AD\",\n    issuer=\"https://login.microsoftonline.com/{tenant_id}/v2.0\",\n    jwks_uri=\"https://login.microsoftonline.com/common/discovery/v2.0/keys\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var azure = new ConfluentCloud.IdentityProvider(\"azure\", new()\n    {\n        Description = \"My description\",\n        DisplayName = \"My OIDC Provider: Azure AD\",\n        Issuer = \"https://login.microsoftonline.com/{tenant_id}/v2.0\",\n        JwksUri = \"https://login.microsoftonline.com/common/discovery/v2.0/keys\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := confluentcloud.NewIdentityProvider(ctx, \"azure\", \u0026confluentcloud.IdentityProviderArgs{\n\t\t\tDescription: pulumi.String(\"My description\"),\n\t\t\tDisplayName: pulumi.String(\"My OIDC Provider: Azure AD\"),\n\t\t\tIssuer:      pulumi.String(\"https://login.microsoftonline.com/{tenant_id}/v2.0\"),\n\t\t\tJwksUri:     pulumi.String(\"https://login.microsoftonline.com/common/discovery/v2.0/keys\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.IdentityProvider;\nimport com.pulumi.confluentcloud.IdentityProviderArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var azure = new IdentityProvider(\"azure\", IdentityProviderArgs.builder()        \n            .description(\"My description\")\n            .displayName(\"My OIDC Provider: Azure AD\")\n            .issuer(\"https://login.microsoftonline.com/{tenant_id}/v2.0\")\n            .jwksUri(\"https://login.microsoftonline.com/common/discovery/v2.0/keys\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  azure:\n    type: confluentcloud:IdentityProvider\n    properties:\n      description: My description\n      displayName: 'My OIDC Provider: Azure AD'\n      issuer: https://login.microsoftonline.com/{tenant_id}/v2.0\n      jwksUri: https://login.microsoftonline.com/common/discovery/v2.0/keys\n```\n{{% /example %}}\n{{% example %}}\n### Example Identity Provider: Okta\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst okta = new confluentcloud.IdentityProvider(\"okta\", {\n    description: \"My description\",\n    displayName: \"My OIDC Provider: Okta\",\n    issuer: \"https://mycompany.okta.com/oauth2/default\",\n    jwksUri: \"https://mycompany.okta.com/oauth2/default/v1/keys\",\n});\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nokta = confluentcloud.IdentityProvider(\"okta\",\n    description=\"My description\",\n    display_name=\"My OIDC Provider: Okta\",\n    issuer=\"https://mycompany.okta.com/oauth2/default\",\n    jwks_uri=\"https://mycompany.okta.com/oauth2/default/v1/keys\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var okta = new ConfluentCloud.IdentityProvider(\"okta\", new()\n    {\n        Description = \"My description\",\n        DisplayName = \"My OIDC Provider: Okta\",\n        Issuer = \"https://mycompany.okta.com/oauth2/default\",\n        JwksUri = \"https://mycompany.okta.com/oauth2/default/v1/keys\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := confluentcloud.NewIdentityProvider(ctx, \"okta\", \u0026confluentcloud.IdentityProviderArgs{\n\t\t\tDescription: pulumi.String(\"My description\"),\n\t\t\tDisplayName: pulumi.String(\"My OIDC Provider: Okta\"),\n\t\t\tIssuer:      pulumi.String(\"https://mycompany.okta.com/oauth2/default\"),\n\t\t\tJwksUri:     pulumi.String(\"https://mycompany.okta.com/oauth2/default/v1/keys\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.IdentityProvider;\nimport com.pulumi.confluentcloud.IdentityProviderArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var okta = new IdentityProvider(\"okta\", IdentityProviderArgs.builder()        \n            .description(\"My description\")\n            .displayName(\"My OIDC Provider: Okta\")\n            .issuer(\"https://mycompany.okta.com/oauth2/default\")\n            .jwksUri(\"https://mycompany.okta.com/oauth2/default/v1/keys\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  okta:\n    type: confluentcloud:IdentityProvider\n    properties:\n      description: My description\n      displayName: 'My OIDC Provider: Okta'\n      issuer: https://mycompany.okta.com/oauth2/default\n      jwksUri: https://mycompany.okta.com/oauth2/default/v1/keys\n```\n\n{{% /example %}}\n{{% /examples %}}\n## External Documentation\n\n* [Authenticating with OAuth](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/overview.html).\n\n\n## Import\n\nYou can import an Identity Provider by using Identity Provider ID, for example$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/identityProvider:IdentityProvider example op-abc123\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A description for the Identity Provider.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "A human-readable name for the Identity Provider.\n"
                },
                "issuer": {
                    "type": "string",
                    "description": "A publicly reachable issuer URI for the Identity Provider. The unique issuer URI string represents the entity for issuing tokens.\n"
                },
                "jwksUri": {
                    "type": "string",
                    "description": "A publicly reachable JSON Web Key Set (JWKS) URI for the Identity Provider. A JSON Web Key Set (JWKS) provides a set of keys containing the public keys used to verify any JSON Web Token (JWT) issued by your OAuth 2.0 identity provider.\n"
                }
            },
            "required": [
                "description",
                "displayName",
                "issuer",
                "jwksUri"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A description for the Identity Provider.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "A human-readable name for the Identity Provider.\n"
                },
                "issuer": {
                    "type": "string",
                    "description": "A publicly reachable issuer URI for the Identity Provider. The unique issuer URI string represents the entity for issuing tokens.\n",
                    "willReplaceOnChanges": true
                },
                "jwksUri": {
                    "type": "string",
                    "description": "A publicly reachable JSON Web Key Set (JWKS) URI for the Identity Provider. A JSON Web Key Set (JWKS) provides a set of keys containing the public keys used to verify any JSON Web Token (JWT) issued by your OAuth 2.0 identity provider.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "description",
                "displayName",
                "issuer",
                "jwksUri"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IdentityProvider resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A description for the Identity Provider.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the Identity Provider.\n"
                    },
                    "issuer": {
                        "type": "string",
                        "description": "A publicly reachable issuer URI for the Identity Provider. The unique issuer URI string represents the entity for issuing tokens.\n",
                        "willReplaceOnChanges": true
                    },
                    "jwksUri": {
                        "type": "string",
                        "description": "A publicly reachable JSON Web Key Set (JWKS) URI for the Identity Provider. A JSON Web Key Set (JWKS) provides a set of keys containing the public keys used to verify any JSON Web Token (JWT) issued by your OAuth 2.0 identity provider.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/invitation:Invitation": {
            "description": "[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n`confluentcloud.Invitation` provides an invitation resource that enables creating, reading, and deleting invitation on Confluent Cloud.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst main = new confluentcloud.Invitation(\"main\", {email: \"\"});\nconst main2 = new confluentcloud.Invitation(\"main2\", {\n    authType: \"AUTH_TYPE_LOCAL\",\n    email: \"\",\n});\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nmain = confluentcloud.Invitation(\"main\", email=\"\")\nmain2 = confluentcloud.Invitation(\"main2\",\n    auth_type=\"AUTH_TYPE_LOCAL\",\n    email=\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new ConfluentCloud.Invitation(\"main\", new()\n    {\n        Email = \"\",\n    });\n\n    var main2 = new ConfluentCloud.Invitation(\"main2\", new()\n    {\n        AuthType = \"AUTH_TYPE_LOCAL\",\n        Email = \"\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := confluentcloud.NewInvitation(ctx, \"main\", \u0026confluentcloud.InvitationArgs{\n\t\t\tEmail: pulumi.String(\"\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = confluentcloud.NewInvitation(ctx, \"main2\", \u0026confluentcloud.InvitationArgs{\n\t\t\tAuthType: pulumi.String(\"AUTH_TYPE_LOCAL\"),\n\t\t\tEmail:    pulumi.String(\"\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.Invitation;\nimport com.pulumi.confluentcloud.InvitationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new Invitation(\"main\", InvitationArgs.builder()        \n            .email(\"\")\n            .build());\n\n        var main2 = new Invitation(\"main2\", InvitationArgs.builder()        \n            .authType(\"AUTH_TYPE_LOCAL\")\n            .email(\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: confluentcloud:Invitation\n    properties:\n      email:\n  main2:\n    type: confluentcloud:Invitation\n    properties:\n      authType: AUTH_TYPE_LOCAL\n      email:\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nYou can import an Invitation by using Invitation ID, for example$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/invitation:Invitation main i-gxxn1\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "acceptedAt": {
                    "type": "string",
                    "description": "(Optional String) The timestamp that the invitation was accepted.\n"
                },
                "authType": {
                    "type": "string",
                    "description": "Accepted values are: `AUTH_TYPE_LOCAL` and `AUTH_TYPE_SSO`. The user/invitee's authentication type. Note that only the [`OrganizationAdmin role`](https://docs.confluent.io/cloud/current/access-management/access-control/cloud-rbac.html#organizationadmin) can invite AUTH_TYPE_LOCAL users to SSO organizations. The user's auth_type is set as AUTH_TYPE_SSO by default if the organization has SSO enabled. Otherwise, the user's auth_type is AUTH_TYPE_LOCAL by default.\n"
                },
                "creators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/confluentcloud:index/InvitationCreator:InvitationCreator"
                    },
                    "description": "(Required Configuration Block) supports the following:\n"
                },
                "email": {
                    "type": "string",
                    "description": "The user/invitee's email address.\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "(Optional String) The timestamp that the invitation will expire.\n"
                },
                "status": {
                    "type": "string",
                    "description": "(Optional String) The status of invitations. Accepted values are: `INVITE_STATUS_SENT`,`INVITE_STATUS_STAGED`,`INVITE_STATUS_ACCEPTED`,`INVITE_STATUS_EXPIRED`, and `INVITE_STATUS_DEACTIVATED`.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/confluentcloud:index/InvitationUser:InvitationUser"
                    },
                    "description": "(Required Configuration Block) supports the following:\n"
                }
            },
            "required": [
                "acceptedAt",
                "authType",
                "creators",
                "email",
                "expiresAt",
                "status",
                "users"
            ],
            "inputProperties": {
                "authType": {
                    "type": "string",
                    "description": "Accepted values are: `AUTH_TYPE_LOCAL` and `AUTH_TYPE_SSO`. The user/invitee's authentication type. Note that only the [`OrganizationAdmin role`](https://docs.confluent.io/cloud/current/access-management/access-control/cloud-rbac.html#organizationadmin) can invite AUTH_TYPE_LOCAL users to SSO organizations. The user's auth_type is set as AUTH_TYPE_SSO by default if the organization has SSO enabled. Otherwise, the user's auth_type is AUTH_TYPE_LOCAL by default.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The user/invitee's email address.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "email"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Invitation resources.\n",
                "properties": {
                    "acceptedAt": {
                        "type": "string",
                        "description": "(Optional String) The timestamp that the invitation was accepted.\n"
                    },
                    "authType": {
                        "type": "string",
                        "description": "Accepted values are: `AUTH_TYPE_LOCAL` and `AUTH_TYPE_SSO`. The user/invitee's authentication type. Note that only the [`OrganizationAdmin role`](https://docs.confluent.io/cloud/current/access-management/access-control/cloud-rbac.html#organizationadmin) can invite AUTH_TYPE_LOCAL users to SSO organizations. The user's auth_type is set as AUTH_TYPE_SSO by default if the organization has SSO enabled. Otherwise, the user's auth_type is AUTH_TYPE_LOCAL by default.\n"
                    },
                    "creators": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/InvitationCreator:InvitationCreator"
                        },
                        "description": "(Required Configuration Block) supports the following:\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The user/invitee's email address.\n",
                        "willReplaceOnChanges": true
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "(Optional String) The timestamp that the invitation will expire.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "(Optional String) The status of invitations. Accepted values are: `INVITE_STATUS_SENT`,`INVITE_STATUS_STAGED`,`INVITE_STATUS_ACCEPTED`,`INVITE_STATUS_EXPIRED`, and `INVITE_STATUS_DEACTIVATED`.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/InvitationUser:InvitationUser"
                        },
                        "description": "(Required Configuration Block) supports the following:\n"
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/kafkaAcl:KafkaAcl": {
            "description": "\n\n\n## Import\n\nYou can import Kafka ACLs by using the Kafka cluster ID and attributes of `confluent_kafka_acl` resource in the format `\u003cKafka cluster ID\u003e/\u003cKafka ACL resource type\u003e#\u003cKafka ACL resource name\u003e#\u003cKafka ACL pattern type\u003e#\u003cKafka ACL principal\u003e#\u003cKafka ACL host\u003e#\u003cKafka ACL operation\u003e#\u003cKafka ACL permission\u003e`, for exampleOption #1Manage multiple Kafka clusters in the same Terraform workspace $ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\" $ export IMPORT_KAFKA_API_KEY=\"\u003ckafka_api_key\u003e\" $ export IMPORT_KAFKA_API_SECRET=\"\u003ckafka_api_secret\u003e\" $ export IMPORT_KAFKA_REST_ENDPOINT=\"\u003ckafka_rest_endpoint\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/kafkaAcl:KafkaAcl describe-cluster \"lkc-12345/CLUSTER#kafka-cluster#LITERAL#User:sa-xyz123#*#DESCRIBE#ALLOW\"\n```\n\n Option #2Manage a single Kafka cluster in the same Terraform workspace $ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/kafkaAcl:KafkaAcl describe-cluster \"lkc-12345/CLUSTER#kafka-cluster#LITERAL#User:sa-xyz123#*#DESCRIBE#ALLOW\"\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/KafkaAclCredentials:KafkaAclCredentials",
                    "description": "The Cluster API Credentials.\n",
                    "secret": true
                },
                "host": {
                    "type": "string",
                    "description": "The host for the ACL. Should be set to `*` for Confluent Cloud.\n"
                },
                "kafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/KafkaAclKafkaCluster:KafkaAclKafkaCluster"
                },
                "operation": {
                    "type": "string",
                    "description": "The operation type for the ACL. Accepted values are: `ALL`, `READ`, `WRITE`, `CREATE`, `DELETE`, `ALTER`, `DESCRIBE`, `CLUSTER_ACTION`, `DESCRIBE_CONFIGS`, `ALTER_CONFIGS`, and `IDEMPOTENT_WRITE`.  See [Authorization using ACLs](https://docs.confluent.io/platform/current/kafka/authorization.html#operations) to find mappings of `(resource_type, operation)` to one or more Kafka APIs or request types.\n"
                },
                "patternType": {
                    "type": "string",
                    "description": "The pattern type for the ACL. Accepted values are: `LITERAL` and `PREFIXED`.\n"
                },
                "permission": {
                    "type": "string",
                    "description": "The permission for the ACL. Accepted values are: `DENY` and `ALLOW`.\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The principal for the ACL.\n"
                },
                "resourceName": {
                    "type": "string",
                    "description": "The resource name for the ACL. Must be `kafka-cluster` if `resource_type` equals to `CLUSTER`.\n"
                },
                "resourceType": {
                    "type": "string",
                    "description": "The type of the resource. Accepted values are: `TOPIC`, `GROUP`, `CLUSTER`, `TRANSACTIONAL_ID`, `DELEGATION_TOKEN`. See [Authorization using ACLs](https://docs.confluent.io/platform/current/kafka/authorization.html#operations) to find definitions of resource types and mappings of `(resource_type, operation)` to one or more Kafka APIs or request types.\n"
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`.\n"
                }
            },
            "required": [
                "host",
                "operation",
                "patternType",
                "permission",
                "principal",
                "resourceName",
                "resourceType"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/KafkaAclCredentials:KafkaAclCredentials",
                    "description": "The Cluster API Credentials.\n",
                    "secret": true
                },
                "host": {
                    "type": "string",
                    "description": "The host for the ACL. Should be set to `*` for Confluent Cloud.\n",
                    "willReplaceOnChanges": true
                },
                "kafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/KafkaAclKafkaCluster:KafkaAclKafkaCluster",
                    "willReplaceOnChanges": true
                },
                "operation": {
                    "type": "string",
                    "description": "The operation type for the ACL. Accepted values are: `ALL`, `READ`, `WRITE`, `CREATE`, `DELETE`, `ALTER`, `DESCRIBE`, `CLUSTER_ACTION`, `DESCRIBE_CONFIGS`, `ALTER_CONFIGS`, and `IDEMPOTENT_WRITE`.  See [Authorization using ACLs](https://docs.confluent.io/platform/current/kafka/authorization.html#operations) to find mappings of `(resource_type, operation)` to one or more Kafka APIs or request types.\n",
                    "willReplaceOnChanges": true
                },
                "patternType": {
                    "type": "string",
                    "description": "The pattern type for the ACL. Accepted values are: `LITERAL` and `PREFIXED`.\n",
                    "willReplaceOnChanges": true
                },
                "permission": {
                    "type": "string",
                    "description": "The permission for the ACL. Accepted values are: `DENY` and `ALLOW`.\n",
                    "willReplaceOnChanges": true
                },
                "principal": {
                    "type": "string",
                    "description": "The principal for the ACL.\n",
                    "willReplaceOnChanges": true
                },
                "resourceName": {
                    "type": "string",
                    "description": "The resource name for the ACL. Must be `kafka-cluster` if `resource_type` equals to `CLUSTER`.\n",
                    "willReplaceOnChanges": true
                },
                "resourceType": {
                    "type": "string",
                    "description": "The type of the resource. Accepted values are: `TOPIC`, `GROUP`, `CLUSTER`, `TRANSACTIONAL_ID`, `DELEGATION_TOKEN`. See [Authorization using ACLs](https://docs.confluent.io/platform/current/kafka/authorization.html#operations) to find definitions of resource types and mappings of `(resource_type, operation)` to one or more Kafka APIs or request types.\n",
                    "willReplaceOnChanges": true
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "host",
                "operation",
                "patternType",
                "permission",
                "principal",
                "resourceName",
                "resourceType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KafkaAcl resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/KafkaAclCredentials:KafkaAclCredentials",
                        "description": "The Cluster API Credentials.\n",
                        "secret": true
                    },
                    "host": {
                        "type": "string",
                        "description": "The host for the ACL. Should be set to `*` for Confluent Cloud.\n",
                        "willReplaceOnChanges": true
                    },
                    "kafkaCluster": {
                        "$ref": "#/types/confluentcloud:index/KafkaAclKafkaCluster:KafkaAclKafkaCluster",
                        "willReplaceOnChanges": true
                    },
                    "operation": {
                        "type": "string",
                        "description": "The operation type for the ACL. Accepted values are: `ALL`, `READ`, `WRITE`, `CREATE`, `DELETE`, `ALTER`, `DESCRIBE`, `CLUSTER_ACTION`, `DESCRIBE_CONFIGS`, `ALTER_CONFIGS`, and `IDEMPOTENT_WRITE`.  See [Authorization using ACLs](https://docs.confluent.io/platform/current/kafka/authorization.html#operations) to find mappings of `(resource_type, operation)` to one or more Kafka APIs or request types.\n",
                        "willReplaceOnChanges": true
                    },
                    "patternType": {
                        "type": "string",
                        "description": "The pattern type for the ACL. Accepted values are: `LITERAL` and `PREFIXED`.\n",
                        "willReplaceOnChanges": true
                    },
                    "permission": {
                        "type": "string",
                        "description": "The permission for the ACL. Accepted values are: `DENY` and `ALLOW`.\n",
                        "willReplaceOnChanges": true
                    },
                    "principal": {
                        "type": "string",
                        "description": "The principal for the ACL.\n",
                        "willReplaceOnChanges": true
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "The resource name for the ACL. Must be `kafka-cluster` if `resource_type` equals to `CLUSTER`.\n",
                        "willReplaceOnChanges": true
                    },
                    "resourceType": {
                        "type": "string",
                        "description": "The type of the resource. Accepted values are: `TOPIC`, `GROUP`, `CLUSTER`, `TRANSACTIONAL_ID`, `DELEGATION_TOKEN`. See [Authorization using ACLs](https://docs.confluent.io/platform/current/kafka/authorization.html#operations) to find definitions of resource types and mappings of `(resource_type, operation)` to one or more Kafka APIs or request types.\n",
                        "willReplaceOnChanges": true
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "The REST endpoint of the Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/kafkaClientQuota:KafkaClientQuota": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst example = new confluentcloud.KafkaClientQuota(\"example\", {\n    displayName: \"test-quota\",\n    description: \"Test Quota\",\n    throughput: {\n        ingressByteRate: \"100\",\n        egressByteRate: \"200\",\n    },\n    principals: [\n        confluent_service_account.app_manager.id,\n        confluent_service_account.app_manager_2.id,\n    ],\n    kafkaCluster: {\n        id: confluent_kafka_cluster.dedicated.id,\n    },\n    environment: {\n        id: confluent_environment.development.id,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample = confluentcloud.KafkaClientQuota(\"example\",\n    display_name=\"test-quota\",\n    description=\"Test Quota\",\n    throughput=confluentcloud.KafkaClientQuotaThroughputArgs(\n        ingress_byte_rate=\"100\",\n        egress_byte_rate=\"200\",\n    ),\n    principals=[\n        confluent_service_account[\"app_manager\"][\"id\"],\n        confluent_service_account[\"app_manager_2\"][\"id\"],\n    ],\n    kafka_cluster=confluentcloud.KafkaClientQuotaKafkaClusterArgs(\n        id=confluent_kafka_cluster[\"dedicated\"][\"id\"],\n    ),\n    environment=confluentcloud.KafkaClientQuotaEnvironmentArgs(\n        id=confluent_environment[\"development\"][\"id\"],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new ConfluentCloud.KafkaClientQuota(\"example\", new()\n    {\n        DisplayName = \"test-quota\",\n        Description = \"Test Quota\",\n        Throughput = new ConfluentCloud.Inputs.KafkaClientQuotaThroughputArgs\n        {\n            IngressByteRate = \"100\",\n            EgressByteRate = \"200\",\n        },\n        Principals = new[]\n        {\n            confluent_service_account.App_manager.Id,\n            confluent_service_account.App_manager_2.Id,\n        },\n        KafkaCluster = new ConfluentCloud.Inputs.KafkaClientQuotaKafkaClusterArgs\n        {\n            Id = confluent_kafka_cluster.Dedicated.Id,\n        },\n        Environment = new ConfluentCloud.Inputs.KafkaClientQuotaEnvironmentArgs\n        {\n            Id = confluent_environment.Development.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := confluentcloud.NewKafkaClientQuota(ctx, \"example\", \u0026confluentcloud.KafkaClientQuotaArgs{\n\t\t\tDisplayName: pulumi.String(\"test-quota\"),\n\t\t\tDescription: pulumi.String(\"Test Quota\"),\n\t\t\tThroughput: \u0026confluentcloud.KafkaClientQuotaThroughputArgs{\n\t\t\t\tIngressByteRate: pulumi.String(\"100\"),\n\t\t\t\tEgressByteRate:  pulumi.String(\"200\"),\n\t\t\t},\n\t\t\tPrincipals: pulumi.StringArray{\n\t\t\t\tconfluent_service_account.App_manager.Id,\n\t\t\t\tconfluent_service_account.App_manager_2.Id,\n\t\t\t},\n\t\t\tKafkaCluster: \u0026confluentcloud.KafkaClientQuotaKafkaClusterArgs{\n\t\t\t\tId: pulumi.Any(confluent_kafka_cluster.Dedicated.Id),\n\t\t\t},\n\t\t\tEnvironment: \u0026confluentcloud.KafkaClientQuotaEnvironmentArgs{\n\t\t\t\tId: pulumi.Any(confluent_environment.Development.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.KafkaClientQuota;\nimport com.pulumi.confluentcloud.KafkaClientQuotaArgs;\nimport com.pulumi.confluentcloud.inputs.KafkaClientQuotaThroughputArgs;\nimport com.pulumi.confluentcloud.inputs.KafkaClientQuotaKafkaClusterArgs;\nimport com.pulumi.confluentcloud.inputs.KafkaClientQuotaEnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new KafkaClientQuota(\"example\", KafkaClientQuotaArgs.builder()        \n            .displayName(\"test-quota\")\n            .description(\"Test Quota\")\n            .throughput(KafkaClientQuotaThroughputArgs.builder()\n                .ingressByteRate(\"100\")\n                .egressByteRate(\"200\")\n                .build())\n            .principals(            \n                confluent_service_account.app_manager().id(),\n                confluent_service_account.app_manager_2().id())\n            .kafkaCluster(KafkaClientQuotaKafkaClusterArgs.builder()\n                .id(confluent_kafka_cluster.dedicated().id())\n                .build())\n            .environment(KafkaClientQuotaEnvironmentArgs.builder()\n                .id(confluent_environment.development().id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: confluentcloud:KafkaClientQuota\n    properties:\n      displayName: test-quota\n      description: Test Quota\n      throughput:\n        ingressByteRate: '100'\n        egressByteRate: '200'\n      principals:\n        - ${confluent_service_account.app_manager.id}\n        - ${confluent_service_account.app_manager_2.id}\n      kafkaCluster:\n        id: ${confluent_kafka_cluster.dedicated.id}\n      environment:\n        id: ${confluent_environment.development.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nYou can import a Kafka Client Quota by using Kafka Client Quota ID. The following example shows how to import a Kafka Client Quota ID$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/kafkaClientQuota:KafkaClientQuota example cq-abc123\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Kafka Client Quota.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the Kafka Client Quota.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/KafkaClientQuotaEnvironment:KafkaClientQuotaEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n"
                },
                "kafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/KafkaClientQuotaKafkaCluster:KafkaClientQuotaKafkaCluster"
                },
                "principals": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of principals (i.e., service accounts or identity pools) to apply the Kafka Client Quota to. Use the special name, \"\u003cdefault\u003e\", to represent the default quota for all users and service accounts.\n"
                },
                "throughput": {
                    "$ref": "#/types/confluentcloud:index/KafkaClientQuotaThroughput:KafkaClientQuotaThroughput",
                    "description": "Block for representing a Kafka Quota.\n"
                }
            },
            "required": [
                "displayName",
                "environment",
                "kafkaCluster",
                "principals",
                "throughput"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Kafka Client Quota.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the Kafka Client Quota.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/KafkaClientQuotaEnvironment:KafkaClientQuotaEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                    "willReplaceOnChanges": true
                },
                "kafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/KafkaClientQuotaKafkaCluster:KafkaClientQuotaKafkaCluster",
                    "willReplaceOnChanges": true
                },
                "principals": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of principals (i.e., service accounts or identity pools) to apply the Kafka Client Quota to. Use the special name, \"\u003cdefault\u003e\", to represent the default quota for all users and service accounts.\n"
                },
                "throughput": {
                    "$ref": "#/types/confluentcloud:index/KafkaClientQuotaThroughput:KafkaClientQuotaThroughput",
                    "description": "Block for representing a Kafka Quota.\n"
                }
            },
            "requiredInputs": [
                "displayName",
                "environment",
                "kafkaCluster",
                "principals",
                "throughput"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KafkaClientQuota resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the Kafka Client Quota.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name of the Kafka Client Quota.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/KafkaClientQuotaEnvironment:KafkaClientQuotaEnvironment",
                        "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                        "willReplaceOnChanges": true
                    },
                    "kafkaCluster": {
                        "$ref": "#/types/confluentcloud:index/KafkaClientQuotaKafkaCluster:KafkaClientQuotaKafkaCluster",
                        "willReplaceOnChanges": true
                    },
                    "principals": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of principals (i.e., service accounts or identity pools) to apply the Kafka Client Quota to. Use the special name, \"\u003cdefault\u003e\", to represent the default quota for all users and service accounts.\n"
                    },
                    "throughput": {
                        "$ref": "#/types/confluentcloud:index/KafkaClientQuotaThroughput:KafkaClientQuotaThroughput",
                        "description": "Block for representing a Kafka Quota.\n"
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/kafkaCluster:KafkaCluster": {
            "description": "\n\n\n## Import\n\nYou can import a Kafka cluster by using Environment ID and Kafka cluster ID, in the format `\u003cEnvironment ID\u003e/\u003cKafka cluster ID\u003e`, e.g. $ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/kafkaCluster:KafkaCluster my_kafka env-abc123/lkc-abc123\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "(Required String) An API Version of the schema version of the Kafka cluster, for example, `cmk/v2`.\n"
                },
                "availability": {
                    "type": "string",
                    "description": "The availability zone configuration of the Kafka cluster. Accepted values are: `SINGLE_ZONE` and `MULTI_ZONE`.\n"
                },
                "basic": {
                    "$ref": "#/types/confluentcloud:index/KafkaClusterBasic:KafkaClusterBasic",
                    "description": "The configuration of the Basic Kafka cluster.\n"
                },
                "bootstrapEndpoint": {
                    "type": "string",
                    "description": "(Required String) The bootstrap endpoint used by Kafka clients to connect to the Kafka cluster. (e.g., `SASL_SSL://pkc-00000.us-central1.gcp.confluent.cloud:9092`).\n"
                },
                "byokKey": {
                    "$ref": "#/types/confluentcloud:index/KafkaClusterByokKey:KafkaClusterByokKey"
                },
                "cloud": {
                    "type": "string",
                    "description": "The cloud service provider that runs the Kafka cluster. Accepted values are: `AWS`, `AZURE`, and `GCP`.\n"
                },
                "dedicated": {
                    "$ref": "#/types/confluentcloud:index/KafkaClusterDedicated:KafkaClusterDedicated",
                    "description": "(Optional Configuration Block) The configuration of the Dedicated Kafka cluster. It supports the following:\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the Kafka cluster.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/KafkaClusterEnvironment:KafkaClusterEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "(Required String) A kind of the Kafka cluster, for example, `Cluster`.\n"
                },
                "network": {
                    "$ref": "#/types/confluentcloud:index/KafkaClusterNetwork:KafkaClusterNetwork",
                    "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n"
                },
                "rbacCrn": {
                    "type": "string",
                    "description": "(Required String) The Confluent Resource Name of the Kafka cluster, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/cloud-cluster=lkc-abc123`.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The cloud service provider region where the Kafka cluster is running, for example, `us-west-2`. See [Cloud Providers and Regions](https://docs.confluent.io/cloud/current/clusters/regions.html#cloud-providers-and-regions) for a full list of options for AWS, Azure, and GCP.\n"
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "(Required String) The REST endpoint of the Kafka cluster (e.g., `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n"
                },
                "standard": {
                    "$ref": "#/types/confluentcloud:index/KafkaClusterStandard:KafkaClusterStandard",
                    "description": "The configuration of the Standard Kafka cluster.\n"
                }
            },
            "required": [
                "apiVersion",
                "availability",
                "bootstrapEndpoint",
                "byokKey",
                "cloud",
                "displayName",
                "environment",
                "kind",
                "network",
                "rbacCrn",
                "region",
                "restEndpoint"
            ],
            "inputProperties": {
                "availability": {
                    "type": "string",
                    "description": "The availability zone configuration of the Kafka cluster. Accepted values are: `SINGLE_ZONE` and `MULTI_ZONE`.\n",
                    "willReplaceOnChanges": true
                },
                "basic": {
                    "$ref": "#/types/confluentcloud:index/KafkaClusterBasic:KafkaClusterBasic",
                    "description": "The configuration of the Basic Kafka cluster.\n"
                },
                "byokKey": {
                    "$ref": "#/types/confluentcloud:index/KafkaClusterByokKey:KafkaClusterByokKey"
                },
                "cloud": {
                    "type": "string",
                    "description": "The cloud service provider that runs the Kafka cluster. Accepted values are: `AWS`, `AZURE`, and `GCP`.\n",
                    "willReplaceOnChanges": true
                },
                "dedicated": {
                    "$ref": "#/types/confluentcloud:index/KafkaClusterDedicated:KafkaClusterDedicated",
                    "description": "(Optional Configuration Block) The configuration of the Dedicated Kafka cluster. It supports the following:\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the Kafka cluster.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/KafkaClusterEnvironment:KafkaClusterEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                    "willReplaceOnChanges": true
                },
                "network": {
                    "$ref": "#/types/confluentcloud:index/KafkaClusterNetwork:KafkaClusterNetwork",
                    "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The cloud service provider region where the Kafka cluster is running, for example, `us-west-2`. See [Cloud Providers and Regions](https://docs.confluent.io/cloud/current/clusters/regions.html#cloud-providers-and-regions) for a full list of options for AWS, Azure, and GCP.\n",
                    "willReplaceOnChanges": true
                },
                "standard": {
                    "$ref": "#/types/confluentcloud:index/KafkaClusterStandard:KafkaClusterStandard",
                    "description": "The configuration of the Standard Kafka cluster.\n"
                }
            },
            "requiredInputs": [
                "availability",
                "cloud",
                "environment",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KafkaCluster resources.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "(Required String) An API Version of the schema version of the Kafka cluster, for example, `cmk/v2`.\n"
                    },
                    "availability": {
                        "type": "string",
                        "description": "The availability zone configuration of the Kafka cluster. Accepted values are: `SINGLE_ZONE` and `MULTI_ZONE`.\n",
                        "willReplaceOnChanges": true
                    },
                    "basic": {
                        "$ref": "#/types/confluentcloud:index/KafkaClusterBasic:KafkaClusterBasic",
                        "description": "The configuration of the Basic Kafka cluster.\n"
                    },
                    "bootstrapEndpoint": {
                        "type": "string",
                        "description": "(Required String) The bootstrap endpoint used by Kafka clients to connect to the Kafka cluster. (e.g., `SASL_SSL://pkc-00000.us-central1.gcp.confluent.cloud:9092`).\n"
                    },
                    "byokKey": {
                        "$ref": "#/types/confluentcloud:index/KafkaClusterByokKey:KafkaClusterByokKey"
                    },
                    "cloud": {
                        "type": "string",
                        "description": "The cloud service provider that runs the Kafka cluster. Accepted values are: `AWS`, `AZURE`, and `GCP`.\n",
                        "willReplaceOnChanges": true
                    },
                    "dedicated": {
                        "$ref": "#/types/confluentcloud:index/KafkaClusterDedicated:KafkaClusterDedicated",
                        "description": "(Optional Configuration Block) The configuration of the Dedicated Kafka cluster. It supports the following:\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name of the Kafka cluster.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/KafkaClusterEnvironment:KafkaClusterEnvironment",
                        "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                        "willReplaceOnChanges": true
                    },
                    "kind": {
                        "type": "string",
                        "description": "(Required String) A kind of the Kafka cluster, for example, `Cluster`.\n"
                    },
                    "network": {
                        "$ref": "#/types/confluentcloud:index/KafkaClusterNetwork:KafkaClusterNetwork",
                        "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n"
                    },
                    "rbacCrn": {
                        "type": "string",
                        "description": "(Required String) The Confluent Resource Name of the Kafka cluster, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/cloud-cluster=lkc-abc123`.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The cloud service provider region where the Kafka cluster is running, for example, `us-west-2`. See [Cloud Providers and Regions](https://docs.confluent.io/cloud/current/clusters/regions.html#cloud-providers-and-regions) for a full list of options for AWS, Azure, and GCP.\n",
                        "willReplaceOnChanges": true
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "(Required String) The REST endpoint of the Kafka cluster (e.g., `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n"
                    },
                    "standard": {
                        "$ref": "#/types/confluentcloud:index/KafkaClusterStandard:KafkaClusterStandard",
                        "description": "The configuration of the Standard Kafka cluster.\n"
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/kafkaClusterConfig:KafkaClusterConfig": {
            "description": "\n\n\n## Import\n\nYou can import a Kafka cluster config by using the Kafka cluster ID, for exampleOption #1Manage multiple Kafka clusters in the same Terraform workspace $ export IMPORT_KAFKA_API_KEY=\"\u003ckafka_api_key\u003e\" $ export IMPORT_KAFKA_API_SECRET=\"\u003ckafka_api_secret\u003e\" $ export IMPORT_KAFKA_REST_ENDPOINT=\"\u003ckafka_rest_endpoint\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/kafkaClusterConfig:KafkaClusterConfig test lkc-abc123\n```\n\n Option #2Manage a single Kafka cluster in the same Terraform workspace\n\n```sh\n $ pulumi import confluentcloud:index/kafkaClusterConfig:KafkaClusterConfig test lkc-abc123\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The custom cluster settings to set:\n"
                },
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/KafkaClusterConfigCredentials:KafkaClusterConfigCredentials",
                    "description": "The Cluster API Credentials.\n",
                    "secret": true
                },
                "kafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/KafkaClusterConfigKafkaCluster:KafkaClusterConfigKafkaCluster"
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the Dedicated Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n"
                }
            },
            "required": [
                "config"
            ],
            "inputProperties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The custom cluster settings to set:\n"
                },
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/KafkaClusterConfigCredentials:KafkaClusterConfigCredentials",
                    "description": "The Cluster API Credentials.\n",
                    "secret": true
                },
                "kafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/KafkaClusterConfigKafkaCluster:KafkaClusterConfigKafkaCluster",
                    "willReplaceOnChanges": true
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the Dedicated Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "config"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KafkaClusterConfig resources.\n",
                "properties": {
                    "config": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The custom cluster settings to set:\n"
                    },
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/KafkaClusterConfigCredentials:KafkaClusterConfigCredentials",
                        "description": "The Cluster API Credentials.\n",
                        "secret": true
                    },
                    "kafkaCluster": {
                        "$ref": "#/types/confluentcloud:index/KafkaClusterConfigKafkaCluster:KafkaClusterConfigKafkaCluster",
                        "willReplaceOnChanges": true
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "The REST endpoint of the Dedicated Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/kafkaMirrorTopic:KafkaMirrorTopic": {
            "description": "\n\n\n## Import\n\nYou can import a Kafka mirror topic by using the Kafka cluster ID, cluster link name, and Kafka topic name in the format `\u003cKafka cluster ID\u003e/\u003cCluster link name\u003e/\u003cKafka topic name\u003e`, for example$ export IMPORT_KAFKA_API_KEY=\"\u003ckafka_api_key\u003e\" $ export IMPORT_KAFKA_API_SECRET=\"\u003ckafka_api_secret\u003e\" $ export IMPORT_KAFKA_REST_ENDPOINT=\"\u003ckafka_rest_endpoint\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/kafkaMirrorTopic:KafkaMirrorTopic my_mirror_topic lkc-abc123/my-cluster-link/orders-123\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "clusterLink": {
                    "$ref": "#/types/confluentcloud:index/KafkaMirrorTopicClusterLink:KafkaMirrorTopicClusterLink"
                },
                "kafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/KafkaMirrorTopicKafkaCluster:KafkaMirrorTopicKafkaCluster"
                },
                "mirrorTopicName": {
                    "type": "string",
                    "description": "The name of the mirror topic. Only required when there is a prefix configured on the cluster link. For example, when `\u003cprefix\u003e` is configured for the cluster link, the mirror topic name has to be of the format `\u003cprefix\u003e\u003csource_topic_name\u003e`.\n"
                },
                "sourceKafkaTopic": {
                    "$ref": "#/types/confluentcloud:index/KafkaMirrorTopicSourceKafkaTopic:KafkaMirrorTopicSourceKafkaTopic"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the mirror topic. The supported values are `\"ACTIVE\"`, `\"PAUSED\"`, `\"PROMOTED\"`, `\"FAILED_OVER\"`. Pausing (`\"ACTIVE\" \u003e \"PAUSED\"`), resuming (`\"PAUSED\" \u003e \"ACTIVE\"`), promoting, and failing over a mirror topic is supported via an update operation. Defaults to `\"ACTIVE\"`.\n"
                }
            },
            "required": [
                "clusterLink",
                "kafkaCluster",
                "mirrorTopicName",
                "sourceKafkaTopic",
                "status"
            ],
            "inputProperties": {
                "clusterLink": {
                    "$ref": "#/types/confluentcloud:index/KafkaMirrorTopicClusterLink:KafkaMirrorTopicClusterLink",
                    "willReplaceOnChanges": true
                },
                "kafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/KafkaMirrorTopicKafkaCluster:KafkaMirrorTopicKafkaCluster"
                },
                "mirrorTopicName": {
                    "type": "string",
                    "description": "The name of the mirror topic. Only required when there is a prefix configured on the cluster link. For example, when `\u003cprefix\u003e` is configured for the cluster link, the mirror topic name has to be of the format `\u003cprefix\u003e\u003csource_topic_name\u003e`.\n",
                    "willReplaceOnChanges": true
                },
                "sourceKafkaTopic": {
                    "$ref": "#/types/confluentcloud:index/KafkaMirrorTopicSourceKafkaTopic:KafkaMirrorTopicSourceKafkaTopic",
                    "willReplaceOnChanges": true
                },
                "status": {
                    "type": "string",
                    "description": "The status of the mirror topic. The supported values are `\"ACTIVE\"`, `\"PAUSED\"`, `\"PROMOTED\"`, `\"FAILED_OVER\"`. Pausing (`\"ACTIVE\" \u003e \"PAUSED\"`), resuming (`\"PAUSED\" \u003e \"ACTIVE\"`), promoting, and failing over a mirror topic is supported via an update operation. Defaults to `\"ACTIVE\"`.\n"
                }
            },
            "requiredInputs": [
                "clusterLink",
                "kafkaCluster",
                "sourceKafkaTopic"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KafkaMirrorTopic resources.\n",
                "properties": {
                    "clusterLink": {
                        "$ref": "#/types/confluentcloud:index/KafkaMirrorTopicClusterLink:KafkaMirrorTopicClusterLink",
                        "willReplaceOnChanges": true
                    },
                    "kafkaCluster": {
                        "$ref": "#/types/confluentcloud:index/KafkaMirrorTopicKafkaCluster:KafkaMirrorTopicKafkaCluster"
                    },
                    "mirrorTopicName": {
                        "type": "string",
                        "description": "The name of the mirror topic. Only required when there is a prefix configured on the cluster link. For example, when `\u003cprefix\u003e` is configured for the cluster link, the mirror topic name has to be of the format `\u003cprefix\u003e\u003csource_topic_name\u003e`.\n",
                        "willReplaceOnChanges": true
                    },
                    "sourceKafkaTopic": {
                        "$ref": "#/types/confluentcloud:index/KafkaMirrorTopicSourceKafkaTopic:KafkaMirrorTopicSourceKafkaTopic",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the mirror topic. The supported values are `\"ACTIVE\"`, `\"PAUSED\"`, `\"PROMOTED\"`, `\"FAILED_OVER\"`. Pausing (`\"ACTIVE\" \u003e \"PAUSED\"`), resuming (`\"PAUSED\" \u003e \"ACTIVE\"`), promoting, and failing over a mirror topic is supported via an update operation. Defaults to `\"ACTIVE\"`.\n"
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/kafkaTopic:KafkaTopic": {
            "description": "\n\n\n## Import\n\nYou can import a Kafka topic by using the Kafka cluster ID and Kafka topic name in the format `\u003cKafka cluster ID\u003e/\u003cKafka topic name\u003e`, for exampleOption #1Manage multiple Kafka clusters in the same Terraform workspace $ export IMPORT_KAFKA_API_KEY=\"\u003ckafka_api_key\u003e\" $ export IMPORT_KAFKA_API_SECRET=\"\u003ckafka_api_secret\u003e\" $ export IMPORT_KAFKA_REST_ENDPOINT=\"\u003ckafka_rest_endpoint\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/kafkaTopic:KafkaTopic my_topic lkc-abc123/orders-123\n```\n\n Option #2Manage a single Kafka cluster in the same Terraform workspace\n\n```sh\n $ pulumi import confluentcloud:index/kafkaTopic:KafkaTopic my_topic lkc-abc123/orders-123\n```\n\n resource \"confluent_kafka_topic\" \"orders\" {\n\n kafka_cluster {\n\n\n\n id = confluent_kafka_cluster.basic-cluster.id\n\n }\n\n topic_name\n\n\n\n\n\n\n\n = \"orders\"\n\n partitions_count\n\n = 4\n\n rest_endpoint\n\n\n\n\n\n= confluent_kafka_cluster.basic-cluster.rest_endpoint\n\n # https://docs.confluent.io/cloud/current/clusters/broker-config.html#custom-topic-settings-for-all-cluster-types-supported-by-kafka-rest-api-and-terraform-provider\n\n config = {\n\n\n\n \"cleanup.policy\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n= \"delete\"\n\n\n\n \"delete.retention.ms\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n = \"86400000\"\n\n\n\n \"max.compaction.lag.ms\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n = \"9223372036854775807\"\n\n\n\n \"max.message.bytes\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n = \"2097164\"\n\n\n\n \"message.timestamp.difference.max.ms\" = \"9223372036854775807\"\n\n\n\n \"message.timestamp.type\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n= \"CreateTime\"\n\n\n\n \"min.compaction.lag.ms\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n = \"0\"\n\n\n\n \"min.insync.replicas\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n = \"2\"\n\n\n\n \"retention.bytes\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n = \"-1\"\n\n\n\n \"retention.ms\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n= \"604800000\"\n\n\n\n \"segment.bytes\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n = \"104857600\"\n\n\n\n \"segment.ms\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n= \"604800000\"\n\n }\n\n credentials {\n\n\n\n key\n\n\n\n= confluent_api_key.app-manager-kafka-api-key.id\n\n\n\n secret = confluent_api_key.app-manager-kafka-api-key.secret\n\n } } !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The custom topic settings to set:\n"
                },
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/KafkaTopicCredentials:KafkaTopicCredentials",
                    "description": "The Cluster API Credentials.\n",
                    "secret": true
                },
                "httpEndpoint": {
                    "type": "string",
                    "description": "The HTTP endpoint of the Kafka cluster (e.g., `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                    "deprecationMessage": "This parameter has been deprecated in favour of Rest Endpoint"
                },
                "kafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/KafkaTopicKafkaCluster:KafkaTopicKafkaCluster"
                },
                "partitionsCount": {
                    "type": "integer",
                    "description": "The number of partitions to create in the topic. Defaults to `6`.\n"
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n"
                },
                "topicName": {
                    "type": "string",
                    "description": "The name of the topic, for example, `orders-1`. The topic name can be up to 249 characters in length, and can include the following characters: a-z, A-Z, 0-9, . (dot), _ (underscore), and - (dash). As a best practice, we recommend against using any personally identifiable information (PII) when naming your topic.\n"
                }
            },
            "required": [
                "config",
                "httpEndpoint",
                "topicName"
            ],
            "inputProperties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The custom topic settings to set:\n"
                },
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/KafkaTopicCredentials:KafkaTopicCredentials",
                    "description": "The Cluster API Credentials.\n",
                    "secret": true
                },
                "httpEndpoint": {
                    "type": "string",
                    "description": "The HTTP endpoint of the Kafka cluster (e.g., `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                    "deprecationMessage": "This parameter has been deprecated in favour of Rest Endpoint"
                },
                "kafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/KafkaTopicKafkaCluster:KafkaTopicKafkaCluster",
                    "willReplaceOnChanges": true
                },
                "partitionsCount": {
                    "type": "integer",
                    "description": "The number of partitions to create in the topic. Defaults to `6`.\n"
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                    "willReplaceOnChanges": true
                },
                "topicName": {
                    "type": "string",
                    "description": "The name of the topic, for example, `orders-1`. The topic name can be up to 249 characters in length, and can include the following characters: a-z, A-Z, 0-9, . (dot), _ (underscore), and - (dash). As a best practice, we recommend against using any personally identifiable information (PII) when naming your topic.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "topicName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KafkaTopic resources.\n",
                "properties": {
                    "config": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The custom topic settings to set:\n"
                    },
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/KafkaTopicCredentials:KafkaTopicCredentials",
                        "description": "The Cluster API Credentials.\n",
                        "secret": true
                    },
                    "httpEndpoint": {
                        "type": "string",
                        "description": "The HTTP endpoint of the Kafka cluster (e.g., `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                        "deprecationMessage": "This parameter has been deprecated in favour of Rest Endpoint"
                    },
                    "kafkaCluster": {
                        "$ref": "#/types/confluentcloud:index/KafkaTopicKafkaCluster:KafkaTopicKafkaCluster",
                        "willReplaceOnChanges": true
                    },
                    "partitionsCount": {
                        "type": "integer",
                        "description": "The number of partitions to create in the topic. Defaults to `6`.\n"
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "The REST endpoint of the Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                        "willReplaceOnChanges": true
                    },
                    "topicName": {
                        "type": "string",
                        "description": "The name of the topic, for example, `orders-1`. The topic name can be up to 249 characters in length, and can include the following characters: a-z, A-Z, 0-9, . (dot), _ (underscore), and - (dash). As a best practice, we recommend against using any personally identifiable information (PII) when naming your topic.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/ksqlCluster:KsqlCluster": {
            "description": "\n\n\n## Import\n\nYou can import a ksqlDB cluster by using Environment ID and ksqlDB cluster ID, in the format `\u003cEnvironment ID\u003e/\u003cksqlDB cluster ID\u003e`, for example$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/ksqlCluster:KsqlCluster example env-abc123/lksqlc-abc123\n```\n\n !\u003e **Warning:**\n\nDo not forget to delete the terminal's command history afterward for security purposes. ",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "(Required String) An API Version of the schema version of the ksqlDB cluster, for example, `ksqldbcm/v2`.\n"
                },
                "credentialIdentity": {
                    "$ref": "#/types/confluentcloud:index/KsqlClusterCredentialIdentity:KsqlClusterCredentialIdentity"
                },
                "csu": {
                    "type": "integer",
                    "description": "The number of Confluent Streaming Units (CSUs) for the ksqlDB cluster.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the ksqlDB cluster.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/KsqlClusterEnvironment:KsqlClusterEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n"
                },
                "kafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/KsqlClusterKafkaCluster:KsqlClusterKafkaCluster"
                },
                "kind": {
                    "type": "string",
                    "description": "(Required String) A kind of the ksqlDB cluster, for example, `Cluster`.\n"
                },
                "resourceName": {
                    "type": "string",
                    "description": "(Required String) The Confluent Resource Name of the ksqlDB cluster.\n"
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "(Required String) The API endpoint of the ksqlDB cluster, for example, `https://pksqlc-00000.us-central1.gcp.glb.confluent.cloud`.\n"
                },
                "storage": {
                    "type": "integer",
                    "description": "(Required Integer) The amount of storage (in GB) provisioned to the ksqlDB cluster.\n"
                },
                "topicPrefix": {
                    "type": "string",
                    "description": "(Required String) Topic name prefix used by this ksqlDB cluster. Used to assign ACLs for this ksqlDB cluster to use, for example, `pksqlc-00000`.\n"
                },
                "useDetailedProcessingLog": {
                    "type": "boolean",
                    "description": "Controls whether the row data should be included in the processing log topic. Set it to `false` if you don't want to emit sensitive information to the processing log. Defaults to `true`.\n"
                }
            },
            "required": [
                "apiVersion",
                "credentialIdentity",
                "csu",
                "displayName",
                "environment",
                "kafkaCluster",
                "kind",
                "resourceName",
                "restEndpoint",
                "storage",
                "topicPrefix"
            ],
            "inputProperties": {
                "credentialIdentity": {
                    "$ref": "#/types/confluentcloud:index/KsqlClusterCredentialIdentity:KsqlClusterCredentialIdentity",
                    "willReplaceOnChanges": true
                },
                "csu": {
                    "type": "integer",
                    "description": "The number of Confluent Streaming Units (CSUs) for the ksqlDB cluster.\n",
                    "willReplaceOnChanges": true
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the ksqlDB cluster.\n",
                    "willReplaceOnChanges": true
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/KsqlClusterEnvironment:KsqlClusterEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                    "willReplaceOnChanges": true
                },
                "kafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/KsqlClusterKafkaCluster:KsqlClusterKafkaCluster",
                    "willReplaceOnChanges": true
                },
                "useDetailedProcessingLog": {
                    "type": "boolean",
                    "description": "Controls whether the row data should be included in the processing log topic. Set it to `false` if you don't want to emit sensitive information to the processing log. Defaults to `true`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "credentialIdentity",
                "csu",
                "displayName",
                "environment",
                "kafkaCluster"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KsqlCluster resources.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "(Required String) An API Version of the schema version of the ksqlDB cluster, for example, `ksqldbcm/v2`.\n"
                    },
                    "credentialIdentity": {
                        "$ref": "#/types/confluentcloud:index/KsqlClusterCredentialIdentity:KsqlClusterCredentialIdentity",
                        "willReplaceOnChanges": true
                    },
                    "csu": {
                        "type": "integer",
                        "description": "The number of Confluent Streaming Units (CSUs) for the ksqlDB cluster.\n",
                        "willReplaceOnChanges": true
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name of the ksqlDB cluster.\n",
                        "willReplaceOnChanges": true
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/KsqlClusterEnvironment:KsqlClusterEnvironment",
                        "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                        "willReplaceOnChanges": true
                    },
                    "kafkaCluster": {
                        "$ref": "#/types/confluentcloud:index/KsqlClusterKafkaCluster:KsqlClusterKafkaCluster",
                        "willReplaceOnChanges": true
                    },
                    "kind": {
                        "type": "string",
                        "description": "(Required String) A kind of the ksqlDB cluster, for example, `Cluster`.\n"
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "(Required String) The Confluent Resource Name of the ksqlDB cluster.\n"
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "(Required String) The API endpoint of the ksqlDB cluster, for example, `https://pksqlc-00000.us-central1.gcp.glb.confluent.cloud`.\n"
                    },
                    "storage": {
                        "type": "integer",
                        "description": "(Required Integer) The amount of storage (in GB) provisioned to the ksqlDB cluster.\n"
                    },
                    "topicPrefix": {
                        "type": "string",
                        "description": "(Required String) Topic name prefix used by this ksqlDB cluster. Used to assign ACLs for this ksqlDB cluster to use, for example, `pksqlc-00000`.\n"
                    },
                    "useDetailedProcessingLog": {
                        "type": "boolean",
                        "description": "Controls whether the row data should be included in the processing log topic. Set it to `false` if you don't want to emit sensitive information to the processing log. Defaults to `true`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/network:Network": {
            "description": "\n\n\n## Import\n\nYou can import a Network by using Environment ID and Network ID, in the format `\u003cEnvironment ID\u003e/\u003cNetwork ID\u003e`. The following example shows how to import a Network$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/network:Network my_network env-abc123/n-abc123\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "aws": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/confluentcloud:index/NetworkAw:NetworkAw"
                    },
                    "description": "(Optional Configuration Block) The AWS-specific network details if available. It supports the following:\n"
                },
                "azures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/confluentcloud:index/NetworkAzure:NetworkAzure"
                    },
                    "description": "(Optional Configuration Block) The Azure-specific network details if available. It supports the following:\n"
                },
                "cidr": {
                    "type": "string",
                    "description": "The IPv4 CIDR block to be used for the network. Must be `/27`. Required for VPC peering and AWS TransitGateway.\n"
                },
                "cloud": {
                    "type": "string",
                    "description": "The cloud service provider in which the network exists. Accepted values are: `AWS`, `AZURE`, and `GCP`.\n"
                },
                "connectionTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of connection types that may be used with the network. Accepted connection types are: `PEERING`, `TRANSITGATEWAY`, and `PRIVATELINK`.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the Network.\n"
                },
                "dnsConfig": {
                    "$ref": "#/types/confluentcloud:index/NetworkDnsConfig:NetworkDnsConfig",
                    "description": "Network DNS config. It applies only to the PRIVATELINK network connection type.\n"
                },
                "dnsDomain": {
                    "type": "string",
                    "description": "(Optional String) The root DNS domain for the network, for example, `pr123a.us-east-2.aws.confluent.cloud` if applicable. Present on Networks that support Private Link.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/NetworkEnvironment:NetworkEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n"
                },
                "gcps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/confluentcloud:index/NetworkGcp:NetworkGcp"
                    },
                    "description": "(Optional Configuration Block) The GCP-specific network details if available. It supports the following:\n"
                },
                "region": {
                    "type": "string",
                    "description": "The cloud provider region where the network exists.\n"
                },
                "reservedCidr": {
                    "type": "string",
                    "description": "The reserved IPv4 CIDR block to be used for the network. Must be `/24`. If not specified, Confluent Cloud Network uses `172.20.255.0/24`.\n"
                },
                "resourceName": {
                    "type": "string",
                    "description": "(Required String) The Confluent Resource Name of the Network.\n"
                },
                "zonalSubdomains": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Optional Map) The DNS subdomain for each zone. Present on networks that support Private Link. Keys are zone names, for example, `use2-az1` and values are DNS domains, for example, `use2-az1.pr123a.us-east-2.aws.confluent.cloud`.\n"
                },
                "zoneInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/confluentcloud:index/NetworkZoneInfo:NetworkZoneInfo"
                    },
                    "description": "Each item represents information related to a single zone.\n"
                },
                "zones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The 3 availability zones for this network. They can optionally be specified for AWS networks\nused with PrivateLink, for GCP networks used with Private Service Connect, and for AWS and GCP\nnetworks used with Peering. Otherwise, they are automatically chosen by Confluent Cloud.\nOn AWS, zones are AWS [AZ IDs](https://docs.aws.amazon.com/ram/latest/userguide/working-with-az-ids.html), for example, `use1-az3`.\nOn GCP, zones are GCP [zones](https://cloud.google.com/compute/docs/regions-zones), for example, `us-central1-c`.\nOn Azure, zones are Confluent-chosen names (for example, `1`, `2`, `3`) since Azure does not have universal zone identifiers.\n"
                }
            },
            "required": [
                "aws",
                "azures",
                "cidr",
                "cloud",
                "connectionTypes",
                "displayName",
                "dnsConfig",
                "dnsDomain",
                "environment",
                "gcps",
                "region",
                "reservedCidr",
                "resourceName",
                "zonalSubdomains",
                "zoneInfos",
                "zones"
            ],
            "inputProperties": {
                "aws": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/confluentcloud:index/NetworkAw:NetworkAw"
                    },
                    "description": "(Optional Configuration Block) The AWS-specific network details if available. It supports the following:\n"
                },
                "azures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/confluentcloud:index/NetworkAzure:NetworkAzure"
                    },
                    "description": "(Optional Configuration Block) The Azure-specific network details if available. It supports the following:\n"
                },
                "cidr": {
                    "type": "string",
                    "description": "The IPv4 CIDR block to be used for the network. Must be `/27`. Required for VPC peering and AWS TransitGateway.\n",
                    "willReplaceOnChanges": true
                },
                "cloud": {
                    "type": "string",
                    "description": "The cloud service provider in which the network exists. Accepted values are: `AWS`, `AZURE`, and `GCP`.\n",
                    "willReplaceOnChanges": true
                },
                "connectionTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of connection types that may be used with the network. Accepted connection types are: `PEERING`, `TRANSITGATEWAY`, and `PRIVATELINK`.\n",
                    "willReplaceOnChanges": true
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the Network.\n"
                },
                "dnsConfig": {
                    "$ref": "#/types/confluentcloud:index/NetworkDnsConfig:NetworkDnsConfig",
                    "description": "Network DNS config. It applies only to the PRIVATELINK network connection type.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/NetworkEnvironment:NetworkEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                    "willReplaceOnChanges": true
                },
                "gcps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/confluentcloud:index/NetworkGcp:NetworkGcp"
                    },
                    "description": "(Optional Configuration Block) The GCP-specific network details if available. It supports the following:\n"
                },
                "region": {
                    "type": "string",
                    "description": "The cloud provider region where the network exists.\n",
                    "willReplaceOnChanges": true
                },
                "reservedCidr": {
                    "type": "string",
                    "description": "The reserved IPv4 CIDR block to be used for the network. Must be `/24`. If not specified, Confluent Cloud Network uses `172.20.255.0/24`.\n",
                    "willReplaceOnChanges": true
                },
                "zoneInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/confluentcloud:index/NetworkZoneInfo:NetworkZoneInfo"
                    },
                    "description": "Each item represents information related to a single zone.\n",
                    "willReplaceOnChanges": true
                },
                "zones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The 3 availability zones for this network. They can optionally be specified for AWS networks\nused with PrivateLink, for GCP networks used with Private Service Connect, and for AWS and GCP\nnetworks used with Peering. Otherwise, they are automatically chosen by Confluent Cloud.\nOn AWS, zones are AWS [AZ IDs](https://docs.aws.amazon.com/ram/latest/userguide/working-with-az-ids.html), for example, `use1-az3`.\nOn GCP, zones are GCP [zones](https://cloud.google.com/compute/docs/regions-zones), for example, `us-central1-c`.\nOn Azure, zones are Confluent-chosen names (for example, `1`, `2`, `3`) since Azure does not have universal zone identifiers.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "cloud",
                "connectionTypes",
                "environment",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Network resources.\n",
                "properties": {
                    "aws": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/NetworkAw:NetworkAw"
                        },
                        "description": "(Optional Configuration Block) The AWS-specific network details if available. It supports the following:\n"
                    },
                    "azures": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/NetworkAzure:NetworkAzure"
                        },
                        "description": "(Optional Configuration Block) The Azure-specific network details if available. It supports the following:\n"
                    },
                    "cidr": {
                        "type": "string",
                        "description": "The IPv4 CIDR block to be used for the network. Must be `/27`. Required for VPC peering and AWS TransitGateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "cloud": {
                        "type": "string",
                        "description": "The cloud service provider in which the network exists. Accepted values are: `AWS`, `AZURE`, and `GCP`.\n",
                        "willReplaceOnChanges": true
                    },
                    "connectionTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of connection types that may be used with the network. Accepted connection types are: `PEERING`, `TRANSITGATEWAY`, and `PRIVATELINK`.\n",
                        "willReplaceOnChanges": true
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name of the Network.\n"
                    },
                    "dnsConfig": {
                        "$ref": "#/types/confluentcloud:index/NetworkDnsConfig:NetworkDnsConfig",
                        "description": "Network DNS config. It applies only to the PRIVATELINK network connection type.\n"
                    },
                    "dnsDomain": {
                        "type": "string",
                        "description": "(Optional String) The root DNS domain for the network, for example, `pr123a.us-east-2.aws.confluent.cloud` if applicable. Present on Networks that support Private Link.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/NetworkEnvironment:NetworkEnvironment",
                        "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                        "willReplaceOnChanges": true
                    },
                    "gcps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/NetworkGcp:NetworkGcp"
                        },
                        "description": "(Optional Configuration Block) The GCP-specific network details if available. It supports the following:\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The cloud provider region where the network exists.\n",
                        "willReplaceOnChanges": true
                    },
                    "reservedCidr": {
                        "type": "string",
                        "description": "The reserved IPv4 CIDR block to be used for the network. Must be `/24`. If not specified, Confluent Cloud Network uses `172.20.255.0/24`.\n",
                        "willReplaceOnChanges": true
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "(Required String) The Confluent Resource Name of the Network.\n"
                    },
                    "zonalSubdomains": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Optional Map) The DNS subdomain for each zone. Present on networks that support Private Link. Keys are zone names, for example, `use2-az1` and values are DNS domains, for example, `use2-az1.pr123a.us-east-2.aws.confluent.cloud`.\n"
                    },
                    "zoneInfos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/NetworkZoneInfo:NetworkZoneInfo"
                        },
                        "description": "Each item represents information related to a single zone.\n",
                        "willReplaceOnChanges": true
                    },
                    "zones": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The 3 availability zones for this network. They can optionally be specified for AWS networks\nused with PrivateLink, for GCP networks used with Private Service Connect, and for AWS and GCP\nnetworks used with Peering. Otherwise, they are automatically chosen by Confluent Cloud.\nOn AWS, zones are AWS [AZ IDs](https://docs.aws.amazon.com/ram/latest/userguide/working-with-az-ids.html), for example, `use1-az3`.\nOn GCP, zones are GCP [zones](https://cloud.google.com/compute/docs/regions-zones), for example, `us-central1-c`.\nOn Azure, zones are Confluent-chosen names (for example, `1`, `2`, `3`) since Azure does not have universal zone identifiers.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/networkLinkEndpoint:NetworkLinkEndpoint": {
            "description": "\n\n\n## Import\n\nYou can import a Network Link Endpoint by using Environment ID and Network Link Endpoint ID, in the format `\u003cEnvironment ID\u003e/\u003cNetwork Link Endpoint ID\u003e`. The following example shows how to import a Network Link Endpoint$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/networkLinkEndpoint:NetworkLinkEndpoint my_nle env-abc123/nle-abc123\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Network Link Endpoint.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the Network Link Endpoint.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/NetworkLinkEndpointEnvironment:NetworkLinkEndpointEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n"
                },
                "network": {
                    "$ref": "#/types/confluentcloud:index/NetworkLinkEndpointNetwork:NetworkLinkEndpointNetwork",
                    "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n"
                },
                "networkLinkService": {
                    "$ref": "#/types/confluentcloud:index/NetworkLinkEndpointNetworkLinkService:NetworkLinkEndpointNetworkLinkService"
                },
                "resourceName": {
                    "type": "string",
                    "description": "(Required String) The Confluent Resource Name of the Network Link Endpoint.\n"
                }
            },
            "required": [
                "description",
                "displayName",
                "environment",
                "network",
                "networkLinkService",
                "resourceName"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Network Link Endpoint.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the Network Link Endpoint.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/NetworkLinkEndpointEnvironment:NetworkLinkEndpointEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                    "willReplaceOnChanges": true
                },
                "network": {
                    "$ref": "#/types/confluentcloud:index/NetworkLinkEndpointNetwork:NetworkLinkEndpointNetwork",
                    "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n",
                    "willReplaceOnChanges": true
                },
                "networkLinkService": {
                    "$ref": "#/types/confluentcloud:index/NetworkLinkEndpointNetworkLinkService:NetworkLinkEndpointNetworkLinkService",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "environment",
                "network",
                "networkLinkService"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkLinkEndpoint resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the Network Link Endpoint.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name of the Network Link Endpoint.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/NetworkLinkEndpointEnvironment:NetworkLinkEndpointEnvironment",
                        "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                        "willReplaceOnChanges": true
                    },
                    "network": {
                        "$ref": "#/types/confluentcloud:index/NetworkLinkEndpointNetwork:NetworkLinkEndpointNetwork",
                        "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n",
                        "willReplaceOnChanges": true
                    },
                    "networkLinkService": {
                        "$ref": "#/types/confluentcloud:index/NetworkLinkEndpointNetworkLinkService:NetworkLinkEndpointNetworkLinkService",
                        "willReplaceOnChanges": true
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "(Required String) The Confluent Resource Name of the Network Link Endpoint.\n"
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/networkLinkService:NetworkLinkService": {
            "description": "\n\n\n## Import\n\nYou can import a Network Link Service by using Environment ID and Network Link Service ID, in the format `\u003cEnvironment ID\u003e/\u003cNetwork Link Service ID\u003e`. The following example shows how to import a Network Link Service$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/networkLinkService:NetworkLinkService my_nls env-abc123/nls-abc123\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "accept": {
                    "$ref": "#/types/confluentcloud:index/NetworkLinkServiceAccept:NetworkLinkServiceAccept"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Network Link Service.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the Network Link Service.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/NetworkLinkServiceEnvironment:NetworkLinkServiceEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n"
                },
                "network": {
                    "$ref": "#/types/confluentcloud:index/NetworkLinkServiceNetwork:NetworkLinkServiceNetwork",
                    "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n"
                },
                "resourceName": {
                    "type": "string",
                    "description": "(Required String) The Confluent Resource Name of the Network Link Service.\n"
                }
            },
            "required": [
                "accept",
                "description",
                "displayName",
                "environment",
                "network",
                "resourceName"
            ],
            "inputProperties": {
                "accept": {
                    "$ref": "#/types/confluentcloud:index/NetworkLinkServiceAccept:NetworkLinkServiceAccept"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Network Link Service.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the Network Link Service.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/NetworkLinkServiceEnvironment:NetworkLinkServiceEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                    "willReplaceOnChanges": true
                },
                "network": {
                    "$ref": "#/types/confluentcloud:index/NetworkLinkServiceNetwork:NetworkLinkServiceNetwork",
                    "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "environment",
                "network"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkLinkService resources.\n",
                "properties": {
                    "accept": {
                        "$ref": "#/types/confluentcloud:index/NetworkLinkServiceAccept:NetworkLinkServiceAccept"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Network Link Service.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name of the Network Link Service.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/NetworkLinkServiceEnvironment:NetworkLinkServiceEnvironment",
                        "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                        "willReplaceOnChanges": true
                    },
                    "network": {
                        "$ref": "#/types/confluentcloud:index/NetworkLinkServiceNetwork:NetworkLinkServiceNetwork",
                        "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n",
                        "willReplaceOnChanges": true
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "(Required String) The Confluent Resource Name of the Network Link Service.\n"
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/peering:Peering": {
            "description": "\n\n\n## Import\n\nYou can import a Peering by using Environment ID and Peering ID, in the format `\u003cEnvironment ID\u003e/\u003cPeering ID\u003e`. The following example shows how to import a Peering$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/peering:Peering my_peer env-abc123/peer-abc123\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "aws": {
                    "$ref": "#/types/confluentcloud:index/PeeringAws:PeeringAws"
                },
                "azure": {
                    "$ref": "#/types/confluentcloud:index/PeeringAzure:PeeringAzure"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the Peering.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/PeeringEnvironment:PeeringEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n"
                },
                "gcp": {
                    "$ref": "#/types/confluentcloud:index/PeeringGcp:PeeringGcp"
                },
                "network": {
                    "$ref": "#/types/confluentcloud:index/PeeringNetwork:PeeringNetwork",
                    "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n"
                }
            },
            "required": [
                "displayName",
                "environment",
                "network"
            ],
            "inputProperties": {
                "aws": {
                    "$ref": "#/types/confluentcloud:index/PeeringAws:PeeringAws",
                    "willReplaceOnChanges": true
                },
                "azure": {
                    "$ref": "#/types/confluentcloud:index/PeeringAzure:PeeringAzure",
                    "willReplaceOnChanges": true
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the Peering.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/PeeringEnvironment:PeeringEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                    "willReplaceOnChanges": true
                },
                "gcp": {
                    "$ref": "#/types/confluentcloud:index/PeeringGcp:PeeringGcp",
                    "willReplaceOnChanges": true
                },
                "network": {
                    "$ref": "#/types/confluentcloud:index/PeeringNetwork:PeeringNetwork",
                    "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "environment",
                "network"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Peering resources.\n",
                "properties": {
                    "aws": {
                        "$ref": "#/types/confluentcloud:index/PeeringAws:PeeringAws",
                        "willReplaceOnChanges": true
                    },
                    "azure": {
                        "$ref": "#/types/confluentcloud:index/PeeringAzure:PeeringAzure",
                        "willReplaceOnChanges": true
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name of the Peering.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/PeeringEnvironment:PeeringEnvironment",
                        "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                        "willReplaceOnChanges": true
                    },
                    "gcp": {
                        "$ref": "#/types/confluentcloud:index/PeeringGcp:PeeringGcp",
                        "willReplaceOnChanges": true
                    },
                    "network": {
                        "$ref": "#/types/confluentcloud:index/PeeringNetwork:PeeringNetwork",
                        "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/privateLinkAccess:PrivateLinkAccess": {
            "description": "\n\n\n## Import\n\nYou can import a Private Link Access by using Environment ID and Private Link Access ID, in the format `\u003cEnvironment ID\u003e/\u003cPrivate Link Access ID\u003e`. The following example shows how to import a Private Link Access$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/privateLinkAccess:PrivateLinkAccess my_pla env-abc123/pla-abc123\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "aws": {
                    "$ref": "#/types/confluentcloud:index/PrivateLinkAccessAws:PrivateLinkAccessAws"
                },
                "azure": {
                    "$ref": "#/types/confluentcloud:index/PrivateLinkAccessAzure:PrivateLinkAccessAzure"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the Private Link Access.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/PrivateLinkAccessEnvironment:PrivateLinkAccessEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n"
                },
                "gcp": {
                    "$ref": "#/types/confluentcloud:index/PrivateLinkAccessGcp:PrivateLinkAccessGcp"
                },
                "network": {
                    "$ref": "#/types/confluentcloud:index/PrivateLinkAccessNetwork:PrivateLinkAccessNetwork",
                    "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n"
                }
            },
            "required": [
                "displayName",
                "environment",
                "network"
            ],
            "inputProperties": {
                "aws": {
                    "$ref": "#/types/confluentcloud:index/PrivateLinkAccessAws:PrivateLinkAccessAws",
                    "willReplaceOnChanges": true
                },
                "azure": {
                    "$ref": "#/types/confluentcloud:index/PrivateLinkAccessAzure:PrivateLinkAccessAzure",
                    "willReplaceOnChanges": true
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the Private Link Access.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/PrivateLinkAccessEnvironment:PrivateLinkAccessEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                    "willReplaceOnChanges": true
                },
                "gcp": {
                    "$ref": "#/types/confluentcloud:index/PrivateLinkAccessGcp:PrivateLinkAccessGcp",
                    "willReplaceOnChanges": true
                },
                "network": {
                    "$ref": "#/types/confluentcloud:index/PrivateLinkAccessNetwork:PrivateLinkAccessNetwork",
                    "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "environment",
                "network"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PrivateLinkAccess resources.\n",
                "properties": {
                    "aws": {
                        "$ref": "#/types/confluentcloud:index/PrivateLinkAccessAws:PrivateLinkAccessAws",
                        "willReplaceOnChanges": true
                    },
                    "azure": {
                        "$ref": "#/types/confluentcloud:index/PrivateLinkAccessAzure:PrivateLinkAccessAzure",
                        "willReplaceOnChanges": true
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name of the Private Link Access.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/PrivateLinkAccessEnvironment:PrivateLinkAccessEnvironment",
                        "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                        "willReplaceOnChanges": true
                    },
                    "gcp": {
                        "$ref": "#/types/confluentcloud:index/PrivateLinkAccessGcp:PrivateLinkAccessGcp",
                        "willReplaceOnChanges": true
                    },
                    "network": {
                        "$ref": "#/types/confluentcloud:index/PrivateLinkAccessNetwork:PrivateLinkAccessNetwork",
                        "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/roleBinding:RoleBinding": {
            "description": "\n\n\n## Import\n\nYou can import a Role Binding by using Role Binding ID, for example$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/roleBinding:RoleBinding my_rb rb-f3a90de\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "crnPattern": {
                    "type": "string",
                    "description": "A [Confluent Resource Name(CRN)](https://docs.confluent.io/cloud/current/api.html#section/Identifiers-and-URLs/Confluent-Resource-Names-(CRNs)) that specifies the scope and resource patterns necessary for the role to bind.\n"
                },
                "principal": {
                    "type": "string",
                    "description": "A principal User to bind the role to, for example, \"User:u-111aaa\" for binding to a user \"u-111aaa\", or \"User:sa-111aaa\" for binding to a service account \"sa-111aaa\".\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "A name of the role to bind to the principal. See [Confluent Cloud RBAC Roles](https://docs.confluent.io/cloud/current/access-management/access-control/cloud-rbac.html#ccloud-rbac-roles) for a full list of supported role names.\n"
                }
            },
            "required": [
                "crnPattern",
                "principal",
                "roleName"
            ],
            "inputProperties": {
                "crnPattern": {
                    "type": "string",
                    "description": "A [Confluent Resource Name(CRN)](https://docs.confluent.io/cloud/current/api.html#section/Identifiers-and-URLs/Confluent-Resource-Names-(CRNs)) that specifies the scope and resource patterns necessary for the role to bind.\n",
                    "willReplaceOnChanges": true
                },
                "principal": {
                    "type": "string",
                    "description": "A principal User to bind the role to, for example, \"User:u-111aaa\" for binding to a user \"u-111aaa\", or \"User:sa-111aaa\" for binding to a service account \"sa-111aaa\".\n",
                    "willReplaceOnChanges": true
                },
                "roleName": {
                    "type": "string",
                    "description": "A name of the role to bind to the principal. See [Confluent Cloud RBAC Roles](https://docs.confluent.io/cloud/current/access-management/access-control/cloud-rbac.html#ccloud-rbac-roles) for a full list of supported role names.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "crnPattern",
                "principal",
                "roleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RoleBinding resources.\n",
                "properties": {
                    "crnPattern": {
                        "type": "string",
                        "description": "A [Confluent Resource Name(CRN)](https://docs.confluent.io/cloud/current/api.html#section/Identifiers-and-URLs/Confluent-Resource-Names-(CRNs)) that specifies the scope and resource patterns necessary for the role to bind.\n",
                        "willReplaceOnChanges": true
                    },
                    "principal": {
                        "type": "string",
                        "description": "A principal User to bind the role to, for example, \"User:u-111aaa\" for binding to a user \"u-111aaa\", or \"User:sa-111aaa\" for binding to a service account \"sa-111aaa\".\n",
                        "willReplaceOnChanges": true
                    },
                    "roleName": {
                        "type": "string",
                        "description": "A name of the role to bind to the principal. See [Confluent Cloud RBAC Roles](https://docs.confluent.io/cloud/current/access-management/access-control/cloud-rbac.html#ccloud-rbac-roles) for a full list of supported role names.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/schema:Schema": {
            "description": "\n\n\n## Import\n\nYou can import a Schema by using the Schema Registry cluster ID, Subject name, and unique identifier (or `latest` when `recreate_on_update = false`) of the Schema in the format `\u003cSchema Registry cluster ID\u003e/\u003cSubject name\u003e/\u003cSchema identifier\u003e`, for exampleOption Arecreate_on_update = false (by default) $ export IMPORT_SCHEMA_REGISTRY_API_KEY=\"\u003cschema_registry_api_key\u003e\" $ export IMPORT_SCHEMA_REGISTRY_API_SECRET=\"\u003cschema_registry_api_secret\u003e\" $ export IMPORT_SCHEMA_REGISTRY_REST_ENDPOINT=\"\u003cschema_registry_rest_endpoint\u003e\" $ export SCHEMA_CONTENT=\"\u003cschema_content\u003e\" # for example, export SCHEMA_CONTENT=$(cat schemas/proto/purchase.proto)\n\n```sh\n $ pulumi import confluentcloud:index/schema:Schema my_schema_1 lsrc-abc123/test-subject/latest\n```\n\n Option Brecreate_on_update = true $ export IMPORT_SCHEMA_REGISTRY_API_KEY=\"\u003cschema_registry_api_key\u003e\" $ export IMPORT_SCHEMA_REGISTRY_API_SECRET=\"\u003cschema_registry_api_secret\u003e\" $ export IMPORT_SCHEMA_REGISTRY_REST_ENDPOINT=\"\u003cschema_registry_rest_endpoint\u003e\" $ export SCHEMA_CONTENT=\"\u003cschema_content\u003e\" # for example, export SCHEMA_CONTENT=$(cat schemas/proto/purchase.proto)\n\n```sh\n $ pulumi import confluentcloud:index/schema:Schema my_schema_1 lsrc-abc123/test-subject/100003\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/SchemaCredentials:SchemaCredentials",
                    "description": "The Cluster API Credentials.\n",
                    "secret": true
                },
                "format": {
                    "type": "string",
                    "description": "The format of the schema. Accepted values are: `AVRO`, `PROTOBUF`, and `JSON`.\n"
                },
                "hardDelete": {
                    "type": "boolean",
                    "description": "An optional flag to control whether a schema should be soft or hard deleted. Set it to `true` if you want to hard delete a schema on destroy (see [Schema Deletion Guidelines](https://docs.confluent.io/platform/current/schema-registry/schema-deletion-guidelines.html#schema-deletion-guidelines) for more details). Must be unset when importing. Defaults to `false` (soft delete).\n"
                },
                "recreateOnUpdate": {
                    "type": "boolean",
                    "description": "An optional flag to control whether a schema should be recreated on an update. Set it to `true` if you want to manage different schema versions using different resource instances. Must be set to the target value when importing. Defaults to `false`, which manages the latest schema version only. The resource instance always points to the latest schema version by supporting in-place updates.\n"
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema string, for example, `file(\"./schema_version_1.avsc\")`.\n",
                    "language": {
                        "csharp": {
                            "name": "SchemaDetails"
                        }
                    }
                },
                "schemaIdentifier": {
                    "type": "integer",
                    "description": "(Required Integer) The globally unique ID of the Schema, for example, `100003`. If the same schema is registered under a different subject, the same identifier will be returned. However, the `version` of the schema may be different under different subjects.\n"
                },
                "schemaReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/confluentcloud:index/SchemaSchemaReference:SchemaSchemaReference"
                    },
                    "description": "The list of referenced schemas (see [Schema References](https://docs.confluent.io/platform/current/schema-registry/serdes-develop/index.html#schema-references) for more details):\n"
                },
                "schemaRegistryCluster": {
                    "$ref": "#/types/confluentcloud:index/SchemaSchemaRegistryCluster:SchemaSchemaRegistryCluster"
                },
                "subjectName": {
                    "type": "string",
                    "description": "The name for the reference. (For Avro Schema, the reference name is the fully qualified schema name, for JSON Schema it is a URL, and for Protobuf Schema, it is the name of another Protobuf file.)\n"
                },
                "version": {
                    "type": "integer",
                    "description": "The version, representing the exact version of the schema under the registered subject.\n"
                }
            },
            "required": [
                "format",
                "schema",
                "schemaIdentifier",
                "subjectName",
                "version"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/SchemaCredentials:SchemaCredentials",
                    "description": "The Cluster API Credentials.\n",
                    "secret": true
                },
                "format": {
                    "type": "string",
                    "description": "The format of the schema. Accepted values are: `AVRO`, `PROTOBUF`, and `JSON`.\n",
                    "willReplaceOnChanges": true
                },
                "hardDelete": {
                    "type": "boolean",
                    "description": "An optional flag to control whether a schema should be soft or hard deleted. Set it to `true` if you want to hard delete a schema on destroy (see [Schema Deletion Guidelines](https://docs.confluent.io/platform/current/schema-registry/schema-deletion-guidelines.html#schema-deletion-guidelines) for more details). Must be unset when importing. Defaults to `false` (soft delete).\n"
                },
                "recreateOnUpdate": {
                    "type": "boolean",
                    "description": "An optional flag to control whether a schema should be recreated on an update. Set it to `true` if you want to manage different schema versions using different resource instances. Must be set to the target value when importing. Defaults to `false`, which manages the latest schema version only. The resource instance always points to the latest schema version by supporting in-place updates.\n",
                    "willReplaceOnChanges": true
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema string, for example, `file(\"./schema_version_1.avsc\")`.\n",
                    "language": {
                        "csharp": {
                            "name": "SchemaDetails"
                        }
                    }
                },
                "schemaReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/confluentcloud:index/SchemaSchemaReference:SchemaSchemaReference"
                    },
                    "description": "The list of referenced schemas (see [Schema References](https://docs.confluent.io/platform/current/schema-registry/serdes-develop/index.html#schema-references) for more details):\n"
                },
                "schemaRegistryCluster": {
                    "$ref": "#/types/confluentcloud:index/SchemaSchemaRegistryCluster:SchemaSchemaRegistryCluster",
                    "willReplaceOnChanges": true
                },
                "subjectName": {
                    "type": "string",
                    "description": "The name for the reference. (For Avro Schema, the reference name is the fully qualified schema name, for JSON Schema it is a URL, and for Protobuf Schema, it is the name of another Protobuf file.)\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "format",
                "subjectName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Schema resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/SchemaCredentials:SchemaCredentials",
                        "description": "The Cluster API Credentials.\n",
                        "secret": true
                    },
                    "format": {
                        "type": "string",
                        "description": "The format of the schema. Accepted values are: `AVRO`, `PROTOBUF`, and `JSON`.\n",
                        "willReplaceOnChanges": true
                    },
                    "hardDelete": {
                        "type": "boolean",
                        "description": "An optional flag to control whether a schema should be soft or hard deleted. Set it to `true` if you want to hard delete a schema on destroy (see [Schema Deletion Guidelines](https://docs.confluent.io/platform/current/schema-registry/schema-deletion-guidelines.html#schema-deletion-guidelines) for more details). Must be unset when importing. Defaults to `false` (soft delete).\n"
                    },
                    "recreateOnUpdate": {
                        "type": "boolean",
                        "description": "An optional flag to control whether a schema should be recreated on an update. Set it to `true` if you want to manage different schema versions using different resource instances. Must be set to the target value when importing. Defaults to `false`, which manages the latest schema version only. The resource instance always points to the latest schema version by supporting in-place updates.\n",
                        "willReplaceOnChanges": true
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema string, for example, `file(\"./schema_version_1.avsc\")`.\n",
                        "language": {
                            "csharp": {
                                "name": "SchemaDetails"
                            }
                        }
                    },
                    "schemaIdentifier": {
                        "type": "integer",
                        "description": "(Required Integer) The globally unique ID of the Schema, for example, `100003`. If the same schema is registered under a different subject, the same identifier will be returned. However, the `version` of the schema may be different under different subjects.\n"
                    },
                    "schemaReferences": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/SchemaSchemaReference:SchemaSchemaReference"
                        },
                        "description": "The list of referenced schemas (see [Schema References](https://docs.confluent.io/platform/current/schema-registry/serdes-develop/index.html#schema-references) for more details):\n"
                    },
                    "schemaRegistryCluster": {
                        "$ref": "#/types/confluentcloud:index/SchemaSchemaRegistryCluster:SchemaSchemaRegistryCluster",
                        "willReplaceOnChanges": true
                    },
                    "subjectName": {
                        "type": "string",
                        "description": "The name for the reference. (For Avro Schema, the reference name is the fully qualified schema name, for JSON Schema it is a URL, and for Protobuf Schema, it is the name of another Protobuf file.)\n",
                        "willReplaceOnChanges": true
                    },
                    "version": {
                        "type": "integer",
                        "description": "The version, representing the exact version of the schema under the registered subject.\n"
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/schemaRegistryCluster:SchemaRegistryCluster": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst development = new confluentcloud.Environment(\"development\", {});\nconst example = confluentcloud.getSchemaRegistryRegion({\n    cloud: \"AWS\",\n    region: \"us-east-2\",\n    \"package\": \"ESSENTIALS\",\n});\nconst essentials = new confluentcloud.SchemaRegistryCluster(\"essentials\", {\n    \"package\": example.then(example =\u003e example[\"package\"]),\n    environment: {\n        id: development.id,\n    },\n    region: {\n        id: example.then(example =\u003e example.id),\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\ndevelopment = confluentcloud.Environment(\"development\")\nexample = confluentcloud.get_schema_registry_region(cloud=\"AWS\",\n    region=\"us-east-2\",\n    package=\"ESSENTIALS\")\nessentials = confluentcloud.SchemaRegistryCluster(\"essentials\",\n    package=example.package,\n    environment=confluentcloud.SchemaRegistryClusterEnvironmentArgs(\n        id=development.id,\n    ),\n    region=confluentcloud.SchemaRegistryClusterRegionArgs(\n        id=example.id,\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var development = new ConfluentCloud.Environment(\"development\");\n\n    var example = ConfluentCloud.GetSchemaRegistryRegion.Invoke(new()\n    {\n        Cloud = \"AWS\",\n        Region = \"us-east-2\",\n        Package = \"ESSENTIALS\",\n    });\n\n    var essentials = new ConfluentCloud.SchemaRegistryCluster(\"essentials\", new()\n    {\n        Package = example.Apply(getSchemaRegistryRegionResult =\u003e getSchemaRegistryRegionResult.Package),\n        Environment = new ConfluentCloud.Inputs.SchemaRegistryClusterEnvironmentArgs\n        {\n            Id = development.Id,\n        },\n        Region = new ConfluentCloud.Inputs.SchemaRegistryClusterRegionArgs\n        {\n            Id = example.Apply(getSchemaRegistryRegionResult =\u003e getSchemaRegistryRegionResult.Id),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdevelopment, err := confluentcloud.NewEnvironment(ctx, \"development\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample, err := confluentcloud.GetSchemaRegistryRegion(ctx, \u0026confluentcloud.GetSchemaRegistryRegionArgs{\n\t\t\tCloud:   \"AWS\",\n\t\t\tRegion:  \"us-east-2\",\n\t\t\tPackage: \"ESSENTIALS\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = confluentcloud.NewSchemaRegistryCluster(ctx, \"essentials\", \u0026confluentcloud.SchemaRegistryClusterArgs{\n\t\t\tPackage: *pulumi.String(example.Package),\n\t\t\tEnvironment: \u0026confluentcloud.SchemaRegistryClusterEnvironmentArgs{\n\t\t\t\tId: development.ID(),\n\t\t\t},\n\t\t\tRegion: \u0026confluentcloud.SchemaRegistryClusterRegionArgs{\n\t\t\t\tId: *pulumi.String(example.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.Environment;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetSchemaRegistryRegionArgs;\nimport com.pulumi.confluentcloud.SchemaRegistryCluster;\nimport com.pulumi.confluentcloud.SchemaRegistryClusterArgs;\nimport com.pulumi.confluentcloud.inputs.SchemaRegistryClusterEnvironmentArgs;\nimport com.pulumi.confluentcloud.inputs.SchemaRegistryClusterRegionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var development = new Environment(\"development\");\n\n        final var example = ConfluentcloudFunctions.getSchemaRegistryRegion(GetSchemaRegistryRegionArgs.builder()\n            .cloud(\"AWS\")\n            .region(\"us-east-2\")\n            .package_(\"ESSENTIALS\")\n            .build());\n\n        var essentials = new SchemaRegistryCluster(\"essentials\", SchemaRegistryClusterArgs.builder()        \n            .package_(example.applyValue(getSchemaRegistryRegionResult -\u003e getSchemaRegistryRegionResult.package()))\n            .environment(SchemaRegistryClusterEnvironmentArgs.builder()\n                .id(development.id())\n                .build())\n            .region(SchemaRegistryClusterRegionArgs.builder()\n                .id(example.applyValue(getSchemaRegistryRegionResult -\u003e getSchemaRegistryRegionResult.id()))\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  development:\n    type: confluentcloud:Environment\n  essentials:\n    type: confluentcloud:SchemaRegistryCluster\n    properties:\n      package: ${example.package}\n      environment:\n        id: ${development.id}\n      region:\n        id: ${example.id}\nvariables:\n  example:\n    fn::invoke:\n      Function: confluentcloud:getSchemaRegistryRegion\n      Arguments:\n        cloud: AWS\n        region: us-east-2\n        package: ESSENTIALS\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nYou can import a Schema Registry cluster by using Environment ID and Schema Registry cluster ID, in the format `\u003cEnvironment ID\u003e/\u003cSchema Registry cluster ID\u003e`, for example$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/schemaRegistryCluster:SchemaRegistryCluster example env-abc123/lsrc-abc123\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "(Required String) An API Version of the schema version of the Schema Registry cluster, for example, `srcm/v2`.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "(Required String) The name of the Schema Registry cluster, for example, `Stream Governance Package`.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/SchemaRegistryClusterEnvironment:SchemaRegistryClusterEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "(Required String) A kind of the Schema Registry cluster, for example, `Cluster`.\n"
                },
                "package": {
                    "type": "string",
                    "description": "The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.\n"
                },
                "region": {
                    "$ref": "#/types/confluentcloud:index/SchemaRegistryClusterRegion:SchemaRegistryClusterRegion"
                },
                "resourceName": {
                    "type": "string",
                    "description": "(Required String) The Confluent Resource Name of the Schema Registry cluster, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/schema-registry=lsrc-abc123`.\n"
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "(Required String) The HTTP endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-west-2.aws.confluent.cloud`.\n"
                }
            },
            "required": [
                "apiVersion",
                "displayName",
                "environment",
                "kind",
                "package",
                "region",
                "resourceName",
                "restEndpoint"
            ],
            "inputProperties": {
                "environment": {
                    "$ref": "#/types/confluentcloud:index/SchemaRegistryClusterEnvironment:SchemaRegistryClusterEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                    "willReplaceOnChanges": true
                },
                "package": {
                    "type": "string",
                    "description": "The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.\n"
                },
                "region": {
                    "$ref": "#/types/confluentcloud:index/SchemaRegistryClusterRegion:SchemaRegistryClusterRegion",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "environment",
                "package",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SchemaRegistryCluster resources.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "(Required String) An API Version of the schema version of the Schema Registry cluster, for example, `srcm/v2`.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "(Required String) The name of the Schema Registry cluster, for example, `Stream Governance Package`.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/SchemaRegistryClusterEnvironment:SchemaRegistryClusterEnvironment",
                        "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                        "willReplaceOnChanges": true
                    },
                    "kind": {
                        "type": "string",
                        "description": "(Required String) A kind of the Schema Registry cluster, for example, `Cluster`.\n"
                    },
                    "package": {
                        "type": "string",
                        "description": "The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.\n"
                    },
                    "region": {
                        "$ref": "#/types/confluentcloud:index/SchemaRegistryClusterRegion:SchemaRegistryClusterRegion",
                        "willReplaceOnChanges": true
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "(Required String) The Confluent Resource Name of the Schema Registry cluster, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/schema-registry=lsrc-abc123`.\n"
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "(Required String) The HTTP endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-west-2.aws.confluent.cloud`.\n"
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/schemaRegistryClusterConfig:SchemaRegistryClusterConfig": {
            "description": "\n\n\n## Import\n\nYou can import a Schema Registry Cluster Config by using the Schema Registry cluster ID, Subject name in the format `\u003cSchema Registry cluster ID\u003e`, for example$ export IMPORT_SCHEMA_REGISTRY_API_KEY=\"\u003cschema_registry_api_key\u003e\" $ export IMPORT_SCHEMA_REGISTRY_API_SECRET=\"\u003cschema_registry_api_secret\u003e\" $ export IMPORT_SCHEMA_REGISTRY_REST_ENDPOINT=\"\u003cschema_registry_rest_endpoint\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/schemaRegistryClusterConfig:SchemaRegistryClusterConfig example lsrc-abc123\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "compatibilityLevel": {
                    "type": "string",
                    "description": "The global Schema Registry compatibility level. Accepted values are: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`, `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, and `NONE`. See the [Compatibility Types](https://docs.confluent.io/platform/current/schema-registry/avro.html#compatibility-types) for more details.\n"
                },
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/SchemaRegistryClusterConfigCredentials:SchemaRegistryClusterConfigCredentials",
                    "description": "The Cluster API Credentials.\n",
                    "secret": true
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).\n"
                },
                "schemaRegistryCluster": {
                    "$ref": "#/types/confluentcloud:index/SchemaRegistryClusterConfigSchemaRegistryCluster:SchemaRegistryClusterConfigSchemaRegistryCluster"
                }
            },
            "required": [
                "compatibilityLevel"
            ],
            "inputProperties": {
                "compatibilityLevel": {
                    "type": "string",
                    "description": "The global Schema Registry compatibility level. Accepted values are: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`, `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, and `NONE`. See the [Compatibility Types](https://docs.confluent.io/platform/current/schema-registry/avro.html#compatibility-types) for more details.\n"
                },
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/SchemaRegistryClusterConfigCredentials:SchemaRegistryClusterConfigCredentials",
                    "description": "The Cluster API Credentials.\n",
                    "secret": true
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                    "willReplaceOnChanges": true
                },
                "schemaRegistryCluster": {
                    "$ref": "#/types/confluentcloud:index/SchemaRegistryClusterConfigSchemaRegistryCluster:SchemaRegistryClusterConfigSchemaRegistryCluster",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SchemaRegistryClusterConfig resources.\n",
                "properties": {
                    "compatibilityLevel": {
                        "type": "string",
                        "description": "The global Schema Registry compatibility level. Accepted values are: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`, `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, and `NONE`. See the [Compatibility Types](https://docs.confluent.io/platform/current/schema-registry/avro.html#compatibility-types) for more details.\n"
                    },
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/SchemaRegistryClusterConfigCredentials:SchemaRegistryClusterConfigCredentials",
                        "description": "The Cluster API Credentials.\n",
                        "secret": true
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaRegistryCluster": {
                        "$ref": "#/types/confluentcloud:index/SchemaRegistryClusterConfigSchemaRegistryCluster:SchemaRegistryClusterConfigSchemaRegistryCluster",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/schemaRegistryClusterMode:SchemaRegistryClusterMode": {
            "description": "\n\n\n## Import\n\nYou can import a Mode by using the Schema Registry cluster ID, Subject name in the format `\u003cSchema Registry cluster ID\u003e`, for example$ export IMPORT_SCHEMA_REGISTRY_API_KEY=\"\u003cschema_registry_api_key\u003e\" $ export IMPORT_SCHEMA_REGISTRY_API_SECRET=\"\u003cschema_registry_api_secret\u003e\" $ export IMPORT_SCHEMA_REGISTRY_REST_ENDPOINT=\"\u003cschema_registry_rest_endpoint\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/schemaRegistryClusterMode:SchemaRegistryClusterMode example lsrc-abc123\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/SchemaRegistryClusterModeCredentials:SchemaRegistryClusterModeCredentials",
                    "description": "The Cluster API Credentials.\n",
                    "secret": true
                },
                "mode": {
                    "type": "string",
                    "description": "The global Schema Registry mode. Accepted values are: `READWRITE`, `READONLY`, `READONLY_OVERRIDE`, and `IMPORT`.\n"
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).\n"
                },
                "schemaRegistryCluster": {
                    "$ref": "#/types/confluentcloud:index/SchemaRegistryClusterModeSchemaRegistryCluster:SchemaRegistryClusterModeSchemaRegistryCluster"
                }
            },
            "required": [
                "mode"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/SchemaRegistryClusterModeCredentials:SchemaRegistryClusterModeCredentials",
                    "description": "The Cluster API Credentials.\n",
                    "secret": true
                },
                "mode": {
                    "type": "string",
                    "description": "The global Schema Registry mode. Accepted values are: `READWRITE`, `READONLY`, `READONLY_OVERRIDE`, and `IMPORT`.\n"
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                    "willReplaceOnChanges": true
                },
                "schemaRegistryCluster": {
                    "$ref": "#/types/confluentcloud:index/SchemaRegistryClusterModeSchemaRegistryCluster:SchemaRegistryClusterModeSchemaRegistryCluster",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SchemaRegistryClusterMode resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/SchemaRegistryClusterModeCredentials:SchemaRegistryClusterModeCredentials",
                        "description": "The Cluster API Credentials.\n",
                        "secret": true
                    },
                    "mode": {
                        "type": "string",
                        "description": "The global Schema Registry mode. Accepted values are: `READWRITE`, `READONLY`, `READONLY_OVERRIDE`, and `IMPORT`.\n"
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaRegistryCluster": {
                        "$ref": "#/types/confluentcloud:index/SchemaRegistryClusterModeSchemaRegistryCluster:SchemaRegistryClusterModeSchemaRegistryCluster",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/serviceAccount:ServiceAccount": {
            "description": "\n\n\n## Import\n\nYou can import a Service Account by using Service Account ID, for example$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/serviceAccount:ServiceAccount my_sa sa-abc123\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "(Required String) An API Version of the schema version of the Service Account, for example, `iam/v2`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A free-form description of the Service Account.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "A human-readable name for the Service Account.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "(Required String) A kind of the Service Account, for example, `ServiceAccount`.\n"
                }
            },
            "required": [
                "apiVersion",
                "displayName",
                "kind"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A free-form description of the Service Account.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "A human-readable name for the Service Account.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceAccount resources.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "(Required String) An API Version of the schema version of the Service Account, for example, `iam/v2`.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A free-form description of the Service Account.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the Service Account.\n",
                        "willReplaceOnChanges": true
                    },
                    "kind": {
                        "type": "string",
                        "description": "(Required String) A kind of the Service Account, for example, `ServiceAccount`.\n"
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/subjectConfig:SubjectConfig": {
            "description": "\n\n\n## Import\n\nYou can import a Subject Config by using the Schema Registry cluster ID, Subject name in the format `\u003cSchema Registry cluster ID\u003e/\u003cSubject name\u003e`, for example$ export IMPORT_SCHEMA_REGISTRY_API_KEY=\"\u003cschema_registry_api_key\u003e\" $ export IMPORT_SCHEMA_REGISTRY_API_SECRET=\"\u003cschema_registry_api_secret\u003e\" $ export IMPORT_SCHEMA_REGISTRY_REST_ENDPOINT=\"\u003cschema_registry_rest_endpoint\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/subjectConfig:SubjectConfig example lsrc-abc123/test-subject\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "compatibilityLevel": {
                    "type": "string",
                    "description": "The Compatibility Level of the specified subject. Accepted values are: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`, `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, and `NONE`. See the [Compatibility Types](https://docs.confluent.io/platform/current/schema-registry/avro.html#compatibility-types) for more details.\n"
                },
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/SubjectConfigCredentials:SubjectConfigCredentials",
                    "description": "The Cluster API Credentials.\n",
                    "secret": true
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).\n"
                },
                "schemaRegistryCluster": {
                    "$ref": "#/types/confluentcloud:index/SubjectConfigSchemaRegistryCluster:SubjectConfigSchemaRegistryCluster"
                },
                "subjectName": {
                    "type": "string",
                    "description": "The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`.\n"
                }
            },
            "required": [
                "compatibilityLevel",
                "subjectName"
            ],
            "inputProperties": {
                "compatibilityLevel": {
                    "type": "string",
                    "description": "The Compatibility Level of the specified subject. Accepted values are: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`, `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, and `NONE`. See the [Compatibility Types](https://docs.confluent.io/platform/current/schema-registry/avro.html#compatibility-types) for more details.\n"
                },
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/SubjectConfigCredentials:SubjectConfigCredentials",
                    "description": "The Cluster API Credentials.\n",
                    "secret": true
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                    "willReplaceOnChanges": true
                },
                "schemaRegistryCluster": {
                    "$ref": "#/types/confluentcloud:index/SubjectConfigSchemaRegistryCluster:SubjectConfigSchemaRegistryCluster",
                    "willReplaceOnChanges": true
                },
                "subjectName": {
                    "type": "string",
                    "description": "The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "subjectName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SubjectConfig resources.\n",
                "properties": {
                    "compatibilityLevel": {
                        "type": "string",
                        "description": "The Compatibility Level of the specified subject. Accepted values are: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`, `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, and `NONE`. See the [Compatibility Types](https://docs.confluent.io/platform/current/schema-registry/avro.html#compatibility-types) for more details.\n"
                    },
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/SubjectConfigCredentials:SubjectConfigCredentials",
                        "description": "The Cluster API Credentials.\n",
                        "secret": true
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaRegistryCluster": {
                        "$ref": "#/types/confluentcloud:index/SubjectConfigSchemaRegistryCluster:SubjectConfigSchemaRegistryCluster",
                        "willReplaceOnChanges": true
                    },
                    "subjectName": {
                        "type": "string",
                        "description": "The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/subjectMode:SubjectMode": {
            "description": "\n\n\n## Import\n\nYou can import a Subject Mode by using the Schema Registry cluster ID, Subject name in the format `\u003cSchema Registry cluster ID\u003e/\u003cSubject name\u003e`, for example$ export IMPORT_SCHEMA_REGISTRY_API_KEY=\"\u003cschema_registry_api_key\u003e\" $ export IMPORT_SCHEMA_REGISTRY_API_SECRET=\"\u003cschema_registry_api_secret\u003e\" $ export IMPORT_SCHEMA_REGISTRY_REST_ENDPOINT=\"\u003cschema_registry_rest_endpoint\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/subjectMode:SubjectMode example lsrc-abc123/test-subject\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/SubjectModeCredentials:SubjectModeCredentials",
                    "description": "The Cluster API Credentials.\n",
                    "secret": true
                },
                "mode": {
                    "type": "string",
                    "description": "The mode of the specified subject. Accepted values are: `READWRITE`, `READONLY`, `READONLY_OVERRIDE`, and `IMPORT`.\n"
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).\n"
                },
                "schemaRegistryCluster": {
                    "$ref": "#/types/confluentcloud:index/SubjectModeSchemaRegistryCluster:SubjectModeSchemaRegistryCluster"
                },
                "subjectName": {
                    "type": "string",
                    "description": "The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`.\n"
                }
            },
            "required": [
                "mode",
                "subjectName"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/SubjectModeCredentials:SubjectModeCredentials",
                    "description": "The Cluster API Credentials.\n",
                    "secret": true
                },
                "mode": {
                    "type": "string",
                    "description": "The mode of the specified subject. Accepted values are: `READWRITE`, `READONLY`, `READONLY_OVERRIDE`, and `IMPORT`.\n"
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                    "willReplaceOnChanges": true
                },
                "schemaRegistryCluster": {
                    "$ref": "#/types/confluentcloud:index/SubjectModeSchemaRegistryCluster:SubjectModeSchemaRegistryCluster",
                    "willReplaceOnChanges": true
                },
                "subjectName": {
                    "type": "string",
                    "description": "The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "subjectName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SubjectMode resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/SubjectModeCredentials:SubjectModeCredentials",
                        "description": "The Cluster API Credentials.\n",
                        "secret": true
                    },
                    "mode": {
                        "type": "string",
                        "description": "The mode of the specified subject. Accepted values are: `READWRITE`, `READONLY`, `READONLY_OVERRIDE`, and `IMPORT`.\n"
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaRegistryCluster": {
                        "$ref": "#/types/confluentcloud:index/SubjectModeSchemaRegistryCluster:SubjectModeSchemaRegistryCluster",
                        "willReplaceOnChanges": true
                    },
                    "subjectName": {
                        "type": "string",
                        "description": "The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/tag:Tag": {
            "description": "\n\n\n## Import\n\nYou can import a Tag by using the Schema Registry cluster ID, Tag name in the format `\u003cSchema Registry cluster ID\u003e/\u003cTag name\u003e`, for example$ export IMPORT_SCHEMA_REGISTRY_API_KEY=\"\u003cschema_registry_api_key\u003e\" $ export IMPORT_SCHEMA_REGISTRY_API_SECRET=\"\u003cschema_registry_api_secret\u003e\" $ export IMPORT_SCHEMA_REGISTRY_REST_ENDPOINT=\"\u003cschema_registry_rest_endpoint\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/tag:Tag pii lsrc-8wrx70/PII\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/TagCredentials:TagCredentials",
                    "description": "The Cluster API Credentials.\n",
                    "secret": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of the tag.\n"
                },
                "entityTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional List of String) The entity types of the tag, this always returns `[\"cf_entity\"]`. Refer to the [Entity types](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#entity-types) to learn more about entity types.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the tag, for example, `PII`.\n"
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).\n"
                },
                "schemaRegistryCluster": {
                    "$ref": "#/types/confluentcloud:index/TagSchemaRegistryCluster:TagSchemaRegistryCluster"
                },
                "version": {
                    "type": "integer",
                    "description": "(Optional Integer) The version, for example, `1`.\n"
                }
            },
            "required": [
                "entityTypes",
                "name",
                "version"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/TagCredentials:TagCredentials",
                    "description": "The Cluster API Credentials.\n",
                    "secret": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of the tag.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the tag, for example, `PII`.\n"
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                    "willReplaceOnChanges": true
                },
                "schemaRegistryCluster": {
                    "$ref": "#/types/confluentcloud:index/TagSchemaRegistryCluster:TagSchemaRegistryCluster",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Tag resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/TagCredentials:TagCredentials",
                        "description": "The Cluster API Credentials.\n",
                        "secret": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the tag.\n"
                    },
                    "entityTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Optional List of String) The entity types of the tag, this always returns `[\"cf_entity\"]`. Refer to the [Entity types](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#entity-types) to learn more about entity types.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the tag, for example, `PII`.\n"
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaRegistryCluster": {
                        "$ref": "#/types/confluentcloud:index/TagSchemaRegistryCluster:TagSchemaRegistryCluster",
                        "willReplaceOnChanges": true
                    },
                    "version": {
                        "type": "integer",
                        "description": "(Optional Integer) The version, for example, `1`.\n"
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/tagBinding:TagBinding": {
            "description": "\n\n\n## Import\n\nYou can import a Tag Binding by using the Schema Registry cluster ID, Tag name, entity name and entity type in the format `\u003cSchema Registry Cluster Id\u003e/\u003cTag Name\u003e/\u003cEntity Name\u003e/\u003cEntity Type\u003e`, for example$ export IMPORT_SCHEMA_REGISTRY_API_KEY=\"\u003cschema_registry_api_key\u003e\" $ export IMPORT_SCHEMA_REGISTRY_API_SECRET=\"\u003cschema_registry_api_secret\u003e\" $ export IMPORT_SCHEMA_REGISTRY_REST_ENDPOINT=\"\u003cschema_registry_rest_endpoint\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/tagBinding:TagBinding main lsrc-8wrx70/PII/lsrc-8wrx70:.:100001/sr_schema\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/TagBindingCredentials:TagBindingCredentials",
                    "description": "The Cluster API Credentials.\n",
                    "secret": true
                },
                "entityName": {
                    "type": "string",
                    "description": "The qualified name of the entity., for example, `lsrc-8wrx70:.:100001`.\n"
                },
                "entityType": {
                    "type": "string",
                    "description": "The entity type, for example, `sr_schema`. Refer to the [Entity types](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#entity-types) to learn more about entity types.\n"
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).\n"
                },
                "schemaRegistryCluster": {
                    "$ref": "#/types/confluentcloud:index/TagBindingSchemaRegistryCluster:TagBindingSchemaRegistryCluster"
                },
                "tagName": {
                    "type": "string",
                    "description": "The name of the tag to be applied, for example, `PII`.\n"
                }
            },
            "required": [
                "entityName",
                "entityType",
                "tagName"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/TagBindingCredentials:TagBindingCredentials",
                    "description": "The Cluster API Credentials.\n",
                    "secret": true
                },
                "entityName": {
                    "type": "string",
                    "description": "The qualified name of the entity., for example, `lsrc-8wrx70:.:100001`.\n",
                    "willReplaceOnChanges": true
                },
                "entityType": {
                    "type": "string",
                    "description": "The entity type, for example, `sr_schema`. Refer to the [Entity types](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#entity-types) to learn more about entity types.\n",
                    "willReplaceOnChanges": true
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                    "willReplaceOnChanges": true
                },
                "schemaRegistryCluster": {
                    "$ref": "#/types/confluentcloud:index/TagBindingSchemaRegistryCluster:TagBindingSchemaRegistryCluster",
                    "willReplaceOnChanges": true
                },
                "tagName": {
                    "type": "string",
                    "description": "The name of the tag to be applied, for example, `PII`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "entityName",
                "entityType",
                "tagName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TagBinding resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/TagBindingCredentials:TagBindingCredentials",
                        "description": "The Cluster API Credentials.\n",
                        "secret": true
                    },
                    "entityName": {
                        "type": "string",
                        "description": "The qualified name of the entity., for example, `lsrc-8wrx70:.:100001`.\n",
                        "willReplaceOnChanges": true
                    },
                    "entityType": {
                        "type": "string",
                        "description": "The entity type, for example, `sr_schema`. Refer to the [Entity types](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#entity-types) to learn more about entity types.\n",
                        "willReplaceOnChanges": true
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaRegistryCluster": {
                        "$ref": "#/types/confluentcloud:index/TagBindingSchemaRegistryCluster:TagBindingSchemaRegistryCluster",
                        "willReplaceOnChanges": true
                    },
                    "tagName": {
                        "type": "string",
                        "description": "The name of the tag to be applied, for example, `PII`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/tfImporter:TfImporter": {
            "properties": {
                "resources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of resources names to export. Defaults to all exportable resources.\n"
                }
            },
            "inputProperties": {
                "resources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of resources names to export. Defaults to all exportable resources.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TfImporter resources.\n",
                "properties": {
                    "resources": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of resources names to export. Defaults to all exportable resources.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/transitGatewayAttachment:TransitGatewayAttachment": {
            "description": "\n\n\n## Import\n\nYou can import a Transit Gateway Attachment by using Environment ID and Transit Gateway Attachment ID, in the format `\u003cEnvironment ID\u003e/\u003cTransit Gateway Attachment ID\u003e`. The following example shows how to import a Transit Gateway Attachment$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/transitGatewayAttachment:TransitGatewayAttachment my_tgwa env-abc123/tgwa-abc123\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "aws": {
                    "$ref": "#/types/confluentcloud:index/TransitGatewayAttachmentAws:TransitGatewayAttachmentAws",
                    "description": "(Required Configuration Block) The AWS-specific Transit Gateway Attachment details. It supports the following:\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the Transit Gateway Attachment.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/TransitGatewayAttachmentEnvironment:TransitGatewayAttachmentEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n"
                },
                "network": {
                    "$ref": "#/types/confluentcloud:index/TransitGatewayAttachmentNetwork:TransitGatewayAttachmentNetwork",
                    "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n"
                }
            },
            "required": [
                "displayName",
                "environment",
                "network"
            ],
            "inputProperties": {
                "aws": {
                    "$ref": "#/types/confluentcloud:index/TransitGatewayAttachmentAws:TransitGatewayAttachmentAws",
                    "description": "(Required Configuration Block) The AWS-specific Transit Gateway Attachment details. It supports the following:\n",
                    "willReplaceOnChanges": true
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the Transit Gateway Attachment.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/TransitGatewayAttachmentEnvironment:TransitGatewayAttachmentEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                    "willReplaceOnChanges": true
                },
                "network": {
                    "$ref": "#/types/confluentcloud:index/TransitGatewayAttachmentNetwork:TransitGatewayAttachmentNetwork",
                    "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "environment",
                "network"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TransitGatewayAttachment resources.\n",
                "properties": {
                    "aws": {
                        "$ref": "#/types/confluentcloud:index/TransitGatewayAttachmentAws:TransitGatewayAttachmentAws",
                        "description": "(Required Configuration Block) The AWS-specific Transit Gateway Attachment details. It supports the following:\n",
                        "willReplaceOnChanges": true
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name of the Transit Gateway Attachment.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/TransitGatewayAttachmentEnvironment:TransitGatewayAttachmentEnvironment",
                        "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                        "willReplaceOnChanges": true
                    },
                    "network": {
                        "$ref": "#/types/confluentcloud:index/TransitGatewayAttachmentNetwork:TransitGatewayAttachmentNetwork",
                        "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "confluentcloud:index/getBusinessMetadata:getBusinessMetadata": {
            "inputs": {
                "description": "A collection of arguments for invoking getBusinessMetadata.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/getBusinessMetadataCredentials:getBusinessMetadataCredentials",
                        "secret": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Business Metadata, for example, `PII`.\n"
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).\n"
                    },
                    "schemaRegistryCluster": {
                        "$ref": "#/types/confluentcloud:index/getBusinessMetadataSchemaRegistryCluster:getBusinessMetadataSchemaRegistryCluster"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getBusinessMetadata.\n",
                "properties": {
                    "attributeDefinitions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getBusinessMetadataAttributeDefinition:getBusinessMetadataAttributeDefinition"
                        },
                        "description": "(Optional List) The list of attribute definitions (see [Business Metadata](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog.html#business-metadata-for-schemas) for more details):\n"
                    },
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/getBusinessMetadataCredentials:getBusinessMetadataCredentials",
                        "secret": true
                    },
                    "description": {
                        "type": "string",
                        "description": "(Optional String) The description of this attribute.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the Business Metadata, in the format `\u003cSchema Registry cluster ID\u003e/\u003cBusiness Metadata name\u003e`, for example, `lsrc-8wrx70/PII`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(Required String) The name of the attribute.\n"
                    },
                    "restEndpoint": {
                        "type": "string"
                    },
                    "schemaRegistryCluster": {
                        "$ref": "#/types/confluentcloud:index/getBusinessMetadataSchemaRegistryCluster:getBusinessMetadataSchemaRegistryCluster"
                    },
                    "version": {
                        "type": "integer",
                        "description": "(Required Integer) The version of the Business Metadata, for example, `1`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "attributeDefinitions",
                    "description",
                    "id",
                    "name",
                    "version"
                ]
            }
        },
        "confluentcloud:index/getBusinessMetadataBinding:getBusinessMetadataBinding": {
            "inputs": {
                "description": "A collection of arguments for invoking getBusinessMetadataBinding.\n",
                "properties": {
                    "businessMetadataName": {
                        "type": "string",
                        "description": "The name of the Business Metadata to be applied, for example, `PII`.\n"
                    },
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/getBusinessMetadataBindingCredentials:getBusinessMetadataBindingCredentials",
                        "secret": true
                    },
                    "entityName": {
                        "type": "string",
                        "description": "The qualified name of the entity., for example, `lsrc-8wrx70:.:100001`.\n"
                    },
                    "entityType": {
                        "type": "string",
                        "description": "The entity type, for example, `sr_schema`.\n"
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).\n"
                    },
                    "schemaRegistryCluster": {
                        "$ref": "#/types/confluentcloud:index/getBusinessMetadataBindingSchemaRegistryCluster:getBusinessMetadataBindingSchemaRegistryCluster"
                    }
                },
                "type": "object",
                "required": [
                    "businessMetadataName",
                    "entityName",
                    "entityType"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getBusinessMetadataBinding.\n",
                "properties": {
                    "attributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Optional Map) The block of key-value pair attributes.\n"
                    },
                    "businessMetadataName": {
                        "type": "string"
                    },
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/getBusinessMetadataBindingCredentials:getBusinessMetadataBindingCredentials",
                        "secret": true
                    },
                    "entityName": {
                        "type": "string"
                    },
                    "entityType": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the Business Metadata Binding, in the format `\u003cSchema Registry Cluster Id\u003e/\u003cBusiness Metadata Name\u003e/\u003cEntity Name\u003e/\u003cEntity Type\u003e`, for example, `lsrc-8wrx70/PII/lsrc-8wrx70:.:100001/sr_schema`.\n"
                    },
                    "restEndpoint": {
                        "type": "string"
                    },
                    "schemaRegistryCluster": {
                        "$ref": "#/types/confluentcloud:index/getBusinessMetadataBindingSchemaRegistryCluster:getBusinessMetadataBindingSchemaRegistryCluster"
                    }
                },
                "type": "object",
                "required": [
                    "attributes",
                    "businessMetadataName",
                    "entityName",
                    "entityType",
                    "id"
                ]
            }
        },
        "confluentcloud:index/getByokKey:getByokKey": {
            "description": "[![Preview](https://img.shields.io/badge/Lifecycle%20Stage-Preview-%2300afba)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n\u003e **Note:** `confluentcloud.ByokKey` data source is available in **Preview** for early adopters. Preview features are introduced to gather customer feedback. This feature should be used only for evaluation and non-production testing purposes or to provide feedback to Confluent, particularly as it becomes more widely available in follow-on editions.  \n**Preview** features are intended for evaluation use in development and testing environments only, and not for production use. The warranty, SLA, and Support Services provisions of your agreement with Confluent do not apply to Preview features. Preview features are considered to be a Proof of Concept as defined in the Confluent Cloud Terms of Service. Confluent may discontinue providing preview releases of the Preview features at any time in Confluent’s sole discretion.\n\n`confluentcloud.ByokKey` describes a BYOK Key data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst azureKey = confluentcloud.getByokKey({\n    id: \"cck-abcde\",\n});\nexport const byok = azureKey;\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nazure_key = confluentcloud.get_byok_key(id=\"cck-abcde\")\npulumi.export(\"byok\", azure_key)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var azureKey = ConfluentCloud.GetByokKey.Invoke(new()\n    {\n        Id = \"cck-abcde\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"byok\"] = azureKey,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tazureKey, err := confluentcloud.LookupByokKey(ctx, \u0026confluentcloud.LookupByokKeyArgs{\n\t\t\tId: \"cck-abcde\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"byok\", azureKey)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetByokKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var azureKey = ConfluentcloudFunctions.getByokKey(GetByokKeyArgs.builder()\n            .id(\"cck-abcde\")\n            .build());\n\n        ctx.export(\"byok\", azureKey.applyValue(getByokKeyResult -\u003e getByokKeyResult));\n    }\n}\n```\n```yaml\nvariables:\n  azureKey:\n    fn::invoke:\n      Function: confluentcloud:getByokKey\n      Arguments:\n        id: cck-abcde\noutputs:\n  byok: ${azureKey}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getByokKey.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the BYOK key, for example, `cck-abcde`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getByokKey.\n",
                "properties": {
                    "aws": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getByokKeyAw:getByokKeyAw"
                        },
                        "description": "(Optional Configuration Block) supports the following:\n"
                    },
                    "azures": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getByokKeyAzure:getByokKeyAzure"
                        },
                        "description": "(Optional Configuration Block) supports the following:\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the BYOK key, for example, `cck-abcde`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "aws",
                    "azures",
                    "id"
                ]
            }
        },
        "confluentcloud:index/getEnvironment:getEnvironment": {
            "description": "[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n`confluentcloud.Environment` describes an Environment data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleUsingIdEnvironment = confluentcloud.getEnvironment({\n    id: \"env-abc123\",\n});\nexport const exampleUsingId = exampleUsingIdEnvironment;\nconst exampleUsingNameEnvironment = confluentcloud.getEnvironment({\n    displayName: \"stag\",\n});\nconst exampleUsingNameServiceAccount = confluentcloud.getServiceAccount({\n    displayName: \"test_sa\",\n});\nconst test_role_binding = new confluentcloud.RoleBinding(\"test-role-binding\", {\n    principal: exampleUsingNameServiceAccount.then(exampleUsingNameServiceAccount =\u003e `User:${exampleUsingNameServiceAccount.id}`),\n    roleName: \"EnvironmentAdmin\",\n    crnPattern: exampleUsingNameEnvironment.then(exampleUsingNameEnvironment =\u003e exampleUsingNameEnvironment.resourceName),\n});\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_using_id_environment = confluentcloud.get_environment(id=\"env-abc123\")\npulumi.export(\"exampleUsingId\", example_using_id_environment)\nexample_using_name_environment = confluentcloud.get_environment(display_name=\"stag\")\nexample_using_name_service_account = confluentcloud.get_service_account(display_name=\"test_sa\")\ntest_role_binding = confluentcloud.RoleBinding(\"test-role-binding\",\n    principal=f\"User:{example_using_name_service_account.id}\",\n    role_name=\"EnvironmentAdmin\",\n    crn_pattern=example_using_name_environment.resource_name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUsingIdEnvironment = ConfluentCloud.GetEnvironment.Invoke(new()\n    {\n        Id = \"env-abc123\",\n    });\n\n    var exampleUsingNameEnvironment = ConfluentCloud.GetEnvironment.Invoke(new()\n    {\n        DisplayName = \"stag\",\n    });\n\n    var exampleUsingNameServiceAccount = ConfluentCloud.GetServiceAccount.Invoke(new()\n    {\n        DisplayName = \"test_sa\",\n    });\n\n    var test_role_binding = new ConfluentCloud.RoleBinding(\"test-role-binding\", new()\n    {\n        Principal = $\"User:{exampleUsingNameServiceAccount.Apply(getServiceAccountResult =\u003e getServiceAccountResult.Id)}\",\n        RoleName = \"EnvironmentAdmin\",\n        CrnPattern = exampleUsingNameEnvironment.Apply(getEnvironmentResult =\u003e getEnvironmentResult.ResourceName),\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"exampleUsingId\"] = exampleUsingIdEnvironment,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUsingIdEnvironment, err := confluentcloud.LookupEnvironment(ctx, \u0026confluentcloud.LookupEnvironmentArgs{\n\t\t\tId: pulumi.StringRef(\"env-abc123\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingId\", exampleUsingIdEnvironment)\n\t\texampleUsingNameEnvironment, err := confluentcloud.LookupEnvironment(ctx, \u0026confluentcloud.LookupEnvironmentArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"stag\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUsingNameServiceAccount, err := confluentcloud.LookupServiceAccount(ctx, \u0026confluentcloud.LookupServiceAccountArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"test_sa\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = confluentcloud.NewRoleBinding(ctx, \"test-role-binding\", \u0026confluentcloud.RoleBindingArgs{\n\t\t\tPrincipal:  pulumi.String(fmt.Sprintf(\"User:%v\", exampleUsingNameServiceAccount.Id)),\n\t\t\tRoleName:   pulumi.String(\"EnvironmentAdmin\"),\n\t\t\tCrnPattern: *pulumi.String(exampleUsingNameEnvironment.ResourceName),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetEnvironmentArgs;\nimport com.pulumi.confluentcloud.inputs.GetServiceAccountArgs;\nimport com.pulumi.confluentcloud.RoleBinding;\nimport com.pulumi.confluentcloud.RoleBindingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUsingIdEnvironment = ConfluentcloudFunctions.getEnvironment(GetEnvironmentArgs.builder()\n            .id(\"env-abc123\")\n            .build());\n\n        ctx.export(\"exampleUsingId\", exampleUsingIdEnvironment.applyValue(getEnvironmentResult -\u003e getEnvironmentResult));\n        final var exampleUsingNameEnvironment = ConfluentcloudFunctions.getEnvironment(GetEnvironmentArgs.builder()\n            .displayName(\"stag\")\n            .build());\n\n        final var exampleUsingNameServiceAccount = ConfluentcloudFunctions.getServiceAccount(GetServiceAccountArgs.builder()\n            .displayName(\"test_sa\")\n            .build());\n\n        var test_role_binding = new RoleBinding(\"test-role-binding\", RoleBindingArgs.builder()        \n            .principal(String.format(\"User:%s\", exampleUsingNameServiceAccount.applyValue(getServiceAccountResult -\u003e getServiceAccountResult.id())))\n            .roleName(\"EnvironmentAdmin\")\n            .crnPattern(exampleUsingNameEnvironment.applyValue(getEnvironmentResult -\u003e getEnvironmentResult.resourceName()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test-role-binding:\n    type: confluentcloud:RoleBinding\n    properties:\n      principal: User:${exampleUsingNameServiceAccount.id}\n      roleName: EnvironmentAdmin\n      crnPattern: ${exampleUsingNameEnvironment.resourceName}\nvariables:\n  exampleUsingIdEnvironment:\n    fn::invoke:\n      Function: confluentcloud:getEnvironment\n      Arguments:\n        id: env-abc123\n  exampleUsingNameEnvironment:\n    fn::invoke:\n      Function: confluentcloud:getEnvironment\n      Arguments:\n        displayName: stag\n  exampleUsingNameServiceAccount:\n    fn::invoke:\n      Function: confluentcloud:getServiceAccount\n      Arguments:\n        displayName: test_sa\noutputs:\n  exampleUsingId: ${exampleUsingIdEnvironment}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getEnvironment.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the Environment.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Environment, for example, `env-abc123`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getEnvironment.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "(Required String) A human-readable name for the Environment.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the Environment, for example, `env-abc123`.\n"
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "(Required String) The Confluent Resource Name of the Environment, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "displayName",
                    "id",
                    "resourceName"
                ]
            }
        },
        "confluentcloud:index/getIdentityPool:getIdentityPool": {
            "description": "[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n`confluentcloud.IdentityPool` describes an Identity Pool data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleUsingIdIdentityPool = confluentcloud.getIdentityPool({\n    id: \"pool-xyz456\",\n    identityProvider: {\n        id: \"op-abc123\",\n    },\n});\nexport const exampleUsingId = exampleUsingIdIdentityPool;\nconst exampleUsingNameIdentityPool = confluentcloud.getIdentityPool({\n    displayName: \"My Identity Pool\",\n    identityProvider: {\n        id: \"op-abc123\",\n    },\n});\nexport const exampleUsingName = exampleUsingNameIdentityPool;\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_using_id_identity_pool = confluentcloud.get_identity_pool(id=\"pool-xyz456\",\n    identity_provider=confluentcloud.GetIdentityPoolIdentityProviderArgs(\n        id=\"op-abc123\",\n    ))\npulumi.export(\"exampleUsingId\", example_using_id_identity_pool)\nexample_using_name_identity_pool = confluentcloud.get_identity_pool(display_name=\"My Identity Pool\",\n    identity_provider=confluentcloud.GetIdentityPoolIdentityProviderArgs(\n        id=\"op-abc123\",\n    ))\npulumi.export(\"exampleUsingName\", example_using_name_identity_pool)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUsingIdIdentityPool = ConfluentCloud.GetIdentityPool.Invoke(new()\n    {\n        Id = \"pool-xyz456\",\n        IdentityProvider = new ConfluentCloud.Inputs.GetIdentityPoolIdentityProviderInputArgs\n        {\n            Id = \"op-abc123\",\n        },\n    });\n\n    var exampleUsingNameIdentityPool = ConfluentCloud.GetIdentityPool.Invoke(new()\n    {\n        DisplayName = \"My Identity Pool\",\n        IdentityProvider = new ConfluentCloud.Inputs.GetIdentityPoolIdentityProviderInputArgs\n        {\n            Id = \"op-abc123\",\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"exampleUsingId\"] = exampleUsingIdIdentityPool,\n        [\"exampleUsingName\"] = exampleUsingNameIdentityPool,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUsingIdIdentityPool, err := confluentcloud.LookupIdentityPool(ctx, \u0026confluentcloud.LookupIdentityPoolArgs{\n\t\t\tId: pulumi.StringRef(\"pool-xyz456\"),\n\t\t\tIdentityProvider: confluentcloud.GetIdentityPoolIdentityProvider{\n\t\t\t\tId: \"op-abc123\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingId\", exampleUsingIdIdentityPool)\n\t\texampleUsingNameIdentityPool, err := confluentcloud.LookupIdentityPool(ctx, \u0026confluentcloud.LookupIdentityPoolArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"My Identity Pool\"),\n\t\t\tIdentityProvider: confluentcloud.GetIdentityPoolIdentityProvider{\n\t\t\t\tId: \"op-abc123\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingName\", exampleUsingNameIdentityPool)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetIdentityPoolArgs;\nimport com.pulumi.confluentcloud.inputs.GetIdentityPoolIdentityProviderArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUsingIdIdentityPool = ConfluentcloudFunctions.getIdentityPool(GetIdentityPoolArgs.builder()\n            .id(\"pool-xyz456\")\n            .identityProvider(GetIdentityPoolIdentityProviderArgs.builder()\n                .id(\"op-abc123\")\n                .build())\n            .build());\n\n        ctx.export(\"exampleUsingId\", exampleUsingIdIdentityPool.applyValue(getIdentityPoolResult -\u003e getIdentityPoolResult));\n        final var exampleUsingNameIdentityPool = ConfluentcloudFunctions.getIdentityPool(GetIdentityPoolArgs.builder()\n            .displayName(\"My Identity Pool\")\n            .identityProvider(GetIdentityPoolIdentityProviderArgs.builder()\n                .id(\"op-abc123\")\n                .build())\n            .build());\n\n        ctx.export(\"exampleUsingName\", exampleUsingNameIdentityPool.applyValue(getIdentityPoolResult -\u003e getIdentityPoolResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleUsingIdIdentityPool:\n    fn::invoke:\n      Function: confluentcloud:getIdentityPool\n      Arguments:\n        id: pool-xyz456\n        identityProvider:\n          id: op-abc123\n  exampleUsingNameIdentityPool:\n    fn::invoke:\n      Function: confluentcloud:getIdentityPool\n      Arguments:\n        displayName: My Identity Pool\n        identityProvider:\n          id: op-abc123\noutputs:\n  exampleUsingId: ${exampleUsingIdIdentityPool}\n  exampleUsingName: ${exampleUsingNameIdentityPool}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIdentityPool.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the Identity Pool.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Identity Provider associated with the Identity Pool, for example, `op-abc123`.\n"
                    },
                    "identityProvider": {
                        "$ref": "#/types/confluentcloud:index/getIdentityPoolIdentityProvider:getIdentityPoolIdentityProvider",
                        "description": "(Required Configuration Block) supports the following:\n"
                    }
                },
                "type": "object",
                "required": [
                    "identityProvider"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIdentityPool.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "(Required String) A description for the Identity Pool.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "(Required String) A human-readable name for the Identity Pool.\n"
                    },
                    "filter": {
                        "type": "string",
                        "description": "(Required String) A filter expression in [Supported Common Expression Language (CEL)](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/identity-pools.html#supported-common-expression-language-cel-filters) that specifies which identities can authenticate using your identity pool (see [Set identity pool filters](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/identity-pools.html#set-identity-pool-filters) for more details).\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the Identity Provider associated with the Identity Pool, for example, `op-abc123`.\n"
                    },
                    "identityClaim": {
                        "type": "string",
                        "description": "(Required String) The JSON Web Token (JWT) claim to extract the authenticating identity to Confluent resources from (see [Registered Claim Names](https://datatracker.ietf.org/doc/html/rfc7519#section-4.1) for more details). This appears in the audit log records, showing, for example, that \"identity Z used identity pool X to access topic A\".\n"
                    },
                    "identityProvider": {
                        "$ref": "#/types/confluentcloud:index/getIdentityPoolIdentityProvider:getIdentityPoolIdentityProvider",
                        "description": "(Required Configuration Block) supports the following:\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "filter",
                    "id",
                    "identityClaim",
                    "identityProvider"
                ]
            }
        },
        "confluentcloud:index/getIdentityProvider:getIdentityProvider": {
            "description": "[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n`confluentcloud.IdentityProvider` describes an Identity Provider data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleUsingIdIdentityProvider = confluentcloud.getIdentityProvider({\n    id: \"op-abc123\",\n});\nexport const exampleUsingId = exampleUsingIdIdentityProvider;\nconst exampleUsingNameIdentityProvider = confluentcloud.getIdentityProvider({\n    displayName: \"My OIDC Provider: Azure AD\",\n});\nexport const exampleUsingName = exampleUsingNameIdentityProvider;\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_using_id_identity_provider = confluentcloud.get_identity_provider(id=\"op-abc123\")\npulumi.export(\"exampleUsingId\", example_using_id_identity_provider)\nexample_using_name_identity_provider = confluentcloud.get_identity_provider(display_name=\"My OIDC Provider: Azure AD\")\npulumi.export(\"exampleUsingName\", example_using_name_identity_provider)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUsingIdIdentityProvider = ConfluentCloud.GetIdentityProvider.Invoke(new()\n    {\n        Id = \"op-abc123\",\n    });\n\n    var exampleUsingNameIdentityProvider = ConfluentCloud.GetIdentityProvider.Invoke(new()\n    {\n        DisplayName = \"My OIDC Provider: Azure AD\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"exampleUsingId\"] = exampleUsingIdIdentityProvider,\n        [\"exampleUsingName\"] = exampleUsingNameIdentityProvider,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUsingIdIdentityProvider, err := confluentcloud.LookupIdentityProvider(ctx, \u0026confluentcloud.LookupIdentityProviderArgs{\n\t\t\tId: pulumi.StringRef(\"op-abc123\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingId\", exampleUsingIdIdentityProvider)\n\t\texampleUsingNameIdentityProvider, err := confluentcloud.LookupIdentityProvider(ctx, \u0026confluentcloud.LookupIdentityProviderArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"My OIDC Provider: Azure AD\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingName\", exampleUsingNameIdentityProvider)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetIdentityProviderArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUsingIdIdentityProvider = ConfluentcloudFunctions.getIdentityProvider(GetIdentityProviderArgs.builder()\n            .id(\"op-abc123\")\n            .build());\n\n        ctx.export(\"exampleUsingId\", exampleUsingIdIdentityProvider.applyValue(getIdentityProviderResult -\u003e getIdentityProviderResult));\n        final var exampleUsingNameIdentityProvider = ConfluentcloudFunctions.getIdentityProvider(GetIdentityProviderArgs.builder()\n            .displayName(\"My OIDC Provider: Azure AD\")\n            .build());\n\n        ctx.export(\"exampleUsingName\", exampleUsingNameIdentityProvider.applyValue(getIdentityProviderResult -\u003e getIdentityProviderResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleUsingIdIdentityProvider:\n    fn::invoke:\n      Function: confluentcloud:getIdentityProvider\n      Arguments:\n        id: op-abc123\n  exampleUsingNameIdentityProvider:\n    fn::invoke:\n      Function: confluentcloud:getIdentityProvider\n      Arguments:\n        displayName: 'My OIDC Provider: Azure AD'\noutputs:\n  exampleUsingId: ${exampleUsingIdIdentityProvider}\n  exampleUsingName: ${exampleUsingNameIdentityProvider}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIdentityProvider.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the Identity Provider.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Identity Provider, for example, `op-abc123`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIdentityProvider.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "(Required String) A description for the Identity Provider.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "(Required String) A human-readable name for the Identity Provider.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the Identity Provider, for example, `op-abc123`.\n"
                    },
                    "issuer": {
                        "type": "string",
                        "description": "(Required String) A publicly reachable issuer URI for the Identity Provider. The unique issuer URI string represents the entity for issuing tokens.\n"
                    },
                    "jwksUri": {
                        "type": "string",
                        "description": "(Required String) A publicly reachable JSON Web Key Set (JWKS) URI for the Identity Provider. A JSON Web Key Set (JWKS) provides a set of keys containing the public keys used to verify any JSON Web Token (JWT) issued by your OAuth 2.0 identity provider.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id",
                    "issuer",
                    "jwksUri"
                ]
            }
        },
        "confluentcloud:index/getInvitation:getInvitation": {
            "description": "[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n`confluentcloud.Invitation` describes an Invitation data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst main = confluentcloud.getInvitation({\n    id: \"i-gxxn1\",\n});\nexport const invitation = main;\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nmain = confluentcloud.get_invitation(id=\"i-gxxn1\")\npulumi.export(\"invitation\", main)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = ConfluentCloud.GetInvitation.Invoke(new()\n    {\n        Id = \"i-gxxn1\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"invitation\"] = main,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := confluentcloud.LookupInvitation(ctx, \u0026confluentcloud.LookupInvitationArgs{\n\t\t\tId: \"i-gxxn1\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"invitation\", main)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetInvitationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var main = ConfluentcloudFunctions.getInvitation(GetInvitationArgs.builder()\n            .id(\"i-gxxn1\")\n            .build());\n\n        ctx.export(\"invitation\", main.applyValue(getInvitationResult -\u003e getInvitationResult));\n    }\n}\n```\n```yaml\nvariables:\n  main:\n    fn::invoke:\n      Function: confluentcloud:getInvitation\n      Arguments:\n        id: i-gxxn1\noutputs:\n  invitation: ${main}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getInvitation.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the Invitation, for example, `i-zyw30`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getInvitation.\n",
                "properties": {
                    "acceptedAt": {
                        "type": "string",
                        "description": "(Optional String) The timestamp that the invitation was accepted.\n"
                    },
                    "authType": {
                        "type": "string",
                        "description": "(Optional String) Accepted values are: `AUTH_TYPE_LOCAL` and `AUTH_TYPE_SSO`. The user/invitee's authentication type. Note that only the [`OrganizationAdmin role`](https://docs.confluent.io/cloud/current/access-management/access-control/cloud-rbac.html#organizationadmin) can invite AUTH_TYPE_LOCAL users to SSO organizations. The user's auth_type is set as AUTH_TYPE_SSO by default if the organization has SSO enabled. Otherwise, the user's auth_type is AUTH_TYPE_LOCAL by default.\n"
                    },
                    "creators": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getInvitationCreator:getInvitationCreator"
                        },
                        "description": "(Required Configuration Block) supports the following:\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "(Required String) The user/invitee's email address.\n"
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "(Optional String) The timestamp that the invitation will expire.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The id of invitation creator.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "(Optional String) The status of invitations. Accepted values are: `INVITE_STATUS_SENT`,`INVITE_STATUS_STAGED`,`INVITE_STATUS_ACCEPTED`,`INVITE_STATUS_EXPIRED`, and `INVITE_STATUS_DEACTIVATED`.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getInvitationUser:getInvitationUser"
                        },
                        "description": "(Required Configuration Block) supports the following:\n"
                    }
                },
                "type": "object",
                "required": [
                    "acceptedAt",
                    "authType",
                    "creators",
                    "email",
                    "expiresAt",
                    "id",
                    "status",
                    "users"
                ]
            }
        },
        "confluentcloud:index/getKafkaClientQuota:getKafkaClientQuota": {
            "description": "[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n`confluentcloud.KafkaClientQuota` describes a Kafka Client Quota.\n\n\u003e **Note:** See [Control application usage with Client Quotas](https://docs.confluent.io/cloud/current/clusters/client-quotas.html#control-application-usage-with-client-quotas) for more details.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleKafkaClientQuota = confluentcloud.getKafkaClientQuota({\n    id: \"cq-abc123\",\n});\nexport const example = exampleKafkaClientQuota;\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_kafka_client_quota = confluentcloud.get_kafka_client_quota(id=\"cq-abc123\")\npulumi.export(\"example\", example_kafka_client_quota)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleKafkaClientQuota = ConfluentCloud.GetKafkaClientQuota.Invoke(new()\n    {\n        Id = \"cq-abc123\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"example\"] = exampleKafkaClientQuota,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleKafkaClientQuota, err := confluentcloud.LookupKafkaClientQuota(ctx, \u0026confluentcloud.LookupKafkaClientQuotaArgs{\n\t\t\tId: \"cq-abc123\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"example\", exampleKafkaClientQuota)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetKafkaClientQuotaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleKafkaClientQuota = ConfluentcloudFunctions.getKafkaClientQuota(GetKafkaClientQuotaArgs.builder()\n            .id(\"cq-abc123\")\n            .build());\n\n        ctx.export(\"example\", exampleKafkaClientQuota.applyValue(getKafkaClientQuotaResult -\u003e getKafkaClientQuotaResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleKafkaClientQuota:\n    fn::invoke:\n      Function: confluentcloud:getKafkaClientQuota\n      Arguments:\n        id: cq-abc123\noutputs:\n  example: ${exampleKafkaClientQuota}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getKafkaClientQuota.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the Kafka Client Quota (for example, `cq-abc123`).\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getKafkaClientQuota.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "(Required String) The description of the Kafka Client Quota.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "(Required String) The name of the Kafka Client Quota.\n"
                    },
                    "environments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getKafkaClientQuotaEnvironment:getKafkaClientQuotaEnvironment"
                        },
                        "description": "(Required Configuration Block) supports the following:\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the Environment that the corresponding Kafka Cluster belongs to, for example, `env-abc123`.\n"
                    },
                    "kafkaClusters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getKafkaClientQuotaKafkaCluster:getKafkaClientQuotaKafkaCluster"
                        },
                        "description": "(Required Configuration Block) supports the following:\n"
                    },
                    "principals": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Required Set of Strings) The list of principals (i.e., service accounts or identity pools) to apply the Kafka Client Quota to. Use the special name, \"\u003cdefault\u003e\", to represent the default quota for all users and service accounts.\n"
                    },
                    "throughputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getKafkaClientQuotaThroughput:getKafkaClientQuotaThroughput"
                        },
                        "description": "(Required Configuration Block) supports the following:\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "environments",
                    "id",
                    "kafkaClusters",
                    "principals",
                    "throughputs"
                ]
            }
        },
        "confluentcloud:index/getKafkaCluster:getKafkaCluster": {
            "description": "[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n`confluentcloud.KafkaCluster` describes a Kafka cluster data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleUsingId = confluentcloud.getKafkaCluster({\n    id: \"lkc-abc123\",\n    environment: {\n        id: \"env-xyz456\",\n    },\n});\nconst test_sa = new confluentcloud.ServiceAccount(\"test-sa\", {description: exampleUsingId.then(exampleUsingId =\u003e `app_mgr for ${exampleUsingId.displayName}`)});\nconst exampleUsingNameKafkaCluster = confluentcloud.getKafkaCluster({\n    displayName: \"basic_kafka_cluster\",\n    environment: {\n        id: \"env-xyz456\",\n    },\n});\nexport const exampleUsingName = exampleUsingNameKafkaCluster;\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_using_id = confluentcloud.get_kafka_cluster(id=\"lkc-abc123\",\n    environment=confluentcloud.GetKafkaClusterEnvironmentArgs(\n        id=\"env-xyz456\",\n    ))\ntest_sa = confluentcloud.ServiceAccount(\"test-sa\", description=f\"app_mgr for {example_using_id.display_name}\")\nexample_using_name_kafka_cluster = confluentcloud.get_kafka_cluster(display_name=\"basic_kafka_cluster\",\n    environment=confluentcloud.GetKafkaClusterEnvironmentArgs(\n        id=\"env-xyz456\",\n    ))\npulumi.export(\"exampleUsingName\", example_using_name_kafka_cluster)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUsingId = ConfluentCloud.GetKafkaCluster.Invoke(new()\n    {\n        Id = \"lkc-abc123\",\n        Environment = new ConfluentCloud.Inputs.GetKafkaClusterEnvironmentInputArgs\n        {\n            Id = \"env-xyz456\",\n        },\n    });\n\n    var test_sa = new ConfluentCloud.ServiceAccount(\"test-sa\", new()\n    {\n        Description = $\"app_mgr for {exampleUsingId.Apply(getKafkaClusterResult =\u003e getKafkaClusterResult.DisplayName)}\",\n    });\n\n    var exampleUsingNameKafkaCluster = ConfluentCloud.GetKafkaCluster.Invoke(new()\n    {\n        DisplayName = \"basic_kafka_cluster\",\n        Environment = new ConfluentCloud.Inputs.GetKafkaClusterEnvironmentInputArgs\n        {\n            Id = \"env-xyz456\",\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"exampleUsingName\"] = exampleUsingNameKafkaCluster,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUsingId, err := confluentcloud.LookupKafkaCluster(ctx, \u0026confluentcloud.LookupKafkaClusterArgs{\n\t\t\tId: pulumi.StringRef(\"lkc-abc123\"),\n\t\t\tEnvironment: confluentcloud.GetKafkaClusterEnvironment{\n\t\t\t\tId: \"env-xyz456\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = confluentcloud.NewServiceAccount(ctx, \"test-sa\", \u0026confluentcloud.ServiceAccountArgs{\n\t\t\tDescription: pulumi.String(fmt.Sprintf(\"app_mgr for %v\", exampleUsingId.DisplayName)),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUsingNameKafkaCluster, err := confluentcloud.LookupKafkaCluster(ctx, \u0026confluentcloud.LookupKafkaClusterArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"basic_kafka_cluster\"),\n\t\t\tEnvironment: confluentcloud.GetKafkaClusterEnvironment{\n\t\t\t\tId: \"env-xyz456\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingName\", exampleUsingNameKafkaCluster)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetKafkaClusterArgs;\nimport com.pulumi.confluentcloud.inputs.GetKafkaClusterEnvironmentArgs;\nimport com.pulumi.confluentcloud.ServiceAccount;\nimport com.pulumi.confluentcloud.ServiceAccountArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUsingId = ConfluentcloudFunctions.getKafkaCluster(GetKafkaClusterArgs.builder()\n            .id(\"lkc-abc123\")\n            .environment(GetKafkaClusterEnvironmentArgs.builder()\n                .id(\"env-xyz456\")\n                .build())\n            .build());\n\n        var test_sa = new ServiceAccount(\"test-sa\", ServiceAccountArgs.builder()        \n            .description(String.format(\"app_mgr for %s\", exampleUsingId.applyValue(getKafkaClusterResult -\u003e getKafkaClusterResult.displayName())))\n            .build());\n\n        final var exampleUsingNameKafkaCluster = ConfluentcloudFunctions.getKafkaCluster(GetKafkaClusterArgs.builder()\n            .displayName(\"basic_kafka_cluster\")\n            .environment(GetKafkaClusterEnvironmentArgs.builder()\n                .id(\"env-xyz456\")\n                .build())\n            .build());\n\n        ctx.export(\"exampleUsingName\", exampleUsingNameKafkaCluster.applyValue(getKafkaClusterResult -\u003e getKafkaClusterResult));\n    }\n}\n```\n```yaml\nresources:\n  test-sa:\n    type: confluentcloud:ServiceAccount\n    properties:\n      description: app_mgr for ${exampleUsingId.displayName}\nvariables:\n  exampleUsingId:\n    fn::invoke:\n      Function: confluentcloud:getKafkaCluster\n      Arguments:\n        id: lkc-abc123\n        environment:\n          id: env-xyz456\n  exampleUsingNameKafkaCluster:\n    fn::invoke:\n      Function: confluentcloud:getKafkaCluster\n      Arguments:\n        displayName: basic_kafka_cluster\n        environment:\n          id: env-xyz456\noutputs:\n  exampleUsingName: ${exampleUsingNameKafkaCluster}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getKafkaCluster.\n",
                "properties": {
                    "basics": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getKafkaClusterBasic:getKafkaClusterBasic"
                        },
                        "description": "(Optional Configuration Block) The configuration of the Basic Kafka cluster.\n"
                    },
                    "dedicated": {
                        "$ref": "#/types/confluentcloud:index/getKafkaClusterDedicated:getKafkaClusterDedicated",
                        "description": "(Optional Configuration Block) The configuration of the Dedicated Kafka cluster. It supports the following:\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the Kafka cluster.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getKafkaClusterEnvironment:getKafkaClusterEnvironment"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Environment that the Kafka cluster belongs to, for example, `env-xyz456`.\n"
                    },
                    "standards": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getKafkaClusterStandard:getKafkaClusterStandard"
                        },
                        "description": "(Optional Configuration Block) The configuration of the Standard Kafka cluster.\n"
                    }
                },
                "type": "object",
                "required": [
                    "environment"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getKafkaCluster.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "(Required String) An API Version of the schema version of the Kafka cluster, for example, `cmk/v2`.\n"
                    },
                    "availability": {
                        "type": "string",
                        "description": "(Required String) The availability zone configuration of the Kafka cluster. Accepted values are: `SINGLE_ZONE` and `MULTI_ZONE`.\n"
                    },
                    "basics": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getKafkaClusterBasic:getKafkaClusterBasic"
                        },
                        "description": "(Optional Configuration Block) The configuration of the Basic Kafka cluster.\n"
                    },
                    "bootstrapEndpoint": {
                        "type": "string",
                        "description": "(Required String) The bootstrap endpoint used by Kafka clients to connect to the Kafka cluster. (e.g., `pkc-00000.us-central1.gcp.confluent.cloud:9092`).\n"
                    },
                    "byokKeys": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getKafkaClusterByokKey:getKafkaClusterByokKey"
                        },
                        "description": "(Optional Configuration Block) supports the following:\n"
                    },
                    "cloud": {
                        "type": "string",
                        "description": "(Required String) The cloud service provider that runs the Kafka cluster. Accepted values are: `AWS`, `AZURE`, and `GCP`.\n"
                    },
                    "dedicated": {
                        "$ref": "#/types/confluentcloud:index/getKafkaClusterDedicated:getKafkaClusterDedicated",
                        "description": "(Optional Configuration Block) The configuration of the Dedicated Kafka cluster. It supports the following:\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "(Required String) The name of the Kafka cluster.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getKafkaClusterEnvironment:getKafkaClusterEnvironment"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the Confluent key that is used to encrypt the data in the Kafka cluster, for example, `cck-lye5m`.\n"
                    },
                    "kind": {
                        "type": "string",
                        "description": "(Required String) A kind of the Kafka cluster, for example, `Cluster`.\n"
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getKafkaClusterNetwork:getKafkaClusterNetwork"
                        },
                        "description": "(Optional Configuration Block) supports the following:\n"
                    },
                    "rbacCrn": {
                        "type": "string",
                        "description": "(Required String) The Confluent Resource Name of the Kafka cluster, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/cloud-cluster=lkc-abc123`.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "(Required String) The cloud service provider region where the Kafka cluster is running, for example, `us-west-2`. See [Cloud Providers and Regions](https://docs.confluent.io/cloud/current/clusters/regions.html#cloud-providers-and-regions) for a full list of options for AWS, Azure, and GCP.\n"
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "(Required String) The REST endpoint of the Kafka cluster (e.g., `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n"
                    },
                    "standards": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getKafkaClusterStandard:getKafkaClusterStandard"
                        },
                        "description": "(Optional Configuration Block) The configuration of the Standard Kafka cluster.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "availability",
                    "bootstrapEndpoint",
                    "byokKeys",
                    "cloud",
                    "displayName",
                    "environment",
                    "id",
                    "kind",
                    "networks",
                    "rbacCrn",
                    "region",
                    "restEndpoint"
                ]
            }
        },
        "confluentcloud:index/getKafkaTopic:getKafkaTopic": {
            "inputs": {
                "description": "A collection of arguments for invoking getKafkaTopic.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/getKafkaTopicCredentials:getKafkaTopicCredentials",
                        "secret": true
                    },
                    "kafkaCluster": {
                        "$ref": "#/types/confluentcloud:index/getKafkaTopicKafkaCluster:getKafkaTopicKafkaCluster"
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "The REST endpoint of the Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n"
                    },
                    "topicName": {
                        "type": "string",
                        "description": "The name of the topic, for example, `orders-1`. The topic name can be up to 255 characters in length and can contain only alphanumeric characters, hyphens, and underscores.\n"
                    }
                },
                "type": "object",
                "required": [
                    "restEndpoint",
                    "topicName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getKafkaTopic.\n",
                "properties": {
                    "config": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Optional Map) The custom topic settings:\n"
                    },
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/getKafkaTopicCredentials:getKafkaTopicCredentials",
                        "secret": true
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "kafkaCluster": {
                        "$ref": "#/types/confluentcloud:index/getKafkaTopicKafkaCluster:getKafkaTopicKafkaCluster"
                    },
                    "partitionsCount": {
                        "type": "integer",
                        "description": "(Required Number) The number of partitions to create in the topic. Defaults to `6`.\n"
                    },
                    "restEndpoint": {
                        "type": "string"
                    },
                    "topicName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "partitionsCount",
                    "restEndpoint",
                    "topicName",
                    "id"
                ]
            }
        },
        "confluentcloud:index/getKsqlCluster:getKsqlCluster": {
            "description": "## # confluentcloud.KsqlCluster Data Source\n\n[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n`confluentcloud.KsqlCluster` describes a ksqlDB cluster data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleUsingIdKsqlCluster = confluentcloud.getKsqlCluster({\n    id: \"lksqlc-abc123\",\n    environment: {\n        id: \"env-xyz456\",\n    },\n});\nexport const exampleUsingId = exampleUsingIdKsqlCluster;\nconst exampleUsingNameKsqlCluster = confluentcloud.getKsqlCluster({\n    displayName: \"ksqldb_cluster\",\n    environment: {\n        id: \"env-xyz456\",\n    },\n});\nexport const exampleUsingName = exampleUsingNameKsqlCluster;\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_using_id_ksql_cluster = confluentcloud.get_ksql_cluster(id=\"lksqlc-abc123\",\n    environment=confluentcloud.GetKsqlClusterEnvironmentArgs(\n        id=\"env-xyz456\",\n    ))\npulumi.export(\"exampleUsingId\", example_using_id_ksql_cluster)\nexample_using_name_ksql_cluster = confluentcloud.get_ksql_cluster(display_name=\"ksqldb_cluster\",\n    environment=confluentcloud.GetKsqlClusterEnvironmentArgs(\n        id=\"env-xyz456\",\n    ))\npulumi.export(\"exampleUsingName\", example_using_name_ksql_cluster)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUsingIdKsqlCluster = ConfluentCloud.GetKsqlCluster.Invoke(new()\n    {\n        Id = \"lksqlc-abc123\",\n        Environment = new ConfluentCloud.Inputs.GetKsqlClusterEnvironmentInputArgs\n        {\n            Id = \"env-xyz456\",\n        },\n    });\n\n    var exampleUsingNameKsqlCluster = ConfluentCloud.GetKsqlCluster.Invoke(new()\n    {\n        DisplayName = \"ksqldb_cluster\",\n        Environment = new ConfluentCloud.Inputs.GetKsqlClusterEnvironmentInputArgs\n        {\n            Id = \"env-xyz456\",\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"exampleUsingId\"] = exampleUsingIdKsqlCluster,\n        [\"exampleUsingName\"] = exampleUsingNameKsqlCluster,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUsingIdKsqlCluster, err := confluentcloud.LookupKsqlCluster(ctx, \u0026confluentcloud.LookupKsqlClusterArgs{\n\t\t\tId: pulumi.StringRef(\"lksqlc-abc123\"),\n\t\t\tEnvironment: confluentcloud.GetKsqlClusterEnvironment{\n\t\t\t\tId: \"env-xyz456\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingId\", exampleUsingIdKsqlCluster)\n\t\texampleUsingNameKsqlCluster, err := confluentcloud.LookupKsqlCluster(ctx, \u0026confluentcloud.LookupKsqlClusterArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"ksqldb_cluster\"),\n\t\t\tEnvironment: confluentcloud.GetKsqlClusterEnvironment{\n\t\t\t\tId: \"env-xyz456\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingName\", exampleUsingNameKsqlCluster)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetKsqlClusterArgs;\nimport com.pulumi.confluentcloud.inputs.GetKsqlClusterEnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUsingIdKsqlCluster = ConfluentcloudFunctions.getKsqlCluster(GetKsqlClusterArgs.builder()\n            .id(\"lksqlc-abc123\")\n            .environment(GetKsqlClusterEnvironmentArgs.builder()\n                .id(\"env-xyz456\")\n                .build())\n            .build());\n\n        ctx.export(\"exampleUsingId\", exampleUsingIdKsqlCluster.applyValue(getKsqlClusterResult -\u003e getKsqlClusterResult));\n        final var exampleUsingNameKsqlCluster = ConfluentcloudFunctions.getKsqlCluster(GetKsqlClusterArgs.builder()\n            .displayName(\"ksqldb_cluster\")\n            .environment(GetKsqlClusterEnvironmentArgs.builder()\n                .id(\"env-xyz456\")\n                .build())\n            .build());\n\n        ctx.export(\"exampleUsingName\", exampleUsingNameKsqlCluster.applyValue(getKsqlClusterResult -\u003e getKsqlClusterResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleUsingIdKsqlCluster:\n    fn::invoke:\n      Function: confluentcloud:getKsqlCluster\n      Arguments:\n        id: lksqlc-abc123\n        environment:\n          id: env-xyz456\n  exampleUsingNameKsqlCluster:\n    fn::invoke:\n      Function: confluentcloud:getKsqlCluster\n      Arguments:\n        displayName: ksqldb_cluster\n        environment:\n          id: env-xyz456\noutputs:\n  exampleUsingId: ${exampleUsingIdKsqlCluster}\n  exampleUsingName: ${exampleUsingNameKsqlCluster}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getKsqlCluster.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "The name of the ksqlDB cluster.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getKsqlClusterEnvironment:getKsqlClusterEnvironment"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Environment that the ksqlDB cluster belongs to, for example, `env-xyz456`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "environment"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getKsqlCluster.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "(Required String) An API Version of the schema version of the ksqlDB cluster, for example, `ksqldbcm/v2`.\n"
                    },
                    "credentialIdentities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getKsqlClusterCredentialIdentity:getKsqlClusterCredentialIdentity"
                        },
                        "description": "(Optional Configuration Block) supports the following:\n"
                    },
                    "csu": {
                        "type": "integer",
                        "description": "(Required Number) The number of CSUs (Confluent Streaming Units) in the ksqlDB cluster.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getKsqlClusterEnvironment:getKsqlClusterEnvironment"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the service or user account that the ksqlDB cluster belongs to, for example, `sa-abc123`.\n"
                    },
                    "kafkaClusters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getKsqlClusterKafkaCluster:getKsqlClusterKafkaCluster"
                        },
                        "description": "(Optional Configuration Block) supports the following:\n"
                    },
                    "kind": {
                        "type": "string",
                        "description": "(Required String) A kind of the ksqlDB cluster, for example, `Cluster`.\n"
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "(Required String) The Confluent Resource Name of the ksqlDB cluster.\n"
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "(Required String) The API endpoint of the ksqlDB cluster, for example, `https://pksqlc-00000.us-central1.gcp.glb.confluent.cloud`.\n"
                    },
                    "storage": {
                        "type": "integer",
                        "description": "(Required Integer) The amount of storage (in GB) provisioned to this cluster.\n"
                    },
                    "topicPrefix": {
                        "type": "string",
                        "description": "(Required String) Topic name prefix used by this ksqlDB cluster. Used to assign ACLs for this ksqlDB cluster to use, for example, `pksqlc-00000`.\n"
                    },
                    "useDetailedProcessingLog": {
                        "type": "boolean",
                        "description": "(Optional Boolean) Controls whether the row data should be included in the processing log topic.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "credentialIdentities",
                    "csu",
                    "displayName",
                    "environment",
                    "id",
                    "kafkaClusters",
                    "kind",
                    "resourceName",
                    "restEndpoint",
                    "storage",
                    "topicPrefix",
                    "useDetailedProcessingLog"
                ]
            }
        },
        "confluentcloud:index/getNetwork:getNetwork": {
            "description": "[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n`confluentcloud.Network` describes a Network data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleUsingId = confluentcloud.getNetwork({\n    id: \"n-abc123\",\n    environment: {\n        id: \"env-xyz456\",\n    },\n});\nconst test_sa = new confluentcloud.ServiceAccount(\"test-sa\", {description: exampleUsingId.then(exampleUsingId =\u003e `test_sa for ${exampleUsingId.displayName}`)});\nconst exampleUsingNameNetwork = confluentcloud.getNetwork({\n    displayName: \"my_network\",\n    environment: {\n        id: \"env-xyz456\",\n    },\n});\nexport const exampleUsingName = exampleUsingNameNetwork;\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_using_id = confluentcloud.get_network(id=\"n-abc123\",\n    environment=confluentcloud.GetNetworkEnvironmentArgs(\n        id=\"env-xyz456\",\n    ))\ntest_sa = confluentcloud.ServiceAccount(\"test-sa\", description=f\"test_sa for {example_using_id.display_name}\")\nexample_using_name_network = confluentcloud.get_network(display_name=\"my_network\",\n    environment=confluentcloud.GetNetworkEnvironmentArgs(\n        id=\"env-xyz456\",\n    ))\npulumi.export(\"exampleUsingName\", example_using_name_network)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUsingId = ConfluentCloud.GetNetwork.Invoke(new()\n    {\n        Id = \"n-abc123\",\n        Environment = new ConfluentCloud.Inputs.GetNetworkEnvironmentInputArgs\n        {\n            Id = \"env-xyz456\",\n        },\n    });\n\n    var test_sa = new ConfluentCloud.ServiceAccount(\"test-sa\", new()\n    {\n        Description = $\"test_sa for {exampleUsingId.Apply(getNetworkResult =\u003e getNetworkResult.DisplayName)}\",\n    });\n\n    var exampleUsingNameNetwork = ConfluentCloud.GetNetwork.Invoke(new()\n    {\n        DisplayName = \"my_network\",\n        Environment = new ConfluentCloud.Inputs.GetNetworkEnvironmentInputArgs\n        {\n            Id = \"env-xyz456\",\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"exampleUsingName\"] = exampleUsingNameNetwork,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUsingId, err := confluentcloud.LookupNetwork(ctx, \u0026confluentcloud.LookupNetworkArgs{\n\t\t\tId: pulumi.StringRef(\"n-abc123\"),\n\t\t\tEnvironment: confluentcloud.GetNetworkEnvironment{\n\t\t\t\tId: \"env-xyz456\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = confluentcloud.NewServiceAccount(ctx, \"test-sa\", \u0026confluentcloud.ServiceAccountArgs{\n\t\t\tDescription: pulumi.String(fmt.Sprintf(\"test_sa for %v\", exampleUsingId.DisplayName)),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUsingNameNetwork, err := confluentcloud.LookupNetwork(ctx, \u0026confluentcloud.LookupNetworkArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"my_network\"),\n\t\t\tEnvironment: confluentcloud.GetNetworkEnvironment{\n\t\t\t\tId: \"env-xyz456\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingName\", exampleUsingNameNetwork)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetNetworkArgs;\nimport com.pulumi.confluentcloud.inputs.GetNetworkEnvironmentArgs;\nimport com.pulumi.confluentcloud.ServiceAccount;\nimport com.pulumi.confluentcloud.ServiceAccountArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUsingId = ConfluentcloudFunctions.getNetwork(GetNetworkArgs.builder()\n            .id(\"n-abc123\")\n            .environment(GetNetworkEnvironmentArgs.builder()\n                .id(\"env-xyz456\")\n                .build())\n            .build());\n\n        var test_sa = new ServiceAccount(\"test-sa\", ServiceAccountArgs.builder()        \n            .description(String.format(\"test_sa for %s\", exampleUsingId.applyValue(getNetworkResult -\u003e getNetworkResult.displayName())))\n            .build());\n\n        final var exampleUsingNameNetwork = ConfluentcloudFunctions.getNetwork(GetNetworkArgs.builder()\n            .displayName(\"my_network\")\n            .environment(GetNetworkEnvironmentArgs.builder()\n                .id(\"env-xyz456\")\n                .build())\n            .build());\n\n        ctx.export(\"exampleUsingName\", exampleUsingNameNetwork.applyValue(getNetworkResult -\u003e getNetworkResult));\n    }\n}\n```\n```yaml\nresources:\n  test-sa:\n    type: confluentcloud:ServiceAccount\n    properties:\n      description: test_sa for ${exampleUsingId.displayName}\nvariables:\n  exampleUsingId:\n    fn::invoke:\n      Function: confluentcloud:getNetwork\n      Arguments:\n        id: n-abc123\n        environment:\n          id: env-xyz456\n  exampleUsingNameNetwork:\n    fn::invoke:\n      Function: confluentcloud:getNetwork\n      Arguments:\n        displayName: my_network\n        environment:\n          id: env-xyz456\noutputs:\n  exampleUsingName: ${exampleUsingNameNetwork}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNetwork.\n",
                "properties": {
                    "aws": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getNetworkAw:getNetworkAw"
                        },
                        "description": "(Optional Configuration Block) The AWS-specific network details if available. It supports the following:\n"
                    },
                    "azures": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getNetworkAzure:getNetworkAzure"
                        },
                        "description": "(Optional Configuration Block) The Azure-specific network details if available. It supports the following:\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the Network.\n"
                    },
                    "dnsConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getNetworkDnsConfig:getNetworkDnsConfig"
                        },
                        "description": "(Optional Configuration Block) Network DNS config. It applies only to the PRIVATELINK network connection type. It supports the following:\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getNetworkEnvironment:getNetworkEnvironment"
                    },
                    "gcps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getNetworkGcp:getNetworkGcp"
                        },
                        "description": "(Optional Configuration Block) The GCP-specific network details if available. It supports the following:\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Environment that the Network belongs to, for example, `env-xyz456`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "environment"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNetwork.\n",
                "properties": {
                    "aws": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getNetworkAw:getNetworkAw"
                        },
                        "description": "(Optional Configuration Block) The AWS-specific network details if available. It supports the following:\n"
                    },
                    "azures": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getNetworkAzure:getNetworkAzure"
                        },
                        "description": "(Optional Configuration Block) The Azure-specific network details if available. It supports the following:\n"
                    },
                    "cidr": {
                        "type": "string",
                        "description": "(Required String) The IPv4 CIDR block to be used for the network. Must be `/27`. Required for VPC peering and AWS TransitGateway.\n"
                    },
                    "cloud": {
                        "type": "string",
                        "description": "(Required String) The cloud service provider in which the network exists. Accepted values are: `AWS`, `AZURE`, and `GCP`.\n"
                    },
                    "connectionTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Required List of String) The list of connection types that may be used with the network. Accepted connection types are: `PEERING`, `TRANSITGATEWAY`, and `PRIVATELINK`.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "(Required String) The name of the Network.\n"
                    },
                    "dnsConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getNetworkDnsConfig:getNetworkDnsConfig"
                        },
                        "description": "(Optional Configuration Block) Network DNS config. It applies only to the PRIVATELINK network connection type. It supports the following:\n"
                    },
                    "dnsDomain": {
                        "type": "string"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getNetworkEnvironment:getNetworkEnvironment"
                    },
                    "gcps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getNetworkGcp:getNetworkGcp"
                        },
                        "description": "(Optional Configuration Block) The GCP-specific network details if available. It supports the following:\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the Network, for example, `n-abc123`.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "(Required String) The cloud provider region where the network exists.\n"
                    },
                    "reservedCidr": {
                        "type": "string",
                        "description": "(Required String) The reserved IPv4 CIDR block to be used for the network. Must be `/24`. If not specified, Confluent Cloud Network uses `172.20.255.0/24`.\n"
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "(Required String) The Confluent Resource Name of the Network.\n"
                    },
                    "zonalSubdomains": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "zoneInfos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getNetworkZoneInfo:getNetworkZoneInfo"
                        },
                        "description": "(Required Configuration Blocks) Each item represents information related to a single zone. It supports the following:\n"
                    },
                    "zones": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Optional List of String) The 3 availability zones for this network. They can optionally be specified for AWS networks\nused with PrivateLink, for GCP networks used with Private Service Connect, and for AWS and GCP\nnetworks used with Peering. Otherwise, they are automatically chosen by Confluent Cloud.\nOn AWS, zones are AWS [AZ IDs](https://docs.aws.amazon.com/ram/latest/userguide/working-with-az-ids.html), for example, `use1-az3`.\nOn GCP, zones are GCP [zones](https://cloud.google.com/compute/docs/regions-zones), for example, `us-central1-c`.\nOn Azure, zones are Confluent-chosen names (for example, `1`, `2`, `3`) since Azure does not have universal zone identifiers.\n"
                    }
                },
                "type": "object",
                "required": [
                    "aws",
                    "azures",
                    "cidr",
                    "cloud",
                    "connectionTypes",
                    "displayName",
                    "dnsConfigs",
                    "dnsDomain",
                    "environment",
                    "gcps",
                    "id",
                    "region",
                    "reservedCidr",
                    "resourceName",
                    "zonalSubdomains",
                    "zoneInfos",
                    "zones"
                ]
            }
        },
        "confluentcloud:index/getNetworkLinkEndpoint:getNetworkLinkEndpoint": {
            "description": "[![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2300afba)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n\u003e **Note:** `confluentcloud.NetworkLinkEndpoint` data source is available in **Early Access** for early adopters. Early Access features are introduced to gather customer feedback. This feature should be used only for evaluation and non-production testing purposes or to provide feedback to Confluent, particularly as it becomes more widely available in follow-on editions.  \n**Early Access** features are intended for evaluation use in development and testing environments only, and not for production use. The warranty, SLA, and Support Services provisions of your agreement with Confluent do not apply to Early Access features. Early Access features are considered to be a Proof of Concept as defined in the Confluent Cloud Terms of Service. Confluent may discontinue providing Early Access releases of the Early Access features at any time in Confluent’s sole discretion.\n\n`confluentcloud.NetworkLinkEndpoint` describes a Network Link Endpoint data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst nle = confluentcloud.getNetworkLinkEndpoint({\n    id: \"nle-1357\",\n    environment: {\n        id: \"env-1234\",\n    },\n});\nexport const networkLinkEndpoint = nle;\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nnle = confluentcloud.get_network_link_endpoint(id=\"nle-1357\",\n    environment=confluentcloud.GetNetworkLinkEndpointEnvironmentArgs(\n        id=\"env-1234\",\n    ))\npulumi.export(\"networkLinkEndpoint\", nle)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var nle = ConfluentCloud.GetNetworkLinkEndpoint.Invoke(new()\n    {\n        Id = \"nle-1357\",\n        Environment = new ConfluentCloud.Inputs.GetNetworkLinkEndpointEnvironmentInputArgs\n        {\n            Id = \"env-1234\",\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"networkLinkEndpoint\"] = nle,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tnle, err := confluentcloud.LookupNetworkLinkEndpoint(ctx, \u0026confluentcloud.LookupNetworkLinkEndpointArgs{\n\t\t\tId: \"nle-1357\",\n\t\t\tEnvironment: confluentcloud.GetNetworkLinkEndpointEnvironment{\n\t\t\t\tId: \"env-1234\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"networkLinkEndpoint\", nle)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetNetworkLinkEndpointArgs;\nimport com.pulumi.confluentcloud.inputs.GetNetworkLinkEndpointEnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var nle = ConfluentcloudFunctions.getNetworkLinkEndpoint(GetNetworkLinkEndpointArgs.builder()\n            .id(\"nle-1357\")\n            .environment(GetNetworkLinkEndpointEnvironmentArgs.builder()\n                .id(\"env-1234\")\n                .build())\n            .build());\n\n        ctx.export(\"networkLinkEndpoint\", nle.applyValue(getNetworkLinkEndpointResult -\u003e getNetworkLinkEndpointResult));\n    }\n}\n```\n```yaml\nvariables:\n  nle:\n    fn::invoke:\n      Function: confluentcloud:getNetworkLinkEndpoint\n      Arguments:\n        id: nle-1357\n        environment:\n          id: env-1234\noutputs:\n  networkLinkEndpoint: ${nle}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNetworkLinkEndpoint.\n",
                "properties": {
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getNetworkLinkEndpointEnvironment:getNetworkLinkEndpointEnvironment"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Environment that the Network Link Endpoint belongs to, for example, `env-xyz456`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "environment",
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNetworkLinkEndpoint.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "(Optional String) The description of the Network Link Endpoint.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "(Optional String) The name of the Network Link Endpoint.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getNetworkLinkEndpointEnvironment:getNetworkLinkEndpointEnvironment"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the Network Link Service\n"
                    },
                    "networkLinkServices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getNetworkLinkEndpointNetworkLinkService:getNetworkLinkEndpointNetworkLinkService"
                        },
                        "description": "(Required Configuration Block) supports the following:\n"
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getNetworkLinkEndpointNetwork:getNetworkLinkEndpointNetwork"
                        },
                        "description": "(Required Configuration Block) supports the following:\n"
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "(Required String) The Confluent Resource Name of the Network Link Endpoint.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "environment",
                    "id",
                    "networks",
                    "networkLinkServices",
                    "resourceName"
                ]
            }
        },
        "confluentcloud:index/getNetworkLinkService:getNetworkLinkService": {
            "description": "[![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2300afba)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n\u003e **Note:** `confluentcloud.NetworkLinkService` data source is available in **Early Access** for early adopters. Early Access features are introduced to gather customer feedback. This feature should be used only for evaluation and non-production testing purposes or to provide feedback to Confluent, particularly as it becomes more widely available in follow-on editions.  \n**Early Access** features are intended for evaluation use in development and testing environments only, and not for production use. The warranty, SLA, and Support Services provisions of your agreement with Confluent do not apply to Early Access features. Early Access features are considered to be a Proof of Concept as defined in the Confluent Cloud Terms of Service. Confluent may discontinue providing Early Access releases of the Early Access features at any time in Confluent’s sole discretion.\n\n`confluentcloud.NetworkLinkService` describes a Network Link Service data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst nls = confluentcloud.getNetworkLinkService({\n    id: \"nls-zyw30\",\n    environment: {\n        id: \"env-1234\",\n    },\n});\nexport const networkLinkService = nls;\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nnls = confluentcloud.get_network_link_service(id=\"nls-zyw30\",\n    environment=confluentcloud.GetNetworkLinkServiceEnvironmentArgs(\n        id=\"env-1234\",\n    ))\npulumi.export(\"networkLinkService\", nls)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var nls = ConfluentCloud.GetNetworkLinkService.Invoke(new()\n    {\n        Id = \"nls-zyw30\",\n        Environment = new ConfluentCloud.Inputs.GetNetworkLinkServiceEnvironmentInputArgs\n        {\n            Id = \"env-1234\",\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"networkLinkService\"] = nls,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tnls, err := confluentcloud.LookupNetworkLinkService(ctx, \u0026confluentcloud.LookupNetworkLinkServiceArgs{\n\t\t\tId: \"nls-zyw30\",\n\t\t\tEnvironment: confluentcloud.GetNetworkLinkServiceEnvironment{\n\t\t\t\tId: \"env-1234\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"networkLinkService\", nls)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetNetworkLinkServiceArgs;\nimport com.pulumi.confluentcloud.inputs.GetNetworkLinkServiceEnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var nls = ConfluentcloudFunctions.getNetworkLinkService(GetNetworkLinkServiceArgs.builder()\n            .id(\"nls-zyw30\")\n            .environment(GetNetworkLinkServiceEnvironmentArgs.builder()\n                .id(\"env-1234\")\n                .build())\n            .build());\n\n        ctx.export(\"networkLinkService\", nls.applyValue(getNetworkLinkServiceResult -\u003e getNetworkLinkServiceResult));\n    }\n}\n```\n```yaml\nvariables:\n  nls:\n    fn::invoke:\n      Function: confluentcloud:getNetworkLinkService\n      Arguments:\n        id: nls-zyw30\n        environment:\n          id: env-1234\noutputs:\n  networkLinkService: ${nls}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNetworkLinkService.\n",
                "properties": {
                    "accept": {
                        "$ref": "#/types/confluentcloud:index/getNetworkLinkServiceAccept:getNetworkLinkServiceAccept",
                        "description": "(Optional Configuration Block) supports the following:\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getNetworkLinkServiceEnvironment:getNetworkLinkServiceEnvironment"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Environment that the Network Link Service belongs to, for example, `env-1234`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "environment",
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNetworkLinkService.\n",
                "properties": {
                    "accept": {
                        "$ref": "#/types/confluentcloud:index/getNetworkLinkServiceAccept:getNetworkLinkServiceAccept",
                        "description": "(Optional Configuration Block) supports the following:\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Optional String) The description of the Network Link Service.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "(Optional String) The name of the Network Link Service.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getNetworkLinkServiceEnvironment:getNetworkLinkServiceEnvironment"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the Network that the Network Link Service belongs to, for example, `n-abc123`.\n"
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getNetworkLinkServiceNetwork:getNetworkLinkServiceNetwork"
                        },
                        "description": "(Required Configuration Block) supports the following:\n"
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "(Required String) The Confluent Resource Name of the Network Link Service.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accept",
                    "description",
                    "displayName",
                    "environment",
                    "id",
                    "networks",
                    "resourceName"
                ]
            }
        },
        "confluentcloud:index/getOrganization:getOrganization": {
            "description": "[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n`confluentcloud.getOrganization` describes an Organization data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleOrganization = confluentcloud.getOrganization({});\nexport const example = exampleOrganization;\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_organization = confluentcloud.get_organization()\npulumi.export(\"example\", example_organization)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleOrganization = ConfluentCloud.GetOrganization.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"example\"] = exampleOrganization,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleOrganization, err := confluentcloud.GetOrganization(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"example\", exampleOrganization)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleOrganization = ConfluentcloudFunctions.getOrganization();\n\n        ctx.export(\"example\", exampleOrganization.applyValue(getOrganizationResult -\u003e getOrganizationResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleOrganization:\n    fn::invoke:\n      Function: confluentcloud:getOrganization\n      Arguments: {}\noutputs:\n  example: ${exampleOrganization}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getOrganization.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the Organization, for example, `1111aaaa-11aa-11aa-11aa-111111aaaaaa`.\n"
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "(Required String) The Confluent Resource Name of the Organization, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "resourceName"
                ]
            }
        },
        "confluentcloud:index/getPeering:getPeering": {
            "description": "[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n`confluentcloud.Peering` describes a Peering data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleUsingIdPeering = confluentcloud.getPeering({\n    id: \"peer-abc123\",\n    environment: {\n        id: \"env-xyz456\",\n    },\n});\nexport const exampleUsingId = exampleUsingIdPeering;\nconst exampleUsingNamePeering = confluentcloud.getPeering({\n    displayName: \"my_peering\",\n    environment: {\n        id: \"env-xyz456\",\n    },\n});\nexport const exampleUsingName = exampleUsingNamePeering;\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_using_id_peering = confluentcloud.get_peering(id=\"peer-abc123\",\n    environment=confluentcloud.GetPeeringEnvironmentArgs(\n        id=\"env-xyz456\",\n    ))\npulumi.export(\"exampleUsingId\", example_using_id_peering)\nexample_using_name_peering = confluentcloud.get_peering(display_name=\"my_peering\",\n    environment=confluentcloud.GetPeeringEnvironmentArgs(\n        id=\"env-xyz456\",\n    ))\npulumi.export(\"exampleUsingName\", example_using_name_peering)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUsingIdPeering = ConfluentCloud.GetPeering.Invoke(new()\n    {\n        Id = \"peer-abc123\",\n        Environment = new ConfluentCloud.Inputs.GetPeeringEnvironmentInputArgs\n        {\n            Id = \"env-xyz456\",\n        },\n    });\n\n    var exampleUsingNamePeering = ConfluentCloud.GetPeering.Invoke(new()\n    {\n        DisplayName = \"my_peering\",\n        Environment = new ConfluentCloud.Inputs.GetPeeringEnvironmentInputArgs\n        {\n            Id = \"env-xyz456\",\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"exampleUsingId\"] = exampleUsingIdPeering,\n        [\"exampleUsingName\"] = exampleUsingNamePeering,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUsingIdPeering, err := confluentcloud.LookupPeering(ctx, \u0026confluentcloud.LookupPeeringArgs{\n\t\t\tId: pulumi.StringRef(\"peer-abc123\"),\n\t\t\tEnvironment: confluentcloud.GetPeeringEnvironment{\n\t\t\t\tId: \"env-xyz456\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingId\", exampleUsingIdPeering)\n\t\texampleUsingNamePeering, err := confluentcloud.LookupPeering(ctx, \u0026confluentcloud.LookupPeeringArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"my_peering\"),\n\t\t\tEnvironment: confluentcloud.GetPeeringEnvironment{\n\t\t\t\tId: \"env-xyz456\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingName\", exampleUsingNamePeering)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetPeeringArgs;\nimport com.pulumi.confluentcloud.inputs.GetPeeringEnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUsingIdPeering = ConfluentcloudFunctions.getPeering(GetPeeringArgs.builder()\n            .id(\"peer-abc123\")\n            .environment(GetPeeringEnvironmentArgs.builder()\n                .id(\"env-xyz456\")\n                .build())\n            .build());\n\n        ctx.export(\"exampleUsingId\", exampleUsingIdPeering.applyValue(getPeeringResult -\u003e getPeeringResult));\n        final var exampleUsingNamePeering = ConfluentcloudFunctions.getPeering(GetPeeringArgs.builder()\n            .displayName(\"my_peering\")\n            .environment(GetPeeringEnvironmentArgs.builder()\n                .id(\"env-xyz456\")\n                .build())\n            .build());\n\n        ctx.export(\"exampleUsingName\", exampleUsingNamePeering.applyValue(getPeeringResult -\u003e getPeeringResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleUsingIdPeering:\n    fn::invoke:\n      Function: confluentcloud:getPeering\n      Arguments:\n        id: peer-abc123\n        environment:\n          id: env-xyz456\n  exampleUsingNamePeering:\n    fn::invoke:\n      Function: confluentcloud:getPeering\n      Arguments:\n        displayName: my_peering\n        environment:\n          id: env-xyz456\noutputs:\n  exampleUsingId: ${exampleUsingIdPeering}\n  exampleUsingName: ${exampleUsingNamePeering}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPeering.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the Peering.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getPeeringEnvironment:getPeeringEnvironment",
                        "description": "(Required Configuration Block) supports the following:\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Environment that the Peering belongs to, for example, `env-xyz456`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "environment"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPeering.\n",
                "properties": {
                    "aws": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getPeeringAw:getPeeringAw"
                        },
                        "description": "(Optional Configuration Block) The AWS-specific Peering details if available. It supports the following:\n"
                    },
                    "azures": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getPeeringAzure:getPeeringAzure"
                        },
                        "description": "(Optional Configuration Block) The Azure-specific Peering details if available. It supports the following:\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "(Optional String) The name of the Peering.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getPeeringEnvironment:getPeeringEnvironment",
                        "description": "(Required Configuration Block) supports the following:\n"
                    },
                    "gcps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getPeeringGcp:getPeeringGcp"
                        },
                        "description": "(Optional Configuration Block) The Azure-specific Peering details if available. It supports the following:\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the Network that the Peering belongs to, for example, `n-abc123`.\n"
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getPeeringNetwork:getPeeringNetwork"
                        },
                        "description": "(Required Configuration Block) supports the following:\n"
                    }
                },
                "type": "object",
                "required": [
                    "aws",
                    "azures",
                    "displayName",
                    "environment",
                    "gcps",
                    "id",
                    "networks"
                ]
            }
        },
        "confluentcloud:index/getPrivateLinkAccess:getPrivateLinkAccess": {
            "description": "[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n`confluentcloud.PrivateLinkAccess` describes a Private Link Access data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleUsingIdPrivateLinkAccess = confluentcloud.getPrivateLinkAccess({\n    id: \"pla-abc123\",\n    environment: {\n        id: \"env-xyz456\",\n    },\n});\nexport const exampleUsingId = exampleUsingIdPrivateLinkAccess;\nconst exampleUsingNamePrivateLinkAccess = confluentcloud.getPrivateLinkAccess({\n    displayName: \"my_pla\",\n    environment: {\n        id: \"env-xyz456\",\n    },\n});\nexport const exampleUsingName = exampleUsingNamePrivateLinkAccess;\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_using_id_private_link_access = confluentcloud.get_private_link_access(id=\"pla-abc123\",\n    environment=confluentcloud.GetPrivateLinkAccessEnvironmentArgs(\n        id=\"env-xyz456\",\n    ))\npulumi.export(\"exampleUsingId\", example_using_id_private_link_access)\nexample_using_name_private_link_access = confluentcloud.get_private_link_access(display_name=\"my_pla\",\n    environment=confluentcloud.GetPrivateLinkAccessEnvironmentArgs(\n        id=\"env-xyz456\",\n    ))\npulumi.export(\"exampleUsingName\", example_using_name_private_link_access)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUsingIdPrivateLinkAccess = ConfluentCloud.GetPrivateLinkAccess.Invoke(new()\n    {\n        Id = \"pla-abc123\",\n        Environment = new ConfluentCloud.Inputs.GetPrivateLinkAccessEnvironmentInputArgs\n        {\n            Id = \"env-xyz456\",\n        },\n    });\n\n    var exampleUsingNamePrivateLinkAccess = ConfluentCloud.GetPrivateLinkAccess.Invoke(new()\n    {\n        DisplayName = \"my_pla\",\n        Environment = new ConfluentCloud.Inputs.GetPrivateLinkAccessEnvironmentInputArgs\n        {\n            Id = \"env-xyz456\",\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"exampleUsingId\"] = exampleUsingIdPrivateLinkAccess,\n        [\"exampleUsingName\"] = exampleUsingNamePrivateLinkAccess,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUsingIdPrivateLinkAccess, err := confluentcloud.LookupPrivateLinkAccess(ctx, \u0026confluentcloud.LookupPrivateLinkAccessArgs{\n\t\t\tId: pulumi.StringRef(\"pla-abc123\"),\n\t\t\tEnvironment: confluentcloud.GetPrivateLinkAccessEnvironment{\n\t\t\t\tId: \"env-xyz456\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingId\", exampleUsingIdPrivateLinkAccess)\n\t\texampleUsingNamePrivateLinkAccess, err := confluentcloud.LookupPrivateLinkAccess(ctx, \u0026confluentcloud.LookupPrivateLinkAccessArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"my_pla\"),\n\t\t\tEnvironment: confluentcloud.GetPrivateLinkAccessEnvironment{\n\t\t\t\tId: \"env-xyz456\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingName\", exampleUsingNamePrivateLinkAccess)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetPrivateLinkAccessArgs;\nimport com.pulumi.confluentcloud.inputs.GetPrivateLinkAccessEnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUsingIdPrivateLinkAccess = ConfluentcloudFunctions.getPrivateLinkAccess(GetPrivateLinkAccessArgs.builder()\n            .id(\"pla-abc123\")\n            .environment(GetPrivateLinkAccessEnvironmentArgs.builder()\n                .id(\"env-xyz456\")\n                .build())\n            .build());\n\n        ctx.export(\"exampleUsingId\", exampleUsingIdPrivateLinkAccess.applyValue(getPrivateLinkAccessResult -\u003e getPrivateLinkAccessResult));\n        final var exampleUsingNamePrivateLinkAccess = ConfluentcloudFunctions.getPrivateLinkAccess(GetPrivateLinkAccessArgs.builder()\n            .displayName(\"my_pla\")\n            .environment(GetPrivateLinkAccessEnvironmentArgs.builder()\n                .id(\"env-xyz456\")\n                .build())\n            .build());\n\n        ctx.export(\"exampleUsingName\", exampleUsingNamePrivateLinkAccess.applyValue(getPrivateLinkAccessResult -\u003e getPrivateLinkAccessResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleUsingIdPrivateLinkAccess:\n    fn::invoke:\n      Function: confluentcloud:getPrivateLinkAccess\n      Arguments:\n        id: pla-abc123\n        environment:\n          id: env-xyz456\n  exampleUsingNamePrivateLinkAccess:\n    fn::invoke:\n      Function: confluentcloud:getPrivateLinkAccess\n      Arguments:\n        displayName: my_pla\n        environment:\n          id: env-xyz456\noutputs:\n  exampleUsingId: ${exampleUsingIdPrivateLinkAccess}\n  exampleUsingName: ${exampleUsingNamePrivateLinkAccess}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPrivateLinkAccess.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the Private Link Access.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getPrivateLinkAccessEnvironment:getPrivateLinkAccessEnvironment",
                        "description": "(Required Configuration Block) supports the following:\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Environment that the Private Link Access belongs to, for example, `env-xyz456`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "environment"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPrivateLinkAccess.\n",
                "properties": {
                    "aws": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getPrivateLinkAccessAw:getPrivateLinkAccessAw"
                        },
                        "description": "(Optional Configuration Block) The AWS-specific Private Link Access details if available. It supports the following:\n"
                    },
                    "azures": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getPrivateLinkAccessAzure:getPrivateLinkAccessAzure"
                        },
                        "description": "(Optional Configuration Block) The Azure-specific Private Link Access details if available. It supports the following:\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "(Optional String) The name of the Private Link Access.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getPrivateLinkAccessEnvironment:getPrivateLinkAccessEnvironment",
                        "description": "(Required Configuration Block) supports the following:\n"
                    },
                    "gcps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getPrivateLinkAccessGcp:getPrivateLinkAccessGcp"
                        },
                        "description": "(Optional Configuration Block) The GCP-specific Private Service Connect details if available. It supports the following:\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the Network that the Private Link Access belongs to, for example, `n-abc123`.\n"
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getPrivateLinkAccessNetwork:getPrivateLinkAccessNetwork"
                        },
                        "description": "(Required Configuration Block) supports the following:\n"
                    }
                },
                "type": "object",
                "required": [
                    "aws",
                    "azures",
                    "displayName",
                    "environment",
                    "gcps",
                    "id",
                    "networks"
                ]
            }
        },
        "confluentcloud:index/getRoleBinding:getRoleBinding": {
            "description": "[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n`confluentcloud.RoleBinding` describes a Role Binding.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleRoleBinding = confluentcloud.getRoleBinding({\n    id: \"rb-abc123\",\n});\nexport const example = exampleRoleBinding;\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_role_binding = confluentcloud.get_role_binding(id=\"rb-abc123\")\npulumi.export(\"example\", example_role_binding)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleRoleBinding = ConfluentCloud.GetRoleBinding.Invoke(new()\n    {\n        Id = \"rb-abc123\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"example\"] = exampleRoleBinding,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleRoleBinding, err := confluentcloud.LookupRoleBinding(ctx, \u0026confluentcloud.LookupRoleBindingArgs{\n\t\t\tId: \"rb-abc123\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"example\", exampleRoleBinding)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetRoleBindingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleRoleBinding = ConfluentcloudFunctions.getRoleBinding(GetRoleBindingArgs.builder()\n            .id(\"rb-abc123\")\n            .build());\n\n        ctx.export(\"example\", exampleRoleBinding.applyValue(getRoleBindingResult -\u003e getRoleBindingResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleRoleBinding:\n    fn::invoke:\n      Function: confluentcloud:getRoleBinding\n      Arguments:\n        id: rb-abc123\noutputs:\n  example: ${exampleRoleBinding}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRoleBinding.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the Role Binding (for example, `rb-abc123`).\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRoleBinding.\n",
                "properties": {
                    "crnPattern": {
                        "type": "string",
                        "description": "(Required String) A [Confluent Resource Name(CRN)](https://docs.confluent.io/cloud/current/api.html#section/Identifiers-and-URLs/Confluent-Resource-Names-(CRNs)) that specifies the scope and resource patterns necessary for the role to bind.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "principal": {
                        "type": "string",
                        "description": "(Required String) A principal User to bind the role to, for example, \"User:u-111aaa\" for binding to a user \"u-111aaa\", or \"User:sa-111aaa\" for binding to a service account \"sa-111aaa\".\n"
                    },
                    "roleName": {
                        "type": "string",
                        "description": "(Required String) A name of the role to bind to the principal. See [Confluent Cloud RBAC Roles](https://docs.confluent.io/cloud/current/access-management/access-control/cloud-rbac.html#ccloud-rbac-roles) for a full list of supported role names.\n"
                    }
                },
                "type": "object",
                "required": [
                    "crnPattern",
                    "id",
                    "principal",
                    "roleName"
                ]
            }
        },
        "confluentcloud:index/getSchema:getSchema": {
            "inputs": {
                "description": "A collection of arguments for invoking getSchema.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/getSchemaCredentials:getSchemaCredentials",
                        "secret": true
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaIdentifier": {
                        "type": "integer",
                        "description": "The globally unique ID of the Schema, for example, `100003`. If the same schema is registered under a different subject, the same identifier will be returned. However, the `version` of the schema may be different under different subjects.\n"
                    },
                    "schemaRegistryCluster": {
                        "$ref": "#/types/confluentcloud:index/getSchemaSchemaRegistryCluster:getSchemaSchemaRegistryCluster"
                    },
                    "subjectName": {
                        "type": "string",
                        "description": "The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`. Schemas evolve safely, following a compatibility mode defined, under a subject name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "schemaIdentifier",
                    "subjectName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSchema.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/getSchemaCredentials:getSchemaCredentials",
                        "secret": true
                    },
                    "format": {
                        "type": "string",
                        "description": "(Required String) The format of the schema. Accepted values are: `AVRO`, `PROTOBUF`, and `JSON`.\n"
                    },
                    "hardDelete": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "recreateOnUpdate": {
                        "type": "boolean"
                    },
                    "restEndpoint": {
                        "type": "string"
                    },
                    "schema": {
                        "type": "string",
                        "description": "(Required String) The schema string, for example, `file(\"./schema_version_1.avsc\")`.\n"
                    },
                    "schemaIdentifier": {
                        "type": "integer"
                    },
                    "schemaReferences": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getSchemaSchemaReference:getSchemaSchemaReference"
                        },
                        "description": "(Optional List) The list of referenced schemas (see [Schema References](https://docs.confluent.io/platform/current/schema-registry/serdes-develop/index.html#schema-references) for more details):\n"
                    },
                    "schemaRegistryCluster": {
                        "$ref": "#/types/confluentcloud:index/getSchemaSchemaRegistryCluster:getSchemaSchemaRegistryCluster"
                    },
                    "subjectName": {
                        "type": "string",
                        "description": "(Required String) The name for the reference. (For Avro Schema, the reference name is the fully qualified schema name, for JSON Schema it is a URL, and for Protobuf Schema, it is the name of another Protobuf file.)\n"
                    },
                    "version": {
                        "type": "integer",
                        "description": "(Required Integer) The version of the Schema, for example, `4`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "format",
                    "hardDelete",
                    "recreateOnUpdate",
                    "schema",
                    "schemaIdentifier",
                    "schemaReferences",
                    "subjectName",
                    "version",
                    "id"
                ]
            }
        },
        "confluentcloud:index/getSchemaRegistryCluster:getSchemaRegistryCluster": {
            "description": "[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n`confluentcloud.SchemaRegistryCluster` describes a Schema Registry cluster data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleUsingIdSchemaRegistryCluster = confluentcloud.getSchemaRegistryCluster({\n    id: \"lsrc-abc123\",\n    environment: {\n        id: \"env-xyz456\",\n    },\n});\nexport const exampleUsingId = exampleUsingIdSchemaRegistryCluster;\nconst exampleUsingNameSchemaRegistryCluster = confluentcloud.getSchemaRegistryCluster({\n    displayName: \"Stream Governance Package\",\n    environment: {\n        id: \"env-xyz456\",\n    },\n});\nexport const exampleUsingName = exampleUsingNameSchemaRegistryCluster;\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_using_id_schema_registry_cluster = confluentcloud.get_schema_registry_cluster(id=\"lsrc-abc123\",\n    environment=confluentcloud.GetSchemaRegistryClusterEnvironmentArgs(\n        id=\"env-xyz456\",\n    ))\npulumi.export(\"exampleUsingId\", example_using_id_schema_registry_cluster)\nexample_using_name_schema_registry_cluster = confluentcloud.get_schema_registry_cluster(display_name=\"Stream Governance Package\",\n    environment=confluentcloud.GetSchemaRegistryClusterEnvironmentArgs(\n        id=\"env-xyz456\",\n    ))\npulumi.export(\"exampleUsingName\", example_using_name_schema_registry_cluster)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUsingIdSchemaRegistryCluster = ConfluentCloud.GetSchemaRegistryCluster.Invoke(new()\n    {\n        Id = \"lsrc-abc123\",\n        Environment = new ConfluentCloud.Inputs.GetSchemaRegistryClusterEnvironmentInputArgs\n        {\n            Id = \"env-xyz456\",\n        },\n    });\n\n    var exampleUsingNameSchemaRegistryCluster = ConfluentCloud.GetSchemaRegistryCluster.Invoke(new()\n    {\n        DisplayName = \"Stream Governance Package\",\n        Environment = new ConfluentCloud.Inputs.GetSchemaRegistryClusterEnvironmentInputArgs\n        {\n            Id = \"env-xyz456\",\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"exampleUsingId\"] = exampleUsingIdSchemaRegistryCluster,\n        [\"exampleUsingName\"] = exampleUsingNameSchemaRegistryCluster,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUsingIdSchemaRegistryCluster, err := confluentcloud.LookupSchemaRegistryCluster(ctx, \u0026confluentcloud.LookupSchemaRegistryClusterArgs{\n\t\t\tId: pulumi.StringRef(\"lsrc-abc123\"),\n\t\t\tEnvironment: confluentcloud.GetSchemaRegistryClusterEnvironment{\n\t\t\t\tId: \"env-xyz456\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingId\", exampleUsingIdSchemaRegistryCluster)\n\t\texampleUsingNameSchemaRegistryCluster, err := confluentcloud.LookupSchemaRegistryCluster(ctx, \u0026confluentcloud.LookupSchemaRegistryClusterArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"Stream Governance Package\"),\n\t\t\tEnvironment: confluentcloud.GetSchemaRegistryClusterEnvironment{\n\t\t\t\tId: \"env-xyz456\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingName\", exampleUsingNameSchemaRegistryCluster)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetSchemaRegistryClusterArgs;\nimport com.pulumi.confluentcloud.inputs.GetSchemaRegistryClusterEnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUsingIdSchemaRegistryCluster = ConfluentcloudFunctions.getSchemaRegistryCluster(GetSchemaRegistryClusterArgs.builder()\n            .id(\"lsrc-abc123\")\n            .environment(GetSchemaRegistryClusterEnvironmentArgs.builder()\n                .id(\"env-xyz456\")\n                .build())\n            .build());\n\n        ctx.export(\"exampleUsingId\", exampleUsingIdSchemaRegistryCluster.applyValue(getSchemaRegistryClusterResult -\u003e getSchemaRegistryClusterResult));\n        final var exampleUsingNameSchemaRegistryCluster = ConfluentcloudFunctions.getSchemaRegistryCluster(GetSchemaRegistryClusterArgs.builder()\n            .displayName(\"Stream Governance Package\")\n            .environment(GetSchemaRegistryClusterEnvironmentArgs.builder()\n                .id(\"env-xyz456\")\n                .build())\n            .build());\n\n        ctx.export(\"exampleUsingName\", exampleUsingNameSchemaRegistryCluster.applyValue(getSchemaRegistryClusterResult -\u003e getSchemaRegistryClusterResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleUsingIdSchemaRegistryCluster:\n    fn::invoke:\n      Function: confluentcloud:getSchemaRegistryCluster\n      Arguments:\n        id: lsrc-abc123\n        environment:\n          id: env-xyz456\n  exampleUsingNameSchemaRegistryCluster:\n    fn::invoke:\n      Function: confluentcloud:getSchemaRegistryCluster\n      Arguments:\n        displayName: Stream Governance Package\n        environment:\n          id: env-xyz456\noutputs:\n  exampleUsingId: ${exampleUsingIdSchemaRegistryCluster}\n  exampleUsingName: ${exampleUsingNameSchemaRegistryCluster}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSchemaRegistryCluster.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "The name for the Schema Registry cluster.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getSchemaRegistryClusterEnvironment:getSchemaRegistryClusterEnvironment"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Environment that the Schema Registry cluster belongs to, for example, `env-xyz456`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "environment"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSchemaRegistryCluster.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "(Required String) An API Version of the schema version of the Schema Registry cluster, for example, `stream-governance/v2`.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "(Required String) The name of the Schema Registry cluster, for example, `Stream Governance Package`.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getSchemaRegistryClusterEnvironment:getSchemaRegistryClusterEnvironment"
                    },
                    "id": {
                        "type": "string"
                    },
                    "kind": {
                        "type": "string",
                        "description": "(Required String) A kind of the Schema Registry cluster, for example, `Cluster`.\n"
                    },
                    "package": {
                        "type": "string",
                        "description": "(Required String) The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.\n"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getSchemaRegistryClusterRegion:getSchemaRegistryClusterRegion"
                        },
                        "description": "(Required Configuration Block) supports the following:\n"
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "(Required String) The Confluent Resource Name of the Schema Registry cluster, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/schema-registry=lsrc-abc123`.\n"
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "(Required String) The HTTP endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-west-2.aws.confluent.cloud`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "displayName",
                    "environment",
                    "id",
                    "kind",
                    "package",
                    "regions",
                    "resourceName",
                    "restEndpoint"
                ]
            }
        },
        "confluentcloud:index/getSchemaRegistryClusterConfig:getSchemaRegistryClusterConfig": {
            "inputs": {
                "description": "A collection of arguments for invoking getSchemaRegistryClusterConfig.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/getSchemaRegistryClusterConfigCredentials:getSchemaRegistryClusterConfigCredentials",
                        "secret": true
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaRegistryCluster": {
                        "$ref": "#/types/confluentcloud:index/getSchemaRegistryClusterConfigSchemaRegistryCluster:getSchemaRegistryClusterConfigSchemaRegistryCluster"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSchemaRegistryClusterConfig.\n",
                "properties": {
                    "compatibilityLevel": {
                        "type": "string",
                        "description": "(Required String) The global Schema Registry compatibility level. Accepted values are: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`, `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, and `NONE`. See the [Compatibility Types](https://docs.confluent.io/platform/current/schema-registry/avro.html#compatibility-types) for more details.\n"
                    },
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/getSchemaRegistryClusterConfigCredentials:getSchemaRegistryClusterConfigCredentials",
                        "secret": true
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "restEndpoint": {
                        "type": "string"
                    },
                    "schemaRegistryCluster": {
                        "$ref": "#/types/confluentcloud:index/getSchemaRegistryClusterConfigSchemaRegistryCluster:getSchemaRegistryClusterConfigSchemaRegistryCluster"
                    }
                },
                "type": "object",
                "required": [
                    "compatibilityLevel",
                    "id"
                ]
            }
        },
        "confluentcloud:index/getSchemaRegistryClusterMode:getSchemaRegistryClusterMode": {
            "inputs": {
                "description": "A collection of arguments for invoking getSchemaRegistryClusterMode.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/getSchemaRegistryClusterModeCredentials:getSchemaRegistryClusterModeCredentials",
                        "secret": true
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaRegistryCluster": {
                        "$ref": "#/types/confluentcloud:index/getSchemaRegistryClusterModeSchemaRegistryCluster:getSchemaRegistryClusterModeSchemaRegistryCluster"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSchemaRegistryClusterMode.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/getSchemaRegistryClusterModeCredentials:getSchemaRegistryClusterModeCredentials",
                        "secret": true
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "mode": {
                        "type": "string",
                        "description": "(Optional String) The global Schema Registry mode. Accepted values are: `READWRITE`, `READONLY`, `READONLY_OVERRIDE`, and `IMPORT`.\n"
                    },
                    "restEndpoint": {
                        "type": "string"
                    },
                    "schemaRegistryCluster": {
                        "$ref": "#/types/confluentcloud:index/getSchemaRegistryClusterModeSchemaRegistryCluster:getSchemaRegistryClusterModeSchemaRegistryCluster"
                    }
                },
                "type": "object",
                "required": [
                    "mode",
                    "id"
                ]
            }
        },
        "confluentcloud:index/getSchemaRegistryRegion:getSchemaRegistryRegion": {
            "description": "[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n`confluentcloud.getSchemaRegistryRegion` describes a Schema Registry cluster data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleSchemaRegistryRegion = confluentcloud.getSchemaRegistryRegion({\n    cloud: \"AWS\",\n    region: \"us-east-2\",\n    \"package\": \"ESSENTIALS\",\n});\nexport const example = exampleSchemaRegistryRegion;\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_schema_registry_region = confluentcloud.get_schema_registry_region(cloud=\"AWS\",\n    region=\"us-east-2\",\n    package=\"ESSENTIALS\")\npulumi.export(\"example\", example_schema_registry_region)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleSchemaRegistryRegion = ConfluentCloud.GetSchemaRegistryRegion.Invoke(new()\n    {\n        Cloud = \"AWS\",\n        Region = \"us-east-2\",\n        Package = \"ESSENTIALS\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"example\"] = exampleSchemaRegistryRegion,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleSchemaRegistryRegion, err := confluentcloud.GetSchemaRegistryRegion(ctx, \u0026confluentcloud.GetSchemaRegistryRegionArgs{\n\t\t\tCloud:   \"AWS\",\n\t\t\tRegion:  \"us-east-2\",\n\t\t\tPackage: \"ESSENTIALS\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"example\", exampleSchemaRegistryRegion)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetSchemaRegistryRegionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleSchemaRegistryRegion = ConfluentcloudFunctions.getSchemaRegistryRegion(GetSchemaRegistryRegionArgs.builder()\n            .cloud(\"AWS\")\n            .region(\"us-east-2\")\n            .package_(\"ESSENTIALS\")\n            .build());\n\n        ctx.export(\"example\", exampleSchemaRegistryRegion.applyValue(getSchemaRegistryRegionResult -\u003e getSchemaRegistryRegionResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleSchemaRegistryRegion:\n    fn::invoke:\n      Function: confluentcloud:getSchemaRegistryRegion\n      Arguments:\n        cloud: AWS\n        region: us-east-2\n        package: ESSENTIALS\noutputs:\n  example: ${exampleSchemaRegistryRegion}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSchemaRegistryRegion.\n",
                "properties": {
                    "cloud": {
                        "type": "string",
                        "description": "The cloud service provider that hosts the region. Accepted values are: `AWS`, `AZURE`, and `GCP`.\n"
                    },
                    "package": {
                        "type": "string",
                        "description": "The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The cloud service provider region, for example, `us-east-2`. See [Cloud Providers and Regions](https://docs.confluent.io/cloud/current/clusters/regions.html#cloud-providers-and-regions) for a full list of options for AWS, Azure, and GCP.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cloud",
                    "package",
                    "region"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSchemaRegistryRegion.\n",
                "properties": {
                    "cloud": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the Schema Registry region, for example, `sgreg-1`.\n"
                    },
                    "package": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "cloud",
                    "id",
                    "package",
                    "region"
                ]
            }
        },
        "confluentcloud:index/getSchemas:getSchemas": {
            "inputs": {
                "description": "A collection of arguments for invoking getSchemas.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/getSchemasCredentials:getSchemasCredentials",
                        "secret": true
                    },
                    "filter": {
                        "$ref": "#/types/confluentcloud:index/getSchemasFilter:getSchemasFilter"
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaRegistryCluster": {
                        "$ref": "#/types/confluentcloud:index/getSchemasSchemaRegistryCluster:getSchemasSchemaRegistryCluster"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSchemas.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/getSchemasCredentials:getSchemasCredentials",
                        "secret": true
                    },
                    "filter": {
                        "$ref": "#/types/confluentcloud:index/getSchemasFilter:getSchemasFilter"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "restEndpoint": {
                        "type": "string"
                    },
                    "schemaRegistryCluster": {
                        "$ref": "#/types/confluentcloud:index/getSchemasSchemaRegistryCluster:getSchemasSchemaRegistryCluster"
                    },
                    "schemas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getSchemasSchema:getSchemasSchema"
                        },
                        "description": "(List of Object) List of schemas. Each schema object exports the following attributes:\n"
                    }
                },
                "type": "object",
                "required": [
                    "schemas",
                    "id"
                ]
            }
        },
        "confluentcloud:index/getServiceAccount:getServiceAccount": {
            "description": "[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n`confluentcloud.ServiceAccount` describes a Service Account data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleUsingIdServiceAccount = confluentcloud.getServiceAccount({\n    id: \"sa-abc123\",\n});\nexport const exampleUsingId = exampleUsingIdServiceAccount;\nconst exampleUsingName = confluentcloud.getServiceAccount({\n    displayName: \"test_sa\",\n});\nconst test_env = new confluentcloud.Environment(\"test-env\", {});\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_using_id_service_account = confluentcloud.get_service_account(id=\"sa-abc123\")\npulumi.export(\"exampleUsingId\", example_using_id_service_account)\nexample_using_name = confluentcloud.get_service_account(display_name=\"test_sa\")\ntest_env = confluentcloud.Environment(\"test-env\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUsingIdServiceAccount = ConfluentCloud.GetServiceAccount.Invoke(new()\n    {\n        Id = \"sa-abc123\",\n    });\n\n    var exampleUsingName = ConfluentCloud.GetServiceAccount.Invoke(new()\n    {\n        DisplayName = \"test_sa\",\n    });\n\n    var test_env = new ConfluentCloud.Environment(\"test-env\");\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"exampleUsingId\"] = exampleUsingIdServiceAccount,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUsingIdServiceAccount, err := confluentcloud.LookupServiceAccount(ctx, \u0026confluentcloud.LookupServiceAccountArgs{\n\t\t\tId: pulumi.StringRef(\"sa-abc123\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingId\", exampleUsingIdServiceAccount)\n\t\t_, err = confluentcloud.LookupServiceAccount(ctx, \u0026confluentcloud.LookupServiceAccountArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"test_sa\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = confluentcloud.NewEnvironment(ctx, \"test-env\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetServiceAccountArgs;\nimport com.pulumi.confluentcloud.Environment;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUsingIdServiceAccount = ConfluentcloudFunctions.getServiceAccount(GetServiceAccountArgs.builder()\n            .id(\"sa-abc123\")\n            .build());\n\n        ctx.export(\"exampleUsingId\", exampleUsingIdServiceAccount.applyValue(getServiceAccountResult -\u003e getServiceAccountResult));\n        final var exampleUsingName = ConfluentcloudFunctions.getServiceAccount(GetServiceAccountArgs.builder()\n            .displayName(\"test_sa\")\n            .build());\n\n        var test_env = new Environment(\"test-env\");\n\n    }\n}\n```\n```yaml\nresources:\n  test-env:\n    type: confluentcloud:Environment\nvariables:\n  exampleUsingIdServiceAccount:\n    fn::invoke:\n      Function: confluentcloud:getServiceAccount\n      Arguments:\n        id: sa-abc123\n  exampleUsingName:\n    fn::invoke:\n      Function: confluentcloud:getServiceAccount\n      Arguments:\n        displayName: test_sa\noutputs:\n  exampleUsingId: ${exampleUsingIdServiceAccount}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getServiceAccount.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the Service Account.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Service Account (e.g., `sa-abc123`).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getServiceAccount.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "(Required String) An API Version of the schema version of the Service Account.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Required String) A free-form description of the Service Account.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "(Required String) A human-readable name for the Service Account.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the Service Account (e.g., `sa-abc123`).\n"
                    },
                    "kind": {
                        "type": "string",
                        "description": "(Required String) A kind of the Service Account.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "description",
                    "displayName",
                    "id",
                    "kind"
                ]
            }
        },
        "confluentcloud:index/getSubjectConfig:getSubjectConfig": {
            "inputs": {
                "description": "A collection of arguments for invoking getSubjectConfig.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/getSubjectConfigCredentials:getSubjectConfigCredentials",
                        "secret": true
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaRegistryCluster": {
                        "$ref": "#/types/confluentcloud:index/getSubjectConfigSchemaRegistryCluster:getSubjectConfigSchemaRegistryCluster"
                    },
                    "subjectName": {
                        "type": "string",
                        "description": "The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "subjectName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSubjectConfig.\n",
                "properties": {
                    "compatibilityLevel": {
                        "type": "string",
                        "description": "(Required String) The Compatibility Level of the specified subject. Accepted values are: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`, `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, and `NONE`. See the [Compatibility Types](https://docs.confluent.io/platform/current/schema-registry/avro.html#compatibility-types) for more details.\n"
                    },
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/getSubjectConfigCredentials:getSubjectConfigCredentials",
                        "secret": true
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "restEndpoint": {
                        "type": "string"
                    },
                    "schemaRegistryCluster": {
                        "$ref": "#/types/confluentcloud:index/getSubjectConfigSchemaRegistryCluster:getSubjectConfigSchemaRegistryCluster"
                    },
                    "subjectName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "compatibilityLevel",
                    "subjectName",
                    "id"
                ]
            }
        },
        "confluentcloud:index/getSubjectMode:getSubjectMode": {
            "inputs": {
                "description": "A collection of arguments for invoking getSubjectMode.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/getSubjectModeCredentials:getSubjectModeCredentials",
                        "secret": true
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaRegistryCluster": {
                        "$ref": "#/types/confluentcloud:index/getSubjectModeSchemaRegistryCluster:getSubjectModeSchemaRegistryCluster"
                    },
                    "subjectName": {
                        "type": "string",
                        "description": "The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "subjectName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSubjectMode.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/getSubjectModeCredentials:getSubjectModeCredentials",
                        "secret": true
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "mode": {
                        "type": "string",
                        "description": "(Required String) The mode of the specified subject. Accepted values are: `READWRITE`, `READONLY`, `READONLY_OVERRIDE`, and `IMPORT`.\n"
                    },
                    "restEndpoint": {
                        "type": "string"
                    },
                    "schemaRegistryCluster": {
                        "$ref": "#/types/confluentcloud:index/getSubjectModeSchemaRegistryCluster:getSubjectModeSchemaRegistryCluster"
                    },
                    "subjectName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "mode",
                    "subjectName",
                    "id"
                ]
            }
        },
        "confluentcloud:index/getTag:getTag": {
            "inputs": {
                "description": "A collection of arguments for invoking getTag.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/getTagCredentials:getTagCredentials",
                        "secret": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the tag, for example, `PII`.\n"
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).\n"
                    },
                    "schemaRegistryCluster": {
                        "$ref": "#/types/confluentcloud:index/getTagSchemaRegistryCluster:getTagSchemaRegistryCluster"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTag.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/getTagCredentials:getTagCredentials",
                        "secret": true
                    },
                    "description": {
                        "type": "string",
                        "description": "(Optional String) The description of the tag.\n"
                    },
                    "entityTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Optional List of String) The entity types of the tag, this always returns `[\"cf_entity\"]`.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the Tag, in the format `\u003cSchema Registry cluster ID\u003e/\u003cTag name\u003e`, for example, `lsrc-8wrx70/PII`.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "restEndpoint": {
                        "type": "string"
                    },
                    "schemaRegistryCluster": {
                        "$ref": "#/types/confluentcloud:index/getTagSchemaRegistryCluster:getTagSchemaRegistryCluster"
                    },
                    "version": {
                        "type": "integer",
                        "description": "(Optional Integer) The version, for example, `1`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "entityTypes",
                    "id",
                    "name",
                    "version"
                ]
            }
        },
        "confluentcloud:index/getTagBinding:getTagBinding": {
            "inputs": {
                "description": "A collection of arguments for invoking getTagBinding.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/getTagBindingCredentials:getTagBindingCredentials",
                        "secret": true
                    },
                    "entityName": {
                        "type": "string",
                        "description": "The qualified name of the entity., for example, `lsrc-8wrx70:.:100001`.\n"
                    },
                    "entityType": {
                        "type": "string",
                        "description": "The entity type, for example, `sr_schema`.\n"
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).\n"
                    },
                    "schemaRegistryCluster": {
                        "$ref": "#/types/confluentcloud:index/getTagBindingSchemaRegistryCluster:getTagBindingSchemaRegistryCluster"
                    },
                    "tagName": {
                        "type": "string",
                        "description": "The name of the tag to be applied, for example, `PII`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "entityName",
                    "entityType",
                    "tagName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTagBinding.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/getTagBindingCredentials:getTagBindingCredentials",
                        "secret": true
                    },
                    "entityName": {
                        "type": "string"
                    },
                    "entityType": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the Tag Binding, in the format `\u003cSchema Registry Cluster Id\u003e/\u003cTag Name\u003e/\u003cEntity Name\u003e/\u003cEntity Type\u003e`, for example, `lsrc-8wrx70/PII/lsrc-8wrx70:.:100001/sr_schema`.\n"
                    },
                    "restEndpoint": {
                        "type": "string"
                    },
                    "schemaRegistryCluster": {
                        "$ref": "#/types/confluentcloud:index/getTagBindingSchemaRegistryCluster:getTagBindingSchemaRegistryCluster"
                    },
                    "tagName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "entityName",
                    "entityType",
                    "id",
                    "tagName"
                ]
            }
        },
        "confluentcloud:index/getTransitGatewayAttachment:getTransitGatewayAttachment": {
            "description": "[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n`confluentcloud.TransitGatewayAttachment` describes a Transit Gateway Attachment data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleUsingIdTransitGatewayAttachment = confluentcloud.getTransitGatewayAttachment({\n    id: \"tgwa-abc123\",\n    environment: {\n        id: \"env-xyz456\",\n    },\n});\nexport const exampleUsingId = exampleUsingIdTransitGatewayAttachment;\nconst exampleUsingNameTransitGatewayAttachment = confluentcloud.getTransitGatewayAttachment({\n    displayName: \"my_tgwa\",\n    environment: {\n        id: \"env-xyz456\",\n    },\n});\nexport const exampleUsingName = exampleUsingNameTransitGatewayAttachment;\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_using_id_transit_gateway_attachment = confluentcloud.get_transit_gateway_attachment(id=\"tgwa-abc123\",\n    environment=confluentcloud.GetTransitGatewayAttachmentEnvironmentArgs(\n        id=\"env-xyz456\",\n    ))\npulumi.export(\"exampleUsingId\", example_using_id_transit_gateway_attachment)\nexample_using_name_transit_gateway_attachment = confluentcloud.get_transit_gateway_attachment(display_name=\"my_tgwa\",\n    environment=confluentcloud.GetTransitGatewayAttachmentEnvironmentArgs(\n        id=\"env-xyz456\",\n    ))\npulumi.export(\"exampleUsingName\", example_using_name_transit_gateway_attachment)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUsingIdTransitGatewayAttachment = ConfluentCloud.GetTransitGatewayAttachment.Invoke(new()\n    {\n        Id = \"tgwa-abc123\",\n        Environment = new ConfluentCloud.Inputs.GetTransitGatewayAttachmentEnvironmentInputArgs\n        {\n            Id = \"env-xyz456\",\n        },\n    });\n\n    var exampleUsingNameTransitGatewayAttachment = ConfluentCloud.GetTransitGatewayAttachment.Invoke(new()\n    {\n        DisplayName = \"my_tgwa\",\n        Environment = new ConfluentCloud.Inputs.GetTransitGatewayAttachmentEnvironmentInputArgs\n        {\n            Id = \"env-xyz456\",\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"exampleUsingId\"] = exampleUsingIdTransitGatewayAttachment,\n        [\"exampleUsingName\"] = exampleUsingNameTransitGatewayAttachment,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUsingIdTransitGatewayAttachment, err := confluentcloud.LookupTransitGatewayAttachment(ctx, \u0026confluentcloud.LookupTransitGatewayAttachmentArgs{\n\t\t\tId: pulumi.StringRef(\"tgwa-abc123\"),\n\t\t\tEnvironment: confluentcloud.GetTransitGatewayAttachmentEnvironment{\n\t\t\t\tId: \"env-xyz456\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingId\", exampleUsingIdTransitGatewayAttachment)\n\t\texampleUsingNameTransitGatewayAttachment, err := confluentcloud.LookupTransitGatewayAttachment(ctx, \u0026confluentcloud.LookupTransitGatewayAttachmentArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"my_tgwa\"),\n\t\t\tEnvironment: confluentcloud.GetTransitGatewayAttachmentEnvironment{\n\t\t\t\tId: \"env-xyz456\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingName\", exampleUsingNameTransitGatewayAttachment)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetTransitGatewayAttachmentArgs;\nimport com.pulumi.confluentcloud.inputs.GetTransitGatewayAttachmentEnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUsingIdTransitGatewayAttachment = ConfluentcloudFunctions.getTransitGatewayAttachment(GetTransitGatewayAttachmentArgs.builder()\n            .id(\"tgwa-abc123\")\n            .environment(GetTransitGatewayAttachmentEnvironmentArgs.builder()\n                .id(\"env-xyz456\")\n                .build())\n            .build());\n\n        ctx.export(\"exampleUsingId\", exampleUsingIdTransitGatewayAttachment.applyValue(getTransitGatewayAttachmentResult -\u003e getTransitGatewayAttachmentResult));\n        final var exampleUsingNameTransitGatewayAttachment = ConfluentcloudFunctions.getTransitGatewayAttachment(GetTransitGatewayAttachmentArgs.builder()\n            .displayName(\"my_tgwa\")\n            .environment(GetTransitGatewayAttachmentEnvironmentArgs.builder()\n                .id(\"env-xyz456\")\n                .build())\n            .build());\n\n        ctx.export(\"exampleUsingName\", exampleUsingNameTransitGatewayAttachment.applyValue(getTransitGatewayAttachmentResult -\u003e getTransitGatewayAttachmentResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleUsingIdTransitGatewayAttachment:\n    fn::invoke:\n      Function: confluentcloud:getTransitGatewayAttachment\n      Arguments:\n        id: tgwa-abc123\n        environment:\n          id: env-xyz456\n  exampleUsingNameTransitGatewayAttachment:\n    fn::invoke:\n      Function: confluentcloud:getTransitGatewayAttachment\n      Arguments:\n        displayName: my_tgwa\n        environment:\n          id: env-xyz456\noutputs:\n  exampleUsingId: ${exampleUsingIdTransitGatewayAttachment}\n  exampleUsingName: ${exampleUsingNameTransitGatewayAttachment}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getTransitGatewayAttachment.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the Transit Gateway Attachment.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getTransitGatewayAttachmentEnvironment:getTransitGatewayAttachmentEnvironment",
                        "description": "(Required Configuration Block) supports the following:\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Environment that the Transit Gateway Attachment belongs to, for example, `env-xyz456`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "environment"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTransitGatewayAttachment.\n",
                "properties": {
                    "aws": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getTransitGatewayAttachmentAw:getTransitGatewayAttachmentAw"
                        },
                        "description": "(Required Configuration Block) The AWS-specific Transit Gateway Attachment details. It supports the following:\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "(Required String) The name of the Transit Gateway Attachment.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getTransitGatewayAttachmentEnvironment:getTransitGatewayAttachmentEnvironment",
                        "description": "(Required Configuration Block) supports the following:\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the Network that the Transit Gateway Attachment belongs to, for example, `n-abc123`.\n"
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getTransitGatewayAttachmentNetwork:getTransitGatewayAttachmentNetwork"
                        },
                        "description": "(Required Configuration Block) supports the following:\n"
                    }
                },
                "type": "object",
                "required": [
                    "aws",
                    "displayName",
                    "environment",
                    "id",
                    "networks"
                ]
            }
        },
        "confluentcloud:index/getUser:getUser": {
            "description": "[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n`confluentcloud.getUser` describes a User data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleUsingIdUser = confluentcloud.getUser({\n    id: \"u-abc123\",\n});\nexport const exampleUsingId = exampleUsingIdUser;\nconst exampleUsingEmail = confluentcloud.getUser({\n    email: \"test123@gmail.com\",\n});\nconst test_env = new confluentcloud.Environment(\"test-env\", {});\nconst standard_cluster_on_aws = new confluentcloud.KafkaCluster(\"standard-cluster-on-aws\", {\n    availability: \"SINGLE_ZONE\",\n    cloud: \"AWS\",\n    region: \"us-west-2\",\n    standard: {},\n    environment: {\n        id: test_env.id,\n    },\n});\nconst test_role_binding = new confluentcloud.RoleBinding(\"test-role-binding\", {\n    principal: exampleUsingEmail.then(exampleUsingEmail =\u003e `User:${exampleUsingEmail.id}`),\n    roleName: \"CloudClusterAdmin\",\n    crnPattern: standard_cluster_on_aws.rbacCrn,\n});\nconst exampleUsingFullName = confluentcloud.getUser({\n    fullName: \"John Doe\",\n});\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_using_id_user = confluentcloud.get_user(id=\"u-abc123\")\npulumi.export(\"exampleUsingId\", example_using_id_user)\nexample_using_email = confluentcloud.get_user(email=\"test123@gmail.com\")\ntest_env = confluentcloud.Environment(\"test-env\")\nstandard_cluster_on_aws = confluentcloud.KafkaCluster(\"standard-cluster-on-aws\",\n    availability=\"SINGLE_ZONE\",\n    cloud=\"AWS\",\n    region=\"us-west-2\",\n    standard=confluentcloud.KafkaClusterStandardArgs(),\n    environment=confluentcloud.KafkaClusterEnvironmentArgs(\n        id=test_env.id,\n    ))\ntest_role_binding = confluentcloud.RoleBinding(\"test-role-binding\",\n    principal=f\"User:{example_using_email.id}\",\n    role_name=\"CloudClusterAdmin\",\n    crn_pattern=standard_cluster_on_aws.rbac_crn)\nexample_using_full_name = confluentcloud.get_user(full_name=\"John Doe\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUsingIdUser = ConfluentCloud.GetUser.Invoke(new()\n    {\n        Id = \"u-abc123\",\n    });\n\n    var exampleUsingEmail = ConfluentCloud.GetUser.Invoke(new()\n    {\n        Email = \"test123@gmail.com\",\n    });\n\n    var test_env = new ConfluentCloud.Environment(\"test-env\");\n\n    var standard_cluster_on_aws = new ConfluentCloud.KafkaCluster(\"standard-cluster-on-aws\", new()\n    {\n        Availability = \"SINGLE_ZONE\",\n        Cloud = \"AWS\",\n        Region = \"us-west-2\",\n        Standard = null,\n        Environment = new ConfluentCloud.Inputs.KafkaClusterEnvironmentArgs\n        {\n            Id = test_env.Id,\n        },\n    });\n\n    var test_role_binding = new ConfluentCloud.RoleBinding(\"test-role-binding\", new()\n    {\n        Principal = $\"User:{exampleUsingEmail.Apply(getUserResult =\u003e getUserResult.Id)}\",\n        RoleName = \"CloudClusterAdmin\",\n        CrnPattern = standard_cluster_on_aws.RbacCrn,\n    });\n\n    var exampleUsingFullName = ConfluentCloud.GetUser.Invoke(new()\n    {\n        FullName = \"John Doe\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"exampleUsingId\"] = exampleUsingIdUser,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUsingIdUser, err := confluentcloud.GetUser(ctx, \u0026confluentcloud.GetUserArgs{\n\t\t\tId: pulumi.StringRef(\"u-abc123\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingId\", exampleUsingIdUser)\n\t\texampleUsingEmail, err := confluentcloud.GetUser(ctx, \u0026confluentcloud.GetUserArgs{\n\t\t\tEmail: pulumi.StringRef(\"test123@gmail.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = confluentcloud.NewEnvironment(ctx, \"test-env\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = confluentcloud.NewKafkaCluster(ctx, \"standard-cluster-on-aws\", \u0026confluentcloud.KafkaClusterArgs{\n\t\t\tAvailability: pulumi.String(\"SINGLE_ZONE\"),\n\t\t\tCloud:        pulumi.String(\"AWS\"),\n\t\t\tRegion:       pulumi.String(\"us-west-2\"),\n\t\t\tStandard:     nil,\n\t\t\tEnvironment: \u0026confluentcloud.KafkaClusterEnvironmentArgs{\n\t\t\t\tId: test_env.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = confluentcloud.NewRoleBinding(ctx, \"test-role-binding\", \u0026confluentcloud.RoleBindingArgs{\n\t\t\tPrincipal:  pulumi.String(fmt.Sprintf(\"User:%v\", exampleUsingEmail.Id)),\n\t\t\tRoleName:   pulumi.String(\"CloudClusterAdmin\"),\n\t\t\tCrnPattern: standard_cluster_on_aws.RbacCrn,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = confluentcloud.GetUser(ctx, \u0026confluentcloud.GetUserArgs{\n\t\t\tFullName: pulumi.StringRef(\"John Doe\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetUserArgs;\nimport com.pulumi.confluentcloud.Environment;\nimport com.pulumi.confluentcloud.KafkaCluster;\nimport com.pulumi.confluentcloud.KafkaClusterArgs;\nimport com.pulumi.confluentcloud.inputs.KafkaClusterStandardArgs;\nimport com.pulumi.confluentcloud.inputs.KafkaClusterEnvironmentArgs;\nimport com.pulumi.confluentcloud.RoleBinding;\nimport com.pulumi.confluentcloud.RoleBindingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUsingIdUser = ConfluentcloudFunctions.getUser(GetUserArgs.builder()\n            .id(\"u-abc123\")\n            .build());\n\n        ctx.export(\"exampleUsingId\", exampleUsingIdUser.applyValue(getUserResult -\u003e getUserResult));\n        final var exampleUsingEmail = ConfluentcloudFunctions.getUser(GetUserArgs.builder()\n            .email(\"test123@gmail.com\")\n            .build());\n\n        var test_env = new Environment(\"test-env\");\n\n        var standard_cluster_on_aws = new KafkaCluster(\"standard-cluster-on-aws\", KafkaClusterArgs.builder()        \n            .availability(\"SINGLE_ZONE\")\n            .cloud(\"AWS\")\n            .region(\"us-west-2\")\n            .standard()\n            .environment(KafkaClusterEnvironmentArgs.builder()\n                .id(test_env.id())\n                .build())\n            .build());\n\n        var test_role_binding = new RoleBinding(\"test-role-binding\", RoleBindingArgs.builder()        \n            .principal(String.format(\"User:%s\", exampleUsingEmail.applyValue(getUserResult -\u003e getUserResult.id())))\n            .roleName(\"CloudClusterAdmin\")\n            .crnPattern(standard_cluster_on_aws.rbacCrn())\n            .build());\n\n        final var exampleUsingFullName = ConfluentcloudFunctions.getUser(GetUserArgs.builder()\n            .fullName(\"John Doe\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test-env:\n    type: confluentcloud:Environment\n  standard-cluster-on-aws:\n    type: confluentcloud:KafkaCluster\n    properties:\n      availability: SINGLE_ZONE\n      cloud: AWS\n      region: us-west-2\n      standard: {}\n      environment:\n        id: ${[\"test-env\"].id}\n  test-role-binding:\n    type: confluentcloud:RoleBinding\n    properties:\n      principal: User:${exampleUsingEmail.id}\n      roleName: CloudClusterAdmin\n      crnPattern: ${[\"standard-cluster-on-aws\"].rbacCrn}\nvariables:\n  exampleUsingIdUser:\n    fn::invoke:\n      Function: confluentcloud:getUser\n      Arguments:\n        id: u-abc123\n  exampleUsingEmail:\n    fn::invoke:\n      Function: confluentcloud:getUser\n      Arguments:\n        email: test123@gmail.com\n  exampleUsingFullName:\n    fn::invoke:\n      Function: confluentcloud:getUser\n      Arguments:\n        fullName: John Doe\noutputs:\n  exampleUsingId: ${exampleUsingIdUser}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The email address of the User.\n"
                    },
                    "fullName": {
                        "type": "string",
                        "description": "The full name of the User.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the User (e.g., `u-abc123`).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "(Required String) An API Version of the schema version of the User.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "(Required String) The email address of the User.\n"
                    },
                    "fullName": {
                        "type": "string",
                        "description": "(Required String) The full name of the User.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the User, for example, `u-abc123`.\n"
                    },
                    "kind": {
                        "type": "string",
                        "description": "(Required String) A kind of the User.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "email",
                    "fullName",
                    "id",
                    "kind"
                ]
            }
        },
        "confluentcloud:index/getUsers:getUsers": {
            "description": "[![Preview](https://img.shields.io/badge/Lifecycle%20Stage-Preview-%2300afba)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)\n\n\u003e **Note:** `confluentcloud.getUsers` data source is available in **Preview** for early adopters. Preview features are introduced to gather customer feedback. This feature should be used only for evaluation and non-production testing purposes or to provide feedback to Confluent, particularly as it becomes more widely available in follow-on editions.  \n**Preview** features are intended for evaluation use in development and testing environments only, and not for production use. The warranty, SLA, and Support Services provisions of your agreement with Confluent do not apply to Preview features. Preview features are considered to be a Proof of Concept as defined in the Confluent Cloud Terms of Service. Confluent may discontinue providing preview releases of the Preview features at any time in Confluent’s sole discretion.\n\n`confluentcloud.getUsers` describes a data source for Users.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst main = confluentcloud.getUsers({});\nexport const users = main.then(main =\u003e main.ids);\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nmain = confluentcloud.get_users()\npulumi.export(\"users\", main.ids)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = ConfluentCloud.GetUsers.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"users\"] = main.Apply(getUsersResult =\u003e getUsersResult.Ids),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := confluentcloud.GetUsers(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"users\", main.Ids)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var main = ConfluentcloudFunctions.getUsers();\n\n        ctx.export(\"users\", main.applyValue(getUsersResult -\u003e getUsersResult.ids()));\n    }\n}\n```\n```yaml\nvariables:\n  main:\n    fn::invoke:\n      Function: confluentcloud:getUsers\n      Arguments: {}\noutputs:\n  users: ${main.ids}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getUsers.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Required List of Strings) The list of User IDs, for example: `[\"u-abc123\", \"u-abc124\"]`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "ids",
                    "id"
                ]
            }
        }
    }
}
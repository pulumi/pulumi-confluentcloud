{
    "name": "confluentcloud",
    "displayName": "Confluent",
    "description": "A Pulumi package for creating and managing Confluent cloud resources.",
    "keywords": [
        "pulumi",
        "confluentcloud",
        "category/cloud"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`confluent` Terraform Provider](https://github.com/confluentinc/terraform-provider-confluent).",
    "repository": "https://github.com/pulumi/pulumi-confluentcloud",
    "publisher": "Pulumi",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": {
                "confluentcloud": "ConfluentCloud"
            },
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing Confluent cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/confluentinc/terraform-provider-confluent)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-confluentcloud` repo](https://github.com/pulumi/pulumi-confluentcloud/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`confluentinc/terraform-provider-confluent` repo](https://github.com/confluentinc/terraform-provider-confluent/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/confluentinc/terraform-provider-confluent)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-confluentcloud` repo](https://github.com/pulumi/pulumi-confluentcloud/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`confluentinc/terraform-provider-confluent` repo](https://github.com/confluentinc/terraform-provider-confluent/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "config": {
        "variables": {
            "cloudApiKey": {
                "type": "string",
                "description": "The Confluent Cloud API Key.\n"
            },
            "cloudApiSecret": {
                "type": "string",
                "description": "The Confluent Cloud API Secret.\n"
            },
            "endpoint": {
                "type": "string",
                "description": "The base endpoint of Confluent Cloud API.\n"
            },
            "kafkaApiKey": {
                "type": "string",
                "description": "The Kafka Cluster API Key.\n"
            },
            "kafkaApiSecret": {
                "type": "string",
                "description": "The Kafka Cluster API Secret.\n"
            },
            "kafkaRestEndpoint": {
                "type": "string",
                "description": "The Kafka Cluster REST Endpoint.\n"
            }
        }
    },
    "types": {
        "confluentcloud:index/ApiKeyManagedResource:ApiKeyManagedResource": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "The API group and version of the managed resource that the API Key associated with, for example, `cmk/v2`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/ApiKeyManagedResourceEnvironment:ApiKeyManagedResourceEnvironment",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the managed resource belongs to, for example, `env-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of the managed resource that the API Key associated with, for example, `Cluster`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "apiVersion",
                "environment",
                "id",
                "kind"
            ]
        },
        "confluentcloud:index/ApiKeyManagedResourceEnvironment:ApiKeyManagedResourceEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the managed resource belongs to, for example, `env-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/ApiKeyOwner:ApiKeyOwner": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "The API group and version of the managed resource that the API Key associated with, for example, `cmk/v2`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the managed resource belongs to, for example, `env-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of the managed resource that the API Key associated with, for example, `Cluster`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "apiVersion",
                "id",
                "kind"
            ]
        },
        "confluentcloud:index/ConnectorEnvironment:ConnectorEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Kafka cluster that the connector belongs to, for example, `lkc-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/ConnectorKafkaCluster:ConnectorKafkaCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Kafka cluster that the connector belongs to, for example, `lkc-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/KafkaAclCredentials:KafkaAclCredentials": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Kafka API Key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secret": {
                    "type": "string",
                    "description": "The Kafka API Secret.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "secret"
            ]
        },
        "confluentcloud:index/KafkaAclKafkaCluster:KafkaAclKafkaCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Kafka cluster, for example, `lkc-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/KafkaClusterBasic:KafkaClusterBasic": {
            "type": "object"
        },
        "confluentcloud:index/KafkaClusterDedicated:KafkaClusterDedicated": {
            "properties": {
                "cku": {
                    "type": "integer",
                    "description": "The number of Confluent Kafka Units (CKUs) for Dedicated cluster types. The minimum number of CKUs for `SINGLE_ZONE` dedicated clusters is `1` whereas `MULTI_ZONE` dedicated clusters must have more than `2` CKUs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "encryptionKey": {
                    "type": "string",
                    "description": "The ID of the encryption key that is used to encrypt the data in the Kafka cluster, for example, `arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab` (key Amazon Resource Name) for AWS or `projects/my-test-project/locations/global/keyRings/test-byok/cryptoKeys/test` for GCP. Append required permissions to the key policy before creating a Kafka cluster, see [Encrypt Confluent Cloud Clusters using Self-Managed Keys](https://docs.confluent.io/cloud/current/clusters/byok/index.html) for more details. At the moment, self-managed encryption keys are only available for the Dedicated clusters on AWS or GCP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cku"
            ]
        },
        "confluentcloud:index/KafkaClusterEnvironment:KafkaClusterEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Network that the Kafka cluster belongs to, for example, `n-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/KafkaClusterNetwork:KafkaClusterNetwork": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Network that the Kafka cluster belongs to, for example, `n-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/KafkaClusterStandard:KafkaClusterStandard": {
            "type": "object"
        },
        "confluentcloud:index/KafkaTopicCredentials:KafkaTopicCredentials": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Kafka API Key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secret": {
                    "type": "string",
                    "description": "The Kafka API Secret.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "secret"
            ]
        },
        "confluentcloud:index/KafkaTopicKafkaCluster:KafkaTopicKafkaCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Kafka cluster, for example, `lkc-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/NetworkAw:NetworkAw": {
            "properties": {
                "privateLinkEndpointService": {
                    "type": "string",
                    "description": "(Optional String) The AWS VPC endpoint service for the network (used for Private Link) if available.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpc": {
                    "type": "string",
                    "description": "(Required String) The AWS VPC ID for the network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "privateLinkEndpointService",
                        "vpc"
                    ]
                }
            }
        },
        "confluentcloud:index/NetworkAzure:NetworkAzure": {
            "properties": {
                "privateLinkServiceAliases": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Optional Map) The mapping of zones to Private Link Service Aliases if available. Keys are zone names, for example, `1` and values are [Azure Private Link Service Aliases](https://docs.microsoft.com/en-us/azure/private-link/private-link-service-overview#share-your-service), for example, `s-nk99e-privatelink-1.8c43dcd0-695c-1234-bc35-11fe6abb303a.centralus.azure.privatelinkservice`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "privateLinkServiceAliases"
                    ]
                }
            }
        },
        "confluentcloud:index/NetworkEnvironment:NetworkEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Network belongs to, for example, `env-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/NetworkGcp:NetworkGcp": {
            "properties": {
                "project": {
                    "type": "string",
                    "description": "(Required String) The GCP project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "vpcNetwork": {
                    "type": "string",
                    "description": "(Required String) The GCP VPC network name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "project",
                        "vpcNetwork"
                    ]
                }
            }
        },
        "confluentcloud:index/PeeringAws:PeeringAws": {
            "properties": {
                "account": {
                    "type": "string",
                    "description": "The AWS Account ID of the peer VPC owner. You can find your AWS Account ID [here](https://console.aws.amazon.com/billing/home?#/account) under **My Account** section of the AWS Management Console. Must be a **12 character string**.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "customerRegion": {
                    "type": "string",
                    "description": "The region of the Azure peer VNet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "routes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The AWS VPC CIDR blocks or subsets. This must be from the supported CIDR blocks and must not overlap with your Confluent Cloud CIDR block or any other network peering connection VPC CIDR (learn more about the requirements [here](https://docs.confluent.io/cloud/current/networking/peering/aws-peering.html#vpc-peering-on-aws)). You can find AWS VPC CIDR [here](https://console.aws.amazon.com/vpc/) under **Your VPCs \u003e Target VPC \u003e Details** section of the AWS Management Console.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "vpc": {
                    "type": "string",
                    "description": "The AWS VPC ID of the peer VPC that you're peering with Confluent Cloud. You can find your AWS VPC ID [here](https://console.aws.amazon.com/vpc/) under **Your VPCs** section of the AWS Management Console. Must start with `vpc-`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "account",
                "customerRegion",
                "routes",
                "vpc"
            ]
        },
        "confluentcloud:index/PeeringAzure:PeeringAzure": {
            "properties": {
                "customerRegion": {
                    "type": "string",
                    "description": "The region of the Azure peer VNet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "tenant": {
                    "type": "string",
                    "description": "The Tenant ID that represents an organization in Azure Active Directory. You can find your Azure Tenant ID in the [Azure Portal under Azure Active Directory](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview). Must be a valid **32 character UUID string**.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "vnet": {
                    "type": "string",
                    "description": "The resource (composite) ID of the peer Virtual Network that you're peering with Confluent Cloud, in the format `/subscriptions/\u003cSubscription ID\u003e/resourceGroups/\u003cResource Group Name\u003e/providers/Microsoft.Network/virtualNetworks/\u003cVNet name\u003e`. You can find Subscription ID, Resource Group Name and your VNet name under **Virtual Networks \u003e Target VNet \u003e Essentials** section of your [Microsoft Azure Portal](https://portal.azure.com/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "customerRegion",
                "tenant",
                "vnet"
            ]
        },
        "confluentcloud:index/PeeringEnvironment:PeeringEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Network that the Peering belongs to, for example, `n-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/PeeringGcp:PeeringGcp": {
            "properties": {
                "importCustomRoutes": {
                    "type": "boolean",
                    "description": "The Import Custom Routes option enables connectivity to a Confluent Cloud cluster in Google Cloud from customer premise or other clouds, such as AWS and Azure, through a customer VPC that is peered with Confluent Cloud in the same region. Defaults to `false`. Learn more about considerations / limitations of the Import Custom Routes option [here](https://docs.confluent.io/cloud/current/networking/peering/gcp-peering.html#import-custom-routes).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "project": {
                    "type": "string",
                    "description": "The GCP Project ID. You can find your Google Cloud Project ID under **Project ID** section of your [Google Cloud Console dashboard](https://console.cloud.google.com/home/dashboard).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "vpcNetwork": {
                    "type": "string",
                    "description": "The VPC network name that you're peering to Confluent Cloud. You can find your VPC network name under **VPC Networks** section of your [Google Cloud Console](https://console.cloud.google.com/networking/networks/list).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "project",
                "vpcNetwork"
            ]
        },
        "confluentcloud:index/PeeringNetwork:PeeringNetwork": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Network that the Peering belongs to, for example, `n-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/PrivateLinkAccessAws:PrivateLinkAccessAws": {
            "properties": {
                "account": {
                    "type": "string",
                    "description": "The AWS account ID to enable for the Private Link Access. You can find your AWS account ID [here] (https://console.aws.amazon.com/billing/home?#/account) under **My Account** in your AWS Management Console. Must be a **12 character string**.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "account"
            ]
        },
        "confluentcloud:index/PrivateLinkAccessAzure:PrivateLinkAccessAzure": {
            "properties": {
                "subscription": {
                    "type": "string",
                    "description": "The Azure subscription ID to enable for the Private Link Access. You can find your Azure subscription ID in the subscription section of your [Microsoft Azure Portal] (https://portal.azure.com/#blade/Microsoft_Azure_Billing/SubscriptionsBlade). Must be a valid **32 character UUID string**.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "subscription"
            ]
        },
        "confluentcloud:index/PrivateLinkAccessEnvironment:PrivateLinkAccessEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Network that the Private Link Access belongs to, for example, `n-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/PrivateLinkAccessNetwork:PrivateLinkAccessNetwork": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Network that the Private Link Access belongs to, for example, `n-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getKafkaClusterBasic:getKafkaClusterBasic": {
            "type": "object"
        },
        "confluentcloud:index/getKafkaClusterDedicated:getKafkaClusterDedicated": {
            "properties": {
                "cku": {
                    "type": "integer",
                    "description": "(Required Number) The number of Confluent Kafka Units (CKUs) for Dedicated cluster types. The minimum number of CKUs for `SINGLE_ZONE` dedicated clusters is `1` whereas `MULTI_ZONE` dedicated clusters must have more than `2` CKUs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "encryptionKey": {
                    "type": "string",
                    "description": "(Optional String) The ID of the encryption key that is used to encrypt the data in the Kafka cluster, for example, `arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab` (key Amazon Resource Name) for AWS or `projects/my-test-project/locations/global/keyRings/test-byok/cryptoKeys/test` for GCP. Append required permissions to the key policy before creating a Kafka cluster, see [Encrypt Confluent Cloud Clusters using Self-Managed Keys](https://docs.confluent.io/cloud/current/clusters/byok/index.html) for more details. At the moment, self-managed encryption keys are only available for the Dedicated clusters on AWS or GCP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cku",
                "encryptionKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getKafkaClusterEnvironment:getKafkaClusterEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Kafka cluster belongs to, for example, `env-xyz456`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getKafkaClusterNetwork:getKafkaClusterNetwork": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Kafka cluster belongs to, for example, `env-xyz456`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getKafkaClusterStandard:getKafkaClusterStandard": {
            "type": "object"
        },
        "confluentcloud:index/getKafkaTopicCredentials:getKafkaTopicCredentials": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Kafka API Key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secret": {
                    "type": "string",
                    "description": "The Kafka API Secret.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "secret"
            ]
        },
        "confluentcloud:index/getKafkaTopicKafkaCluster:getKafkaTopicKafkaCluster": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Kafka cluster, for example, `lkc-abc123`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getNetworkAw:getNetworkAw": {
            "properties": {
                "privateLinkEndpointService": {
                    "type": "string",
                    "description": "(Optional String) The AWS VPC endpoint service for the network (used for Private Link) if available.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpc": {
                    "type": "string",
                    "description": "(Required String) The AWS VPC ID for the network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "privateLinkEndpointService",
                "vpc"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getNetworkAzure:getNetworkAzure": {
            "properties": {
                "privateLinkServiceAliases": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Optional Map) The mapping of zones to Private Link Service Aliases if available. Keys are zones and values are [Azure Private Link Service Aliases](https://docs.microsoft.com/en-us/azure/private-link/private-link-service-overview#share-your-service).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "privateLinkServiceAliases"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getNetworkEnvironment:getNetworkEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Network belongs to, for example, `env-xyz456`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getNetworkGcp:getNetworkGcp": {
            "properties": {
                "project": {
                    "type": "string",
                    "description": "(Required String) The GCP project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcNetwork": {
                    "type": "string",
                    "description": "(Required String) The GCP VPC network name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "project",
                "vpcNetwork"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getPeeringAw:getPeeringAw": {
            "properties": {
                "account": {
                    "type": "string",
                    "description": "(Required String) The AWS Account ID of the peer VPC owner. You can find your AWS Account ID [here](https://console.aws.amazon.com/billing/home?#/account) under **My Account** section of the AWS Management Console. Must be a **12 character string**.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customerRegion": {
                    "type": "string",
                    "description": "(Required String) The region of the Azure peer VNet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Required String) The AWS VPC CIDR blocks or subsets. This must be from the supported CIDR blocks and must not overlap with your Confluent Cloud CIDR block or any other network peering connection VPC CIDR (learn more about the requirements [here](https://docs.confluent.io/cloud/current/networking/peering/aws-peering.html#vpc-peering-on-aws)). You can find AWS VPC CIDR [here](https://console.aws.amazon.com/vpc/) under **Your VPCs \u003e Target VPC \u003e Details** section of the AWS Management Console.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpc": {
                    "type": "string",
                    "description": "(Required String) The AWS VPC ID of the peer VPC that you're peering with Confluent Cloud. You can find your AWS VPC ID [here](https://console.aws.amazon.com/vpc/) under **Your VPCs** section of the AWS Management Console. Must start with `vpc-`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "account",
                "customerRegion",
                "routes",
                "vpc"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getPeeringAzure:getPeeringAzure": {
            "properties": {
                "customerRegion": {
                    "type": "string",
                    "description": "(Required String) The region of the Azure peer VNet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tenant": {
                    "type": "string",
                    "description": "(Required String) The Tenant ID that represents an organization in Azure Active Directory. You can find your Azure Tenant ID in the [Azure Portal under Azure Active Directory](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview). Must be a valid **32 character UUID string**.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vnet": {
                    "type": "string",
                    "description": "(Required String) The resource (composite) ID of the peer Virtual Network that you're peering with Confluent Cloud, in the format `/subscriptions/\u003cSubscription ID\u003e/resourceGroups/\u003cResource Group Name\u003e/providers/Microsoft.Network/virtualNetworks/\u003cVNet name\u003e`. You can find Subscription ID, Resource Group Name and your VNet name under **Virtual Networks \u003e Target VNet \u003e Essentials** section of your [Microsoft Azure Portal](https://portal.azure.com/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "customerRegion",
                "tenant",
                "vnet"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getPeeringEnvironment:getPeeringEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Peering belongs to, for example, `env-xyz456`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getPeeringGcp:getPeeringGcp": {
            "properties": {
                "importCustomRoutes": {
                    "type": "boolean",
                    "description": "(Optional Boolean) The Import Custom Routes option enables connectivity to a Confluent Cloud cluster in Google Cloud from customer premise or other clouds, such as AWS and Azure, through a customer VPC that is peered with Confluent Cloud in the same region. Defaults to `false`. Learn more about considerations / limitations of the Import Custom Routes option [here](https://docs.confluent.io/cloud/current/networking/peering/gcp-peering.html#import-custom-routes).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "project": {
                    "type": "string",
                    "description": "(Required String) The GCP Project ID. You can find your Google Cloud Project ID under **Project ID** section of your [Google Cloud Console dashboard](https://console.cloud.google.com/home/dashboard).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcNetwork": {
                    "type": "string",
                    "description": "(Required String) The VPC network name that you're peering to Confluent Cloud. You can find your VPC network name under **VPC Networks** section of your [Google Cloud Console](https://console.cloud.google.com/networking/networks/list).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "importCustomRoutes",
                "project",
                "vpcNetwork"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getPeeringNetwork:getPeeringNetwork": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Peering belongs to, for example, `env-xyz456`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getPrivateLinkAccessAw:getPrivateLinkAccessAw": {
            "properties": {
                "account": {
                    "type": "string",
                    "description": "(Required String) The AWS account ID to enable for the Private Link Access. You can find your AWS account ID [here](https://console.aws.amazon.com/billing/home?#/account) under **My Account** in your AWS Management Console. Must be a **12 character string**.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "account"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getPrivateLinkAccessAzure:getPrivateLinkAccessAzure": {
            "properties": {
                "subscription": {
                    "type": "string",
                    "description": "(Required String) The Azure subscription ID to enable for the Private Link Access. You can find your Azure subscription ID in the subscription section of your [Microsoft Azure Portal](https://portal.azure.com/#blade/Microsoft_Azure_Billing/SubscriptionsBlade). Must be a valid **32 character UUID string**.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "subscription"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "confluentcloud:index/getPrivateLinkAccessEnvironment:getPrivateLinkAccessEnvironment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Private Link Access belongs to, for example, `env-xyz456`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "confluentcloud:index/getPrivateLinkAccessNetwork:getPrivateLinkAccessNetwork": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Environment that the Private Link Access belongs to, for example, `env-xyz456`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the confluent package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "cloudApiKey": {
                "type": "string",
                "description": "The Confluent Cloud API Key.\n"
            },
            "cloudApiSecret": {
                "type": "string",
                "description": "The Confluent Cloud API Secret.\n"
            },
            "endpoint": {
                "type": "string",
                "description": "The base endpoint of Confluent Cloud API.\n"
            },
            "kafkaApiKey": {
                "type": "string",
                "description": "The Kafka Cluster API Key.\n"
            },
            "kafkaApiSecret": {
                "type": "string",
                "description": "The Kafka Cluster API Secret.\n"
            },
            "kafkaRestEndpoint": {
                "type": "string",
                "description": "The Kafka Cluster REST Endpoint.\n"
            }
        },
        "inputProperties": {
            "cloudApiKey": {
                "type": "string",
                "description": "The Confluent Cloud API Key.\n"
            },
            "cloudApiSecret": {
                "type": "string",
                "description": "The Confluent Cloud API Secret.\n"
            },
            "endpoint": {
                "type": "string",
                "description": "The base endpoint of Confluent Cloud API.\n"
            },
            "kafkaApiKey": {
                "type": "string",
                "description": "The Kafka Cluster API Key.\n"
            },
            "kafkaApiSecret": {
                "type": "string",
                "description": "The Kafka Cluster API Secret.\n"
            },
            "kafkaRestEndpoint": {
                "type": "string",
                "description": "The Kafka Cluster REST Endpoint.\n"
            }
        }
    },
    "resources": {
        "confluentcloud:index/apiKey:ApiKey": {
            "description": "\n\n\n## Import\n\nYou can import a Kafka API Key by using the Environment ID and Kafka API Key ID in the format `\u003cEnvironment ID\u003e/\u003cKafka API Key ID\u003e`, for example$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\" $ export API_KEY_SECRET=\"\u003capi_key_secret\u003e\" # Option #1Kafka API Key\n\n```sh\n $ pulumi import confluentcloud:index/apiKey:ApiKey example_kafka_api_key \"env-abc123/UTT6WDRXX7FHD2GV\"\n```\n\n You can import a Cloud API Key by using Cloud API Key ID, for example$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\" $ export API_KEY_SECRET=\"\u003capi_key_secret\u003e\" # Option #2Cloud API Key\n\n```sh\n $ pulumi import confluentcloud:index/apiKey:ApiKey example_cloud_api_key \"4UEXOMMWIBE5KZQG\"\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A free-form description of the API Account.\n"
                },
                "disableWaitForReady": {
                    "type": "boolean",
                    "description": "An optional flag to disable wait-for-readiness on create. Its primary use case is for Cluster API Keys for private networking options when readiness check fails. Must be unset when importing. Defaults to `false`.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "A human-readable name for the API Key.\n"
                },
                "managedResource": {
                    "$ref": "#/types/confluentcloud:index/ApiKeyManagedResource:ApiKeyManagedResource",
                    "description": "The resource associated with this object. The only resource that is supported is 'cmk.v2.KafkaCluster'.\n"
                },
                "owner": {
                    "$ref": "#/types/confluentcloud:index/ApiKeyOwner:ApiKeyOwner",
                    "description": "The owner to which the API Key belongs. The owner can be one of 'iam.v2.User', 'iam.v2.ServiceAccount'.\n"
                },
                "secret": {
                    "type": "string",
                    "description": "(Required String, Sensitive) The secret of the API Key.\n"
                }
            },
            "required": [
                "owner",
                "secret"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A free-form description of the API Account.\n"
                },
                "disableWaitForReady": {
                    "type": "boolean",
                    "description": "An optional flag to disable wait-for-readiness on create. Its primary use case is for Cluster API Keys for private networking options when readiness check fails. Must be unset when importing. Defaults to `false`.\n",
                    "willReplaceOnChanges": true
                },
                "displayName": {
                    "type": "string",
                    "description": "A human-readable name for the API Key.\n"
                },
                "managedResource": {
                    "$ref": "#/types/confluentcloud:index/ApiKeyManagedResource:ApiKeyManagedResource",
                    "description": "The resource associated with this object. The only resource that is supported is 'cmk.v2.KafkaCluster'.\n",
                    "willReplaceOnChanges": true
                },
                "owner": {
                    "$ref": "#/types/confluentcloud:index/ApiKeyOwner:ApiKeyOwner",
                    "description": "The owner to which the API Key belongs. The owner can be one of 'iam.v2.User', 'iam.v2.ServiceAccount'.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "owner"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApiKey resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A free-form description of the API Account.\n"
                    },
                    "disableWaitForReady": {
                        "type": "boolean",
                        "description": "An optional flag to disable wait-for-readiness on create. Its primary use case is for Cluster API Keys for private networking options when readiness check fails. Must be unset when importing. Defaults to `false`.\n",
                        "willReplaceOnChanges": true
                    },
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the API Key.\n"
                    },
                    "managedResource": {
                        "$ref": "#/types/confluentcloud:index/ApiKeyManagedResource:ApiKeyManagedResource",
                        "description": "The resource associated with this object. The only resource that is supported is 'cmk.v2.KafkaCluster'.\n",
                        "willReplaceOnChanges": true
                    },
                    "owner": {
                        "$ref": "#/types/confluentcloud:index/ApiKeyOwner:ApiKeyOwner",
                        "description": "The owner to which the API Key belongs. The owner can be one of 'iam.v2.User', 'iam.v2.ServiceAccount'.\n",
                        "willReplaceOnChanges": true
                    },
                    "secret": {
                        "type": "string",
                        "description": "(Required String, Sensitive) The secret of the API Key.\n"
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/connector:Connector": {
            "description": "\n\n\n## Import\n\nYou can import a connector by using Environment ID, Kafka cluster ID, and connector's name, in the format `\u003cEnvironment ID\u003e/\u003cKafka cluster ID\u003e/\u003cConnector name\u003e`, for example$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/connector:Connector my_connector \"env-abc123/lkc-abc123/S3_SINKConnector_0\"\n```\n\n ",
            "properties": {
                "configNonsensitive": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The custom connector _nonsensitive_ configuration settings to set:\n"
                },
                "configSensitive": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The custom connector _sensitive_ configuration settings to set:\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/ConnectorEnvironment:ConnectorEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n"
                },
                "kafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/ConnectorKafkaCluster:ConnectorKafkaCluster"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the connector (one of `\"NONE\"`, `\"PROVISIONING\"`, `\"RUNNING\"`, `\"DEGRADED\"`, `\"FAILED\"`, `\"PAUSED\"`, `\"DELETED\"`). Pausing (`\"RUNNING\" \u003e \"PAUSED\"`) and resuming (`\"PAUSED\" \u003e \"RUNNING\"`) a connector is supported via an update operation.\n"
                }
            },
            "required": [
                "configNonsensitive",
                "configSensitive",
                "environment",
                "kafkaCluster",
                "status"
            ],
            "inputProperties": {
                "configNonsensitive": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The custom connector _nonsensitive_ configuration settings to set:\n"
                },
                "configSensitive": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The custom connector _sensitive_ configuration settings to set:\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/ConnectorEnvironment:ConnectorEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                    "willReplaceOnChanges": true
                },
                "kafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/ConnectorKafkaCluster:ConnectorKafkaCluster",
                    "willReplaceOnChanges": true
                },
                "status": {
                    "type": "string",
                    "description": "The status of the connector (one of `\"NONE\"`, `\"PROVISIONING\"`, `\"RUNNING\"`, `\"DEGRADED\"`, `\"FAILED\"`, `\"PAUSED\"`, `\"DELETED\"`). Pausing (`\"RUNNING\" \u003e \"PAUSED\"`) and resuming (`\"PAUSED\" \u003e \"RUNNING\"`) a connector is supported via an update operation.\n"
                }
            },
            "requiredInputs": [
                "configNonsensitive",
                "environment",
                "kafkaCluster"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Connector resources.\n",
                "properties": {
                    "configNonsensitive": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The custom connector _nonsensitive_ configuration settings to set:\n"
                    },
                    "configSensitive": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The custom connector _sensitive_ configuration settings to set:\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/ConnectorEnvironment:ConnectorEnvironment",
                        "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                        "willReplaceOnChanges": true
                    },
                    "kafkaCluster": {
                        "$ref": "#/types/confluentcloud:index/ConnectorKafkaCluster:ConnectorKafkaCluster",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the connector (one of `\"NONE\"`, `\"PROVISIONING\"`, `\"RUNNING\"`, `\"DEGRADED\"`, `\"FAILED\"`, `\"PAUSED\"`, `\"DELETED\"`). Pausing (`\"RUNNING\" \u003e \"PAUSED\"`) and resuming (`\"PAUSED\" \u003e \"RUNNING\"`) a connector is supported via an update operation.\n"
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/environment:Environment": {
            "description": "\n\n\n## Import\n\nYou can import an Environment by using Environment ID, for example$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/environment:Environment my_env env-abc123\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "A human-readable name for the Environment. Start and end the name with alphanumeric characters, for example, \"Development\". The name can contain hyphens and underscores.\n"
                },
                "resourceName": {
                    "type": "string",
                    "description": "(Required String) The Confluent Resource Name of the Environment, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123`.\n"
                }
            },
            "required": [
                "displayName",
                "resourceName"
            ],
            "inputProperties": {
                "displayName": {
                    "type": "string",
                    "description": "A human-readable name for the Environment. Start and end the name with alphanumeric characters, for example, \"Development\". The name can contain hyphens and underscores.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Environment resources.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the Environment. Start and end the name with alphanumeric characters, for example, \"Development\". The name can contain hyphens and underscores.\n"
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "(Required String) The Confluent Resource Name of the Environment, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123`.\n"
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/kafkaAcl:KafkaAcl": {
            "description": "\n\n\n## Import\n\nYou can import Kafka ACLs by using the Kafka cluster ID and attributes of `confluent_kafka_acl` resource in the format `\u003cKafka cluster ID\u003e/\u003cKafka ACL resource type\u003e#\u003cKafka ACL resource name\u003e#\u003cKafka ACL pattern type\u003e#\u003cKafka ACL principal\u003e#\u003cKafka ACL host\u003e#\u003cKafka ACL operation\u003e#\u003cKafka ACL permission\u003e`, for example$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\" $ export IMPORT_KAFKA_API_KEY=\"\u003ckafka_api_key\u003e\" $ export IMPORT_KAFKA_API_SECRET=\"\u003ckafka_api_secret\u003e\" $ export IMPORT_KAFKA_REST_ENDPOINT=\"\u003ckafka_rest_endpoint\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/kafkaAcl:KafkaAcl describe-cluster \"lkc-12345/CLUSTER#kafka-cluster#LITERAL#User:sa-xyz123#*#DESCRIBE#ALLOW\"\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/KafkaAclCredentials:KafkaAclCredentials",
                    "description": "The Cluster API Credentials.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The host for the ACL. Should be set to `*` for Confluent Cloud.\n"
                },
                "kafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/KafkaAclKafkaCluster:KafkaAclKafkaCluster"
                },
                "operation": {
                    "type": "string",
                    "description": "The operation type for the ACL. Accepted values are: `UNKNOWN`, `ANY`, `ALL`, `READ`, `WRITE`, `CREATE`, `DELETE`, `ALTER`, `DESCRIBE`, `CLUSTER_ACTION`, `DESCRIBE_CONFIGS`, `ALTER_CONFIGS`, and `IDEMPOTENT_WRITE`.\n"
                },
                "patternType": {
                    "type": "string",
                    "description": "The pattern type for the ACL. Accepted values are: `UNKNOWN`,`ANY`,`MATCH`, `LITERAL`, and `PREFIXED`.\n"
                },
                "permission": {
                    "type": "string",
                    "description": "The permission for the ACL. Accepted values are: `UNKNOWN`, `ANY`, `DENY`, and `ALLOW`.\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The principal for the ACL.\n"
                },
                "resourceName": {
                    "type": "string",
                    "description": "The resource name for the ACL.\n"
                },
                "resourceType": {
                    "type": "string",
                    "description": "The type of the resource. Accepted values are: `UNKNOWN`, `ANY`, `TOPIC`, `GROUP`, `CLUSTER`, `TRANSACTIONAL_ID`, `DELEGATION_TOKEN`.\n"
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`.\n"
                }
            },
            "required": [
                "host",
                "kafkaCluster",
                "operation",
                "patternType",
                "permission",
                "principal",
                "resourceName",
                "resourceType"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/KafkaAclCredentials:KafkaAclCredentials",
                    "description": "The Cluster API Credentials.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The host for the ACL. Should be set to `*` for Confluent Cloud.\n",
                    "willReplaceOnChanges": true
                },
                "kafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/KafkaAclKafkaCluster:KafkaAclKafkaCluster",
                    "willReplaceOnChanges": true
                },
                "operation": {
                    "type": "string",
                    "description": "The operation type for the ACL. Accepted values are: `UNKNOWN`, `ANY`, `ALL`, `READ`, `WRITE`, `CREATE`, `DELETE`, `ALTER`, `DESCRIBE`, `CLUSTER_ACTION`, `DESCRIBE_CONFIGS`, `ALTER_CONFIGS`, and `IDEMPOTENT_WRITE`.\n",
                    "willReplaceOnChanges": true
                },
                "patternType": {
                    "type": "string",
                    "description": "The pattern type for the ACL. Accepted values are: `UNKNOWN`,`ANY`,`MATCH`, `LITERAL`, and `PREFIXED`.\n",
                    "willReplaceOnChanges": true
                },
                "permission": {
                    "type": "string",
                    "description": "The permission for the ACL. Accepted values are: `UNKNOWN`, `ANY`, `DENY`, and `ALLOW`.\n",
                    "willReplaceOnChanges": true
                },
                "principal": {
                    "type": "string",
                    "description": "The principal for the ACL.\n",
                    "willReplaceOnChanges": true
                },
                "resourceName": {
                    "type": "string",
                    "description": "The resource name for the ACL.\n",
                    "willReplaceOnChanges": true
                },
                "resourceType": {
                    "type": "string",
                    "description": "The type of the resource. Accepted values are: `UNKNOWN`, `ANY`, `TOPIC`, `GROUP`, `CLUSTER`, `TRANSACTIONAL_ID`, `DELEGATION_TOKEN`.\n",
                    "willReplaceOnChanges": true
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "host",
                "kafkaCluster",
                "operation",
                "patternType",
                "permission",
                "principal",
                "resourceName",
                "resourceType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KafkaAcl resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/KafkaAclCredentials:KafkaAclCredentials",
                        "description": "The Cluster API Credentials.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "The host for the ACL. Should be set to `*` for Confluent Cloud.\n",
                        "willReplaceOnChanges": true
                    },
                    "kafkaCluster": {
                        "$ref": "#/types/confluentcloud:index/KafkaAclKafkaCluster:KafkaAclKafkaCluster",
                        "willReplaceOnChanges": true
                    },
                    "operation": {
                        "type": "string",
                        "description": "The operation type for the ACL. Accepted values are: `UNKNOWN`, `ANY`, `ALL`, `READ`, `WRITE`, `CREATE`, `DELETE`, `ALTER`, `DESCRIBE`, `CLUSTER_ACTION`, `DESCRIBE_CONFIGS`, `ALTER_CONFIGS`, and `IDEMPOTENT_WRITE`.\n",
                        "willReplaceOnChanges": true
                    },
                    "patternType": {
                        "type": "string",
                        "description": "The pattern type for the ACL. Accepted values are: `UNKNOWN`,`ANY`,`MATCH`, `LITERAL`, and `PREFIXED`.\n",
                        "willReplaceOnChanges": true
                    },
                    "permission": {
                        "type": "string",
                        "description": "The permission for the ACL. Accepted values are: `UNKNOWN`, `ANY`, `DENY`, and `ALLOW`.\n",
                        "willReplaceOnChanges": true
                    },
                    "principal": {
                        "type": "string",
                        "description": "The principal for the ACL.\n",
                        "willReplaceOnChanges": true
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "The resource name for the ACL.\n",
                        "willReplaceOnChanges": true
                    },
                    "resourceType": {
                        "type": "string",
                        "description": "The type of the resource. Accepted values are: `UNKNOWN`, `ANY`, `TOPIC`, `GROUP`, `CLUSTER`, `TRANSACTIONAL_ID`, `DELEGATION_TOKEN`.\n",
                        "willReplaceOnChanges": true
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "The REST endpoint of the Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/kafkaCluster:KafkaCluster": {
            "description": "\n\n\n## Import\n\nYou can import a Kafka cluster by using Environment ID and Kafka cluster ID, in the format `\u003cEnvironment ID\u003e/\u003cKafka cluster ID\u003e`, e.g. $ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/kafkaCluster:KafkaCluster my_kafka env-abc123/lkc-abc123\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "(Required String) An API Version of the schema version of the Kafka cluster, for example, `cmk/v2`.\n"
                },
                "availability": {
                    "type": "string",
                    "description": "The availability zone configuration of the Kafka cluster. Accepted values are: `SINGLE_ZONE` and `MULTI_ZONE`.\n"
                },
                "basics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/confluentcloud:index/KafkaClusterBasic:KafkaClusterBasic"
                    },
                    "description": "The configuration of the Basic Kafka cluster.\n"
                },
                "bootstrapEndpoint": {
                    "type": "string",
                    "description": "(Required String) The bootstrap endpoint used by Kafka clients to connect to the Kafka cluster. (e.g., `pkc-00000.us-central1.gcp.confluent.cloud:9092`).\n"
                },
                "cloud": {
                    "type": "string",
                    "description": "The cloud service provider that runs the Kafka cluster. Accepted values are: `AWS`, `AZURE`, and `GCP`.\n"
                },
                "dedicated": {
                    "$ref": "#/types/confluentcloud:index/KafkaClusterDedicated:KafkaClusterDedicated"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the Kafka cluster.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/KafkaClusterEnvironment:KafkaClusterEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "(Required String) A kind of the Kafka cluster, for example, `Cluster`.\n"
                },
                "network": {
                    "$ref": "#/types/confluentcloud:index/KafkaClusterNetwork:KafkaClusterNetwork",
                    "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n"
                },
                "rbacCrn": {
                    "type": "string",
                    "description": "(Required String) The Confluent Resource Name of the Kafka cluster, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/cloud-cluster=lkc-abc123`.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The cloud service provider region where the Kafka cluster is running, for example, `us-west-2`. See [Cloud Providers and Regions](https://docs.confluent.io/cloud/current/clusters/regions.html#cloud-providers-and-regions) for a full list of options for AWS, Azure, and GCP.\n"
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "(Required String) The REST endpoint of the Kafka cluster (e.g., `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n"
                },
                "standards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/confluentcloud:index/KafkaClusterStandard:KafkaClusterStandard"
                    },
                    "description": "The configuration of the Standard Kafka cluster.\n"
                }
            },
            "required": [
                "apiVersion",
                "availability",
                "bootstrapEndpoint",
                "cloud",
                "displayName",
                "environment",
                "kind",
                "network",
                "rbacCrn",
                "region",
                "restEndpoint"
            ],
            "inputProperties": {
                "availability": {
                    "type": "string",
                    "description": "The availability zone configuration of the Kafka cluster. Accepted values are: `SINGLE_ZONE` and `MULTI_ZONE`.\n",
                    "willReplaceOnChanges": true
                },
                "basics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/confluentcloud:index/KafkaClusterBasic:KafkaClusterBasic"
                    },
                    "description": "The configuration of the Basic Kafka cluster.\n"
                },
                "cloud": {
                    "type": "string",
                    "description": "The cloud service provider that runs the Kafka cluster. Accepted values are: `AWS`, `AZURE`, and `GCP`.\n",
                    "willReplaceOnChanges": true
                },
                "dedicated": {
                    "$ref": "#/types/confluentcloud:index/KafkaClusterDedicated:KafkaClusterDedicated"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the Kafka cluster.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/KafkaClusterEnvironment:KafkaClusterEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                    "willReplaceOnChanges": true
                },
                "network": {
                    "$ref": "#/types/confluentcloud:index/KafkaClusterNetwork:KafkaClusterNetwork",
                    "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The cloud service provider region where the Kafka cluster is running, for example, `us-west-2`. See [Cloud Providers and Regions](https://docs.confluent.io/cloud/current/clusters/regions.html#cloud-providers-and-regions) for a full list of options for AWS, Azure, and GCP.\n",
                    "willReplaceOnChanges": true
                },
                "standards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/confluentcloud:index/KafkaClusterStandard:KafkaClusterStandard"
                    },
                    "description": "The configuration of the Standard Kafka cluster.\n"
                }
            },
            "requiredInputs": [
                "availability",
                "cloud",
                "displayName",
                "environment",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KafkaCluster resources.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "(Required String) An API Version of the schema version of the Kafka cluster, for example, `cmk/v2`.\n"
                    },
                    "availability": {
                        "type": "string",
                        "description": "The availability zone configuration of the Kafka cluster. Accepted values are: `SINGLE_ZONE` and `MULTI_ZONE`.\n",
                        "willReplaceOnChanges": true
                    },
                    "basics": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/KafkaClusterBasic:KafkaClusterBasic"
                        },
                        "description": "The configuration of the Basic Kafka cluster.\n"
                    },
                    "bootstrapEndpoint": {
                        "type": "string",
                        "description": "(Required String) The bootstrap endpoint used by Kafka clients to connect to the Kafka cluster. (e.g., `pkc-00000.us-central1.gcp.confluent.cloud:9092`).\n"
                    },
                    "cloud": {
                        "type": "string",
                        "description": "The cloud service provider that runs the Kafka cluster. Accepted values are: `AWS`, `AZURE`, and `GCP`.\n",
                        "willReplaceOnChanges": true
                    },
                    "dedicated": {
                        "$ref": "#/types/confluentcloud:index/KafkaClusterDedicated:KafkaClusterDedicated"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name of the Kafka cluster.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/KafkaClusterEnvironment:KafkaClusterEnvironment",
                        "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                        "willReplaceOnChanges": true
                    },
                    "kind": {
                        "type": "string",
                        "description": "(Required String) A kind of the Kafka cluster, for example, `Cluster`.\n"
                    },
                    "network": {
                        "$ref": "#/types/confluentcloud:index/KafkaClusterNetwork:KafkaClusterNetwork",
                        "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n"
                    },
                    "rbacCrn": {
                        "type": "string",
                        "description": "(Required String) The Confluent Resource Name of the Kafka cluster, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/cloud-cluster=lkc-abc123`.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The cloud service provider region where the Kafka cluster is running, for example, `us-west-2`. See [Cloud Providers and Regions](https://docs.confluent.io/cloud/current/clusters/regions.html#cloud-providers-and-regions) for a full list of options for AWS, Azure, and GCP.\n",
                        "willReplaceOnChanges": true
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "(Required String) The REST endpoint of the Kafka cluster (e.g., `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n"
                    },
                    "standards": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/KafkaClusterStandard:KafkaClusterStandard"
                        },
                        "description": "The configuration of the Standard Kafka cluster.\n"
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/kafkaTopic:KafkaTopic": {
            "description": "\n\n\n## Import\n\nYou can import a Kafka topic by using the Kafka cluster ID and Kafka topic name in the format `\u003cKafka cluster ID\u003e/\u003cKafka topic name\u003e`, for example$ export IMPORT_KAFKA_API_KEY=\"\u003ckafka_api_key\u003e\" $ export IMPORT_KAFKA_API_SECRET=\"\u003ckafka_api_secret\u003e\" $ export IMPORT_KAFKA_REST_ENDPOINT=\"\u003ckafka_rest_endpoint\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/kafkaTopic:KafkaTopic my_topic lkc-abc123/orders-123\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The custom topic settings to set:\n"
                },
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/KafkaTopicCredentials:KafkaTopicCredentials",
                    "description": "The Cluster API Credentials.\n"
                },
                "kafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/KafkaTopicKafkaCluster:KafkaTopicKafkaCluster"
                },
                "partitionsCount": {
                    "type": "integer",
                    "description": "The number of partitions to create in the topic. Defaults to `6`.\n"
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n"
                },
                "topicName": {
                    "type": "string",
                    "description": "The name of the topic, for example, `orders-1`. The topic name can be up to 249 characters in length, and can include the following characters: a-z, A-Z, 0-9, . (dot), _ (underscore), and - (dash). As a best practice, we recommend against using any personally identifiable information (PII) when naming your topic.\n"
                }
            },
            "required": [
                "config",
                "kafkaCluster",
                "topicName"
            ],
            "inputProperties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The custom topic settings to set:\n"
                },
                "credentials": {
                    "$ref": "#/types/confluentcloud:index/KafkaTopicCredentials:KafkaTopicCredentials",
                    "description": "The Cluster API Credentials.\n"
                },
                "kafkaCluster": {
                    "$ref": "#/types/confluentcloud:index/KafkaTopicKafkaCluster:KafkaTopicKafkaCluster",
                    "willReplaceOnChanges": true
                },
                "partitionsCount": {
                    "type": "integer",
                    "description": "The number of partitions to create in the topic. Defaults to `6`.\n",
                    "willReplaceOnChanges": true
                },
                "restEndpoint": {
                    "type": "string",
                    "description": "The REST endpoint of the Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                    "willReplaceOnChanges": true
                },
                "topicName": {
                    "type": "string",
                    "description": "The name of the topic, for example, `orders-1`. The topic name can be up to 249 characters in length, and can include the following characters: a-z, A-Z, 0-9, . (dot), _ (underscore), and - (dash). As a best practice, we recommend against using any personally identifiable information (PII) when naming your topic.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "kafkaCluster",
                "topicName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KafkaTopic resources.\n",
                "properties": {
                    "config": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The custom topic settings to set:\n"
                    },
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/KafkaTopicCredentials:KafkaTopicCredentials",
                        "description": "The Cluster API Credentials.\n"
                    },
                    "kafkaCluster": {
                        "$ref": "#/types/confluentcloud:index/KafkaTopicKafkaCluster:KafkaTopicKafkaCluster",
                        "willReplaceOnChanges": true
                    },
                    "partitionsCount": {
                        "type": "integer",
                        "description": "The number of partitions to create in the topic. Defaults to `6`.\n",
                        "willReplaceOnChanges": true
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "The REST endpoint of the Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n",
                        "willReplaceOnChanges": true
                    },
                    "topicName": {
                        "type": "string",
                        "description": "The name of the topic, for example, `orders-1`. The topic name can be up to 249 characters in length, and can include the following characters: a-z, A-Z, 0-9, . (dot), _ (underscore), and - (dash). As a best practice, we recommend against using any personally identifiable information (PII) when naming your topic.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/network:Network": {
            "description": "\n\n\n## Import\n\nYou can import a Network by using Environment ID and Network ID, in the format `\u003cEnvironment ID\u003e/\u003cNetwork ID\u003e`. The following example shows how to import a Network$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/network:Network my_network env-abc123/n-abc123\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "aws": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/confluentcloud:index/NetworkAw:NetworkAw"
                    },
                    "description": "(Optional Configuration Block) The AWS-specific network details if available. It supports the following:\n"
                },
                "azures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/confluentcloud:index/NetworkAzure:NetworkAzure"
                    },
                    "description": "(Optional Configuration Block) The Azure-specific network details if available. It supports the following:\n"
                },
                "cidr": {
                    "type": "string",
                    "description": "The IPv4 CIDR block to used for the network. Must be `/16`. Required for VPC peering and AWS TransitGateway.\n"
                },
                "cloud": {
                    "type": "string",
                    "description": "The cloud service provider in which the network exists. Accepted values are: `AWS`, `AZURE`, and `GCP`.\n"
                },
                "connectionTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of connection types that may be used with the network. Accepted connection types are: `PEERING`, `TRANSITGATEWAY`, and `PRIVATELINK`.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the Network.\n"
                },
                "dnsDomain": {
                    "type": "string",
                    "description": "(Optional String) The root DNS domain for the network, for example, `pr123a.us-east-2.aws.confluent.cloud` if applicable. Present on Networks that support Private Link.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/NetworkEnvironment:NetworkEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n"
                },
                "gcps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/confluentcloud:index/NetworkGcp:NetworkGcp"
                    },
                    "description": "(Optional Configuration Block) The GCP-specific network details if available. It supports the following:\n"
                },
                "region": {
                    "type": "string",
                    "description": "The cloud provider region where the network exists.\n"
                },
                "resourceName": {
                    "type": "string",
                    "description": "(Required String) The Confluent Resource Name of the Network.\n"
                },
                "zonalSubdomains": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Optional Map) The DNS subdomain for each zone. Present on networks that support Private Link. Keys are zone names, for example, `use2-az1` and values are DNS domains, for example, `use2-az1.pr123a.us-east-2.aws.confluent.cloud`.\n"
                },
                "zones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The 3 availability zones for this network. They can optionally be specified for AWS networks\nused with Private Link. Otherwise, they are automatically chosen by Confluent Cloud.\nOn AWS, zones are AWS [AZ IDs](https://docs.aws.amazon.com/ram/latest/userguide/working-with-az-ids.html), for example, `use1-az3`.\nOn GCP, zones are GCP [zones](https://cloud.google.com/compute/docs/regions-zones), for example, `us-central1-c`.\nOn Azure, zones are Confluent-chosen names (for example, `1`, `2`, `3`) since Azure does not have universal zone identifiers.\n"
                }
            },
            "required": [
                "aws",
                "azures",
                "cidr",
                "cloud",
                "connectionTypes",
                "displayName",
                "dnsDomain",
                "environment",
                "gcps",
                "region",
                "resourceName",
                "zonalSubdomains",
                "zones"
            ],
            "inputProperties": {
                "aws": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/confluentcloud:index/NetworkAw:NetworkAw"
                    },
                    "description": "(Optional Configuration Block) The AWS-specific network details if available. It supports the following:\n"
                },
                "azures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/confluentcloud:index/NetworkAzure:NetworkAzure"
                    },
                    "description": "(Optional Configuration Block) The Azure-specific network details if available. It supports the following:\n"
                },
                "cidr": {
                    "type": "string",
                    "description": "The IPv4 CIDR block to used for the network. Must be `/16`. Required for VPC peering and AWS TransitGateway.\n",
                    "willReplaceOnChanges": true
                },
                "cloud": {
                    "type": "string",
                    "description": "The cloud service provider in which the network exists. Accepted values are: `AWS`, `AZURE`, and `GCP`.\n",
                    "willReplaceOnChanges": true
                },
                "connectionTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of connection types that may be used with the network. Accepted connection types are: `PEERING`, `TRANSITGATEWAY`, and `PRIVATELINK`.\n",
                    "willReplaceOnChanges": true
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the Network.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/NetworkEnvironment:NetworkEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                    "willReplaceOnChanges": true
                },
                "gcps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/confluentcloud:index/NetworkGcp:NetworkGcp"
                    },
                    "description": "(Optional Configuration Block) The GCP-specific network details if available. It supports the following:\n"
                },
                "region": {
                    "type": "string",
                    "description": "The cloud provider region where the network exists.\n",
                    "willReplaceOnChanges": true
                },
                "zones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The 3 availability zones for this network. They can optionally be specified for AWS networks\nused with Private Link. Otherwise, they are automatically chosen by Confluent Cloud.\nOn AWS, zones are AWS [AZ IDs](https://docs.aws.amazon.com/ram/latest/userguide/working-with-az-ids.html), for example, `use1-az3`.\nOn GCP, zones are GCP [zones](https://cloud.google.com/compute/docs/regions-zones), for example, `us-central1-c`.\nOn Azure, zones are Confluent-chosen names (for example, `1`, `2`, `3`) since Azure does not have universal zone identifiers.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "cloud",
                "connectionTypes",
                "environment",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Network resources.\n",
                "properties": {
                    "aws": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/NetworkAw:NetworkAw"
                        },
                        "description": "(Optional Configuration Block) The AWS-specific network details if available. It supports the following:\n"
                    },
                    "azures": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/NetworkAzure:NetworkAzure"
                        },
                        "description": "(Optional Configuration Block) The Azure-specific network details if available. It supports the following:\n"
                    },
                    "cidr": {
                        "type": "string",
                        "description": "The IPv4 CIDR block to used for the network. Must be `/16`. Required for VPC peering and AWS TransitGateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "cloud": {
                        "type": "string",
                        "description": "The cloud service provider in which the network exists. Accepted values are: `AWS`, `AZURE`, and `GCP`.\n",
                        "willReplaceOnChanges": true
                    },
                    "connectionTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of connection types that may be used with the network. Accepted connection types are: `PEERING`, `TRANSITGATEWAY`, and `PRIVATELINK`.\n",
                        "willReplaceOnChanges": true
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name of the Network.\n"
                    },
                    "dnsDomain": {
                        "type": "string",
                        "description": "(Optional String) The root DNS domain for the network, for example, `pr123a.us-east-2.aws.confluent.cloud` if applicable. Present on Networks that support Private Link.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/NetworkEnvironment:NetworkEnvironment",
                        "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                        "willReplaceOnChanges": true
                    },
                    "gcps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/NetworkGcp:NetworkGcp"
                        },
                        "description": "(Optional Configuration Block) The GCP-specific network details if available. It supports the following:\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The cloud provider region where the network exists.\n",
                        "willReplaceOnChanges": true
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "(Required String) The Confluent Resource Name of the Network.\n"
                    },
                    "zonalSubdomains": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Optional Map) The DNS subdomain for each zone. Present on networks that support Private Link. Keys are zone names, for example, `use2-az1` and values are DNS domains, for example, `use2-az1.pr123a.us-east-2.aws.confluent.cloud`.\n"
                    },
                    "zones": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The 3 availability zones for this network. They can optionally be specified for AWS networks\nused with Private Link. Otherwise, they are automatically chosen by Confluent Cloud.\nOn AWS, zones are AWS [AZ IDs](https://docs.aws.amazon.com/ram/latest/userguide/working-with-az-ids.html), for example, `use1-az3`.\nOn GCP, zones are GCP [zones](https://cloud.google.com/compute/docs/regions-zones), for example, `us-central1-c`.\nOn Azure, zones are Confluent-chosen names (for example, `1`, `2`, `3`) since Azure does not have universal zone identifiers.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/peering:Peering": {
            "description": "\n\n\n## Import\n\nYou can import a Peering by using Environment ID and Peering ID, in the format `\u003cEnvironment ID\u003e/\u003cPeering ID\u003e`. The following example shows how to import a Peering$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/peering:Peering my_peer env-abc123/peer-abc123\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "aws": {
                    "$ref": "#/types/confluentcloud:index/PeeringAws:PeeringAws"
                },
                "azure": {
                    "$ref": "#/types/confluentcloud:index/PeeringAzure:PeeringAzure"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the Peering.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/PeeringEnvironment:PeeringEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n"
                },
                "gcp": {
                    "$ref": "#/types/confluentcloud:index/PeeringGcp:PeeringGcp"
                },
                "network": {
                    "$ref": "#/types/confluentcloud:index/PeeringNetwork:PeeringNetwork",
                    "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n"
                }
            },
            "required": [
                "displayName",
                "environment",
                "network"
            ],
            "inputProperties": {
                "aws": {
                    "$ref": "#/types/confluentcloud:index/PeeringAws:PeeringAws",
                    "willReplaceOnChanges": true
                },
                "azure": {
                    "$ref": "#/types/confluentcloud:index/PeeringAzure:PeeringAzure",
                    "willReplaceOnChanges": true
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the Peering.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/PeeringEnvironment:PeeringEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                    "willReplaceOnChanges": true
                },
                "gcp": {
                    "$ref": "#/types/confluentcloud:index/PeeringGcp:PeeringGcp",
                    "willReplaceOnChanges": true
                },
                "network": {
                    "$ref": "#/types/confluentcloud:index/PeeringNetwork:PeeringNetwork",
                    "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "environment",
                "network"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Peering resources.\n",
                "properties": {
                    "aws": {
                        "$ref": "#/types/confluentcloud:index/PeeringAws:PeeringAws",
                        "willReplaceOnChanges": true
                    },
                    "azure": {
                        "$ref": "#/types/confluentcloud:index/PeeringAzure:PeeringAzure",
                        "willReplaceOnChanges": true
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name of the Peering.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/PeeringEnvironment:PeeringEnvironment",
                        "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                        "willReplaceOnChanges": true
                    },
                    "gcp": {
                        "$ref": "#/types/confluentcloud:index/PeeringGcp:PeeringGcp",
                        "willReplaceOnChanges": true
                    },
                    "network": {
                        "$ref": "#/types/confluentcloud:index/PeeringNetwork:PeeringNetwork",
                        "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/privateLinkAccess:PrivateLinkAccess": {
            "description": "\n\n\n## Import\n\nYou can import a Private Link Access by using Environment ID and Private Link Access ID, in the format `\u003cEnvironment ID\u003e/\u003cPrivate Link Access ID\u003e`. The following example shows how to import a Private Link Access$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/privateLinkAccess:PrivateLinkAccess my_pla env-abc123/pla-abc123\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "aws": {
                    "$ref": "#/types/confluentcloud:index/PrivateLinkAccessAws:PrivateLinkAccessAws"
                },
                "azure": {
                    "$ref": "#/types/confluentcloud:index/PrivateLinkAccessAzure:PrivateLinkAccessAzure"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the Private Link Access.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/PrivateLinkAccessEnvironment:PrivateLinkAccessEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n"
                },
                "network": {
                    "$ref": "#/types/confluentcloud:index/PrivateLinkAccessNetwork:PrivateLinkAccessNetwork",
                    "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n"
                }
            },
            "required": [
                "displayName",
                "environment",
                "network"
            ],
            "inputProperties": {
                "aws": {
                    "$ref": "#/types/confluentcloud:index/PrivateLinkAccessAws:PrivateLinkAccessAws",
                    "willReplaceOnChanges": true
                },
                "azure": {
                    "$ref": "#/types/confluentcloud:index/PrivateLinkAccessAzure:PrivateLinkAccessAzure",
                    "willReplaceOnChanges": true
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the Private Link Access.\n"
                },
                "environment": {
                    "$ref": "#/types/confluentcloud:index/PrivateLinkAccessEnvironment:PrivateLinkAccessEnvironment",
                    "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                    "willReplaceOnChanges": true
                },
                "network": {
                    "$ref": "#/types/confluentcloud:index/PrivateLinkAccessNetwork:PrivateLinkAccessNetwork",
                    "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "environment",
                "network"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PrivateLinkAccess resources.\n",
                "properties": {
                    "aws": {
                        "$ref": "#/types/confluentcloud:index/PrivateLinkAccessAws:PrivateLinkAccessAws",
                        "willReplaceOnChanges": true
                    },
                    "azure": {
                        "$ref": "#/types/confluentcloud:index/PrivateLinkAccessAzure:PrivateLinkAccessAzure",
                        "willReplaceOnChanges": true
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name of the Private Link Access.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/PrivateLinkAccessEnvironment:PrivateLinkAccessEnvironment",
                        "description": "Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.\n",
                        "willReplaceOnChanges": true
                    },
                    "network": {
                        "$ref": "#/types/confluentcloud:index/PrivateLinkAccessNetwork:PrivateLinkAccessNetwork",
                        "description": "Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider\naccounts.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/roleBinding:RoleBinding": {
            "description": "\n\n\n## Import\n\nYou can import a Role Binding by using Role Binding ID, for example$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/roleBinding:RoleBinding my_rb rb-f3a90de\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "crnPattern": {
                    "type": "string",
                    "description": "A [Confluent Resource Name(CRN)](https://docs.confluent.io/cloud/current/api.html#section/Identifiers-and-URLs/Confluent-Resource-Names-(CRNs)) that specifies the scope and resource patterns necessary for the role to bind.\n"
                },
                "principal": {
                    "type": "string",
                    "description": "A principal User to bind the role to, for example, \"User:u-111aaa\" for binding to a user \"u-111aaa\", or \"User:sa-111aaa\" for binding to a service account \"sa-111aaa\".\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "A name of the role to bind to the principal. See [Confluent Cloud RBAC Roles](https://docs.confluent.io/cloud/current/access-management/access-control/cloud-rbac.html#ccloud-rbac-roles) for a full list of supported role names.\n"
                }
            },
            "required": [
                "crnPattern",
                "principal",
                "roleName"
            ],
            "inputProperties": {
                "crnPattern": {
                    "type": "string",
                    "description": "A [Confluent Resource Name(CRN)](https://docs.confluent.io/cloud/current/api.html#section/Identifiers-and-URLs/Confluent-Resource-Names-(CRNs)) that specifies the scope and resource patterns necessary for the role to bind.\n",
                    "willReplaceOnChanges": true
                },
                "principal": {
                    "type": "string",
                    "description": "A principal User to bind the role to, for example, \"User:u-111aaa\" for binding to a user \"u-111aaa\", or \"User:sa-111aaa\" for binding to a service account \"sa-111aaa\".\n",
                    "willReplaceOnChanges": true
                },
                "roleName": {
                    "type": "string",
                    "description": "A name of the role to bind to the principal. See [Confluent Cloud RBAC Roles](https://docs.confluent.io/cloud/current/access-management/access-control/cloud-rbac.html#ccloud-rbac-roles) for a full list of supported role names.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "crnPattern",
                "principal",
                "roleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RoleBinding resources.\n",
                "properties": {
                    "crnPattern": {
                        "type": "string",
                        "description": "A [Confluent Resource Name(CRN)](https://docs.confluent.io/cloud/current/api.html#section/Identifiers-and-URLs/Confluent-Resource-Names-(CRNs)) that specifies the scope and resource patterns necessary for the role to bind.\n",
                        "willReplaceOnChanges": true
                    },
                    "principal": {
                        "type": "string",
                        "description": "A principal User to bind the role to, for example, \"User:u-111aaa\" for binding to a user \"u-111aaa\", or \"User:sa-111aaa\" for binding to a service account \"sa-111aaa\".\n",
                        "willReplaceOnChanges": true
                    },
                    "roleName": {
                        "type": "string",
                        "description": "A name of the role to bind to the principal. See [Confluent Cloud RBAC Roles](https://docs.confluent.io/cloud/current/access-management/access-control/cloud-rbac.html#ccloud-rbac-roles) for a full list of supported role names.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "confluentcloud:index/serviceAccount:ServiceAccount": {
            "description": "\n\n\n## Import\n\nYou can import a Service Account by using Service Account ID, for example$ export CONFLUENT_CLOUD_API_KEY=\"\u003ccloud_api_key\u003e\" $ export CONFLUENT_CLOUD_API_SECRET=\"\u003ccloud_api_secret\u003e\"\n\n```sh\n $ pulumi import confluentcloud:index/serviceAccount:ServiceAccount my_sa sa-abc123\n```\n\n !\u003e **Warning:** Do not forget to delete terminal command history afterwards for security purposes. ",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "(Required String) An API Version of the schema version of the Service Account, for example, `iam/v2`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A free-form description of the Service Account.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "A human-readable name for the Service Account.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "(Required String) A kind of the Service Account, for example, `ServiceAccount`.\n"
                }
            },
            "required": [
                "apiVersion",
                "displayName",
                "kind"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A free-form description of the Service Account.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "A human-readable name for the Service Account.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceAccount resources.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "(Required String) An API Version of the schema version of the Service Account, for example, `iam/v2`.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A free-form description of the Service Account.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the Service Account.\n",
                        "willReplaceOnChanges": true
                    },
                    "kind": {
                        "type": "string",
                        "description": "(Required String) A kind of the Service Account, for example, `ServiceAccount`.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "confluentcloud:index/getEnvironment:getEnvironment": {
            "description": "\u003cimg src=\"https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8\" alt=\"\"\u003e\n\n`confluentcloud.Environment` describes an Environment data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleUsingIdEnvironment = confluentcloud.getEnvironment({\n    id: \"env-abc123\",\n});\nexport const exampleUsingId = exampleUsingIdEnvironment;\nconst exampleUsingNameEnvironment = confluentcloud.getEnvironment({\n    displayName: \"stag\",\n});\nconst exampleUsingNameServiceAccount = confluentcloud.getServiceAccount({\n    displayName: \"test_sa\",\n});\nconst test_role_binding = new confluentcloud.RoleBinding(\"test-role-binding\", {\n    principal: exampleUsingNameServiceAccount.then(exampleUsingNameServiceAccount =\u003e `User:${exampleUsingNameServiceAccount.id}`),\n    roleName: \"EnvironmentAdmin\",\n    crnPattern: exampleUsingNameEnvironment.then(exampleUsingNameEnvironment =\u003e exampleUsingNameEnvironment.resourceName),\n});\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_using_id_environment = confluentcloud.get_environment(id=\"env-abc123\")\npulumi.export(\"exampleUsingId\", example_using_id_environment)\nexample_using_name_environment = confluentcloud.get_environment(display_name=\"stag\")\nexample_using_name_service_account = confluentcloud.get_service_account(display_name=\"test_sa\")\ntest_role_binding = confluentcloud.RoleBinding(\"test-role-binding\",\n    principal=f\"User:{example_using_name_service_account.id}\",\n    role_name=\"EnvironmentAdmin\",\n    crn_pattern=example_using_name_environment.resource_name)\n```\n```csharp\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleUsingIdEnvironment = Output.Create(ConfluentCloud.GetEnvironment.InvokeAsync(new ConfluentCloud.GetEnvironmentArgs\n        {\n            Id = \"env-abc123\",\n        }));\n        this.ExampleUsingId = exampleUsingIdEnvironment;\n        var exampleUsingNameEnvironment = Output.Create(ConfluentCloud.GetEnvironment.InvokeAsync(new ConfluentCloud.GetEnvironmentArgs\n        {\n            DisplayName = \"stag\",\n        }));\n        var exampleUsingNameServiceAccount = Output.Create(ConfluentCloud.GetServiceAccount.InvokeAsync(new ConfluentCloud.GetServiceAccountArgs\n        {\n            DisplayName = \"test_sa\",\n        }));\n        var test_role_binding = new ConfluentCloud.RoleBinding(\"test-role-binding\", new ConfluentCloud.RoleBindingArgs\n        {\n            Principal = exampleUsingNameServiceAccount.Apply(exampleUsingNameServiceAccount =\u003e $\"User:{exampleUsingNameServiceAccount.Id}\"),\n            RoleName = \"EnvironmentAdmin\",\n            CrnPattern = exampleUsingNameEnvironment.Apply(exampleUsingNameEnvironment =\u003e exampleUsingNameEnvironment.ResourceName),\n        });\n    }\n\n    [Output(\"exampleUsingId\")]\n    public Output\u003cstring\u003e ExampleUsingId { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUsingIdEnvironment, err := confluentcloud.LookupEnvironment(ctx, \u0026GetEnvironmentArgs{\n\t\t\tId: pulumi.StringRef(\"env-abc123\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingId\", exampleUsingIdEnvironment)\n\t\texampleUsingNameEnvironment, err := confluentcloud.LookupEnvironment(ctx, \u0026GetEnvironmentArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"stag\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUsingNameServiceAccount, err := confluentcloud.LookupServiceAccount(ctx, \u0026GetServiceAccountArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"test_sa\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = confluentcloud.NewRoleBinding(ctx, \"test-role-binding\", \u0026confluentcloud.RoleBindingArgs{\n\t\t\tPrincipal:  pulumi.String(fmt.Sprintf(\"User:%v\", exampleUsingNameServiceAccount.Id)),\n\t\t\tRoleName:   pulumi.String(\"EnvironmentAdmin\"),\n\t\t\tCrnPattern: pulumi.String(exampleUsingNameEnvironment.ResourceName),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetEnvironmentArgs;\nimport com.pulumi.confluentcloud.inputs.GetServiceAccountArgs;\nimport com.pulumi.confluentcloud.RoleBinding;\nimport com.pulumi.confluentcloud.RoleBindingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUsingIdEnvironment = ConfluentcloudFunctions.getEnvironment(GetEnvironmentArgs.builder()\n            .id(\"env-abc123\")\n            .build());\n\n        ctx.export(\"exampleUsingId\", exampleUsingIdEnvironment.applyValue(getEnvironmentResult -\u003e getEnvironmentResult));\n        final var exampleUsingNameEnvironment = ConfluentcloudFunctions.getEnvironment(GetEnvironmentArgs.builder()\n            .displayName(\"stag\")\n            .build());\n\n        final var exampleUsingNameServiceAccount = ConfluentcloudFunctions.getServiceAccount(GetServiceAccountArgs.builder()\n            .displayName(\"test_sa\")\n            .build());\n\n        var test_role_binding = new RoleBinding(\"test-role-binding\", RoleBindingArgs.builder()        \n            .principal(String.format(\"User:%s\", exampleUsingNameServiceAccount.applyValue(getServiceAccountResult -\u003e getServiceAccountResult.id())))\n            .roleName(\"EnvironmentAdmin\")\n            .crnPattern(exampleUsingNameEnvironment.applyValue(getEnvironmentResult -\u003e getEnvironmentResult.resourceName()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test-role-binding:\n    type: confluentcloud:RoleBinding\n    properties:\n      principal: User:${exampleUsingNameServiceAccount.id}\n      roleName: EnvironmentAdmin\n      crnPattern: ${exampleUsingNameEnvironment.resourceName}\nvariables:\n  exampleUsingIdEnvironment:\n    Fn::Invoke:\n      Function: confluentcloud:getEnvironment\n      Arguments:\n        id: env-abc123\n  exampleUsingNameEnvironment:\n    Fn::Invoke:\n      Function: confluentcloud:getEnvironment\n      Arguments:\n        displayName: stag\n  exampleUsingNameServiceAccount:\n    Fn::Invoke:\n      Function: confluentcloud:getServiceAccount\n      Arguments:\n        displayName: test_sa\noutputs:\n  exampleUsingId: ${exampleUsingIdEnvironment}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getEnvironment.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the Environment.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Environment, for example, `env-abc123`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getEnvironment.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "(Required String) A human-readable name for the Environment.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the Environment, for example, `env-abc123`.\n"
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "(Required String) The Confluent Resource Name of the Environment, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "displayName",
                    "id",
                    "resourceName"
                ]
            }
        },
        "confluentcloud:index/getKafkaCluster:getKafkaCluster": {
            "description": "\u003cimg src=\"https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8\" alt=\"\"\u003e\n\n`confluentcloud.KafkaCluster` describes a Kafka cluster data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleUsingId = confluentcloud.getKafkaCluster({\n    id: \"lkc-abc123\",\n    environment: {\n        id: \"env-xyz456\",\n    },\n});\nconst test_sa = new confluentcloud.ServiceAccount(\"test-sa\", {\n    displayName: \"app_mgr\",\n    description: exampleUsingId.then(exampleUsingId =\u003e `app_mgr for ${exampleUsingId.displayName}`),\n});\nconst exampleUsingNameKafkaCluster = confluentcloud.getKafkaCluster({\n    displayName: \"basic_kafka_cluster\",\n    environment: {\n        id: \"env-xyz456\",\n    },\n});\nexport const exampleUsingName = exampleUsingNameKafkaCluster;\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_using_id = confluentcloud.get_kafka_cluster(id=\"lkc-abc123\",\n    environment=confluentcloud.GetKafkaClusterEnvironmentArgs(\n        id=\"env-xyz456\",\n    ))\ntest_sa = confluentcloud.ServiceAccount(\"test-sa\",\n    display_name=\"app_mgr\",\n    description=f\"app_mgr for {example_using_id.display_name}\")\nexample_using_name_kafka_cluster = confluentcloud.get_kafka_cluster(display_name=\"basic_kafka_cluster\",\n    environment=confluentcloud.GetKafkaClusterEnvironmentArgs(\n        id=\"env-xyz456\",\n    ))\npulumi.export(\"exampleUsingName\", example_using_name_kafka_cluster)\n```\n```csharp\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleUsingId = Output.Create(ConfluentCloud.GetKafkaCluster.InvokeAsync(new ConfluentCloud.GetKafkaClusterArgs\n        {\n            Id = \"lkc-abc123\",\n            Environment = new ConfluentCloud.Inputs.GetKafkaClusterEnvironmentArgs\n            {\n                Id = \"env-xyz456\",\n            },\n        }));\n        var test_sa = new ConfluentCloud.ServiceAccount(\"test-sa\", new ConfluentCloud.ServiceAccountArgs\n        {\n            DisplayName = \"app_mgr\",\n            Description = exampleUsingId.Apply(exampleUsingId =\u003e $\"app_mgr for {exampleUsingId.DisplayName}\"),\n        });\n        var exampleUsingNameKafkaCluster = Output.Create(ConfluentCloud.GetKafkaCluster.InvokeAsync(new ConfluentCloud.GetKafkaClusterArgs\n        {\n            DisplayName = \"basic_kafka_cluster\",\n            Environment = new ConfluentCloud.Inputs.GetKafkaClusterEnvironmentArgs\n            {\n                Id = \"env-xyz456\",\n            },\n        }));\n        this.ExampleUsingName = exampleUsingNameKafkaCluster;\n    }\n\n    [Output(\"exampleUsingName\")]\n    public Output\u003cstring\u003e ExampleUsingName { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUsingId, err := confluentcloud.LookupKafkaCluster(ctx, \u0026GetKafkaClusterArgs{\n\t\t\tId: pulumi.StringRef(\"lkc-abc123\"),\n\t\t\tEnvironment: GetKafkaClusterEnvironment{\n\t\t\t\tId: \"env-xyz456\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = confluentcloud.NewServiceAccount(ctx, \"test-sa\", \u0026confluentcloud.ServiceAccountArgs{\n\t\t\tDisplayName: pulumi.String(\"app_mgr\"),\n\t\t\tDescription: pulumi.String(fmt.Sprintf(\"app_mgr for %v\", exampleUsingId.DisplayName)),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUsingNameKafkaCluster, err := confluentcloud.LookupKafkaCluster(ctx, \u0026GetKafkaClusterArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"basic_kafka_cluster\"),\n\t\t\tEnvironment: GetKafkaClusterEnvironment{\n\t\t\t\tId: \"env-xyz456\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingName\", exampleUsingNameKafkaCluster)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetKafkaClusterArgs;\nimport com.pulumi.confluentcloud.inputs.GetKafkaClusterEnvironmentArgs;\nimport com.pulumi.confluentcloud.ServiceAccount;\nimport com.pulumi.confluentcloud.ServiceAccountArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUsingId = ConfluentcloudFunctions.getKafkaCluster(GetKafkaClusterArgs.builder()\n            .id(\"lkc-abc123\")\n            .environment(GetKafkaClusterEnvironmentArgs.builder()\n                .id(\"env-xyz456\")\n                .build())\n            .build());\n\n        var test_sa = new ServiceAccount(\"test-sa\", ServiceAccountArgs.builder()        \n            .displayName(\"app_mgr\")\n            .description(String.format(\"app_mgr for %s\", exampleUsingId.applyValue(getKafkaClusterResult -\u003e getKafkaClusterResult.displayName())))\n            .build());\n\n        final var exampleUsingNameKafkaCluster = ConfluentcloudFunctions.getKafkaCluster(GetKafkaClusterArgs.builder()\n            .displayName(\"basic_kafka_cluster\")\n            .environment(GetKafkaClusterEnvironmentArgs.builder()\n                .id(\"env-xyz456\")\n                .build())\n            .build());\n\n        ctx.export(\"exampleUsingName\", exampleUsingNameKafkaCluster.applyValue(getKafkaClusterResult -\u003e getKafkaClusterResult));\n    }\n}\n```\n```yaml\nresources:\n  test-sa:\n    type: confluentcloud:ServiceAccount\n    properties:\n      displayName: app_mgr\n      description: app_mgr for ${exampleUsingId.displayName}\nvariables:\n  exampleUsingId:\n    Fn::Invoke:\n      Function: confluentcloud:getKafkaCluster\n      Arguments:\n        id: lkc-abc123\n        environment:\n          id: env-xyz456\n  exampleUsingNameKafkaCluster:\n    Fn::Invoke:\n      Function: confluentcloud:getKafkaCluster\n      Arguments:\n        displayName: basic_kafka_cluster\n        environment:\n          id: env-xyz456\noutputs:\n  exampleUsingName: ${exampleUsingNameKafkaCluster}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getKafkaCluster.\n",
                "properties": {
                    "basics": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getKafkaClusterBasic:getKafkaClusterBasic"
                        },
                        "description": "(Optional Configuration Block) The configuration of the Basic Kafka cluster.\n"
                    },
                    "dedicated": {
                        "$ref": "#/types/confluentcloud:index/getKafkaClusterDedicated:getKafkaClusterDedicated",
                        "description": "(Optional Configuration Block) The configuration of the Dedicated Kafka cluster. It supports the following:\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the Kafka cluster.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getKafkaClusterEnvironment:getKafkaClusterEnvironment"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Environment that the Kafka cluster belongs to, for example, `env-xyz456`.\n"
                    },
                    "standards": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getKafkaClusterStandard:getKafkaClusterStandard"
                        },
                        "description": "(Optional Configuration Block) The configuration of the Standard Kafka cluster.\n"
                    }
                },
                "type": "object",
                "required": [
                    "environment"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getKafkaCluster.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "(Required String) An API Version of the schema version of the Kafka cluster, for example, `cmk/v2`.\n"
                    },
                    "availability": {
                        "type": "string",
                        "description": "(Required String) The availability zone configuration of the Kafka cluster. Accepted values are: `SINGLE_ZONE` and `MULTI_ZONE`.\n"
                    },
                    "basics": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getKafkaClusterBasic:getKafkaClusterBasic"
                        },
                        "description": "(Optional Configuration Block) The configuration of the Basic Kafka cluster.\n"
                    },
                    "bootstrapEndpoint": {
                        "type": "string",
                        "description": "(Required String) The bootstrap endpoint used by Kafka clients to connect to the Kafka cluster. (e.g., `pkc-00000.us-central1.gcp.confluent.cloud:9092`).\n"
                    },
                    "cloud": {
                        "type": "string",
                        "description": "(Required String) The cloud service provider that runs the Kafka cluster. Accepted values are: `AWS`, `AZURE`, and `GCP`.\n"
                    },
                    "dedicated": {
                        "$ref": "#/types/confluentcloud:index/getKafkaClusterDedicated:getKafkaClusterDedicated",
                        "description": "(Optional Configuration Block) The configuration of the Dedicated Kafka cluster. It supports the following:\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "(Required String) The name of the Kafka cluster.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getKafkaClusterEnvironment:getKafkaClusterEnvironment"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the Network that the Kafka cluster belongs to, for example, `n-abc123`.\n"
                    },
                    "kind": {
                        "type": "string",
                        "description": "(Required String) A kind of the Kafka cluster, for example, `Cluster`.\n"
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getKafkaClusterNetwork:getKafkaClusterNetwork"
                        }
                    },
                    "rbacCrn": {
                        "type": "string",
                        "description": "(Required String) The Confluent Resource Name of the Kafka cluster, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/cloud-cluster=lkc-abc123`.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "(Required String) The cloud service provider region where the Kafka cluster is running, for example, `us-west-2`. See [Cloud Providers and Regions](https://docs.confluent.io/cloud/current/clusters/regions.html#cloud-providers-and-regions) for a full list of options for AWS, Azure, and GCP.\n"
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "(Required String) The REST endpoint of the Kafka cluster (e.g., `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n"
                    },
                    "standards": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getKafkaClusterStandard:getKafkaClusterStandard"
                        },
                        "description": "(Optional Configuration Block) The configuration of the Standard Kafka cluster.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "availability",
                    "bootstrapEndpoint",
                    "cloud",
                    "displayName",
                    "environment",
                    "id",
                    "kind",
                    "networks",
                    "rbacCrn",
                    "region",
                    "restEndpoint"
                ]
            }
        },
        "confluentcloud:index/getKafkaTopic:getKafkaTopic": {
            "description": "\u003cimg src=\"https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8\" alt=\"\"\u003e\n\n`confluentcloud.KafkaTopic` describes a Kafka Topic data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst orders = confluentcloud.getKafkaTopic({\n    kafkaCluster: {\n        id: confluent_kafka_cluster[\"basic-cluster\"].id,\n    },\n    topicName: \"orders\",\n    restEndpoint: confluent_kafka_cluster[\"basic-cluster\"].rest_endpoint,\n    credentials: {\n        key: \"\u003cKafka API Key for confluent_kafka_cluster.basic-cluster\u003e\",\n        secret: \"\u003cKafka API Secret for confluent_kafka_cluster.basic-cluster\u003e\",\n    },\n});\nexport const config = orders.then(orders =\u003e orders.config);\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\norders = confluentcloud.get_kafka_topic(kafka_cluster=confluentcloud.GetKafkaTopicKafkaClusterArgs(\n        id=confluent_kafka_cluster[\"basic-cluster\"][\"id\"],\n    ),\n    topic_name=\"orders\",\n    rest_endpoint=confluent_kafka_cluster[\"basic-cluster\"][\"rest_endpoint\"],\n    credentials=confluentcloud.GetKafkaTopicCredentialsArgs(\n        key=\"\u003cKafka API Key for confluent_kafka_cluster.basic-cluster\u003e\",\n        secret=\"\u003cKafka API Secret for confluent_kafka_cluster.basic-cluster\u003e\",\n    ))\npulumi.export(\"config\", orders.config)\n```\n```csharp\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var orders = Output.Create(ConfluentCloud.GetKafkaTopic.InvokeAsync(new ConfluentCloud.GetKafkaTopicArgs\n        {\n            KafkaCluster = new ConfluentCloud.Inputs.GetKafkaTopicKafkaClusterArgs\n            {\n                Id = confluent_kafka_cluster.Basic_cluster.Id,\n            },\n            TopicName = \"orders\",\n            RestEndpoint = confluent_kafka_cluster.Basic_cluster.Rest_endpoint,\n            Credentials = new ConfluentCloud.Inputs.GetKafkaTopicCredentialsArgs\n            {\n                Key = \"\u003cKafka API Key for confluent_kafka_cluster.basic-cluster\u003e\",\n                Secret = \"\u003cKafka API Secret for confluent_kafka_cluster.basic-cluster\u003e\",\n            },\n        }));\n        this.Config = orders.Apply(orders =\u003e orders.Config);\n    }\n\n    [Output(\"config\")]\n    public Output\u003cstring\u003e Config { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\torders, err := confluentcloud.LookupKafkaTopic(ctx, \u0026GetKafkaTopicArgs{\n\t\t\tKafkaCluster: GetKafkaTopicKafkaCluster{\n\t\t\t\tId: confluent_kafka_cluster.Basic - cluster.Id,\n\t\t\t},\n\t\t\tTopicName:    \"orders\",\n\t\t\tRestEndpoint: confluent_kafka_cluster.Basic - cluster.Rest_endpoint,\n\t\t\tCredentials: GetKafkaTopicCredentials{\n\t\t\t\tKey:    \"\u003cKafka API Key for confluent_kafka_cluster.basic-cluster\u003e\",\n\t\t\t\tSecret: \"\u003cKafka API Secret for confluent_kafka_cluster.basic-cluster\u003e\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"config\", orders.Config)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetKafkaTopicArgs;\nimport com.pulumi.confluentcloud.inputs.GetKafkaTopicKafkaClusterArgs;\nimport com.pulumi.confluentcloud.inputs.GetKafkaTopicCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var orders = ConfluentcloudFunctions.getKafkaTopic(GetKafkaTopicArgs.builder()\n            .kafkaCluster(GetKafkaTopicKafkaClusterArgs.builder()\n                .id(confluent_kafka_cluster.basic-cluster().id())\n                .build())\n            .topicName(\"orders\")\n            .restEndpoint(confluent_kafka_cluster.basic-cluster().rest_endpoint())\n            .credentials(GetKafkaTopicCredentialsArgs.builder()\n                .key(\"\u003cKafka API Key for confluent_kafka_cluster.basic-cluster\u003e\")\n                .secret(\"\u003cKafka API Secret for confluent_kafka_cluster.basic-cluster\u003e\")\n                .build())\n            .build());\n\n        ctx.export(\"config\", orders.applyValue(getKafkaTopicResult -\u003e getKafkaTopicResult.config()));\n    }\n}\n```\n```yaml\nvariables:\n  orders:\n    Fn::Invoke:\n      Function: confluentcloud:getKafkaTopic\n      Arguments:\n        kafkaCluster:\n          id: ${confluent_kafka_cluster\"basic-cluster\"[%!s(MISSING)].id}\n        topicName: orders\n        restEndpoint: ${confluent_kafka_cluster\"basic-cluster\"[%!s(MISSING)].rest_endpoint}\n        credentials:\n          key: \u003cKafka API Key for confluent_kafka_cluster.basic-cluster\u003e\n          secret: \u003cKafka API Secret for confluent_kafka_cluster.basic-cluster\u003e\noutputs:\n  config: ${orders.config}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getKafkaTopic.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/getKafkaTopicCredentials:getKafkaTopicCredentials"
                    },
                    "kafkaCluster": {
                        "$ref": "#/types/confluentcloud:index/getKafkaTopicKafkaCluster:getKafkaTopicKafkaCluster"
                    },
                    "restEndpoint": {
                        "type": "string",
                        "description": "The REST endpoint of the Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).\n"
                    },
                    "topicName": {
                        "type": "string",
                        "description": "The name of the topic, for example, `orders-1`. The topic name can be up to 255 characters in length and can contain only alphanumeric characters, hyphens, and underscores.\n"
                    }
                },
                "type": "object",
                "required": [
                    "kafkaCluster",
                    "restEndpoint",
                    "topicName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getKafkaTopic.\n",
                "properties": {
                    "config": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Optional Map) The custom topic settings:\n"
                    },
                    "credentials": {
                        "$ref": "#/types/confluentcloud:index/getKafkaTopicCredentials:getKafkaTopicCredentials"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "kafkaCluster": {
                        "$ref": "#/types/confluentcloud:index/getKafkaTopicKafkaCluster:getKafkaTopicKafkaCluster"
                    },
                    "partitionsCount": {
                        "type": "integer",
                        "description": "(Required Number) The number of partitions to create in the topic. Defaults to `6`.\n"
                    },
                    "restEndpoint": {
                        "type": "string"
                    },
                    "topicName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "kafkaCluster",
                    "partitionsCount",
                    "restEndpoint",
                    "topicName",
                    "id"
                ]
            }
        },
        "confluentcloud:index/getNetwork:getNetwork": {
            "description": "\u003cimg src=\"https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8\" alt=\"\"\u003e\n\n`confluentcloud.Network` describes a Network data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleUsingId = confluentcloud.getNetwork({\n    id: \"n-abc123\",\n    environment: {\n        id: \"env-xyz456\",\n    },\n});\nconst test_sa = new confluentcloud.ServiceAccount(\"test-sa\", {\n    displayName: \"test_sa\",\n    description: exampleUsingId.then(exampleUsingId =\u003e `test_sa for ${exampleUsingId.displayName}`),\n});\nconst exampleUsingNameNetwork = confluentcloud.getNetwork({\n    displayName: \"my_network\",\n    environment: {\n        id: \"env-xyz456\",\n    },\n});\nexport const exampleUsingName = exampleUsingNameNetwork;\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_using_id = confluentcloud.get_network(id=\"n-abc123\",\n    environment=confluentcloud.GetNetworkEnvironmentArgs(\n        id=\"env-xyz456\",\n    ))\ntest_sa = confluentcloud.ServiceAccount(\"test-sa\",\n    display_name=\"test_sa\",\n    description=f\"test_sa for {example_using_id.display_name}\")\nexample_using_name_network = confluentcloud.get_network(display_name=\"my_network\",\n    environment=confluentcloud.GetNetworkEnvironmentArgs(\n        id=\"env-xyz456\",\n    ))\npulumi.export(\"exampleUsingName\", example_using_name_network)\n```\n```csharp\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleUsingId = Output.Create(ConfluentCloud.GetNetwork.InvokeAsync(new ConfluentCloud.GetNetworkArgs\n        {\n            Id = \"n-abc123\",\n            Environment = new ConfluentCloud.Inputs.GetNetworkEnvironmentArgs\n            {\n                Id = \"env-xyz456\",\n            },\n        }));\n        var test_sa = new ConfluentCloud.ServiceAccount(\"test-sa\", new ConfluentCloud.ServiceAccountArgs\n        {\n            DisplayName = \"test_sa\",\n            Description = exampleUsingId.Apply(exampleUsingId =\u003e $\"test_sa for {exampleUsingId.DisplayName}\"),\n        });\n        var exampleUsingNameNetwork = Output.Create(ConfluentCloud.GetNetwork.InvokeAsync(new ConfluentCloud.GetNetworkArgs\n        {\n            DisplayName = \"my_network\",\n            Environment = new ConfluentCloud.Inputs.GetNetworkEnvironmentArgs\n            {\n                Id = \"env-xyz456\",\n            },\n        }));\n        this.ExampleUsingName = exampleUsingNameNetwork;\n    }\n\n    [Output(\"exampleUsingName\")]\n    public Output\u003cstring\u003e ExampleUsingName { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUsingId, err := confluentcloud.LookupNetwork(ctx, \u0026GetNetworkArgs{\n\t\t\tId: pulumi.StringRef(\"n-abc123\"),\n\t\t\tEnvironment: GetNetworkEnvironment{\n\t\t\t\tId: \"env-xyz456\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = confluentcloud.NewServiceAccount(ctx, \"test-sa\", \u0026confluentcloud.ServiceAccountArgs{\n\t\t\tDisplayName: pulumi.String(\"test_sa\"),\n\t\t\tDescription: pulumi.String(fmt.Sprintf(\"test_sa for %v\", exampleUsingId.DisplayName)),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUsingNameNetwork, err := confluentcloud.LookupNetwork(ctx, \u0026GetNetworkArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"my_network\"),\n\t\t\tEnvironment: GetNetworkEnvironment{\n\t\t\t\tId: \"env-xyz456\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingName\", exampleUsingNameNetwork)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetNetworkArgs;\nimport com.pulumi.confluentcloud.inputs.GetNetworkEnvironmentArgs;\nimport com.pulumi.confluentcloud.ServiceAccount;\nimport com.pulumi.confluentcloud.ServiceAccountArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUsingId = ConfluentcloudFunctions.getNetwork(GetNetworkArgs.builder()\n            .id(\"n-abc123\")\n            .environment(GetNetworkEnvironmentArgs.builder()\n                .id(\"env-xyz456\")\n                .build())\n            .build());\n\n        var test_sa = new ServiceAccount(\"test-sa\", ServiceAccountArgs.builder()        \n            .displayName(\"test_sa\")\n            .description(String.format(\"test_sa for %s\", exampleUsingId.applyValue(getNetworkResult -\u003e getNetworkResult.displayName())))\n            .build());\n\n        final var exampleUsingNameNetwork = ConfluentcloudFunctions.getNetwork(GetNetworkArgs.builder()\n            .displayName(\"my_network\")\n            .environment(GetNetworkEnvironmentArgs.builder()\n                .id(\"env-xyz456\")\n                .build())\n            .build());\n\n        ctx.export(\"exampleUsingName\", exampleUsingNameNetwork.applyValue(getNetworkResult -\u003e getNetworkResult));\n    }\n}\n```\n```yaml\nresources:\n  test-sa:\n    type: confluentcloud:ServiceAccount\n    properties:\n      displayName: test_sa\n      description: test_sa for ${exampleUsingId.displayName}\nvariables:\n  exampleUsingId:\n    Fn::Invoke:\n      Function: confluentcloud:getNetwork\n      Arguments:\n        id: n-abc123\n        environment:\n          id: env-xyz456\n  exampleUsingNameNetwork:\n    Fn::Invoke:\n      Function: confluentcloud:getNetwork\n      Arguments:\n        displayName: my_network\n        environment:\n          id: env-xyz456\noutputs:\n  exampleUsingName: ${exampleUsingNameNetwork}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNetwork.\n",
                "properties": {
                    "aws": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getNetworkAw:getNetworkAw"
                        },
                        "description": "(Optional Configuration Block) The AWS-specific network details if available. It supports the following:\n"
                    },
                    "azures": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getNetworkAzure:getNetworkAzure"
                        },
                        "description": "(Optional Configuration Block) The Azure-specific network details if available. It supports the following:\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the Network.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getNetworkEnvironment:getNetworkEnvironment"
                    },
                    "gcps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getNetworkGcp:getNetworkGcp"
                        },
                        "description": "(Optional Configuration Block) The GCP-specific network details if available. It supports the following:\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Environment that the Network belongs to, for example, `env-xyz456`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "environment"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNetwork.\n",
                "properties": {
                    "aws": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getNetworkAw:getNetworkAw"
                        },
                        "description": "(Optional Configuration Block) The AWS-specific network details if available. It supports the following:\n"
                    },
                    "azures": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getNetworkAzure:getNetworkAzure"
                        },
                        "description": "(Optional Configuration Block) The Azure-specific network details if available. It supports the following:\n"
                    },
                    "cidr": {
                        "type": "string",
                        "description": "(Required String) The IPv4 CIDR block to used for the network. Must be `/16`. Required for VPC peering and AWS TransitGateway.\n"
                    },
                    "cloud": {
                        "type": "string",
                        "description": "(Required String) The cloud service provider in which the network exists. Accepted values are: `AWS`, `AZURE`, and `GCP`.\n"
                    },
                    "connectionTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Required List of String) The list of connection types that may be used with the network. Accepted connection types are: `PEERING`, `TRANSITGATEWAY`, and `PRIVATELINK`.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "(Required String) The name of the Network.\n"
                    },
                    "dnsDomain": {
                        "type": "string"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getNetworkEnvironment:getNetworkEnvironment"
                    },
                    "gcps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getNetworkGcp:getNetworkGcp"
                        },
                        "description": "(Optional Configuration Block) The GCP-specific network details if available. It supports the following:\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the Network, for example, `n-abc123`.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "(Required String) The cloud provider region where the network exists.\n"
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "(Required String) The Confluent Resource Name of the Network.\n"
                    },
                    "zonalSubdomains": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "zones": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Optional List of String) The 3 availability zones for this network. They can optionally be specified for AWS networks\nused with Private Link. Otherwise, they are automatically chosen by Confluent Cloud.\nOn AWS, zones are AWS [AZ IDs](https://docs.aws.amazon.com/ram/latest/userguide/working-with-az-ids.html), for example, `use1-az3`.\nOn GCP, zones are GCP [zones](https://cloud.google.com/compute/docs/regions-zones), for example, `us-central1-c`.\nOn Azure, zones are Confluent-chosen names (for example, `1`, `2`, `3`) since Azure does not have universal zone identifiers.\n"
                    }
                },
                "type": "object",
                "required": [
                    "aws",
                    "azures",
                    "cidr",
                    "cloud",
                    "connectionTypes",
                    "displayName",
                    "dnsDomain",
                    "environment",
                    "gcps",
                    "id",
                    "region",
                    "resourceName",
                    "zonalSubdomains",
                    "zones"
                ]
            }
        },
        "confluentcloud:index/getOrganization:getOrganization": {
            "description": "\u003cimg src=\"https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8\" alt=\"\"\u003e\n\n`confluentcloud.getOrganization` describes an Organization data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleOrganization = confluentcloud.getOrganization({});\nexport const example = exampleOrganization;\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_organization = confluentcloud.get_organization()\npulumi.export(\"example\", example_organization)\n```\n```csharp\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleOrganization = Output.Create(ConfluentCloud.GetOrganization.InvokeAsync());\n        this.Example = exampleOrganization;\n    }\n\n    [Output(\"example\")]\n    public Output\u003cstring\u003e Example { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleOrganization, err := confluentcloud.GetOrganization(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"example\", exampleOrganization)\n\t\treturn nil\n\t})\n}\n```\n```yaml\nvariables:\n  exampleOrganization:\n    Fn::Invoke:\n      Function: confluentcloud:getOrganization\n      Arguments: {}\noutputs:\n  example: ${exampleOrganization}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getOrganization.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the Organization, for example, `1111aaaa-11aa-11aa-11aa-111111aaaaaa`.\n"
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "(Required String) The Confluent Resource Name of the Organization, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "resourceName"
                ]
            }
        },
        "confluentcloud:index/getPeering:getPeering": {
            "description": "\u003cimg src=\"https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8\" alt=\"\"\u003e\n\n`confluentcloud.Peering` describes a Peering data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleUsingIdPeering = confluentcloud.getPeering({\n    id: \"peer-abc123\",\n    environment: {\n        id: \"env-xyz456\",\n    },\n});\nexport const exampleUsingId = exampleUsingIdPeering;\nconst exampleUsingNamePeering = confluentcloud.getPeering({\n    displayName: \"my_peering\",\n    environment: {\n        id: \"env-xyz456\",\n    },\n});\nexport const exampleUsingName = exampleUsingNamePeering;\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_using_id_peering = confluentcloud.get_peering(id=\"peer-abc123\",\n    environment=confluentcloud.GetPeeringEnvironmentArgs(\n        id=\"env-xyz456\",\n    ))\npulumi.export(\"exampleUsingId\", example_using_id_peering)\nexample_using_name_peering = confluentcloud.get_peering(display_name=\"my_peering\",\n    environment=confluentcloud.GetPeeringEnvironmentArgs(\n        id=\"env-xyz456\",\n    ))\npulumi.export(\"exampleUsingName\", example_using_name_peering)\n```\n```csharp\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleUsingIdPeering = Output.Create(ConfluentCloud.GetPeering.InvokeAsync(new ConfluentCloud.GetPeeringArgs\n        {\n            Id = \"peer-abc123\",\n            Environment = new ConfluentCloud.Inputs.GetPeeringEnvironmentArgs\n            {\n                Id = \"env-xyz456\",\n            },\n        }));\n        this.ExampleUsingId = exampleUsingIdPeering;\n        var exampleUsingNamePeering = Output.Create(ConfluentCloud.GetPeering.InvokeAsync(new ConfluentCloud.GetPeeringArgs\n        {\n            DisplayName = \"my_peering\",\n            Environment = new ConfluentCloud.Inputs.GetPeeringEnvironmentArgs\n            {\n                Id = \"env-xyz456\",\n            },\n        }));\n        this.ExampleUsingName = exampleUsingNamePeering;\n    }\n\n    [Output(\"exampleUsingId\")]\n    public Output\u003cstring\u003e ExampleUsingId { get; set; }\n    [Output(\"exampleUsingName\")]\n    public Output\u003cstring\u003e ExampleUsingName { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUsingIdPeering, err := confluentcloud.LookupPeering(ctx, \u0026GetPeeringArgs{\n\t\t\tId: pulumi.StringRef(\"peer-abc123\"),\n\t\t\tEnvironment: GetPeeringEnvironment{\n\t\t\t\tId: \"env-xyz456\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingId\", exampleUsingIdPeering)\n\t\texampleUsingNamePeering, err := confluentcloud.LookupPeering(ctx, \u0026GetPeeringArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"my_peering\"),\n\t\t\tEnvironment: GetPeeringEnvironment{\n\t\t\t\tId: \"env-xyz456\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingName\", exampleUsingNamePeering)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetPeeringArgs;\nimport com.pulumi.confluentcloud.inputs.GetPeeringEnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUsingIdPeering = ConfluentcloudFunctions.getPeering(GetPeeringArgs.builder()\n            .id(\"peer-abc123\")\n            .environment(GetPeeringEnvironmentArgs.builder()\n                .id(\"env-xyz456\")\n                .build())\n            .build());\n\n        ctx.export(\"exampleUsingId\", exampleUsingIdPeering.applyValue(getPeeringResult -\u003e getPeeringResult));\n        final var exampleUsingNamePeering = ConfluentcloudFunctions.getPeering(GetPeeringArgs.builder()\n            .displayName(\"my_peering\")\n            .environment(GetPeeringEnvironmentArgs.builder()\n                .id(\"env-xyz456\")\n                .build())\n            .build());\n\n        ctx.export(\"exampleUsingName\", exampleUsingNamePeering.applyValue(getPeeringResult -\u003e getPeeringResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleUsingIdPeering:\n    Fn::Invoke:\n      Function: confluentcloud:getPeering\n      Arguments:\n        id: peer-abc123\n        environment:\n          id: env-xyz456\n  exampleUsingNamePeering:\n    Fn::Invoke:\n      Function: confluentcloud:getPeering\n      Arguments:\n        displayName: my_peering\n        environment:\n          id: env-xyz456\noutputs:\n  exampleUsingId: ${exampleUsingIdPeering}\n  exampleUsingName: ${exampleUsingNamePeering}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPeering.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the Peering.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getPeeringEnvironment:getPeeringEnvironment"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Environment that the Peering belongs to, for example, `env-xyz456`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "environment"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPeering.\n",
                "properties": {
                    "aws": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getPeeringAw:getPeeringAw"
                        },
                        "description": "(Optional Configuration Block) The AWS-specific Peering details if available. It supports the following:\n"
                    },
                    "azures": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getPeeringAzure:getPeeringAzure"
                        },
                        "description": "(Optional Configuration Block) The Azure-specific Peering details if available. It supports the following:\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "(Optional String) The name of the Peering.\n- `environment` (Required Configuration Block) supports the following:\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getPeeringEnvironment:getPeeringEnvironment"
                    },
                    "gcps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getPeeringGcp:getPeeringGcp"
                        },
                        "description": "(Optional Configuration Block) The Azure-specific Peering details if available. It supports the following:\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the Network that the Peering belongs to, for example, `n-abc123`.\n"
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getPeeringNetwork:getPeeringNetwork"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "aws",
                    "azures",
                    "displayName",
                    "environment",
                    "gcps",
                    "id",
                    "networks"
                ]
            }
        },
        "confluentcloud:index/getPrivateLinkAccess:getPrivateLinkAccess": {
            "description": "\u003cimg src=\"https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8\" alt=\"\"\u003e\n\n`confluentcloud.PrivateLinkAccess` describes a Network data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleUsingIdPrivateLinkAccess = confluentcloud.getPrivateLinkAccess({\n    id: \"pla-abc123\",\n    environment: {\n        id: \"env-xyz456\",\n    },\n});\nexport const exampleUsingId = exampleUsingIdPrivateLinkAccess;\nconst exampleUsingNamePrivateLinkAccess = confluentcloud.getPrivateLinkAccess({\n    displayName: \"my_pla\",\n    environment: {\n        id: \"env-xyz456\",\n    },\n});\nexport const exampleUsingName = exampleUsingNamePrivateLinkAccess;\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_using_id_private_link_access = confluentcloud.get_private_link_access(id=\"pla-abc123\",\n    environment=confluentcloud.GetPrivateLinkAccessEnvironmentArgs(\n        id=\"env-xyz456\",\n    ))\npulumi.export(\"exampleUsingId\", example_using_id_private_link_access)\nexample_using_name_private_link_access = confluentcloud.get_private_link_access(display_name=\"my_pla\",\n    environment=confluentcloud.GetPrivateLinkAccessEnvironmentArgs(\n        id=\"env-xyz456\",\n    ))\npulumi.export(\"exampleUsingName\", example_using_name_private_link_access)\n```\n```csharp\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleUsingIdPrivateLinkAccess = Output.Create(ConfluentCloud.GetPrivateLinkAccess.InvokeAsync(new ConfluentCloud.GetPrivateLinkAccessArgs\n        {\n            Id = \"pla-abc123\",\n            Environment = new ConfluentCloud.Inputs.GetPrivateLinkAccessEnvironmentArgs\n            {\n                Id = \"env-xyz456\",\n            },\n        }));\n        this.ExampleUsingId = exampleUsingIdPrivateLinkAccess;\n        var exampleUsingNamePrivateLinkAccess = Output.Create(ConfluentCloud.GetPrivateLinkAccess.InvokeAsync(new ConfluentCloud.GetPrivateLinkAccessArgs\n        {\n            DisplayName = \"my_pla\",\n            Environment = new ConfluentCloud.Inputs.GetPrivateLinkAccessEnvironmentArgs\n            {\n                Id = \"env-xyz456\",\n            },\n        }));\n        this.ExampleUsingName = exampleUsingNamePrivateLinkAccess;\n    }\n\n    [Output(\"exampleUsingId\")]\n    public Output\u003cstring\u003e ExampleUsingId { get; set; }\n    [Output(\"exampleUsingName\")]\n    public Output\u003cstring\u003e ExampleUsingName { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUsingIdPrivateLinkAccess, err := confluentcloud.LookupPrivateLinkAccess(ctx, \u0026GetPrivateLinkAccessArgs{\n\t\t\tId: pulumi.StringRef(\"pla-abc123\"),\n\t\t\tEnvironment: GetPrivateLinkAccessEnvironment{\n\t\t\t\tId: \"env-xyz456\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingId\", exampleUsingIdPrivateLinkAccess)\n\t\texampleUsingNamePrivateLinkAccess, err := confluentcloud.LookupPrivateLinkAccess(ctx, \u0026GetPrivateLinkAccessArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"my_pla\"),\n\t\t\tEnvironment: GetPrivateLinkAccessEnvironment{\n\t\t\t\tId: \"env-xyz456\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingName\", exampleUsingNamePrivateLinkAccess)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetPrivateLinkAccessArgs;\nimport com.pulumi.confluentcloud.inputs.GetPrivateLinkAccessEnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUsingIdPrivateLinkAccess = ConfluentcloudFunctions.getPrivateLinkAccess(GetPrivateLinkAccessArgs.builder()\n            .id(\"pla-abc123\")\n            .environment(GetPrivateLinkAccessEnvironmentArgs.builder()\n                .id(\"env-xyz456\")\n                .build())\n            .build());\n\n        ctx.export(\"exampleUsingId\", exampleUsingIdPrivateLinkAccess.applyValue(getPrivateLinkAccessResult -\u003e getPrivateLinkAccessResult));\n        final var exampleUsingNamePrivateLinkAccess = ConfluentcloudFunctions.getPrivateLinkAccess(GetPrivateLinkAccessArgs.builder()\n            .displayName(\"my_pla\")\n            .environment(GetPrivateLinkAccessEnvironmentArgs.builder()\n                .id(\"env-xyz456\")\n                .build())\n            .build());\n\n        ctx.export(\"exampleUsingName\", exampleUsingNamePrivateLinkAccess.applyValue(getPrivateLinkAccessResult -\u003e getPrivateLinkAccessResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleUsingIdPrivateLinkAccess:\n    Fn::Invoke:\n      Function: confluentcloud:getPrivateLinkAccess\n      Arguments:\n        id: pla-abc123\n        environment:\n          id: env-xyz456\n  exampleUsingNamePrivateLinkAccess:\n    Fn::Invoke:\n      Function: confluentcloud:getPrivateLinkAccess\n      Arguments:\n        displayName: my_pla\n        environment:\n          id: env-xyz456\noutputs:\n  exampleUsingId: ${exampleUsingIdPrivateLinkAccess}\n  exampleUsingName: ${exampleUsingNamePrivateLinkAccess}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPrivateLinkAccess.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the Private Link Access.\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getPrivateLinkAccessEnvironment:getPrivateLinkAccessEnvironment"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Environment that the Private Link Access belongs to, for example, `env-xyz456`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "environment"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPrivateLinkAccess.\n",
                "properties": {
                    "aws": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getPrivateLinkAccessAw:getPrivateLinkAccessAw"
                        },
                        "description": "(Optional Configuration Block) The AWS-specific Private Link Access details if available. It supports the following:\n"
                    },
                    "azures": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getPrivateLinkAccessAzure:getPrivateLinkAccessAzure"
                        },
                        "description": "(Optional Configuration Block) The Azure-specific Private Link Access details if available. It supports the following:\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "(Optional String) The name of the Private Link Access.\n- `environment` (Required Configuration Block) supports the following:\n"
                    },
                    "environment": {
                        "$ref": "#/types/confluentcloud:index/getPrivateLinkAccessEnvironment:getPrivateLinkAccessEnvironment"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the Network that the Private Link Access belongs to, for example, `n-abc123`.\n"
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/confluentcloud:index/getPrivateLinkAccessNetwork:getPrivateLinkAccessNetwork"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "aws",
                    "azures",
                    "displayName",
                    "environment",
                    "id",
                    "networks"
                ]
            }
        },
        "confluentcloud:index/getRoleBinding:getRoleBinding": {
            "description": "\u003cimg src=\"https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8\" alt=\"\"\u003e\n\n`confluentcloud.RoleBinding` describes a Role Binding.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleRoleBinding = confluentcloud.getRoleBinding({\n    id: \"rb-abc123\",\n});\nexport const example = exampleRoleBinding;\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_role_binding = confluentcloud.get_role_binding(id=\"rb-abc123\")\npulumi.export(\"example\", example_role_binding)\n```\n```csharp\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleRoleBinding = Output.Create(ConfluentCloud.GetRoleBinding.InvokeAsync(new ConfluentCloud.GetRoleBindingArgs\n        {\n            Id = \"rb-abc123\",\n        }));\n        this.Example = exampleRoleBinding;\n    }\n\n    [Output(\"example\")]\n    public Output\u003cstring\u003e Example { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleRoleBinding, err := confluentcloud.LookupRoleBinding(ctx, \u0026GetRoleBindingArgs{\n\t\t\tId: \"rb-abc123\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"example\", exampleRoleBinding)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetRoleBindingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleRoleBinding = ConfluentcloudFunctions.getRoleBinding(GetRoleBindingArgs.builder()\n            .id(\"rb-abc123\")\n            .build());\n\n        ctx.export(\"example\", exampleRoleBinding.applyValue(getRoleBindingResult -\u003e getRoleBindingResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleRoleBinding:\n    Fn::Invoke:\n      Function: confluentcloud:getRoleBinding\n      Arguments:\n        id: rb-abc123\noutputs:\n  example: ${exampleRoleBinding}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRoleBinding.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the Role Binding (for example, `rb-abc123`).\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRoleBinding.\n",
                "properties": {
                    "crnPattern": {
                        "type": "string",
                        "description": "(Required String) A [Confluent Resource Name(CRN)](https://docs.confluent.io/cloud/current/api.html#section/Identifiers-and-URLs/Confluent-Resource-Names-(CRNs)) that specifies the scope and resource patterns necessary for the role to bind.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "principal": {
                        "type": "string",
                        "description": "(Required String) A principal User to bind the role to, for example, \"User:u-111aaa\" for binding to a user \"u-111aaa\", or \"User:sa-111aaa\" for binding to a service account \"sa-111aaa\".\n"
                    },
                    "roleName": {
                        "type": "string",
                        "description": "(Required String) A name of the role to bind to the principal. See [Confluent Cloud RBAC Roles](https://docs.confluent.io/cloud/current/access-management/access-control/cloud-rbac.html#ccloud-rbac-roles) for a full list of supported role names.\n"
                    }
                },
                "type": "object",
                "required": [
                    "crnPattern",
                    "id",
                    "principal",
                    "roleName"
                ]
            }
        },
        "confluentcloud:index/getServiceAccount:getServiceAccount": {
            "description": "\u003cimg src=\"https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8\" alt=\"\"\u003e\n\n`confluentcloud.ServiceAccount` describes a Service Account data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleUsingIdServiceAccount = confluentcloud.getServiceAccount({\n    id: \"sa-abc123\",\n});\nexport const exampleUsingId = exampleUsingIdServiceAccount;\nconst exampleUsingName = confluentcloud.getServiceAccount({\n    displayName: \"test_sa\",\n});\nconst test_env = new confluentcloud.Environment(\"test-env\", {});\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_using_id_service_account = confluentcloud.get_service_account(id=\"sa-abc123\")\npulumi.export(\"exampleUsingId\", example_using_id_service_account)\nexample_using_name = confluentcloud.get_service_account(display_name=\"test_sa\")\ntest_env = confluentcloud.Environment(\"test-env\")\n```\n```csharp\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleUsingIdServiceAccount = Output.Create(ConfluentCloud.GetServiceAccount.InvokeAsync(new ConfluentCloud.GetServiceAccountArgs\n        {\n            Id = \"sa-abc123\",\n        }));\n        this.ExampleUsingId = exampleUsingIdServiceAccount;\n        var exampleUsingName = Output.Create(ConfluentCloud.GetServiceAccount.InvokeAsync(new ConfluentCloud.GetServiceAccountArgs\n        {\n            DisplayName = \"test_sa\",\n        }));\n        var test_env = new ConfluentCloud.Environment(\"test-env\", new ConfluentCloud.EnvironmentArgs\n        {\n        });\n    }\n\n    [Output(\"exampleUsingId\")]\n    public Output\u003cstring\u003e ExampleUsingId { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUsingIdServiceAccount, err := confluentcloud.LookupServiceAccount(ctx, \u0026GetServiceAccountArgs{\n\t\t\tId: pulumi.StringRef(\"sa-abc123\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingId\", exampleUsingIdServiceAccount)\n\t\t_, err = confluentcloud.LookupServiceAccount(ctx, \u0026GetServiceAccountArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"test_sa\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = confluentcloud.NewEnvironment(ctx, \"test-env\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetServiceAccountArgs;\nimport com.pulumi.confluentcloud.Environment;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUsingIdServiceAccount = ConfluentcloudFunctions.getServiceAccount(GetServiceAccountArgs.builder()\n            .id(\"sa-abc123\")\n            .build());\n\n        ctx.export(\"exampleUsingId\", exampleUsingIdServiceAccount.applyValue(getServiceAccountResult -\u003e getServiceAccountResult));\n        final var exampleUsingName = ConfluentcloudFunctions.getServiceAccount(GetServiceAccountArgs.builder()\n            .displayName(\"test_sa\")\n            .build());\n\n        var test_env = new Environment(\"test-env\");\n\n    }\n}\n```\n```yaml\nresources:\n  test-env:\n    type: confluentcloud:Environment\nvariables:\n  exampleUsingIdServiceAccount:\n    Fn::Invoke:\n      Function: confluentcloud:getServiceAccount\n      Arguments:\n        id: sa-abc123\n  exampleUsingName:\n    Fn::Invoke:\n      Function: confluentcloud:getServiceAccount\n      Arguments:\n        displayName: test_sa\noutputs:\n  exampleUsingId: ${exampleUsingIdServiceAccount}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getServiceAccount.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the Service Account.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Service Account (e.g., `sa-abc123`).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getServiceAccount.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "(Required String) An API Version of the schema version of the Service Account.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Required String) A free-form description of the Service Account.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "(Required String) A human-readable name for the Service Account.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the Service Account (e.g., `sa-abc123`).\n"
                    },
                    "kind": {
                        "type": "string",
                        "description": "(Required String) A kind of the Service Account.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "description",
                    "displayName",
                    "id",
                    "kind"
                ]
            }
        },
        "confluentcloud:index/getUser:getUser": {
            "description": "\u003cimg src=\"https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8\" alt=\"\"\u003e\n\n`confluentcloud.getUser` describes a User data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as confluentcloud from \"@pulumi/confluentcloud\";\n\nconst exampleUsingIdUser = confluentcloud.getUser({\n    id: \"u-abc123\",\n});\nexport const exampleUsingId = exampleUsingIdUser;\nconst exampleUsingEmail = confluentcloud.getUser({\n    email: \"test123@gmail.com\",\n});\nconst test_env = new confluentcloud.Environment(\"test-env\", {});\nconst standard_cluster_on_aws = new confluentcloud.KafkaCluster(\"standard-cluster-on-aws\", {\n    displayName: \"standard_kafka_cluster_on_aws\",\n    availability: \"SINGLE_ZONE\",\n    cloud: \"AWS\",\n    region: \"us-west-2\",\n    standards: [{}],\n    environment: {\n        id: test_env.id,\n    },\n});\nconst test_role_binding = new confluentcloud.RoleBinding(\"test-role-binding\", {\n    principal: exampleUsingEmail.then(exampleUsingEmail =\u003e `User:${exampleUsingEmail.id}`),\n    roleName: \"CloudClusterAdmin\",\n    crnPattern: standard_cluster_on_aws.rbacCrn,\n});\nconst exampleUsingFullName = confluentcloud.getUser({\n    fullName: \"John Doe\",\n});\n```\n```python\nimport pulumi\nimport pulumi_confluentcloud as confluentcloud\n\nexample_using_id_user = confluentcloud.get_user(id=\"u-abc123\")\npulumi.export(\"exampleUsingId\", example_using_id_user)\nexample_using_email = confluentcloud.get_user(email=\"test123@gmail.com\")\ntest_env = confluentcloud.Environment(\"test-env\")\nstandard_cluster_on_aws = confluentcloud.KafkaCluster(\"standard-cluster-on-aws\",\n    display_name=\"standard_kafka_cluster_on_aws\",\n    availability=\"SINGLE_ZONE\",\n    cloud=\"AWS\",\n    region=\"us-west-2\",\n    standards=[confluentcloud.KafkaClusterStandardArgs()],\n    environment=confluentcloud.KafkaClusterEnvironmentArgs(\n        id=test_env.id,\n    ))\ntest_role_binding = confluentcloud.RoleBinding(\"test-role-binding\",\n    principal=f\"User:{example_using_email.id}\",\n    role_name=\"CloudClusterAdmin\",\n    crn_pattern=standard_cluster_on_aws.rbac_crn)\nexample_using_full_name = confluentcloud.get_user(full_name=\"John Doe\")\n```\n```csharp\nusing Pulumi;\nusing ConfluentCloud = Pulumi.ConfluentCloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleUsingIdUser = Output.Create(ConfluentCloud.GetUser.InvokeAsync(new ConfluentCloud.GetUserArgs\n        {\n            Id = \"u-abc123\",\n        }));\n        this.ExampleUsingId = exampleUsingIdUser;\n        var exampleUsingEmail = Output.Create(ConfluentCloud.GetUser.InvokeAsync(new ConfluentCloud.GetUserArgs\n        {\n            Email = \"test123@gmail.com\",\n        }));\n        var test_env = new ConfluentCloud.Environment(\"test-env\", new ConfluentCloud.EnvironmentArgs\n        {\n        });\n        var standard_cluster_on_aws = new ConfluentCloud.KafkaCluster(\"standard-cluster-on-aws\", new ConfluentCloud.KafkaClusterArgs\n        {\n            DisplayName = \"standard_kafka_cluster_on_aws\",\n            Availability = \"SINGLE_ZONE\",\n            Cloud = \"AWS\",\n            Region = \"us-west-2\",\n            Standards = \n            {\n                ,\n            },\n            Environment = new ConfluentCloud.Inputs.KafkaClusterEnvironmentArgs\n            {\n                Id = test_env.Id,\n            },\n        });\n        var test_role_binding = new ConfluentCloud.RoleBinding(\"test-role-binding\", new ConfluentCloud.RoleBindingArgs\n        {\n            Principal = exampleUsingEmail.Apply(exampleUsingEmail =\u003e $\"User:{exampleUsingEmail.Id}\"),\n            RoleName = \"CloudClusterAdmin\",\n            CrnPattern = standard_cluster_on_aws.RbacCrn,\n        });\n        var exampleUsingFullName = Output.Create(ConfluentCloud.GetUser.InvokeAsync(new ConfluentCloud.GetUserArgs\n        {\n            FullName = \"John Doe\",\n        }));\n    }\n\n    [Output(\"exampleUsingId\")]\n    public Output\u003cstring\u003e ExampleUsingId { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUsingIdUser, err := confluentcloud.GetUser(ctx, \u0026GetUserArgs{\n\t\t\tId: pulumi.StringRef(\"u-abc123\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsingId\", exampleUsingIdUser)\n\t\texampleUsingEmail, err := confluentcloud.GetUser(ctx, \u0026GetUserArgs{\n\t\t\tEmail: pulumi.StringRef(\"test123@gmail.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = confluentcloud.NewEnvironment(ctx, \"test-env\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = confluentcloud.NewKafkaCluster(ctx, \"standard-cluster-on-aws\", \u0026confluentcloud.KafkaClusterArgs{\n\t\t\tDisplayName:  pulumi.String(\"standard_kafka_cluster_on_aws\"),\n\t\t\tAvailability: pulumi.String(\"SINGLE_ZONE\"),\n\t\t\tCloud:        pulumi.String(\"AWS\"),\n\t\t\tRegion:       pulumi.String(\"us-west-2\"),\n\t\t\tStandards: KafkaClusterStandardArray{\n\t\t\t\tnil,\n\t\t\t},\n\t\t\tEnvironment: \u0026KafkaClusterEnvironmentArgs{\n\t\t\t\tId: test_env.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = confluentcloud.NewRoleBinding(ctx, \"test-role-binding\", \u0026confluentcloud.RoleBindingArgs{\n\t\t\tPrincipal:  pulumi.String(fmt.Sprintf(\"User:%v\", exampleUsingEmail.Id)),\n\t\t\tRoleName:   pulumi.String(\"CloudClusterAdmin\"),\n\t\t\tCrnPattern: standard_cluster_on_aws.RbacCrn,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = confluentcloud.GetUser(ctx, \u0026GetUserArgs{\n\t\t\tFullName: pulumi.StringRef(\"John Doe\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.confluentcloud.ConfluentcloudFunctions;\nimport com.pulumi.confluentcloud.inputs.GetUserArgs;\nimport com.pulumi.confluentcloud.Environment;\nimport com.pulumi.confluentcloud.KafkaCluster;\nimport com.pulumi.confluentcloud.KafkaClusterArgs;\nimport com.pulumi.confluentcloud.inputs.KafkaClusterStandardArgs;\nimport com.pulumi.confluentcloud.inputs.KafkaClusterEnvironmentArgs;\nimport com.pulumi.confluentcloud.RoleBinding;\nimport com.pulumi.confluentcloud.RoleBindingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUsingIdUser = ConfluentcloudFunctions.getUser(GetUserArgs.builder()\n            .id(\"u-abc123\")\n            .build());\n\n        ctx.export(\"exampleUsingId\", exampleUsingIdUser.applyValue(getUserResult -\u003e getUserResult));\n        final var exampleUsingEmail = ConfluentcloudFunctions.getUser(GetUserArgs.builder()\n            .email(\"test123@gmail.com\")\n            .build());\n\n        var test_env = new Environment(\"test-env\");\n\n        var standard_cluster_on_aws = new KafkaCluster(\"standard-cluster-on-aws\", KafkaClusterArgs.builder()        \n            .displayName(\"standard_kafka_cluster_on_aws\")\n            .availability(\"SINGLE_ZONE\")\n            .cloud(\"AWS\")\n            .region(\"us-west-2\")\n            .standards()\n            .environment(KafkaClusterEnvironmentArgs.builder()\n                .id(test_env.id())\n                .build())\n            .build());\n\n        var test_role_binding = new RoleBinding(\"test-role-binding\", RoleBindingArgs.builder()        \n            .principal(String.format(\"User:%s\", exampleUsingEmail.applyValue(getUserResult -\u003e getUserResult.id())))\n            .roleName(\"CloudClusterAdmin\")\n            .crnPattern(standard_cluster_on_aws.rbacCrn())\n            .build());\n\n        final var exampleUsingFullName = ConfluentcloudFunctions.getUser(GetUserArgs.builder()\n            .fullName(\"John Doe\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test-env:\n    type: confluentcloud:Environment\n  standard-cluster-on-aws:\n    type: confluentcloud:KafkaCluster\n    properties:\n      displayName: standard_kafka_cluster_on_aws\n      availability: SINGLE_ZONE\n      cloud: AWS\n      region: us-west-2\n      standards:\n        - {}\n      environment:\n        id: ${[\"test-env\"].id}\n  test-role-binding:\n    type: confluentcloud:RoleBinding\n    properties:\n      principal: User:${exampleUsingEmail.id}\n      roleName: CloudClusterAdmin\n      crnPattern: ${[\"standard-cluster-on-aws\"].rbacCrn}\nvariables:\n  exampleUsingIdUser:\n    Fn::Invoke:\n      Function: confluentcloud:getUser\n      Arguments:\n        id: u-abc123\n  exampleUsingEmail:\n    Fn::Invoke:\n      Function: confluentcloud:getUser\n      Arguments:\n        email: test123@gmail.com\n  exampleUsingFullName:\n    Fn::Invoke:\n      Function: confluentcloud:getUser\n      Arguments:\n        fullName: John Doe\noutputs:\n  exampleUsingId: ${exampleUsingIdUser}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The email address of the User.\n"
                    },
                    "fullName": {
                        "type": "string",
                        "description": "The full name of the User.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the User (e.g., `u-abc123`).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "(Required String) An API Version of the schema version of the User.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "(Required String) The email address of the User.\n"
                    },
                    "fullName": {
                        "type": "string",
                        "description": "(Required String) The full name of the User.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Required String) The ID of the User, for example, `u-abc123`.\n"
                    },
                    "kind": {
                        "type": "string",
                        "description": "(Required String) A kind of the User.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiVersion",
                    "email",
                    "fullName",
                    "id",
                    "kind"
                ]
            }
        }
    }
}
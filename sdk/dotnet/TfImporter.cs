// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ConfluentCloud
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using ConfluentCloud = Pulumi.ConfluentCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new ConfluentCloud.TfImporter("example", new()
    ///     {
    ///         Resources = new[]
    ///         {
    ///             "confluent_service_account",
    ///             "confluent_environment",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Getting Started
    /// 
    /// The following end-to-end examples might help to get started with the `confluentcloud.TfImporter` resource:
    ///   * `cloud-importer`: Export _Cloud_ resources (for example, Service Accounts, Environments)
    ///   * `kafka-importer`: Export _Kafka_ resources (for example, ACLs, Topics)
    ///   * `schema-registry-importer`: Export _Schema Registry_ resources (for example, Schemas)
    /// </summary>
    [ConfluentCloudResourceType("confluentcloud:index/tfImporter:TfImporter")]
    public partial class TfImporter : global::Pulumi.CustomResource
    {
        /// <summary>
        /// An absolute path to a folder for outputting generated TF state and TF configuration files for your infrastructure. The folder is created if it doesn't exist. Defaults to `./imported_confluent_infrastructure`.
        /// 
        /// These are the exportable resources:
        /// * Service Accounts
        /// * Environments
        /// * Connectors
        /// * Kafka Clusters
        /// * Access Control Lists (ACLs)
        /// * Topics
        /// * Schemas
        /// 
        /// &gt; **Note:** File an issue to request a support for other resources.
        /// </summary>
        [Output("outputPath")]
        public Output<string?> OutputPath { get; private set; } = null!;

        /// <summary>
        /// A list of resources names to export. Defaults to all exportable resources.
        /// </summary>
        [Output("resources")]
        public Output<ImmutableArray<string>> Resources { get; private set; } = null!;


        /// <summary>
        /// Create a TfImporter resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TfImporter(string name, TfImporterArgs? args = null, CustomResourceOptions? options = null)
            : base("confluentcloud:index/tfImporter:TfImporter", name, args ?? new TfImporterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TfImporter(string name, Input<string> id, TfImporterState? state = null, CustomResourceOptions? options = null)
            : base("confluentcloud:index/tfImporter:TfImporter", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TfImporter resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TfImporter Get(string name, Input<string> id, TfImporterState? state = null, CustomResourceOptions? options = null)
        {
            return new TfImporter(name, id, state, options);
        }
    }

    public sealed class TfImporterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An absolute path to a folder for outputting generated TF state and TF configuration files for your infrastructure. The folder is created if it doesn't exist. Defaults to `./imported_confluent_infrastructure`.
        /// 
        /// These are the exportable resources:
        /// * Service Accounts
        /// * Environments
        /// * Connectors
        /// * Kafka Clusters
        /// * Access Control Lists (ACLs)
        /// * Topics
        /// * Schemas
        /// 
        /// &gt; **Note:** File an issue to request a support for other resources.
        /// </summary>
        [Input("outputPath")]
        public Input<string>? OutputPath { get; set; }

        [Input("resources")]
        private InputList<string>? _resources;

        /// <summary>
        /// A list of resources names to export. Defaults to all exportable resources.
        /// </summary>
        public InputList<string> Resources
        {
            get => _resources ?? (_resources = new InputList<string>());
            set => _resources = value;
        }

        public TfImporterArgs()
        {
        }
        public static new TfImporterArgs Empty => new TfImporterArgs();
    }

    public sealed class TfImporterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An absolute path to a folder for outputting generated TF state and TF configuration files for your infrastructure. The folder is created if it doesn't exist. Defaults to `./imported_confluent_infrastructure`.
        /// 
        /// These are the exportable resources:
        /// * Service Accounts
        /// * Environments
        /// * Connectors
        /// * Kafka Clusters
        /// * Access Control Lists (ACLs)
        /// * Topics
        /// * Schemas
        /// 
        /// &gt; **Note:** File an issue to request a support for other resources.
        /// </summary>
        [Input("outputPath")]
        public Input<string>? OutputPath { get; set; }

        [Input("resources")]
        private InputList<string>? _resources;

        /// <summary>
        /// A list of resources names to export. Defaults to all exportable resources.
        /// </summary>
        public InputList<string> Resources
        {
            get => _resources ?? (_resources = new InputList<string>());
            set => _resources = value;
        }

        public TfImporterState()
        {
        }
        public static new TfImporterState Empty => new TfImporterState();
    }
}

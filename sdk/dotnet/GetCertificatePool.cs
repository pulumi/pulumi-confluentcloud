// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ConfluentCloud
{
    public static class GetCertificatePool
    {
        /// <summary>
        /// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// `confluentcloud.CertificatePool` describes a Certificate Pool data source.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = ConfluentCloud.GetCertificatePool.Invoke(new()
        ///     {
        ///         Id = "pool-def456",
        ///         CertificateAuthority = new ConfluentCloud.Inputs.GetCertificatePoolCertificateAuthorityInputArgs
        ///         {
        ///             Id = "op-abc123",
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["certificatePool"] = main,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetCertificatePoolResult> InvokeAsync(GetCertificatePoolArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCertificatePoolResult>("confluentcloud:index/getCertificatePool:getCertificatePool", args ?? new GetCertificatePoolArgs(), options.WithDefaults());

        /// <summary>
        /// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// `confluentcloud.CertificatePool` describes a Certificate Pool data source.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = ConfluentCloud.GetCertificatePool.Invoke(new()
        ///     {
        ///         Id = "pool-def456",
        ///         CertificateAuthority = new ConfluentCloud.Inputs.GetCertificatePoolCertificateAuthorityInputArgs
        ///         {
        ///             Id = "op-abc123",
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["certificatePool"] = main,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetCertificatePoolResult> Invoke(GetCertificatePoolInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCertificatePoolResult>("confluentcloud:index/getCertificatePool:getCertificatePool", args ?? new GetCertificatePoolInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// `confluentcloud.CertificatePool` describes a Certificate Pool data source.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = ConfluentCloud.GetCertificatePool.Invoke(new()
        ///     {
        ///         Id = "pool-def456",
        ///         CertificateAuthority = new ConfluentCloud.Inputs.GetCertificatePoolCertificateAuthorityInputArgs
        ///         {
        ///             Id = "op-abc123",
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["certificatePool"] = main,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetCertificatePoolResult> Invoke(GetCertificatePoolInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCertificatePoolResult>("confluentcloud:index/getCertificatePool:getCertificatePool", args ?? new GetCertificatePoolInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCertificatePoolArgs : global::Pulumi.InvokeArgs
    {
        [Input("certificateAuthority", required: true)]
        public Inputs.GetCertificatePoolCertificateAuthorityArgs CertificateAuthority { get; set; } = null!;

        /// <summary>
        /// The ID of the Certificate Pool, for example, `pool-abc123`.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetCertificatePoolArgs()
        {
        }
        public static new GetCertificatePoolArgs Empty => new GetCertificatePoolArgs();
    }

    public sealed class GetCertificatePoolInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("certificateAuthority", required: true)]
        public Input<Inputs.GetCertificatePoolCertificateAuthorityInputArgs> CertificateAuthority { get; set; } = null!;

        /// <summary>
        /// The ID of the Certificate Pool, for example, `pool-abc123`.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetCertificatePoolInvokeArgs()
        {
        }
        public static new GetCertificatePoolInvokeArgs Empty => new GetCertificatePoolInvokeArgs();
    }


    [OutputType]
    public sealed class GetCertificatePoolResult
    {
        public readonly Outputs.GetCertificatePoolCertificateAuthorityResult CertificateAuthority;
        /// <summary>
        /// (Required String) A description of the Certificate Pool.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// (Required String) A human-readable name for the Certificate Pool.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// (Required String) The certificate field that will be used to represent the pool's external identity for audit logging, for example, `UID`.
        /// </summary>
        public readonly string ExternalIdentifier;
        /// <summary>
        /// (Required String) A filter expression in [Supported Common Expression Language (CEL)](https://docs.confluent.io/cloud/current/access-management/authenticate/mtls/cel-filters.html) that specifies which identities can authenticate using your certificate pool.
        /// </summary>
        public readonly string Filter;
        public readonly string Id;

        [OutputConstructor]
        private GetCertificatePoolResult(
            Outputs.GetCertificatePoolCertificateAuthorityResult certificateAuthority,

            string description,

            string displayName,

            string externalIdentifier,

            string filter,

            string id)
        {
            CertificateAuthority = certificateAuthority;
            Description = description;
            DisplayName = displayName;
            ExternalIdentifier = externalIdentifier;
            Filter = filter;
            Id = id;
        }
    }
}

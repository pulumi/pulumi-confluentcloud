// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ConfluentCloud
{
    public static class GetIdentityProvider
    {
        /// <summary>
        /// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// `confluentcloud.IdentityProvider` describes an Identity Provider data source.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleUsingId = ConfluentCloud.GetIdentityProvider.Invoke(new()
        ///     {
        ///         Id = "op-abc123",
        ///     });
        /// 
        ///     var exampleUsingName = ConfluentCloud.GetIdentityProvider.Invoke(new()
        ///     {
        ///         DisplayName = "My OIDC Provider: Azure AD",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["exampleUsingId"] = exampleUsingId,
        ///         ["exampleUsingName"] = exampleUsingName,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetIdentityProviderResult> InvokeAsync(GetIdentityProviderArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIdentityProviderResult>("confluentcloud:index/getIdentityProvider:getIdentityProvider", args ?? new GetIdentityProviderArgs(), options.WithDefaults());

        /// <summary>
        /// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// `confluentcloud.IdentityProvider` describes an Identity Provider data source.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleUsingId = ConfluentCloud.GetIdentityProvider.Invoke(new()
        ///     {
        ///         Id = "op-abc123",
        ///     });
        /// 
        ///     var exampleUsingName = ConfluentCloud.GetIdentityProvider.Invoke(new()
        ///     {
        ///         DisplayName = "My OIDC Provider: Azure AD",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["exampleUsingId"] = exampleUsingId,
        ///         ["exampleUsingName"] = exampleUsingName,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetIdentityProviderResult> Invoke(GetIdentityProviderInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIdentityProviderResult>("confluentcloud:index/getIdentityProvider:getIdentityProvider", args ?? new GetIdentityProviderInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// `confluentcloud.IdentityProvider` describes an Identity Provider data source.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleUsingId = ConfluentCloud.GetIdentityProvider.Invoke(new()
        ///     {
        ///         Id = "op-abc123",
        ///     });
        /// 
        ///     var exampleUsingName = ConfluentCloud.GetIdentityProvider.Invoke(new()
        ///     {
        ///         DisplayName = "My OIDC Provider: Azure AD",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["exampleUsingId"] = exampleUsingId,
        ///         ["exampleUsingName"] = exampleUsingName,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetIdentityProviderResult> Invoke(GetIdentityProviderInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetIdentityProviderResult>("confluentcloud:index/getIdentityProvider:getIdentityProvider", args ?? new GetIdentityProviderInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIdentityProviderArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A human-readable name for the Identity Provider.
        /// 
        /// &gt; **Note:** Exactly one from the `Id` and `DisplayName` attributes must be specified.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        /// <summary>
        /// The ID of the Identity Provider, for example, `op-abc123`.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        public GetIdentityProviderArgs()
        {
        }
        public static new GetIdentityProviderArgs Empty => new GetIdentityProviderArgs();
    }

    public sealed class GetIdentityProviderInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A human-readable name for the Identity Provider.
        /// 
        /// &gt; **Note:** Exactly one from the `Id` and `DisplayName` attributes must be specified.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The ID of the Identity Provider, for example, `op-abc123`.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        public GetIdentityProviderInvokeArgs()
        {
        }
        public static new GetIdentityProviderInvokeArgs Empty => new GetIdentityProviderInvokeArgs();
    }


    [OutputType]
    public sealed class GetIdentityProviderResult
    {
        /// <summary>
        /// (Required String) A description for the Identity Provider.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// (Required String) A human-readable name for the Identity Provider.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// (Required String) The ID of the Identity Provider, for example, `op-abc123`.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (Optional String) The JSON Web Token (JWT) claim to extract the authenticating identity to Confluent resources from [Registered Claim Names](https://datatracker.ietf.org/doc/html/rfc7519#section-4.1). This appears in audit log records.
        /// </summary>
        public readonly string IdentityClaim;
        /// <summary>
        /// (Required String) A publicly reachable issuer URI for the Identity Provider. The unique issuer URI string represents the entity for issuing tokens.
        /// </summary>
        public readonly string Issuer;
        /// <summary>
        /// (Required String) A publicly reachable JSON Web Key Set (JWKS) URI for the Identity Provider. A JSON Web Key Set (JWKS) provides a set of keys containing the public keys used to verify any JSON Web Token (JWT) issued by your OAuth 2.0 identity provider.
        /// </summary>
        public readonly string JwksUri;

        [OutputConstructor]
        private GetIdentityProviderResult(
            string description,

            string displayName,

            string id,

            string identityClaim,

            string issuer,

            string jwksUri)
        {
            Description = description;
            DisplayName = displayName;
            Id = id;
            IdentityClaim = identityClaim;
            Issuer = issuer;
            JwksUri = jwksUri;
        }
    }
}

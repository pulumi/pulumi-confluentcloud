// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ConfluentCloud
{
    /// <summary>
    /// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
    /// 
    /// `confluentcloud.SchemaRegistryKek` provides a Schema Registry Key Encryption Key (KEK) resource that enables creating, editing, and deleting Schema Registry Key Encryption Keys on Confluent Cloud.
    /// 
    /// ## Example Usage
    /// 
    /// ### Option #1: Manage multiple Schema Registry clusters in the same Pulumi Stack
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using ConfluentCloud = Pulumi.ConfluentCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var awsKey = new ConfluentCloud.SchemaRegistryKek("aws_key", new()
    ///     {
    ///         SchemaRegistryCluster = new ConfluentCloud.Inputs.SchemaRegistryKekSchemaRegistryClusterArgs
    ///         {
    ///             Id = essentials.Id,
    ///         },
    ///         RestEndpoint = essentials.RestEndpoint,
    ///         Credentials = new ConfluentCloud.Inputs.SchemaRegistryKekCredentialsArgs
    ///         {
    ///             Key = "&lt;Schema Registry API Key for data.confluent_schema_registry_cluster.essentials&gt;",
    ///             Secret = "&lt;Schema Registry API Secret for data.confluent_schema_registry_cluster.essentials&gt;",
    ///         },
    ///         Name = "my_key",
    ///         KmsType = "aws-kms",
    ///         KmsKeyId = "key_id",
    ///         Doc = "test key",
    ///         Shared = false,
    ///         HardDelete = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Option #2: Manage a single Schema Registry cluster in the same Pulumi Stack
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using ConfluentCloud = Pulumi.ConfluentCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var pii = new ConfluentCloud.SchemaRegistryKek("pii", new()
    ///     {
    ///         Name = "my_key",
    ///         KmsType = "aws-kms",
    ///         KmsKeyId = "key_id",
    ///         Doc = "test key",
    ///         Shared = false,
    ///         HardDelete = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Getting Started
    /// 
    /// The following end-to-end example might help to get started with field-level encryption:
    ///   * field-level-encryption-schema
    /// 
    /// ## Import
    /// 
    /// You can import a Schema Registry Key by using the Schema Registry cluster ID, Kek name in the format `&lt;Schema Registry cluster ID&gt;/&lt;Kek name&gt;`, for example:
    /// 
    /// $ export IMPORT_SCHEMA_REGISTRY_API_KEY="&lt;schema_registry_api_key&gt;"
    /// 
    /// $ export IMPORT_SCHEMA_REGISTRY_API_SECRET="&lt;schema_registry_api_secret&gt;"
    /// 
    /// $ export IMPORT_SCHEMA_REGISTRY_REST_ENDPOINT="&lt;schema_registry_rest_endpoint&gt;"
    /// 
    /// ```sh
    /// $ pulumi import confluentcloud:index/schemaRegistryKek:SchemaRegistryKek aws_key lsrc-8wrx70/aws_key
    /// ```
    /// 
    /// !&gt; **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
    /// </summary>
    [ConfluentCloudResourceType("confluentcloud:index/schemaRegistryKek:SchemaRegistryKek")]
    public partial class SchemaRegistryKek : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Cluster API Credentials.
        /// </summary>
        [Output("credentials")]
        public Output<Outputs.SchemaRegistryKekCredentials?> Credentials { get; private set; } = null!;

        /// <summary>
        /// The optional description for the KEK.
        /// </summary>
        [Output("doc")]
        public Output<string> Doc { get; private set; } = null!;

        /// <summary>
        /// Controls whether a kek should be soft or hard deleted. Set it to `true` if you want to hard delete a schema registry kek
        /// on destroy. Defaults to `false` (soft delete).
        /// </summary>
        [Output("hardDelete")]
        public Output<bool?> HardDelete { get; private set; } = null!;

        /// <summary>
        /// The ID of the key from KMS. 
        /// - When using the AWS KMS, this is an ARN, for example, `arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789abc`.
        /// - When using the Azure Key Vault, this is a Key Identifier (URI), for example, `https://test-keyvault1.vault.azure.net/keys/test-key1/1234567890abcdef1234567890abcdef`.
        /// - When using the GCP KMS, this is a resource name, for example, `projects/test-project1/locations/us-central1/keyRings/test-keyRing1/cryptoKeys/test-key1`.
        /// </summary>
        [Output("kmsKeyId")]
        public Output<string> KmsKeyId { get; private set; } = null!;

        /// <summary>
        /// The type of Key Management Service (KMS). The supported values include `aws-kms`, `azure-kms`, and `gcp-kms`. Additionally, custom KMS types are supported as well.
        /// </summary>
        [Output("kmsType")]
        public Output<string> KmsType { get; private set; } = null!;

        /// <summary>
        /// The name for the KEK.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The custom properties to set (for example, `KeyUsage=ENCRYPT_DECRYPT`, `KeyState=Enabled`):
        /// </summary>
        [Output("properties")]
        public Output<ImmutableDictionary<string, string>> Properties { get; private set; } = null!;

        /// <summary>
        /// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
        /// </summary>
        [Output("restEndpoint")]
        public Output<string?> RestEndpoint { get; private set; } = null!;

        [Output("schemaRegistryCluster")]
        public Output<Outputs.SchemaRegistryKekSchemaRegistryCluster?> SchemaRegistryCluster { get; private set; } = null!;

        /// <summary>
        /// The optional flag to control whether the DEK Registry has shared access to the KMS. Defaults to `false`.
        /// </summary>
        [Output("shared")]
        public Output<bool?> Shared { get; private set; } = null!;


        /// <summary>
        /// Create a SchemaRegistryKek resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SchemaRegistryKek(string name, SchemaRegistryKekArgs args, CustomResourceOptions? options = null)
            : base("confluentcloud:index/schemaRegistryKek:SchemaRegistryKek", name, args ?? new SchemaRegistryKekArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SchemaRegistryKek(string name, Input<string> id, SchemaRegistryKekState? state = null, CustomResourceOptions? options = null)
            : base("confluentcloud:index/schemaRegistryKek:SchemaRegistryKek", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "credentials",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SchemaRegistryKek resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SchemaRegistryKek Get(string name, Input<string> id, SchemaRegistryKekState? state = null, CustomResourceOptions? options = null)
        {
            return new SchemaRegistryKek(name, id, state, options);
        }
    }

    public sealed class SchemaRegistryKekArgs : global::Pulumi.ResourceArgs
    {
        [Input("credentials")]
        private Input<Inputs.SchemaRegistryKekCredentialsArgs>? _credentials;

        /// <summary>
        /// The Cluster API Credentials.
        /// </summary>
        public Input<Inputs.SchemaRegistryKekCredentialsArgs>? Credentials
        {
            get => _credentials;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _credentials = Output.Tuple<Input<Inputs.SchemaRegistryKekCredentialsArgs>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The optional description for the KEK.
        /// </summary>
        [Input("doc")]
        public Input<string>? Doc { get; set; }

        /// <summary>
        /// Controls whether a kek should be soft or hard deleted. Set it to `true` if you want to hard delete a schema registry kek
        /// on destroy. Defaults to `false` (soft delete).
        /// </summary>
        [Input("hardDelete")]
        public Input<bool>? HardDelete { get; set; }

        /// <summary>
        /// The ID of the key from KMS. 
        /// - When using the AWS KMS, this is an ARN, for example, `arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789abc`.
        /// - When using the Azure Key Vault, this is a Key Identifier (URI), for example, `https://test-keyvault1.vault.azure.net/keys/test-key1/1234567890abcdef1234567890abcdef`.
        /// - When using the GCP KMS, this is a resource name, for example, `projects/test-project1/locations/us-central1/keyRings/test-keyRing1/cryptoKeys/test-key1`.
        /// </summary>
        [Input("kmsKeyId", required: true)]
        public Input<string> KmsKeyId { get; set; } = null!;

        /// <summary>
        /// The type of Key Management Service (KMS). The supported values include `aws-kms`, `azure-kms`, and `gcp-kms`. Additionally, custom KMS types are supported as well.
        /// </summary>
        [Input("kmsType", required: true)]
        public Input<string> KmsType { get; set; } = null!;

        /// <summary>
        /// The name for the KEK.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("properties")]
        private InputMap<string>? _properties;

        /// <summary>
        /// The custom properties to set (for example, `KeyUsage=ENCRYPT_DECRYPT`, `KeyState=Enabled`):
        /// </summary>
        public InputMap<string> Properties
        {
            get => _properties ?? (_properties = new InputMap<string>());
            set => _properties = value;
        }

        /// <summary>
        /// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
        /// </summary>
        [Input("restEndpoint")]
        public Input<string>? RestEndpoint { get; set; }

        [Input("schemaRegistryCluster")]
        public Input<Inputs.SchemaRegistryKekSchemaRegistryClusterArgs>? SchemaRegistryCluster { get; set; }

        /// <summary>
        /// The optional flag to control whether the DEK Registry has shared access to the KMS. Defaults to `false`.
        /// </summary>
        [Input("shared")]
        public Input<bool>? Shared { get; set; }

        public SchemaRegistryKekArgs()
        {
        }
        public static new SchemaRegistryKekArgs Empty => new SchemaRegistryKekArgs();
    }

    public sealed class SchemaRegistryKekState : global::Pulumi.ResourceArgs
    {
        [Input("credentials")]
        private Input<Inputs.SchemaRegistryKekCredentialsGetArgs>? _credentials;

        /// <summary>
        /// The Cluster API Credentials.
        /// </summary>
        public Input<Inputs.SchemaRegistryKekCredentialsGetArgs>? Credentials
        {
            get => _credentials;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _credentials = Output.Tuple<Input<Inputs.SchemaRegistryKekCredentialsGetArgs>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The optional description for the KEK.
        /// </summary>
        [Input("doc")]
        public Input<string>? Doc { get; set; }

        /// <summary>
        /// Controls whether a kek should be soft or hard deleted. Set it to `true` if you want to hard delete a schema registry kek
        /// on destroy. Defaults to `false` (soft delete).
        /// </summary>
        [Input("hardDelete")]
        public Input<bool>? HardDelete { get; set; }

        /// <summary>
        /// The ID of the key from KMS. 
        /// - When using the AWS KMS, this is an ARN, for example, `arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789abc`.
        /// - When using the Azure Key Vault, this is a Key Identifier (URI), for example, `https://test-keyvault1.vault.azure.net/keys/test-key1/1234567890abcdef1234567890abcdef`.
        /// - When using the GCP KMS, this is a resource name, for example, `projects/test-project1/locations/us-central1/keyRings/test-keyRing1/cryptoKeys/test-key1`.
        /// </summary>
        [Input("kmsKeyId")]
        public Input<string>? KmsKeyId { get; set; }

        /// <summary>
        /// The type of Key Management Service (KMS). The supported values include `aws-kms`, `azure-kms`, and `gcp-kms`. Additionally, custom KMS types are supported as well.
        /// </summary>
        [Input("kmsType")]
        public Input<string>? KmsType { get; set; }

        /// <summary>
        /// The name for the KEK.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("properties")]
        private InputMap<string>? _properties;

        /// <summary>
        /// The custom properties to set (for example, `KeyUsage=ENCRYPT_DECRYPT`, `KeyState=Enabled`):
        /// </summary>
        public InputMap<string> Properties
        {
            get => _properties ?? (_properties = new InputMap<string>());
            set => _properties = value;
        }

        /// <summary>
        /// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
        /// </summary>
        [Input("restEndpoint")]
        public Input<string>? RestEndpoint { get; set; }

        [Input("schemaRegistryCluster")]
        public Input<Inputs.SchemaRegistryKekSchemaRegistryClusterGetArgs>? SchemaRegistryCluster { get; set; }

        /// <summary>
        /// The optional flag to control whether the DEK Registry has shared access to the KMS. Defaults to `false`.
        /// </summary>
        [Input("shared")]
        public Input<bool>? Shared { get; set; }

        public SchemaRegistryKekState()
        {
        }
        public static new SchemaRegistryKekState Empty => new SchemaRegistryKekState();
    }
}

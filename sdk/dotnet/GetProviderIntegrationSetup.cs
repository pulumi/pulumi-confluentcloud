// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ConfluentCloud
{
    public static class GetProviderIntegrationSetup
    {
        /// <summary>
        /// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// `confluentcloud.ProviderIntegrationSetup` describes a Cloud Service Provider (CSP) integration that allows Confluent Cloud to access resources in your cloud provider account.
        /// 
        /// ## Example Usage
        /// 
        /// ### Azure Provider Integration
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var azure = ConfluentCloud.GetProviderIntegrationSetup.Invoke(new()
        ///     {
        ///         Id = "cspi-abc123",
        ///         Environment = new ConfluentCloud.Inputs.GetProviderIntegrationSetupEnvironmentInputArgs
        ///         {
        ///             Id = "env-xyz456",
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["azureIntegrationStatus"] = azure.Apply(getProviderIntegrationSetupResult =&gt; getProviderIntegrationSetupResult.Status),
        ///     };
        /// });
        /// ```
        /// 
        /// ### GCP Provider Integration
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var gcp = ConfluentCloud.GetProviderIntegrationSetup.Invoke(new()
        ///     {
        ///         DisplayName = "my-gcp-integration",
        ///         Environment = new ConfluentCloud.Inputs.GetProviderIntegrationSetupEnvironmentInputArgs
        ///         {
        ///             Id = "env-xyz456",
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["gcpIntegrationId"] = gcp.Apply(getProviderIntegrationSetupResult =&gt; getProviderIntegrationSetupResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ### Using with Authorization Resource
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = ConfluentCloud.GetProviderIntegrationSetup.Invoke(new()
        ///     {
        ///         Id = "cspi-abc123",
        ///         Environment = new ConfluentCloud.Inputs.GetProviderIntegrationSetupEnvironmentInputArgs
        ///         {
        ///             Id = "env-xyz456",
        ///         },
        ///     });
        /// 
        ///     // Use the integration with authorization data source
        ///     var mainGetProviderIntegrationAuthorization = ConfluentCloud.GetProviderIntegrationAuthorization.Invoke(new()
        ///     {
        ///         Id = main.Apply(getProviderIntegrationSetupResult =&gt; getProviderIntegrationSetupResult.Id),
        ///         Environment = new ConfluentCloud.Inputs.GetProviderIntegrationAuthorizationEnvironmentInputArgs
        ///         {
        ///             Id = "env-xyz456",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ## Getting Started
        /// 
        /// The following end-to-end examples might help to get started with `confluentcloud.ProviderIntegrationSetup` data source:
        /// * provider-integration-azure: Complete Azure Provider Integration setup
        /// * provider-integration-gcp: Complete GCP Provider Integration setup
        /// </summary>
        public static Task<GetProviderIntegrationSetupResult> InvokeAsync(GetProviderIntegrationSetupArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProviderIntegrationSetupResult>("confluentcloud:index/getProviderIntegrationSetup:getProviderIntegrationSetup", args ?? new GetProviderIntegrationSetupArgs(), options.WithDefaults());

        /// <summary>
        /// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// `confluentcloud.ProviderIntegrationSetup` describes a Cloud Service Provider (CSP) integration that allows Confluent Cloud to access resources in your cloud provider account.
        /// 
        /// ## Example Usage
        /// 
        /// ### Azure Provider Integration
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var azure = ConfluentCloud.GetProviderIntegrationSetup.Invoke(new()
        ///     {
        ///         Id = "cspi-abc123",
        ///         Environment = new ConfluentCloud.Inputs.GetProviderIntegrationSetupEnvironmentInputArgs
        ///         {
        ///             Id = "env-xyz456",
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["azureIntegrationStatus"] = azure.Apply(getProviderIntegrationSetupResult =&gt; getProviderIntegrationSetupResult.Status),
        ///     };
        /// });
        /// ```
        /// 
        /// ### GCP Provider Integration
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var gcp = ConfluentCloud.GetProviderIntegrationSetup.Invoke(new()
        ///     {
        ///         DisplayName = "my-gcp-integration",
        ///         Environment = new ConfluentCloud.Inputs.GetProviderIntegrationSetupEnvironmentInputArgs
        ///         {
        ///             Id = "env-xyz456",
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["gcpIntegrationId"] = gcp.Apply(getProviderIntegrationSetupResult =&gt; getProviderIntegrationSetupResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ### Using with Authorization Resource
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = ConfluentCloud.GetProviderIntegrationSetup.Invoke(new()
        ///     {
        ///         Id = "cspi-abc123",
        ///         Environment = new ConfluentCloud.Inputs.GetProviderIntegrationSetupEnvironmentInputArgs
        ///         {
        ///             Id = "env-xyz456",
        ///         },
        ///     });
        /// 
        ///     // Use the integration with authorization data source
        ///     var mainGetProviderIntegrationAuthorization = ConfluentCloud.GetProviderIntegrationAuthorization.Invoke(new()
        ///     {
        ///         Id = main.Apply(getProviderIntegrationSetupResult =&gt; getProviderIntegrationSetupResult.Id),
        ///         Environment = new ConfluentCloud.Inputs.GetProviderIntegrationAuthorizationEnvironmentInputArgs
        ///         {
        ///             Id = "env-xyz456",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ## Getting Started
        /// 
        /// The following end-to-end examples might help to get started with `confluentcloud.ProviderIntegrationSetup` data source:
        /// * provider-integration-azure: Complete Azure Provider Integration setup
        /// * provider-integration-gcp: Complete GCP Provider Integration setup
        /// </summary>
        public static Output<GetProviderIntegrationSetupResult> Invoke(GetProviderIntegrationSetupInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProviderIntegrationSetupResult>("confluentcloud:index/getProviderIntegrationSetup:getProviderIntegrationSetup", args ?? new GetProviderIntegrationSetupInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// `confluentcloud.ProviderIntegrationSetup` describes a Cloud Service Provider (CSP) integration that allows Confluent Cloud to access resources in your cloud provider account.
        /// 
        /// ## Example Usage
        /// 
        /// ### Azure Provider Integration
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var azure = ConfluentCloud.GetProviderIntegrationSetup.Invoke(new()
        ///     {
        ///         Id = "cspi-abc123",
        ///         Environment = new ConfluentCloud.Inputs.GetProviderIntegrationSetupEnvironmentInputArgs
        ///         {
        ///             Id = "env-xyz456",
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["azureIntegrationStatus"] = azure.Apply(getProviderIntegrationSetupResult =&gt; getProviderIntegrationSetupResult.Status),
        ///     };
        /// });
        /// ```
        /// 
        /// ### GCP Provider Integration
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var gcp = ConfluentCloud.GetProviderIntegrationSetup.Invoke(new()
        ///     {
        ///         DisplayName = "my-gcp-integration",
        ///         Environment = new ConfluentCloud.Inputs.GetProviderIntegrationSetupEnvironmentInputArgs
        ///         {
        ///             Id = "env-xyz456",
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["gcpIntegrationId"] = gcp.Apply(getProviderIntegrationSetupResult =&gt; getProviderIntegrationSetupResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ### Using with Authorization Resource
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = ConfluentCloud.GetProviderIntegrationSetup.Invoke(new()
        ///     {
        ///         Id = "cspi-abc123",
        ///         Environment = new ConfluentCloud.Inputs.GetProviderIntegrationSetupEnvironmentInputArgs
        ///         {
        ///             Id = "env-xyz456",
        ///         },
        ///     });
        /// 
        ///     // Use the integration with authorization data source
        ///     var mainGetProviderIntegrationAuthorization = ConfluentCloud.GetProviderIntegrationAuthorization.Invoke(new()
        ///     {
        ///         Id = main.Apply(getProviderIntegrationSetupResult =&gt; getProviderIntegrationSetupResult.Id),
        ///         Environment = new ConfluentCloud.Inputs.GetProviderIntegrationAuthorizationEnvironmentInputArgs
        ///         {
        ///             Id = "env-xyz456",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ## Getting Started
        /// 
        /// The following end-to-end examples might help to get started with `confluentcloud.ProviderIntegrationSetup` data source:
        /// * provider-integration-azure: Complete Azure Provider Integration setup
        /// * provider-integration-gcp: Complete GCP Provider Integration setup
        /// </summary>
        public static Output<GetProviderIntegrationSetupResult> Invoke(GetProviderIntegrationSetupInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetProviderIntegrationSetupResult>("confluentcloud:index/getProviderIntegrationSetup:getProviderIntegrationSetup", args ?? new GetProviderIntegrationSetupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProviderIntegrationSetupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The display name of the Provider Integration. Exactly one of `Id` or `DisplayName` must be specified.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        /// <summary>
        /// (Required Configuration Block) supports the following:
        /// </summary>
        [Input("environment", required: true)]
        public Inputs.GetProviderIntegrationSetupEnvironmentArgs Environment { get; set; } = null!;

        /// <summary>
        /// The ID of the Provider Integration, for example, `cspi-4xg0q`. Exactly one of `Id` or `DisplayName` must be specified.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        public GetProviderIntegrationSetupArgs()
        {
        }
        public static new GetProviderIntegrationSetupArgs Empty => new GetProviderIntegrationSetupArgs();
    }

    public sealed class GetProviderIntegrationSetupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The display name of the Provider Integration. Exactly one of `Id` or `DisplayName` must be specified.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// (Required Configuration Block) supports the following:
        /// </summary>
        [Input("environment", required: true)]
        public Input<Inputs.GetProviderIntegrationSetupEnvironmentInputArgs> Environment { get; set; } = null!;

        /// <summary>
        /// The ID of the Provider Integration, for example, `cspi-4xg0q`. Exactly one of `Id` or `DisplayName` must be specified.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        public GetProviderIntegrationSetupInvokeArgs()
        {
        }
        public static new GetProviderIntegrationSetupInvokeArgs Empty => new GetProviderIntegrationSetupInvokeArgs();
    }


    [OutputType]
    public sealed class GetProviderIntegrationSetupResult
    {
        /// <summary>
        /// (Computed String) The cloud service provider. Values are `AZURE` and `GCP`.
        /// </summary>
        public readonly string Cloud;
        /// <summary>
        /// (Required String) The display name of the Provider Integration.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// (Required Configuration Block) supports the following:
        /// </summary>
        public readonly Outputs.GetProviderIntegrationSetupEnvironmentResult Environment;
        /// <summary>
        /// (Required String) The ID of the Environment that the Provider Integration belongs to, for example, `env-abc123`.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (Required String) The status of the Provider Integration. Values are `DRAFT` and `CREATED`.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// (Required List of Strings) List of resource CRNs where this provider integration is being used.
        /// </summary>
        public readonly ImmutableArray<string> Usages;

        [OutputConstructor]
        private GetProviderIntegrationSetupResult(
            string cloud,

            string displayName,

            Outputs.GetProviderIntegrationSetupEnvironmentResult environment,

            string id,

            string status,

            ImmutableArray<string> usages)
        {
            Cloud = cloud;
            DisplayName = displayName;
            Environment = environment;
            Id = id;
            Status = status;
            Usages = usages;
        }
    }
}

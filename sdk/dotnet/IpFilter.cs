// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ConfluentCloud
{
    /// <summary>
    /// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
    /// 
    /// `confluentcloud.IpFilter` provides an IP Filter resource that enables creating, editing, and deleting IP Filters on Confluent Cloud.
    /// 
    /// &gt; **Note:** See [IP Filtering on Confluent Cloud](https://docs.confluent.io/cloud/current/security/access-control/ip-filtering/overview.html) for more details about the IP Filtering feature, its prerequisites, and its limitations.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using ConfluentCloud = Pulumi.ConfluentCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var management_filter = new ConfluentCloud.IpFilter("management-filter", new()
    ///     {
    ///         FilterName = "Management API Rules",
    ///         ResourceGroup = "management",
    ///         IpGroups = new[]
    ///         {
    ///             example.Id,
    ///         },
    ///     });
    /// 
    ///     var multiple_filter = new ConfluentCloud.IpFilter("multiple-filter", new()
    ///     {
    ///         FilterName = "Management, Schema, Flink API Rules",
    ///         ResourceGroup = "multiple",
    ///         OperationGroups = new[]
    ///         {
    ///             "MANAGEMENT",
    ///             "SCHEMA",
    ///             "FLINK",
    ///         },
    ///         IpGroups = new[]
    ///         {
    ///             example.Id,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// You can import an IP Filter by using IP Filter ID, for example:
    /// 
    /// $ export CONFLUENT_CLOUD_API_KEY="&lt;cloud_api_key&gt;"
    /// 
    /// $ export CONFLUENT_CLOUD_API_SECRET="&lt;cloud_api_secret&gt;"
    /// 
    /// ```sh
    /// $ pulumi import confluentcloud:index/ipFilter:IpFilter example ipf-abc123
    /// ```
    /// 
    /// !&gt; **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
    /// </summary>
    [ConfluentCloudResourceType("confluentcloud:index/ipFilter:IpFilter")]
    public partial class IpFilter : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A human-readable name for an IP Filter. Can contain any unicode letter or number, the ASCII space character, or any of the following special characters: `[`, `]`, `|`, `&amp;`, `+`, `-`, `_`, `/`, `.`, `,`.
        /// </summary>
        [Output("filterName")]
        public Output<string> FilterName { get; private set; } = null!;

        /// <summary>
        /// A list of IP Groups.
        /// </summary>
        [Output("ipGroups")]
        public Output<ImmutableArray<string>> IpGroups { get; private set; } = null!;

        /// <summary>
        /// Scope of resources covered by this IP Filter. Resource group must be set to 'multiple' in order to use this property. During update operations, note that the operation groups passed in will replace the list of existing operation groups (passing in an empty list will remove all operation groups) from the filter (in line with the behavior for `ip_groups` attribute).
        /// </summary>
        [Output("operationGroups")]
        public Output<ImmutableArray<string>> OperationGroups { get; private set; } = null!;

        /// <summary>
        /// Scope of resources covered by this IP Filter. Available resource groups include `"management"` and `"multiple"`.
        /// </summary>
        [Output("resourceGroup")]
        public Output<string> ResourceGroup { get; private set; } = null!;

        /// <summary>
        /// A CRN that specifies the scope of the IP Filter, specifically the organization or environment. Without specifying this property, the IP Filter would apply to the whole organization. For example, `"crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa"` or `data.confluent_organization.resource_name`.
        /// </summary>
        [Output("resourceScope")]
        public Output<string> ResourceScope { get; private set; } = null!;


        /// <summary>
        /// Create a IpFilter resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IpFilter(string name, IpFilterArgs args, CustomResourceOptions? options = null)
            : base("confluentcloud:index/ipFilter:IpFilter", name, args ?? new IpFilterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IpFilter(string name, Input<string> id, IpFilterState? state = null, CustomResourceOptions? options = null)
            : base("confluentcloud:index/ipFilter:IpFilter", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IpFilter resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IpFilter Get(string name, Input<string> id, IpFilterState? state = null, CustomResourceOptions? options = null)
        {
            return new IpFilter(name, id, state, options);
        }
    }

    public sealed class IpFilterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A human-readable name for an IP Filter. Can contain any unicode letter or number, the ASCII space character, or any of the following special characters: `[`, `]`, `|`, `&amp;`, `+`, `-`, `_`, `/`, `.`, `,`.
        /// </summary>
        [Input("filterName", required: true)]
        public Input<string> FilterName { get; set; } = null!;

        [Input("ipGroups", required: true)]
        private InputList<string>? _ipGroups;

        /// <summary>
        /// A list of IP Groups.
        /// </summary>
        public InputList<string> IpGroups
        {
            get => _ipGroups ?? (_ipGroups = new InputList<string>());
            set => _ipGroups = value;
        }

        [Input("operationGroups")]
        private InputList<string>? _operationGroups;

        /// <summary>
        /// Scope of resources covered by this IP Filter. Resource group must be set to 'multiple' in order to use this property. During update operations, note that the operation groups passed in will replace the list of existing operation groups (passing in an empty list will remove all operation groups) from the filter (in line with the behavior for `ip_groups` attribute).
        /// </summary>
        public InputList<string> OperationGroups
        {
            get => _operationGroups ?? (_operationGroups = new InputList<string>());
            set => _operationGroups = value;
        }

        /// <summary>
        /// Scope of resources covered by this IP Filter. Available resource groups include `"management"` and `"multiple"`.
        /// </summary>
        [Input("resourceGroup", required: true)]
        public Input<string> ResourceGroup { get; set; } = null!;

        /// <summary>
        /// A CRN that specifies the scope of the IP Filter, specifically the organization or environment. Without specifying this property, the IP Filter would apply to the whole organization. For example, `"crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa"` or `data.confluent_organization.resource_name`.
        /// </summary>
        [Input("resourceScope")]
        public Input<string>? ResourceScope { get; set; }

        public IpFilterArgs()
        {
        }
        public static new IpFilterArgs Empty => new IpFilterArgs();
    }

    public sealed class IpFilterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A human-readable name for an IP Filter. Can contain any unicode letter or number, the ASCII space character, or any of the following special characters: `[`, `]`, `|`, `&amp;`, `+`, `-`, `_`, `/`, `.`, `,`.
        /// </summary>
        [Input("filterName")]
        public Input<string>? FilterName { get; set; }

        [Input("ipGroups")]
        private InputList<string>? _ipGroups;

        /// <summary>
        /// A list of IP Groups.
        /// </summary>
        public InputList<string> IpGroups
        {
            get => _ipGroups ?? (_ipGroups = new InputList<string>());
            set => _ipGroups = value;
        }

        [Input("operationGroups")]
        private InputList<string>? _operationGroups;

        /// <summary>
        /// Scope of resources covered by this IP Filter. Resource group must be set to 'multiple' in order to use this property. During update operations, note that the operation groups passed in will replace the list of existing operation groups (passing in an empty list will remove all operation groups) from the filter (in line with the behavior for `ip_groups` attribute).
        /// </summary>
        public InputList<string> OperationGroups
        {
            get => _operationGroups ?? (_operationGroups = new InputList<string>());
            set => _operationGroups = value;
        }

        /// <summary>
        /// Scope of resources covered by this IP Filter. Available resource groups include `"management"` and `"multiple"`.
        /// </summary>
        [Input("resourceGroup")]
        public Input<string>? ResourceGroup { get; set; }

        /// <summary>
        /// A CRN that specifies the scope of the IP Filter, specifically the organization or environment. Without specifying this property, the IP Filter would apply to the whole organization. For example, `"crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa"` or `data.confluent_organization.resource_name`.
        /// </summary>
        [Input("resourceScope")]
        public Input<string>? ResourceScope { get; set; }

        public IpFilterState()
        {
        }
        public static new IpFilterState Empty => new IpFilterState();
    }
}

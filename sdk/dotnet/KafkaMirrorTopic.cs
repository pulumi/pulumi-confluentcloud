// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ConfluentCloud
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using ConfluentCloud = Pulumi.ConfluentCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new ConfluentCloud.KafkaMirrorTopic("example", new()
    ///     {
    ///         SourceKafkaTopic = new ConfluentCloud.Inputs.KafkaMirrorTopicSourceKafkaTopicArgs
    ///         {
    ///             TopicName = "orders",
    ///         },
    ///         ClusterLink = new ConfluentCloud.Inputs.KafkaMirrorTopicClusterLinkArgs
    ///         {
    ///             LinkName = source_outbound.LinkName,
    ///         },
    ///         KafkaCluster = new ConfluentCloud.Inputs.KafkaMirrorTopicKafkaClusterArgs
    ///         {
    ///             Id = destination.Id,
    ///             RestEndpoint = destination.RestEndpoint,
    ///             Credentials = new ConfluentCloud.Inputs.KafkaMirrorTopicKafkaClusterCredentialsArgs
    ///             {
    ///                 Key = app_manager_destination_cluster_api_key.Id,
    ///                 Secret = app_manager_destination_cluster_api_key.Secret,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Getting Started
    /// 
    /// The following end-to-end examples might help to get started with `confluentcloud.KafkaMirrorTopic` resource:
    ///   * destination-initiated-cluster-link-rbac: An example of setting up a _destination_ initiated cluster link with a mirror topic
    ///   * source-initiated-cluster-link-rbac: An example of setting up a _source_ initiated cluster link with a mirror topic
    /// 
    /// See [Mirror Topics on Confluent Cloud](https://docs.confluent.io/cloud/current/multi-cloud/cluster-linking/mirror-topics-cc.html) to learn more about Mirror Topics on Confluent Cloud.
    /// 
    /// ## Import
    /// 
    /// You can import a Kafka mirror topic by using the Kafka cluster ID, cluster link name, and Kafka topic name in the format `&lt;Kafka cluster ID&gt;/&lt;Cluster link name&gt;/&lt;Kafka topic name&gt;`, for example:
    /// 
    /// $ export IMPORT_KAFKA_API_KEY="&lt;kafka_api_key&gt;"
    /// 
    /// $ export IMPORT_KAFKA_API_SECRET="&lt;kafka_api_secret&gt;"
    /// 
    /// $ export IMPORT_KAFKA_REST_ENDPOINT="&lt;kafka_rest_endpoint&gt;"
    /// 
    /// ```sh
    /// $ pulumi import confluentcloud:index/kafkaMirrorTopic:KafkaMirrorTopic my_mirror_topic lkc-abc123/my-cluster-link/orders-123
    /// ```
    /// 
    /// !&gt; **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
    /// </summary>
    [ConfluentCloudResourceType("confluentcloud:index/kafkaMirrorTopic:KafkaMirrorTopic")]
    public partial class KafkaMirrorTopic : global::Pulumi.CustomResource
    {
        [Output("clusterLink")]
        public Output<Outputs.KafkaMirrorTopicClusterLink> ClusterLink { get; private set; } = null!;

        [Output("kafkaCluster")]
        public Output<Outputs.KafkaMirrorTopicKafkaCluster> KafkaCluster { get; private set; } = null!;

        /// <summary>
        /// The name of the mirror topic. Only required when there is a prefix configured on the cluster link. For example, when `&lt;prefix&gt;` is configured for the cluster link, the mirror topic name has to be of the format `&lt;prefix&gt;&lt;source_topic_name&gt;`.
        /// </summary>
        [Output("mirrorTopicName")]
        public Output<string> MirrorTopicName { get; private set; } = null!;

        [Output("sourceKafkaTopic")]
        public Output<Outputs.KafkaMirrorTopicSourceKafkaTopic> SourceKafkaTopic { get; private set; } = null!;

        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a KafkaMirrorTopic resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KafkaMirrorTopic(string name, KafkaMirrorTopicArgs args, CustomResourceOptions? options = null)
            : base("confluentcloud:index/kafkaMirrorTopic:KafkaMirrorTopic", name, args ?? new KafkaMirrorTopicArgs(), MakeResourceOptions(options, ""))
        {
        }

        private KafkaMirrorTopic(string name, Input<string> id, KafkaMirrorTopicState? state = null, CustomResourceOptions? options = null)
            : base("confluentcloud:index/kafkaMirrorTopic:KafkaMirrorTopic", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KafkaMirrorTopic resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KafkaMirrorTopic Get(string name, Input<string> id, KafkaMirrorTopicState? state = null, CustomResourceOptions? options = null)
        {
            return new KafkaMirrorTopic(name, id, state, options);
        }
    }

    public sealed class KafkaMirrorTopicArgs : global::Pulumi.ResourceArgs
    {
        [Input("clusterLink", required: true)]
        public Input<Inputs.KafkaMirrorTopicClusterLinkArgs> ClusterLink { get; set; } = null!;

        [Input("kafkaCluster", required: true)]
        public Input<Inputs.KafkaMirrorTopicKafkaClusterArgs> KafkaCluster { get; set; } = null!;

        /// <summary>
        /// The name of the mirror topic. Only required when there is a prefix configured on the cluster link. For example, when `&lt;prefix&gt;` is configured for the cluster link, the mirror topic name has to be of the format `&lt;prefix&gt;&lt;source_topic_name&gt;`.
        /// </summary>
        [Input("mirrorTopicName")]
        public Input<string>? MirrorTopicName { get; set; }

        [Input("sourceKafkaTopic", required: true)]
        public Input<Inputs.KafkaMirrorTopicSourceKafkaTopicArgs> SourceKafkaTopic { get; set; } = null!;

        [Input("status")]
        public Input<string>? Status { get; set; }

        public KafkaMirrorTopicArgs()
        {
        }
        public static new KafkaMirrorTopicArgs Empty => new KafkaMirrorTopicArgs();
    }

    public sealed class KafkaMirrorTopicState : global::Pulumi.ResourceArgs
    {
        [Input("clusterLink")]
        public Input<Inputs.KafkaMirrorTopicClusterLinkGetArgs>? ClusterLink { get; set; }

        [Input("kafkaCluster")]
        public Input<Inputs.KafkaMirrorTopicKafkaClusterGetArgs>? KafkaCluster { get; set; }

        /// <summary>
        /// The name of the mirror topic. Only required when there is a prefix configured on the cluster link. For example, when `&lt;prefix&gt;` is configured for the cluster link, the mirror topic name has to be of the format `&lt;prefix&gt;&lt;source_topic_name&gt;`.
        /// </summary>
        [Input("mirrorTopicName")]
        public Input<string>? MirrorTopicName { get; set; }

        [Input("sourceKafkaTopic")]
        public Input<Inputs.KafkaMirrorTopicSourceKafkaTopicGetArgs>? SourceKafkaTopic { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        public KafkaMirrorTopicState()
        {
        }
        public static new KafkaMirrorTopicState Empty => new KafkaMirrorTopicState();
    }
}

// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ConfluentCloud
{
    /// <summary>
    /// ## Import
    /// 
    /// You can import a Provider Integration Authorization by using Environment ID and Provider Integration ID, in the format `&lt;Environment ID&gt;/&lt;Provider Integration ID&gt;`. The following example shows how to import a Provider Integration Authorization:
    /// 
    /// $ export CONFLUENT_CLOUD_API_KEY="&lt;cloud_api_key&gt;"
    /// 
    /// $ export CONFLUENT_CLOUD_API_SECRET="&lt;cloud_api_secret&gt;"
    /// 
    /// ```sh
    /// $ pulumi import confluentcloud:index/providerIntegrationAuthorization:ProviderIntegrationAuthorization main env-abc123/cspi-4xg0q
    /// ```
    /// 
    /// !&gt; **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
    /// </summary>
    [ConfluentCloudResourceType("confluentcloud:index/providerIntegrationAuthorization:ProviderIntegrationAuthorization")]
    public partial class ProviderIntegrationAuthorization : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Optional Configuration Block) Azure-specific configuration details. It supports the following:
        /// </summary>
        [Output("azure")]
        public Output<Outputs.ProviderIntegrationAuthorizationAzure?> Azure { get; private set; } = null!;

        /// <summary>
        /// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
        /// </summary>
        [Output("environment")]
        public Output<Outputs.ProviderIntegrationAuthorizationEnvironment> Environment { get; private set; } = null!;

        /// <summary>
        /// (Optional Configuration Block) GCP-specific configuration details. It supports the following:
        /// </summary>
        [Output("gcp")]
        public Output<Outputs.ProviderIntegrationAuthorizationGcp?> Gcp { get; private set; } = null!;

        /// <summary>
        /// The ID of the provider integration to authorize.
        /// </summary>
        [Output("providerIntegrationId")]
        public Output<string> ProviderIntegrationId { get; private set; } = null!;


        /// <summary>
        /// Create a ProviderIntegrationAuthorization resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProviderIntegrationAuthorization(string name, ProviderIntegrationAuthorizationArgs args, CustomResourceOptions? options = null)
            : base("confluentcloud:index/providerIntegrationAuthorization:ProviderIntegrationAuthorization", name, args ?? new ProviderIntegrationAuthorizationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProviderIntegrationAuthorization(string name, Input<string> id, ProviderIntegrationAuthorizationState? state = null, CustomResourceOptions? options = null)
            : base("confluentcloud:index/providerIntegrationAuthorization:ProviderIntegrationAuthorization", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProviderIntegrationAuthorization resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProviderIntegrationAuthorization Get(string name, Input<string> id, ProviderIntegrationAuthorizationState? state = null, CustomResourceOptions? options = null)
        {
            return new ProviderIntegrationAuthorization(name, id, state, options);
        }
    }

    public sealed class ProviderIntegrationAuthorizationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Optional Configuration Block) Azure-specific configuration details. It supports the following:
        /// </summary>
        [Input("azure")]
        public Input<Inputs.ProviderIntegrationAuthorizationAzureArgs>? Azure { get; set; }

        /// <summary>
        /// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
        /// </summary>
        [Input("environment", required: true)]
        public Input<Inputs.ProviderIntegrationAuthorizationEnvironmentArgs> Environment { get; set; } = null!;

        /// <summary>
        /// (Optional Configuration Block) GCP-specific configuration details. It supports the following:
        /// </summary>
        [Input("gcp")]
        public Input<Inputs.ProviderIntegrationAuthorizationGcpArgs>? Gcp { get; set; }

        /// <summary>
        /// The ID of the provider integration to authorize.
        /// </summary>
        [Input("providerIntegrationId", required: true)]
        public Input<string> ProviderIntegrationId { get; set; } = null!;

        public ProviderIntegrationAuthorizationArgs()
        {
        }
        public static new ProviderIntegrationAuthorizationArgs Empty => new ProviderIntegrationAuthorizationArgs();
    }

    public sealed class ProviderIntegrationAuthorizationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Optional Configuration Block) Azure-specific configuration details. It supports the following:
        /// </summary>
        [Input("azure")]
        public Input<Inputs.ProviderIntegrationAuthorizationAzureGetArgs>? Azure { get; set; }

        /// <summary>
        /// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
        /// </summary>
        [Input("environment")]
        public Input<Inputs.ProviderIntegrationAuthorizationEnvironmentGetArgs>? Environment { get; set; }

        /// <summary>
        /// (Optional Configuration Block) GCP-specific configuration details. It supports the following:
        /// </summary>
        [Input("gcp")]
        public Input<Inputs.ProviderIntegrationAuthorizationGcpGetArgs>? Gcp { get; set; }

        /// <summary>
        /// The ID of the provider integration to authorize.
        /// </summary>
        [Input("providerIntegrationId")]
        public Input<string>? ProviderIntegrationId { get; set; }

        public ProviderIntegrationAuthorizationState()
        {
        }
        public static new ProviderIntegrationAuthorizationState Empty => new ProviderIntegrationAuthorizationState();
    }
}

// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ConfluentCloud
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using ConfluentCloud = Pulumi.ConfluentCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var source = new ConfluentCloud.CustomConnectorPluginVersion("source", new()
    ///     {
    ///         Version = "v1.2.4",
    ///         Cloud = "AWS",
    ///         DocumentationLink = "https://www.confluent.io/hub/confluentinc/kafka-connect-datagen",
    ///         ConnectorClasses = new[]
    ///         {
    ///             new ConfluentCloud.Inputs.CustomConnectorPluginVersionConnectorClassArgs
    ///             {
    ///                 ConnectorClassName = "io.confluent.kafka.connect.datagen.DatagenConnector",
    ///                 ConnectorType = "SOURCE",
    ///             },
    ///         },
    ///         SensitiveConfigProperties = new[] {},
    ///         Filename = "confluentinc-kafka-connect-datagen-0.6.2.zip",
    ///         PluginId = "ccp-dev-123",
    ///         Environment = new ConfluentCloud.Inputs.CustomConnectorPluginVersionEnvironmentArgs
    ///         {
    ///             Id = "env-devc0k7oxp",
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             plugin,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// You can import a Custom Connector Plugin by using a Custom Connector Plugin ID, in the format `&lt;Environment ID&gt;/&lt;Plugin ID&gt;/&lt;Version ID&gt;`. The following example shows how to import a Custom Connector Plugin:
    /// 
    /// $ export CONFLUENT_CLOUD_API_KEY="&lt;cloud_api_key&gt;"
    /// 
    /// $ export CONFLUENT_CLOUD_API_SECRET="&lt;cloud_api_secret&gt;"
    /// 
    /// ```sh
    /// $ pulumi import confluentcloud:index/customConnectorPluginVersion:CustomConnectorPluginVersion main env-123/plug-123/ccp-ver123xyz
    /// ```
    /// 
    /// !&gt; **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
    /// </summary>
    [ConfluentCloudResourceType("confluentcloud:index/customConnectorPluginVersion:CustomConnectorPluginVersion")]
    public partial class CustomConnectorPluginVersion : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Required String) The API Version of the schema version of the plugin version, for example, `ccpm/v1`.
        /// </summary>
        [Output("apiVersion")]
        public Output<string> ApiVersion { get; private set; } = null!;

        /// <summary>
        /// Cloud provider where the Custom Connector Plugin Version archive is uploaded. Accepted values are: `AWS`, `AZURE`, `GCP`.
        /// </summary>
        [Output("cloud")]
        public Output<string> Cloud { get; private set; } = null!;

        /// <summary>
        /// The Java class name or alias for the connector. You can get the connector class from the connector documentation provided by the developer.
        /// </summary>
        [Output("connectorClasses")]
        public Output<ImmutableArray<Outputs.CustomConnectorPluginVersionConnectorClass>> ConnectorClasses { get; private set; } = null!;

        /// <summary>
        /// The documentation link of the Custom Connector Plugin Version.
        /// </summary>
        [Output("documentationLink")]
        public Output<string?> DocumentationLink { get; private set; } = null!;

        /// <summary>
        /// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
        /// </summary>
        [Output("environment")]
        public Output<Outputs.CustomConnectorPluginVersionEnvironment> Environment { get; private set; } = null!;

        /// <summary>
        /// The path to the Custom Connector Plugin Version archive to be uploaded. Accepted archive formats are: `.jar`, `.zip`.
        /// </summary>
        [Output("filename")]
        public Output<string> Filename { get; private set; } = null!;

        /// <summary>
        /// (Required String) The kind of the Plugin Version, for example, `CustomConnectPluginVersion`.
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// The ID of the plugin created using `confluentcloud.Plugin` resource, or through other ways.
        /// </summary>
        [Output("pluginId")]
        public Output<string> PluginId { get; private set; } = null!;

        /// <summary>
        /// The list of sensitive properties. A sensitive property is a connector configuration property that must be hidden after a user enters the property value when setting up the connector, for example, passwords, keys, and tokens. Refer to the developer documentation and add all required and optional sensitive properties that a user could potentially configure for the connector. Marking a property as sensitive ensures that these fields are handled appropriately within the Confluent infrastructure. This includes masking fields, for example in exception logging, and encrypting field values in the underlying data store. You must identify all sensitive properties. Failure to identify sensitive properties can result in the sensitive property value being stored in plain text rather than in encrypted format. Only add connector-specific sensitive properties. Kafka keys, passwords, and service account information should not be entered here.
        /// </summary>
        [Output("sensitiveConfigProperties")]
        public Output<ImmutableArray<string>> SensitiveConfigProperties { get; private set; } = null!;

        /// <summary>
        /// The version number of the plugin version we want to create. This must start with the character `v` and follow semantic versioning.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a CustomConnectorPluginVersion resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CustomConnectorPluginVersion(string name, CustomConnectorPluginVersionArgs args, CustomResourceOptions? options = null)
            : base("confluentcloud:index/customConnectorPluginVersion:CustomConnectorPluginVersion", name, args ?? new CustomConnectorPluginVersionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CustomConnectorPluginVersion(string name, Input<string> id, CustomConnectorPluginVersionState? state = null, CustomResourceOptions? options = null)
            : base("confluentcloud:index/customConnectorPluginVersion:CustomConnectorPluginVersion", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CustomConnectorPluginVersion resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CustomConnectorPluginVersion Get(string name, Input<string> id, CustomConnectorPluginVersionState? state = null, CustomResourceOptions? options = null)
        {
            return new CustomConnectorPluginVersion(name, id, state, options);
        }
    }

    public sealed class CustomConnectorPluginVersionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cloud provider where the Custom Connector Plugin Version archive is uploaded. Accepted values are: `AWS`, `AZURE`, `GCP`.
        /// </summary>
        [Input("cloud", required: true)]
        public Input<string> Cloud { get; set; } = null!;

        [Input("connectorClasses", required: true)]
        private InputList<Inputs.CustomConnectorPluginVersionConnectorClassArgs>? _connectorClasses;

        /// <summary>
        /// The Java class name or alias for the connector. You can get the connector class from the connector documentation provided by the developer.
        /// </summary>
        public InputList<Inputs.CustomConnectorPluginVersionConnectorClassArgs> ConnectorClasses
        {
            get => _connectorClasses ?? (_connectorClasses = new InputList<Inputs.CustomConnectorPluginVersionConnectorClassArgs>());
            set => _connectorClasses = value;
        }

        /// <summary>
        /// The documentation link of the Custom Connector Plugin Version.
        /// </summary>
        [Input("documentationLink")]
        public Input<string>? DocumentationLink { get; set; }

        /// <summary>
        /// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
        /// </summary>
        [Input("environment", required: true)]
        public Input<Inputs.CustomConnectorPluginVersionEnvironmentArgs> Environment { get; set; } = null!;

        /// <summary>
        /// The path to the Custom Connector Plugin Version archive to be uploaded. Accepted archive formats are: `.jar`, `.zip`.
        /// </summary>
        [Input("filename", required: true)]
        public Input<string> Filename { get; set; } = null!;

        /// <summary>
        /// The ID of the plugin created using `confluentcloud.Plugin` resource, or through other ways.
        /// </summary>
        [Input("pluginId", required: true)]
        public Input<string> PluginId { get; set; } = null!;

        [Input("sensitiveConfigProperties")]
        private InputList<string>? _sensitiveConfigProperties;

        /// <summary>
        /// The list of sensitive properties. A sensitive property is a connector configuration property that must be hidden after a user enters the property value when setting up the connector, for example, passwords, keys, and tokens. Refer to the developer documentation and add all required and optional sensitive properties that a user could potentially configure for the connector. Marking a property as sensitive ensures that these fields are handled appropriately within the Confluent infrastructure. This includes masking fields, for example in exception logging, and encrypting field values in the underlying data store. You must identify all sensitive properties. Failure to identify sensitive properties can result in the sensitive property value being stored in plain text rather than in encrypted format. Only add connector-specific sensitive properties. Kafka keys, passwords, and service account information should not be entered here.
        /// </summary>
        public InputList<string> SensitiveConfigProperties
        {
            get => _sensitiveConfigProperties ?? (_sensitiveConfigProperties = new InputList<string>());
            set => _sensitiveConfigProperties = value;
        }

        /// <summary>
        /// The version number of the plugin version we want to create. This must start with the character `v` and follow semantic versioning.
        /// </summary>
        [Input("version", required: true)]
        public Input<string> Version { get; set; } = null!;

        public CustomConnectorPluginVersionArgs()
        {
        }
        public static new CustomConnectorPluginVersionArgs Empty => new CustomConnectorPluginVersionArgs();
    }

    public sealed class CustomConnectorPluginVersionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Required String) The API Version of the schema version of the plugin version, for example, `ccpm/v1`.
        /// </summary>
        [Input("apiVersion")]
        public Input<string>? ApiVersion { get; set; }

        /// <summary>
        /// Cloud provider where the Custom Connector Plugin Version archive is uploaded. Accepted values are: `AWS`, `AZURE`, `GCP`.
        /// </summary>
        [Input("cloud")]
        public Input<string>? Cloud { get; set; }

        [Input("connectorClasses")]
        private InputList<Inputs.CustomConnectorPluginVersionConnectorClassGetArgs>? _connectorClasses;

        /// <summary>
        /// The Java class name or alias for the connector. You can get the connector class from the connector documentation provided by the developer.
        /// </summary>
        public InputList<Inputs.CustomConnectorPluginVersionConnectorClassGetArgs> ConnectorClasses
        {
            get => _connectorClasses ?? (_connectorClasses = new InputList<Inputs.CustomConnectorPluginVersionConnectorClassGetArgs>());
            set => _connectorClasses = value;
        }

        /// <summary>
        /// The documentation link of the Custom Connector Plugin Version.
        /// </summary>
        [Input("documentationLink")]
        public Input<string>? DocumentationLink { get; set; }

        /// <summary>
        /// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
        /// </summary>
        [Input("environment")]
        public Input<Inputs.CustomConnectorPluginVersionEnvironmentGetArgs>? Environment { get; set; }

        /// <summary>
        /// The path to the Custom Connector Plugin Version archive to be uploaded. Accepted archive formats are: `.jar`, `.zip`.
        /// </summary>
        [Input("filename")]
        public Input<string>? Filename { get; set; }

        /// <summary>
        /// (Required String) The kind of the Plugin Version, for example, `CustomConnectPluginVersion`.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// The ID of the plugin created using `confluentcloud.Plugin` resource, or through other ways.
        /// </summary>
        [Input("pluginId")]
        public Input<string>? PluginId { get; set; }

        [Input("sensitiveConfigProperties")]
        private InputList<string>? _sensitiveConfigProperties;

        /// <summary>
        /// The list of sensitive properties. A sensitive property is a connector configuration property that must be hidden after a user enters the property value when setting up the connector, for example, passwords, keys, and tokens. Refer to the developer documentation and add all required and optional sensitive properties that a user could potentially configure for the connector. Marking a property as sensitive ensures that these fields are handled appropriately within the Confluent infrastructure. This includes masking fields, for example in exception logging, and encrypting field values in the underlying data store. You must identify all sensitive properties. Failure to identify sensitive properties can result in the sensitive property value being stored in plain text rather than in encrypted format. Only add connector-specific sensitive properties. Kafka keys, passwords, and service account information should not be entered here.
        /// </summary>
        public InputList<string> SensitiveConfigProperties
        {
            get => _sensitiveConfigProperties ?? (_sensitiveConfigProperties = new InputList<string>());
            set => _sensitiveConfigProperties = value;
        }

        /// <summary>
        /// The version number of the plugin version we want to create. This must start with the character `v` and follow semantic versioning.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public CustomConnectorPluginVersionState()
        {
        }
        public static new CustomConnectorPluginVersionState Empty => new CustomConnectorPluginVersionState();
    }
}

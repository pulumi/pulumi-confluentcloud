// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ConfluentCloud
{
    /// <summary>
    /// ## Import
    /// 
    /// You can import a connector by using Environment ID, Kafka cluster ID, and connector's name, in the format `&lt;Environment ID&gt;/&lt;Kafka cluster ID&gt;/&lt;Connector name&gt;`, for example$ export CONFLUENT_CLOUD_API_KEY="&lt;cloud_api_key&gt;" $ export CONFLUENT_CLOUD_API_SECRET="&lt;cloud_api_secret&gt;"
    /// 
    /// ```sh
    ///  $ pulumi import confluentcloud:index/connector:Connector my_connector "env-abc123/lkc-abc123/S3_SINKConnector_0"
    /// ```
    /// </summary>
    [ConfluentCloudResourceType("confluentcloud:index/connector:Connector")]
    public partial class Connector : Pulumi.CustomResource
    {
        /// <summary>
        /// The custom connector _nonsensitive_ configuration settings to set:
        /// </summary>
        [Output("configNonsensitive")]
        public Output<ImmutableDictionary<string, string>> ConfigNonsensitive { get; private set; } = null!;

        /// <summary>
        /// The custom connector _sensitive_ configuration settings to set:
        /// </summary>
        [Output("configSensitive")]
        public Output<ImmutableDictionary<string, string>> ConfigSensitive { get; private set; } = null!;

        /// <summary>
        /// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
        /// </summary>
        [Output("environment")]
        public Output<Outputs.ConnectorEnvironment> Environment { get; private set; } = null!;

        [Output("kafkaCluster")]
        public Output<Outputs.ConnectorKafkaCluster> KafkaCluster { get; private set; } = null!;

        /// <summary>
        /// The status of the connector (one of `"NONE"`, `"PROVISIONING"`, `"RUNNING"`, `"DEGRADED"`, `"FAILED"`, `"PAUSED"`, `"DELETED"`). Pausing (`"RUNNING" &gt; "PAUSED"`) and resuming (`"PAUSED" &gt; "RUNNING"`) a connector is supported via an update operation.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a Connector resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Connector(string name, ConnectorArgs args, CustomResourceOptions? options = null)
            : base("confluentcloud:index/connector:Connector", name, args ?? new ConnectorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Connector(string name, Input<string> id, ConnectorState? state = null, CustomResourceOptions? options = null)
            : base("confluentcloud:index/connector:Connector", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Connector resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Connector Get(string name, Input<string> id, ConnectorState? state = null, CustomResourceOptions? options = null)
        {
            return new Connector(name, id, state, options);
        }
    }

    public sealed class ConnectorArgs : Pulumi.ResourceArgs
    {
        [Input("configNonsensitive", required: true)]
        private InputMap<string>? _configNonsensitive;

        /// <summary>
        /// The custom connector _nonsensitive_ configuration settings to set:
        /// </summary>
        public InputMap<string> ConfigNonsensitive
        {
            get => _configNonsensitive ?? (_configNonsensitive = new InputMap<string>());
            set => _configNonsensitive = value;
        }

        [Input("configSensitive")]
        private InputMap<string>? _configSensitive;

        /// <summary>
        /// The custom connector _sensitive_ configuration settings to set:
        /// </summary>
        public InputMap<string> ConfigSensitive
        {
            get => _configSensitive ?? (_configSensitive = new InputMap<string>());
            set => _configSensitive = value;
        }

        /// <summary>
        /// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
        /// </summary>
        [Input("environment", required: true)]
        public Input<Inputs.ConnectorEnvironmentArgs> Environment { get; set; } = null!;

        [Input("kafkaCluster", required: true)]
        public Input<Inputs.ConnectorKafkaClusterArgs> KafkaCluster { get; set; } = null!;

        /// <summary>
        /// The status of the connector (one of `"NONE"`, `"PROVISIONING"`, `"RUNNING"`, `"DEGRADED"`, `"FAILED"`, `"PAUSED"`, `"DELETED"`). Pausing (`"RUNNING" &gt; "PAUSED"`) and resuming (`"PAUSED" &gt; "RUNNING"`) a connector is supported via an update operation.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public ConnectorArgs()
        {
        }
    }

    public sealed class ConnectorState : Pulumi.ResourceArgs
    {
        [Input("configNonsensitive")]
        private InputMap<string>? _configNonsensitive;

        /// <summary>
        /// The custom connector _nonsensitive_ configuration settings to set:
        /// </summary>
        public InputMap<string> ConfigNonsensitive
        {
            get => _configNonsensitive ?? (_configNonsensitive = new InputMap<string>());
            set => _configNonsensitive = value;
        }

        [Input("configSensitive")]
        private InputMap<string>? _configSensitive;

        /// <summary>
        /// The custom connector _sensitive_ configuration settings to set:
        /// </summary>
        public InputMap<string> ConfigSensitive
        {
            get => _configSensitive ?? (_configSensitive = new InputMap<string>());
            set => _configSensitive = value;
        }

        /// <summary>
        /// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
        /// </summary>
        [Input("environment")]
        public Input<Inputs.ConnectorEnvironmentGetArgs>? Environment { get; set; }

        [Input("kafkaCluster")]
        public Input<Inputs.ConnectorKafkaClusterGetArgs>? KafkaCluster { get; set; }

        /// <summary>
        /// The status of the connector (one of `"NONE"`, `"PROVISIONING"`, `"RUNNING"`, `"DEGRADED"`, `"FAILED"`, `"PAUSED"`, `"DELETED"`). Pausing (`"RUNNING" &gt; "PAUSED"`) and resuming (`"PAUSED" &gt; "RUNNING"`) a connector is supported via an update operation.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public ConnectorState()
        {
        }
    }
}

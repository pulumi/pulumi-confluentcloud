// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ConfluentCloud
{
    public static class GetUser
    {
        /// <summary>
        /// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// `confluentcloud.getUser` describes a User data source.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleUsingIdUser = ConfluentCloud.GetUser.Invoke(new()
        ///     {
        ///         Id = "u-abc123",
        ///     });
        /// 
        ///     var exampleUsingEmail = ConfluentCloud.GetUser.Invoke(new()
        ///     {
        ///         Email = "test123@gmail.com",
        ///     });
        /// 
        ///     var test_env = new ConfluentCloud.Environment("test-env");
        /// 
        ///     var standard_cluster_on_aws = new ConfluentCloud.KafkaCluster("standard-cluster-on-aws", new()
        ///     {
        ///         Availability = "SINGLE_ZONE",
        ///         Cloud = "AWS",
        ///         Region = "us-west-2",
        ///         Standard = null,
        ///         Environment = new ConfluentCloud.Inputs.KafkaClusterEnvironmentArgs
        ///         {
        ///             Id = test_env.Id,
        ///         },
        ///     });
        /// 
        ///     var test_role_binding = new ConfluentCloud.RoleBinding("test-role-binding", new()
        ///     {
        ///         Principal = $"User:{exampleUsingEmail.Apply(getUserResult =&gt; getUserResult.Id)}",
        ///         RoleName = "CloudClusterAdmin",
        ///         CrnPattern = standard_cluster_on_aws.RbacCrn,
        ///     });
        /// 
        ///     var exampleUsingFullName = ConfluentCloud.GetUser.Invoke(new()
        ///     {
        ///         FullName = "John Doe",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["exampleUsingId"] = exampleUsingIdUser,
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetUserResult> InvokeAsync(GetUserArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUserResult>("confluentcloud:index/getUser:getUser", args ?? new GetUserArgs(), options.WithDefaults());

        /// <summary>
        /// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// `confluentcloud.getUser` describes a User data source.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleUsingIdUser = ConfluentCloud.GetUser.Invoke(new()
        ///     {
        ///         Id = "u-abc123",
        ///     });
        /// 
        ///     var exampleUsingEmail = ConfluentCloud.GetUser.Invoke(new()
        ///     {
        ///         Email = "test123@gmail.com",
        ///     });
        /// 
        ///     var test_env = new ConfluentCloud.Environment("test-env");
        /// 
        ///     var standard_cluster_on_aws = new ConfluentCloud.KafkaCluster("standard-cluster-on-aws", new()
        ///     {
        ///         Availability = "SINGLE_ZONE",
        ///         Cloud = "AWS",
        ///         Region = "us-west-2",
        ///         Standard = null,
        ///         Environment = new ConfluentCloud.Inputs.KafkaClusterEnvironmentArgs
        ///         {
        ///             Id = test_env.Id,
        ///         },
        ///     });
        /// 
        ///     var test_role_binding = new ConfluentCloud.RoleBinding("test-role-binding", new()
        ///     {
        ///         Principal = $"User:{exampleUsingEmail.Apply(getUserResult =&gt; getUserResult.Id)}",
        ///         RoleName = "CloudClusterAdmin",
        ///         CrnPattern = standard_cluster_on_aws.RbacCrn,
        ///     });
        /// 
        ///     var exampleUsingFullName = ConfluentCloud.GetUser.Invoke(new()
        ///     {
        ///         FullName = "John Doe",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["exampleUsingId"] = exampleUsingIdUser,
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetUserResult> Invoke(GetUserInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserResult>("confluentcloud:index/getUser:getUser", args ?? new GetUserInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUserArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The email address of the User.
        /// 
        /// &gt; **Note:** Exactly one from the `id`, `full_name` and `email` attributes must be specified.
        /// </summary>
        [Input("email")]
        public string? Email { get; set; }

        /// <summary>
        /// The full name of the User.
        /// </summary>
        [Input("fullName")]
        public string? FullName { get; set; }

        /// <summary>
        /// The ID of the User (e.g., `u-abc123`).
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        public GetUserArgs()
        {
        }
        public static new GetUserArgs Empty => new GetUserArgs();
    }

    public sealed class GetUserInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The email address of the User.
        /// 
        /// &gt; **Note:** Exactly one from the `id`, `full_name` and `email` attributes must be specified.
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        /// <summary>
        /// The full name of the User.
        /// </summary>
        [Input("fullName")]
        public Input<string>? FullName { get; set; }

        /// <summary>
        /// The ID of the User (e.g., `u-abc123`).
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        public GetUserInvokeArgs()
        {
        }
        public static new GetUserInvokeArgs Empty => new GetUserInvokeArgs();
    }


    [OutputType]
    public sealed class GetUserResult
    {
        /// <summary>
        /// (Required String) An API Version of the schema version of the User.
        /// </summary>
        public readonly string ApiVersion;
        /// <summary>
        /// (Required String) The email address of the User.
        /// </summary>
        public readonly string Email;
        /// <summary>
        /// (Required String) The full name of the User.
        /// </summary>
        public readonly string FullName;
        /// <summary>
        /// (Required String) The ID of the User, for example, `u-abc123`.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (Required String) A kind of the User.
        /// </summary>
        public readonly string Kind;

        [OutputConstructor]
        private GetUserResult(
            string apiVersion,

            string email,

            string fullName,

            string id,

            string kind)
        {
            ApiVersion = apiVersion;
            Email = email;
            FullName = fullName;
            Id = id;
            Kind = kind;
        }
    }
}

// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ConfluentCloud
{
    public static class GetCatalogIntegration
    {
        /// <summary>
        /// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// `confluentcloud.CatalogIntegration` describes a Catalog Integration data source.
        /// 
        /// ## Example Usage
        /// </summary>
        public static Task<GetCatalogIntegrationResult> InvokeAsync(GetCatalogIntegrationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCatalogIntegrationResult>("confluentcloud:index/getCatalogIntegration:getCatalogIntegration", args ?? new GetCatalogIntegrationArgs(), options.WithDefaults());

        /// <summary>
        /// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// `confluentcloud.CatalogIntegration` describes a Catalog Integration data source.
        /// 
        /// ## Example Usage
        /// </summary>
        public static Output<GetCatalogIntegrationResult> Invoke(GetCatalogIntegrationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCatalogIntegrationResult>("confluentcloud:index/getCatalogIntegration:getCatalogIntegration", args ?? new GetCatalogIntegrationInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// `confluentcloud.CatalogIntegration` describes a Catalog Integration data source.
        /// 
        /// ## Example Usage
        /// </summary>
        public static Output<GetCatalogIntegrationResult> Invoke(GetCatalogIntegrationInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCatalogIntegrationResult>("confluentcloud:index/getCatalogIntegration:getCatalogIntegration", args ?? new GetCatalogIntegrationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCatalogIntegrationArgs : global::Pulumi.InvokeArgs
    {
        [Input("credentials")]
        private Inputs.GetCatalogIntegrationCredentialsArgs? _credentials;
        public Inputs.GetCatalogIntegrationCredentialsArgs? Credentials
        {
            get => _credentials;
            set => _credentials = value;
        }

        [Input("environment", required: true)]
        public Inputs.GetCatalogIntegrationEnvironmentArgs Environment { get; set; } = null!;

        /// <summary>
        /// The ID of the Catalog Integration, for example, `tci-abc123`.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        [Input("kafkaCluster", required: true)]
        public Inputs.GetCatalogIntegrationKafkaClusterArgs KafkaCluster { get; set; } = null!;

        public GetCatalogIntegrationArgs()
        {
        }
        public static new GetCatalogIntegrationArgs Empty => new GetCatalogIntegrationArgs();
    }

    public sealed class GetCatalogIntegrationInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("credentials")]
        private Input<Inputs.GetCatalogIntegrationCredentialsInputArgs>? _credentials;
        public Input<Inputs.GetCatalogIntegrationCredentialsInputArgs>? Credentials
        {
            get => _credentials;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _credentials = Output.Tuple<Input<Inputs.GetCatalogIntegrationCredentialsInputArgs>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("environment", required: true)]
        public Input<Inputs.GetCatalogIntegrationEnvironmentInputArgs> Environment { get; set; } = null!;

        /// <summary>
        /// The ID of the Catalog Integration, for example, `tci-abc123`.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        [Input("kafkaCluster", required: true)]
        public Input<Inputs.GetCatalogIntegrationKafkaClusterInputArgs> KafkaCluster { get; set; } = null!;

        public GetCatalogIntegrationInvokeArgs()
        {
        }
        public static new GetCatalogIntegrationInvokeArgs Empty => new GetCatalogIntegrationInvokeArgs();
    }


    [OutputType]
    public sealed class GetCatalogIntegrationResult
    {
        /// <summary>
        /// (Optional Configuration Block) supports the following:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCatalogIntegrationAwsGlueResult> AwsGlues;
        public readonly Outputs.GetCatalogIntegrationCredentialsResult? Credentials;
        /// <summary>
        /// (Required String) The name of the catalog integration.
        /// </summary>
        public readonly string DisplayName;
        public readonly Outputs.GetCatalogIntegrationEnvironmentResult Environment;
        public readonly string Id;
        public readonly Outputs.GetCatalogIntegrationKafkaClusterResult KafkaCluster;
        /// <summary>
        /// (Optional Configuration Block) supports the following:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCatalogIntegrationSnowflakeResult> Snowflakes;
        /// <summary>
        /// (Optional Boolean) Indicates whether the Catalog Integration should be suspended.
        /// </summary>
        public readonly bool Suspended;

        [OutputConstructor]
        private GetCatalogIntegrationResult(
            ImmutableArray<Outputs.GetCatalogIntegrationAwsGlueResult> awsGlues,

            Outputs.GetCatalogIntegrationCredentialsResult? credentials,

            string displayName,

            Outputs.GetCatalogIntegrationEnvironmentResult environment,

            string id,

            Outputs.GetCatalogIntegrationKafkaClusterResult kafkaCluster,

            ImmutableArray<Outputs.GetCatalogIntegrationSnowflakeResult> snowflakes,

            bool suspended)
        {
            AwsGlues = awsGlues;
            Credentials = credentials;
            DisplayName = displayName;
            Environment = environment;
            Id = id;
            KafkaCluster = kafkaCluster;
            Snowflakes = snowflakes;
            Suspended = suspended;
        }
    }
}

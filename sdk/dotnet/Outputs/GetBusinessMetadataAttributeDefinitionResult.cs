// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ConfluentCloud.Outputs
{

    [OutputType]
    public sealed class GetBusinessMetadataAttributeDefinitionResult
    {
        /// <summary>
        /// (Optional String) The default value of this attribute.
        /// </summary>
        public readonly string DefaultValue;
        /// <summary>
        /// (Optional String) The description of this attribute.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// (Optional Boolean) An optional flag to control whether the attribute should be optional or required.
        /// </summary>
        public readonly bool IsOptional;
        /// <summary>
        /// The name of the Business Metadata, for example, `PII`. The name must not be empty and consist of a letter followed by a sequence of letter, number, space, or _ characters.
        /// 
        /// &gt; **Note:** A Schema Registry API key consists of a key and a secret. Schema Registry API keys are required to interact with Schema Registry clusters in Confluent Cloud. Each Schema Registry API key is valid for one specific Schema Registry cluster.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// (Optional Map) Block for the attribute options:
        /// </summary>
        public readonly ImmutableDictionary<string, string> Options;
        /// <summary>
        /// (Required String) The type of the attribute, it always returns `string`.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetBusinessMetadataAttributeDefinitionResult(
            string defaultValue,

            string description,

            bool isOptional,

            string name,

            ImmutableDictionary<string, string> options,

            string type)
        {
            DefaultValue = defaultValue;
            Description = description;
            IsOptional = isOptional;
            Name = name;
            Options = options;
            Type = type;
        }
    }
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ConfluentCloud
{
    public static class GetSchemaRegistryRegion
    {
        /// <summary>
        /// [![Open Preview](https://img.shields.io/badge/Lifecycle%20Stage-Open%20Preview-%2300afba)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// &gt; **Note:** `confluentcloud.getSchemaRegistryRegion` data source is available in **Open Preview** for early adopters. Open Preview features are introduced to gather customer feedback. This feature should be used only for evaluation and non-production testing purposes or to provide feedback to Confluent, particularly as it becomes more widely available in follow-on editions.  
        /// **Open Preview** features are intended for evaluation use in development and testing environments only, and not for production use. The warranty, SLA, and Support Services provisions of your agreement with Confluent do not apply to Open Preview features. Open Preview features are considered to be a Proof of Concept as defined in the Confluent Cloud Terms of Service. Confluent may discontinue providing preview releases of the Open Preview features at any time in Confluent’s sole discretion.
        /// 
        /// `confluentcloud.getSchemaRegistryRegion` describes a Schema Registry cluster data source.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleSchemaRegistryRegion = ConfluentCloud.GetSchemaRegistryRegion.Invoke(new()
        ///     {
        ///         Cloud = "AWS",
        ///         Region = "us-east-2",
        ///         Package = "ESSENTIALS",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["example"] = exampleSchemaRegistryRegion.Apply(getSchemaRegistryRegionResult =&gt; getSchemaRegistryRegionResult),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSchemaRegistryRegionResult> InvokeAsync(GetSchemaRegistryRegionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSchemaRegistryRegionResult>("confluentcloud:index/getSchemaRegistryRegion:getSchemaRegistryRegion", args ?? new GetSchemaRegistryRegionArgs(), options.WithDefaults());

        /// <summary>
        /// [![Open Preview](https://img.shields.io/badge/Lifecycle%20Stage-Open%20Preview-%2300afba)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// &gt; **Note:** `confluentcloud.getSchemaRegistryRegion` data source is available in **Open Preview** for early adopters. Open Preview features are introduced to gather customer feedback. This feature should be used only for evaluation and non-production testing purposes or to provide feedback to Confluent, particularly as it becomes more widely available in follow-on editions.  
        /// **Open Preview** features are intended for evaluation use in development and testing environments only, and not for production use. The warranty, SLA, and Support Services provisions of your agreement with Confluent do not apply to Open Preview features. Open Preview features are considered to be a Proof of Concept as defined in the Confluent Cloud Terms of Service. Confluent may discontinue providing preview releases of the Open Preview features at any time in Confluent’s sole discretion.
        /// 
        /// `confluentcloud.getSchemaRegistryRegion` describes a Schema Registry cluster data source.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleSchemaRegistryRegion = ConfluentCloud.GetSchemaRegistryRegion.Invoke(new()
        ///     {
        ///         Cloud = "AWS",
        ///         Region = "us-east-2",
        ///         Package = "ESSENTIALS",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["example"] = exampleSchemaRegistryRegion.Apply(getSchemaRegistryRegionResult =&gt; getSchemaRegistryRegionResult),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSchemaRegistryRegionResult> Invoke(GetSchemaRegistryRegionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSchemaRegistryRegionResult>("confluentcloud:index/getSchemaRegistryRegion:getSchemaRegistryRegion", args ?? new GetSchemaRegistryRegionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSchemaRegistryRegionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The cloud service provider that hosts the region. Accepted values are: `AWS`, `AZURE`, and `GCP`.
        /// </summary>
        [Input("cloud", required: true)]
        public string Cloud { get; set; } = null!;

        /// <summary>
        /// The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.
        /// </summary>
        [Input("package", required: true)]
        public string Package { get; set; } = null!;

        /// <summary>
        /// The cloud service provider region, for example, `us-east-2`. See [Cloud Providers and Regions](https://docs.confluent.io/cloud/current/clusters/regions.html#cloud-providers-and-regions) for a full list of options for AWS, Azure, and GCP.
        /// </summary>
        [Input("region", required: true)]
        public string Region { get; set; } = null!;

        public GetSchemaRegistryRegionArgs()
        {
        }
        public static new GetSchemaRegistryRegionArgs Empty => new GetSchemaRegistryRegionArgs();
    }

    public sealed class GetSchemaRegistryRegionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The cloud service provider that hosts the region. Accepted values are: `AWS`, `AZURE`, and `GCP`.
        /// </summary>
        [Input("cloud", required: true)]
        public Input<string> Cloud { get; set; } = null!;

        /// <summary>
        /// The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.
        /// </summary>
        [Input("package", required: true)]
        public Input<string> Package { get; set; } = null!;

        /// <summary>
        /// The cloud service provider region, for example, `us-east-2`. See [Cloud Providers and Regions](https://docs.confluent.io/cloud/current/clusters/regions.html#cloud-providers-and-regions) for a full list of options for AWS, Azure, and GCP.
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        public GetSchemaRegistryRegionInvokeArgs()
        {
        }
        public static new GetSchemaRegistryRegionInvokeArgs Empty => new GetSchemaRegistryRegionInvokeArgs();
    }


    [OutputType]
    public sealed class GetSchemaRegistryRegionResult
    {
        public readonly string Cloud;
        /// <summary>
        /// (Required String) The ID of the Schema Registry region, for example, `sgreg-1`.
        /// </summary>
        public readonly string Id;
        public readonly string Package;
        public readonly string Region;

        [OutputConstructor]
        private GetSchemaRegistryRegionResult(
            string cloud,

            string id,

            string package,

            string region)
        {
            Cloud = cloud;
            Id = id;
            Package = package;
            Region = region;
        }
    }
}

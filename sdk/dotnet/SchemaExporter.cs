// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ConfluentCloud
{
    /// <summary>
    /// ## Import
    /// 
    /// You can import a Schema Exporter by using the Schema Registry cluster ID, Schema Exporter name in the format `&lt;Schema Registry cluster ID&gt;/&lt;Schema Exporter name&gt;`, for example:
    /// 
    /// $ export IMPORT_SCHEMA_REGISTRY_API_KEY="&lt;schema_registry_api_key&gt;"
    /// 
    /// $ export IMPORT_SCHEMA_REGISTRY_API_SECRET="&lt;schema_registry_api_secret&gt;"
    /// 
    /// $ export IMPORT_SCHEMA_REGISTRY_REST_ENDPOINT="&lt;schema_registry_rest_endpoint&gt;"
    /// 
    /// ```sh
    /// $ pulumi import confluentcloud:index/schemaExporter:SchemaExporter main lsrc-8wrx70/test-exporter
    /// ```
    /// 
    /// !&gt; **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
    /// </summary>
    [ConfluentCloudResourceType("confluentcloud:index/schemaExporter:SchemaExporter")]
    public partial class SchemaExporter : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Block for custom *nonsensitive* configuration properties:
        /// </summary>
        [Output("config")]
        public Output<ImmutableDictionary<string, string>> Config { get; private set; } = null!;

        /// <summary>
        /// Customized context of the exporter if `context_type` is set to `CUSTOM`.
        /// </summary>
        [Output("context")]
        public Output<string> Context { get; private set; } = null!;

        /// <summary>
        /// Context type of the exporter. Accepted values are: `CUSTOM`, `NONE` or `AUTO`. Defaults to `AUTO`.
        /// </summary>
        [Output("contextType")]
        public Output<string> ContextType { get; private set; } = null!;

        /// <summary>
        /// The Cluster API Credentials.
        /// </summary>
        [Output("credentials")]
        public Output<Outputs.SchemaExporterCredentials?> Credentials { get; private set; } = null!;

        [Output("destinationSchemaRegistryCluster")]
        public Output<Outputs.SchemaExporterDestinationSchemaRegistryCluster> DestinationSchemaRegistryCluster { get; private set; } = null!;

        /// <summary>
        /// The configuration setting name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The flag to control whether to reset the exporter when updating configs. Defaults to `false`.
        /// </summary>
        [Output("resetOnUpdate")]
        public Output<bool?> ResetOnUpdate { get; private set; } = null!;

        /// <summary>
        /// The REST endpoint of the destination Schema Registry cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
        /// </summary>
        [Output("restEndpoint")]
        public Output<string?> RestEndpoint { get; private set; } = null!;

        [Output("schemaRegistryCluster")]
        public Output<Outputs.SchemaExporterSchemaRegistryCluster?> SchemaRegistryCluster { get; private set; } = null!;

        /// <summary>
        /// The status of the schema exporter. Accepted values are: `RUNNING` and `PAUSED`.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Format string for the subject name in the destination cluster, which may contain `${subject}` as a placeholder for the originating subject name. For example, `dc_${subject}` for the subject orders will map to the destination subject name `dc_orders`.
        /// </summary>
        [Output("subjectRenameFormat")]
        public Output<string> SubjectRenameFormat { get; private set; } = null!;

        /// <summary>
        /// Name of each exporter subject.
        /// </summary>
        [Output("subjects")]
        public Output<ImmutableArray<string>> Subjects { get; private set; } = null!;


        /// <summary>
        /// Create a SchemaExporter resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SchemaExporter(string name, SchemaExporterArgs args, CustomResourceOptions? options = null)
            : base("confluentcloud:index/schemaExporter:SchemaExporter", name, args ?? new SchemaExporterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SchemaExporter(string name, Input<string> id, SchemaExporterState? state = null, CustomResourceOptions? options = null)
            : base("confluentcloud:index/schemaExporter:SchemaExporter", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "credentials",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SchemaExporter resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SchemaExporter Get(string name, Input<string> id, SchemaExporterState? state = null, CustomResourceOptions? options = null)
        {
            return new SchemaExporter(name, id, state, options);
        }
    }

    public sealed class SchemaExporterArgs : global::Pulumi.ResourceArgs
    {
        [Input("config")]
        private InputMap<string>? _config;

        /// <summary>
        /// Block for custom *nonsensitive* configuration properties:
        /// </summary>
        public InputMap<string> Config
        {
            get => _config ?? (_config = new InputMap<string>());
            set => _config = value;
        }

        /// <summary>
        /// Customized context of the exporter if `context_type` is set to `CUSTOM`.
        /// </summary>
        [Input("context")]
        public Input<string>? Context { get; set; }

        /// <summary>
        /// Context type of the exporter. Accepted values are: `CUSTOM`, `NONE` or `AUTO`. Defaults to `AUTO`.
        /// </summary>
        [Input("contextType")]
        public Input<string>? ContextType { get; set; }

        [Input("credentials")]
        private Input<Inputs.SchemaExporterCredentialsArgs>? _credentials;

        /// <summary>
        /// The Cluster API Credentials.
        /// </summary>
        public Input<Inputs.SchemaExporterCredentialsArgs>? Credentials
        {
            get => _credentials;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _credentials = Output.Tuple<Input<Inputs.SchemaExporterCredentialsArgs>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("destinationSchemaRegistryCluster", required: true)]
        public Input<Inputs.SchemaExporterDestinationSchemaRegistryClusterArgs> DestinationSchemaRegistryCluster { get; set; } = null!;

        /// <summary>
        /// The configuration setting name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The flag to control whether to reset the exporter when updating configs. Defaults to `false`.
        /// </summary>
        [Input("resetOnUpdate")]
        public Input<bool>? ResetOnUpdate { get; set; }

        /// <summary>
        /// The REST endpoint of the destination Schema Registry cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
        /// </summary>
        [Input("restEndpoint")]
        public Input<string>? RestEndpoint { get; set; }

        [Input("schemaRegistryCluster")]
        public Input<Inputs.SchemaExporterSchemaRegistryClusterArgs>? SchemaRegistryCluster { get; set; }

        /// <summary>
        /// The status of the schema exporter. Accepted values are: `RUNNING` and `PAUSED`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Format string for the subject name in the destination cluster, which may contain `${subject}` as a placeholder for the originating subject name. For example, `dc_${subject}` for the subject orders will map to the destination subject name `dc_orders`.
        /// </summary>
        [Input("subjectRenameFormat")]
        public Input<string>? SubjectRenameFormat { get; set; }

        [Input("subjects")]
        private InputList<string>? _subjects;

        /// <summary>
        /// Name of each exporter subject.
        /// </summary>
        public InputList<string> Subjects
        {
            get => _subjects ?? (_subjects = new InputList<string>());
            set => _subjects = value;
        }

        public SchemaExporterArgs()
        {
        }
        public static new SchemaExporterArgs Empty => new SchemaExporterArgs();
    }

    public sealed class SchemaExporterState : global::Pulumi.ResourceArgs
    {
        [Input("config")]
        private InputMap<string>? _config;

        /// <summary>
        /// Block for custom *nonsensitive* configuration properties:
        /// </summary>
        public InputMap<string> Config
        {
            get => _config ?? (_config = new InputMap<string>());
            set => _config = value;
        }

        /// <summary>
        /// Customized context of the exporter if `context_type` is set to `CUSTOM`.
        /// </summary>
        [Input("context")]
        public Input<string>? Context { get; set; }

        /// <summary>
        /// Context type of the exporter. Accepted values are: `CUSTOM`, `NONE` or `AUTO`. Defaults to `AUTO`.
        /// </summary>
        [Input("contextType")]
        public Input<string>? ContextType { get; set; }

        [Input("credentials")]
        private Input<Inputs.SchemaExporterCredentialsGetArgs>? _credentials;

        /// <summary>
        /// The Cluster API Credentials.
        /// </summary>
        public Input<Inputs.SchemaExporterCredentialsGetArgs>? Credentials
        {
            get => _credentials;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _credentials = Output.Tuple<Input<Inputs.SchemaExporterCredentialsGetArgs>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("destinationSchemaRegistryCluster")]
        public Input<Inputs.SchemaExporterDestinationSchemaRegistryClusterGetArgs>? DestinationSchemaRegistryCluster { get; set; }

        /// <summary>
        /// The configuration setting name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The flag to control whether to reset the exporter when updating configs. Defaults to `false`.
        /// </summary>
        [Input("resetOnUpdate")]
        public Input<bool>? ResetOnUpdate { get; set; }

        /// <summary>
        /// The REST endpoint of the destination Schema Registry cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
        /// </summary>
        [Input("restEndpoint")]
        public Input<string>? RestEndpoint { get; set; }

        [Input("schemaRegistryCluster")]
        public Input<Inputs.SchemaExporterSchemaRegistryClusterGetArgs>? SchemaRegistryCluster { get; set; }

        /// <summary>
        /// The status of the schema exporter. Accepted values are: `RUNNING` and `PAUSED`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Format string for the subject name in the destination cluster, which may contain `${subject}` as a placeholder for the originating subject name. For example, `dc_${subject}` for the subject orders will map to the destination subject name `dc_orders`.
        /// </summary>
        [Input("subjectRenameFormat")]
        public Input<string>? SubjectRenameFormat { get; set; }

        [Input("subjects")]
        private InputList<string>? _subjects;

        /// <summary>
        /// Name of each exporter subject.
        /// </summary>
        public InputList<string> Subjects
        {
            get => _subjects ?? (_subjects = new InputList<string>());
            set => _subjects = value;
        }

        public SchemaExporterState()
        {
        }
        public static new SchemaExporterState Empty => new SchemaExporterState();
    }
}

// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ConfluentCloud
{
    public static class GetSubjectConfig
    {
        /// <summary>
        /// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// `confluent_subject_compatibility_level` describes a Subject Config data source.
        /// 
        /// ## Example Usage
        /// </summary>
        public static Task<GetSubjectConfigResult> InvokeAsync(GetSubjectConfigArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSubjectConfigResult>("confluentcloud:index/getSubjectConfig:getSubjectConfig", args ?? new GetSubjectConfigArgs(), options.WithDefaults());

        /// <summary>
        /// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// `confluent_subject_compatibility_level` describes a Subject Config data source.
        /// 
        /// ## Example Usage
        /// </summary>
        public static Output<GetSubjectConfigResult> Invoke(GetSubjectConfigInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSubjectConfigResult>("confluentcloud:index/getSubjectConfig:getSubjectConfig", args ?? new GetSubjectConfigInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// `confluent_subject_compatibility_level` describes a Subject Config data source.
        /// 
        /// ## Example Usage
        /// </summary>
        public static Output<GetSubjectConfigResult> Invoke(GetSubjectConfigInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSubjectConfigResult>("confluentcloud:index/getSubjectConfig:getSubjectConfig", args ?? new GetSubjectConfigInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSubjectConfigArgs : global::Pulumi.InvokeArgs
    {
        [Input("credentials")]
        private Inputs.GetSubjectConfigCredentialsArgs? _credentials;
        public Inputs.GetSubjectConfigCredentialsArgs? Credentials
        {
            get => _credentials;
            set => _credentials = value;
        }

        /// <summary>
        /// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
        /// </summary>
        [Input("restEndpoint")]
        public string? RestEndpoint { get; set; }

        [Input("schemaRegistryCluster")]
        public Inputs.GetSubjectConfigSchemaRegistryClusterArgs? SchemaRegistryCluster { get; set; }

        /// <summary>
        /// The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`.
        /// </summary>
        [Input("subjectName", required: true)]
        public string SubjectName { get; set; } = null!;

        public GetSubjectConfigArgs()
        {
        }
        public static new GetSubjectConfigArgs Empty => new GetSubjectConfigArgs();
    }

    public sealed class GetSubjectConfigInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("credentials")]
        private Input<Inputs.GetSubjectConfigCredentialsInputArgs>? _credentials;
        public Input<Inputs.GetSubjectConfigCredentialsInputArgs>? Credentials
        {
            get => _credentials;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _credentials = Output.Tuple<Input<Inputs.GetSubjectConfigCredentialsInputArgs>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
        /// </summary>
        [Input("restEndpoint")]
        public Input<string>? RestEndpoint { get; set; }

        [Input("schemaRegistryCluster")]
        public Input<Inputs.GetSubjectConfigSchemaRegistryClusterInputArgs>? SchemaRegistryCluster { get; set; }

        /// <summary>
        /// The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`.
        /// </summary>
        [Input("subjectName", required: true)]
        public Input<string> SubjectName { get; set; } = null!;

        public GetSubjectConfigInvokeArgs()
        {
        }
        public static new GetSubjectConfigInvokeArgs Empty => new GetSubjectConfigInvokeArgs();
    }


    [OutputType]
    public sealed class GetSubjectConfigResult
    {
        /// <summary>
        /// (Required String) The Compatibility Group of the specified subject.
        /// </summary>
        public readonly string CompatibilityGroup;
        /// <summary>
        /// (Required String) The Compatibility Level of the specified subject. Accepted values are: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`, `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, and `NONE`. See the [Compatibility Types](https://docs.confluent.io/platform/current/schema-registry/avro.html#compatibility-types) for more details.
        /// </summary>
        public readonly string CompatibilityLevel;
        public readonly Outputs.GetSubjectConfigCredentialsResult? Credentials;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? RestEndpoint;
        public readonly Outputs.GetSubjectConfigSchemaRegistryClusterResult? SchemaRegistryCluster;
        public readonly string SubjectName;

        [OutputConstructor]
        private GetSubjectConfigResult(
            string compatibilityGroup,

            string compatibilityLevel,

            Outputs.GetSubjectConfigCredentialsResult? credentials,

            string id,

            string? restEndpoint,

            Outputs.GetSubjectConfigSchemaRegistryClusterResult? schemaRegistryCluster,

            string subjectName)
        {
            CompatibilityGroup = compatibilityGroup;
            CompatibilityLevel = compatibilityLevel;
            Credentials = credentials;
            Id = id;
            RestEndpoint = restEndpoint;
            SchemaRegistryCluster = schemaRegistryCluster;
            SubjectName = subjectName;
        }
    }
}

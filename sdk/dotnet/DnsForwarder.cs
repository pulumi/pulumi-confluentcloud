// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ConfluentCloud
{
    /// <summary>
    /// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
    /// 
    /// `confluentcloud.DnsForwarder` provides a DNS Forwarder resource that enables creating, editing, and deleting DNS Forwarders on Confluent Cloud.
    /// 
    /// ## Example Usage
    /// 
    /// ### Option #1: Create using ForwardViaIp method
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using ConfluentCloud = Pulumi.ConfluentCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var development = new ConfluentCloud.Environment("development", new()
    ///     {
    ///         DisplayName = "Development",
    ///     });
    /// 
    ///     var main = new ConfluentCloud.DnsForwarder("main", new()
    ///     {
    ///         DisplayName = "dns_forwarder",
    ///         Environment = new ConfluentCloud.Inputs.DnsForwarderEnvironmentArgs
    ///         {
    ///             Id = development.Id,
    ///         },
    ///         Domains = new[]
    ///         {
    ///             "example.com",
    ///             "domainname.com",
    ///         },
    ///         Gateway = new ConfluentCloud.Inputs.DnsForwarderGatewayArgs
    ///         {
    ///             Id = mainConfluentNetwork.Gateway[0].Id,
    ///         },
    ///         ForwardViaIp = new ConfluentCloud.Inputs.DnsForwarderForwardViaIpArgs
    ///         {
    ///             DnsServerIps = new[]
    ///             {
    ///                 "10.200.0.0",
    ///                 "10.200.0.1",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Option #2: Create using ForwardViaGcpDnsZones method
    /// 
    /// ## Import
    /// 
    /// You can import a DNS Forwarder by using Environment ID and DNS Forwarder ID, in the format `&lt;Environment ID&gt;/&lt;DNS Forwarder ID&gt;`. The following example shows how to import a DNS Forwarder:
    /// 
    /// $ export CONFLUENT_CLOUD_API_KEY="&lt;cloud_api_key&gt;"
    /// 
    /// $ export CONFLUENT_CLOUD_API_SECRET="&lt;cloud_api_secret&gt;"
    /// 
    /// ```sh
    /// $ pulumi import confluentcloud:index/dnsForwarder:DnsForwarder main env-abc123/dnsf-abc123
    /// ```
    /// 
    /// !&gt; **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
    /// </summary>
    [ConfluentCloudResourceType("confluentcloud:index/dnsForwarder:DnsForwarder")]
    public partial class DnsForwarder : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the DNS Forwarder.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// List of domains for the DNS forwarder to use.
        /// </summary>
        [Output("domains")]
        public Output<ImmutableArray<string>> Domains { get; private set; } = null!;

        /// <summary>
        /// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
        /// </summary>
        [Output("environment")]
        public Output<Outputs.DnsForwarderEnvironment> Environment { get; private set; } = null!;

        [Output("forwardViaGcpDnsZones")]
        public Output<Outputs.DnsForwarderForwardViaGcpDnsZones?> ForwardViaGcpDnsZones { get; private set; } = null!;

        [Output("forwardViaIp")]
        public Output<Outputs.DnsForwarderForwardViaIp?> ForwardViaIp { get; private set; } = null!;

        [Output("gateway")]
        public Output<Outputs.DnsForwarderGateway> Gateway { get; private set; } = null!;


        /// <summary>
        /// Create a DnsForwarder resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DnsForwarder(string name, DnsForwarderArgs args, CustomResourceOptions? options = null)
            : base("confluentcloud:index/dnsForwarder:DnsForwarder", name, args ?? new DnsForwarderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DnsForwarder(string name, Input<string> id, DnsForwarderState? state = null, CustomResourceOptions? options = null)
            : base("confluentcloud:index/dnsForwarder:DnsForwarder", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DnsForwarder resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DnsForwarder Get(string name, Input<string> id, DnsForwarderState? state = null, CustomResourceOptions? options = null)
        {
            return new DnsForwarder(name, id, state, options);
        }
    }

    public sealed class DnsForwarderArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the DNS Forwarder.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("domains", required: true)]
        private InputList<string>? _domains;

        /// <summary>
        /// List of domains for the DNS forwarder to use.
        /// </summary>
        public InputList<string> Domains
        {
            get => _domains ?? (_domains = new InputList<string>());
            set => _domains = value;
        }

        /// <summary>
        /// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
        /// </summary>
        [Input("environment", required: true)]
        public Input<Inputs.DnsForwarderEnvironmentArgs> Environment { get; set; } = null!;

        [Input("forwardViaGcpDnsZones")]
        public Input<Inputs.DnsForwarderForwardViaGcpDnsZonesArgs>? ForwardViaGcpDnsZones { get; set; }

        [Input("forwardViaIp")]
        public Input<Inputs.DnsForwarderForwardViaIpArgs>? ForwardViaIp { get; set; }

        [Input("gateway", required: true)]
        public Input<Inputs.DnsForwarderGatewayArgs> Gateway { get; set; } = null!;

        public DnsForwarderArgs()
        {
        }
        public static new DnsForwarderArgs Empty => new DnsForwarderArgs();
    }

    public sealed class DnsForwarderState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the DNS Forwarder.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("domains")]
        private InputList<string>? _domains;

        /// <summary>
        /// List of domains for the DNS forwarder to use.
        /// </summary>
        public InputList<string> Domains
        {
            get => _domains ?? (_domains = new InputList<string>());
            set => _domains = value;
        }

        /// <summary>
        /// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
        /// </summary>
        [Input("environment")]
        public Input<Inputs.DnsForwarderEnvironmentGetArgs>? Environment { get; set; }

        [Input("forwardViaGcpDnsZones")]
        public Input<Inputs.DnsForwarderForwardViaGcpDnsZonesGetArgs>? ForwardViaGcpDnsZones { get; set; }

        [Input("forwardViaIp")]
        public Input<Inputs.DnsForwarderForwardViaIpGetArgs>? ForwardViaIp { get; set; }

        [Input("gateway")]
        public Input<Inputs.DnsForwarderGatewayGetArgs>? Gateway { get; set; }

        public DnsForwarderState()
        {
        }
        public static new DnsForwarderState Empty => new DnsForwarderState();
    }
}

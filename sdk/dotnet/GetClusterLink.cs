// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ConfluentCloud
{
    public static class GetClusterLink
    {
        /// <summary>
        /// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// `confluentcloud.ClusterLink` describes a Cluster Link data source.
        /// 
        /// ## Example Usage
        /// 
        /// ### Option #1: Manage multiple Kafka clusters in the same Pulumi Stack
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = ConfluentCloud.GetClusterLink.Invoke(new()
        ///     {
        ///         LinkName = "main-link",
        ///         RestEndpoint = west.RestEndpoint,
        ///         KafkaCluster = new ConfluentCloud.Inputs.GetClusterLinkKafkaClusterInputArgs
        ///         {
        ///             Id = west.Id,
        ///         },
        ///         Credentials = new ConfluentCloud.Inputs.GetClusterLinkCredentialsInputArgs
        ///         {
        ///             Key = app_manager_west_cluster_api_key.Id,
        ///             Secret = app_manager_west_cluster_api_key.Secret,
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["kafkaClusterLinkId"] = main.Apply(getClusterLinkResult =&gt; getClusterLinkResult.ClusterLinkId),
        ///     };
        /// });
        /// ```
        /// 
        /// ### Option #2: Manage a single Kafka cluster in the same Pulumi Stack
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = ConfluentCloud.GetClusterLink.Invoke(new()
        ///     {
        ///         LinkName = "main-link",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["kafkaClusterLinkId"] = main.Apply(getClusterLinkResult =&gt; getClusterLinkResult.ClusterLinkId),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetClusterLinkResult> InvokeAsync(GetClusterLinkArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetClusterLinkResult>("confluentcloud:index/getClusterLink:getClusterLink", args ?? new GetClusterLinkArgs(), options.WithDefaults());

        /// <summary>
        /// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// `confluentcloud.ClusterLink` describes a Cluster Link data source.
        /// 
        /// ## Example Usage
        /// 
        /// ### Option #1: Manage multiple Kafka clusters in the same Pulumi Stack
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = ConfluentCloud.GetClusterLink.Invoke(new()
        ///     {
        ///         LinkName = "main-link",
        ///         RestEndpoint = west.RestEndpoint,
        ///         KafkaCluster = new ConfluentCloud.Inputs.GetClusterLinkKafkaClusterInputArgs
        ///         {
        ///             Id = west.Id,
        ///         },
        ///         Credentials = new ConfluentCloud.Inputs.GetClusterLinkCredentialsInputArgs
        ///         {
        ///             Key = app_manager_west_cluster_api_key.Id,
        ///             Secret = app_manager_west_cluster_api_key.Secret,
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["kafkaClusterLinkId"] = main.Apply(getClusterLinkResult =&gt; getClusterLinkResult.ClusterLinkId),
        ///     };
        /// });
        /// ```
        /// 
        /// ### Option #2: Manage a single Kafka cluster in the same Pulumi Stack
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = ConfluentCloud.GetClusterLink.Invoke(new()
        ///     {
        ///         LinkName = "main-link",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["kafkaClusterLinkId"] = main.Apply(getClusterLinkResult =&gt; getClusterLinkResult.ClusterLinkId),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetClusterLinkResult> Invoke(GetClusterLinkInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetClusterLinkResult>("confluentcloud:index/getClusterLink:getClusterLink", args ?? new GetClusterLinkInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// `confluentcloud.ClusterLink` describes a Cluster Link data source.
        /// 
        /// ## Example Usage
        /// 
        /// ### Option #1: Manage multiple Kafka clusters in the same Pulumi Stack
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = ConfluentCloud.GetClusterLink.Invoke(new()
        ///     {
        ///         LinkName = "main-link",
        ///         RestEndpoint = west.RestEndpoint,
        ///         KafkaCluster = new ConfluentCloud.Inputs.GetClusterLinkKafkaClusterInputArgs
        ///         {
        ///             Id = west.Id,
        ///         },
        ///         Credentials = new ConfluentCloud.Inputs.GetClusterLinkCredentialsInputArgs
        ///         {
        ///             Key = app_manager_west_cluster_api_key.Id,
        ///             Secret = app_manager_west_cluster_api_key.Secret,
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["kafkaClusterLinkId"] = main.Apply(getClusterLinkResult =&gt; getClusterLinkResult.ClusterLinkId),
        ///     };
        /// });
        /// ```
        /// 
        /// ### Option #2: Manage a single Kafka cluster in the same Pulumi Stack
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = ConfluentCloud.GetClusterLink.Invoke(new()
        ///     {
        ///         LinkName = "main-link",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["kafkaClusterLinkId"] = main.Apply(getClusterLinkResult =&gt; getClusterLinkResult.ClusterLinkId),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetClusterLinkResult> Invoke(GetClusterLinkInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetClusterLinkResult>("confluentcloud:index/getClusterLink:getClusterLink", args ?? new GetClusterLinkInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClusterLinkArgs : global::Pulumi.InvokeArgs
    {
        [Input("credentials")]
        private Inputs.GetClusterLinkCredentialsArgs? _credentials;
        public Inputs.GetClusterLinkCredentialsArgs? Credentials
        {
            get => _credentials;
            set => _credentials = value;
        }

        [Input("kafkaCluster")]
        public Inputs.GetClusterLinkKafkaClusterArgs? KafkaCluster { get; set; }

        /// <summary>
        /// The name of the cluster link, for example, `my-cluster-link`.
        /// </summary>
        [Input("linkName", required: true)]
        public string LinkName { get; set; } = null!;

        /// <summary>
        /// The REST endpoint of the Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
        /// </summary>
        [Input("restEndpoint")]
        public string? RestEndpoint { get; set; }

        public GetClusterLinkArgs()
        {
        }
        public static new GetClusterLinkArgs Empty => new GetClusterLinkArgs();
    }

    public sealed class GetClusterLinkInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("credentials")]
        private Input<Inputs.GetClusterLinkCredentialsInputArgs>? _credentials;
        public Input<Inputs.GetClusterLinkCredentialsInputArgs>? Credentials
        {
            get => _credentials;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _credentials = Output.Tuple<Input<Inputs.GetClusterLinkCredentialsInputArgs>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("kafkaCluster")]
        public Input<Inputs.GetClusterLinkKafkaClusterInputArgs>? KafkaCluster { get; set; }

        /// <summary>
        /// The name of the cluster link, for example, `my-cluster-link`.
        /// </summary>
        [Input("linkName", required: true)]
        public Input<string> LinkName { get; set; } = null!;

        /// <summary>
        /// The REST endpoint of the Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
        /// </summary>
        [Input("restEndpoint")]
        public Input<string>? RestEndpoint { get; set; }

        public GetClusterLinkInvokeArgs()
        {
        }
        public static new GetClusterLinkInvokeArgs Empty => new GetClusterLinkInvokeArgs();
    }


    [OutputType]
    public sealed class GetClusterLinkResult
    {
        /// <summary>
        /// (Required String) The actual Cluster Link ID assigned from Confluent Cloud that uniquely represents a link between two Kafka clusters, for example, `qz0HDEV-Qz2B5aPFpcWQJQ`.
        /// </summary>
        public readonly string ClusterLinkId;
        /// <summary>
        /// (Optional Map) The custom cluster link settings retrieved:
        /// </summary>
        public readonly ImmutableDictionary<string, string> Config;
        public readonly Outputs.GetClusterLinkCredentialsResult? Credentials;
        /// <summary>
        /// (Required String) The composite ID of the Cluster Link data-source, in the format `&lt;Kafka cluster ID&gt;/&lt;Cluster link name&gt;`, for example, `lkc-abc123/my-cluster-link`.
        /// </summary>
        public readonly string Id;
        public readonly Outputs.GetClusterLinkKafkaClusterResult? KafkaCluster;
        public readonly string LinkName;
        /// <summary>
        /// (Required String) The current state of the Cluster Link.
        /// </summary>
        public readonly string LinkState;
        public readonly string? RestEndpoint;

        [OutputConstructor]
        private GetClusterLinkResult(
            string clusterLinkId,

            ImmutableDictionary<string, string> config,

            Outputs.GetClusterLinkCredentialsResult? credentials,

            string id,

            Outputs.GetClusterLinkKafkaClusterResult? kafkaCluster,

            string linkName,

            string linkState,

            string? restEndpoint)
        {
            ClusterLinkId = clusterLinkId;
            Config = config;
            Credentials = credentials;
            Id = id;
            KafkaCluster = kafkaCluster;
            LinkName = linkName;
            LinkState = linkState;
            RestEndpoint = restEndpoint;
        }
    }
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ConfluentCloud
{
    public static class GetFlinkComputePool
    {
        /// <summary>
        /// [![Preview](https://img.shields.io/badge/Lifecycle%20Stage-Preview-%2300afba)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// &gt; **Note:** `confluentcloud.FlinkComputePool` data source is available in **Preview** for early adopters. Preview features are introduced to gather customer feedback. This feature should be used only for evaluation and non-production testing purposes or to provide feedback to Confluent, particularly as it becomes more widely available in follow-on editions.  
        /// **Preview** features are intended for evaluation use in development and testing environments only, and not for production use. The warranty, SLA, and Support Services provisions of your agreement with Confluent do not apply to Preview features. Preview features are considered to be a Proof of Concept as defined in the Confluent Cloud Terms of Service. Confluent may discontinue providing Preview releases of the Preview features at any time in Confluent’s sole discretion.
        /// 
        /// `confluentcloud.FlinkComputePool` describes a Flink Compute Pool data source.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleUsingIdFlinkComputePool = ConfluentCloud.GetFlinkComputePool.Invoke(new()
        ///     {
        ///         Id = "lfcp-abc123",
        ///         Environment = new ConfluentCloud.Inputs.GetFlinkComputePoolEnvironmentInputArgs
        ///         {
        ///             Id = "env-xyz456",
        ///         },
        ///     });
        /// 
        ///     var exampleUsingNameFlinkComputePool = ConfluentCloud.GetFlinkComputePool.Invoke(new()
        ///     {
        ///         DisplayName = "my_compute_pool",
        ///         Environment = new ConfluentCloud.Inputs.GetFlinkComputePoolEnvironmentInputArgs
        ///         {
        ///             Id = "env-xyz456",
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["exampleUsingId"] = exampleUsingIdFlinkComputePool,
        ///         ["exampleUsingName"] = exampleUsingNameFlinkComputePool,
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetFlinkComputePoolResult> InvokeAsync(GetFlinkComputePoolArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFlinkComputePoolResult>("confluentcloud:index/getFlinkComputePool:getFlinkComputePool", args ?? new GetFlinkComputePoolArgs(), options.WithDefaults());

        /// <summary>
        /// [![Preview](https://img.shields.io/badge/Lifecycle%20Stage-Preview-%2300afba)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// &gt; **Note:** `confluentcloud.FlinkComputePool` data source is available in **Preview** for early adopters. Preview features are introduced to gather customer feedback. This feature should be used only for evaluation and non-production testing purposes or to provide feedback to Confluent, particularly as it becomes more widely available in follow-on editions.  
        /// **Preview** features are intended for evaluation use in development and testing environments only, and not for production use. The warranty, SLA, and Support Services provisions of your agreement with Confluent do not apply to Preview features. Preview features are considered to be a Proof of Concept as defined in the Confluent Cloud Terms of Service. Confluent may discontinue providing Preview releases of the Preview features at any time in Confluent’s sole discretion.
        /// 
        /// `confluentcloud.FlinkComputePool` describes a Flink Compute Pool data source.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleUsingIdFlinkComputePool = ConfluentCloud.GetFlinkComputePool.Invoke(new()
        ///     {
        ///         Id = "lfcp-abc123",
        ///         Environment = new ConfluentCloud.Inputs.GetFlinkComputePoolEnvironmentInputArgs
        ///         {
        ///             Id = "env-xyz456",
        ///         },
        ///     });
        /// 
        ///     var exampleUsingNameFlinkComputePool = ConfluentCloud.GetFlinkComputePool.Invoke(new()
        ///     {
        ///         DisplayName = "my_compute_pool",
        ///         Environment = new ConfluentCloud.Inputs.GetFlinkComputePoolEnvironmentInputArgs
        ///         {
        ///             Id = "env-xyz456",
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["exampleUsingId"] = exampleUsingIdFlinkComputePool,
        ///         ["exampleUsingName"] = exampleUsingNameFlinkComputePool,
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetFlinkComputePoolResult> Invoke(GetFlinkComputePoolInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFlinkComputePoolResult>("confluentcloud:index/getFlinkComputePool:getFlinkComputePool", args ?? new GetFlinkComputePoolInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFlinkComputePoolArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A human-readable name for the Flink Compute Pool.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        /// <summary>
        /// (Required Configuration Block) supports the following:
        /// </summary>
        [Input("environment", required: true)]
        public Inputs.GetFlinkComputePoolEnvironmentArgs Environment { get; set; } = null!;

        /// <summary>
        /// The ID of the Environment that the Flink Compute Pool belongs to, for example, `env-xyz456`.
        /// 
        /// &gt; **Note:** Exactly one from the `id` and `display_name` attributes must be specified.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        public GetFlinkComputePoolArgs()
        {
        }
        public static new GetFlinkComputePoolArgs Empty => new GetFlinkComputePoolArgs();
    }

    public sealed class GetFlinkComputePoolInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A human-readable name for the Flink Compute Pool.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// (Required Configuration Block) supports the following:
        /// </summary>
        [Input("environment", required: true)]
        public Input<Inputs.GetFlinkComputePoolEnvironmentInputArgs> Environment { get; set; } = null!;

        /// <summary>
        /// The ID of the Environment that the Flink Compute Pool belongs to, for example, `env-xyz456`.
        /// 
        /// &gt; **Note:** Exactly one from the `id` and `display_name` attributes must be specified.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        public GetFlinkComputePoolInvokeArgs()
        {
        }
        public static new GetFlinkComputePoolInvokeArgs Empty => new GetFlinkComputePoolInvokeArgs();
    }


    [OutputType]
    public sealed class GetFlinkComputePoolResult
    {
        /// <summary>
        /// (Required String) The API Version of the schema version of the Flink Compute Pool, for example, `fcpm/v2`.
        /// </summary>
        public readonly string ApiVersion;
        /// <summary>
        /// (Required String) The cloud service provider that runs the Flink Compute Pool.
        /// </summary>
        public readonly string Cloud;
        /// <summary>
        /// (Required Integer) The number of Confluent Flink Units (CFUs) currently allocated to this Flink compute pool.
        /// </summary>
        public readonly int CurrentCfu;
        /// <summary>
        /// (Required String) The name of the Flink Compute Pool.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// (Required Configuration Block) supports the following:
        /// </summary>
        public readonly Outputs.GetFlinkComputePoolEnvironmentResult Environment;
        /// <summary>
        /// (Required String) The ID of the Environment that the Flink Compute Pool belongs to, for example, `env-abc123`.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (Required String) The kind of the Flink Compute Pool, for example, `ComputePool`.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// (Required Integer) Maximum number of Confluent Flink Units (CFUs) that the Flink compute pool should auto-scale to.
        /// </summary>
        public readonly int MaxCfu;
        /// <summary>
        /// (Required String) The cloud service provider region that hosts the Flink Compute Pool.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// (Required String) The Confluent Resource Name of the Flink Compute Pool.
        /// </summary>
        public readonly string ResourceName;
        /// <summary>
        /// (Required String) The API endpoint of the Flink Compute Pool.
        /// </summary>
        public readonly string RestEndpoint;

        [OutputConstructor]
        private GetFlinkComputePoolResult(
            string apiVersion,

            string cloud,

            int currentCfu,

            string displayName,

            Outputs.GetFlinkComputePoolEnvironmentResult environment,

            string id,

            string kind,

            int maxCfu,

            string region,

            string resourceName,

            string restEndpoint)
        {
            ApiVersion = apiVersion;
            Cloud = cloud;
            CurrentCfu = currentCfu;
            DisplayName = displayName;
            Environment = environment;
            Id = id;
            Kind = kind;
            MaxCfu = maxCfu;
            Region = region;
            ResourceName = resourceName;
            RestEndpoint = restEndpoint;
        }
    }
}

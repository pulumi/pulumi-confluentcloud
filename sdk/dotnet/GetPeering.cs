// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ConfluentCloud
{
    public static class GetPeering
    {
        /// <summary>
        /// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// `confluentcloud.Peering` describes a Peering data source.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleUsingIdPeering = ConfluentCloud.GetPeering.Invoke(new()
        ///     {
        ///         Id = "peer-abc123",
        ///         Environment = new ConfluentCloud.Inputs.GetPeeringEnvironmentInputArgs
        ///         {
        ///             Id = "env-xyz456",
        ///         },
        ///     });
        /// 
        ///     var exampleUsingNamePeering = ConfluentCloud.GetPeering.Invoke(new()
        ///     {
        ///         DisplayName = "my_peering",
        ///         Environment = new ConfluentCloud.Inputs.GetPeeringEnvironmentInputArgs
        ///         {
        ///             Id = "env-xyz456",
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["exampleUsingId"] = exampleUsingIdPeering.Apply(getPeeringResult =&gt; getPeeringResult),
        ///         ["exampleUsingName"] = exampleUsingNamePeering.Apply(getPeeringResult =&gt; getPeeringResult),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetPeeringResult> InvokeAsync(GetPeeringArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPeeringResult>("confluentcloud:index/getPeering:getPeering", args ?? new GetPeeringArgs(), options.WithDefaults());

        /// <summary>
        /// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// `confluentcloud.Peering` describes a Peering data source.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleUsingIdPeering = ConfluentCloud.GetPeering.Invoke(new()
        ///     {
        ///         Id = "peer-abc123",
        ///         Environment = new ConfluentCloud.Inputs.GetPeeringEnvironmentInputArgs
        ///         {
        ///             Id = "env-xyz456",
        ///         },
        ///     });
        /// 
        ///     var exampleUsingNamePeering = ConfluentCloud.GetPeering.Invoke(new()
        ///     {
        ///         DisplayName = "my_peering",
        ///         Environment = new ConfluentCloud.Inputs.GetPeeringEnvironmentInputArgs
        ///         {
        ///             Id = "env-xyz456",
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["exampleUsingId"] = exampleUsingIdPeering.Apply(getPeeringResult =&gt; getPeeringResult),
        ///         ["exampleUsingName"] = exampleUsingNamePeering.Apply(getPeeringResult =&gt; getPeeringResult),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetPeeringResult> Invoke(GetPeeringInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPeeringResult>("confluentcloud:index/getPeering:getPeering", args ?? new GetPeeringInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPeeringArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A human-readable name for the Peering.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        /// <summary>
        /// (Required Configuration Block) supports the following:
        /// </summary>
        [Input("environment", required: true)]
        public Inputs.GetPeeringEnvironmentArgs Environment { get; set; } = null!;

        /// <summary>
        /// The ID of the Environment that the Peering belongs to, for example, `env-xyz456`.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        public GetPeeringArgs()
        {
        }
        public static new GetPeeringArgs Empty => new GetPeeringArgs();
    }

    public sealed class GetPeeringInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A human-readable name for the Peering.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// (Required Configuration Block) supports the following:
        /// </summary>
        [Input("environment", required: true)]
        public Input<Inputs.GetPeeringEnvironmentInputArgs> Environment { get; set; } = null!;

        /// <summary>
        /// The ID of the Environment that the Peering belongs to, for example, `env-xyz456`.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        public GetPeeringInvokeArgs()
        {
        }
        public static new GetPeeringInvokeArgs Empty => new GetPeeringInvokeArgs();
    }


    [OutputType]
    public sealed class GetPeeringResult
    {
        /// <summary>
        /// (Optional Configuration Block) The AWS-specific Peering details if available. It supports the following:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPeeringAwResult> Aws;
        /// <summary>
        /// (Optional Configuration Block) The Azure-specific Peering details if available. It supports the following:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPeeringAzureResult> Azures;
        /// <summary>
        /// (Optional String) The name of the Peering.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// (Required Configuration Block) supports the following:
        /// </summary>
        public readonly Outputs.GetPeeringEnvironmentResult Environment;
        /// <summary>
        /// (Optional Configuration Block) The Azure-specific Peering details if available. It supports the following:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPeeringGcpResult> Gcps;
        /// <summary>
        /// (Required String) The ID of the Network that the Peering belongs to, for example, `n-abc123`.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (Required Configuration Block) supports the following:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPeeringNetworkResult> Networks;

        [OutputConstructor]
        private GetPeeringResult(
            ImmutableArray<Outputs.GetPeeringAwResult> aws,

            ImmutableArray<Outputs.GetPeeringAzureResult> azures,

            string displayName,

            Outputs.GetPeeringEnvironmentResult environment,

            ImmutableArray<Outputs.GetPeeringGcpResult> gcps,

            string id,

            ImmutableArray<Outputs.GetPeeringNetworkResult> networks)
        {
            Aws = aws;
            Azures = azures;
            DisplayName = displayName;
            Environment = environment;
            Gcps = gcps;
            Id = id;
            Networks = networks;
        }
    }
}

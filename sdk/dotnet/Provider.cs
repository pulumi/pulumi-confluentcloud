// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ConfluentCloud
{
    /// <summary>
    /// The provider type for the confluent package. By default, resources use package-wide configuration
    /// settings, however an explicit `Provider` instance may be created and passed during resource
    /// construction to achieve fine-grained programmatic control over provider settings. See the
    /// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
    /// </summary>
    [ConfluentCloudResourceType("pulumi:providers:confluentcloud")]
    public partial class Provider : global::Pulumi.ProviderResource
    {
        /// <summary>
        /// The Stream Catalog REST Endpoint.
        /// </summary>
        [Output("catalogRestEndpoint")]
        public Output<string?> CatalogRestEndpoint { get; private set; } = null!;

        /// <summary>
        /// The Confluent Cloud API Key.
        /// </summary>
        [Output("cloudApiKey")]
        public Output<string?> CloudApiKey { get; private set; } = null!;

        /// <summary>
        /// The Confluent Cloud API Secret.
        /// </summary>
        [Output("cloudApiSecret")]
        public Output<string?> CloudApiSecret { get; private set; } = null!;

        /// <summary>
        /// The base endpoint of Confluent Cloud API.
        /// </summary>
        [Output("endpoint")]
        public Output<string?> Endpoint { get; private set; } = null!;

        /// <summary>
        /// The Flink Environment ID.
        /// </summary>
        [Output("environmentId")]
        public Output<string?> EnvironmentId { get; private set; } = null!;

        /// <summary>
        /// The Flink API Key.
        /// </summary>
        [Output("flinkApiKey")]
        public Output<string?> FlinkApiKey { get; private set; } = null!;

        /// <summary>
        /// The Flink API Secret.
        /// </summary>
        [Output("flinkApiSecret")]
        public Output<string?> FlinkApiSecret { get; private set; } = null!;

        /// <summary>
        /// The Flink Compute Pool ID.
        /// </summary>
        [Output("flinkComputePoolId")]
        public Output<string?> FlinkComputePoolId { get; private set; } = null!;

        /// <summary>
        /// The Flink Principal ID.
        /// </summary>
        [Output("flinkPrincipalId")]
        public Output<string?> FlinkPrincipalId { get; private set; } = null!;

        /// <summary>
        /// The Flink REST Endpoint.
        /// </summary>
        [Output("flinkRestEndpoint")]
        public Output<string?> FlinkRestEndpoint { get; private set; } = null!;

        /// <summary>
        /// The Kafka Cluster API Key.
        /// </summary>
        [Output("kafkaApiKey")]
        public Output<string?> KafkaApiKey { get; private set; } = null!;

        /// <summary>
        /// The Kafka Cluster API Secret.
        /// </summary>
        [Output("kafkaApiSecret")]
        public Output<string?> KafkaApiSecret { get; private set; } = null!;

        /// <summary>
        /// The Kafka Cluster ID.
        /// </summary>
        [Output("kafkaId")]
        public Output<string?> KafkaId { get; private set; } = null!;

        /// <summary>
        /// The Kafka Cluster REST Endpoint.
        /// </summary>
        [Output("kafkaRestEndpoint")]
        public Output<string?> KafkaRestEndpoint { get; private set; } = null!;

        /// <summary>
        /// The Flink Organization ID.
        /// </summary>
        [Output("organizationId")]
        public Output<string?> OrganizationId { get; private set; } = null!;

        /// <summary>
        /// The Schema Registry Cluster API Key.
        /// </summary>
        [Output("schemaRegistryApiKey")]
        public Output<string?> SchemaRegistryApiKey { get; private set; } = null!;

        /// <summary>
        /// The Schema Registry Cluster API Secret.
        /// </summary>
        [Output("schemaRegistryApiSecret")]
        public Output<string?> SchemaRegistryApiSecret { get; private set; } = null!;

        /// <summary>
        /// The Schema Registry Cluster ID.
        /// </summary>
        [Output("schemaRegistryId")]
        public Output<string?> SchemaRegistryId { get; private set; } = null!;

        /// <summary>
        /// The Schema Registry Cluster REST Endpoint.
        /// </summary>
        [Output("schemaRegistryRestEndpoint")]
        public Output<string?> SchemaRegistryRestEndpoint { get; private set; } = null!;

        /// <summary>
        /// The Tableflow API Key.
        /// </summary>
        [Output("tableflowApiKey")]
        public Output<string?> TableflowApiKey { get; private set; } = null!;

        /// <summary>
        /// The Tableflow API Secret.
        /// </summary>
        [Output("tableflowApiSecret")]
        public Output<string?> TableflowApiSecret { get; private set; } = null!;


        /// <summary>
        /// Create a Provider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Provider(string name, ProviderArgs? args = null, CustomResourceOptions? options = null)
            : base("confluentcloud", name, args ?? new ProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "cloudApiKey",
                    "cloudApiSecret",
                    "flinkApiKey",
                    "flinkApiSecret",
                    "kafkaApiKey",
                    "kafkaApiSecret",
                    "schemaRegistryApiKey",
                    "schemaRegistryApiSecret",
                    "tableflowApiKey",
                    "tableflowApiSecret",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class ProviderArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Stream Catalog REST Endpoint.
        /// </summary>
        [Input("catalogRestEndpoint")]
        public Input<string>? CatalogRestEndpoint { get; set; }

        [Input("cloudApiKey")]
        private Input<string>? _cloudApiKey;

        /// <summary>
        /// The Confluent Cloud API Key.
        /// </summary>
        public Input<string>? CloudApiKey
        {
            get => _cloudApiKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _cloudApiKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("cloudApiSecret")]
        private Input<string>? _cloudApiSecret;

        /// <summary>
        /// The Confluent Cloud API Secret.
        /// </summary>
        public Input<string>? CloudApiSecret
        {
            get => _cloudApiSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _cloudApiSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The base endpoint of Confluent Cloud API.
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        /// <summary>
        /// The Flink Environment ID.
        /// </summary>
        [Input("environmentId")]
        public Input<string>? EnvironmentId { get; set; }

        [Input("flinkApiKey")]
        private Input<string>? _flinkApiKey;

        /// <summary>
        /// The Flink API Key.
        /// </summary>
        public Input<string>? FlinkApiKey
        {
            get => _flinkApiKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _flinkApiKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("flinkApiSecret")]
        private Input<string>? _flinkApiSecret;

        /// <summary>
        /// The Flink API Secret.
        /// </summary>
        public Input<string>? FlinkApiSecret
        {
            get => _flinkApiSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _flinkApiSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The Flink Compute Pool ID.
        /// </summary>
        [Input("flinkComputePoolId")]
        public Input<string>? FlinkComputePoolId { get; set; }

        /// <summary>
        /// The Flink Principal ID.
        /// </summary>
        [Input("flinkPrincipalId")]
        public Input<string>? FlinkPrincipalId { get; set; }

        /// <summary>
        /// The Flink REST Endpoint.
        /// </summary>
        [Input("flinkRestEndpoint")]
        public Input<string>? FlinkRestEndpoint { get; set; }

        [Input("kafkaApiKey")]
        private Input<string>? _kafkaApiKey;

        /// <summary>
        /// The Kafka Cluster API Key.
        /// </summary>
        public Input<string>? KafkaApiKey
        {
            get => _kafkaApiKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _kafkaApiKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("kafkaApiSecret")]
        private Input<string>? _kafkaApiSecret;

        /// <summary>
        /// The Kafka Cluster API Secret.
        /// </summary>
        public Input<string>? KafkaApiSecret
        {
            get => _kafkaApiSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _kafkaApiSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The Kafka Cluster ID.
        /// </summary>
        [Input("kafkaId")]
        public Input<string>? KafkaId { get; set; }

        /// <summary>
        /// The Kafka Cluster REST Endpoint.
        /// </summary>
        [Input("kafkaRestEndpoint")]
        public Input<string>? KafkaRestEndpoint { get; set; }

        /// <summary>
        /// Maximum number of retries of HTTP client. Defaults to 4.
        /// </summary>
        [Input("maxRetries", json: true)]
        public Input<int>? MaxRetries { get; set; }

        /// <summary>
        /// OAuth config settings
        /// </summary>
        [Input("oauth", json: true)]
        public Input<Inputs.ProviderOauthArgs>? Oauth { get; set; }

        /// <summary>
        /// The Flink Organization ID.
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        [Input("schemaRegistryApiKey")]
        private Input<string>? _schemaRegistryApiKey;

        /// <summary>
        /// The Schema Registry Cluster API Key.
        /// </summary>
        public Input<string>? SchemaRegistryApiKey
        {
            get => _schemaRegistryApiKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _schemaRegistryApiKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("schemaRegistryApiSecret")]
        private Input<string>? _schemaRegistryApiSecret;

        /// <summary>
        /// The Schema Registry Cluster API Secret.
        /// </summary>
        public Input<string>? SchemaRegistryApiSecret
        {
            get => _schemaRegistryApiSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _schemaRegistryApiSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The Schema Registry Cluster ID.
        /// </summary>
        [Input("schemaRegistryId")]
        public Input<string>? SchemaRegistryId { get; set; }

        /// <summary>
        /// The Schema Registry Cluster REST Endpoint.
        /// </summary>
        [Input("schemaRegistryRestEndpoint")]
        public Input<string>? SchemaRegistryRestEndpoint { get; set; }

        [Input("tableflowApiKey")]
        private Input<string>? _tableflowApiKey;

        /// <summary>
        /// The Tableflow API Key.
        /// </summary>
        public Input<string>? TableflowApiKey
        {
            get => _tableflowApiKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tableflowApiKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("tableflowApiSecret")]
        private Input<string>? _tableflowApiSecret;

        /// <summary>
        /// The Tableflow API Secret.
        /// </summary>
        public Input<string>? TableflowApiSecret
        {
            get => _tableflowApiSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tableflowApiSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public ProviderArgs()
        {
        }
        public static new ProviderArgs Empty => new ProviderArgs();
    }
}

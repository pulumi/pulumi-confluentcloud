// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ConfluentCloud
{
    public static class GetCertificateAuthority
    {
        /// <summary>
        /// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// `confluentcloud.CertificateAuthority` describes a Certificate Authority data source.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = ConfluentCloud.GetCertificateAuthority.Invoke(new()
        ///     {
        ///         Id = "op-abc123",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["certificateAuthority"] = main,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetCertificateAuthorityResult> InvokeAsync(GetCertificateAuthorityArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCertificateAuthorityResult>("confluentcloud:index/getCertificateAuthority:getCertificateAuthority", args ?? new GetCertificateAuthorityArgs(), options.WithDefaults());

        /// <summary>
        /// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// `confluentcloud.CertificateAuthority` describes a Certificate Authority data source.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = ConfluentCloud.GetCertificateAuthority.Invoke(new()
        ///     {
        ///         Id = "op-abc123",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["certificateAuthority"] = main,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetCertificateAuthorityResult> Invoke(GetCertificateAuthorityInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCertificateAuthorityResult>("confluentcloud:index/getCertificateAuthority:getCertificateAuthority", args ?? new GetCertificateAuthorityInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCertificateAuthorityArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// (Optional String) The source specifies whether the Certificate Revocation List (CRL) is updated from either local file uploaded (LOCAL) or from url of CRL (URL). Accepted values are `LOCAL` and `URL`.
        /// </summary>
        [Input("crlSource")]
        public string? CrlSource { get; set; }

        /// <summary>
        /// (Optional String) The timestamp for when CRL was last updated, for example, `2017-07-21T17:32:28Z`.
        /// </summary>
        [Input("crlUpdatedAt")]
        public string? CrlUpdatedAt { get; set; }

        /// <summary>
        /// (Optional String) The url from which to fetch the CRL for the certificate authority if crl_source is URL.
        /// </summary>
        [Input("crlUrl")]
        public string? CrlUrl { get; set; }

        /// <summary>
        /// The ID of the Certificate Authority, for example, `op-abc123`.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetCertificateAuthorityArgs()
        {
        }
        public static new GetCertificateAuthorityArgs Empty => new GetCertificateAuthorityArgs();
    }

    public sealed class GetCertificateAuthorityInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// (Optional String) The source specifies whether the Certificate Revocation List (CRL) is updated from either local file uploaded (LOCAL) or from url of CRL (URL). Accepted values are `LOCAL` and `URL`.
        /// </summary>
        [Input("crlSource")]
        public Input<string>? CrlSource { get; set; }

        /// <summary>
        /// (Optional String) The timestamp for when CRL was last updated, for example, `2017-07-21T17:32:28Z`.
        /// </summary>
        [Input("crlUpdatedAt")]
        public Input<string>? CrlUpdatedAt { get; set; }

        /// <summary>
        /// (Optional String) The url from which to fetch the CRL for the certificate authority if crl_source is URL.
        /// </summary>
        [Input("crlUrl")]
        public Input<string>? CrlUrl { get; set; }

        /// <summary>
        /// The ID of the Certificate Authority, for example, `op-abc123`.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetCertificateAuthorityInvokeArgs()
        {
        }
        public static new GetCertificateAuthorityInvokeArgs Empty => new GetCertificateAuthorityInvokeArgs();
    }


    [OutputType]
    public sealed class GetCertificateAuthorityResult
    {
        /// <summary>
        /// (Required String) The name of the certificate file, for example, `certificate.pem`.
        /// </summary>
        public readonly string CertificateChainFilename;
        /// <summary>
        /// (Optional String) The source specifies whether the Certificate Revocation List (CRL) is updated from either local file uploaded (LOCAL) or from url of CRL (URL). Accepted values are `LOCAL` and `URL`.
        /// </summary>
        public readonly string CrlSource;
        /// <summary>
        /// (Optional String) The timestamp for when CRL was last updated, for example, `2017-07-21T17:32:28Z`.
        /// </summary>
        public readonly string CrlUpdatedAt;
        /// <summary>
        /// (Optional String) The url from which to fetch the CRL for the certificate authority if crl_source is URL.
        /// </summary>
        public readonly string CrlUrl;
        /// <summary>
        /// (Required String) A description for the Certificate Authority.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// (Required String) A human-readable name for the Certificate Authority.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// (Required List of Strings) The expiration dates of certificates in the chain, for example, `["2017-07-21T17:32:28Z"]`.
        /// </summary>
        public readonly ImmutableArray<string> ExpirationDates;
        /// <summary>
        /// (Required List of Strings) The fingerprints for each certificate in the certificate chain, for example, `["B1BC968BD4f49D622AA89A81F2150152A41D829C"]`.
        /// </summary>
        public readonly ImmutableArray<string> Fingerprints;
        public readonly string Id;
        /// <summary>
        /// (Required List of Strings) The serial numbers for each certificate in the certificate chain.
        /// </summary>
        public readonly ImmutableArray<string> SerialNumbers;

        [OutputConstructor]
        private GetCertificateAuthorityResult(
            string certificateChainFilename,

            string crlSource,

            string crlUpdatedAt,

            string crlUrl,

            string description,

            string displayName,

            ImmutableArray<string> expirationDates,

            ImmutableArray<string> fingerprints,

            string id,

            ImmutableArray<string> serialNumbers)
        {
            CertificateChainFilename = certificateChainFilename;
            CrlSource = crlSource;
            CrlUpdatedAt = crlUpdatedAt;
            CrlUrl = crlUrl;
            Description = description;
            DisplayName = displayName;
            ExpirationDates = expirationDates;
            Fingerprints = fingerprints;
            Id = id;
            SerialNumbers = serialNumbers;
        }
    }
}

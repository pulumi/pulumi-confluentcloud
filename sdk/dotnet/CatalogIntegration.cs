// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ConfluentCloud
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ### Option #1: Manage multiple Catalog Integrations in the same Pulumi Stack
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using ConfluentCloud = Pulumi.ConfluentCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new ConfluentCloud.CatalogIntegration("example", new()
    ///     {
    ///         Environment = new ConfluentCloud.Inputs.CatalogIntegrationEnvironmentArgs
    ///         {
    ///             Id = staging.Id,
    ///         },
    ///         KafkaCluster = new ConfluentCloud.Inputs.CatalogIntegrationKafkaClusterArgs
    ///         {
    ///             Id = stagingConfluentKafkaCluster.Id,
    ///         },
    ///         DisplayName = "catalog-integration-1",
    ///         AwsGlue = new ConfluentCloud.Inputs.CatalogIntegrationAwsGlueArgs
    ///         {
    ///             ProviderIntegrationId = main.Id,
    ///         },
    ///         Credentials = new ConfluentCloud.Inputs.CatalogIntegrationCredentialsArgs
    ///         {
    ///             Key = env_admin_tableflow_api_key.Id,
    ///             Secret = env_admin_tableflow_api_key.Secret,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Option #2: Manage a single Catalog Integration in the same Pulumi Stack
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using ConfluentCloud = Pulumi.ConfluentCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new ConfluentCloud.CatalogIntegration("example", new()
    ///     {
    ///         Environment = new ConfluentCloud.Inputs.CatalogIntegrationEnvironmentArgs
    ///         {
    ///             Id = staging.Id,
    ///         },
    ///         KafkaCluster = new ConfluentCloud.Inputs.CatalogIntegrationKafkaClusterArgs
    ///         {
    ///             Id = stagingConfluentKafkaCluster.Id,
    ///         },
    ///         DisplayName = "catalog-integration-1",
    ///         Snowflake = new ConfluentCloud.Inputs.CatalogIntegrationSnowflakeArgs
    ///         {
    ///             Endpoint = "https://vuser1_polaris.snowflakecomputing.com/",
    ///             ClientId = "***REDACTED***",
    ///             ClientSecret = "***REDACTED***",
    ///             Warehouse = "catalog-name",
    ///             AllowedScope = "session:role:R1",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// You can import a Catalog Integration by using the Catalog Integration name, Environment ID, and Kafka Cluster ID, in the format `&lt;Environment ID&gt;/&lt;Kafka Cluster ID&gt;/&lt;Catalog Integration Id&gt;`, for example:
    /// 
    /// Option #1: Manage multiple Catalog Integrations in the same Pulumi Stack
    /// 
    /// $ export IMPORT_TABLEFLOW_API_KEY="&lt;tableflow_api_key&gt;"
    /// 
    /// $ export IMPORT_TABLEFLOW_API_SECRET="&lt;tableflow_api_secret&gt;"
    /// 
    /// ```sh
    /// $ pulumi import confluentcloud:index/catalogIntegration:CatalogIntegration example env-abc123/lkc-abc123/tci-abc123
    /// ```
    /// 
    /// Option #2: Manage a single Catalog Integration in the same Pulumi Stack
    /// 
    /// ```sh
    /// $ pulumi import confluentcloud:index/catalogIntegration:CatalogIntegration example env-abc123/lkc-abc123/tci-abc123
    /// ```
    /// 
    /// !&gt; **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
    /// </summary>
    [ConfluentCloudResourceType("confluentcloud:index/catalogIntegration:CatalogIntegration")]
    public partial class CatalogIntegration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// supports the following (see [Integrate Tableflow with the AWS Glue Catalog in Confluent Cloud](https://docs.confluent.io/cloud/current/topics/tableflow/how-to-guides/catalog-integration/integrate-with-aws-glue-catalog.html) for more details):
        /// </summary>
        [Output("awsGlue")]
        public Output<Outputs.CatalogIntegrationAwsGlue?> AwsGlue { get; private set; } = null!;

        /// <summary>
        /// The Cluster API Credentials.
        /// </summary>
        [Output("credentials")]
        public Output<Outputs.CatalogIntegrationCredentials?> Credentials { get; private set; } = null!;

        /// <summary>
        /// The name of the catalog integration.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
        /// </summary>
        [Output("environment")]
        public Output<Outputs.CatalogIntegrationEnvironment> Environment { get; private set; } = null!;

        [Output("kafkaCluster")]
        public Output<Outputs.CatalogIntegrationKafkaCluster> KafkaCluster { get; private set; } = null!;

        /// <summary>
        /// supports the following (see [Integrate Tableflow with Snowflake Open Catalog or Apache Polaris in Confluent Cloud](https://docs.confluent.io/cloud/current/topics/tableflow/how-to-guides/catalog-integration/integrate-with-snowflake-open-catalog-or-apache-polaris.html) for more details):
        /// </summary>
        [Output("snowflake")]
        public Output<Outputs.CatalogIntegrationSnowflake?> Snowflake { get; private set; } = null!;

        /// <summary>
        /// (Optional Boolean) Indicates whether the Catalog Integration should be suspended.
        /// </summary>
        [Output("suspended")]
        public Output<bool> Suspended { get; private set; } = null!;


        /// <summary>
        /// Create a CatalogIntegration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CatalogIntegration(string name, CatalogIntegrationArgs args, CustomResourceOptions? options = null)
            : base("confluentcloud:index/catalogIntegration:CatalogIntegration", name, args ?? new CatalogIntegrationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CatalogIntegration(string name, Input<string> id, CatalogIntegrationState? state = null, CustomResourceOptions? options = null)
            : base("confluentcloud:index/catalogIntegration:CatalogIntegration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "credentials",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CatalogIntegration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CatalogIntegration Get(string name, Input<string> id, CatalogIntegrationState? state = null, CustomResourceOptions? options = null)
        {
            return new CatalogIntegration(name, id, state, options);
        }
    }

    public sealed class CatalogIntegrationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// supports the following (see [Integrate Tableflow with the AWS Glue Catalog in Confluent Cloud](https://docs.confluent.io/cloud/current/topics/tableflow/how-to-guides/catalog-integration/integrate-with-aws-glue-catalog.html) for more details):
        /// </summary>
        [Input("awsGlue")]
        public Input<Inputs.CatalogIntegrationAwsGlueArgs>? AwsGlue { get; set; }

        [Input("credentials")]
        private Input<Inputs.CatalogIntegrationCredentialsArgs>? _credentials;

        /// <summary>
        /// The Cluster API Credentials.
        /// </summary>
        public Input<Inputs.CatalogIntegrationCredentialsArgs>? Credentials
        {
            get => _credentials;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _credentials = Output.Tuple<Input<Inputs.CatalogIntegrationCredentialsArgs>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name of the catalog integration.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
        /// </summary>
        [Input("environment", required: true)]
        public Input<Inputs.CatalogIntegrationEnvironmentArgs> Environment { get; set; } = null!;

        [Input("kafkaCluster", required: true)]
        public Input<Inputs.CatalogIntegrationKafkaClusterArgs> KafkaCluster { get; set; } = null!;

        /// <summary>
        /// supports the following (see [Integrate Tableflow with Snowflake Open Catalog or Apache Polaris in Confluent Cloud](https://docs.confluent.io/cloud/current/topics/tableflow/how-to-guides/catalog-integration/integrate-with-snowflake-open-catalog-or-apache-polaris.html) for more details):
        /// </summary>
        [Input("snowflake")]
        public Input<Inputs.CatalogIntegrationSnowflakeArgs>? Snowflake { get; set; }

        public CatalogIntegrationArgs()
        {
        }
        public static new CatalogIntegrationArgs Empty => new CatalogIntegrationArgs();
    }

    public sealed class CatalogIntegrationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// supports the following (see [Integrate Tableflow with the AWS Glue Catalog in Confluent Cloud](https://docs.confluent.io/cloud/current/topics/tableflow/how-to-guides/catalog-integration/integrate-with-aws-glue-catalog.html) for more details):
        /// </summary>
        [Input("awsGlue")]
        public Input<Inputs.CatalogIntegrationAwsGlueGetArgs>? AwsGlue { get; set; }

        [Input("credentials")]
        private Input<Inputs.CatalogIntegrationCredentialsGetArgs>? _credentials;

        /// <summary>
        /// The Cluster API Credentials.
        /// </summary>
        public Input<Inputs.CatalogIntegrationCredentialsGetArgs>? Credentials
        {
            get => _credentials;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _credentials = Output.Tuple<Input<Inputs.CatalogIntegrationCredentialsGetArgs>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name of the catalog integration.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
        /// </summary>
        [Input("environment")]
        public Input<Inputs.CatalogIntegrationEnvironmentGetArgs>? Environment { get; set; }

        [Input("kafkaCluster")]
        public Input<Inputs.CatalogIntegrationKafkaClusterGetArgs>? KafkaCluster { get; set; }

        /// <summary>
        /// supports the following (see [Integrate Tableflow with Snowflake Open Catalog or Apache Polaris in Confluent Cloud](https://docs.confluent.io/cloud/current/topics/tableflow/how-to-guides/catalog-integration/integrate-with-snowflake-open-catalog-or-apache-polaris.html) for more details):
        /// </summary>
        [Input("snowflake")]
        public Input<Inputs.CatalogIntegrationSnowflakeGetArgs>? Snowflake { get; set; }

        /// <summary>
        /// (Optional Boolean) Indicates whether the Catalog Integration should be suspended.
        /// </summary>
        [Input("suspended")]
        public Input<bool>? Suspended { get; set; }

        public CatalogIntegrationState()
        {
        }
        public static new CatalogIntegrationState Empty => new CatalogIntegrationState();
    }
}

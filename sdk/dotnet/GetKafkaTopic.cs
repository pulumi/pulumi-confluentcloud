// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ConfluentCloud
{
    public static class GetKafkaTopic
    {
        /// <summary>
        /// `confluentcloud.KafkaTopic` describes a Kafka Topic data source.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var orders = Output.Create(ConfluentCloud.GetKafkaTopic.InvokeAsync(new ConfluentCloud.GetKafkaTopicArgs
        ///         {
        ///             KafkaCluster = new ConfluentCloud.Inputs.GetKafkaTopicKafkaClusterArgs
        ///             {
        ///                 Id = confluent_kafka_cluster.Basic_cluster.Id,
        ///             },
        ///             TopicName = "orders",
        ///             HttpEndpoint = confluent_kafka_cluster.Basic_cluster.Http_endpoint,
        ///             Credentials = new ConfluentCloud.Inputs.GetKafkaTopicCredentialsArgs
        ///             {
        ///                 Key = "&lt;Kafka API Key for confluent_kafka_cluster.basic-cluster&gt;",
        ///                 Secret = "&lt;Kafka API Secret for confluent_kafka_cluster.basic-cluster&gt;",
        ///             },
        ///         }));
        ///         this.Config = orders.Apply(orders =&gt; orders.Config);
        ///     }
        /// 
        ///     [Output("config")]
        ///     public Output&lt;string&gt; Config { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetKafkaTopicResult> InvokeAsync(GetKafkaTopicArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetKafkaTopicResult>("confluentcloud:index/getKafkaTopic:getKafkaTopic", args ?? new GetKafkaTopicArgs(), options.WithDefaults());

        /// <summary>
        /// `confluentcloud.KafkaTopic` describes a Kafka Topic data source.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var orders = Output.Create(ConfluentCloud.GetKafkaTopic.InvokeAsync(new ConfluentCloud.GetKafkaTopicArgs
        ///         {
        ///             KafkaCluster = new ConfluentCloud.Inputs.GetKafkaTopicKafkaClusterArgs
        ///             {
        ///                 Id = confluent_kafka_cluster.Basic_cluster.Id,
        ///             },
        ///             TopicName = "orders",
        ///             HttpEndpoint = confluent_kafka_cluster.Basic_cluster.Http_endpoint,
        ///             Credentials = new ConfluentCloud.Inputs.GetKafkaTopicCredentialsArgs
        ///             {
        ///                 Key = "&lt;Kafka API Key for confluent_kafka_cluster.basic-cluster&gt;",
        ///                 Secret = "&lt;Kafka API Secret for confluent_kafka_cluster.basic-cluster&gt;",
        ///             },
        ///         }));
        ///         this.Config = orders.Apply(orders =&gt; orders.Config);
        ///     }
        /// 
        ///     [Output("config")]
        ///     public Output&lt;string&gt; Config { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetKafkaTopicResult> Invoke(GetKafkaTopicInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetKafkaTopicResult>("confluentcloud:index/getKafkaTopic:getKafkaTopic", args ?? new GetKafkaTopicInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetKafkaTopicArgs : Pulumi.InvokeArgs
    {
        [Input("credentials", required: true)]
        public Inputs.GetKafkaTopicCredentialsArgs Credentials { get; set; } = null!;

        /// <summary>
        /// The REST endpoint of the Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
        /// </summary>
        [Input("httpEndpoint", required: true)]
        public string HttpEndpoint { get; set; } = null!;

        [Input("kafkaCluster", required: true)]
        public Inputs.GetKafkaTopicKafkaClusterArgs KafkaCluster { get; set; } = null!;

        /// <summary>
        /// The name of the topic, for example, `orders-1`. The topic name can be up to 255 characters in length and can contain only alphanumeric characters, hyphens, and underscores.
        /// </summary>
        [Input("topicName", required: true)]
        public string TopicName { get; set; } = null!;

        public GetKafkaTopicArgs()
        {
        }
    }

    public sealed class GetKafkaTopicInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("credentials", required: true)]
        public Input<Inputs.GetKafkaTopicCredentialsInputArgs> Credentials { get; set; } = null!;

        /// <summary>
        /// The REST endpoint of the Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
        /// </summary>
        [Input("httpEndpoint", required: true)]
        public Input<string> HttpEndpoint { get; set; } = null!;

        [Input("kafkaCluster", required: true)]
        public Input<Inputs.GetKafkaTopicKafkaClusterInputArgs> KafkaCluster { get; set; } = null!;

        /// <summary>
        /// The name of the topic, for example, `orders-1`. The topic name can be up to 255 characters in length and can contain only alphanumeric characters, hyphens, and underscores.
        /// </summary>
        [Input("topicName", required: true)]
        public Input<string> TopicName { get; set; } = null!;

        public GetKafkaTopicInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetKafkaTopicResult
    {
        /// <summary>
        /// (Optional Map) The custom topic settings:
        /// </summary>
        public readonly ImmutableDictionary<string, string> Config;
        public readonly Outputs.GetKafkaTopicCredentialsResult Credentials;
        public readonly string HttpEndpoint;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly Outputs.GetKafkaTopicKafkaClusterResult KafkaCluster;
        /// <summary>
        /// (Required Number) The number of partitions to create in the topic. Defaults to `6`.
        /// </summary>
        public readonly int PartitionsCount;
        public readonly string TopicName;

        [OutputConstructor]
        private GetKafkaTopicResult(
            ImmutableDictionary<string, string> config,

            Outputs.GetKafkaTopicCredentialsResult credentials,

            string httpEndpoint,

            string id,

            Outputs.GetKafkaTopicKafkaClusterResult kafkaCluster,

            int partitionsCount,

            string topicName)
        {
            Config = config;
            Credentials = credentials;
            HttpEndpoint = httpEndpoint;
            Id = id;
            KafkaCluster = kafkaCluster;
            PartitionsCount = partitionsCount;
            TopicName = topicName;
        }
    }
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ConfluentCloud
{
    [ConfluentCloudResourceType("confluentcloud:index/schemaRegistryDek:SchemaRegistryDek")]
    public partial class SchemaRegistryDek : global::Pulumi.CustomResource
    {
        [Output("algorithm")]
        public Output<string?> Algorithm { get; private set; } = null!;

        /// <summary>
        /// The Cluster API Credentials.
        /// </summary>
        [Output("credentials")]
        public Output<Outputs.SchemaRegistryDekCredentials?> Credentials { get; private set; } = null!;

        [Output("encryptedKeyMaterial")]
        public Output<string> EncryptedKeyMaterial { get; private set; } = null!;

        /// <summary>
        /// Controls whether a dek should be soft or hard deleted. Set it to `true` if you want to hard delete a schema registry dek
        /// on destroy. Defaults to `false` (soft delete).
        /// </summary>
        [Output("hardDelete")]
        public Output<bool?> HardDelete { get; private set; } = null!;

        [Output("kekName")]
        public Output<string> KekName { get; private set; } = null!;

        [Output("keyMaterial")]
        public Output<string> KeyMaterial { get; private set; } = null!;

        /// <summary>
        /// The REST endpoint of the Schema Registry cluster, for example,
        /// `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
        /// </summary>
        [Output("restEndpoint")]
        public Output<string?> RestEndpoint { get; private set; } = null!;

        [Output("schemaRegistryCluster")]
        public Output<Outputs.SchemaRegistryDekSchemaRegistryCluster?> SchemaRegistryCluster { get; private set; } = null!;

        [Output("subjectName")]
        public Output<string> SubjectName { get; private set; } = null!;

        [Output("version")]
        public Output<int?> Version { get; private set; } = null!;


        /// <summary>
        /// Create a SchemaRegistryDek resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SchemaRegistryDek(string name, SchemaRegistryDekArgs args, CustomResourceOptions? options = null)
            : base("confluentcloud:index/schemaRegistryDek:SchemaRegistryDek", name, args ?? new SchemaRegistryDekArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SchemaRegistryDek(string name, Input<string> id, SchemaRegistryDekState? state = null, CustomResourceOptions? options = null)
            : base("confluentcloud:index/schemaRegistryDek:SchemaRegistryDek", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "credentials",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SchemaRegistryDek resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SchemaRegistryDek Get(string name, Input<string> id, SchemaRegistryDekState? state = null, CustomResourceOptions? options = null)
        {
            return new SchemaRegistryDek(name, id, state, options);
        }
    }

    public sealed class SchemaRegistryDekArgs : global::Pulumi.ResourceArgs
    {
        [Input("algorithm")]
        public Input<string>? Algorithm { get; set; }

        [Input("credentials")]
        private Input<Inputs.SchemaRegistryDekCredentialsArgs>? _credentials;

        /// <summary>
        /// The Cluster API Credentials.
        /// </summary>
        public Input<Inputs.SchemaRegistryDekCredentialsArgs>? Credentials
        {
            get => _credentials;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _credentials = Output.Tuple<Input<Inputs.SchemaRegistryDekCredentialsArgs>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("encryptedKeyMaterial")]
        public Input<string>? EncryptedKeyMaterial { get; set; }

        /// <summary>
        /// Controls whether a dek should be soft or hard deleted. Set it to `true` if you want to hard delete a schema registry dek
        /// on destroy. Defaults to `false` (soft delete).
        /// </summary>
        [Input("hardDelete")]
        public Input<bool>? HardDelete { get; set; }

        [Input("kekName", required: true)]
        public Input<string> KekName { get; set; } = null!;

        /// <summary>
        /// The REST endpoint of the Schema Registry cluster, for example,
        /// `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
        /// </summary>
        [Input("restEndpoint")]
        public Input<string>? RestEndpoint { get; set; }

        [Input("schemaRegistryCluster")]
        public Input<Inputs.SchemaRegistryDekSchemaRegistryClusterArgs>? SchemaRegistryCluster { get; set; }

        [Input("subjectName", required: true)]
        public Input<string> SubjectName { get; set; } = null!;

        [Input("version")]
        public Input<int>? Version { get; set; }

        public SchemaRegistryDekArgs()
        {
        }
        public static new SchemaRegistryDekArgs Empty => new SchemaRegistryDekArgs();
    }

    public sealed class SchemaRegistryDekState : global::Pulumi.ResourceArgs
    {
        [Input("algorithm")]
        public Input<string>? Algorithm { get; set; }

        [Input("credentials")]
        private Input<Inputs.SchemaRegistryDekCredentialsGetArgs>? _credentials;

        /// <summary>
        /// The Cluster API Credentials.
        /// </summary>
        public Input<Inputs.SchemaRegistryDekCredentialsGetArgs>? Credentials
        {
            get => _credentials;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _credentials = Output.Tuple<Input<Inputs.SchemaRegistryDekCredentialsGetArgs>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("encryptedKeyMaterial")]
        public Input<string>? EncryptedKeyMaterial { get; set; }

        /// <summary>
        /// Controls whether a dek should be soft or hard deleted. Set it to `true` if you want to hard delete a schema registry dek
        /// on destroy. Defaults to `false` (soft delete).
        /// </summary>
        [Input("hardDelete")]
        public Input<bool>? HardDelete { get; set; }

        [Input("kekName")]
        public Input<string>? KekName { get; set; }

        [Input("keyMaterial")]
        public Input<string>? KeyMaterial { get; set; }

        /// <summary>
        /// The REST endpoint of the Schema Registry cluster, for example,
        /// `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
        /// </summary>
        [Input("restEndpoint")]
        public Input<string>? RestEndpoint { get; set; }

        [Input("schemaRegistryCluster")]
        public Input<Inputs.SchemaRegistryDekSchemaRegistryClusterGetArgs>? SchemaRegistryCluster { get; set; }

        [Input("subjectName")]
        public Input<string>? SubjectName { get; set; }

        [Input("version")]
        public Input<int>? Version { get; set; }

        public SchemaRegistryDekState()
        {
        }
        public static new SchemaRegistryDekState Empty => new SchemaRegistryDekState();
    }
}

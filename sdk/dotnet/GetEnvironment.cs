// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ConfluentCloud
{
    public static class GetEnvironment
    {
        /// <summary>
        /// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// `confluentcloud.Environment` describes an Environment data source.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleUsingId = ConfluentCloud.GetEnvironment.Invoke(new()
        ///     {
        ///         Id = "env-abc123",
        ///     });
        /// 
        ///     var exampleUsingName = ConfluentCloud.GetEnvironment.Invoke(new()
        ///     {
        ///         DisplayName = "stag",
        ///     });
        /// 
        ///     var exampleUsingNameGetServiceAccount = ConfluentCloud.GetServiceAccount.Invoke(new()
        ///     {
        ///         DisplayName = "test_sa",
        ///     });
        /// 
        ///     var test_role_binding = new ConfluentCloud.RoleBinding("test-role-binding", new()
        ///     {
        ///         Principal = $"User:{exampleUsingNameGetServiceAccount.Apply(getServiceAccountResult =&gt; getServiceAccountResult.Id)}",
        ///         RoleName = "EnvironmentAdmin",
        ///         CrnPattern = exampleUsingName.Apply(getEnvironmentResult =&gt; getEnvironmentResult.ResourceName),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["exampleUsingId"] = exampleUsingId,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetEnvironmentResult> InvokeAsync(GetEnvironmentArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEnvironmentResult>("confluentcloud:index/getEnvironment:getEnvironment", args ?? new GetEnvironmentArgs(), options.WithDefaults());

        /// <summary>
        /// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// `confluentcloud.Environment` describes an Environment data source.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleUsingId = ConfluentCloud.GetEnvironment.Invoke(new()
        ///     {
        ///         Id = "env-abc123",
        ///     });
        /// 
        ///     var exampleUsingName = ConfluentCloud.GetEnvironment.Invoke(new()
        ///     {
        ///         DisplayName = "stag",
        ///     });
        /// 
        ///     var exampleUsingNameGetServiceAccount = ConfluentCloud.GetServiceAccount.Invoke(new()
        ///     {
        ///         DisplayName = "test_sa",
        ///     });
        /// 
        ///     var test_role_binding = new ConfluentCloud.RoleBinding("test-role-binding", new()
        ///     {
        ///         Principal = $"User:{exampleUsingNameGetServiceAccount.Apply(getServiceAccountResult =&gt; getServiceAccountResult.Id)}",
        ///         RoleName = "EnvironmentAdmin",
        ///         CrnPattern = exampleUsingName.Apply(getEnvironmentResult =&gt; getEnvironmentResult.ResourceName),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["exampleUsingId"] = exampleUsingId,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetEnvironmentResult> Invoke(GetEnvironmentInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEnvironmentResult>("confluentcloud:index/getEnvironment:getEnvironment", args ?? new GetEnvironmentInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// `confluentcloud.Environment` describes an Environment data source.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleUsingId = ConfluentCloud.GetEnvironment.Invoke(new()
        ///     {
        ///         Id = "env-abc123",
        ///     });
        /// 
        ///     var exampleUsingName = ConfluentCloud.GetEnvironment.Invoke(new()
        ///     {
        ///         DisplayName = "stag",
        ///     });
        /// 
        ///     var exampleUsingNameGetServiceAccount = ConfluentCloud.GetServiceAccount.Invoke(new()
        ///     {
        ///         DisplayName = "test_sa",
        ///     });
        /// 
        ///     var test_role_binding = new ConfluentCloud.RoleBinding("test-role-binding", new()
        ///     {
        ///         Principal = $"User:{exampleUsingNameGetServiceAccount.Apply(getServiceAccountResult =&gt; getServiceAccountResult.Id)}",
        ///         RoleName = "EnvironmentAdmin",
        ///         CrnPattern = exampleUsingName.Apply(getEnvironmentResult =&gt; getEnvironmentResult.ResourceName),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["exampleUsingId"] = exampleUsingId,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetEnvironmentResult> Invoke(GetEnvironmentInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetEnvironmentResult>("confluentcloud:index/getEnvironment:getEnvironment", args ?? new GetEnvironmentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEnvironmentArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A human-readable name for the Environment.
        /// 
        /// &gt; **Note:** Exactly one from the `id` and `display_name` attributes must be specified.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        /// <summary>
        /// The ID of the Environment, for example, `env-abc123`.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        [Input("streamGovernance")]
        public Inputs.GetEnvironmentStreamGovernanceArgs? StreamGovernance { get; set; }

        public GetEnvironmentArgs()
        {
        }
        public static new GetEnvironmentArgs Empty => new GetEnvironmentArgs();
    }

    public sealed class GetEnvironmentInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A human-readable name for the Environment.
        /// 
        /// &gt; **Note:** Exactly one from the `id` and `display_name` attributes must be specified.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The ID of the Environment, for example, `env-abc123`.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("streamGovernance")]
        public Input<Inputs.GetEnvironmentStreamGovernanceInputArgs>? StreamGovernance { get; set; }

        public GetEnvironmentInvokeArgs()
        {
        }
        public static new GetEnvironmentInvokeArgs Empty => new GetEnvironmentInvokeArgs();
    }


    [OutputType]
    public sealed class GetEnvironmentResult
    {
        /// <summary>
        /// (Required String) A human-readable name for the Environment.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// (Required String) The ID of the Environment, for example, `env-abc123`.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (Required String) The Confluent Resource Name of the Environment, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123`.
        /// </summary>
        public readonly string ResourceName;
        public readonly Outputs.GetEnvironmentStreamGovernanceResult StreamGovernance;

        [OutputConstructor]
        private GetEnvironmentResult(
            string displayName,

            string id,

            string resourceName,

            Outputs.GetEnvironmentStreamGovernanceResult streamGovernance)
        {
            DisplayName = displayName;
            Id = id;
            ResourceName = resourceName;
            StreamGovernance = streamGovernance;
        }
    }
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ConfluentCloud
{
    public static class GetSchema
    {
        /// <summary>
        /// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// `confluentcloud.Schema` describes a Schema data source.
        /// 
        /// ## Example Usage
        /// 
        /// ### Option #1: Manage multiple Schema Registry clusters in the same Pulumi Stack
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var purchase_v1 = ConfluentCloud.GetSchema.Invoke(new()
        ///     {
        ///         SchemaRegistryCluster = new ConfluentCloud.Inputs.GetSchemaSchemaRegistryClusterInputArgs
        ///         {
        ///             Id = essentials.Id,
        ///         },
        ///         RestEndpoint = essentials.RestEndpoint,
        ///         SubjectName = "proto-purchase-value",
        ///         SchemaIdentifier = 10001,
        ///         Credentials = new ConfluentCloud.Inputs.GetSchemaCredentialsInputArgs
        ///         {
        ///             Key = "&lt;Schema Registry API Key for data.confluent_schema_registry_cluster.essentials&gt;",
        ///             Secret = "&lt;Schema Registry API Secret for data.confluent_schema_registry_cluster.essentials&gt;",
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["schema"] = purchase_v1.Apply(purchase_v1 =&gt; purchase_v1.Apply(getSchemaResult =&gt; getSchemaResult.Schema)),
        ///     };
        /// });
        /// ```
        /// 
        /// ### Option #2: Manage a single Schema Registry cluster in the same Pulumi Stack
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var purchase_v1 = ConfluentCloud.GetSchema.Invoke(new()
        ///     {
        ///         SubjectName = "proto-purchase-value",
        ///         SchemaIdentifier = 10001,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["schema"] = purchase_v1.Apply(purchase_v1 =&gt; purchase_v1.Apply(getSchemaResult =&gt; getSchemaResult.Schema)),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetSchemaResult> InvokeAsync(GetSchemaArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSchemaResult>("confluentcloud:index/getSchema:getSchema", args ?? new GetSchemaArgs(), options.WithDefaults());

        /// <summary>
        /// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// `confluentcloud.Schema` describes a Schema data source.
        /// 
        /// ## Example Usage
        /// 
        /// ### Option #1: Manage multiple Schema Registry clusters in the same Pulumi Stack
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var purchase_v1 = ConfluentCloud.GetSchema.Invoke(new()
        ///     {
        ///         SchemaRegistryCluster = new ConfluentCloud.Inputs.GetSchemaSchemaRegistryClusterInputArgs
        ///         {
        ///             Id = essentials.Id,
        ///         },
        ///         RestEndpoint = essentials.RestEndpoint,
        ///         SubjectName = "proto-purchase-value",
        ///         SchemaIdentifier = 10001,
        ///         Credentials = new ConfluentCloud.Inputs.GetSchemaCredentialsInputArgs
        ///         {
        ///             Key = "&lt;Schema Registry API Key for data.confluent_schema_registry_cluster.essentials&gt;",
        ///             Secret = "&lt;Schema Registry API Secret for data.confluent_schema_registry_cluster.essentials&gt;",
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["schema"] = purchase_v1.Apply(purchase_v1 =&gt; purchase_v1.Apply(getSchemaResult =&gt; getSchemaResult.Schema)),
        ///     };
        /// });
        /// ```
        /// 
        /// ### Option #2: Manage a single Schema Registry cluster in the same Pulumi Stack
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var purchase_v1 = ConfluentCloud.GetSchema.Invoke(new()
        ///     {
        ///         SubjectName = "proto-purchase-value",
        ///         SchemaIdentifier = 10001,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["schema"] = purchase_v1.Apply(purchase_v1 =&gt; purchase_v1.Apply(getSchemaResult =&gt; getSchemaResult.Schema)),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetSchemaResult> Invoke(GetSchemaInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSchemaResult>("confluentcloud:index/getSchema:getSchema", args ?? new GetSchemaInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSchemaArgs : global::Pulumi.InvokeArgs
    {
        [Input("credentials")]
        private Inputs.GetSchemaCredentialsArgs? _credentials;
        public Inputs.GetSchemaCredentialsArgs? Credentials
        {
            get => _credentials;
            set => _credentials = value;
        }

        /// <summary>
        /// (Optional Block) See [here](https://docs.confluent.io/platform/7.5/schema-registry/fundamentals/data-contracts.html) for more details. Supports the following:
        /// </summary>
        [Input("metadata")]
        public Inputs.GetSchemaMetadataArgs? Metadata { get; set; }

        /// <summary>
        /// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
        /// </summary>
        [Input("restEndpoint")]
        public string? RestEndpoint { get; set; }

        /// <summary>
        /// (Optional Block) The list of schema rules. See [Data Contracts for Schema Registry](https://docs.confluent.io/platform/7.5/schema-registry/fundamentals/data-contracts.html#rules) for more details. For example, these rules can enforce that a field that contains sensitive information must be encrypted, or that a message containing an invalid age must be sent to a dead letter queue.
        /// </summary>
        [Input("ruleset")]
        public Inputs.GetSchemaRulesetArgs? Ruleset { get; set; }

        /// <summary>
        /// The globally unique ID of the Schema, for example, `100003`. If the same schema is registered under a different subject, the same identifier will be returned. However, the `version` of the schema may be different under different subjects.
        /// 
        /// &gt; **Note:** A Schema Registry API key consists of a key and a secret. Schema Registry API keys are required to interact with Schema Registry clusters in Confluent Cloud. Each Schema Registry API key is valid for one specific Schema Registry cluster.
        /// </summary>
        [Input("schemaIdentifier", required: true)]
        public int SchemaIdentifier { get; set; }

        [Input("schemaRegistryCluster")]
        public Inputs.GetSchemaSchemaRegistryClusterArgs? SchemaRegistryCluster { get; set; }

        /// <summary>
        /// The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`. Schemas evolve safely, following a compatibility mode defined, under a subject name.
        /// </summary>
        [Input("subjectName", required: true)]
        public string SubjectName { get; set; } = null!;

        public GetSchemaArgs()
        {
        }
        public static new GetSchemaArgs Empty => new GetSchemaArgs();
    }

    public sealed class GetSchemaInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("credentials")]
        private Input<Inputs.GetSchemaCredentialsInputArgs>? _credentials;
        public Input<Inputs.GetSchemaCredentialsInputArgs>? Credentials
        {
            get => _credentials;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _credentials = Output.Tuple<Input<Inputs.GetSchemaCredentialsInputArgs>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// (Optional Block) See [here](https://docs.confluent.io/platform/7.5/schema-registry/fundamentals/data-contracts.html) for more details. Supports the following:
        /// </summary>
        [Input("metadata")]
        public Input<Inputs.GetSchemaMetadataInputArgs>? Metadata { get; set; }

        /// <summary>
        /// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
        /// </summary>
        [Input("restEndpoint")]
        public Input<string>? RestEndpoint { get; set; }

        /// <summary>
        /// (Optional Block) The list of schema rules. See [Data Contracts for Schema Registry](https://docs.confluent.io/platform/7.5/schema-registry/fundamentals/data-contracts.html#rules) for more details. For example, these rules can enforce that a field that contains sensitive information must be encrypted, or that a message containing an invalid age must be sent to a dead letter queue.
        /// </summary>
        [Input("ruleset")]
        public Input<Inputs.GetSchemaRulesetInputArgs>? Ruleset { get; set; }

        /// <summary>
        /// The globally unique ID of the Schema, for example, `100003`. If the same schema is registered under a different subject, the same identifier will be returned. However, the `version` of the schema may be different under different subjects.
        /// 
        /// &gt; **Note:** A Schema Registry API key consists of a key and a secret. Schema Registry API keys are required to interact with Schema Registry clusters in Confluent Cloud. Each Schema Registry API key is valid for one specific Schema Registry cluster.
        /// </summary>
        [Input("schemaIdentifier", required: true)]
        public Input<int> SchemaIdentifier { get; set; } = null!;

        [Input("schemaRegistryCluster")]
        public Input<Inputs.GetSchemaSchemaRegistryClusterInputArgs>? SchemaRegistryCluster { get; set; }

        /// <summary>
        /// The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`. Schemas evolve safely, following a compatibility mode defined, under a subject name.
        /// </summary>
        [Input("subjectName", required: true)]
        public Input<string> SubjectName { get; set; } = null!;

        public GetSchemaInvokeArgs()
        {
        }
        public static new GetSchemaInvokeArgs Empty => new GetSchemaInvokeArgs();
    }


    [OutputType]
    public sealed class GetSchemaResult
    {
        public readonly Outputs.GetSchemaCredentialsResult? Credentials;
        /// <summary>
        /// (Required String) The format of the schema. Accepted values are: `AVRO`, `PROTOBUF`, and `JSON`.
        /// </summary>
        public readonly string Format;
        public readonly bool HardDelete;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (Optional Block) See [here](https://docs.confluent.io/platform/7.5/schema-registry/fundamentals/data-contracts.html) for more details. Supports the following:
        /// </summary>
        public readonly Outputs.GetSchemaMetadataResult Metadata;
        public readonly bool RecreateOnUpdate;
        public readonly string? RestEndpoint;
        /// <summary>
        /// (Optional Block) The list of schema rules. See [Data Contracts for Schema Registry](https://docs.confluent.io/platform/7.5/schema-registry/fundamentals/data-contracts.html#rules) for more details. For example, these rules can enforce that a field that contains sensitive information must be encrypted, or that a message containing an invalid age must be sent to a dead letter queue.
        /// </summary>
        public readonly Outputs.GetSchemaRulesetResult Ruleset;
        /// <summary>
        /// (Required String) The schema string, for example, `file("./schema_version_1.avsc")`.
        /// </summary>
        public readonly string Schema;
        public readonly int SchemaIdentifier;
        /// <summary>
        /// (Optional List) The list of referenced schemas (see [Schema References](https://docs.confluent.io/platform/current/schema-registry/serdes-develop/index.html#schema-references) for more details):
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSchemaSchemaReferenceResult> SchemaReferences;
        public readonly Outputs.GetSchemaSchemaRegistryClusterResult? SchemaRegistryCluster;
        public readonly bool SkipValidationDuringPlan;
        /// <summary>
        /// (Required String) The name for the reference. (For Avro Schema, the reference name is the fully qualified schema name, for JSON Schema it is a URL, and for Protobuf Schema, it is the name of another Protobuf file.)
        /// </summary>
        public readonly string SubjectName;
        /// <summary>
        /// (Required Integer) The version of the Schema, for example, `4`.
        /// </summary>
        public readonly int Version;

        [OutputConstructor]
        private GetSchemaResult(
            Outputs.GetSchemaCredentialsResult? credentials,

            string format,

            bool hardDelete,

            string id,

            Outputs.GetSchemaMetadataResult metadata,

            bool recreateOnUpdate,

            string? restEndpoint,

            Outputs.GetSchemaRulesetResult ruleset,

            string schema,

            int schemaIdentifier,

            ImmutableArray<Outputs.GetSchemaSchemaReferenceResult> schemaReferences,

            Outputs.GetSchemaSchemaRegistryClusterResult? schemaRegistryCluster,

            bool skipValidationDuringPlan,

            string subjectName,

            int version)
        {
            Credentials = credentials;
            Format = format;
            HardDelete = hardDelete;
            Id = id;
            Metadata = metadata;
            RecreateOnUpdate = recreateOnUpdate;
            RestEndpoint = restEndpoint;
            Ruleset = ruleset;
            Schema = schema;
            SchemaIdentifier = schemaIdentifier;
            SchemaReferences = schemaReferences;
            SchemaRegistryCluster = schemaRegistryCluster;
            SkipValidationDuringPlan = skipValidationDuringPlan;
            SubjectName = subjectName;
            Version = version;
        }
    }
}

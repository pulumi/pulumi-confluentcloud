// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ConfluentCloud.Inputs
{

    public sealed class GetSchemaRulesetMigrationRuleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// (Optional Boolean) The boolean flag to control whether the rule should be disabled.
        /// </summary>
        [Input("disabled")]
        public bool? Disabled { get; set; }

        /// <summary>
        /// (Optional String) An optional description of the rule.
        /// </summary>
        [Input("doc")]
        public string? Doc { get; set; }

        /// <summary>
        /// (Optional String) The rule body. Data quality and transformation rules use `CEL` language expressions, data migration rules use `JSONata` expressions. Defaults to "".
        /// </summary>
        [Input("expr")]
        public string? Expr { get; set; }

        /// <summary>
        /// (Required String) The kind of the rule. Accepted values are `CONDITION` and `TRANSFORM`. `CONDITION` - validate the value of a field, `TRANSFORM` - transform the value of a field. Data quality rules use `CONDITION` kind, data transformation, encryption and migration rules use `TRANSFORM` kind.
        /// </summary>
        [Input("kind", required: true)]
        public string Kind { get; set; } = null!;

        /// <summary>
        /// (Required String) The mode of the rule. Accepted values are `UPGRADE`, `DOWNGRADE`, `UPDOWN`, `WRITE`, `READ`, and `WRITEREAD`.
        /// </summary>
        [Input("mode", required: true)]
        public string Mode { get; set; } = null!;

        /// <summary>
        /// (Required String) A user-defined name that can be used to reference the rule.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// (Optional String) An optional action to execute if the rule fails, otherwise the built-in action type `ERROR` is used. For `UPDOWN` and `WRITEREAD` rules, one can specify two actions separated by commas, as mentioned above.
        /// </summary>
        [Input("onFailure")]
        public string? OnFailure { get; set; }

        /// <summary>
        /// (Optional String) An optional action to execute if the rule succeeds, otherwise the built-in action type `NONE` is used. For `UPDOWN` and `WRITEREAD` rules, one can specify two actions separated by commas, such as `NONE,ERROR` for a `WRITEREAD` rule. In this case `NONE` applies to `WRITE` and `ERROR` applies to `READ`.
        /// </summary>
        [Input("onSuccess")]
        public string? OnSuccess { get; set; }

        [Input("params", required: true)]
        private Dictionary<string, string>? _params;

        /// <summary>
        /// (Optional Configuration Block) A set of static parameters for the rule, which is optional. These are key-value pairs that are passed to the rule.
        /// </summary>
        public Dictionary<string, string> Params
        {
            get => _params ?? (_params = new Dictionary<string, string>());
            set => _params = value;
        }

        [Input("tags", required: true)]
        private List<string>? _tags;

        /// <summary>
        /// (Optional String List) The tags to which the rule applies, if any.
        /// </summary>
        public List<string> Tags
        {
            get => _tags ?? (_tags = new List<string>());
            set => _tags = value;
        }

        /// <summary>
        /// (Required String) The type of rule, which invokes a specific rule executor that that will run the rule. Google Common Expression Language (`CEL`) is used for data quality and transformation rules, Confluent `ENCRYPT` is used for data encryption rules, and `JSONata` is used for migration rules.
        /// </summary>
        [Input("type", required: true)]
        public string Type { get; set; } = null!;

        public GetSchemaRulesetMigrationRuleArgs()
        {
        }
        public static new GetSchemaRulesetMigrationRuleArgs Empty => new GetSchemaRulesetMigrationRuleArgs();
    }
}

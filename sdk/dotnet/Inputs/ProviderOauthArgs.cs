// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ConfluentCloud.Inputs
{

    public sealed class ProviderOauthArgs : global::Pulumi.ResourceArgs
    {
        [Input("oauthExternalAccessToken")]
        private Input<string>? _oauthExternalAccessToken;

        /// <summary>
        /// OAuth existing static access token already fetched from external Identity Provider.
        /// </summary>
        public Input<string>? OauthExternalAccessToken
        {
            get => _oauthExternalAccessToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _oauthExternalAccessToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// OAuth token application client id from external Identity Provider.
        /// </summary>
        [Input("oauthExternalClientId")]
        public Input<string>? OauthExternalClientId { get; set; }

        [Input("oauthExternalClientSecret")]
        private Input<string>? _oauthExternalClientSecret;

        /// <summary>
        /// OAuth token application client secret from external Identity Provider.
        /// </summary>
        public Input<string>? OauthExternalClientSecret
        {
            get => _oauthExternalClientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _oauthExternalClientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// OAuth client application scope, this is a required field when using Microsoft Azure Entra ID as the identity provider.
        /// </summary>
        [Input("oauthExternalTokenScope")]
        public Input<string>? OauthExternalTokenScope { get; set; }

        /// <summary>
        /// OAuth token URL to fetch access token from external Identity Provider.
        /// </summary>
        [Input("oauthExternalTokenUrl")]
        public Input<string>? OauthExternalTokenUrl { get; set; }

        /// <summary>
        /// OAuth identity pool id used for processing external token and exchange STS token, registered with Confluent Cloud.
        /// </summary>
        [Input("oauthIdentityPoolId", required: true)]
        public Input<string> OauthIdentityPoolId { get; set; } = null!;

        /// <summary>
        /// OAuth STS access token expired in second from Confluent Cloud
        /// </summary>
        [Input("oauthStsTokenExpiredInSeconds")]
        public Input<string>? OauthStsTokenExpiredInSeconds { get; set; }

        public ProviderOauthArgs()
        {
        }
        public static new ProviderOauthArgs Empty => new ProviderOauthArgs();
    }
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ConfluentCloud
{
    public static class GetIpAddresses
    {
        /// <summary>
        /// [![Preview](https://img.shields.io/badge/Lifecycle%20Stage-Preview-%2300afba)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// &gt; **Note:** `confluentcloud.getIpAddresses` data source is available in **Preview** for early adopters. Preview features are introduced to gather customer feedback. This feature should be used only for evaluation and non-production testing purposes or to provide feedback to Confluent, particularly as it becomes more widely available in follow-on editions.  
        /// **Preview** features are intended for evaluation use in development and testing environments only, and not for production use. The warranty, SLA, and Support Services provisions of your agreement with Confluent do not apply to Preview features. Preview features are considered to be a Proof of Concept as defined in the Confluent Cloud Terms of Service. Confluent may discontinue providing preview releases of the Preview features at any time in Confluent’s sole discretion.
        /// 
        /// `confluentcloud.getIpAddresses` describes IP Addresses data source.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = ConfluentCloud.GetIpAddresses.Invoke(new()
        ///     {
        ///         Filter = new ConfluentCloud.Inputs.GetIpAddressesFilterInputArgs
        ///         {
        ///             Clouds = new[]
        ///             {
        ///                 "AWS",
        ///             },
        ///             Regions = new[]
        ///             {
        ///                 "us-east-1",
        ///                 "us-east-2",
        ///             },
        ///             Services = new[]
        ///             {
        ///                 "KAFKA",
        ///             },
        ///             AddressTypes = new[]
        ///             {
        ///                 "EGRESS",
        ///             },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["ipAddresses"] = main.Apply(getIpAddressesResult =&gt; getIpAddressesResult.IpAddresses),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetIpAddressesResult> InvokeAsync(GetIpAddressesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIpAddressesResult>("confluentcloud:index/getIpAddresses:getIpAddresses", args ?? new GetIpAddressesArgs(), options.WithDefaults());

        /// <summary>
        /// [![Preview](https://img.shields.io/badge/Lifecycle%20Stage-Preview-%2300afba)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// &gt; **Note:** `confluentcloud.getIpAddresses` data source is available in **Preview** for early adopters. Preview features are introduced to gather customer feedback. This feature should be used only for evaluation and non-production testing purposes or to provide feedback to Confluent, particularly as it becomes more widely available in follow-on editions.  
        /// **Preview** features are intended for evaluation use in development and testing environments only, and not for production use. The warranty, SLA, and Support Services provisions of your agreement with Confluent do not apply to Preview features. Preview features are considered to be a Proof of Concept as defined in the Confluent Cloud Terms of Service. Confluent may discontinue providing preview releases of the Preview features at any time in Confluent’s sole discretion.
        /// 
        /// `confluentcloud.getIpAddresses` describes IP Addresses data source.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = ConfluentCloud.GetIpAddresses.Invoke(new()
        ///     {
        ///         Filter = new ConfluentCloud.Inputs.GetIpAddressesFilterInputArgs
        ///         {
        ///             Clouds = new[]
        ///             {
        ///                 "AWS",
        ///             },
        ///             Regions = new[]
        ///             {
        ///                 "us-east-1",
        ///                 "us-east-2",
        ///             },
        ///             Services = new[]
        ///             {
        ///                 "KAFKA",
        ///             },
        ///             AddressTypes = new[]
        ///             {
        ///                 "EGRESS",
        ///             },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["ipAddresses"] = main.Apply(getIpAddressesResult =&gt; getIpAddressesResult.IpAddresses),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetIpAddressesResult> Invoke(GetIpAddressesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIpAddressesResult>("confluentcloud:index/getIpAddresses:getIpAddresses", args ?? new GetIpAddressesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// [![Preview](https://img.shields.io/badge/Lifecycle%20Stage-Preview-%2300afba)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// &gt; **Note:** `confluentcloud.getIpAddresses` data source is available in **Preview** for early adopters. Preview features are introduced to gather customer feedback. This feature should be used only for evaluation and non-production testing purposes or to provide feedback to Confluent, particularly as it becomes more widely available in follow-on editions.  
        /// **Preview** features are intended for evaluation use in development and testing environments only, and not for production use. The warranty, SLA, and Support Services provisions of your agreement with Confluent do not apply to Preview features. Preview features are considered to be a Proof of Concept as defined in the Confluent Cloud Terms of Service. Confluent may discontinue providing preview releases of the Preview features at any time in Confluent’s sole discretion.
        /// 
        /// `confluentcloud.getIpAddresses` describes IP Addresses data source.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = ConfluentCloud.GetIpAddresses.Invoke(new()
        ///     {
        ///         Filter = new ConfluentCloud.Inputs.GetIpAddressesFilterInputArgs
        ///         {
        ///             Clouds = new[]
        ///             {
        ///                 "AWS",
        ///             },
        ///             Regions = new[]
        ///             {
        ///                 "us-east-1",
        ///                 "us-east-2",
        ///             },
        ///             Services = new[]
        ///             {
        ///                 "KAFKA",
        ///             },
        ///             AddressTypes = new[]
        ///             {
        ///                 "EGRESS",
        ///             },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["ipAddresses"] = main.Apply(getIpAddressesResult =&gt; getIpAddressesResult.IpAddresses),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetIpAddressesResult> Invoke(GetIpAddressesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetIpAddressesResult>("confluentcloud:index/getIpAddresses:getIpAddresses", args ?? new GetIpAddressesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIpAddressesArgs : global::Pulumi.InvokeArgs
    {
        [Input("filter")]
        public Inputs.GetIpAddressesFilterArgs? Filter { get; set; }

        public GetIpAddressesArgs()
        {
        }
        public static new GetIpAddressesArgs Empty => new GetIpAddressesArgs();
    }

    public sealed class GetIpAddressesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filter")]
        public Input<Inputs.GetIpAddressesFilterInputArgs>? Filter { get; set; }

        public GetIpAddressesInvokeArgs()
        {
        }
        public static new GetIpAddressesInvokeArgs Empty => new GetIpAddressesInvokeArgs();
    }


    [OutputType]
    public sealed class GetIpAddressesResult
    {
        public readonly Outputs.GetIpAddressesFilterResult? Filter;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (List of Object) List of schemas. Each schema object exports the following attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetIpAddressesIpAddressResult> IpAddresses;

        [OutputConstructor]
        private GetIpAddressesResult(
            Outputs.GetIpAddressesFilterResult? filter,

            string id,

            ImmutableArray<Outputs.GetIpAddressesIpAddressResult> ipAddresses)
        {
            Filter = filter;
            Id = id;
            IpAddresses = ipAddresses;
        }
    }
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ConfluentCloud
{
    public static class GetSchemaRegistryKek
    {
        public static Task<GetSchemaRegistryKekResult> InvokeAsync(GetSchemaRegistryKekArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSchemaRegistryKekResult>("confluentcloud:index/getSchemaRegistryKek:getSchemaRegistryKek", args ?? new GetSchemaRegistryKekArgs(), options.WithDefaults());

        public static Output<GetSchemaRegistryKekResult> Invoke(GetSchemaRegistryKekInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSchemaRegistryKekResult>("confluentcloud:index/getSchemaRegistryKek:getSchemaRegistryKek", args ?? new GetSchemaRegistryKekInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSchemaRegistryKekArgs : global::Pulumi.InvokeArgs
    {
        [Input("credentials")]
        private Inputs.GetSchemaRegistryKekCredentialsArgs? _credentials;
        public Inputs.GetSchemaRegistryKekCredentialsArgs? Credentials
        {
            get => _credentials;
            set => _credentials = value;
        }

        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("restEndpoint")]
        public string? RestEndpoint { get; set; }

        [Input("schemaRegistryCluster")]
        public Inputs.GetSchemaRegistryKekSchemaRegistryClusterArgs? SchemaRegistryCluster { get; set; }

        public GetSchemaRegistryKekArgs()
        {
        }
        public static new GetSchemaRegistryKekArgs Empty => new GetSchemaRegistryKekArgs();
    }

    public sealed class GetSchemaRegistryKekInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("credentials")]
        private Input<Inputs.GetSchemaRegistryKekCredentialsInputArgs>? _credentials;
        public Input<Inputs.GetSchemaRegistryKekCredentialsInputArgs>? Credentials
        {
            get => _credentials;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _credentials = Output.Tuple<Input<Inputs.GetSchemaRegistryKekCredentialsInputArgs>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("restEndpoint")]
        public Input<string>? RestEndpoint { get; set; }

        [Input("schemaRegistryCluster")]
        public Input<Inputs.GetSchemaRegistryKekSchemaRegistryClusterInputArgs>? SchemaRegistryCluster { get; set; }

        public GetSchemaRegistryKekInvokeArgs()
        {
        }
        public static new GetSchemaRegistryKekInvokeArgs Empty => new GetSchemaRegistryKekInvokeArgs();
    }


    [OutputType]
    public sealed class GetSchemaRegistryKekResult
    {
        public readonly Outputs.GetSchemaRegistryKekCredentialsResult? Credentials;
        public readonly string Doc;
        public readonly bool HardDelete;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string KmsKeyId;
        public readonly string KmsType;
        public readonly string Name;
        public readonly ImmutableDictionary<string, string> Properties;
        public readonly string? RestEndpoint;
        public readonly Outputs.GetSchemaRegistryKekSchemaRegistryClusterResult? SchemaRegistryCluster;
        public readonly bool Shared;

        [OutputConstructor]
        private GetSchemaRegistryKekResult(
            Outputs.GetSchemaRegistryKekCredentialsResult? credentials,

            string doc,

            bool hardDelete,

            string id,

            string kmsKeyId,

            string kmsType,

            string name,

            ImmutableDictionary<string, string> properties,

            string? restEndpoint,

            Outputs.GetSchemaRegistryKekSchemaRegistryClusterResult? schemaRegistryCluster,

            bool shared)
        {
            Credentials = credentials;
            Doc = doc;
            HardDelete = hardDelete;
            Id = id;
            KmsKeyId = kmsKeyId;
            KmsType = kmsType;
            Name = name;
            Properties = properties;
            RestEndpoint = restEndpoint;
            SchemaRegistryCluster = schemaRegistryCluster;
            Shared = shared;
        }
    }
}

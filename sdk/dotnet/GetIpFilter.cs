// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ConfluentCloud
{
    public static class GetIpFilter
    {
        /// <summary>
        /// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// `confluentcloud.IpFilter` describes an IP Filter data source.
        /// 
        /// &gt; **Note:** See [IP Filtering on Confluent Cloud](https://docs.confluent.io/cloud/current/security/access-control/ip-filtering/overview.html) for more details about the IP Filtering feature, its prerequisites, and its limitations.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = ConfluentCloud.GetIpFilter.Invoke(new()
        ///     {
        ///         Id = "ipf-abc123",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["example"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetIpFilterResult> InvokeAsync(GetIpFilterArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIpFilterResult>("confluentcloud:index/getIpFilter:getIpFilter", args ?? new GetIpFilterArgs(), options.WithDefaults());

        /// <summary>
        /// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// `confluentcloud.IpFilter` describes an IP Filter data source.
        /// 
        /// &gt; **Note:** See [IP Filtering on Confluent Cloud](https://docs.confluent.io/cloud/current/security/access-control/ip-filtering/overview.html) for more details about the IP Filtering feature, its prerequisites, and its limitations.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = ConfluentCloud.GetIpFilter.Invoke(new()
        ///     {
        ///         Id = "ipf-abc123",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["example"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetIpFilterResult> Invoke(GetIpFilterInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIpFilterResult>("confluentcloud:index/getIpFilter:getIpFilter", args ?? new GetIpFilterInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// `confluentcloud.IpFilter` describes an IP Filter data source.
        /// 
        /// &gt; **Note:** See [IP Filtering on Confluent Cloud](https://docs.confluent.io/cloud/current/security/access-control/ip-filtering/overview.html) for more details about the IP Filtering feature, its prerequisites, and its limitations.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = ConfluentCloud.GetIpFilter.Invoke(new()
        ///     {
        ///         Id = "ipf-abc123",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["example"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetIpFilterResult> Invoke(GetIpFilterInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetIpFilterResult>("confluentcloud:index/getIpFilter:getIpFilter", args ?? new GetIpFilterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIpFilterArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the IP Group (e.g., `ipf-abc123`).
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetIpFilterArgs()
        {
        }
        public static new GetIpFilterArgs Empty => new GetIpFilterArgs();
    }

    public sealed class GetIpFilterInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the IP Group (e.g., `ipf-abc123`).
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetIpFilterInvokeArgs()
        {
        }
        public static new GetIpFilterInvokeArgs Empty => new GetIpFilterInvokeArgs();
    }


    [OutputType]
    public sealed class GetIpFilterResult
    {
        /// <summary>
        /// (Required String) A human-readable name for an IP Filter. Can contain any unicode letter or number, the ASCII space character, or any of the following special characters: `[`, `]`, `|`, `&amp;`, `+`, `-`, `_`, `/`, `.`, `,`.
        /// </summary>
        public readonly string FilterName;
        public readonly string Id;
        /// <summary>
        /// (Required List of Strings) A list of IP Groups.
        /// </summary>
        public readonly ImmutableArray<string> IpGroups;
        /// <summary>
        /// (Required List of Strings) Scope of resources covered by this IP Filter. Resource group must be set to 'multiple' in order to use this property. During update operations, note that the operation groups passed in will replace the list of existing operation groups (passing in an empty list will remove all operation groups) from the filter (in line with the behavior for `ip_groups` attribute).
        /// </summary>
        public readonly ImmutableArray<string> OperationGroups;
        /// <summary>
        /// (Required String) Scope of resources covered by this IP Filter. Available resource groups include `"management"` and `"multiple"`.
        /// </summary>
        public readonly string ResourceGroup;
        /// <summary>
        /// (Required String) A CRN that specifies the scope of the IP Filter, specifically the organization or environment. Without specifying this property, the IP Filter would apply to the whole organization. For example, `"crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa"` or `data.confluent_organization.resource_name`.
        /// </summary>
        public readonly string ResourceScope;

        [OutputConstructor]
        private GetIpFilterResult(
            string filterName,

            string id,

            ImmutableArray<string> ipGroups,

            ImmutableArray<string> operationGroups,

            string resourceGroup,

            string resourceScope)
        {
            FilterName = filterName;
            Id = id;
            IpGroups = ipGroups;
            OperationGroups = operationGroups;
            ResourceGroup = resourceGroup;
            ResourceScope = resourceScope;
        }
    }
}

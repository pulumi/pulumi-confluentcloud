// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ConfluentCloud
{
    public static class GetTableflowTopic
    {
        /// <summary>
        /// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// `confluentcloud.TableflowTopic` describes a Tableflow Topic data source.
        /// 
        /// ## Example Usage
        /// 
        /// ### Option #1: Manage multiple Tableflow Topics in the same Pulumi Stack
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = ConfluentCloud.GetTableflowTopic.Invoke(new()
        ///     {
        ///         Environment = new ConfluentCloud.Inputs.GetTableflowTopicEnvironmentInputArgs
        ///         {
        ///             Id = staging.Id,
        ///         },
        ///         KafkaCluster = new ConfluentCloud.Inputs.GetTableflowTopicKafkaClusterInputArgs
        ///         {
        ///             Id = stagingConfluentKafkaCluster.Id,
        ///         },
        ///         DisplayName = "tableflow-example",
        ///         Credentials = new ConfluentCloud.Inputs.GetTableflowTopicCredentialsInputArgs
        ///         {
        ///             Key = env_admin_tableflow_api_key.Id,
        ///             Secret = env_admin_tableflow_api_key.Secret,
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["retention-ms"] = example.Apply(getTableflowTopicResult =&gt; getTableflowTopicResult.RetentionMs),
        ///     };
        /// });
        /// ```
        /// 
        /// ### Option #2: Manage a single Tableflow Topic in the same Pulumi Stack
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = ConfluentCloud.GetTableflowTopic.Invoke(new()
        ///     {
        ///         DisplayName = "tableflow-example",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["retention-ms"] = example.Apply(getTableflowTopicResult =&gt; getTableflowTopicResult.RetentionMs),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetTableflowTopicResult> InvokeAsync(GetTableflowTopicArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTableflowTopicResult>("confluentcloud:index/getTableflowTopic:getTableflowTopic", args ?? new GetTableflowTopicArgs(), options.WithDefaults());

        /// <summary>
        /// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// `confluentcloud.TableflowTopic` describes a Tableflow Topic data source.
        /// 
        /// ## Example Usage
        /// 
        /// ### Option #1: Manage multiple Tableflow Topics in the same Pulumi Stack
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = ConfluentCloud.GetTableflowTopic.Invoke(new()
        ///     {
        ///         Environment = new ConfluentCloud.Inputs.GetTableflowTopicEnvironmentInputArgs
        ///         {
        ///             Id = staging.Id,
        ///         },
        ///         KafkaCluster = new ConfluentCloud.Inputs.GetTableflowTopicKafkaClusterInputArgs
        ///         {
        ///             Id = stagingConfluentKafkaCluster.Id,
        ///         },
        ///         DisplayName = "tableflow-example",
        ///         Credentials = new ConfluentCloud.Inputs.GetTableflowTopicCredentialsInputArgs
        ///         {
        ///             Key = env_admin_tableflow_api_key.Id,
        ///             Secret = env_admin_tableflow_api_key.Secret,
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["retention-ms"] = example.Apply(getTableflowTopicResult =&gt; getTableflowTopicResult.RetentionMs),
        ///     };
        /// });
        /// ```
        /// 
        /// ### Option #2: Manage a single Tableflow Topic in the same Pulumi Stack
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = ConfluentCloud.GetTableflowTopic.Invoke(new()
        ///     {
        ///         DisplayName = "tableflow-example",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["retention-ms"] = example.Apply(getTableflowTopicResult =&gt; getTableflowTopicResult.RetentionMs),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetTableflowTopicResult> Invoke(GetTableflowTopicInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTableflowTopicResult>("confluentcloud:index/getTableflowTopic:getTableflowTopic", args ?? new GetTableflowTopicInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        /// 
        /// `confluentcloud.TableflowTopic` describes a Tableflow Topic data source.
        /// 
        /// ## Example Usage
        /// 
        /// ### Option #1: Manage multiple Tableflow Topics in the same Pulumi Stack
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = ConfluentCloud.GetTableflowTopic.Invoke(new()
        ///     {
        ///         Environment = new ConfluentCloud.Inputs.GetTableflowTopicEnvironmentInputArgs
        ///         {
        ///             Id = staging.Id,
        ///         },
        ///         KafkaCluster = new ConfluentCloud.Inputs.GetTableflowTopicKafkaClusterInputArgs
        ///         {
        ///             Id = stagingConfluentKafkaCluster.Id,
        ///         },
        ///         DisplayName = "tableflow-example",
        ///         Credentials = new ConfluentCloud.Inputs.GetTableflowTopicCredentialsInputArgs
        ///         {
        ///             Key = env_admin_tableflow_api_key.Id,
        ///             Secret = env_admin_tableflow_api_key.Secret,
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["retention-ms"] = example.Apply(getTableflowTopicResult =&gt; getTableflowTopicResult.RetentionMs),
        ///     };
        /// });
        /// ```
        /// 
        /// ### Option #2: Manage a single Tableflow Topic in the same Pulumi Stack
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = ConfluentCloud.GetTableflowTopic.Invoke(new()
        ///     {
        ///         DisplayName = "tableflow-example",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["retention-ms"] = example.Apply(getTableflowTopicResult =&gt; getTableflowTopicResult.RetentionMs),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetTableflowTopicResult> Invoke(GetTableflowTopicInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetTableflowTopicResult>("confluentcloud:index/getTableflowTopic:getTableflowTopic", args ?? new GetTableflowTopicInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTableflowTopicArgs : global::Pulumi.InvokeArgs
    {
        [Input("credentials")]
        private Inputs.GetTableflowTopicCredentialsArgs? _credentials;
        public Inputs.GetTableflowTopicCredentialsArgs? Credentials
        {
            get => _credentials;
            set => _credentials = value;
        }

        /// <summary>
        /// The name of the Tableflow Topic.
        /// </summary>
        [Input("displayName", required: true)]
        public string DisplayName { get; set; } = null!;

        [Input("environment", required: true)]
        public Inputs.GetTableflowTopicEnvironmentArgs Environment { get; set; } = null!;

        [Input("kafkaCluster", required: true)]
        public Inputs.GetTableflowTopicKafkaClusterArgs KafkaCluster { get; set; } = null!;

        public GetTableflowTopicArgs()
        {
        }
        public static new GetTableflowTopicArgs Empty => new GetTableflowTopicArgs();
    }

    public sealed class GetTableflowTopicInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("credentials")]
        private Input<Inputs.GetTableflowTopicCredentialsInputArgs>? _credentials;
        public Input<Inputs.GetTableflowTopicCredentialsInputArgs>? Credentials
        {
            get => _credentials;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _credentials = Output.Tuple<Input<Inputs.GetTableflowTopicCredentialsInputArgs>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name of the Tableflow Topic.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        [Input("environment", required: true)]
        public Input<Inputs.GetTableflowTopicEnvironmentInputArgs> Environment { get; set; } = null!;

        [Input("kafkaCluster", required: true)]
        public Input<Inputs.GetTableflowTopicKafkaClusterInputArgs> KafkaCluster { get; set; } = null!;

        public GetTableflowTopicInvokeArgs()
        {
        }
        public static new GetTableflowTopicInvokeArgs Empty => new GetTableflowTopicInvokeArgs();
    }


    [OutputType]
    public sealed class GetTableflowTopicResult
    {
        /// <summary>
        /// (Optional Configuration Block) supports the following:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTableflowTopicByobAwResult> ByobAws;
        public readonly Outputs.GetTableflowTopicCredentialsResult? Credentials;
        public readonly string DisplayName;
        /// <summary>
        /// (Optional Boolean) This flag determines whether to enable compaction for the Tableflow enabled topic.
        /// </summary>
        public readonly bool EnableCompaction;
        /// <summary>
        /// (Optional Boolean) This flag determines whether to enable partitioning for the Tableflow enabled topic.
        /// </summary>
        public readonly bool EnablePartitioning;
        public readonly Outputs.GetTableflowTopicEnvironmentResult Environment;
        /// <summary>
        /// (Optional Configuration Block) supports the following:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTableflowTopicErrorHandlingResult> ErrorHandlings;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly Outputs.GetTableflowTopicKafkaClusterResult KafkaCluster;
        /// <summary>
        /// (Optional Configuration Block) The configuration of the Confluent managed bucket.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTableflowTopicManagedStorageResult> ManagedStorages;
        /// <summary>
        /// (Optional String, **Deprecated**) The strategy to handle record failures in the Tableflow enabled topic during materialization. For `SKIP`, we skip the bad records and move to the next record. For `SUSPEND`, we suspend the materialization of the topic.
        /// </summary>
        public readonly string RecordFailureStrategy;
        /// <summary>
        /// (Optional String) The max age of snapshots (Iceberg) or versions (Delta) (snapshot/version expiration) to keep on the table in milliseconds for the Tableflow enabled topic.
        /// </summary>
        public readonly string RetentionMs;
        /// <summary>
        /// (Optional Boolean) Indicates whether the Tableflow should be suspended.
        /// </summary>
        public readonly bool Suspended;
        /// <summary>
        /// (Optional List) The supported table formats for the Tableflow-enabled topic.
        /// </summary>
        public readonly ImmutableArray<string> TableFormats;
        /// <summary>
        /// (Optional String) The current storage path where the data and metadata is stored for this table.
        /// </summary>
        public readonly string TablePath;
        /// <summary>
        /// (Optional String) Indicates the write mode of the Tableflow topic.
        /// </summary>
        public readonly string WriteMode;

        [OutputConstructor]
        private GetTableflowTopicResult(
            ImmutableArray<Outputs.GetTableflowTopicByobAwResult> byobAws,

            Outputs.GetTableflowTopicCredentialsResult? credentials,

            string displayName,

            bool enableCompaction,

            bool enablePartitioning,

            Outputs.GetTableflowTopicEnvironmentResult environment,

            ImmutableArray<Outputs.GetTableflowTopicErrorHandlingResult> errorHandlings,

            string id,

            Outputs.GetTableflowTopicKafkaClusterResult kafkaCluster,

            ImmutableArray<Outputs.GetTableflowTopicManagedStorageResult> managedStorages,

            string recordFailureStrategy,

            string retentionMs,

            bool suspended,

            ImmutableArray<string> tableFormats,

            string tablePath,

            string writeMode)
        {
            ByobAws = byobAws;
            Credentials = credentials;
            DisplayName = displayName;
            EnableCompaction = enableCompaction;
            EnablePartitioning = enablePartitioning;
            Environment = environment;
            ErrorHandlings = errorHandlings;
            Id = id;
            KafkaCluster = kafkaCluster;
            ManagedStorages = managedStorages;
            RecordFailureStrategy = recordFailureStrategy;
            RetentionMs = retentionMs;
            Suspended = suspended;
            TableFormats = tableFormats;
            TablePath = tablePath;
            WriteMode = writeMode;
        }
    }
}

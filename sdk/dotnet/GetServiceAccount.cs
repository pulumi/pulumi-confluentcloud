// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ConfluentCloud
{
    public static class GetServiceAccount
    {
        /// <summary>
        /// `confluentcloud.ServiceAccount` describes a Service Account data source.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var exampleUsingIdServiceAccount = Output.Create(ConfluentCloud.GetServiceAccount.InvokeAsync(new ConfluentCloud.GetServiceAccountArgs
        ///         {
        ///             Id = "sa-abc123",
        ///         }));
        ///         this.ExampleUsingId = exampleUsingIdServiceAccount;
        ///         var exampleUsingName = Output.Create(ConfluentCloud.GetServiceAccount.InvokeAsync(new ConfluentCloud.GetServiceAccountArgs
        ///         {
        ///             DisplayName = "test_sa",
        ///         }));
        ///         var test_env = new ConfluentCloud.Environment("test-env", new ConfluentCloud.EnvironmentArgs
        ///         {
        ///             DisplayName = exampleUsingIdServiceAccount.Apply(exampleUsingIdServiceAccount =&gt; $"env_for_{exampleUsingIdServiceAccount.DisplayName}"),
        ///         });
        ///     }
        /// 
        ///     [Output("exampleUsingId")]
        ///     public Output&lt;string&gt; ExampleUsingId { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetServiceAccountResult> InvokeAsync(GetServiceAccountArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetServiceAccountResult>("confluentcloud:index/getServiceAccount:getServiceAccount", args ?? new GetServiceAccountArgs(), options.WithDefaults());

        /// <summary>
        /// `confluentcloud.ServiceAccount` describes a Service Account data source.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using ConfluentCloud = Pulumi.ConfluentCloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var exampleUsingIdServiceAccount = Output.Create(ConfluentCloud.GetServiceAccount.InvokeAsync(new ConfluentCloud.GetServiceAccountArgs
        ///         {
        ///             Id = "sa-abc123",
        ///         }));
        ///         this.ExampleUsingId = exampleUsingIdServiceAccount;
        ///         var exampleUsingName = Output.Create(ConfluentCloud.GetServiceAccount.InvokeAsync(new ConfluentCloud.GetServiceAccountArgs
        ///         {
        ///             DisplayName = "test_sa",
        ///         }));
        ///         var test_env = new ConfluentCloud.Environment("test-env", new ConfluentCloud.EnvironmentArgs
        ///         {
        ///             DisplayName = exampleUsingIdServiceAccount.Apply(exampleUsingIdServiceAccount =&gt; $"env_for_{exampleUsingIdServiceAccount.DisplayName}"),
        ///         });
        ///     }
        /// 
        ///     [Output("exampleUsingId")]
        ///     public Output&lt;string&gt; ExampleUsingId { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetServiceAccountResult> Invoke(GetServiceAccountInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetServiceAccountResult>("confluentcloud:index/getServiceAccount:getServiceAccount", args ?? new GetServiceAccountInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceAccountArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// A human-readable name for the Service Account.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        /// <summary>
        /// The ID of the Service Account (e.g., `sa-abc123`).
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        public GetServiceAccountArgs()
        {
        }
    }

    public sealed class GetServiceAccountInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// A human-readable name for the Service Account.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The ID of the Service Account (e.g., `sa-abc123`).
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        public GetServiceAccountInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetServiceAccountResult
    {
        /// <summary>
        /// (Required String) An API Version of the schema version of the Service Account.
        /// </summary>
        public readonly string ApiVersion;
        /// <summary>
        /// (Required String) A free-form description of the Service Account.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// (Required String) A human-readable name for the Service Account.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// (Required String) The ID of the Service Account (e.g., `sa-abc123`).
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (Required String) A kind of the Service Account.
        /// </summary>
        public readonly string Kind;

        [OutputConstructor]
        private GetServiceAccountResult(
            string apiVersion,

            string description,

            string displayName,

            string id,

            string kind)
        {
            ApiVersion = apiVersion;
            Description = description;
            DisplayName = displayName;
            Id = id;
            Kind = kind;
        }
    }
}

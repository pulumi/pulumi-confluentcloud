// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * You can import a Flink connection by using the Flink Connection name, for example:
 *
 * Option #1: Manage multiple Flink Compute Pools in the same Pulumi Stack
 *
 * $ export IMPORT_CONFLUENT_ORGANIZATION_ID="<organization_id>"
 *
 * $ export IMPORT_CONFLUENT_ENVIRONMENT_ID="<environment_id>"
 *
 * $ export IMPORT_FLINK_COMPUTE_POOL_ID="<flink_compute_pool_id>"
 *
 * $ export IMPORT_FLINK_API_KEY="<flink_api_key>"
 *
 * $ export IMPORT_FLINK_API_SECRET="<flink_api_secret>"
 *
 * $ export IMPORT_FLINK_REST_ENDPOINT="<flink_rest_endpoint>"
 *
 * $ export IMPORT_FLINK_PRINCIPAL_ID="<flink_principal>"
 *
 * $ export API_KEY="<API_KEY>"
 *
 * ```sh
 * $ pulumi import confluentcloud:index/flinkConnection:FlinkConnection example org-xyz123/env-abc123/connection1
 * ```
 *
 * Option #2: Manage a single Flink Compute Pool in the same Pulumi Stack
 *
 * $ export API_KEY="<API_KEY>"
 *
 * ```sh
 * $ pulumi import confluentcloud:index/flinkConnection:FlinkConnection example org-xyz123/env-abc123/connection1
 * ```
 *
 * !> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
 */
export class FlinkConnection extends pulumi.CustomResource {
    /**
     * Get an existing FlinkConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FlinkConnectionState, opts?: pulumi.CustomResourceOptions): FlinkConnection {
        return new FlinkConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'confluentcloud:index/flinkConnection:FlinkConnection';

    /**
     * Returns true if the given object is an instance of FlinkConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FlinkConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FlinkConnection.__pulumiType;
    }

    /**
     * API key for the type.
     */
    public readonly apiKey!: pulumi.Output<string | undefined>;
    /**
     * The schema version of this representation of a resource.
     */
    public /*out*/ readonly apiVersion!: pulumi.Output<string>;
    /**
     * Access key for the type.
     */
    public readonly awsAccessKey!: pulumi.Output<string | undefined>;
    /**
     * Secret key for the type.
     */
    public readonly awsSecretKey!: pulumi.Output<string | undefined>;
    /**
     * Session token for the type.
     */
    public readonly awsSessionToken!: pulumi.Output<string | undefined>;
    public readonly computePool!: pulumi.Output<outputs.FlinkConnectionComputePool>;
    /**
     * The Cluster API Credentials.
     */
    public readonly credentials!: pulumi.Output<outputs.FlinkConnectionCredentials | undefined>;
    /**
     * The unique name of the Flink Connection per organization, environment scope.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * The endpoint of the flink connection.
     */
    public readonly endpoint!: pulumi.Output<string>;
    public readonly environment!: pulumi.Output<outputs.FlinkConnectionEnvironment>;
    /**
     * The object this REST resource represents.
     */
    public /*out*/ readonly kind!: pulumi.Output<string>;
    public readonly organization!: pulumi.Output<outputs.FlinkConnectionOrganization>;
    /**
     * Password for the type.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    public readonly principal!: pulumi.Output<outputs.FlinkConnectionPrincipal>;
    /**
     * The REST endpoint of the Flink Connection cluster, for example,
     * `https://flink.us-east-1.aws.confluent.cloud/sql/v1/organizations/1111aaaa-11aa-11aa-11aa-111111aaaaaa/environments/env-abc123`).
     */
    public readonly restEndpoint!: pulumi.Output<string | undefined>;
    /**
     * Service Key for the type.
     */
    public readonly serviceKey!: pulumi.Output<string | undefined>;
    /**
     * The type of the flink connection.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Username for the type.
     */
    public readonly username!: pulumi.Output<string | undefined>;

    /**
     * Create a FlinkConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FlinkConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FlinkConnectionArgs | FlinkConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FlinkConnectionState | undefined;
            resourceInputs["apiKey"] = state ? state.apiKey : undefined;
            resourceInputs["apiVersion"] = state ? state.apiVersion : undefined;
            resourceInputs["awsAccessKey"] = state ? state.awsAccessKey : undefined;
            resourceInputs["awsSecretKey"] = state ? state.awsSecretKey : undefined;
            resourceInputs["awsSessionToken"] = state ? state.awsSessionToken : undefined;
            resourceInputs["computePool"] = state ? state.computePool : undefined;
            resourceInputs["credentials"] = state ? state.credentials : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["principal"] = state ? state.principal : undefined;
            resourceInputs["restEndpoint"] = state ? state.restEndpoint : undefined;
            resourceInputs["serviceKey"] = state ? state.serviceKey : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as FlinkConnectionArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.endpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpoint'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["apiKey"] = args ? args.apiKey : undefined;
            resourceInputs["awsAccessKey"] = args ? args.awsAccessKey : undefined;
            resourceInputs["awsSecretKey"] = args ? args.awsSecretKey : undefined;
            resourceInputs["awsSessionToken"] = args ? args.awsSessionToken : undefined;
            resourceInputs["computePool"] = args ? args.computePool : undefined;
            resourceInputs["credentials"] = args?.credentials ? pulumi.secret(args.credentials) : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["endpoint"] = args ? args.endpoint : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["principal"] = args ? args.principal : undefined;
            resourceInputs["restEndpoint"] = args ? args.restEndpoint : undefined;
            resourceInputs["serviceKey"] = args ? args.serviceKey : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["apiVersion"] = undefined /*out*/;
            resourceInputs["kind"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["credentials"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(FlinkConnection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FlinkConnection resources.
 */
export interface FlinkConnectionState {
    /**
     * API key for the type.
     */
    apiKey?: pulumi.Input<string>;
    /**
     * The schema version of this representation of a resource.
     */
    apiVersion?: pulumi.Input<string>;
    /**
     * Access key for the type.
     */
    awsAccessKey?: pulumi.Input<string>;
    /**
     * Secret key for the type.
     */
    awsSecretKey?: pulumi.Input<string>;
    /**
     * Session token for the type.
     */
    awsSessionToken?: pulumi.Input<string>;
    computePool?: pulumi.Input<inputs.FlinkConnectionComputePool>;
    /**
     * The Cluster API Credentials.
     */
    credentials?: pulumi.Input<inputs.FlinkConnectionCredentials>;
    /**
     * The unique name of the Flink Connection per organization, environment scope.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The endpoint of the flink connection.
     */
    endpoint?: pulumi.Input<string>;
    environment?: pulumi.Input<inputs.FlinkConnectionEnvironment>;
    /**
     * The object this REST resource represents.
     */
    kind?: pulumi.Input<string>;
    organization?: pulumi.Input<inputs.FlinkConnectionOrganization>;
    /**
     * Password for the type.
     */
    password?: pulumi.Input<string>;
    principal?: pulumi.Input<inputs.FlinkConnectionPrincipal>;
    /**
     * The REST endpoint of the Flink Connection cluster, for example,
     * `https://flink.us-east-1.aws.confluent.cloud/sql/v1/organizations/1111aaaa-11aa-11aa-11aa-111111aaaaaa/environments/env-abc123`).
     */
    restEndpoint?: pulumi.Input<string>;
    /**
     * Service Key for the type.
     */
    serviceKey?: pulumi.Input<string>;
    /**
     * The type of the flink connection.
     */
    type?: pulumi.Input<string>;
    /**
     * Username for the type.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FlinkConnection resource.
 */
export interface FlinkConnectionArgs {
    /**
     * API key for the type.
     */
    apiKey?: pulumi.Input<string>;
    /**
     * Access key for the type.
     */
    awsAccessKey?: pulumi.Input<string>;
    /**
     * Secret key for the type.
     */
    awsSecretKey?: pulumi.Input<string>;
    /**
     * Session token for the type.
     */
    awsSessionToken?: pulumi.Input<string>;
    computePool?: pulumi.Input<inputs.FlinkConnectionComputePool>;
    /**
     * The Cluster API Credentials.
     */
    credentials?: pulumi.Input<inputs.FlinkConnectionCredentials>;
    /**
     * The unique name of the Flink Connection per organization, environment scope.
     */
    displayName: pulumi.Input<string>;
    /**
     * The endpoint of the flink connection.
     */
    endpoint: pulumi.Input<string>;
    environment?: pulumi.Input<inputs.FlinkConnectionEnvironment>;
    organization?: pulumi.Input<inputs.FlinkConnectionOrganization>;
    /**
     * Password for the type.
     */
    password?: pulumi.Input<string>;
    principal?: pulumi.Input<inputs.FlinkConnectionPrincipal>;
    /**
     * The REST endpoint of the Flink Connection cluster, for example,
     * `https://flink.us-east-1.aws.confluent.cloud/sql/v1/organizations/1111aaaa-11aa-11aa-11aa-111111aaaaaa/environments/env-abc123`).
     */
    restEndpoint?: pulumi.Input<string>;
    /**
     * Service Key for the type.
     */
    serviceKey?: pulumi.Input<string>;
    /**
     * The type of the flink connection.
     */
    type: pulumi.Input<string>;
    /**
     * Username for the type.
     */
    username?: pulumi.Input<string>;
}

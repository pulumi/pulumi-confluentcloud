// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const source = new confluentcloud.CustomConnectorPluginVersion("source", {
 *     version: "v1.2.4",
 *     cloud: "AWS",
 *     documentationLink: "https://www.confluent.io/hub/confluentinc/kafka-connect-datagen",
 *     connectorClasses: [{
 *         connectorClassName: "io.confluent.kafka.connect.datagen.DatagenConnector",
 *         connectorType: "SOURCE",
 *     }],
 *     sensitiveConfigProperties: [],
 *     filename: "confluentinc-kafka-connect-datagen-0.6.2.zip",
 *     pluginId: "ccp-dev-123",
 *     environment: {
 *         id: "env-devc0k7oxp",
 *     },
 * }, {
 *     dependsOn: [plugin],
 * });
 * ```
 *
 * ## Import
 *
 * You can import a Custom Connector Plugin by using a Custom Connector Plugin ID, in the format `<Environment ID>/<Plugin ID>/<Version ID>`. The following example shows how to import a Custom Connector Plugin:
 *
 * $ export CONFLUENT_CLOUD_API_KEY="<cloud_api_key>"
 *
 * $ export CONFLUENT_CLOUD_API_SECRET="<cloud_api_secret>"
 *
 * ```sh
 * $ pulumi import confluentcloud:index/customConnectorPluginVersion:CustomConnectorPluginVersion main env-123/plug-123/ccp-ver123xyz
 * ```
 *
 * !> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
 */
export class CustomConnectorPluginVersion extends pulumi.CustomResource {
    /**
     * Get an existing CustomConnectorPluginVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomConnectorPluginVersionState, opts?: pulumi.CustomResourceOptions): CustomConnectorPluginVersion {
        return new CustomConnectorPluginVersion(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'confluentcloud:index/customConnectorPluginVersion:CustomConnectorPluginVersion';

    /**
     * Returns true if the given object is an instance of CustomConnectorPluginVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomConnectorPluginVersion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomConnectorPluginVersion.__pulumiType;
    }

    /**
     * (Required String) The API Version of the schema version of the plugin version, for example, `ccpm/v1`.
     */
    public /*out*/ readonly apiVersion!: pulumi.Output<string>;
    /**
     * Cloud provider where the Custom Connector Plugin Version archive is uploaded. Accepted values are: `AWS`, `AZURE`, `GCP`.
     */
    public readonly cloud!: pulumi.Output<string>;
    /**
     * The Java class name or alias for the connector. You can get the connector class from the connector documentation provided by the developer.
     */
    public readonly connectorClasses!: pulumi.Output<outputs.CustomConnectorPluginVersionConnectorClass[]>;
    /**
     * The documentation link of the Custom Connector Plugin Version.
     */
    public readonly documentationLink!: pulumi.Output<string | undefined>;
    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     */
    public readonly environment!: pulumi.Output<outputs.CustomConnectorPluginVersionEnvironment>;
    /**
     * The path to the Custom Connector Plugin Version archive to be uploaded. Accepted archive formats are: `.jar`, `.zip`.
     */
    public readonly filename!: pulumi.Output<string>;
    /**
     * (Required String) The kind of the Plugin Version, for example, `CustomConnectPluginVersion`.
     */
    public /*out*/ readonly kind!: pulumi.Output<string>;
    /**
     * The ID of the plugin created using `confluentcloud.Plugin` resource, or through other ways.
     */
    public readonly pluginId!: pulumi.Output<string>;
    /**
     * The list of sensitive properties. A sensitive property is a connector configuration property that must be hidden after a user enters the property value when setting up the connector, for example, passwords, keys, and tokens. Refer to the developer documentation and add all required and optional sensitive properties that a user could potentially configure for the connector. Marking a property as sensitive ensures that these fields are handled appropriately within the Confluent infrastructure. This includes masking fields, for example in exception logging, and encrypting field values in the underlying data store. You must identify all sensitive properties. Failure to identify sensitive properties can result in the sensitive property value being stored in plain text rather than in encrypted format. Only add connector-specific sensitive properties. Kafka keys, passwords, and service account information should not be entered here.
     */
    public readonly sensitiveConfigProperties!: pulumi.Output<string[] | undefined>;
    /**
     * The version number of the plugin version we want to create. This must start with the character `v` and follow semantic versioning.
     */
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a CustomConnectorPluginVersion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomConnectorPluginVersionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomConnectorPluginVersionArgs | CustomConnectorPluginVersionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CustomConnectorPluginVersionState | undefined;
            resourceInputs["apiVersion"] = state ? state.apiVersion : undefined;
            resourceInputs["cloud"] = state ? state.cloud : undefined;
            resourceInputs["connectorClasses"] = state ? state.connectorClasses : undefined;
            resourceInputs["documentationLink"] = state ? state.documentationLink : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["filename"] = state ? state.filename : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["pluginId"] = state ? state.pluginId : undefined;
            resourceInputs["sensitiveConfigProperties"] = state ? state.sensitiveConfigProperties : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as CustomConnectorPluginVersionArgs | undefined;
            if ((!args || args.cloud === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloud'");
            }
            if ((!args || args.connectorClasses === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectorClasses'");
            }
            if ((!args || args.environment === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            if ((!args || args.filename === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filename'");
            }
            if ((!args || args.pluginId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pluginId'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["cloud"] = args ? args.cloud : undefined;
            resourceInputs["connectorClasses"] = args ? args.connectorClasses : undefined;
            resourceInputs["documentationLink"] = args ? args.documentationLink : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["filename"] = args ? args.filename : undefined;
            resourceInputs["pluginId"] = args ? args.pluginId : undefined;
            resourceInputs["sensitiveConfigProperties"] = args ? args.sensitiveConfigProperties : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["apiVersion"] = undefined /*out*/;
            resourceInputs["kind"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomConnectorPluginVersion.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CustomConnectorPluginVersion resources.
 */
export interface CustomConnectorPluginVersionState {
    /**
     * (Required String) The API Version of the schema version of the plugin version, for example, `ccpm/v1`.
     */
    apiVersion?: pulumi.Input<string>;
    /**
     * Cloud provider where the Custom Connector Plugin Version archive is uploaded. Accepted values are: `AWS`, `AZURE`, `GCP`.
     */
    cloud?: pulumi.Input<string>;
    /**
     * The Java class name or alias for the connector. You can get the connector class from the connector documentation provided by the developer.
     */
    connectorClasses?: pulumi.Input<pulumi.Input<inputs.CustomConnectorPluginVersionConnectorClass>[]>;
    /**
     * The documentation link of the Custom Connector Plugin Version.
     */
    documentationLink?: pulumi.Input<string>;
    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     */
    environment?: pulumi.Input<inputs.CustomConnectorPluginVersionEnvironment>;
    /**
     * The path to the Custom Connector Plugin Version archive to be uploaded. Accepted archive formats are: `.jar`, `.zip`.
     */
    filename?: pulumi.Input<string>;
    /**
     * (Required String) The kind of the Plugin Version, for example, `CustomConnectPluginVersion`.
     */
    kind?: pulumi.Input<string>;
    /**
     * The ID of the plugin created using `confluentcloud.Plugin` resource, or through other ways.
     */
    pluginId?: pulumi.Input<string>;
    /**
     * The list of sensitive properties. A sensitive property is a connector configuration property that must be hidden after a user enters the property value when setting up the connector, for example, passwords, keys, and tokens. Refer to the developer documentation and add all required and optional sensitive properties that a user could potentially configure for the connector. Marking a property as sensitive ensures that these fields are handled appropriately within the Confluent infrastructure. This includes masking fields, for example in exception logging, and encrypting field values in the underlying data store. You must identify all sensitive properties. Failure to identify sensitive properties can result in the sensitive property value being stored in plain text rather than in encrypted format. Only add connector-specific sensitive properties. Kafka keys, passwords, and service account information should not be entered here.
     */
    sensitiveConfigProperties?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The version number of the plugin version we want to create. This must start with the character `v` and follow semantic versioning.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CustomConnectorPluginVersion resource.
 */
export interface CustomConnectorPluginVersionArgs {
    /**
     * Cloud provider where the Custom Connector Plugin Version archive is uploaded. Accepted values are: `AWS`, `AZURE`, `GCP`.
     */
    cloud: pulumi.Input<string>;
    /**
     * The Java class name or alias for the connector. You can get the connector class from the connector documentation provided by the developer.
     */
    connectorClasses: pulumi.Input<pulumi.Input<inputs.CustomConnectorPluginVersionConnectorClass>[]>;
    /**
     * The documentation link of the Custom Connector Plugin Version.
     */
    documentationLink?: pulumi.Input<string>;
    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     */
    environment: pulumi.Input<inputs.CustomConnectorPluginVersionEnvironment>;
    /**
     * The path to the Custom Connector Plugin Version archive to be uploaded. Accepted archive formats are: `.jar`, `.zip`.
     */
    filename: pulumi.Input<string>;
    /**
     * The ID of the plugin created using `confluentcloud.Plugin` resource, or through other ways.
     */
    pluginId: pulumi.Input<string>;
    /**
     * The list of sensitive properties. A sensitive property is a connector configuration property that must be hidden after a user enters the property value when setting up the connector, for example, passwords, keys, and tokens. Refer to the developer documentation and add all required and optional sensitive properties that a user could potentially configure for the connector. Marking a property as sensitive ensures that these fields are handled appropriately within the Confluent infrastructure. This includes masking fields, for example in exception logging, and encrypting field values in the underlying data store. You must identify all sensitive properties. Failure to identify sensitive properties can result in the sensitive property value being stored in plain text rather than in encrypted format. Only add connector-specific sensitive properties. Kafka keys, passwords, and service account information should not be entered here.
     */
    sensitiveConfigProperties?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The version number of the plugin version we want to create. This must start with the character `v` and follow semantic versioning.
     */
    version: pulumi.Input<string>;
}

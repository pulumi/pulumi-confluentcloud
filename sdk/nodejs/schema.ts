// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * You can import a Schema by using the Schema Registry cluster ID, Subject name, and unique identifier (or `latest` when `recreate_on_update = false`) of the Schema in the format `<Schema Registry cluster ID>/<Subject name>/<Schema identifier>`, for example:
 *
 * Option A: recreate_on_update = false (by default)
 *
 * $ export IMPORT_SCHEMA_REGISTRY_API_KEY="<schema_registry_api_key>"
 *
 * $ export IMPORT_SCHEMA_REGISTRY_API_SECRET="<schema_registry_api_secret>"
 *
 * $ export IMPORT_SCHEMA_REGISTRY_REST_ENDPOINT="<schema_registry_rest_endpoint>"
 *
 * ```sh
 * $ pulumi import confluentcloud:index/schema:Schema my_schema_1 lsrc-abc123/test-subject/latest
 * ```
 *
 * Option B: recreate_on_update = true
 *
 * $ export IMPORT_SCHEMA_REGISTRY_API_KEY="<schema_registry_api_key>"
 *
 * $ export IMPORT_SCHEMA_REGISTRY_API_SECRET="<schema_registry_api_secret>"
 *
 * $ export IMPORT_SCHEMA_REGISTRY_REST_ENDPOINT="<schema_registry_rest_endpoint>"
 *
 * ```sh
 * $ pulumi import confluentcloud:index/schema:Schema my_schema_1 lsrc-abc123/test-subject/100003
 * ```
 *
 * !> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
 */
export class Schema extends pulumi.CustomResource {
    /**
     * Get an existing Schema resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SchemaState, opts?: pulumi.CustomResourceOptions): Schema {
        return new Schema(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'confluentcloud:index/schema:Schema';

    /**
     * Returns true if the given object is an instance of Schema.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Schema {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Schema.__pulumiType;
    }

    /**
     * The Cluster API Credentials.
     */
    declare public readonly credentials: pulumi.Output<outputs.SchemaCredentials | undefined>;
    /**
     * The format of the Schema.
     */
    declare public readonly format: pulumi.Output<string>;
    /**
     * Controls whether a schema should be soft or hard deleted. Set it to `true` if you want to hard delete a schema on destroy. Defaults to `false` (soft delete).
     */
    declare public readonly hardDelete: pulumi.Output<boolean | undefined>;
    declare public readonly metadata: pulumi.Output<outputs.SchemaMetadata>;
    /**
     * Controls whether a schema should be recreated on update.
     */
    declare public readonly recreateOnUpdate: pulumi.Output<boolean | undefined>;
    /**
     * The REST endpoint of the Schema Registry cluster. For example, for public networking: `https://psrc-00000.us-central1.gcp.confluent.cloud`. In the case of private networking, the endpoint might look like `https://lsrc-abc123.pr1jy6.us-east-2.aws.confluent.cloud`. You can construct it using either:
     * - `data.confluent_schema_registry_cluster.essentials.private_regional_rest_endpoints["us-east-2"]`, or
     * - `https://${data.confluent_schema_registry_cluster.essentials.id}${data.confluent_network.main.endpoint_suffix}`
     */
    declare public readonly restEndpoint: pulumi.Output<string | undefined>;
    declare public readonly ruleset: pulumi.Output<outputs.SchemaRuleset | undefined>;
    /**
     * The definition of the Schema.
     */
    declare public readonly schema: pulumi.Output<string>;
    /**
     * (Required Integer) The globally unique ID of the Schema, for example, `100003`. If the same schema is registered under a different subject, the same identifier will be returned. However, the `version` of the schema may be different under different subjects.
     */
    declare public /*out*/ readonly schemaIdentifier: pulumi.Output<number>;
    /**
     * The list of references to other Schemas.
     */
    declare public readonly schemaReferences: pulumi.Output<outputs.SchemaSchemaReference[] | undefined>;
    declare public readonly schemaRegistryCluster: pulumi.Output<outputs.SchemaSchemaRegistryCluster | undefined>;
    declare public readonly skipValidationDuringPlan: pulumi.Output<boolean | undefined>;
    /**
     * The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`. Schemas evolve safely, following a compatibility mode defined, under a subject name.
     */
    declare public readonly subjectName: pulumi.Output<string>;
    /**
     * (Required Integer) The version of the Schema, for example, `4`.
     */
    declare public /*out*/ readonly version: pulumi.Output<number>;

    /**
     * Create a Schema resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SchemaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SchemaArgs | SchemaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SchemaState | undefined;
            resourceInputs["credentials"] = state?.credentials;
            resourceInputs["format"] = state?.format;
            resourceInputs["hardDelete"] = state?.hardDelete;
            resourceInputs["metadata"] = state?.metadata;
            resourceInputs["recreateOnUpdate"] = state?.recreateOnUpdate;
            resourceInputs["restEndpoint"] = state?.restEndpoint;
            resourceInputs["ruleset"] = state?.ruleset;
            resourceInputs["schema"] = state?.schema;
            resourceInputs["schemaIdentifier"] = state?.schemaIdentifier;
            resourceInputs["schemaReferences"] = state?.schemaReferences;
            resourceInputs["schemaRegistryCluster"] = state?.schemaRegistryCluster;
            resourceInputs["skipValidationDuringPlan"] = state?.skipValidationDuringPlan;
            resourceInputs["subjectName"] = state?.subjectName;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as SchemaArgs | undefined;
            if (args?.format === undefined && !opts.urn) {
                throw new Error("Missing required property 'format'");
            }
            if (args?.subjectName === undefined && !opts.urn) {
                throw new Error("Missing required property 'subjectName'");
            }
            resourceInputs["credentials"] = args?.credentials ? pulumi.secret(args.credentials) : undefined;
            resourceInputs["format"] = args?.format;
            resourceInputs["hardDelete"] = args?.hardDelete;
            resourceInputs["metadata"] = args?.metadata;
            resourceInputs["recreateOnUpdate"] = args?.recreateOnUpdate;
            resourceInputs["restEndpoint"] = args?.restEndpoint;
            resourceInputs["ruleset"] = args?.ruleset;
            resourceInputs["schema"] = args?.schema;
            resourceInputs["schemaReferences"] = args?.schemaReferences;
            resourceInputs["schemaRegistryCluster"] = args?.schemaRegistryCluster;
            resourceInputs["skipValidationDuringPlan"] = args?.skipValidationDuringPlan;
            resourceInputs["subjectName"] = args?.subjectName;
            resourceInputs["schemaIdentifier"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["credentials"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Schema.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Schema resources.
 */
export interface SchemaState {
    /**
     * The Cluster API Credentials.
     */
    credentials?: pulumi.Input<inputs.SchemaCredentials>;
    /**
     * The format of the Schema.
     */
    format?: pulumi.Input<string>;
    /**
     * Controls whether a schema should be soft or hard deleted. Set it to `true` if you want to hard delete a schema on destroy. Defaults to `false` (soft delete).
     */
    hardDelete?: pulumi.Input<boolean>;
    metadata?: pulumi.Input<inputs.SchemaMetadata>;
    /**
     * Controls whether a schema should be recreated on update.
     */
    recreateOnUpdate?: pulumi.Input<boolean>;
    /**
     * The REST endpoint of the Schema Registry cluster. For example, for public networking: `https://psrc-00000.us-central1.gcp.confluent.cloud`. In the case of private networking, the endpoint might look like `https://lsrc-abc123.pr1jy6.us-east-2.aws.confluent.cloud`. You can construct it using either:
     * - `data.confluent_schema_registry_cluster.essentials.private_regional_rest_endpoints["us-east-2"]`, or
     * - `https://${data.confluent_schema_registry_cluster.essentials.id}${data.confluent_network.main.endpoint_suffix}`
     */
    restEndpoint?: pulumi.Input<string>;
    ruleset?: pulumi.Input<inputs.SchemaRuleset>;
    /**
     * The definition of the Schema.
     */
    schema?: pulumi.Input<string>;
    /**
     * (Required Integer) The globally unique ID of the Schema, for example, `100003`. If the same schema is registered under a different subject, the same identifier will be returned. However, the `version` of the schema may be different under different subjects.
     */
    schemaIdentifier?: pulumi.Input<number>;
    /**
     * The list of references to other Schemas.
     */
    schemaReferences?: pulumi.Input<pulumi.Input<inputs.SchemaSchemaReference>[]>;
    schemaRegistryCluster?: pulumi.Input<inputs.SchemaSchemaRegistryCluster>;
    skipValidationDuringPlan?: pulumi.Input<boolean>;
    /**
     * The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`. Schemas evolve safely, following a compatibility mode defined, under a subject name.
     */
    subjectName?: pulumi.Input<string>;
    /**
     * (Required Integer) The version of the Schema, for example, `4`.
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Schema resource.
 */
export interface SchemaArgs {
    /**
     * The Cluster API Credentials.
     */
    credentials?: pulumi.Input<inputs.SchemaCredentials>;
    /**
     * The format of the Schema.
     */
    format: pulumi.Input<string>;
    /**
     * Controls whether a schema should be soft or hard deleted. Set it to `true` if you want to hard delete a schema on destroy. Defaults to `false` (soft delete).
     */
    hardDelete?: pulumi.Input<boolean>;
    metadata?: pulumi.Input<inputs.SchemaMetadata>;
    /**
     * Controls whether a schema should be recreated on update.
     */
    recreateOnUpdate?: pulumi.Input<boolean>;
    /**
     * The REST endpoint of the Schema Registry cluster. For example, for public networking: `https://psrc-00000.us-central1.gcp.confluent.cloud`. In the case of private networking, the endpoint might look like `https://lsrc-abc123.pr1jy6.us-east-2.aws.confluent.cloud`. You can construct it using either:
     * - `data.confluent_schema_registry_cluster.essentials.private_regional_rest_endpoints["us-east-2"]`, or
     * - `https://${data.confluent_schema_registry_cluster.essentials.id}${data.confluent_network.main.endpoint_suffix}`
     */
    restEndpoint?: pulumi.Input<string>;
    ruleset?: pulumi.Input<inputs.SchemaRuleset>;
    /**
     * The definition of the Schema.
     */
    schema?: pulumi.Input<string>;
    /**
     * The list of references to other Schemas.
     */
    schemaReferences?: pulumi.Input<pulumi.Input<inputs.SchemaSchemaReference>[]>;
    schemaRegistryCluster?: pulumi.Input<inputs.SchemaSchemaRegistryCluster>;
    skipValidationDuringPlan?: pulumi.Input<boolean>;
    /**
     * The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`. Schemas evolve safely, following a compatibility mode defined, under a subject name.
     */
    subjectName: pulumi.Input<string>;
}

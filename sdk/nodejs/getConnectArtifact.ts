// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
 *
 * `confluentcloud.ConnectArtifact` data source represents a Connect Artifact in Confluent Cloud. Connect Artifacts are used to store and manage custom connector plugins in Confluent Cloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const example = confluentcloud.getConnectArtifact({
 *     id: "ca-123456",
 *     environment: {
 *         id: "env-123456",
 *     },
 *     cloud: "AWS",
 * });
 * export const artifactName = example.then(example => example.displayName);
 * export const artifactCloud = example.then(example => example.cloud);
 * export const artifactContentFormat = example.then(example => example.contentFormat);
 * export const artifactDescription = example.then(example => example.description);
 * ```
 */
export function getConnectArtifact(args: GetConnectArtifactArgs, opts?: pulumi.InvokeOptions): Promise<GetConnectArtifactResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("confluentcloud:index/getConnectArtifact:getConnectArtifact", {
        "cloud": args.cloud,
        "environment": args.environment,
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getConnectArtifact.
 */
export interface GetConnectArtifactArgs {
    /**
     * Cloud provider where the Connect Artifact archive is uploaded.
     */
    cloud: string;
    environment: inputs.GetConnectArtifactEnvironment;
    /**
     * The ID of the Connect Artifact.
     */
    id: string;
}

/**
 * A collection of values returned by getConnectArtifact.
 */
export interface GetConnectArtifactResult {
    readonly cloud: string;
    /**
     * (String) Archive format of the Connect Artifact. Supported formats are `JAR` and `ZIP`.
     */
    readonly contentFormat: string;
    /**
     * (String) Description of the Connect Artifact.
     */
    readonly description: string;
    /**
     * (String) The unique name of the Connect Artifact per cloud, environment scope.
     */
    readonly displayName: string;
    readonly environment: outputs.GetConnectArtifactEnvironment;
    readonly id: string;
}
/**
 * [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
 *
 * `confluentcloud.ConnectArtifact` data source represents a Connect Artifact in Confluent Cloud. Connect Artifacts are used to store and manage custom connector plugins in Confluent Cloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const example = confluentcloud.getConnectArtifact({
 *     id: "ca-123456",
 *     environment: {
 *         id: "env-123456",
 *     },
 *     cloud: "AWS",
 * });
 * export const artifactName = example.then(example => example.displayName);
 * export const artifactCloud = example.then(example => example.cloud);
 * export const artifactContentFormat = example.then(example => example.contentFormat);
 * export const artifactDescription = example.then(example => example.description);
 * ```
 */
export function getConnectArtifactOutput(args: GetConnectArtifactOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetConnectArtifactResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("confluentcloud:index/getConnectArtifact:getConnectArtifact", {
        "cloud": args.cloud,
        "environment": args.environment,
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getConnectArtifact.
 */
export interface GetConnectArtifactOutputArgs {
    /**
     * Cloud provider where the Connect Artifact archive is uploaded.
     */
    cloud: pulumi.Input<string>;
    environment: pulumi.Input<inputs.GetConnectArtifactEnvironmentArgs>;
    /**
     * The ID of the Connect Artifact.
     */
    id: pulumi.Input<string>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ### Option #1: Manage multiple Schema Registry clusters in the same Pulumi Stack
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const example = new confluentcloud.SchemaRegistryClusterMode("example", {
 *     schemaRegistryCluster: {
 *         id: essentials.id,
 *     },
 *     restEndpoint: essentials.restEndpoint,
 *     mode: "READONLY",
 *     credentials: {
 *         key: "<Schema Registry API Key for data.confluent_schema_registry_cluster.essentials>",
 *         secret: "<Schema Registry API Secret for data.confluent_schema_registry_cluster.essentials>",
 *     },
 * });
 * ```
 *
 * ### Option #2: Manage a single Schema Registry cluster in the same Pulumi Stack
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const example = new confluentcloud.SchemaRegistryClusterMode("example", {mode: "READONLY"});
 * ```
 *
 * ## Import
 *
 * You can import a Mode by using the Schema Registry cluster ID, Subject name in the format `<Schema Registry cluster ID>`, for example:
 *
 * $ export IMPORT_SCHEMA_REGISTRY_API_KEY="<schema_registry_api_key>"
 *
 * $ export IMPORT_SCHEMA_REGISTRY_API_SECRET="<schema_registry_api_secret>"
 *
 * $ export IMPORT_SCHEMA_REGISTRY_REST_ENDPOINT="<schema_registry_rest_endpoint>"
 *
 * ```sh
 * $ pulumi import confluentcloud:index/schemaRegistryClusterMode:SchemaRegistryClusterMode example lsrc-abc123
 * ```
 *
 * !> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
 */
export class SchemaRegistryClusterMode extends pulumi.CustomResource {
    /**
     * Get an existing SchemaRegistryClusterMode resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SchemaRegistryClusterModeState, opts?: pulumi.CustomResourceOptions): SchemaRegistryClusterMode {
        return new SchemaRegistryClusterMode(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'confluentcloud:index/schemaRegistryClusterMode:SchemaRegistryClusterMode';

    /**
     * Returns true if the given object is an instance of SchemaRegistryClusterMode.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SchemaRegistryClusterMode {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SchemaRegistryClusterMode.__pulumiType;
    }

    /**
     * The Cluster API Credentials.
     */
    declare public readonly credentials: pulumi.Output<outputs.SchemaRegistryClusterModeCredentials | undefined>;
    /**
     * An optional flag to force a mode change even if the Schema Registry has existing schemas. This can be useful in disaster recovery (DR) scenarios using [Schema Linking](https://docs.confluent.io/cloud/current/sr/schema-linking.html). Defaults to `false`, which does not allow a mode change to `IMPORT` if Schema Registry has registered schemas. Must be unset when importing.
     */
    declare public readonly force: pulumi.Output<boolean | undefined>;
    /**
     * The global Schema Registry mode. Accepted values are: `READWRITE`, `READONLY`, `READONLY_OVERRIDE`, and `IMPORT`.
     */
    declare public readonly mode: pulumi.Output<string>;
    /**
     * The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
     */
    declare public readonly restEndpoint: pulumi.Output<string | undefined>;
    declare public readonly schemaRegistryCluster: pulumi.Output<outputs.SchemaRegistryClusterModeSchemaRegistryCluster | undefined>;

    /**
     * Create a SchemaRegistryClusterMode resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SchemaRegistryClusterModeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SchemaRegistryClusterModeArgs | SchemaRegistryClusterModeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SchemaRegistryClusterModeState | undefined;
            resourceInputs["credentials"] = state?.credentials;
            resourceInputs["force"] = state?.force;
            resourceInputs["mode"] = state?.mode;
            resourceInputs["restEndpoint"] = state?.restEndpoint;
            resourceInputs["schemaRegistryCluster"] = state?.schemaRegistryCluster;
        } else {
            const args = argsOrState as SchemaRegistryClusterModeArgs | undefined;
            resourceInputs["credentials"] = args?.credentials ? pulumi.secret(args.credentials) : undefined;
            resourceInputs["force"] = args?.force;
            resourceInputs["mode"] = args?.mode;
            resourceInputs["restEndpoint"] = args?.restEndpoint;
            resourceInputs["schemaRegistryCluster"] = args?.schemaRegistryCluster;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["credentials"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SchemaRegistryClusterMode.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SchemaRegistryClusterMode resources.
 */
export interface SchemaRegistryClusterModeState {
    /**
     * The Cluster API Credentials.
     */
    credentials?: pulumi.Input<inputs.SchemaRegistryClusterModeCredentials>;
    /**
     * An optional flag to force a mode change even if the Schema Registry has existing schemas. This can be useful in disaster recovery (DR) scenarios using [Schema Linking](https://docs.confluent.io/cloud/current/sr/schema-linking.html). Defaults to `false`, which does not allow a mode change to `IMPORT` if Schema Registry has registered schemas. Must be unset when importing.
     */
    force?: pulumi.Input<boolean>;
    /**
     * The global Schema Registry mode. Accepted values are: `READWRITE`, `READONLY`, `READONLY_OVERRIDE`, and `IMPORT`.
     */
    mode?: pulumi.Input<string>;
    /**
     * The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
     */
    restEndpoint?: pulumi.Input<string>;
    schemaRegistryCluster?: pulumi.Input<inputs.SchemaRegistryClusterModeSchemaRegistryCluster>;
}

/**
 * The set of arguments for constructing a SchemaRegistryClusterMode resource.
 */
export interface SchemaRegistryClusterModeArgs {
    /**
     * The Cluster API Credentials.
     */
    credentials?: pulumi.Input<inputs.SchemaRegistryClusterModeCredentials>;
    /**
     * An optional flag to force a mode change even if the Schema Registry has existing schemas. This can be useful in disaster recovery (DR) scenarios using [Schema Linking](https://docs.confluent.io/cloud/current/sr/schema-linking.html). Defaults to `false`, which does not allow a mode change to `IMPORT` if Schema Registry has registered schemas. Must be unset when importing.
     */
    force?: pulumi.Input<boolean>;
    /**
     * The global Schema Registry mode. Accepted values are: `READWRITE`, `READONLY`, `READONLY_OVERRIDE`, and `IMPORT`.
     */
    mode?: pulumi.Input<string>;
    /**
     * The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
     */
    restEndpoint?: pulumi.Input<string>;
    schemaRegistryCluster?: pulumi.Input<inputs.SchemaRegistryClusterModeSchemaRegistryCluster>;
}

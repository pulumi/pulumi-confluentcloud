// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
 *
 * `confluentcloud.TableflowTopic` describes a Tableflow Topic data source.
 *
 * ## Example Usage
 *
 * ### Option #1: Manage multiple Tableflow Topics in the same Pulumi Stack
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * export = async () => {
 *     const example = await confluentcloud.getTableflowTopic({
 *         environment: {
 *             id: staging.id,
 *         },
 *         kafkaCluster: {
 *             id: stagingConfluentKafkaCluster.id,
 *         },
 *         displayName: "tableflow-example",
 *         credentials: {
 *             key: env_admin_tableflow_api_key.id,
 *             secret: env_admin_tableflow_api_key.secret,
 *         },
 *     });
 *     return {
 *         "retention-ms": example.retentionMs,
 *     };
 * }
 * ```
 *
 * ### Option #2: Manage a single Tableflow Topic in the same Pulumi Stack
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * export = async () => {
 *     const example = await confluentcloud.getTableflowTopic({
 *         displayName: "tableflow-example",
 *     });
 *     return {
 *         "retention-ms": example.retentionMs,
 *     };
 * }
 * ```
 */
export function getTableflowTopic(args: GetTableflowTopicArgs, opts?: pulumi.InvokeOptions): Promise<GetTableflowTopicResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("confluentcloud:index/getTableflowTopic:getTableflowTopic", {
        "credentials": args.credentials,
        "displayName": args.displayName,
        "environment": args.environment,
        "kafkaCluster": args.kafkaCluster,
    }, opts);
}

/**
 * A collection of arguments for invoking getTableflowTopic.
 */
export interface GetTableflowTopicArgs {
    credentials?: inputs.GetTableflowTopicCredentials;
    /**
     * The name of the Tableflow Topic.
     */
    displayName: string;
    environment: inputs.GetTableflowTopicEnvironment;
    kafkaCluster: inputs.GetTableflowTopicKafkaCluster;
}

/**
 * A collection of values returned by getTableflowTopic.
 */
export interface GetTableflowTopicResult {
    /**
     * (Optional Configuration Block) supports the following:
     */
    readonly byobAws: outputs.GetTableflowTopicByobAw[];
    readonly credentials?: outputs.GetTableflowTopicCredentials;
    readonly displayName: string;
    /**
     * (Optional Boolean) This flag determines whether to enable compaction for the Tableflow enabled topic.
     */
    readonly enableCompaction: boolean;
    /**
     * (Optional Boolean) This flag determines whether to enable partitioning for the Tableflow enabled topic.
     */
    readonly enablePartitioning: boolean;
    readonly environment: outputs.GetTableflowTopicEnvironment;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly kafkaCluster: outputs.GetTableflowTopicKafkaCluster;
    /**
     * (Optional Configuration Block) The configuration of the Confluent managed bucket.
     */
    readonly managedStorages: outputs.GetTableflowTopicManagedStorage[];
    /**
     * (Optional String) The strategy to handle record failures in the Tableflow enabled topic during materialization. For `SKIP`, we skip the bad records and move to the next record. For `SUSPEND`, we suspend the materialization of the topic.
     */
    readonly recordFailureStrategy: string;
    /**
     * (Optional String) The max age of snapshots (Iceberg) or versions (Delta) (snapshot/version expiration) to keep on the table in milliseconds for the Tableflow enabled topic.
     */
    readonly retentionMs: string;
    /**
     * (Optional Boolean) Indicates whether the Tableflow should be suspended.
     */
    readonly suspended: boolean;
    /**
     * (Optional List) The supported table formats for the Tableflow-enabled topic.
     */
    readonly tableFormats: string[];
}
/**
 * [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
 *
 * `confluentcloud.TableflowTopic` describes a Tableflow Topic data source.
 *
 * ## Example Usage
 *
 * ### Option #1: Manage multiple Tableflow Topics in the same Pulumi Stack
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * export = async () => {
 *     const example = await confluentcloud.getTableflowTopic({
 *         environment: {
 *             id: staging.id,
 *         },
 *         kafkaCluster: {
 *             id: stagingConfluentKafkaCluster.id,
 *         },
 *         displayName: "tableflow-example",
 *         credentials: {
 *             key: env_admin_tableflow_api_key.id,
 *             secret: env_admin_tableflow_api_key.secret,
 *         },
 *     });
 *     return {
 *         "retention-ms": example.retentionMs,
 *     };
 * }
 * ```
 *
 * ### Option #2: Manage a single Tableflow Topic in the same Pulumi Stack
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * export = async () => {
 *     const example = await confluentcloud.getTableflowTopic({
 *         displayName: "tableflow-example",
 *     });
 *     return {
 *         "retention-ms": example.retentionMs,
 *     };
 * }
 * ```
 */
export function getTableflowTopicOutput(args: GetTableflowTopicOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetTableflowTopicResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("confluentcloud:index/getTableflowTopic:getTableflowTopic", {
        "credentials": args.credentials,
        "displayName": args.displayName,
        "environment": args.environment,
        "kafkaCluster": args.kafkaCluster,
    }, opts);
}

/**
 * A collection of arguments for invoking getTableflowTopic.
 */
export interface GetTableflowTopicOutputArgs {
    credentials?: pulumi.Input<inputs.GetTableflowTopicCredentialsArgs>;
    /**
     * The name of the Tableflow Topic.
     */
    displayName: pulumi.Input<string>;
    environment: pulumi.Input<inputs.GetTableflowTopicEnvironmentArgs>;
    kafkaCluster: pulumi.Input<inputs.GetTableflowTopicKafkaClusterArgs>;
}

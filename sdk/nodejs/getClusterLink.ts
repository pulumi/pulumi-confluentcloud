// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
 *
 * `confluentcloud.ClusterLink` describes a Cluster Link data source.
 *
 * ## Example Usage
 *
 * ### Option #1: Manage multiple Kafka clusters in the same Pulumi Stack
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const main = confluentcloud.getClusterLink({
 *     linkName: "main-link",
 *     restEndpoint: west.restEndpoint,
 *     kafkaCluster: {
 *         id: west.id,
 *     },
 *     credentials: {
 *         key: app_manager_west_cluster_api_key.id,
 *         secret: app_manager_west_cluster_api_key.secret,
 *     },
 * });
 * export const kafkaClusterLinkId = main.then(main => main.clusterLinkId);
 * ```
 *
 * ### Option #2: Manage a single Kafka cluster in the same Pulumi Stack
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const main = confluentcloud.getClusterLink({
 *     linkName: "main-link",
 * });
 * export const kafkaClusterLinkId = main.then(main => main.clusterLinkId);
 * ```
 *
 * ### Option #3: Manage Kafka cluster(s) in the same Pulumi Stack using OAuth authentication
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const main = confluentcloud.getClusterLink({
 *     linkName: "main-link",
 *     restEndpoint: west.restEndpoint,
 *     kafkaCluster: {
 *         id: west.id,
 *     },
 * });
 * export const kafkaClusterLinkId = main.then(main => main.clusterLinkId);
 * ```
 */
export function getClusterLink(args: GetClusterLinkArgs, opts?: pulumi.InvokeOptions): Promise<GetClusterLinkResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("confluentcloud:index/getClusterLink:getClusterLink", {
        "credentials": args.credentials,
        "kafkaCluster": args.kafkaCluster,
        "linkName": args.linkName,
        "restEndpoint": args.restEndpoint,
    }, opts);
}

/**
 * A collection of arguments for invoking getClusterLink.
 */
export interface GetClusterLinkArgs {
    credentials?: inputs.GetClusterLinkCredentials;
    kafkaCluster?: inputs.GetClusterLinkKafkaCluster;
    /**
     * The name of the cluster link, for example, `my-cluster-link`.
     */
    linkName: string;
    /**
     * The REST endpoint of the Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
     */
    restEndpoint?: string;
}

/**
 * A collection of values returned by getClusterLink.
 */
export interface GetClusterLinkResult {
    /**
     * (Required String) The actual Cluster Link ID assigned from Confluent Cloud that uniquely represents a link between two Kafka clusters, for example, `qz0HDEV-Qz2B5aPFpcWQJQ`.
     */
    readonly clusterLinkId: string;
    /**
     * (Optional Map) The custom cluster link settings retrieved:
     */
    readonly config: {[key: string]: string};
    readonly credentials?: outputs.GetClusterLinkCredentials;
    /**
     * (Required String) The composite ID of the Cluster Link data-source, in the format `<Kafka cluster ID>/<Cluster link name>`, for example, `lkc-abc123/my-cluster-link`.
     */
    readonly id: string;
    readonly kafkaCluster?: outputs.GetClusterLinkKafkaCluster;
    readonly linkName: string;
    /**
     * (Required String) The current state of the Cluster Link.
     */
    readonly linkState: string;
    readonly restEndpoint?: string;
}
/**
 * [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
 *
 * `confluentcloud.ClusterLink` describes a Cluster Link data source.
 *
 * ## Example Usage
 *
 * ### Option #1: Manage multiple Kafka clusters in the same Pulumi Stack
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const main = confluentcloud.getClusterLink({
 *     linkName: "main-link",
 *     restEndpoint: west.restEndpoint,
 *     kafkaCluster: {
 *         id: west.id,
 *     },
 *     credentials: {
 *         key: app_manager_west_cluster_api_key.id,
 *         secret: app_manager_west_cluster_api_key.secret,
 *     },
 * });
 * export const kafkaClusterLinkId = main.then(main => main.clusterLinkId);
 * ```
 *
 * ### Option #2: Manage a single Kafka cluster in the same Pulumi Stack
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const main = confluentcloud.getClusterLink({
 *     linkName: "main-link",
 * });
 * export const kafkaClusterLinkId = main.then(main => main.clusterLinkId);
 * ```
 *
 * ### Option #3: Manage Kafka cluster(s) in the same Pulumi Stack using OAuth authentication
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const main = confluentcloud.getClusterLink({
 *     linkName: "main-link",
 *     restEndpoint: west.restEndpoint,
 *     kafkaCluster: {
 *         id: west.id,
 *     },
 * });
 * export const kafkaClusterLinkId = main.then(main => main.clusterLinkId);
 * ```
 */
export function getClusterLinkOutput(args: GetClusterLinkOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetClusterLinkResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("confluentcloud:index/getClusterLink:getClusterLink", {
        "credentials": args.credentials,
        "kafkaCluster": args.kafkaCluster,
        "linkName": args.linkName,
        "restEndpoint": args.restEndpoint,
    }, opts);
}

/**
 * A collection of arguments for invoking getClusterLink.
 */
export interface GetClusterLinkOutputArgs {
    credentials?: pulumi.Input<inputs.GetClusterLinkCredentialsArgs>;
    kafkaCluster?: pulumi.Input<inputs.GetClusterLinkKafkaClusterArgs>;
    /**
     * The name of the cluster link, for example, `my-cluster-link`.
     */
    linkName: pulumi.Input<string>;
    /**
     * The REST endpoint of the Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
     */
    restEndpoint?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const example = new confluentcloud.TfImporter("example", {resources: [
 *     "confluent_service_account",
 *     "confluent_environment",
 * ]});
 * ```
 *
 * ## Getting Started
 *
 * The following end-to-end examples might help to get started with the `confluentcloud.TfImporter` resource:
 *   * `cloud-importer`: Export _Cloud_ resources (for example, Service Accounts, Environments)
 *   * `kafka-importer`: Export _Kafka_ resources (for example, ACLs, Topics)
 */
export class TfImporter extends pulumi.CustomResource {
    /**
     * Get an existing TfImporter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TfImporterState, opts?: pulumi.CustomResourceOptions): TfImporter {
        return new TfImporter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'confluentcloud:index/tfImporter:TfImporter';

    /**
     * Returns true if the given object is an instance of TfImporter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TfImporter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TfImporter.__pulumiType;
    }

    /**
     * An absolute path to a folder for outputting generated TF state and TF configuration files for your infrastructure. The folder is created if it doesn't exist. Defaults to `./imported_confluent_infrastructure`.
     *
     * These are the exportable resources:
     * * Service Accounts
     * * Environments
     * * Connectors
     * * Kafka Clusters
     * * Access Control Lists (ACLs)
     * * Topics
     * * Schemas
     *
     * > **Note:** File an issue to request a support for other resources.
     */
    public readonly outputPath!: pulumi.Output<string | undefined>;
    /**
     * A list of resources names to export. Defaults to all exportable resources.
     */
    public readonly resources!: pulumi.Output<string[] | undefined>;

    /**
     * Create a TfImporter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: TfImporterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TfImporterArgs | TfImporterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TfImporterState | undefined;
            resourceInputs["outputPath"] = state ? state.outputPath : undefined;
            resourceInputs["resources"] = state ? state.resources : undefined;
        } else {
            const args = argsOrState as TfImporterArgs | undefined;
            resourceInputs["outputPath"] = args ? args.outputPath : undefined;
            resourceInputs["resources"] = args ? args.resources : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TfImporter.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TfImporter resources.
 */
export interface TfImporterState {
    /**
     * An absolute path to a folder for outputting generated TF state and TF configuration files for your infrastructure. The folder is created if it doesn't exist. Defaults to `./imported_confluent_infrastructure`.
     *
     * These are the exportable resources:
     * * Service Accounts
     * * Environments
     * * Connectors
     * * Kafka Clusters
     * * Access Control Lists (ACLs)
     * * Topics
     * * Schemas
     *
     * > **Note:** File an issue to request a support for other resources.
     */
    outputPath?: pulumi.Input<string>;
    /**
     * A list of resources names to export. Defaults to all exportable resources.
     */
    resources?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a TfImporter resource.
 */
export interface TfImporterArgs {
    /**
     * An absolute path to a folder for outputting generated TF state and TF configuration files for your infrastructure. The folder is created if it doesn't exist. Defaults to `./imported_confluent_infrastructure`.
     *
     * These are the exportable resources:
     * * Service Accounts
     * * Environments
     * * Connectors
     * * Kafka Clusters
     * * Access Control Lists (ACLs)
     * * Topics
     * * Schemas
     *
     * > **Note:** File an issue to request a support for other resources.
     */
    outputPath?: pulumi.Input<string>;
    /**
     * A list of resources names to export. Defaults to all exportable resources.
     */
    resources?: pulumi.Input<pulumi.Input<string>[]>;
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
 *
 * `confluentcloud.CertificateAuthority` provides a Certificate Authority resource that enables creating, editing, and deleting Certificate Authorities on Confluent Cloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const main = new confluentcloud.CertificateAuthority("main", {
 *     displayName: "my_certificate_authority",
 *     description: "description",
 *     certificateChainFilename: "certificate.pem",
 *     certificateChain: "***REDACTED***",
 * });
 * ```
 *
 * ## Import
 *
 * You can import a Certificate Authority by using Certificate Authority ID, for example:
 *
 * $ export CONFLUENT_CLOUD_API_KEY="<cloud_api_key>"
 *
 * $ export CONFLUENT_CLOUD_API_SECRET="<cloud_api_secret>"
 *
 * ```sh
 * $ pulumi import confluentcloud:index/certificateAuthority:CertificateAuthority main op-abc123
 * ```
 *
 * !> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
 */
export class CertificateAuthority extends pulumi.CustomResource {
    /**
     * Get an existing CertificateAuthority resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateAuthorityState, opts?: pulumi.CustomResourceOptions): CertificateAuthority {
        return new CertificateAuthority(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'confluentcloud:index/certificateAuthority:CertificateAuthority';

    /**
     * Returns true if the given object is an instance of CertificateAuthority.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CertificateAuthority {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CertificateAuthority.__pulumiType;
    }

    /**
     * A PEM encoded string containing the signing certificate chain.
     */
    public readonly certificateChain!: pulumi.Output<string>;
    /**
     * The name of the certificate file.
     */
    public readonly certificateChainFilename!: pulumi.Output<string>;
    /**
     * A PEM encoded string containing the CRL for this certificate authority.
     */
    public readonly crlChain!: pulumi.Output<string | undefined>;
    /**
     * (Optional String) The source specifies whether the Certificate Revocation List (CRL) is updated from either local file uploaded (LOCAL) or from url of CRL (URL).
     */
    public /*out*/ readonly crlSource!: pulumi.Output<string>;
    /**
     * (Optional String) The timestamp for when CRL was last updated.
     */
    public /*out*/ readonly crlUpdatedAt!: pulumi.Output<string>;
    /**
     * The url from which to fetch the CRL for the certificate authority.
     */
    public readonly crlUrl!: pulumi.Output<string | undefined>;
    /**
     * A description of the Certificate Authority.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The name of the Certificate Authority.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * (Required List of Strings) The expiration dates of certificates in the chain.
     */
    public /*out*/ readonly expirationDates!: pulumi.Output<string[]>;
    /**
     * (Required List of Strings) The fingerprints for each certificate in the certificate chain.
     */
    public /*out*/ readonly fingerprints!: pulumi.Output<string[]>;
    /**
     * (Required List of Strings) The serial numbers for each certificate in the certificate chain.
     */
    public /*out*/ readonly serialNumbers!: pulumi.Output<string[]>;

    /**
     * Create a CertificateAuthority resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateAuthorityArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificateAuthorityArgs | CertificateAuthorityState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertificateAuthorityState | undefined;
            resourceInputs["certificateChain"] = state ? state.certificateChain : undefined;
            resourceInputs["certificateChainFilename"] = state ? state.certificateChainFilename : undefined;
            resourceInputs["crlChain"] = state ? state.crlChain : undefined;
            resourceInputs["crlSource"] = state ? state.crlSource : undefined;
            resourceInputs["crlUpdatedAt"] = state ? state.crlUpdatedAt : undefined;
            resourceInputs["crlUrl"] = state ? state.crlUrl : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["expirationDates"] = state ? state.expirationDates : undefined;
            resourceInputs["fingerprints"] = state ? state.fingerprints : undefined;
            resourceInputs["serialNumbers"] = state ? state.serialNumbers : undefined;
        } else {
            const args = argsOrState as CertificateAuthorityArgs | undefined;
            if ((!args || args.certificateChain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateChain'");
            }
            if ((!args || args.certificateChainFilename === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateChainFilename'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            resourceInputs["certificateChain"] = args?.certificateChain ? pulumi.secret(args.certificateChain) : undefined;
            resourceInputs["certificateChainFilename"] = args ? args.certificateChainFilename : undefined;
            resourceInputs["crlChain"] = args?.crlChain ? pulumi.secret(args.crlChain) : undefined;
            resourceInputs["crlUrl"] = args ? args.crlUrl : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["crlSource"] = undefined /*out*/;
            resourceInputs["crlUpdatedAt"] = undefined /*out*/;
            resourceInputs["expirationDates"] = undefined /*out*/;
            resourceInputs["fingerprints"] = undefined /*out*/;
            resourceInputs["serialNumbers"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["certificateChain", "crlChain"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CertificateAuthority.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CertificateAuthority resources.
 */
export interface CertificateAuthorityState {
    /**
     * A PEM encoded string containing the signing certificate chain.
     */
    certificateChain?: pulumi.Input<string>;
    /**
     * The name of the certificate file.
     */
    certificateChainFilename?: pulumi.Input<string>;
    /**
     * A PEM encoded string containing the CRL for this certificate authority.
     */
    crlChain?: pulumi.Input<string>;
    /**
     * (Optional String) The source specifies whether the Certificate Revocation List (CRL) is updated from either local file uploaded (LOCAL) or from url of CRL (URL).
     */
    crlSource?: pulumi.Input<string>;
    /**
     * (Optional String) The timestamp for when CRL was last updated.
     */
    crlUpdatedAt?: pulumi.Input<string>;
    /**
     * The url from which to fetch the CRL for the certificate authority.
     */
    crlUrl?: pulumi.Input<string>;
    /**
     * A description of the Certificate Authority.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the Certificate Authority.
     */
    displayName?: pulumi.Input<string>;
    /**
     * (Required List of Strings) The expiration dates of certificates in the chain.
     */
    expirationDates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Required List of Strings) The fingerprints for each certificate in the certificate chain.
     */
    fingerprints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Required List of Strings) The serial numbers for each certificate in the certificate chain.
     */
    serialNumbers?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a CertificateAuthority resource.
 */
export interface CertificateAuthorityArgs {
    /**
     * A PEM encoded string containing the signing certificate chain.
     */
    certificateChain: pulumi.Input<string>;
    /**
     * The name of the certificate file.
     */
    certificateChainFilename: pulumi.Input<string>;
    /**
     * A PEM encoded string containing the CRL for this certificate authority.
     */
    crlChain?: pulumi.Input<string>;
    /**
     * The url from which to fetch the CRL for the certificate authority.
     */
    crlUrl?: pulumi.Input<string>;
    /**
     * A description of the Certificate Authority.
     */
    description: pulumi.Input<string>;
    /**
     * The name of the Certificate Authority.
     */
    displayName: pulumi.Input<string>;
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SchemaRegistryKek extends pulumi.CustomResource {
    /**
     * Get an existing SchemaRegistryKek resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SchemaRegistryKekState, opts?: pulumi.CustomResourceOptions): SchemaRegistryKek {
        return new SchemaRegistryKek(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'confluentcloud:index/schemaRegistryKek:SchemaRegistryKek';

    /**
     * Returns true if the given object is an instance of SchemaRegistryKek.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SchemaRegistryKek {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SchemaRegistryKek.__pulumiType;
    }

    /**
     * The Cluster API Credentials.
     */
    public readonly credentials!: pulumi.Output<outputs.SchemaRegistryKekCredentials | undefined>;
    public readonly doc!: pulumi.Output<string>;
    /**
     * Controls whether a kek should be soft or hard deleted. Set it to `true` if you want to hard delete a schema registry kek
     * on destroy. Defaults to `false` (soft delete).
     */
    public readonly hardDelete!: pulumi.Output<boolean | undefined>;
    public readonly kmsKeyId!: pulumi.Output<string>;
    public readonly kmsType!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly properties!: pulumi.Output<{[key: string]: string}>;
    /**
     * The REST endpoint of the Schema Registry cluster, for example,
     * `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
     */
    public readonly restEndpoint!: pulumi.Output<string | undefined>;
    public readonly schemaRegistryCluster!: pulumi.Output<outputs.SchemaRegistryKekSchemaRegistryCluster | undefined>;
    public readonly shared!: pulumi.Output<boolean>;

    /**
     * Create a SchemaRegistryKek resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SchemaRegistryKekArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SchemaRegistryKekArgs | SchemaRegistryKekState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SchemaRegistryKekState | undefined;
            resourceInputs["credentials"] = state ? state.credentials : undefined;
            resourceInputs["doc"] = state ? state.doc : undefined;
            resourceInputs["hardDelete"] = state ? state.hardDelete : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["kmsType"] = state ? state.kmsType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
            resourceInputs["restEndpoint"] = state ? state.restEndpoint : undefined;
            resourceInputs["schemaRegistryCluster"] = state ? state.schemaRegistryCluster : undefined;
            resourceInputs["shared"] = state ? state.shared : undefined;
        } else {
            const args = argsOrState as SchemaRegistryKekArgs | undefined;
            if ((!args || args.kmsKeyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kmsKeyId'");
            }
            if ((!args || args.kmsType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kmsType'");
            }
            resourceInputs["credentials"] = args?.credentials ? pulumi.secret(args.credentials) : undefined;
            resourceInputs["doc"] = args ? args.doc : undefined;
            resourceInputs["hardDelete"] = args ? args.hardDelete : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["kmsType"] = args ? args.kmsType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["properties"] = args ? args.properties : undefined;
            resourceInputs["restEndpoint"] = args ? args.restEndpoint : undefined;
            resourceInputs["schemaRegistryCluster"] = args ? args.schemaRegistryCluster : undefined;
            resourceInputs["shared"] = args ? args.shared : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["credentials"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SchemaRegistryKek.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SchemaRegistryKek resources.
 */
export interface SchemaRegistryKekState {
    /**
     * The Cluster API Credentials.
     */
    credentials?: pulumi.Input<inputs.SchemaRegistryKekCredentials>;
    doc?: pulumi.Input<string>;
    /**
     * Controls whether a kek should be soft or hard deleted. Set it to `true` if you want to hard delete a schema registry kek
     * on destroy. Defaults to `false` (soft delete).
     */
    hardDelete?: pulumi.Input<boolean>;
    kmsKeyId?: pulumi.Input<string>;
    kmsType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The REST endpoint of the Schema Registry cluster, for example,
     * `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
     */
    restEndpoint?: pulumi.Input<string>;
    schemaRegistryCluster?: pulumi.Input<inputs.SchemaRegistryKekSchemaRegistryCluster>;
    shared?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a SchemaRegistryKek resource.
 */
export interface SchemaRegistryKekArgs {
    /**
     * The Cluster API Credentials.
     */
    credentials?: pulumi.Input<inputs.SchemaRegistryKekCredentials>;
    doc?: pulumi.Input<string>;
    /**
     * Controls whether a kek should be soft or hard deleted. Set it to `true` if you want to hard delete a schema registry kek
     * on destroy. Defaults to `false` (soft delete).
     */
    hardDelete?: pulumi.Input<boolean>;
    kmsKeyId: pulumi.Input<string>;
    kmsType: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The REST endpoint of the Schema Registry cluster, for example,
     * `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
     */
    restEndpoint?: pulumi.Input<string>;
    schemaRegistryCluster?: pulumi.Input<inputs.SchemaRegistryKekSchemaRegistryCluster>;
    shared?: pulumi.Input<boolean>;
}

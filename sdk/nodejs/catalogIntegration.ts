// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ### Option #1: Manage multiple Catalog Integrations in the same Pulumi Stack
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const example = new confluentcloud.CatalogIntegration("example", {
 *     environment: {
 *         id: staging.id,
 *     },
 *     kafkaCluster: {
 *         id: stagingConfluentKafkaCluster.id,
 *     },
 *     displayName: "catalog-integration-1",
 *     awsGlue: {
 *         providerIntegrationId: main.id,
 *     },
 *     credentials: {
 *         key: env_admin_tableflow_api_key.id,
 *         secret: env_admin_tableflow_api_key.secret,
 *     },
 * });
 * ```
 *
 * ### Option #2: Manage a single Catalog Integration in the same Pulumi Stack
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const example = new confluentcloud.CatalogIntegration("example", {
 *     environment: {
 *         id: staging.id,
 *     },
 *     kafkaCluster: {
 *         id: stagingConfluentKafkaCluster.id,
 *     },
 *     displayName: "catalog-integration-1",
 *     snowflake: {
 *         endpoint: "https://vuser1_polaris.snowflakecomputing.com/",
 *         clientId: "***REDACTED***",
 *         clientSecret: "***REDACTED***",
 *         warehouse: "catalog-name",
 *         allowedScope: "session:role:R1",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * You can import a Catalog Integration by using the Catalog Integration name, Environment ID, and Kafka Cluster ID, in the format `<Environment ID>/<Kafka Cluster ID>/<Catalog Integration Id>`, for example:
 *
 * Option #1: Manage multiple Catalog Integrations in the same Pulumi Stack
 *
 * $ export IMPORT_TABLEFLOW_API_KEY="<tableflow_api_key>"
 *
 * $ export IMPORT_TABLEFLOW_API_SECRET="<tableflow_api_secret>"
 *
 * ```sh
 * $ pulumi import confluentcloud:index/catalogIntegration:CatalogIntegration example env-abc123/lkc-abc123/tci-abc123
 * ```
 *
 * Option #2: Manage a single Catalog Integration in the same Pulumi Stack
 *
 * ```sh
 * $ pulumi import confluentcloud:index/catalogIntegration:CatalogIntegration example env-abc123/lkc-abc123/tci-abc123
 * ```
 *
 * !> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
 */
export class CatalogIntegration extends pulumi.CustomResource {
    /**
     * Get an existing CatalogIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CatalogIntegrationState, opts?: pulumi.CustomResourceOptions): CatalogIntegration {
        return new CatalogIntegration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'confluentcloud:index/catalogIntegration:CatalogIntegration';

    /**
     * Returns true if the given object is an instance of CatalogIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CatalogIntegration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CatalogIntegration.__pulumiType;
    }

    /**
     * supports the following (see [Integrate Tableflow with the AWS Glue Catalog in Confluent Cloud](https://docs.confluent.io/cloud/current/topics/tableflow/how-to-guides/catalog-integration/integrate-with-aws-glue-catalog.html) for more details):
     */
    public readonly awsGlue!: pulumi.Output<outputs.CatalogIntegrationAwsGlue | undefined>;
    /**
     * The Cluster API Credentials.
     */
    public readonly credentials!: pulumi.Output<outputs.CatalogIntegrationCredentials | undefined>;
    /**
     * The name of the catalog integration.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     */
    public readonly environment!: pulumi.Output<outputs.CatalogIntegrationEnvironment>;
    public readonly kafkaCluster!: pulumi.Output<outputs.CatalogIntegrationKafkaCluster>;
    /**
     * supports the following (see [Integrate Tableflow with Snowflake Open Catalog or Apache Polaris in Confluent Cloud](https://docs.confluent.io/cloud/current/topics/tableflow/how-to-guides/catalog-integration/integrate-with-snowflake-open-catalog-or-apache-polaris.html) for more details):
     */
    public readonly snowflake!: pulumi.Output<outputs.CatalogIntegrationSnowflake | undefined>;
    /**
     * (Optional Boolean) Indicates whether the Catalog Integration should be suspended.
     */
    public /*out*/ readonly suspended!: pulumi.Output<boolean>;

    /**
     * Create a CatalogIntegration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CatalogIntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CatalogIntegrationArgs | CatalogIntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CatalogIntegrationState | undefined;
            resourceInputs["awsGlue"] = state ? state.awsGlue : undefined;
            resourceInputs["credentials"] = state ? state.credentials : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["kafkaCluster"] = state ? state.kafkaCluster : undefined;
            resourceInputs["snowflake"] = state ? state.snowflake : undefined;
            resourceInputs["suspended"] = state ? state.suspended : undefined;
        } else {
            const args = argsOrState as CatalogIntegrationArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.environment === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            if ((!args || args.kafkaCluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kafkaCluster'");
            }
            resourceInputs["awsGlue"] = args ? args.awsGlue : undefined;
            resourceInputs["credentials"] = args?.credentials ? pulumi.secret(args.credentials) : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["kafkaCluster"] = args ? args.kafkaCluster : undefined;
            resourceInputs["snowflake"] = args ? args.snowflake : undefined;
            resourceInputs["suspended"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["credentials"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CatalogIntegration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CatalogIntegration resources.
 */
export interface CatalogIntegrationState {
    /**
     * supports the following (see [Integrate Tableflow with the AWS Glue Catalog in Confluent Cloud](https://docs.confluent.io/cloud/current/topics/tableflow/how-to-guides/catalog-integration/integrate-with-aws-glue-catalog.html) for more details):
     */
    awsGlue?: pulumi.Input<inputs.CatalogIntegrationAwsGlue>;
    /**
     * The Cluster API Credentials.
     */
    credentials?: pulumi.Input<inputs.CatalogIntegrationCredentials>;
    /**
     * The name of the catalog integration.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     */
    environment?: pulumi.Input<inputs.CatalogIntegrationEnvironment>;
    kafkaCluster?: pulumi.Input<inputs.CatalogIntegrationKafkaCluster>;
    /**
     * supports the following (see [Integrate Tableflow with Snowflake Open Catalog or Apache Polaris in Confluent Cloud](https://docs.confluent.io/cloud/current/topics/tableflow/how-to-guides/catalog-integration/integrate-with-snowflake-open-catalog-or-apache-polaris.html) for more details):
     */
    snowflake?: pulumi.Input<inputs.CatalogIntegrationSnowflake>;
    /**
     * (Optional Boolean) Indicates whether the Catalog Integration should be suspended.
     */
    suspended?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a CatalogIntegration resource.
 */
export interface CatalogIntegrationArgs {
    /**
     * supports the following (see [Integrate Tableflow with the AWS Glue Catalog in Confluent Cloud](https://docs.confluent.io/cloud/current/topics/tableflow/how-to-guides/catalog-integration/integrate-with-aws-glue-catalog.html) for more details):
     */
    awsGlue?: pulumi.Input<inputs.CatalogIntegrationAwsGlue>;
    /**
     * The Cluster API Credentials.
     */
    credentials?: pulumi.Input<inputs.CatalogIntegrationCredentials>;
    /**
     * The name of the catalog integration.
     */
    displayName: pulumi.Input<string>;
    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     */
    environment: pulumi.Input<inputs.CatalogIntegrationEnvironment>;
    kafkaCluster: pulumi.Input<inputs.CatalogIntegrationKafkaCluster>;
    /**
     * supports the following (see [Integrate Tableflow with Snowflake Open Catalog or Apache Polaris in Confluent Cloud](https://docs.confluent.io/cloud/current/topics/tableflow/how-to-guides/catalog-integration/integrate-with-snowflake-open-catalog-or-apache-polaris.html) for more details):
     */
    snowflake?: pulumi.Input<inputs.CatalogIntegrationSnowflake>;
}

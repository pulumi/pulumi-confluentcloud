// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * [![General Availability](<https://img.shields.io/badge/Lifecycle%!S(MISSING)tage-General%!A(MISSING)vailability-%!c(MISSING)6e8>)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
 *
 * `confluentcloud.IdentityPool` provides an Identity Pool resource that enables creating, editing, and deleting identity pools on Confluent Cloud.
 *
 * ## Example Usage
 *
 * ### Example Identity Pool to be used with Azure AD
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const azure = new confluentcloud.IdentityProvider("azure", {
 *     displayName: "My OIDC Provider: Azure AD",
 *     description: "My description",
 *     issuer: "https://login.microsoftonline.com/{tenant_id}/v2.0",
 *     jwksUri: "https://login.microsoftonline.com/common/discovery/v2.0/keys",
 * });
 * const example = new confluentcloud.IdentityPool("example", {
 *     identityProvider: {
 *         id: azure.id,
 *     },
 *     displayName: "My Identity Pool",
 *     description: "Prod Access to Kafka clusters to Release Engineering",
 *     identityClaim: "claims.sub",
 *     filter: "claims.aud==\"confluent\" && claims.group!=\"invalid_group\"",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### Example Identity Pool to be used with Okta
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const okta = new confluentcloud.IdentityProvider("okta", {
 *     displayName: "My OIDC Provider: Okta",
 *     description: "My description",
 *     issuer: "https://mycompany.okta.com/oauth2/default",
 *     jwksUri: "https://mycompany.okta.com/oauth2/default/v1/keys",
 * });
 * const example = new confluentcloud.IdentityPool("example", {
 *     identityProvider: {
 *         id: okta.id,
 *     },
 *     displayName: "My Identity Pool",
 *     description: "Prod Access to Kafka clusters to Release Engineering",
 *     identityClaim: "claims.sub",
 *     filter: "claims.aud==\"confluent\" && claims.group!=\"invalid_group\"",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## External Documentation
 *
 * * [Use identity pools with your OAuth provider](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/identity-pools.html).
 *
 * ## Import
 *
 * You can import an Identity Pool by using Identity Provider ID and Identity Pool ID, in the format `<Identity Provider ID>/<Identity Pool ID>`. The following example shows how to import an Identity Pool:
 *
 * $ export CONFLUENT_CLOUD_API_KEY="<cloud_api_key>"
 *
 * $ export CONFLUENT_CLOUD_API_SECRET="<cloud_api_secret>"
 *
 * ```sh
 * $ pulumi import confluentcloud:index/identityPool:IdentityPool example op-abc123/pool-xyz456
 * ```
 *
 * !> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
 */
export class IdentityPool extends pulumi.CustomResource {
    /**
     * Get an existing IdentityPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IdentityPoolState, opts?: pulumi.CustomResourceOptions): IdentityPool {
        return new IdentityPool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'confluentcloud:index/identityPool:IdentityPool';

    /**
     * Returns true if the given object is an instance of IdentityPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IdentityPool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdentityPool.__pulumiType;
    }

    /**
     * A description for the Identity Pool.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * A human-readable name for the Identity Pool.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * A filter expression in [Supported Common Expression Language (CEL)](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/identity-pools.html#supported-common-expression-language-cel-filters) that specifies which identities can authenticate using your identity pool (see [Set identity pool filters](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/identity-pools.html#set-identity-pool-filters) for more details).
     */
    public readonly filter!: pulumi.Output<string>;
    /**
     * The JSON Web Token (JWT) claim to extract the authenticating identity to Confluent resources from (see [Registered Claim Names](https://datatracker.ietf.org/doc/html/rfc7519#section-4.1) for more details). This appears in the audit log records, showing, for example, that "identity Z used identity pool X to access topic A".
     */
    public readonly identityClaim!: pulumi.Output<string>;
    /**
     * Identity Provider objects represent external OAuth/OpenID Connect providers within Confluent Cloud.
     */
    public readonly identityProvider!: pulumi.Output<outputs.IdentityPoolIdentityProvider>;

    /**
     * Create a IdentityPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IdentityPoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IdentityPoolArgs | IdentityPoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IdentityPoolState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["filter"] = state ? state.filter : undefined;
            resourceInputs["identityClaim"] = state ? state.identityClaim : undefined;
            resourceInputs["identityProvider"] = state ? state.identityProvider : undefined;
        } else {
            const args = argsOrState as IdentityPoolArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.filter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filter'");
            }
            if ((!args || args.identityClaim === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identityClaim'");
            }
            if ((!args || args.identityProvider === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identityProvider'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["filter"] = args ? args.filter : undefined;
            resourceInputs["identityClaim"] = args ? args.identityClaim : undefined;
            resourceInputs["identityProvider"] = args ? args.identityProvider : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IdentityPool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IdentityPool resources.
 */
export interface IdentityPoolState {
    /**
     * A description for the Identity Pool.
     */
    description?: pulumi.Input<string>;
    /**
     * A human-readable name for the Identity Pool.
     */
    displayName?: pulumi.Input<string>;
    /**
     * A filter expression in [Supported Common Expression Language (CEL)](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/identity-pools.html#supported-common-expression-language-cel-filters) that specifies which identities can authenticate using your identity pool (see [Set identity pool filters](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/identity-pools.html#set-identity-pool-filters) for more details).
     */
    filter?: pulumi.Input<string>;
    /**
     * The JSON Web Token (JWT) claim to extract the authenticating identity to Confluent resources from (see [Registered Claim Names](https://datatracker.ietf.org/doc/html/rfc7519#section-4.1) for more details). This appears in the audit log records, showing, for example, that "identity Z used identity pool X to access topic A".
     */
    identityClaim?: pulumi.Input<string>;
    /**
     * Identity Provider objects represent external OAuth/OpenID Connect providers within Confluent Cloud.
     */
    identityProvider?: pulumi.Input<inputs.IdentityPoolIdentityProvider>;
}

/**
 * The set of arguments for constructing a IdentityPool resource.
 */
export interface IdentityPoolArgs {
    /**
     * A description for the Identity Pool.
     */
    description: pulumi.Input<string>;
    /**
     * A human-readable name for the Identity Pool.
     */
    displayName: pulumi.Input<string>;
    /**
     * A filter expression in [Supported Common Expression Language (CEL)](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/identity-pools.html#supported-common-expression-language-cel-filters) that specifies which identities can authenticate using your identity pool (see [Set identity pool filters](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/identity-pools.html#set-identity-pool-filters) for more details).
     */
    filter: pulumi.Input<string>;
    /**
     * The JSON Web Token (JWT) claim to extract the authenticating identity to Confluent resources from (see [Registered Claim Names](https://datatracker.ietf.org/doc/html/rfc7519#section-4.1) for more details). This appears in the audit log records, showing, for example, that "identity Z used identity pool X to access topic A".
     */
    identityClaim: pulumi.Input<string>;
    /**
     * Identity Provider objects represent external OAuth/OpenID Connect providers within Confluent Cloud.
     */
    identityProvider: pulumi.Input<inputs.IdentityPoolIdentityProvider>;
}

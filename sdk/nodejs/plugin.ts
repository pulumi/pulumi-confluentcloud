// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * You can import a Custom Connector Plugin by using a Plugin ID, in the format `<Environment ID/Custom Connector Plugin ID>`. The following example shows how to import a Plugin:
 *
 * $ export CONFLUENT_CLOUD_API_KEY="<cloud_api_key>"
 *
 * $ export CONFLUENT_CLOUD_API_SECRET="<cloud_api_secret>"
 *
 * ```sh
 * $ pulumi import confluentcloud:index/plugin:Plugin main env-123/ccpm-abc123xyz
 * ```
 *
 * !> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
 */
export class Plugin extends pulumi.CustomResource {
    /**
     * Get an existing Plugin resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PluginState, opts?: pulumi.CustomResourceOptions): Plugin {
        return new Plugin(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'confluentcloud:index/plugin:Plugin';

    /**
     * Returns true if the given object is an instance of Plugin.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Plugin {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Plugin.__pulumiType;
    }

    /**
     * (Required String) The API Version of the schema version of the plugin, for example, `ccpm/v1`.
     */
    declare public /*out*/ readonly apiVersion: pulumi.Output<string>;
    /**
     * Cloud provider where the Custom Connector Plugin archive is uploaded. Accepted values are: `AWS`, `AZURE`, `GCP`.
     */
    declare public readonly cloud: pulumi.Output<string>;
    /**
     * The description of the Plugin.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The name of the Plugin.
     */
    declare public readonly displayName: pulumi.Output<string>;
    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     */
    declare public readonly environment: pulumi.Output<outputs.PluginEnvironment>;
    /**
     * (Required String) The kind of the Plugin, for example, `CustomConnectPlugin`.
     */
    declare public /*out*/ readonly kind: pulumi.Output<string>;
    /**
     * (Optional String) Runtime language of the plugin.
     */
    declare public readonly runtimeLanguage: pulumi.Output<string>;

    /**
     * Create a Plugin resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PluginArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PluginArgs | PluginState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PluginState | undefined;
            resourceInputs["apiVersion"] = state?.apiVersion;
            resourceInputs["cloud"] = state?.cloud;
            resourceInputs["description"] = state?.description;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["environment"] = state?.environment;
            resourceInputs["kind"] = state?.kind;
            resourceInputs["runtimeLanguage"] = state?.runtimeLanguage;
        } else {
            const args = argsOrState as PluginArgs | undefined;
            if (args?.cloud === undefined && !opts.urn) {
                throw new Error("Missing required property 'cloud'");
            }
            if (args?.displayName === undefined && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if (args?.environment === undefined && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            resourceInputs["cloud"] = args?.cloud;
            resourceInputs["description"] = args?.description;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["environment"] = args?.environment;
            resourceInputs["runtimeLanguage"] = args?.runtimeLanguage;
            resourceInputs["apiVersion"] = undefined /*out*/;
            resourceInputs["kind"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Plugin.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Plugin resources.
 */
export interface PluginState {
    /**
     * (Required String) The API Version of the schema version of the plugin, for example, `ccpm/v1`.
     */
    apiVersion?: pulumi.Input<string>;
    /**
     * Cloud provider where the Custom Connector Plugin archive is uploaded. Accepted values are: `AWS`, `AZURE`, `GCP`.
     */
    cloud?: pulumi.Input<string>;
    /**
     * The description of the Plugin.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the Plugin.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     */
    environment?: pulumi.Input<inputs.PluginEnvironment>;
    /**
     * (Required String) The kind of the Plugin, for example, `CustomConnectPlugin`.
     */
    kind?: pulumi.Input<string>;
    /**
     * (Optional String) Runtime language of the plugin.
     */
    runtimeLanguage?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Plugin resource.
 */
export interface PluginArgs {
    /**
     * Cloud provider where the Custom Connector Plugin archive is uploaded. Accepted values are: `AWS`, `AZURE`, `GCP`.
     */
    cloud: pulumi.Input<string>;
    /**
     * The description of the Plugin.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the Plugin.
     */
    displayName: pulumi.Input<string>;
    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     */
    environment: pulumi.Input<inputs.PluginEnvironment>;
    /**
     * (Optional String) Runtime language of the plugin.
     */
    runtimeLanguage?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
 *
 * `confluentcloud.IpGroup` describes an IP Group data source.
 *
 * > **Note:** See [IP Filtering on Confluent Cloud](https://docs.confluent.io/cloud/current/security/access-control/ip-filtering/overview.html) for more details about the IP Filtering feature, its prerequisites, and its limitations.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * export = async () => {
 *     const example = await confluentcloud.getIpGroup({
 *         id: "ipg-abc123",
 *     });
 *     return {
 *         example: example,
 *     };
 * }
 * ```
 */
export function getIpGroup(args: GetIpGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetIpGroupResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("confluentcloud:index/getIpGroup:getIpGroup", {
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getIpGroup.
 */
export interface GetIpGroupArgs {
    /**
     * The ID of the IP Group (e.g., `ipg-abc123`).
     */
    id: string;
}

/**
 * A collection of values returned by getIpGroup.
 */
export interface GetIpGroupResult {
    /**
     * (Required List of Strings) A list of CIDRs.
     */
    readonly cidrBlocks: string[];
    /**
     * (Required String) A human-readable name for an IP Group. Can contain any unicode letter or number, the ASCII space character, or any of the following special characters: `[`, `]`, `|`, `&`, `+`, `-`, `_`, `/`, `.`, `,`.
     */
    readonly groupName: string;
    readonly id: string;
}
/**
 * [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
 *
 * `confluentcloud.IpGroup` describes an IP Group data source.
 *
 * > **Note:** See [IP Filtering on Confluent Cloud](https://docs.confluent.io/cloud/current/security/access-control/ip-filtering/overview.html) for more details about the IP Filtering feature, its prerequisites, and its limitations.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * export = async () => {
 *     const example = await confluentcloud.getIpGroup({
 *         id: "ipg-abc123",
 *     });
 *     return {
 *         example: example,
 *     };
 * }
 * ```
 */
export function getIpGroupOutput(args: GetIpGroupOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetIpGroupResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("confluentcloud:index/getIpGroup:getIpGroup", {
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getIpGroup.
 */
export interface GetIpGroupOutputArgs {
    /**
     * The ID of the IP Group (e.g., `ipg-abc123`).
     */
    id: pulumi.Input<string>;
}

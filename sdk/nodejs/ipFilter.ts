// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
 *
 * `confluentcloud.IpFilter` provides an IP Filter resource that enables creating, editing, and deleting IP Filters on Confluent Cloud.
 *
 * > **Note:** See [IP Filtering on Confluent Cloud](https://docs.confluent.io/cloud/current/security/access-control/ip-filtering/overview.html) for more details about the IP Filtering feature, its prerequisites, and its limitations.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const management_filter = new confluentcloud.IpFilter("management-filter", {
 *     filterName: "Management API Rules",
 *     resourceGroup: "management",
 *     ipGroups: [example.id],
 * });
 * const multiple_filter = new confluentcloud.IpFilter("multiple-filter", {
 *     filterName: "Management, Schema, Flink API Rules",
 *     resourceGroup: "multiple",
 *     operationGroups: [
 *         "MANAGEMENT",
 *         "SCHEMA",
 *         "FLINK",
 *     ],
 *     ipGroups: [example.id],
 * });
 * ```
 *
 * ## Import
 *
 * You can import an IP Filter by using IP Filter ID, for example:
 *
 * $ export CONFLUENT_CLOUD_API_KEY="<cloud_api_key>"
 *
 * $ export CONFLUENT_CLOUD_API_SECRET="<cloud_api_secret>"
 *
 * ```sh
 * $ pulumi import confluentcloud:index/ipFilter:IpFilter example ipf-abc123
 * ```
 *
 * !> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
 */
export class IpFilter extends pulumi.CustomResource {
    /**
     * Get an existing IpFilter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IpFilterState, opts?: pulumi.CustomResourceOptions): IpFilter {
        return new IpFilter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'confluentcloud:index/ipFilter:IpFilter';

    /**
     * Returns true if the given object is an instance of IpFilter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IpFilter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpFilter.__pulumiType;
    }

    /**
     * A human-readable name for an IP Filter. Can contain any unicode letter or number, the ASCII space character, or any of the following special characters: `[`, `]`, `|`, `&`, `+`, `-`, `_`, `/`, `.`, `,`.
     */
    public readonly filterName!: pulumi.Output<string>;
    /**
     * A list of IP Groups.
     */
    public readonly ipGroups!: pulumi.Output<string[]>;
    /**
     * Scope of resources covered by this IP Filter. Resource group must be set to 'multiple' in order to use this property. During update operations, note that the operation groups passed in will replace the list of existing operation groups (passing in an empty list will remove all operation groups) from the filter (in line with the behavior for `ipGroups` attribute).
     */
    public readonly operationGroups!: pulumi.Output<string[]>;
    /**
     * Scope of resources covered by this IP Filter. Available resource groups include `"management"` and `"multiple"`.
     */
    public readonly resourceGroup!: pulumi.Output<string>;
    /**
     * A CRN that specifies the scope of the IP Filter, specifically the organization or environment. Without specifying this property, the IP Filter would apply to the whole organization. For example, `"crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa"` or `data.confluent_organization.resource_name`.
     */
    public readonly resourceScope!: pulumi.Output<string>;

    /**
     * Create a IpFilter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IpFilterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IpFilterArgs | IpFilterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IpFilterState | undefined;
            resourceInputs["filterName"] = state ? state.filterName : undefined;
            resourceInputs["ipGroups"] = state ? state.ipGroups : undefined;
            resourceInputs["operationGroups"] = state ? state.operationGroups : undefined;
            resourceInputs["resourceGroup"] = state ? state.resourceGroup : undefined;
            resourceInputs["resourceScope"] = state ? state.resourceScope : undefined;
        } else {
            const args = argsOrState as IpFilterArgs | undefined;
            if ((!args || args.filterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filterName'");
            }
            if ((!args || args.ipGroups === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipGroups'");
            }
            if ((!args || args.resourceGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroup'");
            }
            resourceInputs["filterName"] = args ? args.filterName : undefined;
            resourceInputs["ipGroups"] = args ? args.ipGroups : undefined;
            resourceInputs["operationGroups"] = args ? args.operationGroups : undefined;
            resourceInputs["resourceGroup"] = args ? args.resourceGroup : undefined;
            resourceInputs["resourceScope"] = args ? args.resourceScope : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IpFilter.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IpFilter resources.
 */
export interface IpFilterState {
    /**
     * A human-readable name for an IP Filter. Can contain any unicode letter or number, the ASCII space character, or any of the following special characters: `[`, `]`, `|`, `&`, `+`, `-`, `_`, `/`, `.`, `,`.
     */
    filterName?: pulumi.Input<string>;
    /**
     * A list of IP Groups.
     */
    ipGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Scope of resources covered by this IP Filter. Resource group must be set to 'multiple' in order to use this property. During update operations, note that the operation groups passed in will replace the list of existing operation groups (passing in an empty list will remove all operation groups) from the filter (in line with the behavior for `ipGroups` attribute).
     */
    operationGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Scope of resources covered by this IP Filter. Available resource groups include `"management"` and `"multiple"`.
     */
    resourceGroup?: pulumi.Input<string>;
    /**
     * A CRN that specifies the scope of the IP Filter, specifically the organization or environment. Without specifying this property, the IP Filter would apply to the whole organization. For example, `"crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa"` or `data.confluent_organization.resource_name`.
     */
    resourceScope?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IpFilter resource.
 */
export interface IpFilterArgs {
    /**
     * A human-readable name for an IP Filter. Can contain any unicode letter or number, the ASCII space character, or any of the following special characters: `[`, `]`, `|`, `&`, `+`, `-`, `_`, `/`, `.`, `,`.
     */
    filterName: pulumi.Input<string>;
    /**
     * A list of IP Groups.
     */
    ipGroups: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Scope of resources covered by this IP Filter. Resource group must be set to 'multiple' in order to use this property. During update operations, note that the operation groups passed in will replace the list of existing operation groups (passing in an empty list will remove all operation groups) from the filter (in line with the behavior for `ipGroups` attribute).
     */
    operationGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Scope of resources covered by this IP Filter. Available resource groups include `"management"` and `"multiple"`.
     */
    resourceGroup: pulumi.Input<string>;
    /**
     * A CRN that specifies the scope of the IP Filter, specifically the organization or environment. Without specifying this property, the IP Filter would apply to the whole organization. For example, `"crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa"` or `data.confluent_organization.resource_name`.
     */
    resourceScope?: pulumi.Input<string>;
}

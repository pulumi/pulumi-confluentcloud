// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
 *
 * `confluentcloud.GroupMapping` provides a Group Mapping resource that enables creating, editing, and deleting group mappings on Confluent Cloud.
 *
 * > **Note:** See [Group Mapping in Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/authenticate/sso/group-mapping/overview.html) for more details.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const application_developers = new confluentcloud.GroupMapping("application-developers", {
 *     displayName: "Application Developers",
 *     description: "Admin access to production environment for Engineering",
 *     filter: "\"engineering\" in groups",
 * });
 * const envadmin = new confluentcloud.RoleBinding("envadmin", {
 *     principal: pulumi.interpolate`User:${application_developers.id}`,
 *     roleName: "EnvironmentAdmin",
 *     crnPattern: prod.resourceName,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * You can import a Group Mapping by using Group Mapping ID, for example:
 *
 * $ export CONFLUENT_CLOUD_API_KEY="<cloud_api_key>"
 *
 * $ export CONFLUENT_CLOUD_API_SECRET="<cloud_api_secret>"
 *
 * ```sh
 * $ pulumi import confluentcloud:index/groupMapping:GroupMapping application-developers group-abc123
 * ```
 *
 * !> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
 */
export class GroupMapping extends pulumi.CustomResource {
    /**
     * Get an existing GroupMapping resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupMappingState, opts?: pulumi.CustomResourceOptions): GroupMapping {
        return new GroupMapping(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'confluentcloud:index/groupMapping:GroupMapping';

    /**
     * Returns true if the given object is an instance of GroupMapping.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GroupMapping {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GroupMapping.__pulumiType;
    }

    /**
     * A description explaining the purpose and use of the group mapping.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The name of the Group Mapping.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * A single group identifier or a condition based on [supported CEL operators](https://docs.confluent.io/cloud/current/access-management/authenticate/sso/group-mapping/overview.html#supported-cel-operators-for-group-mapping) that defines which groups are included.
     */
    public readonly filter!: pulumi.Output<string>;

    /**
     * Create a GroupMapping resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GroupMappingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroupMappingArgs | GroupMappingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GroupMappingState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["filter"] = state ? state.filter : undefined;
        } else {
            const args = argsOrState as GroupMappingArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.filter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filter'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["filter"] = args ? args.filter : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GroupMapping.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GroupMapping resources.
 */
export interface GroupMappingState {
    /**
     * A description explaining the purpose and use of the group mapping.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the Group Mapping.
     */
    displayName?: pulumi.Input<string>;
    /**
     * A single group identifier or a condition based on [supported CEL operators](https://docs.confluent.io/cloud/current/access-management/authenticate/sso/group-mapping/overview.html#supported-cel-operators-for-group-mapping) that defines which groups are included.
     */
    filter?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GroupMapping resource.
 */
export interface GroupMappingArgs {
    /**
     * A description explaining the purpose and use of the group mapping.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the Group Mapping.
     */
    displayName: pulumi.Input<string>;
    /**
     * A single group identifier or a condition based on [supported CEL operators](https://docs.confluent.io/cloud/current/access-management/authenticate/sso/group-mapping/overview.html#supported-cel-operators-for-group-mapping) that defines which groups are included.
     */
    filter: pulumi.Input<string>;
}

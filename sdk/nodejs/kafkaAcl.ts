// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
 *
 * `confluentcloud.KafkaAcl` provides a Kafka ACL resource that enables creating and deleting Kafka ACLs on Confluent Cloud.
 *
 * ## Example Usage
 *
 * ### Option #1: Manage multiple Kafka clusters in the same Pulumi Stack
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const describe_basic_cluster = new confluentcloud.KafkaAcl("describe-basic-cluster", {
 *     kafkaCluster: {
 *         id: basic_cluster.id,
 *     },
 *     resourceType: "CLUSTER",
 *     resourceName: "kafka-cluster",
 *     patternType: "LITERAL",
 *     principal: "User:sa-xyz123",
 *     host: "*",
 *     operation: "DESCRIBE",
 *     permission: "ALLOW",
 *     restEndpoint: basic_cluster.restEndpoint,
 *     credentials: {
 *         key: app_manager_kafka_api_key.id,
 *         secret: app_manager_kafka_api_key.secret,
 *     },
 * });
 * ```
 *
 * ### Option #2: Manage a single Kafka cluster in the same Pulumi Stack
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const describe_basic_cluster = new confluentcloud.KafkaAcl("describe-basic-cluster", {
 *     resourceType: "CLUSTER",
 *     resourceName: "kafka-cluster",
 *     patternType: "LITERAL",
 *     principal: "User:sa-xyz123",
 *     host: "*",
 *     operation: "DESCRIBE",
 *     permission: "ALLOW",
 * });
 * ```
 *
 * ## Getting Started
 *
 * The following end-to-end examples might help to get started with `confluentcloud.KafkaAcl` resource:
 *   * basic-kafka-acls: _Basic_ Kafka cluster with authorization using ACLs
 *   * basic-kafka-acls-with-alias: _Basic_ Kafka cluster with authorization using ACLs
 *   * standard-kafka-acls: _Standard_ Kafka cluster with authorization using ACLs
 *   * dedicated-public-kafka-acls: _Dedicated_ Kafka cluster that is accessible over the public internet with authorization using ACLs
 *   * dedicated-privatelink-aws-kafka-acls: _Dedicated_ Kafka cluster on AWS that is accessible via PrivateLink connections with authorization using ACLs
 *   * dedicated-privatelink-azure-kafka-acls: _Dedicated_ Kafka cluster on Azure that is accessible via PrivateLink connections with authorization using ACLs
 *   * dedicated-private-service-connect-gcp-kafka-acls: _Dedicated_ Kafka cluster on GCP that is accessible via Private Service Connect connections with authorization using ACLs
 *   * dedicated-private-service-connect-gcp-kafka-rbac: _Dedicated_ Kafka cluster on GCP that is accessible via Private Service Connect connections with authorization using RBAC
 *   * dedicated-vnet-peering-azure-kafka-acls: _Dedicated_ Kafka cluster on Azure that is accessible via VPC Peering connections with authorization using ACLs
 *   * dedicated-vpc-peering-aws-kafka-acls: _Dedicated_ Kafka cluster on AWS that is accessible via VPC Peering connections with authorization using ACLs
 *   * dedicated-vpc-peering-gcp-kafka-acls: _Dedicated_ Kafka cluster on GCP that is accessible via VPC Peering connections with authorization using ACLs
 *   * dedicated-transit-gateway-attachment-aws-kafka-acls: _Dedicated_ Kafka cluster on AWS that is accessible via Transit Gateway Endpoint with authorization using ACLs
 *   * dedicated-transit-gateway-attachment-aws-kafka-rbac: _Dedicated_ Kafka cluster on AWS that is accessible via Transit Gateway Endpoint with authorization using RBAC
 *   * enterprise-privatelinkattachment-aws-kafka-acls: _Enterprise_ Kafka cluster on AWS that is accessible via PrivateLink connections with authorization using ACLs
 *
 * ## Other Example Usages
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * // https://github.com/confluentinc/terraform-provider-confluent/issues/241
 * const app_producer_write_on_topic = new confluentcloud.KafkaAcl("app-producer-write-on-topic", {
 *     resourceType: "TOPIC",
 *     resourceName: orders.topicName,
 *     patternType: "LITERAL",
 *     principal: `User:${_this.id}`,
 *     host: "*",
 *     operation: "WRITE",
 *     permission: "ALLOW",
 * });
 * ```
 *
 * ## Import
 *
 * You can import Kafka ACLs by using the Kafka cluster ID and attributes of `confluent_kafka_acl` resource in the format `<Kafka cluster ID>/<Kafka ACL resource type>#<Kafka ACL resource name>#<Kafka ACL pattern type>#<Kafka ACL principal>#<Kafka ACL host>#<Kafka ACL operation>#<Kafka ACL permission>`, for example:
 *
 * Option #1: Manage multiple Kafka clusters in the same Pulumi Stack
 *
 * $ export IMPORT_KAFKA_API_KEY="<kafka_api_key>"
 *
 * $ export IMPORT_KAFKA_API_SECRET="<kafka_api_secret>"
 *
 * $ export IMPORT_KAFKA_REST_ENDPOINT="<kafka_rest_endpoint>"
 *
 * ```sh
 * $ pulumi import confluentcloud:index/kafkaAcl:KafkaAcl describe-cluster "lkc-12345/CLUSTER#kafka-cluster#LITERAL#User:sa-xyz123#*#DESCRIBE#ALLOW"
 * ```
 *
 * Option #2: Manage a single Kafka cluster in the same Pulumi Stack
 *
 * $ export CONFLUENT_CLOUD_API_KEY="<cloud_api_key>"
 *
 * $ export CONFLUENT_CLOUD_API_SECRET="<cloud_api_secret>"
 *
 * ```sh
 * $ pulumi import confluentcloud:index/kafkaAcl:KafkaAcl describe-cluster "lkc-12345/CLUSTER#kafka-cluster#LITERAL#User:sa-xyz123#*#DESCRIBE#ALLOW"
 * ```
 *
 * !> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
 */
export class KafkaAcl extends pulumi.CustomResource {
    /**
     * Get an existing KafkaAcl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KafkaAclState, opts?: pulumi.CustomResourceOptions): KafkaAcl {
        return new KafkaAcl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'confluentcloud:index/kafkaAcl:KafkaAcl';

    /**
     * Returns true if the given object is an instance of KafkaAcl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KafkaAcl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KafkaAcl.__pulumiType;
    }

    /**
     * The Cluster API Credentials.
     */
    declare public readonly credentials: pulumi.Output<outputs.KafkaAclCredentials | undefined>;
    /**
     * The host for the ACL.
     */
    declare public readonly host: pulumi.Output<string>;
    declare public readonly kafkaCluster: pulumi.Output<outputs.KafkaAclKafkaCluster | undefined>;
    /**
     * The operation type for the ACL. Accepted values are: `ALL`, `READ`, `WRITE`, `CREATE`, `DELETE`, `ALTER`, `DESCRIBE`, `CLUSTER_ACTION`, `DESCRIBE_CONFIGS`, `ALTER_CONFIGS`, and `IDEMPOTENT_WRITE`.  See [Authorization using ACLs](https://docs.confluent.io/platform/current/kafka/authorization.html#operations) to find mappings of `(resource_type, operation)` to one or more Kafka APIs or request types.
     */
    declare public readonly operation: pulumi.Output<string>;
    /**
     * The pattern type for the ACL. Accepted values are: `LITERAL` and `PREFIXED`.
     */
    declare public readonly patternType: pulumi.Output<string>;
    /**
     * The permission for the ACL. Accepted values are: `DENY` and `ALLOW`.
     */
    declare public readonly permission: pulumi.Output<string>;
    /**
     * The principal for the ACL.
     */
    declare public readonly principal: pulumi.Output<string>;
    /**
     * The resource name for the ACL. Must be `kafka-cluster` if `resourceType` equals to `CLUSTER`.
     */
    declare public readonly resourceName: pulumi.Output<string>;
    /**
     * The type of the resource. Accepted values are: `TOPIC`, `GROUP`, `CLUSTER`, `TRANSACTIONAL_ID`, `DELEGATION_TOKEN`. See [Authorization using ACLs](https://docs.confluent.io/platform/current/kafka/authorization.html#operations) to find definitions of resource types and mappings of `(resource_type, operation)` to one or more Kafka APIs or request types.
     */
    declare public readonly resourceType: pulumi.Output<string>;
    /**
     * The REST endpoint of the Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`.
     */
    declare public readonly restEndpoint: pulumi.Output<string | undefined>;

    /**
     * Create a KafkaAcl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KafkaAclArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KafkaAclArgs | KafkaAclState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KafkaAclState | undefined;
            resourceInputs["credentials"] = state?.credentials;
            resourceInputs["host"] = state?.host;
            resourceInputs["kafkaCluster"] = state?.kafkaCluster;
            resourceInputs["operation"] = state?.operation;
            resourceInputs["patternType"] = state?.patternType;
            resourceInputs["permission"] = state?.permission;
            resourceInputs["principal"] = state?.principal;
            resourceInputs["resourceName"] = state?.resourceName;
            resourceInputs["resourceType"] = state?.resourceType;
            resourceInputs["restEndpoint"] = state?.restEndpoint;
        } else {
            const args = argsOrState as KafkaAclArgs | undefined;
            if (args?.host === undefined && !opts.urn) {
                throw new Error("Missing required property 'host'");
            }
            if (args?.operation === undefined && !opts.urn) {
                throw new Error("Missing required property 'operation'");
            }
            if (args?.patternType === undefined && !opts.urn) {
                throw new Error("Missing required property 'patternType'");
            }
            if (args?.permission === undefined && !opts.urn) {
                throw new Error("Missing required property 'permission'");
            }
            if (args?.principal === undefined && !opts.urn) {
                throw new Error("Missing required property 'principal'");
            }
            if (args?.resourceName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceName'");
            }
            if (args?.resourceType === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceType'");
            }
            resourceInputs["credentials"] = args?.credentials ? pulumi.secret(args.credentials) : undefined;
            resourceInputs["host"] = args?.host;
            resourceInputs["kafkaCluster"] = args?.kafkaCluster;
            resourceInputs["operation"] = args?.operation;
            resourceInputs["patternType"] = args?.patternType;
            resourceInputs["permission"] = args?.permission;
            resourceInputs["principal"] = args?.principal;
            resourceInputs["resourceName"] = args?.resourceName;
            resourceInputs["resourceType"] = args?.resourceType;
            resourceInputs["restEndpoint"] = args?.restEndpoint;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["credentials"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(KafkaAcl.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KafkaAcl resources.
 */
export interface KafkaAclState {
    /**
     * The Cluster API Credentials.
     */
    credentials?: pulumi.Input<inputs.KafkaAclCredentials>;
    /**
     * The host for the ACL.
     */
    host?: pulumi.Input<string>;
    kafkaCluster?: pulumi.Input<inputs.KafkaAclKafkaCluster>;
    /**
     * The operation type for the ACL. Accepted values are: `ALL`, `READ`, `WRITE`, `CREATE`, `DELETE`, `ALTER`, `DESCRIBE`, `CLUSTER_ACTION`, `DESCRIBE_CONFIGS`, `ALTER_CONFIGS`, and `IDEMPOTENT_WRITE`.  See [Authorization using ACLs](https://docs.confluent.io/platform/current/kafka/authorization.html#operations) to find mappings of `(resource_type, operation)` to one or more Kafka APIs or request types.
     */
    operation?: pulumi.Input<string>;
    /**
     * The pattern type for the ACL. Accepted values are: `LITERAL` and `PREFIXED`.
     */
    patternType?: pulumi.Input<string>;
    /**
     * The permission for the ACL. Accepted values are: `DENY` and `ALLOW`.
     */
    permission?: pulumi.Input<string>;
    /**
     * The principal for the ACL.
     */
    principal?: pulumi.Input<string>;
    /**
     * The resource name for the ACL. Must be `kafka-cluster` if `resourceType` equals to `CLUSTER`.
     */
    resourceName?: pulumi.Input<string>;
    /**
     * The type of the resource. Accepted values are: `TOPIC`, `GROUP`, `CLUSTER`, `TRANSACTIONAL_ID`, `DELEGATION_TOKEN`. See [Authorization using ACLs](https://docs.confluent.io/platform/current/kafka/authorization.html#operations) to find definitions of resource types and mappings of `(resource_type, operation)` to one or more Kafka APIs or request types.
     */
    resourceType?: pulumi.Input<string>;
    /**
     * The REST endpoint of the Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`.
     */
    restEndpoint?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KafkaAcl resource.
 */
export interface KafkaAclArgs {
    /**
     * The Cluster API Credentials.
     */
    credentials?: pulumi.Input<inputs.KafkaAclCredentials>;
    /**
     * The host for the ACL.
     */
    host: pulumi.Input<string>;
    kafkaCluster?: pulumi.Input<inputs.KafkaAclKafkaCluster>;
    /**
     * The operation type for the ACL. Accepted values are: `ALL`, `READ`, `WRITE`, `CREATE`, `DELETE`, `ALTER`, `DESCRIBE`, `CLUSTER_ACTION`, `DESCRIBE_CONFIGS`, `ALTER_CONFIGS`, and `IDEMPOTENT_WRITE`.  See [Authorization using ACLs](https://docs.confluent.io/platform/current/kafka/authorization.html#operations) to find mappings of `(resource_type, operation)` to one or more Kafka APIs or request types.
     */
    operation: pulumi.Input<string>;
    /**
     * The pattern type for the ACL. Accepted values are: `LITERAL` and `PREFIXED`.
     */
    patternType: pulumi.Input<string>;
    /**
     * The permission for the ACL. Accepted values are: `DENY` and `ALLOW`.
     */
    permission: pulumi.Input<string>;
    /**
     * The principal for the ACL.
     */
    principal: pulumi.Input<string>;
    /**
     * The resource name for the ACL. Must be `kafka-cluster` if `resourceType` equals to `CLUSTER`.
     */
    resourceName: pulumi.Input<string>;
    /**
     * The type of the resource. Accepted values are: `TOPIC`, `GROUP`, `CLUSTER`, `TRANSACTIONAL_ID`, `DELEGATION_TOKEN`. See [Authorization using ACLs](https://docs.confluent.io/platform/current/kafka/authorization.html#operations) to find definitions of resource types and mappings of `(resource_type, operation)` to one or more Kafka APIs or request types.
     */
    resourceType: pulumi.Input<string>;
    /**
     * The REST endpoint of the Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`.
     */
    restEndpoint?: pulumi.Input<string>;
}

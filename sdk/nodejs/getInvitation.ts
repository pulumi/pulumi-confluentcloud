// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * [![Preview](https://img.shields.io/badge/Lifecycle%20Stage-Preview-%2300afba)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
 *
 * > **Note:** `confluentcloud.Invitation` data source is available in **Preview** for early adopters. Preview features are introduced to gather customer feedback. This feature should be used only for evaluation and non-production testing purposes or to provide feedback to Confluent, particularly as it becomes more widely available in follow-on editions.\
 * **Preview** features are intended for evaluation use in development and testing environments only, and not for production use. The warranty, SLA, and Support Services provisions of your agreement with Confluent do not apply to Preview features. Preview features are considered to be a Proof of Concept as defined in the Confluent Cloud Terms of Service. Confluent may discontinue providing preview releases of the Preview features at any time in Confluent’s sole discretion.
 *
 * `confluentcloud.Invitation` describes an Invitation data source.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const main = confluentcloud.getInvitation({
 *     id: "i-gxxn1",
 * });
 * export const invitation = main;
 * ```
 */
export function getInvitation(args: GetInvitationArgs, opts?: pulumi.InvokeOptions): Promise<GetInvitationResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("confluentcloud:index/getInvitation:getInvitation", {
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getInvitation.
 */
export interface GetInvitationArgs {
    /**
     * The ID of the Invitation, for example, `i-zyw30`.
     */
    id: string;
}

/**
 * A collection of values returned by getInvitation.
 */
export interface GetInvitationResult {
    /**
     * (Optional String) The timestamp that the invitation was accepted.
     */
    readonly acceptedAt: string;
    /**
     * (Optional String) Accepted values are: `AUTH_TYPE_LOCAL` and `AUTH_TYPE_SSO`. The user/invitee's authentication type. Note that only the [`OrganizationAdmin role`](https://docs.confluent.io/cloud/current/access-management/access-control/cloud-rbac.html#organizationadmin) can invite AUTH_TYPE_LOCAL users to SSO organizations. The user's authType is set as AUTH_TYPE_SSO by default if the organization has SSO enabled. Otherwise, the user's authType is AUTH_TYPE_LOCAL by default.
     */
    readonly authType: string;
    /**
     * (Required Configuration Block) supports the following:
     */
    readonly creators: outputs.GetInvitationCreator[];
    /**
     * (Required String) The user/invitee's email address.
     */
    readonly email: string;
    /**
     * (Optional String) The timestamp that the invitation will expire.
     */
    readonly expiresAt: string;
    /**
     * (Required String) The id of invitation creator.
     */
    readonly id: string;
    /**
     * (Optional String) The status of invitations. Accepted values are: `INVITE_STATUS_SENT`,`INVITE_STATUS_STAGED`,`INVITE_STATUS_ACCEPTED`,`INVITE_STATUS_EXPIRED`, and `INVITE_STATUS_DEACTIVATED`.
     */
    readonly status: string;
    /**
     * (Required Configuration Block) supports the following:
     */
    readonly users: outputs.GetInvitationUser[];
}
/**
 * [![Preview](https://img.shields.io/badge/Lifecycle%20Stage-Preview-%2300afba)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
 *
 * > **Note:** `confluentcloud.Invitation` data source is available in **Preview** for early adopters. Preview features are introduced to gather customer feedback. This feature should be used only for evaluation and non-production testing purposes or to provide feedback to Confluent, particularly as it becomes more widely available in follow-on editions.\
 * **Preview** features are intended for evaluation use in development and testing environments only, and not for production use. The warranty, SLA, and Support Services provisions of your agreement with Confluent do not apply to Preview features. Preview features are considered to be a Proof of Concept as defined in the Confluent Cloud Terms of Service. Confluent may discontinue providing preview releases of the Preview features at any time in Confluent’s sole discretion.
 *
 * `confluentcloud.Invitation` describes an Invitation data source.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const main = confluentcloud.getInvitation({
 *     id: "i-gxxn1",
 * });
 * export const invitation = main;
 * ```
 */
export function getInvitationOutput(args: GetInvitationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetInvitationResult> {
    return pulumi.output(args).apply((a: any) => getInvitation(a, opts))
}

/**
 * A collection of arguments for invoking getInvitation.
 */
export interface GetInvitationOutputArgs {
    /**
     * The ID of the Invitation, for example, `i-zyw30`.
     */
    id: pulumi.Input<string>;
}

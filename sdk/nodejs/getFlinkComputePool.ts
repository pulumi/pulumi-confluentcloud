// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * [![Preview](https://img.shields.io/badge/Lifecycle%20Stage-Preview-%2300afba)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
 *
 * > **Note:** `confluentcloud.FlinkComputePool` data source is available in **Preview** for early adopters. Preview features are introduced to gather customer feedback. This feature should be used only for evaluation and non-production testing purposes or to provide feedback to Confluent, particularly as it becomes more widely available in follow-on editions.\
 * **Preview** features are intended for evaluation use in development and testing environments only, and not for production use. The warranty, SLA, and Support Services provisions of your agreement with Confluent do not apply to Preview features. Preview features are considered to be a Proof of Concept as defined in the Confluent Cloud Terms of Service. Confluent may discontinue providing Preview releases of the Preview features at any time in Confluent’s sole discretion.
 *
 * `confluentcloud.FlinkComputePool` describes a Flink Compute Pool data source.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const exampleUsingIdFlinkComputePool = confluentcloud.getFlinkComputePool({
 *     id: "lfcp-abc123",
 *     environment: {
 *         id: "env-xyz456",
 *     },
 * });
 * export const exampleUsingId = exampleUsingIdFlinkComputePool;
 * const exampleUsingNameFlinkComputePool = confluentcloud.getFlinkComputePool({
 *     displayName: "my_compute_pool",
 *     environment: {
 *         id: "env-xyz456",
 *     },
 * });
 * export const exampleUsingName = exampleUsingNameFlinkComputePool;
 * ```
 */
export function getFlinkComputePool(args: GetFlinkComputePoolArgs, opts?: pulumi.InvokeOptions): Promise<GetFlinkComputePoolResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("confluentcloud:index/getFlinkComputePool:getFlinkComputePool", {
        "displayName": args.displayName,
        "environment": args.environment,
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getFlinkComputePool.
 */
export interface GetFlinkComputePoolArgs {
    /**
     * A human-readable name for the Flink Compute Pool.
     */
    displayName?: string;
    /**
     * (Required Configuration Block) supports the following:
     */
    environment: inputs.GetFlinkComputePoolEnvironment;
    /**
     * The ID of the Environment that the Flink Compute Pool belongs to, for example, `env-xyz456`.
     *
     * > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
     */
    id?: string;
}

/**
 * A collection of values returned by getFlinkComputePool.
 */
export interface GetFlinkComputePoolResult {
    /**
     * (Required String) The API Version of the schema version of the Flink Compute Pool, for example, `fcpm/v2`.
     */
    readonly apiVersion: string;
    /**
     * (Required String) The cloud service provider that runs the Flink Compute Pool.
     */
    readonly cloud: string;
    /**
     * (Required Integer) The number of Confluent Flink Units (CFUs) currently allocated to this Flink compute pool.
     */
    readonly currentCfu: number;
    /**
     * (Required String) The name of the Flink Compute Pool.
     */
    readonly displayName: string;
    /**
     * (Required Configuration Block) supports the following:
     */
    readonly environment: outputs.GetFlinkComputePoolEnvironment;
    /**
     * (Required String) The ID of the Environment that the Flink Compute Pool belongs to, for example, `env-abc123`.
     */
    readonly id: string;
    /**
     * (Required String) The kind of the Flink Compute Pool, for example, `ComputePool`.
     */
    readonly kind: string;
    /**
     * (Required Integer) Maximum number of Confluent Flink Units (CFUs) that the Flink compute pool should auto-scale to.
     */
    readonly maxCfu: number;
    /**
     * (Required String) The cloud service provider region that hosts the Flink Compute Pool.
     */
    readonly region: string;
    /**
     * (Required String) The Confluent Resource Name of the Flink Compute Pool.
     */
    readonly resourceName: string;
    /**
     * (Required String) The API endpoint of the Flink Compute Pool.
     */
    readonly restEndpoint: string;
}
/**
 * [![Preview](https://img.shields.io/badge/Lifecycle%20Stage-Preview-%2300afba)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
 *
 * > **Note:** `confluentcloud.FlinkComputePool` data source is available in **Preview** for early adopters. Preview features are introduced to gather customer feedback. This feature should be used only for evaluation and non-production testing purposes or to provide feedback to Confluent, particularly as it becomes more widely available in follow-on editions.\
 * **Preview** features are intended for evaluation use in development and testing environments only, and not for production use. The warranty, SLA, and Support Services provisions of your agreement with Confluent do not apply to Preview features. Preview features are considered to be a Proof of Concept as defined in the Confluent Cloud Terms of Service. Confluent may discontinue providing Preview releases of the Preview features at any time in Confluent’s sole discretion.
 *
 * `confluentcloud.FlinkComputePool` describes a Flink Compute Pool data source.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const exampleUsingIdFlinkComputePool = confluentcloud.getFlinkComputePool({
 *     id: "lfcp-abc123",
 *     environment: {
 *         id: "env-xyz456",
 *     },
 * });
 * export const exampleUsingId = exampleUsingIdFlinkComputePool;
 * const exampleUsingNameFlinkComputePool = confluentcloud.getFlinkComputePool({
 *     displayName: "my_compute_pool",
 *     environment: {
 *         id: "env-xyz456",
 *     },
 * });
 * export const exampleUsingName = exampleUsingNameFlinkComputePool;
 * ```
 */
export function getFlinkComputePoolOutput(args: GetFlinkComputePoolOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFlinkComputePoolResult> {
    return pulumi.output(args).apply((a: any) => getFlinkComputePool(a, opts))
}

/**
 * A collection of arguments for invoking getFlinkComputePool.
 */
export interface GetFlinkComputePoolOutputArgs {
    /**
     * A human-readable name for the Flink Compute Pool.
     */
    displayName?: pulumi.Input<string>;
    /**
     * (Required Configuration Block) supports the following:
     */
    environment: pulumi.Input<inputs.GetFlinkComputePoolEnvironmentArgs>;
    /**
     * The ID of the Environment that the Flink Compute Pool belongs to, for example, `env-xyz456`.
     *
     * > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
     */
    id?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ### Azure Provider Integration
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const staging = new confluentcloud.Environment("staging", {
 *     displayName: "Staging",
 *     streamGovernance: {
 *         "package": "ESSENTIALS",
 *     },
 * });
 * const azure = new confluentcloud.ProviderIntegrationSetup("azure", {
 *     environment: {
 *         id: staging.id,
 *     },
 *     displayName: "azure-integration",
 *     cloud: "AZURE",
 * });
 * // Configure and validate the Azure integration
 * const azureProviderIntegrationAuthorization = new confluentcloud.ProviderIntegrationAuthorization("azure", {
 *     providerIntegrationId: azure.id,
 *     environment: {
 *         id: staging.id,
 *     },
 *     azure: {
 *         customerAzureTenantId: "12345678-1234-1234-1234-123456789abc",
 *     },
 * });
 * ```
 *
 * ### GCP Provider Integration
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const gcp = new confluentcloud.ProviderIntegrationSetup("gcp", {
 *     environment: {
 *         id: staging.id,
 *     },
 *     displayName: "gcp-integration",
 *     cloud: "GCP",
 * });
 * // Configure and validate the GCP integration
 * const gcpProviderIntegrationAuthorization = new confluentcloud.ProviderIntegrationAuthorization("gcp", {
 *     providerIntegrationId: gcp.id,
 *     environment: {
 *         id: staging.id,
 *     },
 *     gcp: {
 *         customerGoogleServiceAccount: "my-sa@my-project.iam.gserviceaccount.com",
 *     },
 * });
 * ```
 *
 * ## Getting Started
 *
 * The following end-to-end examples might help to get started with `confluentcloud.ProviderIntegrationSetup` resource:
 * * provider-integration-azure: Complete Azure Provider Integration setup
 * * provider-integration-gcp: Complete GCP Provider Integration setup
 *
 * ## Import
 *
 * You can import a Provider Integration by using Environment ID and Provider Integration ID, in the format `<Environment ID>/<Provider Integration ID>`. The following example shows how to import a Provider Integration:
 *
 * $ export CONFLUENT_CLOUD_API_KEY="<cloud_api_key>"
 *
 * $ export CONFLUENT_CLOUD_API_SECRET="<cloud_api_secret>"
 *
 * ```sh
 * $ pulumi import confluentcloud:index/providerIntegrationSetup:ProviderIntegrationSetup main env-abc123/cspi-4xg0q
 * ```
 *
 * !> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
 */
export class ProviderIntegrationSetup extends pulumi.CustomResource {
    /**
     * Get an existing ProviderIntegrationSetup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProviderIntegrationSetupState, opts?: pulumi.CustomResourceOptions): ProviderIntegrationSetup {
        return new ProviderIntegrationSetup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'confluentcloud:index/providerIntegrationSetup:ProviderIntegrationSetup';

    /**
     * Returns true if the given object is an instance of ProviderIntegrationSetup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProviderIntegrationSetup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProviderIntegrationSetup.__pulumiType;
    }

    /**
     * The cloud service provider. Supported values are `AZURE` and `GCP`.
     */
    declare public readonly cloud: pulumi.Output<string>;
    /**
     * The name of the Provider Integration.
     */
    declare public readonly displayName: pulumi.Output<string>;
    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     */
    declare public readonly environment: pulumi.Output<outputs.ProviderIntegrationSetupEnvironment>;
    /**
     * (Required String) The status of the Provider Integration. Values are `DRAFT` and `CREATED`.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * (Required List of Strings) List of resource CRNs where this provider integration is being used.
     */
    declare public /*out*/ readonly usages: pulumi.Output<string[]>;

    /**
     * Create a ProviderIntegrationSetup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProviderIntegrationSetupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProviderIntegrationSetupArgs | ProviderIntegrationSetupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProviderIntegrationSetupState | undefined;
            resourceInputs["cloud"] = state?.cloud;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["environment"] = state?.environment;
            resourceInputs["status"] = state?.status;
            resourceInputs["usages"] = state?.usages;
        } else {
            const args = argsOrState as ProviderIntegrationSetupArgs | undefined;
            if (args?.cloud === undefined && !opts.urn) {
                throw new Error("Missing required property 'cloud'");
            }
            if (args?.displayName === undefined && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if (args?.environment === undefined && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            resourceInputs["cloud"] = args?.cloud;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["environment"] = args?.environment;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["usages"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProviderIntegrationSetup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProviderIntegrationSetup resources.
 */
export interface ProviderIntegrationSetupState {
    /**
     * The cloud service provider. Supported values are `AZURE` and `GCP`.
     */
    cloud?: pulumi.Input<string>;
    /**
     * The name of the Provider Integration.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     */
    environment?: pulumi.Input<inputs.ProviderIntegrationSetupEnvironment>;
    /**
     * (Required String) The status of the Provider Integration. Values are `DRAFT` and `CREATED`.
     */
    status?: pulumi.Input<string>;
    /**
     * (Required List of Strings) List of resource CRNs where this provider integration is being used.
     */
    usages?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ProviderIntegrationSetup resource.
 */
export interface ProviderIntegrationSetupArgs {
    /**
     * The cloud service provider. Supported values are `AZURE` and `GCP`.
     */
    cloud: pulumi.Input<string>;
    /**
     * The name of the Provider Integration.
     */
    displayName: pulumi.Input<string>;
    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     */
    environment: pulumi.Input<inputs.ProviderIntegrationSetupEnvironment>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
 *
 * `confluentcloud.IpFilter` describes an IP Filter data source.
 *
 * > **Note:** See [IP Filtering on Confluent Cloud](https://docs.confluent.io/cloud/current/security/access-control/ip-filtering/overview.html) for more details about the IP Filtering feature, its prerequisites, and its limitations.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * export = async () => {
 *     const example = await confluentcloud.getIpFilter({
 *         id: "ipf-abc123",
 *     });
 *     return {
 *         example: example,
 *     };
 * }
 * ```
 */
export function getIpFilter(args: GetIpFilterArgs, opts?: pulumi.InvokeOptions): Promise<GetIpFilterResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("confluentcloud:index/getIpFilter:getIpFilter", {
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getIpFilter.
 */
export interface GetIpFilterArgs {
    /**
     * The ID of the IP Group (e.g., `ipf-abc123`).
     */
    id: string;
}

/**
 * A collection of values returned by getIpFilter.
 */
export interface GetIpFilterResult {
    /**
     * (Required String) A human-readable name for an IP Filter. Can contain any unicode letter or number, the ASCII space character, or any of the following special characters: `[`, `]`, `|`, `&`, `+`, `-`, `_`, `/`, `.`, `,`.
     */
    readonly filterName: string;
    readonly id: string;
    /**
     * (Required List of Strings) A list of IP Groups.
     */
    readonly ipGroups: string[];
    /**
     * (Required List of Strings) Scope of resources covered by this IP Filter. Resource group must be set to 'multiple' in order to use this property. During update operations, note that the operation groups passed in will replace the list of existing operation groups (passing in an empty list will remove all operation groups) from the filter (in line with the behavior for `ipGroups` attribute).
     */
    readonly operationGroups: string[];
    /**
     * (Required String) Scope of resources covered by this IP Filter. Available resource groups include `"management"` and `"multiple"`.
     */
    readonly resourceGroup: string;
    /**
     * (Required String) A CRN that specifies the scope of the IP Filter, specifically the organization or environment. Without specifying this property, the IP Filter would apply to the whole organization. For example, `"crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa"` or `data.confluent_organization.resource_name`.
     */
    readonly resourceScope: string;
}
/**
 * [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
 *
 * `confluentcloud.IpFilter` describes an IP Filter data source.
 *
 * > **Note:** See [IP Filtering on Confluent Cloud](https://docs.confluent.io/cloud/current/security/access-control/ip-filtering/overview.html) for more details about the IP Filtering feature, its prerequisites, and its limitations.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * export = async () => {
 *     const example = await confluentcloud.getIpFilter({
 *         id: "ipf-abc123",
 *     });
 *     return {
 *         example: example,
 *     };
 * }
 * ```
 */
export function getIpFilterOutput(args: GetIpFilterOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetIpFilterResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("confluentcloud:index/getIpFilter:getIpFilter", {
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getIpFilter.
 */
export interface GetIpFilterOutputArgs {
    /**
     * The ID of the IP Group (e.g., `ipf-abc123`).
     */
    id: pulumi.Input<string>;
}

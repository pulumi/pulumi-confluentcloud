// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * You can import a Schema Registry Key by using the Schema Registry cluster ID, KEK name, Subject, Version and Algorithm in the format `<Schema Registry Cluster Id>/<Schema Registry KEK Name>/<Subject>/<Version>/<Algorithm>`, for example:
 *
 * $ export IMPORT_SCHEMA_REGISTRY_API_KEY="<schema_registry_api_key>"
 *
 * $ export IMPORT_SCHEMA_REGISTRY_API_SECRET="<schema_registry_api_secret>"
 *
 * $ export IMPORT_SCHEMA_REGISTRY_REST_ENDPOINT="<schema_registry_rest_endpoint>"
 *
 * ```sh
 * $ pulumi import confluentcloud:index/schemaRegistryDek:SchemaRegistryDek my_dek lsrc-8wrx70/testkek/ts/1/AES256_GCM
 * ```
 *
 * !> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
 */
export class SchemaRegistryDek extends pulumi.CustomResource {
    /**
     * Get an existing SchemaRegistryDek resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SchemaRegistryDekState, opts?: pulumi.CustomResourceOptions): SchemaRegistryDek {
        return new SchemaRegistryDek(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'confluentcloud:index/schemaRegistryDek:SchemaRegistryDek';

    /**
     * Returns true if the given object is an instance of SchemaRegistryDek.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SchemaRegistryDek {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SchemaRegistryDek.__pulumiType;
    }

    /**
     * Accepted values are: `AES128_GCM`, `AES256_GCM`, and `AES256_SIV`. Defaults to `AES256_GCM`.
     */
    public readonly algorithm!: pulumi.Output<string | undefined>;
    /**
     * The Cluster API Credentials.
     */
    public readonly credentials!: pulumi.Output<outputs.SchemaRegistryDekCredentials | undefined>;
    /**
     * The encrypted key material for the DEK.
     */
    public readonly encryptedKeyMaterial!: pulumi.Output<string>;
    /**
     * Controls whether a dek should be soft or hard deleted. Set it to `true` if you want to hard delete a schema registry dek
     * on destroy. Defaults to `false` (soft delete).
     */
    public readonly hardDelete!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the KEK used to encrypt this DEK.
     */
    public readonly kekName!: pulumi.Output<string>;
    /**
     * (Optional String) The decrypted version of encrypted key material.
     */
    public /*out*/ readonly keyMaterial!: pulumi.Output<string>;
    /**
     * The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
     */
    public readonly restEndpoint!: pulumi.Output<string | undefined>;
    public readonly schemaRegistryCluster!: pulumi.Output<outputs.SchemaRegistryDekSchemaRegistryCluster | undefined>;
    /**
     * The subject for this DEK.
     */
    public readonly subjectName!: pulumi.Output<string>;
    /**
     * The version of this DEK. Defaults to `1`.
     */
    public readonly version!: pulumi.Output<number | undefined>;

    /**
     * Create a SchemaRegistryDek resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SchemaRegistryDekArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SchemaRegistryDekArgs | SchemaRegistryDekState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SchemaRegistryDekState | undefined;
            resourceInputs["algorithm"] = state ? state.algorithm : undefined;
            resourceInputs["credentials"] = state ? state.credentials : undefined;
            resourceInputs["encryptedKeyMaterial"] = state ? state.encryptedKeyMaterial : undefined;
            resourceInputs["hardDelete"] = state ? state.hardDelete : undefined;
            resourceInputs["kekName"] = state ? state.kekName : undefined;
            resourceInputs["keyMaterial"] = state ? state.keyMaterial : undefined;
            resourceInputs["restEndpoint"] = state ? state.restEndpoint : undefined;
            resourceInputs["schemaRegistryCluster"] = state ? state.schemaRegistryCluster : undefined;
            resourceInputs["subjectName"] = state ? state.subjectName : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as SchemaRegistryDekArgs | undefined;
            if ((!args || args.kekName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kekName'");
            }
            if ((!args || args.subjectName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subjectName'");
            }
            resourceInputs["algorithm"] = args ? args.algorithm : undefined;
            resourceInputs["credentials"] = args?.credentials ? pulumi.secret(args.credentials) : undefined;
            resourceInputs["encryptedKeyMaterial"] = args ? args.encryptedKeyMaterial : undefined;
            resourceInputs["hardDelete"] = args ? args.hardDelete : undefined;
            resourceInputs["kekName"] = args ? args.kekName : undefined;
            resourceInputs["restEndpoint"] = args ? args.restEndpoint : undefined;
            resourceInputs["schemaRegistryCluster"] = args ? args.schemaRegistryCluster : undefined;
            resourceInputs["subjectName"] = args ? args.subjectName : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["keyMaterial"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["credentials"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SchemaRegistryDek.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SchemaRegistryDek resources.
 */
export interface SchemaRegistryDekState {
    /**
     * Accepted values are: `AES128_GCM`, `AES256_GCM`, and `AES256_SIV`. Defaults to `AES256_GCM`.
     */
    algorithm?: pulumi.Input<string>;
    /**
     * The Cluster API Credentials.
     */
    credentials?: pulumi.Input<inputs.SchemaRegistryDekCredentials>;
    /**
     * The encrypted key material for the DEK.
     */
    encryptedKeyMaterial?: pulumi.Input<string>;
    /**
     * Controls whether a dek should be soft or hard deleted. Set it to `true` if you want to hard delete a schema registry dek
     * on destroy. Defaults to `false` (soft delete).
     */
    hardDelete?: pulumi.Input<boolean>;
    /**
     * The name of the KEK used to encrypt this DEK.
     */
    kekName?: pulumi.Input<string>;
    /**
     * (Optional String) The decrypted version of encrypted key material.
     */
    keyMaterial?: pulumi.Input<string>;
    /**
     * The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
     */
    restEndpoint?: pulumi.Input<string>;
    schemaRegistryCluster?: pulumi.Input<inputs.SchemaRegistryDekSchemaRegistryCluster>;
    /**
     * The subject for this DEK.
     */
    subjectName?: pulumi.Input<string>;
    /**
     * The version of this DEK. Defaults to `1`.
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SchemaRegistryDek resource.
 */
export interface SchemaRegistryDekArgs {
    /**
     * Accepted values are: `AES128_GCM`, `AES256_GCM`, and `AES256_SIV`. Defaults to `AES256_GCM`.
     */
    algorithm?: pulumi.Input<string>;
    /**
     * The Cluster API Credentials.
     */
    credentials?: pulumi.Input<inputs.SchemaRegistryDekCredentials>;
    /**
     * The encrypted key material for the DEK.
     */
    encryptedKeyMaterial?: pulumi.Input<string>;
    /**
     * Controls whether a dek should be soft or hard deleted. Set it to `true` if you want to hard delete a schema registry dek
     * on destroy. Defaults to `false` (soft delete).
     */
    hardDelete?: pulumi.Input<boolean>;
    /**
     * The name of the KEK used to encrypt this DEK.
     */
    kekName: pulumi.Input<string>;
    /**
     * The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
     */
    restEndpoint?: pulumi.Input<string>;
    schemaRegistryCluster?: pulumi.Input<inputs.SchemaRegistryDekSchemaRegistryCluster>;
    /**
     * The subject for this DEK.
     */
    subjectName: pulumi.Input<string>;
    /**
     * The version of this DEK. Defaults to `1`.
     */
    version?: pulumi.Input<number>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
 *
 * `confluentcloud.ProviderIntegrationSetup` describes a Cloud Service Provider (CSP) integration that allows Confluent Cloud to access resources in your cloud provider account.
 *
 * ## Example Usage
 *
 * ### Azure Provider Integration
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const azure = confluentcloud.getProviderIntegrationSetup({
 *     id: "cspi-abc123",
 *     environment: {
 *         id: "env-xyz456",
 *     },
 * });
 * export const azureIntegrationStatus = azure.then(azure => azure.status);
 * ```
 *
 * ### GCP Provider Integration
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const gcp = confluentcloud.getProviderIntegrationSetup({
 *     displayName: "my-gcp-integration",
 *     environment: {
 *         id: "env-xyz456",
 *     },
 * });
 * export const gcpIntegrationId = gcp.then(gcp => gcp.id);
 * ```
 *
 * ### Using with Authorization Resource
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const main = confluentcloud.getProviderIntegrationSetup({
 *     id: "cspi-abc123",
 *     environment: {
 *         id: "env-xyz456",
 *     },
 * });
 * // Use the integration with authorization data source
 * const mainGetProviderIntegrationAuthorization = main.then(main => confluentcloud.getProviderIntegrationAuthorization({
 *     id: main.id,
 *     environment: {
 *         id: "env-xyz456",
 *     },
 * }));
 * ```
 *
 * ## Getting Started
 *
 * The following end-to-end examples might help to get started with `confluentcloud.ProviderIntegrationSetup` data source:
 * * provider-integration-azure: Complete Azure Provider Integration setup
 * * provider-integration-gcp: Complete GCP Provider Integration setup
 */
export function getProviderIntegrationSetup(args: GetProviderIntegrationSetupArgs, opts?: pulumi.InvokeOptions): Promise<GetProviderIntegrationSetupResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("confluentcloud:index/getProviderIntegrationSetup:getProviderIntegrationSetup", {
        "displayName": args.displayName,
        "environment": args.environment,
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getProviderIntegrationSetup.
 */
export interface GetProviderIntegrationSetupArgs {
    /**
     * The display name of the Provider Integration. Exactly one of `id` or `displayName` must be specified.
     */
    displayName?: string;
    /**
     * (Required Configuration Block) supports the following:
     */
    environment: inputs.GetProviderIntegrationSetupEnvironment;
    /**
     * The ID of the Provider Integration, for example, `cspi-4xg0q`. Exactly one of `id` or `displayName` must be specified.
     */
    id?: string;
}

/**
 * A collection of values returned by getProviderIntegrationSetup.
 */
export interface GetProviderIntegrationSetupResult {
    /**
     * (Computed String) The cloud service provider. Values are `AZURE` and `GCP`.
     */
    readonly cloud: string;
    /**
     * (Required String) The display name of the Provider Integration.
     */
    readonly displayName: string;
    /**
     * (Required Configuration Block) supports the following:
     */
    readonly environment: outputs.GetProviderIntegrationSetupEnvironment;
    /**
     * (Required String) The ID of the Environment that the Provider Integration belongs to, for example, `env-abc123`.
     */
    readonly id: string;
    /**
     * (Required String) The status of the Provider Integration. Values are `DRAFT` and `CREATED`.
     */
    readonly status: string;
    /**
     * (Required List of Strings) List of resource CRNs where this provider integration is being used.
     */
    readonly usages: string[];
}
/**
 * [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
 *
 * `confluentcloud.ProviderIntegrationSetup` describes a Cloud Service Provider (CSP) integration that allows Confluent Cloud to access resources in your cloud provider account.
 *
 * ## Example Usage
 *
 * ### Azure Provider Integration
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const azure = confluentcloud.getProviderIntegrationSetup({
 *     id: "cspi-abc123",
 *     environment: {
 *         id: "env-xyz456",
 *     },
 * });
 * export const azureIntegrationStatus = azure.then(azure => azure.status);
 * ```
 *
 * ### GCP Provider Integration
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const gcp = confluentcloud.getProviderIntegrationSetup({
 *     displayName: "my-gcp-integration",
 *     environment: {
 *         id: "env-xyz456",
 *     },
 * });
 * export const gcpIntegrationId = gcp.then(gcp => gcp.id);
 * ```
 *
 * ### Using with Authorization Resource
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const main = confluentcloud.getProviderIntegrationSetup({
 *     id: "cspi-abc123",
 *     environment: {
 *         id: "env-xyz456",
 *     },
 * });
 * // Use the integration with authorization data source
 * const mainGetProviderIntegrationAuthorization = main.then(main => confluentcloud.getProviderIntegrationAuthorization({
 *     id: main.id,
 *     environment: {
 *         id: "env-xyz456",
 *     },
 * }));
 * ```
 *
 * ## Getting Started
 *
 * The following end-to-end examples might help to get started with `confluentcloud.ProviderIntegrationSetup` data source:
 * * provider-integration-azure: Complete Azure Provider Integration setup
 * * provider-integration-gcp: Complete GCP Provider Integration setup
 */
export function getProviderIntegrationSetupOutput(args: GetProviderIntegrationSetupOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetProviderIntegrationSetupResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("confluentcloud:index/getProviderIntegrationSetup:getProviderIntegrationSetup", {
        "displayName": args.displayName,
        "environment": args.environment,
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getProviderIntegrationSetup.
 */
export interface GetProviderIntegrationSetupOutputArgs {
    /**
     * The display name of the Provider Integration. Exactly one of `id` or `displayName` must be specified.
     */
    displayName?: pulumi.Input<string>;
    /**
     * (Required Configuration Block) supports the following:
     */
    environment: pulumi.Input<inputs.GetProviderIntegrationSetupEnvironmentArgs>;
    /**
     * The ID of the Provider Integration, for example, `cspi-4xg0q`. Exactly one of `id` or `displayName` must be specified.
     */
    id?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * You can import a Provider Integration Authorization by using Environment ID and Provider Integration ID, in the format `<Environment ID>/<Provider Integration ID>`. The following example shows how to import a Provider Integration Authorization:
 *
 * $ export CONFLUENT_CLOUD_API_KEY="<cloud_api_key>"
 *
 * $ export CONFLUENT_CLOUD_API_SECRET="<cloud_api_secret>"
 *
 * ```sh
 * $ pulumi import confluentcloud:index/providerIntegrationAuthorization:ProviderIntegrationAuthorization main env-abc123/cspi-4xg0q
 * ```
 *
 * !> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
 */
export class ProviderIntegrationAuthorization extends pulumi.CustomResource {
    /**
     * Get an existing ProviderIntegrationAuthorization resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProviderIntegrationAuthorizationState, opts?: pulumi.CustomResourceOptions): ProviderIntegrationAuthorization {
        return new ProviderIntegrationAuthorization(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'confluentcloud:index/providerIntegrationAuthorization:ProviderIntegrationAuthorization';

    /**
     * Returns true if the given object is an instance of ProviderIntegrationAuthorization.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProviderIntegrationAuthorization {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProviderIntegrationAuthorization.__pulumiType;
    }

    /**
     * (Optional Configuration Block) Azure-specific configuration details. It supports the following:
     */
    declare public readonly azure: pulumi.Output<outputs.ProviderIntegrationAuthorizationAzure | undefined>;
    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     */
    declare public readonly environment: pulumi.Output<outputs.ProviderIntegrationAuthorizationEnvironment>;
    /**
     * (Optional Configuration Block) GCP-specific configuration details. It supports the following:
     */
    declare public readonly gcp: pulumi.Output<outputs.ProviderIntegrationAuthorizationGcp | undefined>;
    /**
     * The ID of the provider integration to authorize.
     */
    declare public readonly providerIntegrationId: pulumi.Output<string>;

    /**
     * Create a ProviderIntegrationAuthorization resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProviderIntegrationAuthorizationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProviderIntegrationAuthorizationArgs | ProviderIntegrationAuthorizationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProviderIntegrationAuthorizationState | undefined;
            resourceInputs["azure"] = state?.azure;
            resourceInputs["environment"] = state?.environment;
            resourceInputs["gcp"] = state?.gcp;
            resourceInputs["providerIntegrationId"] = state?.providerIntegrationId;
        } else {
            const args = argsOrState as ProviderIntegrationAuthorizationArgs | undefined;
            if (args?.environment === undefined && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            if (args?.providerIntegrationId === undefined && !opts.urn) {
                throw new Error("Missing required property 'providerIntegrationId'");
            }
            resourceInputs["azure"] = args?.azure;
            resourceInputs["environment"] = args?.environment;
            resourceInputs["gcp"] = args?.gcp;
            resourceInputs["providerIntegrationId"] = args?.providerIntegrationId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProviderIntegrationAuthorization.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProviderIntegrationAuthorization resources.
 */
export interface ProviderIntegrationAuthorizationState {
    /**
     * (Optional Configuration Block) Azure-specific configuration details. It supports the following:
     */
    azure?: pulumi.Input<inputs.ProviderIntegrationAuthorizationAzure>;
    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     */
    environment?: pulumi.Input<inputs.ProviderIntegrationAuthorizationEnvironment>;
    /**
     * (Optional Configuration Block) GCP-specific configuration details. It supports the following:
     */
    gcp?: pulumi.Input<inputs.ProviderIntegrationAuthorizationGcp>;
    /**
     * The ID of the provider integration to authorize.
     */
    providerIntegrationId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProviderIntegrationAuthorization resource.
 */
export interface ProviderIntegrationAuthorizationArgs {
    /**
     * (Optional Configuration Block) Azure-specific configuration details. It supports the following:
     */
    azure?: pulumi.Input<inputs.ProviderIntegrationAuthorizationAzure>;
    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     */
    environment: pulumi.Input<inputs.ProviderIntegrationAuthorizationEnvironment>;
    /**
     * (Optional Configuration Block) GCP-specific configuration details. It supports the following:
     */
    gcp?: pulumi.Input<inputs.ProviderIntegrationAuthorizationGcp>;
    /**
     * The ID of the provider integration to authorize.
     */
    providerIntegrationId: pulumi.Input<string>;
}

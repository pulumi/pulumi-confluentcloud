// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
 *
 * `confluentcloud.getSchemaRegistryRegion` describes a Schema Registry cluster data source.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const exampleSchemaRegistryRegion = confluentcloud.getSchemaRegistryRegion({
 *     cloud: "AWS",
 *     region: "us-east-2",
 *     "package": "ESSENTIALS",
 * });
 * export const example = exampleSchemaRegistryRegion;
 * ```
 */
export function getSchemaRegistryRegion(args: GetSchemaRegistryRegionArgs, opts?: pulumi.InvokeOptions): Promise<GetSchemaRegistryRegionResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("confluentcloud:index/getSchemaRegistryRegion:getSchemaRegistryRegion", {
        "cloud": args.cloud,
        "package": args.package,
        "region": args.region,
    }, opts);
}

/**
 * A collection of arguments for invoking getSchemaRegistryRegion.
 */
export interface GetSchemaRegistryRegionArgs {
    /**
     * The cloud service provider that hosts the region. Accepted values are: `AWS`, `AZURE`, and `GCP`.
     */
    cloud: string;
    /**
     * The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.
     */
    package: string;
    /**
     * The cloud service provider region, for example, `us-east-2`. See [Cloud Providers and Regions](https://docs.confluent.io/cloud/current/clusters/regions.html#cloud-providers-and-regions) for a full list of options for AWS, Azure, and GCP.
     */
    region: string;
}

/**
 * A collection of values returned by getSchemaRegistryRegion.
 */
export interface GetSchemaRegistryRegionResult {
    readonly cloud: string;
    /**
     * (Required String) The ID of the Schema Registry region, for example, `sgreg-1`.
     */
    readonly id: string;
    readonly package: string;
    readonly region: string;
}

export function getSchemaRegistryRegionOutput(args: GetSchemaRegistryRegionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSchemaRegistryRegionResult> {
    return pulumi.output(args).apply(a => getSchemaRegistryRegion(a, opts))
}

/**
 * A collection of arguments for invoking getSchemaRegistryRegion.
 */
export interface GetSchemaRegistryRegionOutputArgs {
    /**
     * The cloud service provider that hosts the region. Accepted values are: `AWS`, `AZURE`, and `GCP`.
     */
    cloud: pulumi.Input<string>;
    /**
     * The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.
     */
    package: pulumi.Input<string>;
    /**
     * The cloud service provider region, for example, `us-east-2`. See [Cloud Providers and Regions](https://docs.confluent.io/cloud/current/clusters/regions.html#cloud-providers-and-regions) for a full list of options for AWS, Azure, and GCP.
     */
    region: pulumi.Input<string>;
}

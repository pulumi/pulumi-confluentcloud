// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getSubjectConfig(args: GetSubjectConfigArgs, opts?: pulumi.InvokeOptions): Promise<GetSubjectConfigResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("confluentcloud:index/getSubjectConfig:getSubjectConfig", {
        "credentials": args.credentials,
        "restEndpoint": args.restEndpoint,
        "schemaRegistryCluster": args.schemaRegistryCluster,
        "subjectName": args.subjectName,
    }, opts);
}

/**
 * A collection of arguments for invoking getSubjectConfig.
 */
export interface GetSubjectConfigArgs {
    credentials?: inputs.GetSubjectConfigCredentials;
    /**
     * The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
     */
    restEndpoint?: string;
    schemaRegistryCluster?: inputs.GetSubjectConfigSchemaRegistryCluster;
    /**
     * The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`.
     */
    subjectName: string;
}

/**
 * A collection of values returned by getSubjectConfig.
 */
export interface GetSubjectConfigResult {
    /**
     * (Required String) The Compatibility Level of the specified subject. Accepted values are: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`, `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, and `NONE`. See the [Compatibility Types](https://docs.confluent.io/platform/current/schema-registry/avro.html#compatibility-types) for more details.
     */
    readonly compatibilityLevel: string;
    readonly credentials?: outputs.GetSubjectConfigCredentials;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly restEndpoint?: string;
    readonly schemaRegistryCluster?: outputs.GetSubjectConfigSchemaRegistryCluster;
    readonly subjectName: string;
}
export function getSubjectConfigOutput(args: GetSubjectConfigOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSubjectConfigResult> {
    return pulumi.output(args).apply((a: any) => getSubjectConfig(a, opts))
}

/**
 * A collection of arguments for invoking getSubjectConfig.
 */
export interface GetSubjectConfigOutputArgs {
    credentials?: pulumi.Input<inputs.GetSubjectConfigCredentialsArgs>;
    /**
     * The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
     */
    restEndpoint?: pulumi.Input<string>;
    schemaRegistryCluster?: pulumi.Input<inputs.GetSubjectConfigSchemaRegistryClusterArgs>;
    /**
     * The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`.
     */
    subjectName: pulumi.Input<string>;
}

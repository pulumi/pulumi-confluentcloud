// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccessPointArgs, AccessPointState } from "./accessPoint";
export type AccessPoint = import("./accessPoint").AccessPoint;
export const AccessPoint: typeof import("./accessPoint").AccessPoint = null as any;
utilities.lazyLoad(exports, ["AccessPoint"], () => require("./accessPoint"));

export { ApiKeyArgs, ApiKeyState } from "./apiKey";
export type ApiKey = import("./apiKey").ApiKey;
export const ApiKey: typeof import("./apiKey").ApiKey = null as any;
utilities.lazyLoad(exports, ["ApiKey"], () => require("./apiKey"));

export { BusinessMetadataArgs, BusinessMetadataState } from "./businessMetadata";
export type BusinessMetadata = import("./businessMetadata").BusinessMetadata;
export const BusinessMetadata: typeof import("./businessMetadata").BusinessMetadata = null as any;
utilities.lazyLoad(exports, ["BusinessMetadata"], () => require("./businessMetadata"));

export { BusinessMetadataBindingArgs, BusinessMetadataBindingState } from "./businessMetadataBinding";
export type BusinessMetadataBinding = import("./businessMetadataBinding").BusinessMetadataBinding;
export const BusinessMetadataBinding: typeof import("./businessMetadataBinding").BusinessMetadataBinding = null as any;
utilities.lazyLoad(exports, ["BusinessMetadataBinding"], () => require("./businessMetadataBinding"));

export { ByokKeyArgs, ByokKeyState } from "./byokKey";
export type ByokKey = import("./byokKey").ByokKey;
export const ByokKey: typeof import("./byokKey").ByokKey = null as any;
utilities.lazyLoad(exports, ["ByokKey"], () => require("./byokKey"));

export { CatalogEntityAttributesArgs, CatalogEntityAttributesState } from "./catalogEntityAttributes";
export type CatalogEntityAttributes = import("./catalogEntityAttributes").CatalogEntityAttributes;
export const CatalogEntityAttributes: typeof import("./catalogEntityAttributes").CatalogEntityAttributes = null as any;
utilities.lazyLoad(exports, ["CatalogEntityAttributes"], () => require("./catalogEntityAttributes"));

export { ClusterLinkArgs, ClusterLinkState } from "./clusterLink";
export type ClusterLink = import("./clusterLink").ClusterLink;
export const ClusterLink: typeof import("./clusterLink").ClusterLink = null as any;
utilities.lazyLoad(exports, ["ClusterLink"], () => require("./clusterLink"));

export { ConnectorArgs, ConnectorState } from "./connector";
export type Connector = import("./connector").Connector;
export const Connector: typeof import("./connector").Connector = null as any;
utilities.lazyLoad(exports, ["Connector"], () => require("./connector"));

export { CustomConnectorPluginArgs, CustomConnectorPluginState } from "./customConnectorPlugin";
export type CustomConnectorPlugin = import("./customConnectorPlugin").CustomConnectorPlugin;
export const CustomConnectorPlugin: typeof import("./customConnectorPlugin").CustomConnectorPlugin = null as any;
utilities.lazyLoad(exports, ["CustomConnectorPlugin"], () => require("./customConnectorPlugin"));

export { DnsForwarderArgs, DnsForwarderState } from "./dnsForwarder";
export type DnsForwarder = import("./dnsForwarder").DnsForwarder;
export const DnsForwarder: typeof import("./dnsForwarder").DnsForwarder = null as any;
utilities.lazyLoad(exports, ["DnsForwarder"], () => require("./dnsForwarder"));

export { DnsRecordArgs, DnsRecordState } from "./dnsRecord";
export type DnsRecord = import("./dnsRecord").DnsRecord;
export const DnsRecord: typeof import("./dnsRecord").DnsRecord = null as any;
utilities.lazyLoad(exports, ["DnsRecord"], () => require("./dnsRecord"));

export { EnvironmentArgs, EnvironmentState } from "./environment";
export type Environment = import("./environment").Environment;
export const Environment: typeof import("./environment").Environment = null as any;
utilities.lazyLoad(exports, ["Environment"], () => require("./environment"));

export { FlinkComputePoolArgs, FlinkComputePoolState } from "./flinkComputePool";
export type FlinkComputePool = import("./flinkComputePool").FlinkComputePool;
export const FlinkComputePool: typeof import("./flinkComputePool").FlinkComputePool = null as any;
utilities.lazyLoad(exports, ["FlinkComputePool"], () => require("./flinkComputePool"));

export { FlinkStatementArgs, FlinkStatementState } from "./flinkStatement";
export type FlinkStatement = import("./flinkStatement").FlinkStatement;
export const FlinkStatement: typeof import("./flinkStatement").FlinkStatement = null as any;
utilities.lazyLoad(exports, ["FlinkStatement"], () => require("./flinkStatement"));

export { GetAccessPointArgs, GetAccessPointResult, GetAccessPointOutputArgs } from "./getAccessPoint";
export const getAccessPoint: typeof import("./getAccessPoint").getAccessPoint = null as any;
export const getAccessPointOutput: typeof import("./getAccessPoint").getAccessPointOutput = null as any;
utilities.lazyLoad(exports, ["getAccessPoint","getAccessPointOutput"], () => require("./getAccessPoint"));

export { GetBusinessMetadataArgs, GetBusinessMetadataResult, GetBusinessMetadataOutputArgs } from "./getBusinessMetadata";
export const getBusinessMetadata: typeof import("./getBusinessMetadata").getBusinessMetadata = null as any;
export const getBusinessMetadataOutput: typeof import("./getBusinessMetadata").getBusinessMetadataOutput = null as any;
utilities.lazyLoad(exports, ["getBusinessMetadata","getBusinessMetadataOutput"], () => require("./getBusinessMetadata"));

export { GetBusinessMetadataBindingArgs, GetBusinessMetadataBindingResult, GetBusinessMetadataBindingOutputArgs } from "./getBusinessMetadataBinding";
export const getBusinessMetadataBinding: typeof import("./getBusinessMetadataBinding").getBusinessMetadataBinding = null as any;
export const getBusinessMetadataBindingOutput: typeof import("./getBusinessMetadataBinding").getBusinessMetadataBindingOutput = null as any;
utilities.lazyLoad(exports, ["getBusinessMetadataBinding","getBusinessMetadataBindingOutput"], () => require("./getBusinessMetadataBinding"));

export { GetByokKeyArgs, GetByokKeyResult, GetByokKeyOutputArgs } from "./getByokKey";
export const getByokKey: typeof import("./getByokKey").getByokKey = null as any;
export const getByokKeyOutput: typeof import("./getByokKey").getByokKeyOutput = null as any;
utilities.lazyLoad(exports, ["getByokKey","getByokKeyOutput"], () => require("./getByokKey"));

export { GetDnsRecordArgs, GetDnsRecordResult, GetDnsRecordOutputArgs } from "./getDnsRecord";
export const getDnsRecord: typeof import("./getDnsRecord").getDnsRecord = null as any;
export const getDnsRecordOutput: typeof import("./getDnsRecord").getDnsRecordOutput = null as any;
utilities.lazyLoad(exports, ["getDnsRecord","getDnsRecordOutput"], () => require("./getDnsRecord"));

export { GetEnvironmentArgs, GetEnvironmentResult, GetEnvironmentOutputArgs } from "./getEnvironment";
export const getEnvironment: typeof import("./getEnvironment").getEnvironment = null as any;
export const getEnvironmentOutput: typeof import("./getEnvironment").getEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getEnvironment","getEnvironmentOutput"], () => require("./getEnvironment"));

export { GetEnvironmentsResult } from "./getEnvironments";
export const getEnvironments: typeof import("./getEnvironments").getEnvironments = null as any;
export const getEnvironmentsOutput: typeof import("./getEnvironments").getEnvironmentsOutput = null as any;
utilities.lazyLoad(exports, ["getEnvironments","getEnvironmentsOutput"], () => require("./getEnvironments"));

export { GetFlinkComputePoolArgs, GetFlinkComputePoolResult, GetFlinkComputePoolOutputArgs } from "./getFlinkComputePool";
export const getFlinkComputePool: typeof import("./getFlinkComputePool").getFlinkComputePool = null as any;
export const getFlinkComputePoolOutput: typeof import("./getFlinkComputePool").getFlinkComputePoolOutput = null as any;
utilities.lazyLoad(exports, ["getFlinkComputePool","getFlinkComputePoolOutput"], () => require("./getFlinkComputePool"));

export { GetFlinkRegionArgs, GetFlinkRegionResult, GetFlinkRegionOutputArgs } from "./getFlinkRegion";
export const getFlinkRegion: typeof import("./getFlinkRegion").getFlinkRegion = null as any;
export const getFlinkRegionOutput: typeof import("./getFlinkRegion").getFlinkRegionOutput = null as any;
utilities.lazyLoad(exports, ["getFlinkRegion","getFlinkRegionOutput"], () => require("./getFlinkRegion"));

export { GetGatewayArgs, GetGatewayResult, GetGatewayOutputArgs } from "./getGateway";
export const getGateway: typeof import("./getGateway").getGateway = null as any;
export const getGatewayOutput: typeof import("./getGateway").getGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getGateway","getGatewayOutput"], () => require("./getGateway"));

export { GetGroupMappingArgs, GetGroupMappingResult, GetGroupMappingOutputArgs } from "./getGroupMapping";
export const getGroupMapping: typeof import("./getGroupMapping").getGroupMapping = null as any;
export const getGroupMappingOutput: typeof import("./getGroupMapping").getGroupMappingOutput = null as any;
utilities.lazyLoad(exports, ["getGroupMapping","getGroupMappingOutput"], () => require("./getGroupMapping"));

export { GetIdentityPoolArgs, GetIdentityPoolResult, GetIdentityPoolOutputArgs } from "./getIdentityPool";
export const getIdentityPool: typeof import("./getIdentityPool").getIdentityPool = null as any;
export const getIdentityPoolOutput: typeof import("./getIdentityPool").getIdentityPoolOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityPool","getIdentityPoolOutput"], () => require("./getIdentityPool"));

export { GetIdentityProviderArgs, GetIdentityProviderResult, GetIdentityProviderOutputArgs } from "./getIdentityProvider";
export const getIdentityProvider: typeof import("./getIdentityProvider").getIdentityProvider = null as any;
export const getIdentityProviderOutput: typeof import("./getIdentityProvider").getIdentityProviderOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityProvider","getIdentityProviderOutput"], () => require("./getIdentityProvider"));

export { GetInvitationArgs, GetInvitationResult, GetInvitationOutputArgs } from "./getInvitation";
export const getInvitation: typeof import("./getInvitation").getInvitation = null as any;
export const getInvitationOutput: typeof import("./getInvitation").getInvitationOutput = null as any;
utilities.lazyLoad(exports, ["getInvitation","getInvitationOutput"], () => require("./getInvitation"));

export { GetIpAddressesArgs, GetIpAddressesResult, GetIpAddressesOutputArgs } from "./getIpAddresses";
export const getIpAddresses: typeof import("./getIpAddresses").getIpAddresses = null as any;
export const getIpAddressesOutput: typeof import("./getIpAddresses").getIpAddressesOutput = null as any;
utilities.lazyLoad(exports, ["getIpAddresses","getIpAddressesOutput"], () => require("./getIpAddresses"));

export { GetKafkaClientQuotaArgs, GetKafkaClientQuotaResult, GetKafkaClientQuotaOutputArgs } from "./getKafkaClientQuota";
export const getKafkaClientQuota: typeof import("./getKafkaClientQuota").getKafkaClientQuota = null as any;
export const getKafkaClientQuotaOutput: typeof import("./getKafkaClientQuota").getKafkaClientQuotaOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaClientQuota","getKafkaClientQuotaOutput"], () => require("./getKafkaClientQuota"));

export { GetKafkaClusterArgs, GetKafkaClusterResult, GetKafkaClusterOutputArgs } from "./getKafkaCluster";
export const getKafkaCluster: typeof import("./getKafkaCluster").getKafkaCluster = null as any;
export const getKafkaClusterOutput: typeof import("./getKafkaCluster").getKafkaClusterOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaCluster","getKafkaClusterOutput"], () => require("./getKafkaCluster"));

export { GetKafkaTopicArgs, GetKafkaTopicResult, GetKafkaTopicOutputArgs } from "./getKafkaTopic";
export const getKafkaTopic: typeof import("./getKafkaTopic").getKafkaTopic = null as any;
export const getKafkaTopicOutput: typeof import("./getKafkaTopic").getKafkaTopicOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaTopic","getKafkaTopicOutput"], () => require("./getKafkaTopic"));

export { GetKsqlClusterArgs, GetKsqlClusterResult, GetKsqlClusterOutputArgs } from "./getKsqlCluster";
export const getKsqlCluster: typeof import("./getKsqlCluster").getKsqlCluster = null as any;
export const getKsqlClusterOutput: typeof import("./getKsqlCluster").getKsqlClusterOutput = null as any;
utilities.lazyLoad(exports, ["getKsqlCluster","getKsqlClusterOutput"], () => require("./getKsqlCluster"));

export { GetNetworkArgs, GetNetworkResult, GetNetworkOutputArgs } from "./getNetwork";
export const getNetwork: typeof import("./getNetwork").getNetwork = null as any;
export const getNetworkOutput: typeof import("./getNetwork").getNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getNetwork","getNetworkOutput"], () => require("./getNetwork"));

export { GetNetworkLinkEndpointArgs, GetNetworkLinkEndpointResult, GetNetworkLinkEndpointOutputArgs } from "./getNetworkLinkEndpoint";
export const getNetworkLinkEndpoint: typeof import("./getNetworkLinkEndpoint").getNetworkLinkEndpoint = null as any;
export const getNetworkLinkEndpointOutput: typeof import("./getNetworkLinkEndpoint").getNetworkLinkEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkLinkEndpoint","getNetworkLinkEndpointOutput"], () => require("./getNetworkLinkEndpoint"));

export { GetNetworkLinkServiceArgs, GetNetworkLinkServiceResult, GetNetworkLinkServiceOutputArgs } from "./getNetworkLinkService";
export const getNetworkLinkService: typeof import("./getNetworkLinkService").getNetworkLinkService = null as any;
export const getNetworkLinkServiceOutput: typeof import("./getNetworkLinkService").getNetworkLinkServiceOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkLinkService","getNetworkLinkServiceOutput"], () => require("./getNetworkLinkService"));

export { GetOrganizationResult } from "./getOrganization";
export const getOrganization: typeof import("./getOrganization").getOrganization = null as any;
export const getOrganizationOutput: typeof import("./getOrganization").getOrganizationOutput = null as any;
utilities.lazyLoad(exports, ["getOrganization","getOrganizationOutput"], () => require("./getOrganization"));

export { GetPeeringArgs, GetPeeringResult, GetPeeringOutputArgs } from "./getPeering";
export const getPeering: typeof import("./getPeering").getPeering = null as any;
export const getPeeringOutput: typeof import("./getPeering").getPeeringOutput = null as any;
utilities.lazyLoad(exports, ["getPeering","getPeeringOutput"], () => require("./getPeering"));

export { GetPrivateLinkAccessArgs, GetPrivateLinkAccessResult, GetPrivateLinkAccessOutputArgs } from "./getPrivateLinkAccess";
export const getPrivateLinkAccess: typeof import("./getPrivateLinkAccess").getPrivateLinkAccess = null as any;
export const getPrivateLinkAccessOutput: typeof import("./getPrivateLinkAccess").getPrivateLinkAccessOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateLinkAccess","getPrivateLinkAccessOutput"], () => require("./getPrivateLinkAccess"));

export { GetPrivateLinkAttachmentArgs, GetPrivateLinkAttachmentResult, GetPrivateLinkAttachmentOutputArgs } from "./getPrivateLinkAttachment";
export const getPrivateLinkAttachment: typeof import("./getPrivateLinkAttachment").getPrivateLinkAttachment = null as any;
export const getPrivateLinkAttachmentOutput: typeof import("./getPrivateLinkAttachment").getPrivateLinkAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateLinkAttachment","getPrivateLinkAttachmentOutput"], () => require("./getPrivateLinkAttachment"));

export { GetPrivateLinkAttachmentConnectionArgs, GetPrivateLinkAttachmentConnectionResult, GetPrivateLinkAttachmentConnectionOutputArgs } from "./getPrivateLinkAttachmentConnection";
export const getPrivateLinkAttachmentConnection: typeof import("./getPrivateLinkAttachmentConnection").getPrivateLinkAttachmentConnection = null as any;
export const getPrivateLinkAttachmentConnectionOutput: typeof import("./getPrivateLinkAttachmentConnection").getPrivateLinkAttachmentConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateLinkAttachmentConnection","getPrivateLinkAttachmentConnectionOutput"], () => require("./getPrivateLinkAttachmentConnection"));

export { GetProviderIntegrationArgs, GetProviderIntegrationResult, GetProviderIntegrationOutputArgs } from "./getProviderIntegration";
export const getProviderIntegration: typeof import("./getProviderIntegration").getProviderIntegration = null as any;
export const getProviderIntegrationOutput: typeof import("./getProviderIntegration").getProviderIntegrationOutput = null as any;
utilities.lazyLoad(exports, ["getProviderIntegration","getProviderIntegrationOutput"], () => require("./getProviderIntegration"));

export { GetRoleBindingArgs, GetRoleBindingResult, GetRoleBindingOutputArgs } from "./getRoleBinding";
export const getRoleBinding: typeof import("./getRoleBinding").getRoleBinding = null as any;
export const getRoleBindingOutput: typeof import("./getRoleBinding").getRoleBindingOutput = null as any;
utilities.lazyLoad(exports, ["getRoleBinding","getRoleBindingOutput"], () => require("./getRoleBinding"));

export { GetSchemaArgs, GetSchemaResult, GetSchemaOutputArgs } from "./getSchema";
export const getSchema: typeof import("./getSchema").getSchema = null as any;
export const getSchemaOutput: typeof import("./getSchema").getSchemaOutput = null as any;
utilities.lazyLoad(exports, ["getSchema","getSchemaOutput"], () => require("./getSchema"));

export { GetSchemaRegistryClusterArgs, GetSchemaRegistryClusterResult, GetSchemaRegistryClusterOutputArgs } from "./getSchemaRegistryCluster";
export const getSchemaRegistryCluster: typeof import("./getSchemaRegistryCluster").getSchemaRegistryCluster = null as any;
export const getSchemaRegistryClusterOutput: typeof import("./getSchemaRegistryCluster").getSchemaRegistryClusterOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaRegistryCluster","getSchemaRegistryClusterOutput"], () => require("./getSchemaRegistryCluster"));

export { GetSchemaRegistryClusterConfigArgs, GetSchemaRegistryClusterConfigResult, GetSchemaRegistryClusterConfigOutputArgs } from "./getSchemaRegistryClusterConfig";
export const getSchemaRegistryClusterConfig: typeof import("./getSchemaRegistryClusterConfig").getSchemaRegistryClusterConfig = null as any;
export const getSchemaRegistryClusterConfigOutput: typeof import("./getSchemaRegistryClusterConfig").getSchemaRegistryClusterConfigOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaRegistryClusterConfig","getSchemaRegistryClusterConfigOutput"], () => require("./getSchemaRegistryClusterConfig"));

export { GetSchemaRegistryClusterModeArgs, GetSchemaRegistryClusterModeResult, GetSchemaRegistryClusterModeOutputArgs } from "./getSchemaRegistryClusterMode";
export const getSchemaRegistryClusterMode: typeof import("./getSchemaRegistryClusterMode").getSchemaRegistryClusterMode = null as any;
export const getSchemaRegistryClusterModeOutput: typeof import("./getSchemaRegistryClusterMode").getSchemaRegistryClusterModeOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaRegistryClusterMode","getSchemaRegistryClusterModeOutput"], () => require("./getSchemaRegistryClusterMode"));

export { GetSchemaRegistryClustersArgs, GetSchemaRegistryClustersResult, GetSchemaRegistryClustersOutputArgs } from "./getSchemaRegistryClusters";
export const getSchemaRegistryClusters: typeof import("./getSchemaRegistryClusters").getSchemaRegistryClusters = null as any;
export const getSchemaRegistryClustersOutput: typeof import("./getSchemaRegistryClusters").getSchemaRegistryClustersOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaRegistryClusters","getSchemaRegistryClustersOutput"], () => require("./getSchemaRegistryClusters"));

export { GetSchemaRegistryDekArgs, GetSchemaRegistryDekResult, GetSchemaRegistryDekOutputArgs } from "./getSchemaRegistryDek";
export const getSchemaRegistryDek: typeof import("./getSchemaRegistryDek").getSchemaRegistryDek = null as any;
export const getSchemaRegistryDekOutput: typeof import("./getSchemaRegistryDek").getSchemaRegistryDekOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaRegistryDek","getSchemaRegistryDekOutput"], () => require("./getSchemaRegistryDek"));

export { GetSchemaRegistryKekArgs, GetSchemaRegistryKekResult, GetSchemaRegistryKekOutputArgs } from "./getSchemaRegistryKek";
export const getSchemaRegistryKek: typeof import("./getSchemaRegistryKek").getSchemaRegistryKek = null as any;
export const getSchemaRegistryKekOutput: typeof import("./getSchemaRegistryKek").getSchemaRegistryKekOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaRegistryKek","getSchemaRegistryKekOutput"], () => require("./getSchemaRegistryKek"));

export { GetSchemasArgs, GetSchemasResult, GetSchemasOutputArgs } from "./getSchemas";
export const getSchemas: typeof import("./getSchemas").getSchemas = null as any;
export const getSchemasOutput: typeof import("./getSchemas").getSchemasOutput = null as any;
utilities.lazyLoad(exports, ["getSchemas","getSchemasOutput"], () => require("./getSchemas"));

export { GetServiceAccountArgs, GetServiceAccountResult, GetServiceAccountOutputArgs } from "./getServiceAccount";
export const getServiceAccount: typeof import("./getServiceAccount").getServiceAccount = null as any;
export const getServiceAccountOutput: typeof import("./getServiceAccount").getServiceAccountOutput = null as any;
utilities.lazyLoad(exports, ["getServiceAccount","getServiceAccountOutput"], () => require("./getServiceAccount"));

export { GetSubjectConfigArgs, GetSubjectConfigResult, GetSubjectConfigOutputArgs } from "./getSubjectConfig";
export const getSubjectConfig: typeof import("./getSubjectConfig").getSubjectConfig = null as any;
export const getSubjectConfigOutput: typeof import("./getSubjectConfig").getSubjectConfigOutput = null as any;
utilities.lazyLoad(exports, ["getSubjectConfig","getSubjectConfigOutput"], () => require("./getSubjectConfig"));

export { GetSubjectModeArgs, GetSubjectModeResult, GetSubjectModeOutputArgs } from "./getSubjectMode";
export const getSubjectMode: typeof import("./getSubjectMode").getSubjectMode = null as any;
export const getSubjectModeOutput: typeof import("./getSubjectMode").getSubjectModeOutput = null as any;
utilities.lazyLoad(exports, ["getSubjectMode","getSubjectModeOutput"], () => require("./getSubjectMode"));

export { GetTagArgs, GetTagResult, GetTagOutputArgs } from "./getTag";
export const getTag: typeof import("./getTag").getTag = null as any;
export const getTagOutput: typeof import("./getTag").getTagOutput = null as any;
utilities.lazyLoad(exports, ["getTag","getTagOutput"], () => require("./getTag"));

export { GetTagBindingArgs, GetTagBindingResult, GetTagBindingOutputArgs } from "./getTagBinding";
export const getTagBinding: typeof import("./getTagBinding").getTagBinding = null as any;
export const getTagBindingOutput: typeof import("./getTagBinding").getTagBindingOutput = null as any;
utilities.lazyLoad(exports, ["getTagBinding","getTagBindingOutput"], () => require("./getTagBinding"));

export { GetTransitGatewayAttachmentArgs, GetTransitGatewayAttachmentResult, GetTransitGatewayAttachmentOutputArgs } from "./getTransitGatewayAttachment";
export const getTransitGatewayAttachment: typeof import("./getTransitGatewayAttachment").getTransitGatewayAttachment = null as any;
export const getTransitGatewayAttachmentOutput: typeof import("./getTransitGatewayAttachment").getTransitGatewayAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getTransitGatewayAttachment","getTransitGatewayAttachmentOutput"], () => require("./getTransitGatewayAttachment"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUsersResult } from "./getUsers";
export const getUsers: typeof import("./getUsers").getUsers = null as any;
export const getUsersOutput: typeof import("./getUsers").getUsersOutput = null as any;
utilities.lazyLoad(exports, ["getUsers","getUsersOutput"], () => require("./getUsers"));

export { GroupMappingArgs, GroupMappingState } from "./groupMapping";
export type GroupMapping = import("./groupMapping").GroupMapping;
export const GroupMapping: typeof import("./groupMapping").GroupMapping = null as any;
utilities.lazyLoad(exports, ["GroupMapping"], () => require("./groupMapping"));

export { IdentityPoolArgs, IdentityPoolState } from "./identityPool";
export type IdentityPool = import("./identityPool").IdentityPool;
export const IdentityPool: typeof import("./identityPool").IdentityPool = null as any;
utilities.lazyLoad(exports, ["IdentityPool"], () => require("./identityPool"));

export { IdentityProviderArgs, IdentityProviderState } from "./identityProvider";
export type IdentityProvider = import("./identityProvider").IdentityProvider;
export const IdentityProvider: typeof import("./identityProvider").IdentityProvider = null as any;
utilities.lazyLoad(exports, ["IdentityProvider"], () => require("./identityProvider"));

export { InvitationArgs, InvitationState } from "./invitation";
export type Invitation = import("./invitation").Invitation;
export const Invitation: typeof import("./invitation").Invitation = null as any;
utilities.lazyLoad(exports, ["Invitation"], () => require("./invitation"));

export { KafkaAclArgs, KafkaAclState } from "./kafkaAcl";
export type KafkaAcl = import("./kafkaAcl").KafkaAcl;
export const KafkaAcl: typeof import("./kafkaAcl").KafkaAcl = null as any;
utilities.lazyLoad(exports, ["KafkaAcl"], () => require("./kafkaAcl"));

export { KafkaClientQuotaArgs, KafkaClientQuotaState } from "./kafkaClientQuota";
export type KafkaClientQuota = import("./kafkaClientQuota").KafkaClientQuota;
export const KafkaClientQuota: typeof import("./kafkaClientQuota").KafkaClientQuota = null as any;
utilities.lazyLoad(exports, ["KafkaClientQuota"], () => require("./kafkaClientQuota"));

export { KafkaClusterArgs, KafkaClusterState } from "./kafkaCluster";
export type KafkaCluster = import("./kafkaCluster").KafkaCluster;
export const KafkaCluster: typeof import("./kafkaCluster").KafkaCluster = null as any;
utilities.lazyLoad(exports, ["KafkaCluster"], () => require("./kafkaCluster"));

export { KafkaClusterConfigArgs, KafkaClusterConfigState } from "./kafkaClusterConfig";
export type KafkaClusterConfig = import("./kafkaClusterConfig").KafkaClusterConfig;
export const KafkaClusterConfig: typeof import("./kafkaClusterConfig").KafkaClusterConfig = null as any;
utilities.lazyLoad(exports, ["KafkaClusterConfig"], () => require("./kafkaClusterConfig"));

export { KafkaMirrorTopicArgs, KafkaMirrorTopicState } from "./kafkaMirrorTopic";
export type KafkaMirrorTopic = import("./kafkaMirrorTopic").KafkaMirrorTopic;
export const KafkaMirrorTopic: typeof import("./kafkaMirrorTopic").KafkaMirrorTopic = null as any;
utilities.lazyLoad(exports, ["KafkaMirrorTopic"], () => require("./kafkaMirrorTopic"));

export { KafkaTopicArgs, KafkaTopicState } from "./kafkaTopic";
export type KafkaTopic = import("./kafkaTopic").KafkaTopic;
export const KafkaTopic: typeof import("./kafkaTopic").KafkaTopic = null as any;
utilities.lazyLoad(exports, ["KafkaTopic"], () => require("./kafkaTopic"));

export { KsqlClusterArgs, KsqlClusterState } from "./ksqlCluster";
export type KsqlCluster = import("./ksqlCluster").KsqlCluster;
export const KsqlCluster: typeof import("./ksqlCluster").KsqlCluster = null as any;
utilities.lazyLoad(exports, ["KsqlCluster"], () => require("./ksqlCluster"));

export { NetworkArgs, NetworkState } from "./network";
export type Network = import("./network").Network;
export const Network: typeof import("./network").Network = null as any;
utilities.lazyLoad(exports, ["Network"], () => require("./network"));

export { NetworkLinkEndpointArgs, NetworkLinkEndpointState } from "./networkLinkEndpoint";
export type NetworkLinkEndpoint = import("./networkLinkEndpoint").NetworkLinkEndpoint;
export const NetworkLinkEndpoint: typeof import("./networkLinkEndpoint").NetworkLinkEndpoint = null as any;
utilities.lazyLoad(exports, ["NetworkLinkEndpoint"], () => require("./networkLinkEndpoint"));

export { NetworkLinkServiceArgs, NetworkLinkServiceState } from "./networkLinkService";
export type NetworkLinkService = import("./networkLinkService").NetworkLinkService;
export const NetworkLinkService: typeof import("./networkLinkService").NetworkLinkService = null as any;
utilities.lazyLoad(exports, ["NetworkLinkService"], () => require("./networkLinkService"));

export { PeeringArgs, PeeringState } from "./peering";
export type Peering = import("./peering").Peering;
export const Peering: typeof import("./peering").Peering = null as any;
utilities.lazyLoad(exports, ["Peering"], () => require("./peering"));

export { PrivateLinkAccessArgs, PrivateLinkAccessState } from "./privateLinkAccess";
export type PrivateLinkAccess = import("./privateLinkAccess").PrivateLinkAccess;
export const PrivateLinkAccess: typeof import("./privateLinkAccess").PrivateLinkAccess = null as any;
utilities.lazyLoad(exports, ["PrivateLinkAccess"], () => require("./privateLinkAccess"));

export { PrivateLinkAttachmentArgs, PrivateLinkAttachmentState } from "./privateLinkAttachment";
export type PrivateLinkAttachment = import("./privateLinkAttachment").PrivateLinkAttachment;
export const PrivateLinkAttachment: typeof import("./privateLinkAttachment").PrivateLinkAttachment = null as any;
utilities.lazyLoad(exports, ["PrivateLinkAttachment"], () => require("./privateLinkAttachment"));

export { PrivateLinkAttachmentConnectionArgs, PrivateLinkAttachmentConnectionState } from "./privateLinkAttachmentConnection";
export type PrivateLinkAttachmentConnection = import("./privateLinkAttachmentConnection").PrivateLinkAttachmentConnection;
export const PrivateLinkAttachmentConnection: typeof import("./privateLinkAttachmentConnection").PrivateLinkAttachmentConnection = null as any;
utilities.lazyLoad(exports, ["PrivateLinkAttachmentConnection"], () => require("./privateLinkAttachmentConnection"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ProviderIntegrationArgs, ProviderIntegrationState } from "./providerIntegration";
export type ProviderIntegration = import("./providerIntegration").ProviderIntegration;
export const ProviderIntegration: typeof import("./providerIntegration").ProviderIntegration = null as any;
utilities.lazyLoad(exports, ["ProviderIntegration"], () => require("./providerIntegration"));

export { RoleBindingArgs, RoleBindingState } from "./roleBinding";
export type RoleBinding = import("./roleBinding").RoleBinding;
export const RoleBinding: typeof import("./roleBinding").RoleBinding = null as any;
utilities.lazyLoad(exports, ["RoleBinding"], () => require("./roleBinding"));

export { SchemaArgs, SchemaState } from "./schema";
export type Schema = import("./schema").Schema;
export const Schema: typeof import("./schema").Schema = null as any;
utilities.lazyLoad(exports, ["Schema"], () => require("./schema"));

export { SchemaExporterArgs, SchemaExporterState } from "./schemaExporter";
export type SchemaExporter = import("./schemaExporter").SchemaExporter;
export const SchemaExporter: typeof import("./schemaExporter").SchemaExporter = null as any;
utilities.lazyLoad(exports, ["SchemaExporter"], () => require("./schemaExporter"));

export { SchemaRegistryClusterConfigArgs, SchemaRegistryClusterConfigState } from "./schemaRegistryClusterConfig";
export type SchemaRegistryClusterConfig = import("./schemaRegistryClusterConfig").SchemaRegistryClusterConfig;
export const SchemaRegistryClusterConfig: typeof import("./schemaRegistryClusterConfig").SchemaRegistryClusterConfig = null as any;
utilities.lazyLoad(exports, ["SchemaRegistryClusterConfig"], () => require("./schemaRegistryClusterConfig"));

export { SchemaRegistryClusterModeArgs, SchemaRegistryClusterModeState } from "./schemaRegistryClusterMode";
export type SchemaRegistryClusterMode = import("./schemaRegistryClusterMode").SchemaRegistryClusterMode;
export const SchemaRegistryClusterMode: typeof import("./schemaRegistryClusterMode").SchemaRegistryClusterMode = null as any;
utilities.lazyLoad(exports, ["SchemaRegistryClusterMode"], () => require("./schemaRegistryClusterMode"));

export { SchemaRegistryDekArgs, SchemaRegistryDekState } from "./schemaRegistryDek";
export type SchemaRegistryDek = import("./schemaRegistryDek").SchemaRegistryDek;
export const SchemaRegistryDek: typeof import("./schemaRegistryDek").SchemaRegistryDek = null as any;
utilities.lazyLoad(exports, ["SchemaRegistryDek"], () => require("./schemaRegistryDek"));

export { SchemaRegistryKekArgs, SchemaRegistryKekState } from "./schemaRegistryKek";
export type SchemaRegistryKek = import("./schemaRegistryKek").SchemaRegistryKek;
export const SchemaRegistryKek: typeof import("./schemaRegistryKek").SchemaRegistryKek = null as any;
utilities.lazyLoad(exports, ["SchemaRegistryKek"], () => require("./schemaRegistryKek"));

export { ServiceAccountArgs, ServiceAccountState } from "./serviceAccount";
export type ServiceAccount = import("./serviceAccount").ServiceAccount;
export const ServiceAccount: typeof import("./serviceAccount").ServiceAccount = null as any;
utilities.lazyLoad(exports, ["ServiceAccount"], () => require("./serviceAccount"));

export { SubjectConfigArgs, SubjectConfigState } from "./subjectConfig";
export type SubjectConfig = import("./subjectConfig").SubjectConfig;
export const SubjectConfig: typeof import("./subjectConfig").SubjectConfig = null as any;
utilities.lazyLoad(exports, ["SubjectConfig"], () => require("./subjectConfig"));

export { SubjectModeArgs, SubjectModeState } from "./subjectMode";
export type SubjectMode = import("./subjectMode").SubjectMode;
export const SubjectMode: typeof import("./subjectMode").SubjectMode = null as any;
utilities.lazyLoad(exports, ["SubjectMode"], () => require("./subjectMode"));

export { TagArgs, TagState } from "./tag";
export type Tag = import("./tag").Tag;
export const Tag: typeof import("./tag").Tag = null as any;
utilities.lazyLoad(exports, ["Tag"], () => require("./tag"));

export { TagBindingArgs, TagBindingState } from "./tagBinding";
export type TagBinding = import("./tagBinding").TagBinding;
export const TagBinding: typeof import("./tagBinding").TagBinding = null as any;
utilities.lazyLoad(exports, ["TagBinding"], () => require("./tagBinding"));

export { TfImporterArgs, TfImporterState } from "./tfImporter";
export type TfImporter = import("./tfImporter").TfImporter;
export const TfImporter: typeof import("./tfImporter").TfImporter = null as any;
utilities.lazyLoad(exports, ["TfImporter"], () => require("./tfImporter"));

export { TransitGatewayAttachmentArgs, TransitGatewayAttachmentState } from "./transitGatewayAttachment";
export type TransitGatewayAttachment = import("./transitGatewayAttachment").TransitGatewayAttachment;
export const TransitGatewayAttachment: typeof import("./transitGatewayAttachment").TransitGatewayAttachment = null as any;
utilities.lazyLoad(exports, ["TransitGatewayAttachment"], () => require("./transitGatewayAttachment"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "confluentcloud:index/accessPoint:AccessPoint":
                return new AccessPoint(name, <any>undefined, { urn })
            case "confluentcloud:index/apiKey:ApiKey":
                return new ApiKey(name, <any>undefined, { urn })
            case "confluentcloud:index/businessMetadata:BusinessMetadata":
                return new BusinessMetadata(name, <any>undefined, { urn })
            case "confluentcloud:index/businessMetadataBinding:BusinessMetadataBinding":
                return new BusinessMetadataBinding(name, <any>undefined, { urn })
            case "confluentcloud:index/byokKey:ByokKey":
                return new ByokKey(name, <any>undefined, { urn })
            case "confluentcloud:index/catalogEntityAttributes:CatalogEntityAttributes":
                return new CatalogEntityAttributes(name, <any>undefined, { urn })
            case "confluentcloud:index/clusterLink:ClusterLink":
                return new ClusterLink(name, <any>undefined, { urn })
            case "confluentcloud:index/connector:Connector":
                return new Connector(name, <any>undefined, { urn })
            case "confluentcloud:index/customConnectorPlugin:CustomConnectorPlugin":
                return new CustomConnectorPlugin(name, <any>undefined, { urn })
            case "confluentcloud:index/dnsForwarder:DnsForwarder":
                return new DnsForwarder(name, <any>undefined, { urn })
            case "confluentcloud:index/dnsRecord:DnsRecord":
                return new DnsRecord(name, <any>undefined, { urn })
            case "confluentcloud:index/environment:Environment":
                return new Environment(name, <any>undefined, { urn })
            case "confluentcloud:index/flinkComputePool:FlinkComputePool":
                return new FlinkComputePool(name, <any>undefined, { urn })
            case "confluentcloud:index/flinkStatement:FlinkStatement":
                return new FlinkStatement(name, <any>undefined, { urn })
            case "confluentcloud:index/groupMapping:GroupMapping":
                return new GroupMapping(name, <any>undefined, { urn })
            case "confluentcloud:index/identityPool:IdentityPool":
                return new IdentityPool(name, <any>undefined, { urn })
            case "confluentcloud:index/identityProvider:IdentityProvider":
                return new IdentityProvider(name, <any>undefined, { urn })
            case "confluentcloud:index/invitation:Invitation":
                return new Invitation(name, <any>undefined, { urn })
            case "confluentcloud:index/kafkaAcl:KafkaAcl":
                return new KafkaAcl(name, <any>undefined, { urn })
            case "confluentcloud:index/kafkaClientQuota:KafkaClientQuota":
                return new KafkaClientQuota(name, <any>undefined, { urn })
            case "confluentcloud:index/kafkaCluster:KafkaCluster":
                return new KafkaCluster(name, <any>undefined, { urn })
            case "confluentcloud:index/kafkaClusterConfig:KafkaClusterConfig":
                return new KafkaClusterConfig(name, <any>undefined, { urn })
            case "confluentcloud:index/kafkaMirrorTopic:KafkaMirrorTopic":
                return new KafkaMirrorTopic(name, <any>undefined, { urn })
            case "confluentcloud:index/kafkaTopic:KafkaTopic":
                return new KafkaTopic(name, <any>undefined, { urn })
            case "confluentcloud:index/ksqlCluster:KsqlCluster":
                return new KsqlCluster(name, <any>undefined, { urn })
            case "confluentcloud:index/network:Network":
                return new Network(name, <any>undefined, { urn })
            case "confluentcloud:index/networkLinkEndpoint:NetworkLinkEndpoint":
                return new NetworkLinkEndpoint(name, <any>undefined, { urn })
            case "confluentcloud:index/networkLinkService:NetworkLinkService":
                return new NetworkLinkService(name, <any>undefined, { urn })
            case "confluentcloud:index/peering:Peering":
                return new Peering(name, <any>undefined, { urn })
            case "confluentcloud:index/privateLinkAccess:PrivateLinkAccess":
                return new PrivateLinkAccess(name, <any>undefined, { urn })
            case "confluentcloud:index/privateLinkAttachment:PrivateLinkAttachment":
                return new PrivateLinkAttachment(name, <any>undefined, { urn })
            case "confluentcloud:index/privateLinkAttachmentConnection:PrivateLinkAttachmentConnection":
                return new PrivateLinkAttachmentConnection(name, <any>undefined, { urn })
            case "confluentcloud:index/providerIntegration:ProviderIntegration":
                return new ProviderIntegration(name, <any>undefined, { urn })
            case "confluentcloud:index/roleBinding:RoleBinding":
                return new RoleBinding(name, <any>undefined, { urn })
            case "confluentcloud:index/schema:Schema":
                return new Schema(name, <any>undefined, { urn })
            case "confluentcloud:index/schemaExporter:SchemaExporter":
                return new SchemaExporter(name, <any>undefined, { urn })
            case "confluentcloud:index/schemaRegistryClusterConfig:SchemaRegistryClusterConfig":
                return new SchemaRegistryClusterConfig(name, <any>undefined, { urn })
            case "confluentcloud:index/schemaRegistryClusterMode:SchemaRegistryClusterMode":
                return new SchemaRegistryClusterMode(name, <any>undefined, { urn })
            case "confluentcloud:index/schemaRegistryDek:SchemaRegistryDek":
                return new SchemaRegistryDek(name, <any>undefined, { urn })
            case "confluentcloud:index/schemaRegistryKek:SchemaRegistryKek":
                return new SchemaRegistryKek(name, <any>undefined, { urn })
            case "confluentcloud:index/serviceAccount:ServiceAccount":
                return new ServiceAccount(name, <any>undefined, { urn })
            case "confluentcloud:index/subjectConfig:SubjectConfig":
                return new SubjectConfig(name, <any>undefined, { urn })
            case "confluentcloud:index/subjectMode:SubjectMode":
                return new SubjectMode(name, <any>undefined, { urn })
            case "confluentcloud:index/tag:Tag":
                return new Tag(name, <any>undefined, { urn })
            case "confluentcloud:index/tagBinding:TagBinding":
                return new TagBinding(name, <any>undefined, { urn })
            case "confluentcloud:index/tfImporter:TfImporter":
                return new TfImporter(name, <any>undefined, { urn })
            case "confluentcloud:index/transitGatewayAttachment:TransitGatewayAttachment":
                return new TransitGatewayAttachment(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("confluentcloud", "index/accessPoint", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/apiKey", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/businessMetadata", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/businessMetadataBinding", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/byokKey", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/catalogEntityAttributes", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/clusterLink", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/connector", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/customConnectorPlugin", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/dnsForwarder", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/dnsRecord", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/environment", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/flinkComputePool", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/flinkStatement", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/groupMapping", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/identityPool", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/identityProvider", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/invitation", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/kafkaAcl", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/kafkaClientQuota", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/kafkaCluster", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/kafkaClusterConfig", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/kafkaMirrorTopic", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/kafkaTopic", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/ksqlCluster", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/network", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/networkLinkEndpoint", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/networkLinkService", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/peering", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/privateLinkAccess", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/privateLinkAttachment", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/privateLinkAttachmentConnection", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/providerIntegration", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/roleBinding", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/schema", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/schemaExporter", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/schemaRegistryClusterConfig", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/schemaRegistryClusterMode", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/schemaRegistryDek", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/schemaRegistryKek", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/serviceAccount", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/subjectConfig", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/subjectMode", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/tag", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/tagBinding", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/tfImporter", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/transitGatewayAttachment", _module)
pulumi.runtime.registerResourcePackage("confluentcloud", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:confluentcloud") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});

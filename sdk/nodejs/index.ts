// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./apiKey";
export * from "./connector";
export * from "./environment";
export * from "./getEnvironment";
export * from "./getKafkaCluster";
export * from "./getKafkaTopic";
export * from "./getNetwork";
export * from "./getOrganization";
export * from "./getPeering";
export * from "./getPrivateLinkAccess";
export * from "./getRoleBinding";
export * from "./getServiceAccount";
export * from "./getUser";
export * from "./kafkaAcl";
export * from "./kafkaCluster";
export * from "./kafkaTopic";
export * from "./network";
export * from "./peering";
export * from "./privateLinkAccess";
export * from "./provider";
export * from "./roleBinding";
export * from "./serviceAccount";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { ApiKey } from "./apiKey";
import { Connector } from "./connector";
import { Environment } from "./environment";
import { KafkaAcl } from "./kafkaAcl";
import { KafkaCluster } from "./kafkaCluster";
import { KafkaTopic } from "./kafkaTopic";
import { Network } from "./network";
import { Peering } from "./peering";
import { PrivateLinkAccess } from "./privateLinkAccess";
import { RoleBinding } from "./roleBinding";
import { ServiceAccount } from "./serviceAccount";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "confluentcloud:index/apiKey:ApiKey":
                return new ApiKey(name, <any>undefined, { urn })
            case "confluentcloud:index/connector:Connector":
                return new Connector(name, <any>undefined, { urn })
            case "confluentcloud:index/environment:Environment":
                return new Environment(name, <any>undefined, { urn })
            case "confluentcloud:index/kafkaAcl:KafkaAcl":
                return new KafkaAcl(name, <any>undefined, { urn })
            case "confluentcloud:index/kafkaCluster:KafkaCluster":
                return new KafkaCluster(name, <any>undefined, { urn })
            case "confluentcloud:index/kafkaTopic:KafkaTopic":
                return new KafkaTopic(name, <any>undefined, { urn })
            case "confluentcloud:index/network:Network":
                return new Network(name, <any>undefined, { urn })
            case "confluentcloud:index/peering:Peering":
                return new Peering(name, <any>undefined, { urn })
            case "confluentcloud:index/privateLinkAccess:PrivateLinkAccess":
                return new PrivateLinkAccess(name, <any>undefined, { urn })
            case "confluentcloud:index/roleBinding:RoleBinding":
                return new RoleBinding(name, <any>undefined, { urn })
            case "confluentcloud:index/serviceAccount:ServiceAccount":
                return new ServiceAccount(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("confluentcloud", "index/apiKey", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/connector", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/environment", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/kafkaAcl", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/kafkaCluster", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/kafkaTopic", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/network", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/peering", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/privateLinkAccess", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/roleBinding", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/serviceAccount", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("confluentcloud", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:confluentcloud") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});

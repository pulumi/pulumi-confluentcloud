// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ApiKeyArgs, ApiKeyState } from "./apiKey";
export type ApiKey = import("./apiKey").ApiKey;
export const ApiKey: typeof import("./apiKey").ApiKey = null as any;

export { ConnectorArgs, ConnectorState } from "./connector";
export type Connector = import("./connector").Connector;
export const Connector: typeof import("./connector").Connector = null as any;

export { EnvironmentArgs, EnvironmentState } from "./environment";
export type Environment = import("./environment").Environment;
export const Environment: typeof import("./environment").Environment = null as any;

export { GetEnvironmentArgs, GetEnvironmentResult, GetEnvironmentOutputArgs } from "./getEnvironment";
export const getEnvironment: typeof import("./getEnvironment").getEnvironment = null as any;
export const getEnvironmentOutput: typeof import("./getEnvironment").getEnvironmentOutput = null as any;

export { GetKafkaClusterArgs, GetKafkaClusterResult, GetKafkaClusterOutputArgs } from "./getKafkaCluster";
export const getKafkaCluster: typeof import("./getKafkaCluster").getKafkaCluster = null as any;
export const getKafkaClusterOutput: typeof import("./getKafkaCluster").getKafkaClusterOutput = null as any;

export { GetKafkaTopicArgs, GetKafkaTopicResult, GetKafkaTopicOutputArgs } from "./getKafkaTopic";
export const getKafkaTopic: typeof import("./getKafkaTopic").getKafkaTopic = null as any;
export const getKafkaTopicOutput: typeof import("./getKafkaTopic").getKafkaTopicOutput = null as any;

export { GetNetworkArgs, GetNetworkResult, GetNetworkOutputArgs } from "./getNetwork";
export const getNetwork: typeof import("./getNetwork").getNetwork = null as any;
export const getNetworkOutput: typeof import("./getNetwork").getNetworkOutput = null as any;

export { GetOrganizationResult } from "./getOrganization";
export const getOrganization: typeof import("./getOrganization").getOrganization = null as any;

export { GetPeeringArgs, GetPeeringResult, GetPeeringOutputArgs } from "./getPeering";
export const getPeering: typeof import("./getPeering").getPeering = null as any;
export const getPeeringOutput: typeof import("./getPeering").getPeeringOutput = null as any;

export { GetPrivateLinkAccessArgs, GetPrivateLinkAccessResult, GetPrivateLinkAccessOutputArgs } from "./getPrivateLinkAccess";
export const getPrivateLinkAccess: typeof import("./getPrivateLinkAccess").getPrivateLinkAccess = null as any;
export const getPrivateLinkAccessOutput: typeof import("./getPrivateLinkAccess").getPrivateLinkAccessOutput = null as any;

export { GetRoleBindingArgs, GetRoleBindingResult, GetRoleBindingOutputArgs } from "./getRoleBinding";
export const getRoleBinding: typeof import("./getRoleBinding").getRoleBinding = null as any;
export const getRoleBindingOutput: typeof import("./getRoleBinding").getRoleBindingOutput = null as any;

export { GetServiceAccountArgs, GetServiceAccountResult, GetServiceAccountOutputArgs } from "./getServiceAccount";
export const getServiceAccount: typeof import("./getServiceAccount").getServiceAccount = null as any;
export const getServiceAccountOutput: typeof import("./getServiceAccount").getServiceAccountOutput = null as any;

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;

export { KafkaAclArgs, KafkaAclState } from "./kafkaAcl";
export type KafkaAcl = import("./kafkaAcl").KafkaAcl;
export const KafkaAcl: typeof import("./kafkaAcl").KafkaAcl = null as any;

export { KafkaClusterArgs, KafkaClusterState } from "./kafkaCluster";
export type KafkaCluster = import("./kafkaCluster").KafkaCluster;
export const KafkaCluster: typeof import("./kafkaCluster").KafkaCluster = null as any;

export { KafkaTopicArgs, KafkaTopicState } from "./kafkaTopic";
export type KafkaTopic = import("./kafkaTopic").KafkaTopic;
export const KafkaTopic: typeof import("./kafkaTopic").KafkaTopic = null as any;

export { NetworkArgs, NetworkState } from "./network";
export type Network = import("./network").Network;
export const Network: typeof import("./network").Network = null as any;

export { PeeringArgs, PeeringState } from "./peering";
export type Peering = import("./peering").Peering;
export const Peering: typeof import("./peering").Peering = null as any;

export { PrivateLinkAccessArgs, PrivateLinkAccessState } from "./privateLinkAccess";
export type PrivateLinkAccess = import("./privateLinkAccess").PrivateLinkAccess;
export const PrivateLinkAccess: typeof import("./privateLinkAccess").PrivateLinkAccess = null as any;

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;

export { RoleBindingArgs, RoleBindingState } from "./roleBinding";
export type RoleBinding = import("./roleBinding").RoleBinding;
export const RoleBinding: typeof import("./roleBinding").RoleBinding = null as any;

export { ServiceAccountArgs, ServiceAccountState } from "./serviceAccount";
export type ServiceAccount = import("./serviceAccount").ServiceAccount;
export const ServiceAccount: typeof import("./serviceAccount").ServiceAccount = null as any;

utilities.lazyLoad(exports, ["ApiKey"], () => require("./apiKey"));
utilities.lazyLoad(exports, ["Connector"], () => require("./connector"));
utilities.lazyLoad(exports, ["Environment"], () => require("./environment"));
utilities.lazyLoad(exports, ["getEnvironment","getEnvironmentOutput"], () => require("./getEnvironment"));
utilities.lazyLoad(exports, ["getKafkaCluster","getKafkaClusterOutput"], () => require("./getKafkaCluster"));
utilities.lazyLoad(exports, ["getKafkaTopic","getKafkaTopicOutput"], () => require("./getKafkaTopic"));
utilities.lazyLoad(exports, ["getNetwork","getNetworkOutput"], () => require("./getNetwork"));
utilities.lazyLoad(exports, ["getOrganization"], () => require("./getOrganization"));
utilities.lazyLoad(exports, ["getPeering","getPeeringOutput"], () => require("./getPeering"));
utilities.lazyLoad(exports, ["getPrivateLinkAccess","getPrivateLinkAccessOutput"], () => require("./getPrivateLinkAccess"));
utilities.lazyLoad(exports, ["getRoleBinding","getRoleBindingOutput"], () => require("./getRoleBinding"));
utilities.lazyLoad(exports, ["getServiceAccount","getServiceAccountOutput"], () => require("./getServiceAccount"));
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));
utilities.lazyLoad(exports, ["KafkaAcl"], () => require("./kafkaAcl"));
utilities.lazyLoad(exports, ["KafkaCluster"], () => require("./kafkaCluster"));
utilities.lazyLoad(exports, ["KafkaTopic"], () => require("./kafkaTopic"));
utilities.lazyLoad(exports, ["Network"], () => require("./network"));
utilities.lazyLoad(exports, ["Peering"], () => require("./peering"));
utilities.lazyLoad(exports, ["PrivateLinkAccess"], () => require("./privateLinkAccess"));
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));
utilities.lazyLoad(exports, ["RoleBinding"], () => require("./roleBinding"));
utilities.lazyLoad(exports, ["ServiceAccount"], () => require("./serviceAccount"));

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "confluentcloud:index/apiKey:ApiKey":
                return new ApiKey(name, <any>undefined, { urn })
            case "confluentcloud:index/connector:Connector":
                return new Connector(name, <any>undefined, { urn })
            case "confluentcloud:index/environment:Environment":
                return new Environment(name, <any>undefined, { urn })
            case "confluentcloud:index/kafkaAcl:KafkaAcl":
                return new KafkaAcl(name, <any>undefined, { urn })
            case "confluentcloud:index/kafkaCluster:KafkaCluster":
                return new KafkaCluster(name, <any>undefined, { urn })
            case "confluentcloud:index/kafkaTopic:KafkaTopic":
                return new KafkaTopic(name, <any>undefined, { urn })
            case "confluentcloud:index/network:Network":
                return new Network(name, <any>undefined, { urn })
            case "confluentcloud:index/peering:Peering":
                return new Peering(name, <any>undefined, { urn })
            case "confluentcloud:index/privateLinkAccess:PrivateLinkAccess":
                return new PrivateLinkAccess(name, <any>undefined, { urn })
            case "confluentcloud:index/roleBinding:RoleBinding":
                return new RoleBinding(name, <any>undefined, { urn })
            case "confluentcloud:index/serviceAccount:ServiceAccount":
                return new ServiceAccount(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("confluentcloud", "index/apiKey", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/connector", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/environment", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/kafkaAcl", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/kafkaCluster", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/kafkaTopic", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/network", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/peering", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/privateLinkAccess", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/roleBinding", _module)
pulumi.runtime.registerResourceModule("confluentcloud", "index/serviceAccount", _module)
pulumi.runtime.registerResourcePackage("confluentcloud", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:confluentcloud") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});

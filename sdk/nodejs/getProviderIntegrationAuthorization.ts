// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getProviderIntegrationAuthorization(args: GetProviderIntegrationAuthorizationArgs, opts?: pulumi.InvokeOptions): Promise<GetProviderIntegrationAuthorizationResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("confluentcloud:index/getProviderIntegrationAuthorization:getProviderIntegrationAuthorization", {
        "environment": args.environment,
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getProviderIntegrationAuthorization.
 */
export interface GetProviderIntegrationAuthorizationArgs {
    /**
     * (Required Configuration Block) supports the following:
     */
    environment: inputs.GetProviderIntegrationAuthorizationEnvironment;
    /**
     * The ID of the Provider Integration Authorization, for example, `cspi-4xg0q`.
     */
    id: string;
}

/**
 * A collection of values returned by getProviderIntegrationAuthorization.
 */
export interface GetProviderIntegrationAuthorizationResult {
    /**
     * (Optional Configuration Block) Azure-specific configuration details. Present for Azure integrations. It supports the following:
     */
    readonly azures: outputs.GetProviderIntegrationAuthorizationAzure[];
    /**
     * (Required Configuration Block) supports the following:
     */
    readonly environment: outputs.GetProviderIntegrationAuthorizationEnvironment;
    /**
     * (Optional Configuration Block) GCP-specific configuration details. Present for GCP integrations. It supports the following:
     */
    readonly gcps: outputs.GetProviderIntegrationAuthorizationGcp[];
    /**
     * (Required String) The ID of the Environment that the Provider Integration belongs to, for example, `env-abc123`.
     */
    readonly id: string;
    /**
     * (Required String) The ID of the provider integration.
     */
    readonly providerIntegrationId: string;
}
export function getProviderIntegrationAuthorizationOutput(args: GetProviderIntegrationAuthorizationOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetProviderIntegrationAuthorizationResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("confluentcloud:index/getProviderIntegrationAuthorization:getProviderIntegrationAuthorization", {
        "environment": args.environment,
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getProviderIntegrationAuthorization.
 */
export interface GetProviderIntegrationAuthorizationOutputArgs {
    /**
     * (Required Configuration Block) supports the following:
     */
    environment: pulumi.Input<inputs.GetProviderIntegrationAuthorizationEnvironmentArgs>;
    /**
     * The ID of the Provider Integration Authorization, for example, `cspi-4xg0q`.
     */
    id: pulumi.Input<string>;
}

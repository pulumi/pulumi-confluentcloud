// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const example = new confluentcloud.ConnectArtifact("example", {
 *     displayName: "example-connect-artifact",
 *     cloud: "AWS",
 *     environment: {
 *         id: "env-123456",
 *     },
 *     contentFormat: "JAR",
 *     artifactFile: "path/to/your/artifact.jar",
 *     description: "Example Connect Artifact",
 * });
 * ```
 *
 * ## Import
 *
 * You can import a Connect Artifact by using Environment ID, Cloud, and Connect Artifact ID in the format `<Environment ID>/<cloud>/<Connect Artifact ID>`, for example:
 *
 * $ export CONFLUENT_CLOUD_API_KEY="<cloud_api_key>"
 *
 * $ export CONFLUENT_CLOUD_API_SECRET="<cloud_api_secret>"
 *
 * ```sh
 * $ pulumi import confluentcloud:index/connectArtifact:ConnectArtifact example env-123456/AWS/ca-123456
 * ```
 *
 * !> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
 */
export class ConnectArtifact extends pulumi.CustomResource {
    /**
     * Get an existing ConnectArtifact resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectArtifactState, opts?: pulumi.CustomResourceOptions): ConnectArtifact {
        return new ConnectArtifact(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'confluentcloud:index/connectArtifact:ConnectArtifact';

    /**
     * Returns true if the given object is an instance of ConnectArtifact.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectArtifact {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectArtifact.__pulumiType;
    }

    /**
     * The artifact file for Connect Artifact in `JAR` or `ZIP` format. This can be relative or absolute path
     */
    public readonly artifactFile!: pulumi.Output<string | undefined>;
    /**
     * Cloud provider where the Connect Artifact archive is uploaded.
     */
    public readonly cloud!: pulumi.Output<string>;
    /**
     * Archive format of the Connect Artifact. Supported formats are `JAR` and `ZIP`.
     */
    public readonly contentFormat!: pulumi.Output<string>;
    /**
     * Description of the Connect Artifact.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The unique name of the Connect Artifact per cloud, environment scope.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     */
    public readonly environment!: pulumi.Output<outputs.ConnectArtifactEnvironment>;
    /**
     * Status of the Connect Artifact.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a ConnectArtifact resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectArtifactArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectArtifactArgs | ConnectArtifactState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectArtifactState | undefined;
            resourceInputs["artifactFile"] = state ? state.artifactFile : undefined;
            resourceInputs["cloud"] = state ? state.cloud : undefined;
            resourceInputs["contentFormat"] = state ? state.contentFormat : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as ConnectArtifactArgs | undefined;
            if ((!args || args.cloud === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloud'");
            }
            if ((!args || args.contentFormat === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contentFormat'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.environment === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            resourceInputs["artifactFile"] = args ? args.artifactFile : undefined;
            resourceInputs["cloud"] = args ? args.cloud : undefined;
            resourceInputs["contentFormat"] = args ? args.contentFormat : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConnectArtifact.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConnectArtifact resources.
 */
export interface ConnectArtifactState {
    /**
     * The artifact file for Connect Artifact in `JAR` or `ZIP` format. This can be relative or absolute path
     */
    artifactFile?: pulumi.Input<string>;
    /**
     * Cloud provider where the Connect Artifact archive is uploaded.
     */
    cloud?: pulumi.Input<string>;
    /**
     * Archive format of the Connect Artifact. Supported formats are `JAR` and `ZIP`.
     */
    contentFormat?: pulumi.Input<string>;
    /**
     * Description of the Connect Artifact.
     */
    description?: pulumi.Input<string>;
    /**
     * The unique name of the Connect Artifact per cloud, environment scope.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     */
    environment?: pulumi.Input<inputs.ConnectArtifactEnvironment>;
    /**
     * Status of the Connect Artifact.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConnectArtifact resource.
 */
export interface ConnectArtifactArgs {
    /**
     * The artifact file for Connect Artifact in `JAR` or `ZIP` format. This can be relative or absolute path
     */
    artifactFile?: pulumi.Input<string>;
    /**
     * Cloud provider where the Connect Artifact archive is uploaded.
     */
    cloud: pulumi.Input<string>;
    /**
     * Archive format of the Connect Artifact. Supported formats are `JAR` and `ZIP`.
     */
    contentFormat: pulumi.Input<string>;
    /**
     * Description of the Connect Artifact.
     */
    description?: pulumi.Input<string>;
    /**
     * The unique name of the Connect Artifact per cloud, environment scope.
     */
    displayName: pulumi.Input<string>;
    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     */
    environment: pulumi.Input<inputs.ConnectArtifactEnvironment>;
}

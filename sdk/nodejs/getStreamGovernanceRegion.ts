// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * [![Open Preview](https://img.shields.io/badge/Lifecycle%20Stage-Open%20Preview-%2300afba)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
 *
 * !> **WARNING:** `confluentcloud.getStreamGovernanceRegion` data source is deprecated and will be removed in the next version. Use `confluentcloud.getSchemaRegistryRegion` instead.
 *
 * > **Note:** `confluentcloud.getStreamGovernanceRegion` data source is available in **Open Preview** for early adopters. Open Preview features are introduced to gather customer feedback. This feature should be used only for evaluation and non-production testing purposes or to provide feedback to Confluent, particularly as it becomes more widely available in follow-on editions.\
 * **Open Preview** features are intended for evaluation use in development and testing environments only, and not for production use. The warranty, SLA, and Support Services provisions of your agreement with Confluent do not apply to Open Preview features. Open Preview features are considered to be a Proof of Concept as defined in the Confluent Cloud Terms of Service. Confluent may discontinue providing preview releases of the Open Preview features at any time in Confluentâ€™s sole discretion.
 *
 * `confluentcloud.getStreamGovernanceRegion` describes a Stream Governance cluster data source.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const exampleStreamGovernanceRegion = confluentcloud.getStreamGovernanceRegion({
 *     cloud: "AWS",
 *     region: "us-east-2",
 *     "package": "ESSENTIALS",
 * });
 * export const example = exampleStreamGovernanceRegion;
 * ```
 */
export function getStreamGovernanceRegion(args: GetStreamGovernanceRegionArgs, opts?: pulumi.InvokeOptions): Promise<GetStreamGovernanceRegionResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("confluentcloud:index/getStreamGovernanceRegion:getStreamGovernanceRegion", {
        "cloud": args.cloud,
        "package": args.package,
        "region": args.region,
    }, opts);
}

/**
 * A collection of arguments for invoking getStreamGovernanceRegion.
 */
export interface GetStreamGovernanceRegionArgs {
    /**
     * The cloud service provider that hosts the region. Accepted values are: `AWS`, `AZURE`, and `GCP`.
     */
    cloud: string;
    /**
     * The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.
     */
    package: string;
    /**
     * The cloud service provider region, for example, `us-east-2`. See [Cloud Providers and Regions](https://docs.confluent.io/cloud/current/clusters/regions.html#cloud-providers-and-regions) for a full list of options for AWS, Azure, and GCP.
     */
    region: string;
}

/**
 * A collection of values returned by getStreamGovernanceRegion.
 */
export interface GetStreamGovernanceRegionResult {
    readonly cloud: string;
    /**
     * (Required String) The ID of the Stream Governance region, for example, `sgreg-1`.
     */
    readonly id: string;
    readonly package: string;
    readonly region: string;
}

export function getStreamGovernanceRegionOutput(args: GetStreamGovernanceRegionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStreamGovernanceRegionResult> {
    return pulumi.output(args).apply(a => getStreamGovernanceRegion(a, opts))
}

/**
 * A collection of arguments for invoking getStreamGovernanceRegion.
 */
export interface GetStreamGovernanceRegionOutputArgs {
    /**
     * The cloud service provider that hosts the region. Accepted values are: `AWS`, `AZURE`, and `GCP`.
     */
    cloud: pulumi.Input<string>;
    /**
     * The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.
     */
    package: pulumi.Input<string>;
    /**
     * The cloud service provider region, for example, `us-east-2`. See [Cloud Providers and Regions](https://docs.confluent.io/cloud/current/clusters/regions.html#cloud-providers-and-regions) for a full list of options for AWS, Azure, and GCP.
     */
    region: pulumi.Input<string>;
}

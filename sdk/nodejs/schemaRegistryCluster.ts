// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const development = new confluentcloud.Environment("development", {});
 * const example = confluentcloud.getSchemaRegistryRegion({
 *     cloud: "AWS",
 *     region: "us-east-2",
 *     "package": "ESSENTIALS",
 * });
 * const essentials = new confluentcloud.SchemaRegistryCluster("essentials", {
 *     "package": example.then(example => example["package"]),
 *     environment: {
 *         id: development.id,
 *     },
 *     region: {
 *         id: example.then(example => example.id),
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * You can import a Schema Registry cluster by using Environment ID and Schema Registry cluster ID, in the format `<Environment ID>/<Schema Registry cluster ID>`, for example$ export CONFLUENT_CLOUD_API_KEY="<cloud_api_key>" $ export CONFLUENT_CLOUD_API_SECRET="<cloud_api_secret>"
 *
 * ```sh
 *  $ pulumi import confluentcloud:index/schemaRegistryCluster:SchemaRegistryCluster example env-abc123/lsrc-abc123
 * ```
 *
 *  !> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
 */
export class SchemaRegistryCluster extends pulumi.CustomResource {
    /**
     * Get an existing SchemaRegistryCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SchemaRegistryClusterState, opts?: pulumi.CustomResourceOptions): SchemaRegistryCluster {
        return new SchemaRegistryCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'confluentcloud:index/schemaRegistryCluster:SchemaRegistryCluster';

    /**
     * Returns true if the given object is an instance of SchemaRegistryCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SchemaRegistryCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SchemaRegistryCluster.__pulumiType;
    }

    /**
     * (Required String) An API Version of the schema version of the Schema Registry cluster, for example, `srcm/v2`.
     */
    public /*out*/ readonly apiVersion!: pulumi.Output<string>;
    /**
     * (Required String) The name of the Schema Registry cluster, for example, `Stream Governance Package`.
     */
    public /*out*/ readonly displayName!: pulumi.Output<string>;
    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     */
    public readonly environment!: pulumi.Output<outputs.SchemaRegistryClusterEnvironment>;
    /**
     * (Required String) A kind of the Schema Registry cluster, for example, `Cluster`.
     */
    public /*out*/ readonly kind!: pulumi.Output<string>;
    /**
     * The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.
     */
    public readonly package!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<outputs.SchemaRegistryClusterRegion>;
    /**
     * (Required String) The Confluent Resource Name of the Schema Registry cluster, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/schema-registry=lsrc-abc123`.
     */
    public /*out*/ readonly resourceName!: pulumi.Output<string>;
    /**
     * (Required String) The HTTP endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-west-2.aws.confluent.cloud`.
     */
    public /*out*/ readonly restEndpoint!: pulumi.Output<string>;

    /**
     * Create a SchemaRegistryCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SchemaRegistryClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SchemaRegistryClusterArgs | SchemaRegistryClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SchemaRegistryClusterState | undefined;
            resourceInputs["apiVersion"] = state ? state.apiVersion : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["package"] = state ? state.package : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["resourceName"] = state ? state.resourceName : undefined;
            resourceInputs["restEndpoint"] = state ? state.restEndpoint : undefined;
        } else {
            const args = argsOrState as SchemaRegistryClusterArgs | undefined;
            if ((!args || args.environment === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            if ((!args || args.package === undefined) && !opts.urn) {
                throw new Error("Missing required property 'package'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["package"] = args ? args.package : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["apiVersion"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["resourceName"] = undefined /*out*/;
            resourceInputs["restEndpoint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SchemaRegistryCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SchemaRegistryCluster resources.
 */
export interface SchemaRegistryClusterState {
    /**
     * (Required String) An API Version of the schema version of the Schema Registry cluster, for example, `srcm/v2`.
     */
    apiVersion?: pulumi.Input<string>;
    /**
     * (Required String) The name of the Schema Registry cluster, for example, `Stream Governance Package`.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     */
    environment?: pulumi.Input<inputs.SchemaRegistryClusterEnvironment>;
    /**
     * (Required String) A kind of the Schema Registry cluster, for example, `Cluster`.
     */
    kind?: pulumi.Input<string>;
    /**
     * The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.
     */
    package?: pulumi.Input<string>;
    region?: pulumi.Input<inputs.SchemaRegistryClusterRegion>;
    /**
     * (Required String) The Confluent Resource Name of the Schema Registry cluster, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/schema-registry=lsrc-abc123`.
     */
    resourceName?: pulumi.Input<string>;
    /**
     * (Required String) The HTTP endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-west-2.aws.confluent.cloud`.
     */
    restEndpoint?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SchemaRegistryCluster resource.
 */
export interface SchemaRegistryClusterArgs {
    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     */
    environment: pulumi.Input<inputs.SchemaRegistryClusterEnvironment>;
    /**
     * The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.
     */
    package: pulumi.Input<string>;
    region: pulumi.Input<inputs.SchemaRegistryClusterRegion>;
}

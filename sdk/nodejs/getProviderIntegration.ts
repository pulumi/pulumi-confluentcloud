// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
 *
 * `confluentcloud.ProviderIntegration` describes a Confluent Provider Integration data source.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * export = async () => {
 *     const exampleUsingId = await confluentcloud.getProviderIntegration({
 *         id: "cspi-4xg0q",
 *         environment: {
 *             id: "env-xyz456",
 *         },
 *     });
 *     const exampleUsingName = await confluentcloud.getProviderIntegration({
 *         displayName: "provider_integration_main",
 *         environment: {
 *             id: "env-xyz456",
 *         },
 *     });
 *     return {
 *         exampleUsingId: exampleUsingId,
 *         exampleUsingName: exampleUsingName,
 *     };
 * }
 * ```
 */
export function getProviderIntegration(args: GetProviderIntegrationArgs, opts?: pulumi.InvokeOptions): Promise<GetProviderIntegrationResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("confluentcloud:index/getProviderIntegration:getProviderIntegration", {
        "displayName": args.displayName,
        "environment": args.environment,
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getProviderIntegration.
 */
export interface GetProviderIntegrationArgs {
    /**
     * A human-readable name for the Provider Integration.
     */
    displayName?: string;
    /**
     * (Required Configuration Block) supports the following:
     */
    environment: inputs.GetProviderIntegrationEnvironment;
    /**
     * The ID of the Provider Integration, for example, `cspi-4xg0q`.
     */
    id?: string;
}

/**
 * A collection of values returned by getProviderIntegration.
 */
export interface GetProviderIntegrationResult {
    /**
     * (Required Configuration Block) The AWS-specific Provider Integration config details. It supports the following:
     */
    readonly aws: outputs.GetProviderIntegrationAw[];
    /**
     * (Required String) A human-readable name for the Provider Integration.
     */
    readonly displayName: string;
    /**
     * (Required Configuration Block) supports the following:
     */
    readonly environment: outputs.GetProviderIntegrationEnvironment;
    /**
     * (Required String) The ID of the Environment that the Provider Integration belongs to, for example, `env-abc123`.
     */
    readonly id: string;
    /**
     * (Required List of Strings) List of resource CRNs where this provider integration is being used.
     */
    readonly usages: string[];
}
/**
 * [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
 *
 * `confluentcloud.ProviderIntegration` describes a Confluent Provider Integration data source.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * export = async () => {
 *     const exampleUsingId = await confluentcloud.getProviderIntegration({
 *         id: "cspi-4xg0q",
 *         environment: {
 *             id: "env-xyz456",
 *         },
 *     });
 *     const exampleUsingName = await confluentcloud.getProviderIntegration({
 *         displayName: "provider_integration_main",
 *         environment: {
 *             id: "env-xyz456",
 *         },
 *     });
 *     return {
 *         exampleUsingId: exampleUsingId,
 *         exampleUsingName: exampleUsingName,
 *     };
 * }
 * ```
 */
export function getProviderIntegrationOutput(args: GetProviderIntegrationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetProviderIntegrationResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("confluentcloud:index/getProviderIntegration:getProviderIntegration", {
        "displayName": args.displayName,
        "environment": args.environment,
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getProviderIntegration.
 */
export interface GetProviderIntegrationOutputArgs {
    /**
     * A human-readable name for the Provider Integration.
     */
    displayName?: pulumi.Input<string>;
    /**
     * (Required Configuration Block) supports the following:
     */
    environment: pulumi.Input<inputs.GetProviderIntegrationEnvironmentArgs>;
    /**
     * The ID of the Provider Integration, for example, `cspi-4xg0q`.
     */
    id?: pulumi.Input<string>;
}

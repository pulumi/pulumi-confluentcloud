// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ### Option #1: Manage multiple Schema Registry clusters in the same Pulumi Stack
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const environment = new confluentcloud.CatalogEntityAttributes("environment", {
 *     schemaRegistryCluster: {
 *         id: essentials.id,
 *     },
 *     restEndpoint: essentials.restEndpoint,
 *     credentials: {
 *         key: "<Schema Registry API Key for data.confluent_schema_registry_cluster.essentials>",
 *         secret: "<Schema Registry API Secret for data.confluent_schema_registry_cluster.essentials>",
 *     },
 *     entityName: main.id,
 *     entityType: "cf_environment",
 *     attributes: {
 *         description: "Environment description",
 *     },
 * });
 * const kafka_cluster = new confluentcloud.CatalogEntityAttributes("kafka-cluster", {
 *     schemaRegistryCluster: {
 *         id: essentials.id,
 *     },
 *     restEndpoint: essentials.restEndpoint,
 *     credentials: {
 *         key: "<Schema Registry API Key for data.confluent_schema_registry_cluster.essentials>",
 *         secret: "<Schema Registry API Secret for data.confluent_schema_registry_cluster.essentials>",
 *     },
 *     entityName: basic.id,
 *     entityType: "kafka_logical_cluster",
 *     attributes: {
 *         description: "Kafka Cluster description",
 *     },
 * });
 * const topic = new confluentcloud.CatalogEntityAttributes("topic", {
 *     schemaRegistryCluster: {
 *         id: essentials.id,
 *     },
 *     restEndpoint: essentials.restEndpoint,
 *     credentials: {
 *         key: "<Schema Registry API Key for data.confluent_schema_registry_cluster.essentials>",
 *         secret: "<Schema Registry API Secret for data.confluent_schema_registry_cluster.essentials>",
 *     },
 *     entityName: `${basic.id}:${purchase.topicName}`,
 *     entityType: "kafka_topic",
 *     attributes: {
 *         owner: "dev",
 *         description: "Kafka topic for orders",
 *         ownerEmail: "dev@gmail.com",
 *     },
 * });
 * const schema = new confluentcloud.CatalogEntityAttributes("schema", {
 *     schemaRegistryCluster: {
 *         id: essentials.id,
 *     },
 *     restEndpoint: essentials.restEndpoint,
 *     credentials: {
 *         key: "<Schema Registry API Key for data.confluent_schema_registry_cluster.essentials>",
 *         secret: "<Schema Registry API Secret for data.confluent_schema_registry_cluster.essentials>",
 *     },
 *     entityName: `${essentials.id}:.:${purchaseConfluentSchema.schemaIdentifier}`,
 *     entityType: "sr_schema",
 *     attributes: {
 *         description: "Schema description",
 *     },
 * });
 * ```
 *
 * ### Option #2: Manage a single Schema Registry cluster in the same Pulumi Stack
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const environment = new confluentcloud.CatalogEntityAttributes("environment", {
 *     entityName: environmentId,
 *     entityType: "cf_environment",
 *     attributes: {
 *         description: "Environment description",
 *     },
 * });
 * const kafka_cluster = new confluentcloud.CatalogEntityAttributes("kafka-cluster", {
 *     entityName: kafkaClusterId,
 *     entityType: "kafka_logical_cluster",
 *     attributes: {
 *         description: "Kafka Cluster description",
 *     },
 * });
 * const topic = new confluentcloud.CatalogEntityAttributes("topic", {
 *     entityName: `${kafkaClusterId}:${kafkaTopicName}`,
 *     entityType: "kafka_topic",
 *     attributes: {
 *         owner: "dev",
 *         description: "Kafka topic for orders",
 *         ownerEmail: "dev@gmail.com",
 *     },
 * });
 * const schema = new confluentcloud.CatalogEntityAttributes("schema", {
 *     entityName: `${schemaRegistryClusterId}:.:${purchase.schemaIdentifier}`,
 *     entityType: "sr_schema",
 *     attributes: {
 *         description: "Schema description",
 *     },
 * });
 * ```
 */
export class CatalogEntityAttributes extends pulumi.CustomResource {
    /**
     * Get an existing CatalogEntityAttributes resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CatalogEntityAttributesState, opts?: pulumi.CustomResourceOptions): CatalogEntityAttributes {
        return new CatalogEntityAttributes(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'confluentcloud:index/catalogEntityAttributes:CatalogEntityAttributes';

    /**
     * Returns true if the given object is an instance of CatalogEntityAttributes.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CatalogEntityAttributes {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CatalogEntityAttributes.__pulumiType;
    }

    /**
     * The attributes.
     */
    public readonly attributes!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The Cluster API Credentials.
     */
    public readonly credentials!: pulumi.Output<outputs.CatalogEntityAttributesCredentials | undefined>;
    /**
     * The qualified name of the entity, for example, `${data.confluent_schema_registry_cluster.essentials.id}:.:${confluent_schema.purchase.schema_identifier}`, `${data.confluent_schema_registry_cluster.essentials.id}:${confluent_kafka_cluster.basic.id}:${confluent_kafka_topic.purchase.topic_name}`. Refer to the [Examples of qualified names](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#examples-of-qualified-names) to see the full list of supported values for the `entityName` attribute.
     */
    public readonly entityName!: pulumi.Output<string>;
    /**
     * The entity type, for example, `cfEnvironment`, `kafkaLogicalCluster`, `kafkaTopic`, `srSchema`, etc. Refer to the [Entity types](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#entity-types) to see the full list of supported values for the `entityType` attribute.
     */
    public readonly entityType!: pulumi.Output<string>;
    /**
     * The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
     */
    public readonly restEndpoint!: pulumi.Output<string | undefined>;
    public readonly schemaRegistryCluster!: pulumi.Output<outputs.CatalogEntityAttributesSchemaRegistryCluster | undefined>;

    /**
     * Create a CatalogEntityAttributes resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CatalogEntityAttributesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CatalogEntityAttributesArgs | CatalogEntityAttributesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CatalogEntityAttributesState | undefined;
            resourceInputs["attributes"] = state ? state.attributes : undefined;
            resourceInputs["credentials"] = state ? state.credentials : undefined;
            resourceInputs["entityName"] = state ? state.entityName : undefined;
            resourceInputs["entityType"] = state ? state.entityType : undefined;
            resourceInputs["restEndpoint"] = state ? state.restEndpoint : undefined;
            resourceInputs["schemaRegistryCluster"] = state ? state.schemaRegistryCluster : undefined;
        } else {
            const args = argsOrState as CatalogEntityAttributesArgs | undefined;
            if ((!args || args.entityName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entityName'");
            }
            if ((!args || args.entityType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entityType'");
            }
            resourceInputs["attributes"] = args ? args.attributes : undefined;
            resourceInputs["credentials"] = args?.credentials ? pulumi.secret(args.credentials) : undefined;
            resourceInputs["entityName"] = args ? args.entityName : undefined;
            resourceInputs["entityType"] = args ? args.entityType : undefined;
            resourceInputs["restEndpoint"] = args ? args.restEndpoint : undefined;
            resourceInputs["schemaRegistryCluster"] = args ? args.schemaRegistryCluster : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["credentials"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CatalogEntityAttributes.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CatalogEntityAttributes resources.
 */
export interface CatalogEntityAttributesState {
    /**
     * The attributes.
     */
    attributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The Cluster API Credentials.
     */
    credentials?: pulumi.Input<inputs.CatalogEntityAttributesCredentials>;
    /**
     * The qualified name of the entity, for example, `${data.confluent_schema_registry_cluster.essentials.id}:.:${confluent_schema.purchase.schema_identifier}`, `${data.confluent_schema_registry_cluster.essentials.id}:${confluent_kafka_cluster.basic.id}:${confluent_kafka_topic.purchase.topic_name}`. Refer to the [Examples of qualified names](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#examples-of-qualified-names) to see the full list of supported values for the `entityName` attribute.
     */
    entityName?: pulumi.Input<string>;
    /**
     * The entity type, for example, `cfEnvironment`, `kafkaLogicalCluster`, `kafkaTopic`, `srSchema`, etc. Refer to the [Entity types](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#entity-types) to see the full list of supported values for the `entityType` attribute.
     */
    entityType?: pulumi.Input<string>;
    /**
     * The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
     */
    restEndpoint?: pulumi.Input<string>;
    schemaRegistryCluster?: pulumi.Input<inputs.CatalogEntityAttributesSchemaRegistryCluster>;
}

/**
 * The set of arguments for constructing a CatalogEntityAttributes resource.
 */
export interface CatalogEntityAttributesArgs {
    /**
     * The attributes.
     */
    attributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The Cluster API Credentials.
     */
    credentials?: pulumi.Input<inputs.CatalogEntityAttributesCredentials>;
    /**
     * The qualified name of the entity, for example, `${data.confluent_schema_registry_cluster.essentials.id}:.:${confluent_schema.purchase.schema_identifier}`, `${data.confluent_schema_registry_cluster.essentials.id}:${confluent_kafka_cluster.basic.id}:${confluent_kafka_topic.purchase.topic_name}`. Refer to the [Examples of qualified names](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#examples-of-qualified-names) to see the full list of supported values for the `entityName` attribute.
     */
    entityName: pulumi.Input<string>;
    /**
     * The entity type, for example, `cfEnvironment`, `kafkaLogicalCluster`, `kafkaTopic`, `srSchema`, etc. Refer to the [Entity types](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#entity-types) to see the full list of supported values for the `entityType` attribute.
     */
    entityType: pulumi.Input<string>;
    /**
     * The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
     */
    restEndpoint?: pulumi.Input<string>;
    schemaRegistryCluster?: pulumi.Input<inputs.CatalogEntityAttributesSchemaRegistryCluster>;
}

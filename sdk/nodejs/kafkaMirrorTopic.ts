// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as confluentcloud from "@pulumi/confluentcloud";
 *
 * const example = new confluentcloud.KafkaMirrorTopic("example", {
 *     sourceKafkaTopic: {
 *         topicName: "orders",
 *     },
 *     clusterLink: {
 *         linkName: source_outbound.linkName,
 *     },
 *     kafkaCluster: {
 *         id: destination.id,
 *         restEndpoint: destination.restEndpoint,
 *         credentials: {
 *             key: app_manager_destination_cluster_api_key.id,
 *             secret: app_manager_destination_cluster_api_key.secret,
 *         },
 *     },
 * });
 * ```
 *
 * ## Getting Started
 *
 * The following end-to-end examples might help to get started with `confluentcloud.KafkaMirrorTopic` resource:
 *   * destination-initiated-cluster-link-rbac: An example of setting up a _destination_ initiated cluster link with a mirror topic
 *   * source-initiated-cluster-link-rbac: An example of setting up a _source_ initiated cluster link with a mirror topic
 *
 * See [Mirror Topics on Confluent Cloud](https://docs.confluent.io/cloud/current/multi-cloud/cluster-linking/mirror-topics-cc.html) to learn more about Mirror Topics on Confluent Cloud.
 *
 * ## Import
 *
 * You can import a Kafka mirror topic by using the Kafka cluster ID, cluster link name, and Kafka topic name in the format `<Kafka cluster ID>/<Cluster link name>/<Kafka topic name>`, for example:
 *
 * $ export IMPORT_KAFKA_API_KEY="<kafka_api_key>"
 *
 * $ export IMPORT_KAFKA_API_SECRET="<kafka_api_secret>"
 *
 * $ export IMPORT_KAFKA_REST_ENDPOINT="<kafka_rest_endpoint>"
 *
 * ```sh
 * $ pulumi import confluentcloud:index/kafkaMirrorTopic:KafkaMirrorTopic my_mirror_topic lkc-abc123/my-cluster-link/orders-123
 * ```
 *
 * !> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
 */
export class KafkaMirrorTopic extends pulumi.CustomResource {
    /**
     * Get an existing KafkaMirrorTopic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KafkaMirrorTopicState, opts?: pulumi.CustomResourceOptions): KafkaMirrorTopic {
        return new KafkaMirrorTopic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'confluentcloud:index/kafkaMirrorTopic:KafkaMirrorTopic';

    /**
     * Returns true if the given object is an instance of KafkaMirrorTopic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KafkaMirrorTopic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KafkaMirrorTopic.__pulumiType;
    }

    public readonly clusterLink!: pulumi.Output<outputs.KafkaMirrorTopicClusterLink>;
    public readonly kafkaCluster!: pulumi.Output<outputs.KafkaMirrorTopicKafkaCluster>;
    /**
     * The name of the mirror topic. Only required when there is a prefix configured on the cluster link. For example, when `<prefix>` is configured for the cluster link, the mirror topic name has to be of the format `<prefix><source_topic_name>`.
     */
    public readonly mirrorTopicName!: pulumi.Output<string>;
    public readonly sourceKafkaTopic!: pulumi.Output<outputs.KafkaMirrorTopicSourceKafkaTopic>;
    public readonly status!: pulumi.Output<string>;

    /**
     * Create a KafkaMirrorTopic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KafkaMirrorTopicArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KafkaMirrorTopicArgs | KafkaMirrorTopicState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KafkaMirrorTopicState | undefined;
            resourceInputs["clusterLink"] = state ? state.clusterLink : undefined;
            resourceInputs["kafkaCluster"] = state ? state.kafkaCluster : undefined;
            resourceInputs["mirrorTopicName"] = state ? state.mirrorTopicName : undefined;
            resourceInputs["sourceKafkaTopic"] = state ? state.sourceKafkaTopic : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as KafkaMirrorTopicArgs | undefined;
            if ((!args || args.clusterLink === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterLink'");
            }
            if ((!args || args.kafkaCluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kafkaCluster'");
            }
            if ((!args || args.sourceKafkaTopic === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceKafkaTopic'");
            }
            resourceInputs["clusterLink"] = args ? args.clusterLink : undefined;
            resourceInputs["kafkaCluster"] = args ? args.kafkaCluster : undefined;
            resourceInputs["mirrorTopicName"] = args ? args.mirrorTopicName : undefined;
            resourceInputs["sourceKafkaTopic"] = args ? args.sourceKafkaTopic : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KafkaMirrorTopic.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KafkaMirrorTopic resources.
 */
export interface KafkaMirrorTopicState {
    clusterLink?: pulumi.Input<inputs.KafkaMirrorTopicClusterLink>;
    kafkaCluster?: pulumi.Input<inputs.KafkaMirrorTopicKafkaCluster>;
    /**
     * The name of the mirror topic. Only required when there is a prefix configured on the cluster link. For example, when `<prefix>` is configured for the cluster link, the mirror topic name has to be of the format `<prefix><source_topic_name>`.
     */
    mirrorTopicName?: pulumi.Input<string>;
    sourceKafkaTopic?: pulumi.Input<inputs.KafkaMirrorTopicSourceKafkaTopic>;
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KafkaMirrorTopic resource.
 */
export interface KafkaMirrorTopicArgs {
    clusterLink: pulumi.Input<inputs.KafkaMirrorTopicClusterLink>;
    kafkaCluster: pulumi.Input<inputs.KafkaMirrorTopicKafkaCluster>;
    /**
     * The name of the mirror topic. Only required when there is a prefix configured on the cluster link. For example, when `<prefix>` is configured for the cluster link, the mirror topic name has to be of the format `<prefix><source_topic_name>`.
     */
    mirrorTopicName?: pulumi.Input<string>;
    sourceKafkaTopic: pulumi.Input<inputs.KafkaMirrorTopicSourceKafkaTopic>;
    status?: pulumi.Input<string>;
}

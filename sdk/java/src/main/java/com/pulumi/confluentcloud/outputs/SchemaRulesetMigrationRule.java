// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SchemaRulesetMigrationRule {
    /**
     * @return An optional description of the rule.
     * 
     */
    private @Nullable String doc;
    /**
     * @return The body of the rule, which is optional.
     * 
     */
    private @Nullable String expr;
    /**
     * @return The kind of the rule. Accepted values are `CONDITION` and `TRANSFORM`.
     * 
     */
    private @Nullable String kind;
    /**
     * @return The mode of the rule. Accepted values are `UPGRADE`, `DOWNGRADE`, `UPDOWN`, `WRITE`, `READ`, and `WRITEREAD`.
     * 
     */
    private @Nullable String mode;
    private @Nullable String name;
    /**
     * @return An optional action to execute if the rule fails, otherwise the built-in action type ERROR is used. For `UPDOWN` and `WRITEREAD` rules, one can specify two actions separated by commas, as mentioned above.
     * 
     */
    private @Nullable String onFailure;
    /**
     * @return An optional action to execute if the rule succeeds, otherwise the built-in action type NONE is used. For `UPDOWN` and `WRITEREAD` rules, one can specify two actions separated by commas, such as &#34;NONE,ERROR&#34; for a `WRITEREAD` rule. In this case `NONE` applies to `WRITE` and `ERROR` applies to `READ`.
     * 
     */
    private @Nullable String onSuccess;
    /**
     * @return A set of static parameters for the rule, which is optional. These are key-value pairs that are passed to the rule.
     * 
     * &gt; **Note:** Schema rules (`ruleset`) are only available with the [Stream Governance Advanced package](https://docs.confluent.io/cloud/current/stream-governance/packages.html#packages).
     * 
     * &gt; **Note:** `ruleset` and `metadata` attributes are available in **Preview** for early adopters. Preview features are introduced to gather customer feedback. This feature should be used only for evaluation and non-production testing purposes or to provide feedback to Confluent, particularly as it becomes more widely available in follow-on editions.**Preview** features are intended for evaluation use in development and testing environments only, and not for production use. The warranty, SLA, and Support Services provisions of your agreement with Confluent do not apply to Preview features. Preview features are considered to be a Proof of Concept as defined in the Confluent Cloud Terms of Service. Confluent may discontinue providing preview releases of the Preview features at any time in Confluent’s sole discretion.
     * 
     */
    private @Nullable Map<String,String> params;
    /**
     * @return The tags to which the rule applies, if any.
     * 
     */
    private @Nullable List<String> tags;
    /**
     * @return The type of rule, which invokes a specific rule executor, such as Google Common Expression Language (CEL) or JSONata.
     * 
     */
    private @Nullable String type;

    private SchemaRulesetMigrationRule() {}
    /**
     * @return An optional description of the rule.
     * 
     */
    public Optional<String> doc() {
        return Optional.ofNullable(this.doc);
    }
    /**
     * @return The body of the rule, which is optional.
     * 
     */
    public Optional<String> expr() {
        return Optional.ofNullable(this.expr);
    }
    /**
     * @return The kind of the rule. Accepted values are `CONDITION` and `TRANSFORM`.
     * 
     */
    public Optional<String> kind() {
        return Optional.ofNullable(this.kind);
    }
    /**
     * @return The mode of the rule. Accepted values are `UPGRADE`, `DOWNGRADE`, `UPDOWN`, `WRITE`, `READ`, and `WRITEREAD`.
     * 
     */
    public Optional<String> mode() {
        return Optional.ofNullable(this.mode);
    }
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return An optional action to execute if the rule fails, otherwise the built-in action type ERROR is used. For `UPDOWN` and `WRITEREAD` rules, one can specify two actions separated by commas, as mentioned above.
     * 
     */
    public Optional<String> onFailure() {
        return Optional.ofNullable(this.onFailure);
    }
    /**
     * @return An optional action to execute if the rule succeeds, otherwise the built-in action type NONE is used. For `UPDOWN` and `WRITEREAD` rules, one can specify two actions separated by commas, such as &#34;NONE,ERROR&#34; for a `WRITEREAD` rule. In this case `NONE` applies to `WRITE` and `ERROR` applies to `READ`.
     * 
     */
    public Optional<String> onSuccess() {
        return Optional.ofNullable(this.onSuccess);
    }
    /**
     * @return A set of static parameters for the rule, which is optional. These are key-value pairs that are passed to the rule.
     * 
     * &gt; **Note:** Schema rules (`ruleset`) are only available with the [Stream Governance Advanced package](https://docs.confluent.io/cloud/current/stream-governance/packages.html#packages).
     * 
     * &gt; **Note:** `ruleset` and `metadata` attributes are available in **Preview** for early adopters. Preview features are introduced to gather customer feedback. This feature should be used only for evaluation and non-production testing purposes or to provide feedback to Confluent, particularly as it becomes more widely available in follow-on editions.**Preview** features are intended for evaluation use in development and testing environments only, and not for production use. The warranty, SLA, and Support Services provisions of your agreement with Confluent do not apply to Preview features. Preview features are considered to be a Proof of Concept as defined in the Confluent Cloud Terms of Service. Confluent may discontinue providing preview releases of the Preview features at any time in Confluent’s sole discretion.
     * 
     */
    public Map<String,String> params() {
        return this.params == null ? Map.of() : this.params;
    }
    /**
     * @return The tags to which the rule applies, if any.
     * 
     */
    public List<String> tags() {
        return this.tags == null ? List.of() : this.tags;
    }
    /**
     * @return The type of rule, which invokes a specific rule executor, such as Google Common Expression Language (CEL) or JSONata.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SchemaRulesetMigrationRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String doc;
        private @Nullable String expr;
        private @Nullable String kind;
        private @Nullable String mode;
        private @Nullable String name;
        private @Nullable String onFailure;
        private @Nullable String onSuccess;
        private @Nullable Map<String,String> params;
        private @Nullable List<String> tags;
        private @Nullable String type;
        public Builder() {}
        public Builder(SchemaRulesetMigrationRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.doc = defaults.doc;
    	      this.expr = defaults.expr;
    	      this.kind = defaults.kind;
    	      this.mode = defaults.mode;
    	      this.name = defaults.name;
    	      this.onFailure = defaults.onFailure;
    	      this.onSuccess = defaults.onSuccess;
    	      this.params = defaults.params;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder doc(@Nullable String doc) {

            this.doc = doc;
            return this;
        }
        @CustomType.Setter
        public Builder expr(@Nullable String expr) {

            this.expr = expr;
            return this;
        }
        @CustomType.Setter
        public Builder kind(@Nullable String kind) {

            this.kind = kind;
            return this;
        }
        @CustomType.Setter
        public Builder mode(@Nullable String mode) {

            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder onFailure(@Nullable String onFailure) {

            this.onFailure = onFailure;
            return this;
        }
        @CustomType.Setter
        public Builder onSuccess(@Nullable String onSuccess) {

            this.onSuccess = onSuccess;
            return this;
        }
        @CustomType.Setter
        public Builder params(@Nullable Map<String,String> params) {

            this.params = params;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<String> tags) {

            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        public SchemaRulesetMigrationRule build() {
            final var _resultValue = new SchemaRulesetMigrationRule();
            _resultValue.doc = doc;
            _resultValue.expr = expr;
            _resultValue.kind = kind;
            _resultValue.mode = mode;
            _resultValue.name = name;
            _resultValue.onFailure = onFailure;
            _resultValue.onSuccess = onSuccess;
            _resultValue.params = params;
            _resultValue.tags = tags;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}

// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetRoleBindingResult {
    /**
     * @return (Required String) A [Confluent Resource Name(CRN)](&lt;https://docs.confluent.io/cloud/current/api.html#section/Identifiers-and-URLs/Confluent-Resource-Names-(CRNs)&gt;) that specifies the scope and resource patterns necessary for the role to bind.
     * 
     */
    private String crnPattern;
    private String id;
    /**
     * @return (Required String) A principal User to bind the role to, for example, &#34;User:u-111aaa&#34; for binding to a user &#34;u-111aaa&#34;, or &#34;User:sa-111aaa&#34; for binding to a service account &#34;sa-111aaa&#34;.
     * 
     */
    private String principal;
    /**
     * @return (Required String) A name of the role to bind to the principal. See [Confluent Cloud RBAC Roles](https://docs.confluent.io/cloud/current/access-management/access-control/cloud-rbac.html#ccloud-rbac-roles) for a full list of supported role names.
     * 
     */
    private String roleName;

    private GetRoleBindingResult() {}
    /**
     * @return (Required String) A [Confluent Resource Name(CRN)](&lt;https://docs.confluent.io/cloud/current/api.html#section/Identifiers-and-URLs/Confluent-Resource-Names-(CRNs)&gt;) that specifies the scope and resource patterns necessary for the role to bind.
     * 
     */
    public String crnPattern() {
        return this.crnPattern;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return (Required String) A principal User to bind the role to, for example, &#34;User:u-111aaa&#34; for binding to a user &#34;u-111aaa&#34;, or &#34;User:sa-111aaa&#34; for binding to a service account &#34;sa-111aaa&#34;.
     * 
     */
    public String principal() {
        return this.principal;
    }
    /**
     * @return (Required String) A name of the role to bind to the principal. See [Confluent Cloud RBAC Roles](https://docs.confluent.io/cloud/current/access-management/access-control/cloud-rbac.html#ccloud-rbac-roles) for a full list of supported role names.
     * 
     */
    public String roleName() {
        return this.roleName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRoleBindingResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String crnPattern;
        private String id;
        private String principal;
        private String roleName;
        public Builder() {}
        public Builder(GetRoleBindingResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.crnPattern = defaults.crnPattern;
    	      this.id = defaults.id;
    	      this.principal = defaults.principal;
    	      this.roleName = defaults.roleName;
        }

        @CustomType.Setter
        public Builder crnPattern(String crnPattern) {
            if (crnPattern == null) {
              throw new MissingRequiredPropertyException("GetRoleBindingResult", "crnPattern");
            }
            this.crnPattern = crnPattern;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRoleBindingResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder principal(String principal) {
            if (principal == null) {
              throw new MissingRequiredPropertyException("GetRoleBindingResult", "principal");
            }
            this.principal = principal;
            return this;
        }
        @CustomType.Setter
        public Builder roleName(String roleName) {
            if (roleName == null) {
              throw new MissingRequiredPropertyException("GetRoleBindingResult", "roleName");
            }
            this.roleName = roleName;
            return this;
        }
        public GetRoleBindingResult build() {
            final var _resultValue = new GetRoleBindingResult();
            _resultValue.crnPattern = crnPattern;
            _resultValue.id = id;
            _resultValue.principal = principal;
            _resultValue.roleName = roleName;
            return _resultValue;
        }
    }
}

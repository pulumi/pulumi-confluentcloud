// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BusinessMetadataAttributeDefinitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final BusinessMetadataAttributeDefinitionArgs Empty = new BusinessMetadataAttributeDefinitionArgs();

    /**
     * The default value of this attribute.
     * 
     */
    @Import(name="defaultValue")
    private @Nullable Output<String> defaultValue;

    /**
     * @return The default value of this attribute.
     * 
     */
    public Optional<Output<String>> defaultValue() {
        return Optional.ofNullable(this.defaultValue);
    }

    /**
     * The description of this attribute.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of this attribute.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * An optional flag to control whether the attribute should be optional or required. The default value is `false`.
     * 
     */
    @Import(name="isOptional")
    private @Nullable Output<Boolean> isOptional;

    /**
     * @return An optional flag to control whether the attribute should be optional or required. The default value is `false`.
     * 
     */
    public Optional<Output<Boolean>> isOptional() {
        return Optional.ofNullable(this.isOptional);
    }

    /**
     * The name of the attribute.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the attribute.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * (Optional Map) Block for the attribute options:
     * - `applicableEntityTypes` - (Optional String) The entity types that the attribute is applicable, it always returns `[\&#34;cf_entity\&#34;]`.
     * - `maxStrLength` - (Optional String) The maximum length of the string value, it always returns `5000`.
     * 
     */
    @Import(name="options")
    private @Nullable Output<Map<String,String>> options;

    /**
     * @return (Optional Map) Block for the attribute options:
     * - `applicableEntityTypes` - (Optional String) The entity types that the attribute is applicable, it always returns `[\&#34;cf_entity\&#34;]`.
     * - `maxStrLength` - (Optional String) The maximum length of the string value, it always returns `5000`.
     * 
     */
    public Optional<Output<Map<String,String>>> options() {
        return Optional.ofNullable(this.options);
    }

    /**
     * (Required String) The type of the attribute, it always returns `string`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return (Required String) The type of the attribute, it always returns `string`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private BusinessMetadataAttributeDefinitionArgs() {}

    private BusinessMetadataAttributeDefinitionArgs(BusinessMetadataAttributeDefinitionArgs $) {
        this.defaultValue = $.defaultValue;
        this.description = $.description;
        this.isOptional = $.isOptional;
        this.name = $.name;
        this.options = $.options;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BusinessMetadataAttributeDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BusinessMetadataAttributeDefinitionArgs $;

        public Builder() {
            $ = new BusinessMetadataAttributeDefinitionArgs();
        }

        public Builder(BusinessMetadataAttributeDefinitionArgs defaults) {
            $ = new BusinessMetadataAttributeDefinitionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultValue The default value of this attribute.
         * 
         * @return builder
         * 
         */
        public Builder defaultValue(@Nullable Output<String> defaultValue) {
            $.defaultValue = defaultValue;
            return this;
        }

        /**
         * @param defaultValue The default value of this attribute.
         * 
         * @return builder
         * 
         */
        public Builder defaultValue(String defaultValue) {
            return defaultValue(Output.of(defaultValue));
        }

        /**
         * @param description The description of this attribute.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of this attribute.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param isOptional An optional flag to control whether the attribute should be optional or required. The default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder isOptional(@Nullable Output<Boolean> isOptional) {
            $.isOptional = isOptional;
            return this;
        }

        /**
         * @param isOptional An optional flag to control whether the attribute should be optional or required. The default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder isOptional(Boolean isOptional) {
            return isOptional(Output.of(isOptional));
        }

        /**
         * @param name The name of the attribute.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the attribute.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param options (Optional Map) Block for the attribute options:
         * - `applicableEntityTypes` - (Optional String) The entity types that the attribute is applicable, it always returns `[\&#34;cf_entity\&#34;]`.
         * - `maxStrLength` - (Optional String) The maximum length of the string value, it always returns `5000`.
         * 
         * @return builder
         * 
         */
        public Builder options(@Nullable Output<Map<String,String>> options) {
            $.options = options;
            return this;
        }

        /**
         * @param options (Optional Map) Block for the attribute options:
         * - `applicableEntityTypes` - (Optional String) The entity types that the attribute is applicable, it always returns `[\&#34;cf_entity\&#34;]`.
         * - `maxStrLength` - (Optional String) The maximum length of the string value, it always returns `5000`.
         * 
         * @return builder
         * 
         */
        public Builder options(Map<String,String> options) {
            return options(Output.of(options));
        }

        /**
         * @param type (Required String) The type of the attribute, it always returns `string`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type (Required String) The type of the attribute, it always returns `string`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public BusinessMetadataAttributeDefinitionArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("BusinessMetadataAttributeDefinitionArgs", "name");
            }
            return $;
        }
    }

}

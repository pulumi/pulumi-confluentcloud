// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.outputs;

import com.pulumi.confluentcloud.outputs.GetFlinkConnectionComputePool;
import com.pulumi.confluentcloud.outputs.GetFlinkConnectionCredentials;
import com.pulumi.confluentcloud.outputs.GetFlinkConnectionEnvironment;
import com.pulumi.confluentcloud.outputs.GetFlinkConnectionOrganization;
import com.pulumi.confluentcloud.outputs.GetFlinkConnectionPrincipal;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetFlinkConnectionResult {
    private GetFlinkConnectionComputePool computePool;
    private @Nullable GetFlinkConnectionCredentials credentials;
    /**
     * @return (Required String) The authentication data of the Flink Connection.
     * 
     */
    private String data;
    private String displayName;
    /**
     * @return (Required String) The endpoint of the Flink Connection, for example, `https://api.openai.com/v1/chat/completions`
     * 
     */
    private String endpoint;
    private GetFlinkConnectionEnvironment environment;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private GetFlinkConnectionOrganization organization;
    private GetFlinkConnectionPrincipal principal;
    private @Nullable String restEndpoint;
    /**
     * @return (Required String) The status of the Flink Connection.
     * 
     */
    private String status;
    /**
     * @return (Required String) The status details of the Flink Connection.
     * ---
     * 
     */
    private String statusDetail;
    private @Nullable String type;

    private GetFlinkConnectionResult() {}
    public GetFlinkConnectionComputePool computePool() {
        return this.computePool;
    }
    public Optional<GetFlinkConnectionCredentials> credentials() {
        return Optional.ofNullable(this.credentials);
    }
    /**
     * @return (Required String) The authentication data of the Flink Connection.
     * 
     */
    public String data() {
        return this.data;
    }
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return (Required String) The endpoint of the Flink Connection, for example, `https://api.openai.com/v1/chat/completions`
     * 
     */
    public String endpoint() {
        return this.endpoint;
    }
    public GetFlinkConnectionEnvironment environment() {
        return this.environment;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public GetFlinkConnectionOrganization organization() {
        return this.organization;
    }
    public GetFlinkConnectionPrincipal principal() {
        return this.principal;
    }
    public Optional<String> restEndpoint() {
        return Optional.ofNullable(this.restEndpoint);
    }
    /**
     * @return (Required String) The status of the Flink Connection.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return (Required String) The status details of the Flink Connection.
     * ---
     * 
     */
    public String statusDetail() {
        return this.statusDetail;
    }
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFlinkConnectionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetFlinkConnectionComputePool computePool;
        private @Nullable GetFlinkConnectionCredentials credentials;
        private String data;
        private String displayName;
        private String endpoint;
        private GetFlinkConnectionEnvironment environment;
        private String id;
        private GetFlinkConnectionOrganization organization;
        private GetFlinkConnectionPrincipal principal;
        private @Nullable String restEndpoint;
        private String status;
        private String statusDetail;
        private @Nullable String type;
        public Builder() {}
        public Builder(GetFlinkConnectionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.computePool = defaults.computePool;
    	      this.credentials = defaults.credentials;
    	      this.data = defaults.data;
    	      this.displayName = defaults.displayName;
    	      this.endpoint = defaults.endpoint;
    	      this.environment = defaults.environment;
    	      this.id = defaults.id;
    	      this.organization = defaults.organization;
    	      this.principal = defaults.principal;
    	      this.restEndpoint = defaults.restEndpoint;
    	      this.status = defaults.status;
    	      this.statusDetail = defaults.statusDetail;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder computePool(GetFlinkConnectionComputePool computePool) {
            if (computePool == null) {
              throw new MissingRequiredPropertyException("GetFlinkConnectionResult", "computePool");
            }
            this.computePool = computePool;
            return this;
        }
        @CustomType.Setter
        public Builder credentials(@Nullable GetFlinkConnectionCredentials credentials) {

            this.credentials = credentials;
            return this;
        }
        @CustomType.Setter
        public Builder data(String data) {
            if (data == null) {
              throw new MissingRequiredPropertyException("GetFlinkConnectionResult", "data");
            }
            this.data = data;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetFlinkConnectionResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder endpoint(String endpoint) {
            if (endpoint == null) {
              throw new MissingRequiredPropertyException("GetFlinkConnectionResult", "endpoint");
            }
            this.endpoint = endpoint;
            return this;
        }
        @CustomType.Setter
        public Builder environment(GetFlinkConnectionEnvironment environment) {
            if (environment == null) {
              throw new MissingRequiredPropertyException("GetFlinkConnectionResult", "environment");
            }
            this.environment = environment;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetFlinkConnectionResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder organization(GetFlinkConnectionOrganization organization) {
            if (organization == null) {
              throw new MissingRequiredPropertyException("GetFlinkConnectionResult", "organization");
            }
            this.organization = organization;
            return this;
        }
        @CustomType.Setter
        public Builder principal(GetFlinkConnectionPrincipal principal) {
            if (principal == null) {
              throw new MissingRequiredPropertyException("GetFlinkConnectionResult", "principal");
            }
            this.principal = principal;
            return this;
        }
        @CustomType.Setter
        public Builder restEndpoint(@Nullable String restEndpoint) {

            this.restEndpoint = restEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetFlinkConnectionResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder statusDetail(String statusDetail) {
            if (statusDetail == null) {
              throw new MissingRequiredPropertyException("GetFlinkConnectionResult", "statusDetail");
            }
            this.statusDetail = statusDetail;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        public GetFlinkConnectionResult build() {
            final var _resultValue = new GetFlinkConnectionResult();
            _resultValue.computePool = computePool;
            _resultValue.credentials = credentials;
            _resultValue.data = data;
            _resultValue.displayName = displayName;
            _resultValue.endpoint = endpoint;
            _resultValue.environment = environment;
            _resultValue.id = id;
            _resultValue.organization = organization;
            _resultValue.principal = principal;
            _resultValue.restEndpoint = restEndpoint;
            _resultValue.status = status;
            _resultValue.statusDetail = statusDetail;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}

// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.inputs;

import com.pulumi.confluentcloud.inputs.GetFlinkConnectionComputePool;
import com.pulumi.confluentcloud.inputs.GetFlinkConnectionCredentials;
import com.pulumi.confluentcloud.inputs.GetFlinkConnectionEnvironment;
import com.pulumi.confluentcloud.inputs.GetFlinkConnectionOrganization;
import com.pulumi.confluentcloud.inputs.GetFlinkConnectionPrincipal;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetFlinkConnectionPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetFlinkConnectionPlainArgs Empty = new GetFlinkConnectionPlainArgs();

    @Import(name="computePool")
    private @Nullable GetFlinkConnectionComputePool computePool;

    public Optional<GetFlinkConnectionComputePool> computePool() {
        return Optional.ofNullable(this.computePool);
    }

    @Import(name="credentials")
    private @Nullable GetFlinkConnectionCredentials credentials;

    public Optional<GetFlinkConnectionCredentials> credentials() {
        return Optional.ofNullable(this.credentials);
    }

    /**
     * The name of the Flink Connection.
     * 
     */
    @Import(name="displayName", required=true)
    private String displayName;

    /**
     * @return The name of the Flink Connection.
     * 
     */
    public String displayName() {
        return this.displayName;
    }

    @Import(name="environment")
    private @Nullable GetFlinkConnectionEnvironment environment;

    public Optional<GetFlinkConnectionEnvironment> environment() {
        return Optional.ofNullable(this.environment);
    }

    @Import(name="organization")
    private @Nullable GetFlinkConnectionOrganization organization;

    public Optional<GetFlinkConnectionOrganization> organization() {
        return Optional.ofNullable(this.organization);
    }

    @Import(name="principal")
    private @Nullable GetFlinkConnectionPrincipal principal;

    public Optional<GetFlinkConnectionPrincipal> principal() {
        return Optional.ofNullable(this.principal);
    }

    /**
     * The REST endpoint of the Flink region, for example, `https://flink.us-east-1.aws.confluent.cloud`).
     * 
     */
    @Import(name="restEndpoint")
    private @Nullable String restEndpoint;

    /**
     * @return The REST endpoint of the Flink region, for example, `https://flink.us-east-1.aws.confluent.cloud`).
     * 
     */
    public Optional<String> restEndpoint() {
        return Optional.ofNullable(this.restEndpoint);
    }

    /**
     * The type of the Flink Connection. The accepted values are: `OPENAI`, `AZUREML`, `AZUREOPENAI`, `BEDROCK`, `SAGEMAKER`, `GOOGLEAI`, `VERTEXAI`, `MONGODB`, `PINECONE`, `ELASTIC` and `COUCHBASE`.
     * 
     */
    @Import(name="type")
    private @Nullable String type;

    /**
     * @return The type of the Flink Connection. The accepted values are: `OPENAI`, `AZUREML`, `AZUREOPENAI`, `BEDROCK`, `SAGEMAKER`, `GOOGLEAI`, `VERTEXAI`, `MONGODB`, `PINECONE`, `ELASTIC` and `COUCHBASE`.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    private GetFlinkConnectionPlainArgs() {}

    private GetFlinkConnectionPlainArgs(GetFlinkConnectionPlainArgs $) {
        this.computePool = $.computePool;
        this.credentials = $.credentials;
        this.displayName = $.displayName;
        this.environment = $.environment;
        this.organization = $.organization;
        this.principal = $.principal;
        this.restEndpoint = $.restEndpoint;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetFlinkConnectionPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetFlinkConnectionPlainArgs $;

        public Builder() {
            $ = new GetFlinkConnectionPlainArgs();
        }

        public Builder(GetFlinkConnectionPlainArgs defaults) {
            $ = new GetFlinkConnectionPlainArgs(Objects.requireNonNull(defaults));
        }

        public Builder computePool(@Nullable GetFlinkConnectionComputePool computePool) {
            $.computePool = computePool;
            return this;
        }

        public Builder credentials(@Nullable GetFlinkConnectionCredentials credentials) {
            $.credentials = credentials;
            return this;
        }

        /**
         * @param displayName The name of the Flink Connection.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder environment(@Nullable GetFlinkConnectionEnvironment environment) {
            $.environment = environment;
            return this;
        }

        public Builder organization(@Nullable GetFlinkConnectionOrganization organization) {
            $.organization = organization;
            return this;
        }

        public Builder principal(@Nullable GetFlinkConnectionPrincipal principal) {
            $.principal = principal;
            return this;
        }

        /**
         * @param restEndpoint The REST endpoint of the Flink region, for example, `https://flink.us-east-1.aws.confluent.cloud`).
         * 
         * @return builder
         * 
         */
        public Builder restEndpoint(@Nullable String restEndpoint) {
            $.restEndpoint = restEndpoint;
            return this;
        }

        /**
         * @param type The type of the Flink Connection. The accepted values are: `OPENAI`, `AZUREML`, `AZUREOPENAI`, `BEDROCK`, `SAGEMAKER`, `GOOGLEAI`, `VERTEXAI`, `MONGODB`, `PINECONE`, `ELASTIC` and `COUCHBASE`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable String type) {
            $.type = type;
            return this;
        }

        public GetFlinkConnectionPlainArgs build() {
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("GetFlinkConnectionPlainArgs", "displayName");
            }
            return $;
        }
    }

}

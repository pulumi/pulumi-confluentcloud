// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderIntegrationAuthorizationGcpArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderIntegrationAuthorizationGcpArgs Empty = new ProviderIntegrationAuthorizationGcpArgs();

    /**
     * Customer&#39;s Google Service Account that Confluent Cloud impersonates.
     * 
     * &gt; **Note:** Exactly one of `azure` or `gcp` configuration blocks must be provided, matching the cloud provider of the associated provider integration.
     * 
     */
    @Import(name="customerGoogleServiceAccount", required=true)
    private Output<String> customerGoogleServiceAccount;

    /**
     * @return Customer&#39;s Google Service Account that Confluent Cloud impersonates.
     * 
     * &gt; **Note:** Exactly one of `azure` or `gcp` configuration blocks must be provided, matching the cloud provider of the associated provider integration.
     * 
     */
    public Output<String> customerGoogleServiceAccount() {
        return this.customerGoogleServiceAccount;
    }

    /**
     * (Computed String) Google Service Account that Confluent Cloud uses for impersonation.
     * 
     */
    @Import(name="googleServiceAccount")
    private @Nullable Output<String> googleServiceAccount;

    /**
     * @return (Computed String) Google Service Account that Confluent Cloud uses for impersonation.
     * 
     */
    public Optional<Output<String>> googleServiceAccount() {
        return Optional.ofNullable(this.googleServiceAccount);
    }

    private ProviderIntegrationAuthorizationGcpArgs() {}

    private ProviderIntegrationAuthorizationGcpArgs(ProviderIntegrationAuthorizationGcpArgs $) {
        this.customerGoogleServiceAccount = $.customerGoogleServiceAccount;
        this.googleServiceAccount = $.googleServiceAccount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderIntegrationAuthorizationGcpArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderIntegrationAuthorizationGcpArgs $;

        public Builder() {
            $ = new ProviderIntegrationAuthorizationGcpArgs();
        }

        public Builder(ProviderIntegrationAuthorizationGcpArgs defaults) {
            $ = new ProviderIntegrationAuthorizationGcpArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param customerGoogleServiceAccount Customer&#39;s Google Service Account that Confluent Cloud impersonates.
         * 
         * &gt; **Note:** Exactly one of `azure` or `gcp` configuration blocks must be provided, matching the cloud provider of the associated provider integration.
         * 
         * @return builder
         * 
         */
        public Builder customerGoogleServiceAccount(Output<String> customerGoogleServiceAccount) {
            $.customerGoogleServiceAccount = customerGoogleServiceAccount;
            return this;
        }

        /**
         * @param customerGoogleServiceAccount Customer&#39;s Google Service Account that Confluent Cloud impersonates.
         * 
         * &gt; **Note:** Exactly one of `azure` or `gcp` configuration blocks must be provided, matching the cloud provider of the associated provider integration.
         * 
         * @return builder
         * 
         */
        public Builder customerGoogleServiceAccount(String customerGoogleServiceAccount) {
            return customerGoogleServiceAccount(Output.of(customerGoogleServiceAccount));
        }

        /**
         * @param googleServiceAccount (Computed String) Google Service Account that Confluent Cloud uses for impersonation.
         * 
         * @return builder
         * 
         */
        public Builder googleServiceAccount(@Nullable Output<String> googleServiceAccount) {
            $.googleServiceAccount = googleServiceAccount;
            return this;
        }

        /**
         * @param googleServiceAccount (Computed String) Google Service Account that Confluent Cloud uses for impersonation.
         * 
         * @return builder
         * 
         */
        public Builder googleServiceAccount(String googleServiceAccount) {
            return googleServiceAccount(Output.of(googleServiceAccount));
        }

        public ProviderIntegrationAuthorizationGcpArgs build() {
            if ($.customerGoogleServiceAccount == null) {
                throw new MissingRequiredPropertyException("ProviderIntegrationAuthorizationGcpArgs", "customerGoogleServiceAccount");
            }
            return $;
        }
    }

}

// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud;

import com.pulumi.confluentcloud.SubjectConfigArgs;
import com.pulumi.confluentcloud.Utilities;
import com.pulumi.confluentcloud.inputs.SubjectConfigState;
import com.pulumi.confluentcloud.outputs.SubjectConfigCredentials;
import com.pulumi.confluentcloud.outputs.SubjectConfigSchemaRegistryCluster;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * ### Option #1: Manage multiple Schema Registry clusters in the same Pulumi Stack
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.confluentcloud.SubjectConfig;
 * import com.pulumi.confluentcloud.SubjectConfigArgs;
 * import com.pulumi.confluentcloud.inputs.SubjectConfigSchemaRegistryClusterArgs;
 * import com.pulumi.confluentcloud.inputs.SubjectConfigCredentialsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new SubjectConfig("example", SubjectConfigArgs.builder()
 *             .schemaRegistryCluster(SubjectConfigSchemaRegistryClusterArgs.builder()
 *                 .id(essentials.id())
 *                 .build())
 *             .restEndpoint(essentialsConfluentSchemaRegistryCluster.restEndpoint())
 *             .subjectName("proto-purchase-value")
 *             .compatibilityLevel("BACKWARD")
 *             .compatibilityGroup("abc.cg.version")
 *             .credentials(SubjectConfigCredentialsArgs.builder()
 *                 .key("<Schema Registry API Key for data.confluent_schema_registry_cluster.essentials>")
 *                 .secret("<Schema Registry API Secret for data.confluent_schema_registry_cluster.essentials>")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### Option #2: Manage a single Schema Registry cluster in the same Pulumi Stack
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.confluentcloud.SubjectConfig;
 * import com.pulumi.confluentcloud.SubjectConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new SubjectConfig("example", SubjectConfigArgs.builder()
 *             .subjectName("proto-purchase-value")
 *             .compatibilityLevel("BACKWARD")
 *             .compatibilityGroup("abc.cg.version")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * You can import a Subject Config by using the Schema Registry cluster ID, Subject name in the format `&lt;Schema Registry cluster ID&gt;/&lt;Subject name&gt;`, for example:
 * 
 * $ export IMPORT_SCHEMA_REGISTRY_API_KEY=&#34;&lt;schema_registry_api_key&gt;&#34;
 * 
 * $ export IMPORT_SCHEMA_REGISTRY_API_SECRET=&#34;&lt;schema_registry_api_secret&gt;&#34;
 * 
 * $ export IMPORT_SCHEMA_REGISTRY_REST_ENDPOINT=&#34;&lt;schema_registry_rest_endpoint&gt;&#34;
 * 
 * ```sh
 * $ pulumi import confluentcloud:index/subjectConfig:SubjectConfig example lsrc-abc123/test-subject
 * ```
 * 
 * !&gt; **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
 * 
 */
@ResourceType(type="confluentcloud:index/subjectConfig:SubjectConfig")
public class SubjectConfig extends com.pulumi.resources.CustomResource {
    /**
     * The Compatibility Group of the specified subject.
     * 
     */
    @Export(name="compatibilityGroup", refs={String.class}, tree="[0]")
    private Output<String> compatibilityGroup;

    /**
     * @return The Compatibility Group of the specified subject.
     * 
     */
    public Output<String> compatibilityGroup() {
        return this.compatibilityGroup;
    }
    /**
     * The Compatibility Level of the specified subject. Accepted values are: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`, `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, and `NONE`. See the [Compatibility Types](https://docs.confluent.io/platform/current/schema-registry/avro.html#compatibility-types) for more details.
     * 
     */
    @Export(name="compatibilityLevel", refs={String.class}, tree="[0]")
    private Output<String> compatibilityLevel;

    /**
     * @return The Compatibility Level of the specified subject. Accepted values are: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`, `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, and `NONE`. See the [Compatibility Types](https://docs.confluent.io/platform/current/schema-registry/avro.html#compatibility-types) for more details.
     * 
     */
    public Output<String> compatibilityLevel() {
        return this.compatibilityLevel;
    }
    /**
     * The Cluster API Credentials.
     * 
     */
    @Export(name="credentials", refs={SubjectConfigCredentials.class}, tree="[0]")
    private Output</* @Nullable */ SubjectConfigCredentials> credentials;

    /**
     * @return The Cluster API Credentials.
     * 
     */
    public Output<Optional<SubjectConfigCredentials>> credentials() {
        return Codegen.optional(this.credentials);
    }
    /**
     * The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
     * 
     */
    @Export(name="restEndpoint", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> restEndpoint;

    /**
     * @return The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
     * 
     */
    public Output<Optional<String>> restEndpoint() {
        return Codegen.optional(this.restEndpoint);
    }
    @Export(name="schemaRegistryCluster", refs={SubjectConfigSchemaRegistryCluster.class}, tree="[0]")
    private Output</* @Nullable */ SubjectConfigSchemaRegistryCluster> schemaRegistryCluster;

    public Output<Optional<SubjectConfigSchemaRegistryCluster>> schemaRegistryCluster() {
        return Codegen.optional(this.schemaRegistryCluster);
    }
    /**
     * The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`.
     * 
     * &gt; **Note:** If you want to reference the subject that is located in a custom context, use the following naming pattern: `:.contextName:subjectName`. For example, use `subjectName = &#34;:.context1:test-subject&#34;` to reference the subject named `test-subject` in the `context1` context, and use `subjectName = &#34;test-subject&#34;` to reference the subject named `test-subject` in the `default` context.
     * 
     * &gt; **Note:** To configure a config at the context level, affecting all subjects created within that context, use the following naming pattern: `:.contextName:`. For example, to set the global configuration for the `context1` context, use `subjectName = &#34;:.context1:&#34;`.
     * 
     */
    @Export(name="subjectName", refs={String.class}, tree="[0]")
    private Output<String> subjectName;

    /**
     * @return The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`.
     * 
     * &gt; **Note:** If you want to reference the subject that is located in a custom context, use the following naming pattern: `:.contextName:subjectName`. For example, use `subjectName = &#34;:.context1:test-subject&#34;` to reference the subject named `test-subject` in the `context1` context, and use `subjectName = &#34;test-subject&#34;` to reference the subject named `test-subject` in the `default` context.
     * 
     * &gt; **Note:** To configure a config at the context level, affecting all subjects created within that context, use the following naming pattern: `:.contextName:`. For example, to set the global configuration for the `context1` context, use `subjectName = &#34;:.context1:&#34;`.
     * 
     */
    public Output<String> subjectName() {
        return this.subjectName;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SubjectConfig(java.lang.String name) {
        this(name, SubjectConfigArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SubjectConfig(java.lang.String name, SubjectConfigArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SubjectConfig(java.lang.String name, SubjectConfigArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("confluentcloud:index/subjectConfig:SubjectConfig", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private SubjectConfig(java.lang.String name, Output<java.lang.String> id, @Nullable SubjectConfigState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("confluentcloud:index/subjectConfig:SubjectConfig", name, state, makeResourceOptions(options, id), false);
    }

    private static SubjectConfigArgs makeArgs(SubjectConfigArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? SubjectConfigArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "credentials"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SubjectConfig get(java.lang.String name, Output<java.lang.String> id, @Nullable SubjectConfigState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SubjectConfig(name, id, state, options);
    }
}

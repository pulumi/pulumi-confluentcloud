// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud;

import com.pulumi.confluentcloud.SchemaRegistryDekArgs;
import com.pulumi.confluentcloud.Utilities;
import com.pulumi.confluentcloud.inputs.SchemaRegistryDekState;
import com.pulumi.confluentcloud.outputs.SchemaRegistryDekCredentials;
import com.pulumi.confluentcloud.outputs.SchemaRegistryDekSchemaRegistryCluster;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="confluentcloud:index/schemaRegistryDek:SchemaRegistryDek")
public class SchemaRegistryDek extends com.pulumi.resources.CustomResource {
    @Export(name="algorithm", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> algorithm;

    public Output<Optional<String>> algorithm() {
        return Codegen.optional(this.algorithm);
    }
    /**
     * The Cluster API Credentials.
     * 
     */
    @Export(name="credentials", refs={SchemaRegistryDekCredentials.class}, tree="[0]")
    private Output</* @Nullable */ SchemaRegistryDekCredentials> credentials;

    /**
     * @return The Cluster API Credentials.
     * 
     */
    public Output<Optional<SchemaRegistryDekCredentials>> credentials() {
        return Codegen.optional(this.credentials);
    }
    @Export(name="encryptedKeyMaterial", refs={String.class}, tree="[0]")
    private Output<String> encryptedKeyMaterial;

    public Output<String> encryptedKeyMaterial() {
        return this.encryptedKeyMaterial;
    }
    /**
     * Controls whether a dek should be soft or hard deleted. Set it to `true` if you want to hard delete a schema registry dek
     * on destroy. Defaults to `false` (soft delete).
     * 
     */
    @Export(name="hardDelete", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> hardDelete;

    /**
     * @return Controls whether a dek should be soft or hard deleted. Set it to `true` if you want to hard delete a schema registry dek
     * on destroy. Defaults to `false` (soft delete).
     * 
     */
    public Output<Optional<Boolean>> hardDelete() {
        return Codegen.optional(this.hardDelete);
    }
    @Export(name="kekName", refs={String.class}, tree="[0]")
    private Output<String> kekName;

    public Output<String> kekName() {
        return this.kekName;
    }
    @Export(name="keyMaterial", refs={String.class}, tree="[0]")
    private Output<String> keyMaterial;

    public Output<String> keyMaterial() {
        return this.keyMaterial;
    }
    /**
     * The REST endpoint of the Schema Registry cluster, for example,
     * `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
     * 
     */
    @Export(name="restEndpoint", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> restEndpoint;

    /**
     * @return The REST endpoint of the Schema Registry cluster, for example,
     * `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
     * 
     */
    public Output<Optional<String>> restEndpoint() {
        return Codegen.optional(this.restEndpoint);
    }
    @Export(name="schemaRegistryCluster", refs={SchemaRegistryDekSchemaRegistryCluster.class}, tree="[0]")
    private Output</* @Nullable */ SchemaRegistryDekSchemaRegistryCluster> schemaRegistryCluster;

    public Output<Optional<SchemaRegistryDekSchemaRegistryCluster>> schemaRegistryCluster() {
        return Codegen.optional(this.schemaRegistryCluster);
    }
    @Export(name="subjectName", refs={String.class}, tree="[0]")
    private Output<String> subjectName;

    public Output<String> subjectName() {
        return this.subjectName;
    }
    @Export(name="version", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> version;

    public Output<Optional<Integer>> version() {
        return Codegen.optional(this.version);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SchemaRegistryDek(String name) {
        this(name, SchemaRegistryDekArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SchemaRegistryDek(String name, SchemaRegistryDekArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SchemaRegistryDek(String name, SchemaRegistryDekArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("confluentcloud:index/schemaRegistryDek:SchemaRegistryDek", name, args == null ? SchemaRegistryDekArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private SchemaRegistryDek(String name, Output<String> id, @Nullable SchemaRegistryDekState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("confluentcloud:index/schemaRegistryDek:SchemaRegistryDek", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "credentials"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SchemaRegistryDek get(String name, Output<String> id, @Nullable SchemaRegistryDekState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SchemaRegistryDek(name, id, state, options);
    }
}

// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud;

import com.pulumi.confluentcloud.SchemaRegistryDekArgs;
import com.pulumi.confluentcloud.Utilities;
import com.pulumi.confluentcloud.inputs.SchemaRegistryDekState;
import com.pulumi.confluentcloud.outputs.SchemaRegistryDekCredentials;
import com.pulumi.confluentcloud.outputs.SchemaRegistryDekSchemaRegistryCluster;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
 * 
 * `confluentcloud.SchemaRegistryDek` provides a Schema Registry Data Encryption Key (DEK) resource that enables creating, editing, and deleting Schema Registry Data Encryption Keys on Confluent Cloud.
 * 
 * ## Example Usage
 * 
 * ### Option #1: Manage multiple Schema Registry clusters in the same Pulumi Stack
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.confluentcloud.SchemaRegistryDek;
 * import com.pulumi.confluentcloud.SchemaRegistryDekArgs;
 * import com.pulumi.confluentcloud.inputs.SchemaRegistryDekSchemaRegistryClusterArgs;
 * import com.pulumi.confluentcloud.inputs.SchemaRegistryDekCredentialsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var myDek = new SchemaRegistryDek("myDek", SchemaRegistryDekArgs.builder()
 *             .schemaRegistryCluster(SchemaRegistryDekSchemaRegistryClusterArgs.builder()
 *                 .id(essentials.id())
 *                 .build())
 *             .restEndpoint(essentials.restEndpoint())
 *             .credentials(SchemaRegistryDekCredentialsArgs.builder()
 *                 .key("<Schema Registry API Key for data.confluent_schema_registry_cluster.essentials>")
 *                 .secret("<Schema Registry API Secret for data.confluent_schema_registry_cluster.essentials>")
 *                 .build())
 *             .kekName("my_kek")
 *             .subjectName("my_subject")
 *             .hardDelete(true)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Option #2: Manage a single Schema Registry cluster in the same Pulumi Stack
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.confluentcloud.SchemaRegistryDek;
 * import com.pulumi.confluentcloud.SchemaRegistryDekArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var myDek = new SchemaRegistryDek("myDek", SchemaRegistryDekArgs.builder()
 *             .kekName("my_kek")
 *             .subjectName("my_subject")
 *             .hardDelete(true)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Getting Started
 * 
 * The following end-to-end example might help to get started with field-level encryption:
 *   * field-level-encryption-schema
 * 
 * ## Import
 * 
 * You can import a Schema Registry Key by using the Schema Registry cluster ID, KEK name, Subject, Version and Algorithm in the format `&lt;Schema Registry Cluster Id&gt;/&lt;Schema Registry KEK Name&gt;/&lt;Subject&gt;/&lt;Version&gt;/&lt;Algorithm&gt;`, for example:
 * 
 * $ export IMPORT_SCHEMA_REGISTRY_API_KEY=&#34;&lt;schema_registry_api_key&gt;&#34;
 * 
 * $ export IMPORT_SCHEMA_REGISTRY_API_SECRET=&#34;&lt;schema_registry_api_secret&gt;&#34;
 * 
 * $ export IMPORT_SCHEMA_REGISTRY_REST_ENDPOINT=&#34;&lt;schema_registry_rest_endpoint&gt;&#34;
 * 
 * ```sh
 * $ pulumi import confluentcloud:index/schemaRegistryDek:SchemaRegistryDek my_dek lsrc-8wrx70/testkek/ts/1/AES256_GCM
 * ```
 * 
 * !&gt; **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
 * 
 */
@ResourceType(type="confluentcloud:index/schemaRegistryDek:SchemaRegistryDek")
public class SchemaRegistryDek extends com.pulumi.resources.CustomResource {
    /**
     * Accepted values are: `AES128_GCM`, `AES256_GCM`, and `AES256_SIV`. Defaults to `AES256_GCM`.
     * 
     */
    @Export(name="algorithm", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> algorithm;

    /**
     * @return Accepted values are: `AES128_GCM`, `AES256_GCM`, and `AES256_SIV`. Defaults to `AES256_GCM`.
     * 
     */
    public Output<Optional<String>> algorithm() {
        return Codegen.optional(this.algorithm);
    }
    /**
     * The Cluster API Credentials.
     * 
     */
    @Export(name="credentials", refs={SchemaRegistryDekCredentials.class}, tree="[0]")
    private Output</* @Nullable */ SchemaRegistryDekCredentials> credentials;

    /**
     * @return The Cluster API Credentials.
     * 
     */
    public Output<Optional<SchemaRegistryDekCredentials>> credentials() {
        return Codegen.optional(this.credentials);
    }
    /**
     * The encrypted key material for the DEK.
     * 
     */
    @Export(name="encryptedKeyMaterial", refs={String.class}, tree="[0]")
    private Output<String> encryptedKeyMaterial;

    /**
     * @return The encrypted key material for the DEK.
     * 
     */
    public Output<String> encryptedKeyMaterial() {
        return this.encryptedKeyMaterial;
    }
    /**
     * Controls whether a dek should be soft or hard deleted. Set it to `true` if you want to hard delete a schema registry dek
     * on destroy. Defaults to `false` (soft delete).
     * 
     */
    @Export(name="hardDelete", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> hardDelete;

    /**
     * @return Controls whether a dek should be soft or hard deleted. Set it to `true` if you want to hard delete a schema registry dek
     * on destroy. Defaults to `false` (soft delete).
     * 
     */
    public Output<Optional<Boolean>> hardDelete() {
        return Codegen.optional(this.hardDelete);
    }
    /**
     * The name of the KEK used to encrypt this DEK.
     * 
     */
    @Export(name="kekName", refs={String.class}, tree="[0]")
    private Output<String> kekName;

    /**
     * @return The name of the KEK used to encrypt this DEK.
     * 
     */
    public Output<String> kekName() {
        return this.kekName;
    }
    /**
     * (Optional String) The decrypted version of encrypted key material.
     * 
     */
    @Export(name="keyMaterial", refs={String.class}, tree="[0]")
    private Output<String> keyMaterial;

    /**
     * @return (Optional String) The decrypted version of encrypted key material.
     * 
     */
    public Output<String> keyMaterial() {
        return this.keyMaterial;
    }
    /**
     * The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
     * 
     */
    @Export(name="restEndpoint", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> restEndpoint;

    /**
     * @return The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
     * 
     */
    public Output<Optional<String>> restEndpoint() {
        return Codegen.optional(this.restEndpoint);
    }
    @Export(name="schemaRegistryCluster", refs={SchemaRegistryDekSchemaRegistryCluster.class}, tree="[0]")
    private Output</* @Nullable */ SchemaRegistryDekSchemaRegistryCluster> schemaRegistryCluster;

    public Output<Optional<SchemaRegistryDekSchemaRegistryCluster>> schemaRegistryCluster() {
        return Codegen.optional(this.schemaRegistryCluster);
    }
    /**
     * The subject for this DEK.
     * 
     */
    @Export(name="subjectName", refs={String.class}, tree="[0]")
    private Output<String> subjectName;

    /**
     * @return The subject for this DEK.
     * 
     */
    public Output<String> subjectName() {
        return this.subjectName;
    }
    /**
     * The version of this DEK. Defaults to `1`.
     * 
     */
    @Export(name="version", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> version;

    /**
     * @return The version of this DEK. Defaults to `1`.
     * 
     */
    public Output<Optional<Integer>> version() {
        return Codegen.optional(this.version);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SchemaRegistryDek(java.lang.String name) {
        this(name, SchemaRegistryDekArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SchemaRegistryDek(java.lang.String name, SchemaRegistryDekArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SchemaRegistryDek(java.lang.String name, SchemaRegistryDekArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("confluentcloud:index/schemaRegistryDek:SchemaRegistryDek", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private SchemaRegistryDek(java.lang.String name, Output<java.lang.String> id, @Nullable SchemaRegistryDekState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("confluentcloud:index/schemaRegistryDek:SchemaRegistryDek", name, state, makeResourceOptions(options, id), false);
    }

    private static SchemaRegistryDekArgs makeArgs(SchemaRegistryDekArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? SchemaRegistryDekArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "credentials"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SchemaRegistryDek get(java.lang.String name, Output<java.lang.String> id, @Nullable SchemaRegistryDekState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SchemaRegistryDek(name, id, state, options);
    }
}

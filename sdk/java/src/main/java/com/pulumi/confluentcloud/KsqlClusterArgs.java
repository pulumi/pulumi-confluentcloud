// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud;

import com.pulumi.confluentcloud.inputs.KsqlClusterCredentialIdentityArgs;
import com.pulumi.confluentcloud.inputs.KsqlClusterEnvironmentArgs;
import com.pulumi.confluentcloud.inputs.KsqlClusterKafkaClusterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KsqlClusterArgs extends com.pulumi.resources.ResourceArgs {

    public static final KsqlClusterArgs Empty = new KsqlClusterArgs();

    @Import(name="credentialIdentity", required=true)
    private Output<KsqlClusterCredentialIdentityArgs> credentialIdentity;

    public Output<KsqlClusterCredentialIdentityArgs> credentialIdentity() {
        return this.credentialIdentity;
    }

    /**
     * The number of Confluent Streaming Units (CSUs) for the ksqlDB cluster.
     * 
     */
    @Import(name="csu", required=true)
    private Output<Integer> csu;

    /**
     * @return The number of Confluent Streaming Units (CSUs) for the ksqlDB cluster.
     * 
     */
    public Output<Integer> csu() {
        return this.csu;
    }

    /**
     * The name of the ksqlDB cluster.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return The name of the ksqlDB cluster.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     * 
     */
    @Import(name="environment", required=true)
    private Output<KsqlClusterEnvironmentArgs> environment;

    /**
     * @return Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     * 
     */
    public Output<KsqlClusterEnvironmentArgs> environment() {
        return this.environment;
    }

    @Import(name="kafkaCluster", required=true)
    private Output<KsqlClusterKafkaClusterArgs> kafkaCluster;

    public Output<KsqlClusterKafkaClusterArgs> kafkaCluster() {
        return this.kafkaCluster;
    }

    /**
     * Controls whether the row data should be included in the processing log topic. Set it to `false` if you don&#39;t want to emit sensitive information to the processing log. Defaults to `true`.
     * 
     */
    @Import(name="useDetailedProcessingLog")
    private @Nullable Output<Boolean> useDetailedProcessingLog;

    /**
     * @return Controls whether the row data should be included in the processing log topic. Set it to `false` if you don&#39;t want to emit sensitive information to the processing log. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> useDetailedProcessingLog() {
        return Optional.ofNullable(this.useDetailedProcessingLog);
    }

    private KsqlClusterArgs() {}

    private KsqlClusterArgs(KsqlClusterArgs $) {
        this.credentialIdentity = $.credentialIdentity;
        this.csu = $.csu;
        this.displayName = $.displayName;
        this.environment = $.environment;
        this.kafkaCluster = $.kafkaCluster;
        this.useDetailedProcessingLog = $.useDetailedProcessingLog;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KsqlClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KsqlClusterArgs $;

        public Builder() {
            $ = new KsqlClusterArgs();
        }

        public Builder(KsqlClusterArgs defaults) {
            $ = new KsqlClusterArgs(Objects.requireNonNull(defaults));
        }

        public Builder credentialIdentity(Output<KsqlClusterCredentialIdentityArgs> credentialIdentity) {
            $.credentialIdentity = credentialIdentity;
            return this;
        }

        public Builder credentialIdentity(KsqlClusterCredentialIdentityArgs credentialIdentity) {
            return credentialIdentity(Output.of(credentialIdentity));
        }

        /**
         * @param csu The number of Confluent Streaming Units (CSUs) for the ksqlDB cluster.
         * 
         * @return builder
         * 
         */
        public Builder csu(Output<Integer> csu) {
            $.csu = csu;
            return this;
        }

        /**
         * @param csu The number of Confluent Streaming Units (CSUs) for the ksqlDB cluster.
         * 
         * @return builder
         * 
         */
        public Builder csu(Integer csu) {
            return csu(Output.of(csu));
        }

        /**
         * @param displayName The name of the ksqlDB cluster.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The name of the ksqlDB cluster.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param environment Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
         * 
         * @return builder
         * 
         */
        public Builder environment(Output<KsqlClusterEnvironmentArgs> environment) {
            $.environment = environment;
            return this;
        }

        /**
         * @param environment Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
         * 
         * @return builder
         * 
         */
        public Builder environment(KsqlClusterEnvironmentArgs environment) {
            return environment(Output.of(environment));
        }

        public Builder kafkaCluster(Output<KsqlClusterKafkaClusterArgs> kafkaCluster) {
            $.kafkaCluster = kafkaCluster;
            return this;
        }

        public Builder kafkaCluster(KsqlClusterKafkaClusterArgs kafkaCluster) {
            return kafkaCluster(Output.of(kafkaCluster));
        }

        /**
         * @param useDetailedProcessingLog Controls whether the row data should be included in the processing log topic. Set it to `false` if you don&#39;t want to emit sensitive information to the processing log. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder useDetailedProcessingLog(@Nullable Output<Boolean> useDetailedProcessingLog) {
            $.useDetailedProcessingLog = useDetailedProcessingLog;
            return this;
        }

        /**
         * @param useDetailedProcessingLog Controls whether the row data should be included in the processing log topic. Set it to `false` if you don&#39;t want to emit sensitive information to the processing log. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder useDetailedProcessingLog(Boolean useDetailedProcessingLog) {
            return useDetailedProcessingLog(Output.of(useDetailedProcessingLog));
        }

        public KsqlClusterArgs build() {
            if ($.credentialIdentity == null) {
                throw new MissingRequiredPropertyException("KsqlClusterArgs", "credentialIdentity");
            }
            if ($.csu == null) {
                throw new MissingRequiredPropertyException("KsqlClusterArgs", "csu");
            }
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("KsqlClusterArgs", "displayName");
            }
            if ($.environment == null) {
                throw new MissingRequiredPropertyException("KsqlClusterArgs", "environment");
            }
            if ($.kafkaCluster == null) {
                throw new MissingRequiredPropertyException("KsqlClusterArgs", "kafkaCluster");
            }
            return $;
        }
    }

}

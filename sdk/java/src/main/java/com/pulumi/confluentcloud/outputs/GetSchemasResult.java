// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.outputs;

import com.pulumi.confluentcloud.outputs.GetSchemasCredentials;
import com.pulumi.confluentcloud.outputs.GetSchemasFilter;
import com.pulumi.confluentcloud.outputs.GetSchemasSchema;
import com.pulumi.confluentcloud.outputs.GetSchemasSchemaRegistryCluster;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSchemasResult {
    private @Nullable GetSchemasCredentials credentials;
    private @Nullable GetSchemasFilter filter;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable String restEndpoint;
    private @Nullable GetSchemasSchemaRegistryCluster schemaRegistryCluster;
    /**
     * @return (List of Object) List of schemas. Each schema object exports the following attributes:
     * 
     */
    private List<GetSchemasSchema> schemas;

    private GetSchemasResult() {}
    public Optional<GetSchemasCredentials> credentials() {
        return Optional.ofNullable(this.credentials);
    }
    public Optional<GetSchemasFilter> filter() {
        return Optional.ofNullable(this.filter);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<String> restEndpoint() {
        return Optional.ofNullable(this.restEndpoint);
    }
    public Optional<GetSchemasSchemaRegistryCluster> schemaRegistryCluster() {
        return Optional.ofNullable(this.schemaRegistryCluster);
    }
    /**
     * @return (List of Object) List of schemas. Each schema object exports the following attributes:
     * 
     */
    public List<GetSchemasSchema> schemas() {
        return this.schemas;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSchemasResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable GetSchemasCredentials credentials;
        private @Nullable GetSchemasFilter filter;
        private String id;
        private @Nullable String restEndpoint;
        private @Nullable GetSchemasSchemaRegistryCluster schemaRegistryCluster;
        private List<GetSchemasSchema> schemas;
        public Builder() {}
        public Builder(GetSchemasResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.credentials = defaults.credentials;
    	      this.filter = defaults.filter;
    	      this.id = defaults.id;
    	      this.restEndpoint = defaults.restEndpoint;
    	      this.schemaRegistryCluster = defaults.schemaRegistryCluster;
    	      this.schemas = defaults.schemas;
        }

        @CustomType.Setter
        public Builder credentials(@Nullable GetSchemasCredentials credentials) {

            this.credentials = credentials;
            return this;
        }
        @CustomType.Setter
        public Builder filter(@Nullable GetSchemasFilter filter) {

            this.filter = filter;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSchemasResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder restEndpoint(@Nullable String restEndpoint) {

            this.restEndpoint = restEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder schemaRegistryCluster(@Nullable GetSchemasSchemaRegistryCluster schemaRegistryCluster) {

            this.schemaRegistryCluster = schemaRegistryCluster;
            return this;
        }
        @CustomType.Setter
        public Builder schemas(List<GetSchemasSchema> schemas) {
            if (schemas == null) {
              throw new MissingRequiredPropertyException("GetSchemasResult", "schemas");
            }
            this.schemas = schemas;
            return this;
        }
        public Builder schemas(GetSchemasSchema... schemas) {
            return schemas(List.of(schemas));
        }
        public GetSchemasResult build() {
            final var _resultValue = new GetSchemasResult();
            _resultValue.credentials = credentials;
            _resultValue.filter = filter;
            _resultValue.id = id;
            _resultValue.restEndpoint = restEndpoint;
            _resultValue.schemaRegistryCluster = schemaRegistryCluster;
            _resultValue.schemas = schemas;
            return _resultValue;
        }
    }
}

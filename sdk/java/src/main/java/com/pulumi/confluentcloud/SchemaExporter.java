// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud;

import com.pulumi.confluentcloud.SchemaExporterArgs;
import com.pulumi.confluentcloud.Utilities;
import com.pulumi.confluentcloud.inputs.SchemaExporterState;
import com.pulumi.confluentcloud.outputs.SchemaExporterCredentials;
import com.pulumi.confluentcloud.outputs.SchemaExporterDestinationSchemaRegistryCluster;
import com.pulumi.confluentcloud.outputs.SchemaExporterSchemaRegistryCluster;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
 * 
 * `confluentcloud.SchemaExporter` provides a Schema Exporter resource that enables creating, editing, and deleting Schema Exporters on Confluent Cloud.
 * 
 * ## Example Usage
 * 
 * ### Option #1: Manage multiple Schema Registry clusters in the same Pulumi Stack
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.confluentcloud.SchemaExporter;
 * import com.pulumi.confluentcloud.SchemaExporterArgs;
 * import com.pulumi.confluentcloud.inputs.SchemaExporterSchemaRegistryClusterArgs;
 * import com.pulumi.confluentcloud.inputs.SchemaExporterCredentialsArgs;
 * import com.pulumi.confluentcloud.inputs.SchemaExporterDestinationSchemaRegistryClusterArgs;
 * import com.pulumi.confluentcloud.inputs.SchemaExporterDestinationSchemaRegistryClusterCredentialsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var main = new SchemaExporter("main", SchemaExporterArgs.builder()
 *             .schemaRegistryCluster(SchemaExporterSchemaRegistryClusterArgs.builder()
 *                 .id(essentials.id())
 *                 .build())
 *             .restEndpoint(essentials.restEndpoint())
 *             .credentials(SchemaExporterCredentialsArgs.builder()
 *                 .key("<Schema Registry API Key for data.confluent_schema_registry_cluster.essentials>")
 *                 .secret("<Schema Registry API Secret for data.confluent_schema_registry_cluster.essentials>")
 *                 .build())
 *             .name("test-exporter")
 *             .subjects("foo")
 *             .destinationSchemaRegistryCluster(SchemaExporterDestinationSchemaRegistryClusterArgs.builder()
 *                 .restEndpoint(destination.restEndpoint())
 *                 .credentials(SchemaExporterDestinationSchemaRegistryClusterCredentialsArgs.builder()
 *                     .key("<Schema Registry API Key for data.confluent_schema_registry_cluster.destination>")
 *                     .secret("<Schema Registry API Secret for data.confluent_schema_registry_cluster.destination>")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### Option #2: Manage a single Schema Registry cluster in the same Pulumi Stack
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.confluentcloud.SchemaExporter;
 * import com.pulumi.confluentcloud.SchemaExporterArgs;
 * import com.pulumi.confluentcloud.inputs.SchemaExporterDestinationSchemaRegistryClusterArgs;
 * import com.pulumi.confluentcloud.inputs.SchemaExporterDestinationSchemaRegistryClusterCredentialsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var main = new SchemaExporter("main", SchemaExporterArgs.builder()
 *             .name("test-exporter")
 *             .subjects("foo")
 *             .destinationSchemaRegistryCluster(SchemaExporterDestinationSchemaRegistryClusterArgs.builder()
 *                 .restEndpoint(destination.restEndpoint())
 *                 .credentials(SchemaExporterDestinationSchemaRegistryClusterCredentialsArgs.builder()
 *                     .key("<Schema Registry API Key for data.confluent_schema_registry_cluster.destination>")
 *                     .secret("<Schema Registry API Secret for data.confluent_schema_registry_cluster.destination>")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### Option #3: Manage multiple Schema Registry clusters in the same Pulumi Stack using OAuth authentication
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.confluentcloud.SchemaExporter;
 * import com.pulumi.confluentcloud.SchemaExporterArgs;
 * import com.pulumi.confluentcloud.inputs.SchemaExporterSchemaRegistryClusterArgs;
 * import com.pulumi.confluentcloud.inputs.SchemaExporterDestinationSchemaRegistryClusterArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var main = new SchemaExporter("main", SchemaExporterArgs.builder()
 *             .schemaRegistryCluster(SchemaExporterSchemaRegistryClusterArgs.builder()
 *                 .id(essentials.id())
 *                 .build())
 *             .restEndpoint(essentials.restEndpoint())
 *             .name("test-exporter")
 *             .subjects("foo")
 *             .destinationSchemaRegistryCluster(SchemaExporterDestinationSchemaRegistryClusterArgs.builder()
 *                 .id(destination.id())
 *                 .restEndpoint(destination.restEndpoint())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * You can import a Schema Exporter by using the Schema Registry cluster ID, Schema Exporter name in the format `&lt;Schema Registry cluster ID&gt;/&lt;Schema Exporter name&gt;`, for example:
 * 
 * $ export IMPORT_SCHEMA_REGISTRY_ID=&#34;&lt;schema_registry_cluster_id&gt;&#34;
 * 
 * $ export IMPORT_SCHEMA_REGISTRY_API_KEY=&#34;&lt;schema_registry_api_key&gt;&#34;
 * 
 * $ export IMPORT_SCHEMA_REGISTRY_API_SECRET=&#34;&lt;schema_registry_api_secret&gt;&#34;
 * 
 * $ export IMPORT_SCHEMA_REGISTRY_REST_ENDPOINT=&#34;&lt;schema_registry_rest_endpoint&gt;&#34;
 * 
 * ```sh
 * $ pulumi import confluentcloud:index/schemaExporter:SchemaExporter main lsrc-8wrx70/test-exporter
 * ```
 * 
 * !&gt; **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
 * 
 */
@ResourceType(type="confluentcloud:index/schemaExporter:SchemaExporter")
public class SchemaExporter extends com.pulumi.resources.CustomResource {
    /**
     * Block for custom *nonsensitive* configuration properties:
     * 
     */
    @Export(name="config", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> config;

    /**
     * @return Block for custom *nonsensitive* configuration properties:
     * 
     */
    public Output<Map<String,String>> config() {
        return this.config;
    }
    /**
     * Customized context of the exporter if `context_type` is set to `CUSTOM`.
     * 
     */
    @Export(name="context", refs={String.class}, tree="[0]")
    private Output<String> context;

    /**
     * @return Customized context of the exporter if `context_type` is set to `CUSTOM`.
     * 
     */
    public Output<String> context() {
        return this.context;
    }
    /**
     * Context type of the exporter. Accepted values are: `CUSTOM`, `NONE` or `AUTO`. Defaults to `AUTO`.
     * 
     */
    @Export(name="contextType", refs={String.class}, tree="[0]")
    private Output<String> contextType;

    /**
     * @return Context type of the exporter. Accepted values are: `CUSTOM`, `NONE` or `AUTO`. Defaults to `AUTO`.
     * 
     */
    public Output<String> contextType() {
        return this.contextType;
    }
    /**
     * The Cluster API Credentials.
     * 
     */
    @Export(name="credentials", refs={SchemaExporterCredentials.class}, tree="[0]")
    private Output</* @Nullable */ SchemaExporterCredentials> credentials;

    /**
     * @return The Cluster API Credentials.
     * 
     */
    public Output<Optional<SchemaExporterCredentials>> credentials() {
        return Codegen.optional(this.credentials);
    }
    @Export(name="destinationSchemaRegistryCluster", refs={SchemaExporterDestinationSchemaRegistryCluster.class}, tree="[0]")
    private Output<SchemaExporterDestinationSchemaRegistryCluster> destinationSchemaRegistryCluster;

    public Output<SchemaExporterDestinationSchemaRegistryCluster> destinationSchemaRegistryCluster() {
        return this.destinationSchemaRegistryCluster;
    }
    /**
     * Name of the Schema Exporter.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the Schema Exporter.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The flag to control whether to reset the exporter when updating configs. Defaults to `false`.
     * 
     * &gt; **Note:** When using OAuth authentication in the provider block, `destination_schema_registry_cluster.id` is required and credentials blocks for both source and destination schema registry clusters must be removed.
     * 
     */
    @Export(name="resetOnUpdate", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> resetOnUpdate;

    /**
     * @return The flag to control whether to reset the exporter when updating configs. Defaults to `false`.
     * 
     * &gt; **Note:** When using OAuth authentication in the provider block, `destination_schema_registry_cluster.id` is required and credentials blocks for both source and destination schema registry clusters must be removed.
     * 
     */
    public Output<Optional<Boolean>> resetOnUpdate() {
        return Codegen.optional(this.resetOnUpdate);
    }
    /**
     * The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
     * 
     */
    @Export(name="restEndpoint", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> restEndpoint;

    /**
     * @return The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
     * 
     */
    public Output<Optional<String>> restEndpoint() {
        return Codegen.optional(this.restEndpoint);
    }
    @Export(name="schemaRegistryCluster", refs={SchemaExporterSchemaRegistryCluster.class}, tree="[0]")
    private Output</* @Nullable */ SchemaExporterSchemaRegistryCluster> schemaRegistryCluster;

    public Output<Optional<SchemaExporterSchemaRegistryCluster>> schemaRegistryCluster() {
        return Codegen.optional(this.schemaRegistryCluster);
    }
    /**
     * The status of the schema exporter. Accepted values are: `RUNNING` and `PAUSED`.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return The status of the schema exporter. Accepted values are: `RUNNING` and `PAUSED`.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * Format string for the subject name in the destination cluster, which may contain `${subject}` as a placeholder for the originating subject name. For example, `dc_${subject}` for the subject orders will map to the destination subject name `dc_orders`.
     * 
     */
    @Export(name="subjectRenameFormat", refs={String.class}, tree="[0]")
    private Output<String> subjectRenameFormat;

    /**
     * @return Format string for the subject name in the destination cluster, which may contain `${subject}` as a placeholder for the originating subject name. For example, `dc_${subject}` for the subject orders will map to the destination subject name `dc_orders`.
     * 
     */
    public Output<String> subjectRenameFormat() {
        return this.subjectRenameFormat;
    }
    /**
     * Name of each exporter subject.
     * 
     */
    @Export(name="subjects", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> subjects;

    /**
     * @return Name of each exporter subject.
     * 
     */
    public Output<List<String>> subjects() {
        return this.subjects;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SchemaExporter(java.lang.String name) {
        this(name, SchemaExporterArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SchemaExporter(java.lang.String name, SchemaExporterArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SchemaExporter(java.lang.String name, SchemaExporterArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("confluentcloud:index/schemaExporter:SchemaExporter", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private SchemaExporter(java.lang.String name, Output<java.lang.String> id, @Nullable SchemaExporterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("confluentcloud:index/schemaExporter:SchemaExporter", name, state, makeResourceOptions(options, id), false);
    }

    private static SchemaExporterArgs makeArgs(SchemaExporterArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? SchemaExporterArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "credentials"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SchemaExporter get(java.lang.String name, Output<java.lang.String> id, @Nullable SchemaExporterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SchemaExporter(name, id, state, options);
    }
}

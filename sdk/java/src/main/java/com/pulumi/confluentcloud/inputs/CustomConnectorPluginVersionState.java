// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.inputs;

import com.pulumi.confluentcloud.inputs.CustomConnectorPluginVersionConnectorClassArgs;
import com.pulumi.confluentcloud.inputs.CustomConnectorPluginVersionEnvironmentArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CustomConnectorPluginVersionState extends com.pulumi.resources.ResourceArgs {

    public static final CustomConnectorPluginVersionState Empty = new CustomConnectorPluginVersionState();

    /**
     * (Required String) The API Version of the schema version of the plugin version, for example, `ccpm/v1`.
     * 
     */
    @Import(name="apiVersion")
    private @Nullable Output<String> apiVersion;

    /**
     * @return (Required String) The API Version of the schema version of the plugin version, for example, `ccpm/v1`.
     * 
     */
    public Optional<Output<String>> apiVersion() {
        return Optional.ofNullable(this.apiVersion);
    }

    /**
     * Cloud provider where the Custom Connector Plugin Version archive is uploaded. Accepted values are: `AWS`, `AZURE`, `GCP`.
     * 
     */
    @Import(name="cloud")
    private @Nullable Output<String> cloud;

    /**
     * @return Cloud provider where the Custom Connector Plugin Version archive is uploaded. Accepted values are: `AWS`, `AZURE`, `GCP`.
     * 
     */
    public Optional<Output<String>> cloud() {
        return Optional.ofNullable(this.cloud);
    }

    /**
     * The Java class name or alias for the connector. You can get the connector class from the connector documentation provided by the developer.
     * 
     */
    @Import(name="connectorClasses")
    private @Nullable Output<List<CustomConnectorPluginVersionConnectorClassArgs>> connectorClasses;

    /**
     * @return The Java class name or alias for the connector. You can get the connector class from the connector documentation provided by the developer.
     * 
     */
    public Optional<Output<List<CustomConnectorPluginVersionConnectorClassArgs>>> connectorClasses() {
        return Optional.ofNullable(this.connectorClasses);
    }

    /**
     * The documentation link of the Custom Connector Plugin Version.
     * 
     */
    @Import(name="documentationLink")
    private @Nullable Output<String> documentationLink;

    /**
     * @return The documentation link of the Custom Connector Plugin Version.
     * 
     */
    public Optional<Output<String>> documentationLink() {
        return Optional.ofNullable(this.documentationLink);
    }

    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     * 
     */
    @Import(name="environment")
    private @Nullable Output<CustomConnectorPluginVersionEnvironmentArgs> environment;

    /**
     * @return Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     * 
     */
    public Optional<Output<CustomConnectorPluginVersionEnvironmentArgs>> environment() {
        return Optional.ofNullable(this.environment);
    }

    /**
     * The path to the Custom Connector Plugin Version archive to be uploaded. Accepted archive formats are: `.jar`, `.zip`.
     * 
     */
    @Import(name="filename")
    private @Nullable Output<String> filename;

    /**
     * @return The path to the Custom Connector Plugin Version archive to be uploaded. Accepted archive formats are: `.jar`, `.zip`.
     * 
     */
    public Optional<Output<String>> filename() {
        return Optional.ofNullable(this.filename);
    }

    /**
     * (Required String) The kind of the Plugin Version, for example, `CustomConnectPluginVersion`.
     * 
     */
    @Import(name="kind")
    private @Nullable Output<String> kind;

    /**
     * @return (Required String) The kind of the Plugin Version, for example, `CustomConnectPluginVersion`.
     * 
     */
    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * The ID of the plugin created using `confluentcloud.Plugin` resource, or through other ways.
     * 
     */
    @Import(name="pluginId")
    private @Nullable Output<String> pluginId;

    /**
     * @return The ID of the plugin created using `confluentcloud.Plugin` resource, or through other ways.
     * 
     */
    public Optional<Output<String>> pluginId() {
        return Optional.ofNullable(this.pluginId);
    }

    /**
     * The list of sensitive properties. A sensitive property is a connector configuration property that must be hidden after a user enters the property value when setting up the connector, for example, passwords, keys, and tokens. Refer to the developer documentation and add all required and optional sensitive properties that a user could potentially configure for the connector. Marking a property as sensitive ensures that these fields are handled appropriately within the Confluent infrastructure. This includes masking fields, for example in exception logging, and encrypting field values in the underlying data store. You must identify all sensitive properties. Failure to identify sensitive properties can result in the sensitive property value being stored in plain text rather than in encrypted format. Only add connector-specific sensitive properties. Kafka keys, passwords, and service account information should not be entered here.
     * 
     */
    @Import(name="sensitiveConfigProperties")
    private @Nullable Output<List<String>> sensitiveConfigProperties;

    /**
     * @return The list of sensitive properties. A sensitive property is a connector configuration property that must be hidden after a user enters the property value when setting up the connector, for example, passwords, keys, and tokens. Refer to the developer documentation and add all required and optional sensitive properties that a user could potentially configure for the connector. Marking a property as sensitive ensures that these fields are handled appropriately within the Confluent infrastructure. This includes masking fields, for example in exception logging, and encrypting field values in the underlying data store. You must identify all sensitive properties. Failure to identify sensitive properties can result in the sensitive property value being stored in plain text rather than in encrypted format. Only add connector-specific sensitive properties. Kafka keys, passwords, and service account information should not be entered here.
     * 
     */
    public Optional<Output<List<String>>> sensitiveConfigProperties() {
        return Optional.ofNullable(this.sensitiveConfigProperties);
    }

    /**
     * The version number of the plugin version we want to create. This must start with the character `v` and follow semantic versioning.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return The version number of the plugin version we want to create. This must start with the character `v` and follow semantic versioning.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private CustomConnectorPluginVersionState() {}

    private CustomConnectorPluginVersionState(CustomConnectorPluginVersionState $) {
        this.apiVersion = $.apiVersion;
        this.cloud = $.cloud;
        this.connectorClasses = $.connectorClasses;
        this.documentationLink = $.documentationLink;
        this.environment = $.environment;
        this.filename = $.filename;
        this.kind = $.kind;
        this.pluginId = $.pluginId;
        this.sensitiveConfigProperties = $.sensitiveConfigProperties;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomConnectorPluginVersionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomConnectorPluginVersionState $;

        public Builder() {
            $ = new CustomConnectorPluginVersionState();
        }

        public Builder(CustomConnectorPluginVersionState defaults) {
            $ = new CustomConnectorPluginVersionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiVersion (Required String) The API Version of the schema version of the plugin version, for example, `ccpm/v1`.
         * 
         * @return builder
         * 
         */
        public Builder apiVersion(@Nullable Output<String> apiVersion) {
            $.apiVersion = apiVersion;
            return this;
        }

        /**
         * @param apiVersion (Required String) The API Version of the schema version of the plugin version, for example, `ccpm/v1`.
         * 
         * @return builder
         * 
         */
        public Builder apiVersion(String apiVersion) {
            return apiVersion(Output.of(apiVersion));
        }

        /**
         * @param cloud Cloud provider where the Custom Connector Plugin Version archive is uploaded. Accepted values are: `AWS`, `AZURE`, `GCP`.
         * 
         * @return builder
         * 
         */
        public Builder cloud(@Nullable Output<String> cloud) {
            $.cloud = cloud;
            return this;
        }

        /**
         * @param cloud Cloud provider where the Custom Connector Plugin Version archive is uploaded. Accepted values are: `AWS`, `AZURE`, `GCP`.
         * 
         * @return builder
         * 
         */
        public Builder cloud(String cloud) {
            return cloud(Output.of(cloud));
        }

        /**
         * @param connectorClasses The Java class name or alias for the connector. You can get the connector class from the connector documentation provided by the developer.
         * 
         * @return builder
         * 
         */
        public Builder connectorClasses(@Nullable Output<List<CustomConnectorPluginVersionConnectorClassArgs>> connectorClasses) {
            $.connectorClasses = connectorClasses;
            return this;
        }

        /**
         * @param connectorClasses The Java class name or alias for the connector. You can get the connector class from the connector documentation provided by the developer.
         * 
         * @return builder
         * 
         */
        public Builder connectorClasses(List<CustomConnectorPluginVersionConnectorClassArgs> connectorClasses) {
            return connectorClasses(Output.of(connectorClasses));
        }

        /**
         * @param connectorClasses The Java class name or alias for the connector. You can get the connector class from the connector documentation provided by the developer.
         * 
         * @return builder
         * 
         */
        public Builder connectorClasses(CustomConnectorPluginVersionConnectorClassArgs... connectorClasses) {
            return connectorClasses(List.of(connectorClasses));
        }

        /**
         * @param documentationLink The documentation link of the Custom Connector Plugin Version.
         * 
         * @return builder
         * 
         */
        public Builder documentationLink(@Nullable Output<String> documentationLink) {
            $.documentationLink = documentationLink;
            return this;
        }

        /**
         * @param documentationLink The documentation link of the Custom Connector Plugin Version.
         * 
         * @return builder
         * 
         */
        public Builder documentationLink(String documentationLink) {
            return documentationLink(Output.of(documentationLink));
        }

        /**
         * @param environment Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
         * 
         * @return builder
         * 
         */
        public Builder environment(@Nullable Output<CustomConnectorPluginVersionEnvironmentArgs> environment) {
            $.environment = environment;
            return this;
        }

        /**
         * @param environment Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
         * 
         * @return builder
         * 
         */
        public Builder environment(CustomConnectorPluginVersionEnvironmentArgs environment) {
            return environment(Output.of(environment));
        }

        /**
         * @param filename The path to the Custom Connector Plugin Version archive to be uploaded. Accepted archive formats are: `.jar`, `.zip`.
         * 
         * @return builder
         * 
         */
        public Builder filename(@Nullable Output<String> filename) {
            $.filename = filename;
            return this;
        }

        /**
         * @param filename The path to the Custom Connector Plugin Version archive to be uploaded. Accepted archive formats are: `.jar`, `.zip`.
         * 
         * @return builder
         * 
         */
        public Builder filename(String filename) {
            return filename(Output.of(filename));
        }

        /**
         * @param kind (Required String) The kind of the Plugin Version, for example, `CustomConnectPluginVersion`.
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind (Required String) The kind of the Plugin Version, for example, `CustomConnectPluginVersion`.
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param pluginId The ID of the plugin created using `confluentcloud.Plugin` resource, or through other ways.
         * 
         * @return builder
         * 
         */
        public Builder pluginId(@Nullable Output<String> pluginId) {
            $.pluginId = pluginId;
            return this;
        }

        /**
         * @param pluginId The ID of the plugin created using `confluentcloud.Plugin` resource, or through other ways.
         * 
         * @return builder
         * 
         */
        public Builder pluginId(String pluginId) {
            return pluginId(Output.of(pluginId));
        }

        /**
         * @param sensitiveConfigProperties The list of sensitive properties. A sensitive property is a connector configuration property that must be hidden after a user enters the property value when setting up the connector, for example, passwords, keys, and tokens. Refer to the developer documentation and add all required and optional sensitive properties that a user could potentially configure for the connector. Marking a property as sensitive ensures that these fields are handled appropriately within the Confluent infrastructure. This includes masking fields, for example in exception logging, and encrypting field values in the underlying data store. You must identify all sensitive properties. Failure to identify sensitive properties can result in the sensitive property value being stored in plain text rather than in encrypted format. Only add connector-specific sensitive properties. Kafka keys, passwords, and service account information should not be entered here.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveConfigProperties(@Nullable Output<List<String>> sensitiveConfigProperties) {
            $.sensitiveConfigProperties = sensitiveConfigProperties;
            return this;
        }

        /**
         * @param sensitiveConfigProperties The list of sensitive properties. A sensitive property is a connector configuration property that must be hidden after a user enters the property value when setting up the connector, for example, passwords, keys, and tokens. Refer to the developer documentation and add all required and optional sensitive properties that a user could potentially configure for the connector. Marking a property as sensitive ensures that these fields are handled appropriately within the Confluent infrastructure. This includes masking fields, for example in exception logging, and encrypting field values in the underlying data store. You must identify all sensitive properties. Failure to identify sensitive properties can result in the sensitive property value being stored in plain text rather than in encrypted format. Only add connector-specific sensitive properties. Kafka keys, passwords, and service account information should not be entered here.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveConfigProperties(List<String> sensitiveConfigProperties) {
            return sensitiveConfigProperties(Output.of(sensitiveConfigProperties));
        }

        /**
         * @param sensitiveConfigProperties The list of sensitive properties. A sensitive property is a connector configuration property that must be hidden after a user enters the property value when setting up the connector, for example, passwords, keys, and tokens. Refer to the developer documentation and add all required and optional sensitive properties that a user could potentially configure for the connector. Marking a property as sensitive ensures that these fields are handled appropriately within the Confluent infrastructure. This includes masking fields, for example in exception logging, and encrypting field values in the underlying data store. You must identify all sensitive properties. Failure to identify sensitive properties can result in the sensitive property value being stored in plain text rather than in encrypted format. Only add connector-specific sensitive properties. Kafka keys, passwords, and service account information should not be entered here.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveConfigProperties(String... sensitiveConfigProperties) {
            return sensitiveConfigProperties(List.of(sensitiveConfigProperties));
        }

        /**
         * @param version The version number of the plugin version we want to create. This must start with the character `v` and follow semantic versioning.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The version number of the plugin version we want to create. This must start with the character `v` and follow semantic versioning.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public CustomConnectorPluginVersionState build() {
            return $;
        }
    }

}

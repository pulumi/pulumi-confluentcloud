// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetSchemaRulesetDomainRule {
    /**
     * @return (Optional String) An optional description.
     * 
     */
    private String doc;
    /**
     * @return (Optional String) The body of the rule, which is optional.
     * 
     */
    private String expr;
    /**
     * @return (Optional String) Either `CONDITION` or `TRANSFORM`.
     * 
     */
    private String kind;
    /**
     * @return (Optional String) The mode of the rule.
     * 
     */
    private String mode;
    /**
     * @return (Optional String) A user-defined name that can be used to reference the rule.
     * 
     */
    private String name;
    /**
     * @return (Optional String) An optional action to execute if the rule fails, otherwise the built-in action type ERROR is used. For UPDOWN and WRITEREAD rules, one can specify two actions separated by commas, as mentioned above.
     * 
     */
    private String onFailure;
    /**
     * @return (Optional String) An optional action to execute if the rule succeeds, otherwise the built-in action type NONE is used. For UPDOWN and WRITEREAD rules, one can specify two actions separated by commas, such as “NONE,ERROR” for a WRITEREAD rule. In this case NONE applies to WRITE and ERROR applies to READ.
     * 
     */
    private String onSuccess;
    /**
     * @return (Optional Configuration Block) A set of static parameters for the rule, which is optional. These are key-value pairs that are passed to the rule.
     * 
     */
    private Map<String,String> params;
    /**
     * @return (Optional String List) The tags to which the rule applies, if any.
     * 
     */
    private List<String> tags;
    /**
     * @return (Optional String) The type of rule, which invokes a specific rule executor, such as Google Common Expression Language (CEL) or JSONata.
     * 
     */
    private String type;

    private GetSchemaRulesetDomainRule() {}
    /**
     * @return (Optional String) An optional description.
     * 
     */
    public String doc() {
        return this.doc;
    }
    /**
     * @return (Optional String) The body of the rule, which is optional.
     * 
     */
    public String expr() {
        return this.expr;
    }
    /**
     * @return (Optional String) Either `CONDITION` or `TRANSFORM`.
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return (Optional String) The mode of the rule.
     * 
     */
    public String mode() {
        return this.mode;
    }
    /**
     * @return (Optional String) A user-defined name that can be used to reference the rule.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return (Optional String) An optional action to execute if the rule fails, otherwise the built-in action type ERROR is used. For UPDOWN and WRITEREAD rules, one can specify two actions separated by commas, as mentioned above.
     * 
     */
    public String onFailure() {
        return this.onFailure;
    }
    /**
     * @return (Optional String) An optional action to execute if the rule succeeds, otherwise the built-in action type NONE is used. For UPDOWN and WRITEREAD rules, one can specify two actions separated by commas, such as “NONE,ERROR” for a WRITEREAD rule. In this case NONE applies to WRITE and ERROR applies to READ.
     * 
     */
    public String onSuccess() {
        return this.onSuccess;
    }
    /**
     * @return (Optional Configuration Block) A set of static parameters for the rule, which is optional. These are key-value pairs that are passed to the rule.
     * 
     */
    public Map<String,String> params() {
        return this.params;
    }
    /**
     * @return (Optional String List) The tags to which the rule applies, if any.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return (Optional String) The type of rule, which invokes a specific rule executor, such as Google Common Expression Language (CEL) or JSONata.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSchemaRulesetDomainRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String doc;
        private String expr;
        private String kind;
        private String mode;
        private String name;
        private String onFailure;
        private String onSuccess;
        private Map<String,String> params;
        private List<String> tags;
        private String type;
        public Builder() {}
        public Builder(GetSchemaRulesetDomainRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.doc = defaults.doc;
    	      this.expr = defaults.expr;
    	      this.kind = defaults.kind;
    	      this.mode = defaults.mode;
    	      this.name = defaults.name;
    	      this.onFailure = defaults.onFailure;
    	      this.onSuccess = defaults.onSuccess;
    	      this.params = defaults.params;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder doc(String doc) {
            if (doc == null) {
              throw new MissingRequiredPropertyException("GetSchemaRulesetDomainRule", "doc");
            }
            this.doc = doc;
            return this;
        }
        @CustomType.Setter
        public Builder expr(String expr) {
            if (expr == null) {
              throw new MissingRequiredPropertyException("GetSchemaRulesetDomainRule", "expr");
            }
            this.expr = expr;
            return this;
        }
        @CustomType.Setter
        public Builder kind(String kind) {
            if (kind == null) {
              throw new MissingRequiredPropertyException("GetSchemaRulesetDomainRule", "kind");
            }
            this.kind = kind;
            return this;
        }
        @CustomType.Setter
        public Builder mode(String mode) {
            if (mode == null) {
              throw new MissingRequiredPropertyException("GetSchemaRulesetDomainRule", "mode");
            }
            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSchemaRulesetDomainRule", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder onFailure(String onFailure) {
            if (onFailure == null) {
              throw new MissingRequiredPropertyException("GetSchemaRulesetDomainRule", "onFailure");
            }
            this.onFailure = onFailure;
            return this;
        }
        @CustomType.Setter
        public Builder onSuccess(String onSuccess) {
            if (onSuccess == null) {
              throw new MissingRequiredPropertyException("GetSchemaRulesetDomainRule", "onSuccess");
            }
            this.onSuccess = onSuccess;
            return this;
        }
        @CustomType.Setter
        public Builder params(Map<String,String> params) {
            if (params == null) {
              throw new MissingRequiredPropertyException("GetSchemaRulesetDomainRule", "params");
            }
            this.params = params;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetSchemaRulesetDomainRule", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetSchemaRulesetDomainRule", "type");
            }
            this.type = type;
            return this;
        }
        public GetSchemaRulesetDomainRule build() {
            final var _resultValue = new GetSchemaRulesetDomainRule();
            _resultValue.doc = doc;
            _resultValue.expr = expr;
            _resultValue.kind = kind;
            _resultValue.mode = mode;
            _resultValue.name = name;
            _resultValue.onFailure = onFailure;
            _resultValue.onSuccess = onSuccess;
            _resultValue.params = params;
            _resultValue.tags = tags;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}

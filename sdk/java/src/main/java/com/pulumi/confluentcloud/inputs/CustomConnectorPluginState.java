// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CustomConnectorPluginState extends com.pulumi.resources.ResourceArgs {

    public static final CustomConnectorPluginState Empty = new CustomConnectorPluginState();

    /**
     * Cloud provider where the Custom Connector Plugin archive is uploaded. Defaults to `AWS`. Accepted values are: `AWS`, `AZURE`.
     * 
     */
    @Import(name="cloud")
    private @Nullable Output<String> cloud;

    /**
     * @return Cloud provider where the Custom Connector Plugin archive is uploaded. Defaults to `AWS`. Accepted values are: `AWS`, `AZURE`.
     * 
     */
    public Optional<Output<String>> cloud() {
        return Optional.ofNullable(this.cloud);
    }

    /**
     * The Java class or alias for the connector. You can get the connector class from the connector documentation provided by the developer.
     * 
     */
    @Import(name="connectorClass")
    private @Nullable Output<String> connectorClass;

    /**
     * @return The Java class or alias for the connector. You can get the connector class from the connector documentation provided by the developer.
     * 
     */
    public Optional<Output<String>> connectorClass() {
        return Optional.ofNullable(this.connectorClass);
    }

    /**
     * The type of the Custom Connector Plugin. Accepted values are: `SOURCE`, `SINK`.
     * 
     */
    @Import(name="connectorType")
    private @Nullable Output<String> connectorType;

    /**
     * @return The type of the Custom Connector Plugin. Accepted values are: `SOURCE`, `SINK`.
     * 
     */
    public Optional<Output<String>> connectorType() {
        return Optional.ofNullable(this.connectorType);
    }

    /**
     * The description of the Custom Connector Plugin.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the Custom Connector Plugin.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the Custom Connector Plugin.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The name of the Custom Connector Plugin.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The documentation link of the Custom Connector Plugin.
     * 
     */
    @Import(name="documentationLink")
    private @Nullable Output<String> documentationLink;

    /**
     * @return The documentation link of the Custom Connector Plugin.
     * 
     */
    public Optional<Output<String>> documentationLink() {
        return Optional.ofNullable(this.documentationLink);
    }

    /**
     * The path to the Custom Connector Plugin archive to be uploaded. Accepted archive formats are: `.jar`, `.zip`.
     * 
     */
    @Import(name="filename")
    private @Nullable Output<String> filename;

    /**
     * @return The path to the Custom Connector Plugin archive to be uploaded. Accepted archive formats are: `.jar`, `.zip`.
     * 
     */
    public Optional<Output<String>> filename() {
        return Optional.ofNullable(this.filename);
    }

    /**
     * The list of sensitive properties. A sensitive property is a connector configuration property that must be hidden after a user enters the property value when setting up the connector, for example, passwords, keys, and tokens. Refer to the developer documentation and add all required and optional sensitive properties that a user could potentially configure for the connector. Marking a property as sensitive ensures that these fields are handled appropriately within the Confluent infrastructure. This includes masking fields, for example in exception logging, and encrypting field values in the underlying data store. You must identify all sensitive properties. Failure to identify sensitive properties can result in the sensitive property value being stored in plain text rather than in encrypted format. Only add connector-specific sensitive properties. Kafka keys, passwords, and service account information should not be entered here.
     * 
     */
    @Import(name="sensitiveConfigProperties")
    private @Nullable Output<List<String>> sensitiveConfigProperties;

    /**
     * @return The list of sensitive properties. A sensitive property is a connector configuration property that must be hidden after a user enters the property value when setting up the connector, for example, passwords, keys, and tokens. Refer to the developer documentation and add all required and optional sensitive properties that a user could potentially configure for the connector. Marking a property as sensitive ensures that these fields are handled appropriately within the Confluent infrastructure. This includes masking fields, for example in exception logging, and encrypting field values in the underlying data store. You must identify all sensitive properties. Failure to identify sensitive properties can result in the sensitive property value being stored in plain text rather than in encrypted format. Only add connector-specific sensitive properties. Kafka keys, passwords, and service account information should not be entered here.
     * 
     */
    public Optional<Output<List<String>>> sensitiveConfigProperties() {
        return Optional.ofNullable(this.sensitiveConfigProperties);
    }

    private CustomConnectorPluginState() {}

    private CustomConnectorPluginState(CustomConnectorPluginState $) {
        this.cloud = $.cloud;
        this.connectorClass = $.connectorClass;
        this.connectorType = $.connectorType;
        this.description = $.description;
        this.displayName = $.displayName;
        this.documentationLink = $.documentationLink;
        this.filename = $.filename;
        this.sensitiveConfigProperties = $.sensitiveConfigProperties;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomConnectorPluginState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomConnectorPluginState $;

        public Builder() {
            $ = new CustomConnectorPluginState();
        }

        public Builder(CustomConnectorPluginState defaults) {
            $ = new CustomConnectorPluginState(Objects.requireNonNull(defaults));
        }

        /**
         * @param cloud Cloud provider where the Custom Connector Plugin archive is uploaded. Defaults to `AWS`. Accepted values are: `AWS`, `AZURE`.
         * 
         * @return builder
         * 
         */
        public Builder cloud(@Nullable Output<String> cloud) {
            $.cloud = cloud;
            return this;
        }

        /**
         * @param cloud Cloud provider where the Custom Connector Plugin archive is uploaded. Defaults to `AWS`. Accepted values are: `AWS`, `AZURE`.
         * 
         * @return builder
         * 
         */
        public Builder cloud(String cloud) {
            return cloud(Output.of(cloud));
        }

        /**
         * @param connectorClass The Java class or alias for the connector. You can get the connector class from the connector documentation provided by the developer.
         * 
         * @return builder
         * 
         */
        public Builder connectorClass(@Nullable Output<String> connectorClass) {
            $.connectorClass = connectorClass;
            return this;
        }

        /**
         * @param connectorClass The Java class or alias for the connector. You can get the connector class from the connector documentation provided by the developer.
         * 
         * @return builder
         * 
         */
        public Builder connectorClass(String connectorClass) {
            return connectorClass(Output.of(connectorClass));
        }

        /**
         * @param connectorType The type of the Custom Connector Plugin. Accepted values are: `SOURCE`, `SINK`.
         * 
         * @return builder
         * 
         */
        public Builder connectorType(@Nullable Output<String> connectorType) {
            $.connectorType = connectorType;
            return this;
        }

        /**
         * @param connectorType The type of the Custom Connector Plugin. Accepted values are: `SOURCE`, `SINK`.
         * 
         * @return builder
         * 
         */
        public Builder connectorType(String connectorType) {
            return connectorType(Output.of(connectorType));
        }

        /**
         * @param description The description of the Custom Connector Plugin.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the Custom Connector Plugin.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName The name of the Custom Connector Plugin.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The name of the Custom Connector Plugin.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param documentationLink The documentation link of the Custom Connector Plugin.
         * 
         * @return builder
         * 
         */
        public Builder documentationLink(@Nullable Output<String> documentationLink) {
            $.documentationLink = documentationLink;
            return this;
        }

        /**
         * @param documentationLink The documentation link of the Custom Connector Plugin.
         * 
         * @return builder
         * 
         */
        public Builder documentationLink(String documentationLink) {
            return documentationLink(Output.of(documentationLink));
        }

        /**
         * @param filename The path to the Custom Connector Plugin archive to be uploaded. Accepted archive formats are: `.jar`, `.zip`.
         * 
         * @return builder
         * 
         */
        public Builder filename(@Nullable Output<String> filename) {
            $.filename = filename;
            return this;
        }

        /**
         * @param filename The path to the Custom Connector Plugin archive to be uploaded. Accepted archive formats are: `.jar`, `.zip`.
         * 
         * @return builder
         * 
         */
        public Builder filename(String filename) {
            return filename(Output.of(filename));
        }

        /**
         * @param sensitiveConfigProperties The list of sensitive properties. A sensitive property is a connector configuration property that must be hidden after a user enters the property value when setting up the connector, for example, passwords, keys, and tokens. Refer to the developer documentation and add all required and optional sensitive properties that a user could potentially configure for the connector. Marking a property as sensitive ensures that these fields are handled appropriately within the Confluent infrastructure. This includes masking fields, for example in exception logging, and encrypting field values in the underlying data store. You must identify all sensitive properties. Failure to identify sensitive properties can result in the sensitive property value being stored in plain text rather than in encrypted format. Only add connector-specific sensitive properties. Kafka keys, passwords, and service account information should not be entered here.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveConfigProperties(@Nullable Output<List<String>> sensitiveConfigProperties) {
            $.sensitiveConfigProperties = sensitiveConfigProperties;
            return this;
        }

        /**
         * @param sensitiveConfigProperties The list of sensitive properties. A sensitive property is a connector configuration property that must be hidden after a user enters the property value when setting up the connector, for example, passwords, keys, and tokens. Refer to the developer documentation and add all required and optional sensitive properties that a user could potentially configure for the connector. Marking a property as sensitive ensures that these fields are handled appropriately within the Confluent infrastructure. This includes masking fields, for example in exception logging, and encrypting field values in the underlying data store. You must identify all sensitive properties. Failure to identify sensitive properties can result in the sensitive property value being stored in plain text rather than in encrypted format. Only add connector-specific sensitive properties. Kafka keys, passwords, and service account information should not be entered here.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveConfigProperties(List<String> sensitiveConfigProperties) {
            return sensitiveConfigProperties(Output.of(sensitiveConfigProperties));
        }

        /**
         * @param sensitiveConfigProperties The list of sensitive properties. A sensitive property is a connector configuration property that must be hidden after a user enters the property value when setting up the connector, for example, passwords, keys, and tokens. Refer to the developer documentation and add all required and optional sensitive properties that a user could potentially configure for the connector. Marking a property as sensitive ensures that these fields are handled appropriately within the Confluent infrastructure. This includes masking fields, for example in exception logging, and encrypting field values in the underlying data store. You must identify all sensitive properties. Failure to identify sensitive properties can result in the sensitive property value being stored in plain text rather than in encrypted format. Only add connector-specific sensitive properties. Kafka keys, passwords, and service account information should not be entered here.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveConfigProperties(String... sensitiveConfigProperties) {
            return sensitiveConfigProperties(List.of(sensitiveConfigProperties));
        }

        public CustomConnectorPluginState build() {
            return $;
        }
    }

}

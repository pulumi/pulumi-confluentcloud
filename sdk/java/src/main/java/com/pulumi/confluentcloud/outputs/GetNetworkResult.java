// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.outputs;

import com.pulumi.confluentcloud.outputs.GetNetworkAw;
import com.pulumi.confluentcloud.outputs.GetNetworkAzure;
import com.pulumi.confluentcloud.outputs.GetNetworkDnsConfig;
import com.pulumi.confluentcloud.outputs.GetNetworkEnvironment;
import com.pulumi.confluentcloud.outputs.GetNetworkGcp;
import com.pulumi.confluentcloud.outputs.GetNetworkZoneInfo;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetNetworkResult {
    /**
     * @return (Optional Configuration Block) The AWS-specific network details if available. It supports the following:
     * 
     */
    private List<GetNetworkAw> aws;
    /**
     * @return (Optional Configuration Block) The Azure-specific network details if available. It supports the following:
     * 
     */
    private List<GetNetworkAzure> azures;
    /**
     * @return (Required String) The IPv4 CIDR block to be used for the network. Must be `/27`. Required for VPC peering and AWS TransitGateway.
     * 
     */
    private String cidr;
    /**
     * @return (Required String) The cloud service provider in which the network exists. Accepted values are: `AWS`, `AZURE`, and `GCP`.
     * 
     */
    private String cloud;
    /**
     * @return (Required List of String) The list of connection types that may be used with the network. Accepted connection types are: `PEERING`, `TRANSITGATEWAY`, and `PRIVATELINK`.
     * 
     */
    private List<String> connectionTypes;
    /**
     * @return (Required String) The name of the Network.
     * 
     */
    private String displayName;
    /**
     * @return (Optional Configuration Block) Network DNS config. It applies only to the PRIVATELINK network connection type. It supports the following:
     * 
     */
    private List<GetNetworkDnsConfig> dnsConfigs;
    private String dnsDomain;
    private GetNetworkEnvironment environment;
    /**
     * @return (Optional Configuration Block) The GCP-specific network details if available. It supports the following:
     * 
     */
    private List<GetNetworkGcp> gcps;
    /**
     * @return (Required String) The ID of the Network, for example, `n-abc123`.
     * 
     */
    private String id;
    /**
     * @return (Required String) The cloud provider region where the network exists.
     * 
     */
    private String region;
    /**
     * @return (Required String) The reserved IPv4 CIDR block to be used for the network. Must be `/24`. If not specified, Confluent Cloud Network uses `172.20.255.0/24`.
     * 
     */
    private String reservedCidr;
    /**
     * @return (Required String) The Confluent Resource Name of the Network.
     * 
     */
    private String resourceName;
    private Map<String,String> zonalSubdomains;
    /**
     * @return (Required Configuration Blocks) Each item represents information related to a single zone. It supports the following:
     * 
     */
    private List<GetNetworkZoneInfo> zoneInfos;
    /**
     * @return (Optional List of String) The 3 availability zones for this network. They can optionally be specified for AWS networks
     * used with PrivateLink, for GCP networks used with Private Service Connect, and for AWS and GCP
     * networks used with Peering. Otherwise, they are automatically chosen by Confluent Cloud.
     * On AWS, zones are AWS [AZ IDs](https://docs.aws.amazon.com/ram/latest/userguide/working-with-az-ids.html), for example, `use1-az3`.
     * On GCP, zones are GCP [zones](https://cloud.google.com/compute/docs/regions-zones), for example, `us-central1-c`.
     * On Azure, zones are Confluent-chosen names (for example, `1`, `2`, `3`) since Azure does not have universal zone identifiers.
     * 
     */
    private List<String> zones;

    private GetNetworkResult() {}
    /**
     * @return (Optional Configuration Block) The AWS-specific network details if available. It supports the following:
     * 
     */
    public List<GetNetworkAw> aws() {
        return this.aws;
    }
    /**
     * @return (Optional Configuration Block) The Azure-specific network details if available. It supports the following:
     * 
     */
    public List<GetNetworkAzure> azures() {
        return this.azures;
    }
    /**
     * @return (Required String) The IPv4 CIDR block to be used for the network. Must be `/27`. Required for VPC peering and AWS TransitGateway.
     * 
     */
    public String cidr() {
        return this.cidr;
    }
    /**
     * @return (Required String) The cloud service provider in which the network exists. Accepted values are: `AWS`, `AZURE`, and `GCP`.
     * 
     */
    public String cloud() {
        return this.cloud;
    }
    /**
     * @return (Required List of String) The list of connection types that may be used with the network. Accepted connection types are: `PEERING`, `TRANSITGATEWAY`, and `PRIVATELINK`.
     * 
     */
    public List<String> connectionTypes() {
        return this.connectionTypes;
    }
    /**
     * @return (Required String) The name of the Network.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return (Optional Configuration Block) Network DNS config. It applies only to the PRIVATELINK network connection type. It supports the following:
     * 
     */
    public List<GetNetworkDnsConfig> dnsConfigs() {
        return this.dnsConfigs;
    }
    public String dnsDomain() {
        return this.dnsDomain;
    }
    public GetNetworkEnvironment environment() {
        return this.environment;
    }
    /**
     * @return (Optional Configuration Block) The GCP-specific network details if available. It supports the following:
     * 
     */
    public List<GetNetworkGcp> gcps() {
        return this.gcps;
    }
    /**
     * @return (Required String) The ID of the Network, for example, `n-abc123`.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return (Required String) The cloud provider region where the network exists.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return (Required String) The reserved IPv4 CIDR block to be used for the network. Must be `/24`. If not specified, Confluent Cloud Network uses `172.20.255.0/24`.
     * 
     */
    public String reservedCidr() {
        return this.reservedCidr;
    }
    /**
     * @return (Required String) The Confluent Resource Name of the Network.
     * 
     */
    public String resourceName() {
        return this.resourceName;
    }
    public Map<String,String> zonalSubdomains() {
        return this.zonalSubdomains;
    }
    /**
     * @return (Required Configuration Blocks) Each item represents information related to a single zone. It supports the following:
     * 
     */
    public List<GetNetworkZoneInfo> zoneInfos() {
        return this.zoneInfos;
    }
    /**
     * @return (Optional List of String) The 3 availability zones for this network. They can optionally be specified for AWS networks
     * used with PrivateLink, for GCP networks used with Private Service Connect, and for AWS and GCP
     * networks used with Peering. Otherwise, they are automatically chosen by Confluent Cloud.
     * On AWS, zones are AWS [AZ IDs](https://docs.aws.amazon.com/ram/latest/userguide/working-with-az-ids.html), for example, `use1-az3`.
     * On GCP, zones are GCP [zones](https://cloud.google.com/compute/docs/regions-zones), for example, `us-central1-c`.
     * On Azure, zones are Confluent-chosen names (for example, `1`, `2`, `3`) since Azure does not have universal zone identifiers.
     * 
     */
    public List<String> zones() {
        return this.zones;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetNetworkAw> aws;
        private List<GetNetworkAzure> azures;
        private String cidr;
        private String cloud;
        private List<String> connectionTypes;
        private String displayName;
        private List<GetNetworkDnsConfig> dnsConfigs;
        private String dnsDomain;
        private GetNetworkEnvironment environment;
        private List<GetNetworkGcp> gcps;
        private String id;
        private String region;
        private String reservedCidr;
        private String resourceName;
        private Map<String,String> zonalSubdomains;
        private List<GetNetworkZoneInfo> zoneInfos;
        private List<String> zones;
        public Builder() {}
        public Builder(GetNetworkResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aws = defaults.aws;
    	      this.azures = defaults.azures;
    	      this.cidr = defaults.cidr;
    	      this.cloud = defaults.cloud;
    	      this.connectionTypes = defaults.connectionTypes;
    	      this.displayName = defaults.displayName;
    	      this.dnsConfigs = defaults.dnsConfigs;
    	      this.dnsDomain = defaults.dnsDomain;
    	      this.environment = defaults.environment;
    	      this.gcps = defaults.gcps;
    	      this.id = defaults.id;
    	      this.region = defaults.region;
    	      this.reservedCidr = defaults.reservedCidr;
    	      this.resourceName = defaults.resourceName;
    	      this.zonalSubdomains = defaults.zonalSubdomains;
    	      this.zoneInfos = defaults.zoneInfos;
    	      this.zones = defaults.zones;
        }

        @CustomType.Setter
        public Builder aws(List<GetNetworkAw> aws) {
            this.aws = Objects.requireNonNull(aws);
            return this;
        }
        public Builder aws(GetNetworkAw... aws) {
            return aws(List.of(aws));
        }
        @CustomType.Setter
        public Builder azures(List<GetNetworkAzure> azures) {
            this.azures = Objects.requireNonNull(azures);
            return this;
        }
        public Builder azures(GetNetworkAzure... azures) {
            return azures(List.of(azures));
        }
        @CustomType.Setter
        public Builder cidr(String cidr) {
            this.cidr = Objects.requireNonNull(cidr);
            return this;
        }
        @CustomType.Setter
        public Builder cloud(String cloud) {
            this.cloud = Objects.requireNonNull(cloud);
            return this;
        }
        @CustomType.Setter
        public Builder connectionTypes(List<String> connectionTypes) {
            this.connectionTypes = Objects.requireNonNull(connectionTypes);
            return this;
        }
        public Builder connectionTypes(String... connectionTypes) {
            return connectionTypes(List.of(connectionTypes));
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder dnsConfigs(List<GetNetworkDnsConfig> dnsConfigs) {
            this.dnsConfigs = Objects.requireNonNull(dnsConfigs);
            return this;
        }
        public Builder dnsConfigs(GetNetworkDnsConfig... dnsConfigs) {
            return dnsConfigs(List.of(dnsConfigs));
        }
        @CustomType.Setter
        public Builder dnsDomain(String dnsDomain) {
            this.dnsDomain = Objects.requireNonNull(dnsDomain);
            return this;
        }
        @CustomType.Setter
        public Builder environment(GetNetworkEnvironment environment) {
            this.environment = Objects.requireNonNull(environment);
            return this;
        }
        @CustomType.Setter
        public Builder gcps(List<GetNetworkGcp> gcps) {
            this.gcps = Objects.requireNonNull(gcps);
            return this;
        }
        public Builder gcps(GetNetworkGcp... gcps) {
            return gcps(List.of(gcps));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }
        @CustomType.Setter
        public Builder reservedCidr(String reservedCidr) {
            this.reservedCidr = Objects.requireNonNull(reservedCidr);
            return this;
        }
        @CustomType.Setter
        public Builder resourceName(String resourceName) {
            this.resourceName = Objects.requireNonNull(resourceName);
            return this;
        }
        @CustomType.Setter
        public Builder zonalSubdomains(Map<String,String> zonalSubdomains) {
            this.zonalSubdomains = Objects.requireNonNull(zonalSubdomains);
            return this;
        }
        @CustomType.Setter
        public Builder zoneInfos(List<GetNetworkZoneInfo> zoneInfos) {
            this.zoneInfos = Objects.requireNonNull(zoneInfos);
            return this;
        }
        public Builder zoneInfos(GetNetworkZoneInfo... zoneInfos) {
            return zoneInfos(List.of(zoneInfos));
        }
        @CustomType.Setter
        public Builder zones(List<String> zones) {
            this.zones = Objects.requireNonNull(zones);
            return this;
        }
        public Builder zones(String... zones) {
            return zones(List.of(zones));
        }
        public GetNetworkResult build() {
            final var _resultValue = new GetNetworkResult();
            _resultValue.aws = aws;
            _resultValue.azures = azures;
            _resultValue.cidr = cidr;
            _resultValue.cloud = cloud;
            _resultValue.connectionTypes = connectionTypes;
            _resultValue.displayName = displayName;
            _resultValue.dnsConfigs = dnsConfigs;
            _resultValue.dnsDomain = dnsDomain;
            _resultValue.environment = environment;
            _resultValue.gcps = gcps;
            _resultValue.id = id;
            _resultValue.region = region;
            _resultValue.reservedCidr = reservedCidr;
            _resultValue.resourceName = resourceName;
            _resultValue.zonalSubdomains = zonalSubdomains;
            _resultValue.zoneInfos = zoneInfos;
            _resultValue.zones = zones;
            return _resultValue;
        }
    }
}

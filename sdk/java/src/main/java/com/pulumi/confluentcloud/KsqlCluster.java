// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud;

import com.pulumi.confluentcloud.KsqlClusterArgs;
import com.pulumi.confluentcloud.Utilities;
import com.pulumi.confluentcloud.inputs.KsqlClusterState;
import com.pulumi.confluentcloud.outputs.KsqlClusterCredentialIdentity;
import com.pulumi.confluentcloud.outputs.KsqlClusterEnvironment;
import com.pulumi.confluentcloud.outputs.KsqlClusterKafkaCluster;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
 * 
 * !&gt; **Warning:**  It is strongly recommended that you provision a `data.confluent_schema_registry_cluster` resource before you provision a `confluentcloud.KsqlCluster` resource in a given environment. If you&#39;re provisioning the `data.confluent_schema_registry_cluster` and the `confluentcloud.KsqlCluster` resource in the same pulumi up command, reference the `data.confluent_schema_registry_cluster` from the `depends_on` argument inside the `confluentcloud.KsqlCluster` resource. This ensures that the `data.confluent_schema_registry_cluster` resource is created before the `confluentcloud.KsqlCluster` resource. If you provision a `confluentcloud.KsqlCluster` resource without a `data.confluent_schema_registry_cluster` resource, and later, you want to add a `data.confluent_schema_registry_cluster` resource, you must destroy and re-create your `confluentcloud.KsqlCluster` resource after provisioning a `data.confluent_schema_registry_cluster` resource.
 * 
 * `confluentcloud.KsqlCluster` provides a ksqlDB cluster resource that enables creating, editing, and deleting ksqlDB clusters on Confluent Cloud.
 * 
 * ## Import
 * 
 * You can import a ksqlDB cluster by using Environment ID and ksqlDB cluster ID, in the format `&lt;Environment ID&gt;/&lt;ksqlDB cluster ID&gt;`, for example:
 * 
 * $ export CONFLUENT_CLOUD_API_KEY=&#34;&lt;cloud_api_key&gt;&#34;
 * 
 * $ export CONFLUENT_CLOUD_API_SECRET=&#34;&lt;cloud_api_secret&gt;&#34;
 * 
 * ```sh
 * $ pulumi import confluentcloud:index/ksqlCluster:KsqlCluster example env-abc123/lksqlc-abc123
 * ```
 * 
 * !&gt; **Warning:**  Do not forget to delete the terminal&#39;s command history afterward for security purposes.
 * 
 */
@ResourceType(type="confluentcloud:index/ksqlCluster:KsqlCluster")
public class KsqlCluster extends com.pulumi.resources.CustomResource {
    /**
     * (Required String) An API Version of the schema version of the ksqlDB cluster, for example, `ksqldbcm/v2`.
     * 
     */
    @Export(name="apiVersion", refs={String.class}, tree="[0]")
    private Output<String> apiVersion;

    /**
     * @return (Required String) An API Version of the schema version of the ksqlDB cluster, for example, `ksqldbcm/v2`.
     * 
     */
    public Output<String> apiVersion() {
        return this.apiVersion;
    }
    @Export(name="credentialIdentity", refs={KsqlClusterCredentialIdentity.class}, tree="[0]")
    private Output<KsqlClusterCredentialIdentity> credentialIdentity;

    public Output<KsqlClusterCredentialIdentity> credentialIdentity() {
        return this.credentialIdentity;
    }
    /**
     * The number of Confluent Streaming Units (CSUs) for the ksqlDB cluster.
     * 
     */
    @Export(name="csu", refs={Integer.class}, tree="[0]")
    private Output<Integer> csu;

    /**
     * @return The number of Confluent Streaming Units (CSUs) for the ksqlDB cluster.
     * 
     */
    public Output<Integer> csu() {
        return this.csu;
    }
    /**
     * The name of the ksqlDB cluster.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return The name of the ksqlDB cluster.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     * 
     */
    @Export(name="environment", refs={KsqlClusterEnvironment.class}, tree="[0]")
    private Output<KsqlClusterEnvironment> environment;

    /**
     * @return Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     * 
     */
    public Output<KsqlClusterEnvironment> environment() {
        return this.environment;
    }
    @Export(name="kafkaCluster", refs={KsqlClusterKafkaCluster.class}, tree="[0]")
    private Output<KsqlClusterKafkaCluster> kafkaCluster;

    public Output<KsqlClusterKafkaCluster> kafkaCluster() {
        return this.kafkaCluster;
    }
    /**
     * (Required String) A kind of the ksqlDB cluster, for example, `Cluster`.
     * 
     */
    @Export(name="kind", refs={String.class}, tree="[0]")
    private Output<String> kind;

    /**
     * @return (Required String) A kind of the ksqlDB cluster, for example, `Cluster`.
     * 
     */
    public Output<String> kind() {
        return this.kind;
    }
    /**
     * (Required String) The Confluent Resource Name of the ksqlDB cluster.
     * 
     */
    @Export(name="resourceName", refs={String.class}, tree="[0]")
    private Output<String> resourceName;

    /**
     * @return (Required String) The Confluent Resource Name of the ksqlDB cluster.
     * 
     */
    public Output<String> resourceName() {
        return this.resourceName;
    }
    /**
     * (Required String) The API endpoint of the ksqlDB cluster, for example, `https://pksqlc-00000.us-central1.gcp.glb.confluent.cloud`.
     * 
     */
    @Export(name="restEndpoint", refs={String.class}, tree="[0]")
    private Output<String> restEndpoint;

    /**
     * @return (Required String) The API endpoint of the ksqlDB cluster, for example, `https://pksqlc-00000.us-central1.gcp.glb.confluent.cloud`.
     * 
     */
    public Output<String> restEndpoint() {
        return this.restEndpoint;
    }
    /**
     * (Required Integer) The amount of storage (in GB) provisioned to the ksqlDB cluster.
     * 
     */
    @Export(name="storage", refs={Integer.class}, tree="[0]")
    private Output<Integer> storage;

    /**
     * @return (Required Integer) The amount of storage (in GB) provisioned to the ksqlDB cluster.
     * 
     */
    public Output<Integer> storage() {
        return this.storage;
    }
    /**
     * (Required String) Topic name prefix used by this ksqlDB cluster. Used to assign ACLs for this ksqlDB cluster to use, for example, `pksqlc-00000`.
     * 
     */
    @Export(name="topicPrefix", refs={String.class}, tree="[0]")
    private Output<String> topicPrefix;

    /**
     * @return (Required String) Topic name prefix used by this ksqlDB cluster. Used to assign ACLs for this ksqlDB cluster to use, for example, `pksqlc-00000`.
     * 
     */
    public Output<String> topicPrefix() {
        return this.topicPrefix;
    }
    /**
     * Controls whether the row data should be included in the processing log topic. Set it to `false` if you don&#39;t want to emit sensitive information to the processing log. Defaults to `true`.
     * 
     */
    @Export(name="useDetailedProcessingLog", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> useDetailedProcessingLog;

    /**
     * @return Controls whether the row data should be included in the processing log topic. Set it to `false` if you don&#39;t want to emit sensitive information to the processing log. Defaults to `true`.
     * 
     */
    public Output<Optional<Boolean>> useDetailedProcessingLog() {
        return Codegen.optional(this.useDetailedProcessingLog);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public KsqlCluster(java.lang.String name) {
        this(name, KsqlClusterArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public KsqlCluster(java.lang.String name, KsqlClusterArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public KsqlCluster(java.lang.String name, KsqlClusterArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("confluentcloud:index/ksqlCluster:KsqlCluster", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private KsqlCluster(java.lang.String name, Output<java.lang.String> id, @Nullable KsqlClusterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("confluentcloud:index/ksqlCluster:KsqlCluster", name, state, makeResourceOptions(options, id), false);
    }

    private static KsqlClusterArgs makeArgs(KsqlClusterArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? KsqlClusterArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static KsqlCluster get(java.lang.String name, Output<java.lang.String> id, @Nullable KsqlClusterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new KsqlCluster(name, id, state, options);
    }
}

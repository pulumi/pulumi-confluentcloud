// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.inputs;

import com.pulumi.confluentcloud.inputs.PluginEnvironmentArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PluginState extends com.pulumi.resources.ResourceArgs {

    public static final PluginState Empty = new PluginState();

    /**
     * (Required String) The API Version of the schema version of the plugin, for example, `ccpm/v1`.
     * 
     */
    @Import(name="apiVersion")
    private @Nullable Output<String> apiVersion;

    /**
     * @return (Required String) The API Version of the schema version of the plugin, for example, `ccpm/v1`.
     * 
     */
    public Optional<Output<String>> apiVersion() {
        return Optional.ofNullable(this.apiVersion);
    }

    /**
     * Cloud provider where the Custom Connector Plugin archive is uploaded. Accepted values are: `AWS`, `AZURE`, `GCP`.
     * 
     */
    @Import(name="cloud")
    private @Nullable Output<String> cloud;

    /**
     * @return Cloud provider where the Custom Connector Plugin archive is uploaded. Accepted values are: `AWS`, `AZURE`, `GCP`.
     * 
     */
    public Optional<Output<String>> cloud() {
        return Optional.ofNullable(this.cloud);
    }

    /**
     * The description of the Plugin.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the Plugin.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the Plugin.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The name of the Plugin.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     * 
     */
    @Import(name="environment")
    private @Nullable Output<PluginEnvironmentArgs> environment;

    /**
     * @return Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     * 
     */
    public Optional<Output<PluginEnvironmentArgs>> environment() {
        return Optional.ofNullable(this.environment);
    }

    /**
     * (Required String) The kind of the Plugin, for example, `CustomConnectPlugin`.
     * 
     */
    @Import(name="kind")
    private @Nullable Output<String> kind;

    /**
     * @return (Required String) The kind of the Plugin, for example, `CustomConnectPlugin`.
     * 
     */
    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * (Optional String) Runtime language of the plugin.
     * 
     */
    @Import(name="runtimeLanguage")
    private @Nullable Output<String> runtimeLanguage;

    /**
     * @return (Optional String) Runtime language of the plugin.
     * 
     */
    public Optional<Output<String>> runtimeLanguage() {
        return Optional.ofNullable(this.runtimeLanguage);
    }

    private PluginState() {}

    private PluginState(PluginState $) {
        this.apiVersion = $.apiVersion;
        this.cloud = $.cloud;
        this.description = $.description;
        this.displayName = $.displayName;
        this.environment = $.environment;
        this.kind = $.kind;
        this.runtimeLanguage = $.runtimeLanguage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PluginState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PluginState $;

        public Builder() {
            $ = new PluginState();
        }

        public Builder(PluginState defaults) {
            $ = new PluginState(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiVersion (Required String) The API Version of the schema version of the plugin, for example, `ccpm/v1`.
         * 
         * @return builder
         * 
         */
        public Builder apiVersion(@Nullable Output<String> apiVersion) {
            $.apiVersion = apiVersion;
            return this;
        }

        /**
         * @param apiVersion (Required String) The API Version of the schema version of the plugin, for example, `ccpm/v1`.
         * 
         * @return builder
         * 
         */
        public Builder apiVersion(String apiVersion) {
            return apiVersion(Output.of(apiVersion));
        }

        /**
         * @param cloud Cloud provider where the Custom Connector Plugin archive is uploaded. Accepted values are: `AWS`, `AZURE`, `GCP`.
         * 
         * @return builder
         * 
         */
        public Builder cloud(@Nullable Output<String> cloud) {
            $.cloud = cloud;
            return this;
        }

        /**
         * @param cloud Cloud provider where the Custom Connector Plugin archive is uploaded. Accepted values are: `AWS`, `AZURE`, `GCP`.
         * 
         * @return builder
         * 
         */
        public Builder cloud(String cloud) {
            return cloud(Output.of(cloud));
        }

        /**
         * @param description The description of the Plugin.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the Plugin.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName The name of the Plugin.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The name of the Plugin.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param environment Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
         * 
         * @return builder
         * 
         */
        public Builder environment(@Nullable Output<PluginEnvironmentArgs> environment) {
            $.environment = environment;
            return this;
        }

        /**
         * @param environment Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
         * 
         * @return builder
         * 
         */
        public Builder environment(PluginEnvironmentArgs environment) {
            return environment(Output.of(environment));
        }

        /**
         * @param kind (Required String) The kind of the Plugin, for example, `CustomConnectPlugin`.
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind (Required String) The kind of the Plugin, for example, `CustomConnectPlugin`.
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param runtimeLanguage (Optional String) Runtime language of the plugin.
         * 
         * @return builder
         * 
         */
        public Builder runtimeLanguage(@Nullable Output<String> runtimeLanguage) {
            $.runtimeLanguage = runtimeLanguage;
            return this;
        }

        /**
         * @param runtimeLanguage (Optional String) Runtime language of the plugin.
         * 
         * @return builder
         * 
         */
        public Builder runtimeLanguage(String runtimeLanguage) {
            return runtimeLanguage(Output.of(runtimeLanguage));
        }

        public PluginState build() {
            return $;
        }
    }

}

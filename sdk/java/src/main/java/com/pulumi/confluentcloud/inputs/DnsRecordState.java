// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.inputs;

import com.pulumi.confluentcloud.inputs.DnsRecordEnvironmentArgs;
import com.pulumi.confluentcloud.inputs.DnsRecordGatewayArgs;
import com.pulumi.confluentcloud.inputs.DnsRecordPrivateLinkAccessPointArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DnsRecordState extends com.pulumi.resources.ResourceArgs {

    public static final DnsRecordState Empty = new DnsRecordState();

    /**
     * The name of the DNS Record.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The name of the DNS Record.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The fully qualified domain name of the DNS Record.
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return The fully qualified domain name of the DNS Record.
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     * 
     */
    @Import(name="environment")
    private @Nullable Output<DnsRecordEnvironmentArgs> environment;

    /**
     * @return Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     * 
     */
    public Optional<Output<DnsRecordEnvironmentArgs>> environment() {
        return Optional.ofNullable(this.environment);
    }

    @Import(name="gateway")
    private @Nullable Output<DnsRecordGatewayArgs> gateway;

    public Optional<Output<DnsRecordGatewayArgs>> gateway() {
        return Optional.ofNullable(this.gateway);
    }

    @Import(name="privateLinkAccessPoint")
    private @Nullable Output<DnsRecordPrivateLinkAccessPointArgs> privateLinkAccessPoint;

    public Optional<Output<DnsRecordPrivateLinkAccessPointArgs>> privateLinkAccessPoint() {
        return Optional.ofNullable(this.privateLinkAccessPoint);
    }

    private DnsRecordState() {}

    private DnsRecordState(DnsRecordState $) {
        this.displayName = $.displayName;
        this.domain = $.domain;
        this.environment = $.environment;
        this.gateway = $.gateway;
        this.privateLinkAccessPoint = $.privateLinkAccessPoint;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DnsRecordState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DnsRecordState $;

        public Builder() {
            $ = new DnsRecordState();
        }

        public Builder(DnsRecordState defaults) {
            $ = new DnsRecordState(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName The name of the DNS Record.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The name of the DNS Record.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param domain The fully qualified domain name of the DNS Record.
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain The fully qualified domain name of the DNS Record.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param environment Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
         * 
         * @return builder
         * 
         */
        public Builder environment(@Nullable Output<DnsRecordEnvironmentArgs> environment) {
            $.environment = environment;
            return this;
        }

        /**
         * @param environment Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
         * 
         * @return builder
         * 
         */
        public Builder environment(DnsRecordEnvironmentArgs environment) {
            return environment(Output.of(environment));
        }

        public Builder gateway(@Nullable Output<DnsRecordGatewayArgs> gateway) {
            $.gateway = gateway;
            return this;
        }

        public Builder gateway(DnsRecordGatewayArgs gateway) {
            return gateway(Output.of(gateway));
        }

        public Builder privateLinkAccessPoint(@Nullable Output<DnsRecordPrivateLinkAccessPointArgs> privateLinkAccessPoint) {
            $.privateLinkAccessPoint = privateLinkAccessPoint;
            return this;
        }

        public Builder privateLinkAccessPoint(DnsRecordPrivateLinkAccessPointArgs privateLinkAccessPoint) {
            return privateLinkAccessPoint(Output.of(privateLinkAccessPoint));
        }

        public DnsRecordState build() {
            return $;
        }
    }

}

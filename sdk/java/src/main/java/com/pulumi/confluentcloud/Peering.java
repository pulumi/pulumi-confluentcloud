// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud;

import com.pulumi.confluentcloud.PeeringArgs;
import com.pulumi.confluentcloud.Utilities;
import com.pulumi.confluentcloud.inputs.PeeringState;
import com.pulumi.confluentcloud.outputs.PeeringAws;
import com.pulumi.confluentcloud.outputs.PeeringAzure;
import com.pulumi.confluentcloud.outputs.PeeringEnvironment;
import com.pulumi.confluentcloud.outputs.PeeringGcp;
import com.pulumi.confluentcloud.outputs.PeeringNetwork;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * ### Example Peering on AWS
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.confluentcloud.Environment;
 * import com.pulumi.confluentcloud.EnvironmentArgs;
 * import com.pulumi.confluentcloud.Network;
 * import com.pulumi.confluentcloud.NetworkArgs;
 * import com.pulumi.confluentcloud.inputs.NetworkEnvironmentArgs;
 * import com.pulumi.confluentcloud.Peering;
 * import com.pulumi.confluentcloud.PeeringArgs;
 * import com.pulumi.confluentcloud.inputs.PeeringAwsArgs;
 * import com.pulumi.confluentcloud.inputs.PeeringEnvironmentArgs;
 * import com.pulumi.confluentcloud.inputs.PeeringNetworkArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var development = new Environment("development", EnvironmentArgs.builder()
 *             .displayName("Development")
 *             .build());
 * 
 *         var aws_peering = new Network("aws-peering", NetworkArgs.builder()
 *             .displayName("AWS Peering Network")
 *             .cloud("AWS")
 *             .region("us-east-2")
 *             .cidr("10.10.0.0/16")
 *             .connectionTypes("PEERING")
 *             .environment(NetworkEnvironmentArgs.builder()
 *                 .id(development.id())
 *                 .build())
 *             .build());
 * 
 *         var aws = new Peering("aws", PeeringArgs.builder()
 *             .displayName("AWS Peering")
 *             .aws(PeeringAwsArgs.builder()
 *                 .account("012345678901")
 *                 .vpc("vpc-abcdef0123456789a")
 *                 .routes("172.31.0.0/16")
 *                 .customerRegion("us-east-2")
 *                 .build())
 *             .environment(PeeringEnvironmentArgs.builder()
 *                 .id(development.id())
 *                 .build())
 *             .network(PeeringNetworkArgs.builder()
 *                 .id(aws_peering.id())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Example Peering on Azure
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.confluentcloud.Environment;
 * import com.pulumi.confluentcloud.EnvironmentArgs;
 * import com.pulumi.confluentcloud.Network;
 * import com.pulumi.confluentcloud.NetworkArgs;
 * import com.pulumi.confluentcloud.inputs.NetworkEnvironmentArgs;
 * import com.pulumi.confluentcloud.Peering;
 * import com.pulumi.confluentcloud.PeeringArgs;
 * import com.pulumi.confluentcloud.inputs.PeeringAzureArgs;
 * import com.pulumi.confluentcloud.inputs.PeeringEnvironmentArgs;
 * import com.pulumi.confluentcloud.inputs.PeeringNetworkArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var development = new Environment("development", EnvironmentArgs.builder()
 *             .displayName("Development")
 *             .build());
 * 
 *         var azure_peering = new Network("azure-peering", NetworkArgs.builder()
 *             .displayName("Azure Peering Network")
 *             .cloud("AZURE")
 *             .region("centralus")
 *             .cidr("10.10.0.0/16")
 *             .connectionTypes("PEERING")
 *             .environment(NetworkEnvironmentArgs.builder()
 *                 .id(development.id())
 *                 .build())
 *             .build());
 * 
 *         var azure = new Peering("azure", PeeringArgs.builder()
 *             .displayName("Azure Peering")
 *             .azure(PeeringAzureArgs.builder()
 *                 .tenant("1111tttt-1111-1111-1111-111111tttttt")
 *                 .vnet("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/my-rg/providers/Microsoft.Network/virtualNetworks/my-vnet")
 *                 .customerRegion("centralus")
 *                 .build())
 *             .environment(PeeringEnvironmentArgs.builder()
 *                 .id(development.id())
 *                 .build())
 *             .network(PeeringNetworkArgs.builder()
 *                 .id(azure_peering.id())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Example Peering on GCP
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.confluentcloud.Environment;
 * import com.pulumi.confluentcloud.EnvironmentArgs;
 * import com.pulumi.confluentcloud.Network;
 * import com.pulumi.confluentcloud.NetworkArgs;
 * import com.pulumi.confluentcloud.inputs.NetworkEnvironmentArgs;
 * import com.pulumi.confluentcloud.Peering;
 * import com.pulumi.confluentcloud.PeeringArgs;
 * import com.pulumi.confluentcloud.inputs.PeeringGcpArgs;
 * import com.pulumi.confluentcloud.inputs.PeeringEnvironmentArgs;
 * import com.pulumi.confluentcloud.inputs.PeeringNetworkArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var development = new Environment("development", EnvironmentArgs.builder()
 *             .displayName("Development")
 *             .build());
 * 
 *         var gcp_peering = new Network("gcp-peering", NetworkArgs.builder()
 *             .displayName("GCP Peering Network")
 *             .cloud("GCP")
 *             .region("us-west4")
 *             .cidr("10.10.0.0/16")
 *             .connectionTypes("PEERING")
 *             .environment(NetworkEnvironmentArgs.builder()
 *                 .id(development.id())
 *                 .build())
 *             .build());
 * 
 *         var gcp = new Peering("gcp", PeeringArgs.builder()
 *             .displayName("GCP Peering")
 *             .gcp(PeeringGcpArgs.builder()
 *                 .project("temp-gear-123456")
 *                 .vpcNetwork("customer-test-vpc-network")
 *                 .build())
 *             .environment(PeeringEnvironmentArgs.builder()
 *                 .id(development.id())
 *                 .build())
 *             .network(PeeringNetworkArgs.builder()
 *                 .id(gcp_peering.id())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Getting Started
 * 
 * The following end-to-end examples might help to get started with `confluentcloud.Peering` resource:
 *   * dedicated-vnet-peering-azure-kafka-acls: _Dedicated_ Kafka cluster on Azure that is accessible via VPC Peering connections with authorization using ACLs
 *   * dedicated-vnet-peering-azure-kafka-rbac: _Dedicated_ Kafka cluster on Azure that is accessible via VPC Peering connections with authorization using RBAC
 *   * dedicated-vpc-peering-aws-kafka-acls: _Dedicated_ Kafka cluster on AWS that is accessible via VPC Peering connections with authorization using ACLs
 *   * dedicated-vpc-peering-aws-kafka-rbac: _Dedicated_ Kafka cluster on AWS that is accessible via VPC Peering connections with authorization using RBAC
 *   * dedicated-vpc-peering-gcp-kafka-acls: _Dedicated_ Kafka cluster on GCP that is accessible via VPC Peering connections with authorization using ACLs
 *   * dedicated-vpc-peering-gcp-kafka-rbac: _Dedicated_ Kafka cluster on GCP that is accessible via VPC Peering connections with authorization using RBAC
 *   * dedicated-transit-gateway-attachment-aws-kafka-acls: _Dedicated_ Kafka cluster on AWS that is accessible via Transit Gateway Endpoint with authorization using ACLs
 *   * dedicated-transit-gateway-attachment-aws-kafka-rbac: _Dedicated_ Kafka cluster on AWS that is accessible via Transit Gateway Endpoint with authorization using RBAC
 *   * enterprise-privatelinkattachment-aws-kafka-acls: _Enterprise_ Kafka cluster on AWS that is accessible via PrivateLink connections with authorization using ACLs
 * 
 * ## Import
 * 
 * You can import a Peering by using Environment ID and Peering ID, in the format `&lt;Environment ID&gt;/&lt;Peering ID&gt;`. The following example shows how to import a Peering:
 * 
 * $ export CONFLUENT_CLOUD_API_KEY=&#34;&lt;cloud_api_key&gt;&#34;
 * 
 * $ export CONFLUENT_CLOUD_API_SECRET=&#34;&lt;cloud_api_secret&gt;&#34;
 * 
 * ```sh
 * $ pulumi import confluentcloud:index/peering:Peering my_peer env-abc123/peer-abc123
 * ```
 * 
 * !&gt; **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
 * 
 */
@ResourceType(type="confluentcloud:index/peering:Peering")
public class Peering extends com.pulumi.resources.CustomResource {
    @Export(name="aws", refs={PeeringAws.class}, tree="[0]")
    private Output</* @Nullable */ PeeringAws> aws;

    public Output<Optional<PeeringAws>> aws() {
        return Codegen.optional(this.aws);
    }
    @Export(name="azure", refs={PeeringAzure.class}, tree="[0]")
    private Output</* @Nullable */ PeeringAzure> azure;

    public Output<Optional<PeeringAzure>> azure() {
        return Codegen.optional(this.azure);
    }
    /**
     * The name of the Peering.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return The name of the Peering.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     * 
     */
    @Export(name="environment", refs={PeeringEnvironment.class}, tree="[0]")
    private Output<PeeringEnvironment> environment;

    /**
     * @return Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     * 
     */
    public Output<PeeringEnvironment> environment() {
        return this.environment;
    }
    @Export(name="gcp", refs={PeeringGcp.class}, tree="[0]")
    private Output</* @Nullable */ PeeringGcp> gcp;

    public Output<Optional<PeeringGcp>> gcp() {
        return Codegen.optional(this.gcp);
    }
    /**
     * Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider
     * accounts.
     * 
     */
    @Export(name="network", refs={PeeringNetwork.class}, tree="[0]")
    private Output<PeeringNetwork> network;

    /**
     * @return Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider
     * accounts.
     * 
     */
    public Output<PeeringNetwork> network() {
        return this.network;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Peering(java.lang.String name) {
        this(name, PeeringArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Peering(java.lang.String name, PeeringArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Peering(java.lang.String name, PeeringArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("confluentcloud:index/peering:Peering", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Peering(java.lang.String name, Output<java.lang.String> id, @Nullable PeeringState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("confluentcloud:index/peering:Peering", name, state, makeResourceOptions(options, id), false);
    }

    private static PeeringArgs makeArgs(PeeringArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? PeeringArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Peering get(java.lang.String name, Output<java.lang.String> id, @Nullable PeeringState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Peering(name, id, state, options);
    }
}

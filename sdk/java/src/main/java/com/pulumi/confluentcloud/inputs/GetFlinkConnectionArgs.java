// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.inputs;

import com.pulumi.confluentcloud.inputs.GetFlinkConnectionComputePoolArgs;
import com.pulumi.confluentcloud.inputs.GetFlinkConnectionCredentialsArgs;
import com.pulumi.confluentcloud.inputs.GetFlinkConnectionEnvironmentArgs;
import com.pulumi.confluentcloud.inputs.GetFlinkConnectionOrganizationArgs;
import com.pulumi.confluentcloud.inputs.GetFlinkConnectionPrincipalArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetFlinkConnectionArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetFlinkConnectionArgs Empty = new GetFlinkConnectionArgs();

    @Import(name="computePool")
    private @Nullable Output<GetFlinkConnectionComputePoolArgs> computePool;

    public Optional<Output<GetFlinkConnectionComputePoolArgs>> computePool() {
        return Optional.ofNullable(this.computePool);
    }

    @Import(name="credentials")
    private @Nullable Output<GetFlinkConnectionCredentialsArgs> credentials;

    public Optional<Output<GetFlinkConnectionCredentialsArgs>> credentials() {
        return Optional.ofNullable(this.credentials);
    }

    /**
     * The name of the Flink Connection.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return The name of the Flink Connection.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    @Import(name="environment")
    private @Nullable Output<GetFlinkConnectionEnvironmentArgs> environment;

    public Optional<Output<GetFlinkConnectionEnvironmentArgs>> environment() {
        return Optional.ofNullable(this.environment);
    }

    @Import(name="organization")
    private @Nullable Output<GetFlinkConnectionOrganizationArgs> organization;

    public Optional<Output<GetFlinkConnectionOrganizationArgs>> organization() {
        return Optional.ofNullable(this.organization);
    }

    @Import(name="principal")
    private @Nullable Output<GetFlinkConnectionPrincipalArgs> principal;

    public Optional<Output<GetFlinkConnectionPrincipalArgs>> principal() {
        return Optional.ofNullable(this.principal);
    }

    /**
     * The REST endpoint of the Flink region, for example, `https://flink.us-east-1.aws.confluent.cloud`).
     * 
     */
    @Import(name="restEndpoint")
    private @Nullable Output<String> restEndpoint;

    /**
     * @return The REST endpoint of the Flink region, for example, `https://flink.us-east-1.aws.confluent.cloud`).
     * 
     */
    public Optional<Output<String>> restEndpoint() {
        return Optional.ofNullable(this.restEndpoint);
    }

    /**
     * The type of the Flink Connection. The accepted values are: `OPENAI`, `AZUREML`, `AZUREOPENAI`, `BEDROCK`, `SAGEMAKER`, `GOOGLEAI`, `VERTEXAI`, `MONGODB`, `PINECONE`, `ELASTIC` and `COUCHBASE`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of the Flink Connection. The accepted values are: `OPENAI`, `AZUREML`, `AZUREOPENAI`, `BEDROCK`, `SAGEMAKER`, `GOOGLEAI`, `VERTEXAI`, `MONGODB`, `PINECONE`, `ELASTIC` and `COUCHBASE`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private GetFlinkConnectionArgs() {}

    private GetFlinkConnectionArgs(GetFlinkConnectionArgs $) {
        this.computePool = $.computePool;
        this.credentials = $.credentials;
        this.displayName = $.displayName;
        this.environment = $.environment;
        this.organization = $.organization;
        this.principal = $.principal;
        this.restEndpoint = $.restEndpoint;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetFlinkConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetFlinkConnectionArgs $;

        public Builder() {
            $ = new GetFlinkConnectionArgs();
        }

        public Builder(GetFlinkConnectionArgs defaults) {
            $ = new GetFlinkConnectionArgs(Objects.requireNonNull(defaults));
        }

        public Builder computePool(@Nullable Output<GetFlinkConnectionComputePoolArgs> computePool) {
            $.computePool = computePool;
            return this;
        }

        public Builder computePool(GetFlinkConnectionComputePoolArgs computePool) {
            return computePool(Output.of(computePool));
        }

        public Builder credentials(@Nullable Output<GetFlinkConnectionCredentialsArgs> credentials) {
            $.credentials = credentials;
            return this;
        }

        public Builder credentials(GetFlinkConnectionCredentialsArgs credentials) {
            return credentials(Output.of(credentials));
        }

        /**
         * @param displayName The name of the Flink Connection.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The name of the Flink Connection.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder environment(@Nullable Output<GetFlinkConnectionEnvironmentArgs> environment) {
            $.environment = environment;
            return this;
        }

        public Builder environment(GetFlinkConnectionEnvironmentArgs environment) {
            return environment(Output.of(environment));
        }

        public Builder organization(@Nullable Output<GetFlinkConnectionOrganizationArgs> organization) {
            $.organization = organization;
            return this;
        }

        public Builder organization(GetFlinkConnectionOrganizationArgs organization) {
            return organization(Output.of(organization));
        }

        public Builder principal(@Nullable Output<GetFlinkConnectionPrincipalArgs> principal) {
            $.principal = principal;
            return this;
        }

        public Builder principal(GetFlinkConnectionPrincipalArgs principal) {
            return principal(Output.of(principal));
        }

        /**
         * @param restEndpoint The REST endpoint of the Flink region, for example, `https://flink.us-east-1.aws.confluent.cloud`).
         * 
         * @return builder
         * 
         */
        public Builder restEndpoint(@Nullable Output<String> restEndpoint) {
            $.restEndpoint = restEndpoint;
            return this;
        }

        /**
         * @param restEndpoint The REST endpoint of the Flink region, for example, `https://flink.us-east-1.aws.confluent.cloud`).
         * 
         * @return builder
         * 
         */
        public Builder restEndpoint(String restEndpoint) {
            return restEndpoint(Output.of(restEndpoint));
        }

        /**
         * @param type The type of the Flink Connection. The accepted values are: `OPENAI`, `AZUREML`, `AZUREOPENAI`, `BEDROCK`, `SAGEMAKER`, `GOOGLEAI`, `VERTEXAI`, `MONGODB`, `PINECONE`, `ELASTIC` and `COUCHBASE`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the Flink Connection. The accepted values are: `OPENAI`, `AZUREML`, `AZUREOPENAI`, `BEDROCK`, `SAGEMAKER`, `GOOGLEAI`, `VERTEXAI`, `MONGODB`, `PINECONE`, `ELASTIC` and `COUCHBASE`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public GetFlinkConnectionArgs build() {
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("GetFlinkConnectionArgs", "displayName");
            }
            return $;
        }
    }

}

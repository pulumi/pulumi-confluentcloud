// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.outputs;

import com.pulumi.confluentcloud.outputs.GetSubjectModeCredentials;
import com.pulumi.confluentcloud.outputs.GetSubjectModeSchemaRegistryCluster;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSubjectModeResult {
    private @Nullable GetSubjectModeCredentials credentials;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return (Required String) The mode of the specified subject. Accepted values are: `READWRITE`, `READONLY`, `READONLY_OVERRIDE`, and `IMPORT`.
     * 
     */
    private String mode;
    private @Nullable String restEndpoint;
    private @Nullable GetSubjectModeSchemaRegistryCluster schemaRegistryCluster;
    private String subjectName;

    private GetSubjectModeResult() {}
    public Optional<GetSubjectModeCredentials> credentials() {
        return Optional.ofNullable(this.credentials);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return (Required String) The mode of the specified subject. Accepted values are: `READWRITE`, `READONLY`, `READONLY_OVERRIDE`, and `IMPORT`.
     * 
     */
    public String mode() {
        return this.mode;
    }
    public Optional<String> restEndpoint() {
        return Optional.ofNullable(this.restEndpoint);
    }
    public Optional<GetSubjectModeSchemaRegistryCluster> schemaRegistryCluster() {
        return Optional.ofNullable(this.schemaRegistryCluster);
    }
    public String subjectName() {
        return this.subjectName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSubjectModeResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable GetSubjectModeCredentials credentials;
        private String id;
        private String mode;
        private @Nullable String restEndpoint;
        private @Nullable GetSubjectModeSchemaRegistryCluster schemaRegistryCluster;
        private String subjectName;
        public Builder() {}
        public Builder(GetSubjectModeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.credentials = defaults.credentials;
    	      this.id = defaults.id;
    	      this.mode = defaults.mode;
    	      this.restEndpoint = defaults.restEndpoint;
    	      this.schemaRegistryCluster = defaults.schemaRegistryCluster;
    	      this.subjectName = defaults.subjectName;
        }

        @CustomType.Setter
        public Builder credentials(@Nullable GetSubjectModeCredentials credentials) {
            this.credentials = credentials;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder mode(String mode) {
            this.mode = Objects.requireNonNull(mode);
            return this;
        }
        @CustomType.Setter
        public Builder restEndpoint(@Nullable String restEndpoint) {
            this.restEndpoint = restEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder schemaRegistryCluster(@Nullable GetSubjectModeSchemaRegistryCluster schemaRegistryCluster) {
            this.schemaRegistryCluster = schemaRegistryCluster;
            return this;
        }
        @CustomType.Setter
        public Builder subjectName(String subjectName) {
            this.subjectName = Objects.requireNonNull(subjectName);
            return this;
        }
        public GetSubjectModeResult build() {
            final var o = new GetSubjectModeResult();
            o.credentials = credentials;
            o.id = id;
            o.mode = mode;
            o.restEndpoint = restEndpoint;
            o.schemaRegistryCluster = schemaRegistryCluster;
            o.subjectName = subjectName;
            return o;
        }
    }
}

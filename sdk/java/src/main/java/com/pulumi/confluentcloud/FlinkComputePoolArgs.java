// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud;

import com.pulumi.confluentcloud.inputs.FlinkComputePoolEnvironmentArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FlinkComputePoolArgs extends com.pulumi.resources.ResourceArgs {

    public static final FlinkComputePoolArgs Empty = new FlinkComputePoolArgs();

    /**
     * The cloud service provider that runs the Flink Compute Pool.
     * 
     */
    @Import(name="cloud", required=true)
    private Output<String> cloud;

    /**
     * @return The cloud service provider that runs the Flink Compute Pool.
     * 
     */
    public Output<String> cloud() {
        return this.cloud;
    }

    /**
     * The name of the Flink Compute Pool.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return The name of the Flink Compute Pool.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     * 
     */
    @Import(name="environment", required=true)
    private Output<FlinkComputePoolEnvironmentArgs> environment;

    /**
     * @return Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     * 
     */
    public Output<FlinkComputePoolEnvironmentArgs> environment() {
        return this.environment;
    }

    /**
     * Maximum number of Confluent Flink Units (CFUs) that the Flink compute pool should auto-scale to. The accepted values are: `5` and `10`.
     * 
     */
    @Import(name="maxCfu")
    private @Nullable Output<Integer> maxCfu;

    /**
     * @return Maximum number of Confluent Flink Units (CFUs) that the Flink compute pool should auto-scale to. The accepted values are: `5` and `10`.
     * 
     */
    public Optional<Output<Integer>> maxCfu() {
        return Optional.ofNullable(this.maxCfu);
    }

    /**
     * The cloud service provider region that hosts the Flink Compute Pool.
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return The cloud service provider region that hosts the Flink Compute Pool.
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    private FlinkComputePoolArgs() {}

    private FlinkComputePoolArgs(FlinkComputePoolArgs $) {
        this.cloud = $.cloud;
        this.displayName = $.displayName;
        this.environment = $.environment;
        this.maxCfu = $.maxCfu;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlinkComputePoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlinkComputePoolArgs $;

        public Builder() {
            $ = new FlinkComputePoolArgs();
        }

        public Builder(FlinkComputePoolArgs defaults) {
            $ = new FlinkComputePoolArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cloud The cloud service provider that runs the Flink Compute Pool.
         * 
         * @return builder
         * 
         */
        public Builder cloud(Output<String> cloud) {
            $.cloud = cloud;
            return this;
        }

        /**
         * @param cloud The cloud service provider that runs the Flink Compute Pool.
         * 
         * @return builder
         * 
         */
        public Builder cloud(String cloud) {
            return cloud(Output.of(cloud));
        }

        /**
         * @param displayName The name of the Flink Compute Pool.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The name of the Flink Compute Pool.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param environment Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
         * 
         * @return builder
         * 
         */
        public Builder environment(Output<FlinkComputePoolEnvironmentArgs> environment) {
            $.environment = environment;
            return this;
        }

        /**
         * @param environment Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
         * 
         * @return builder
         * 
         */
        public Builder environment(FlinkComputePoolEnvironmentArgs environment) {
            return environment(Output.of(environment));
        }

        /**
         * @param maxCfu Maximum number of Confluent Flink Units (CFUs) that the Flink compute pool should auto-scale to. The accepted values are: `5` and `10`.
         * 
         * @return builder
         * 
         */
        public Builder maxCfu(@Nullable Output<Integer> maxCfu) {
            $.maxCfu = maxCfu;
            return this;
        }

        /**
         * @param maxCfu Maximum number of Confluent Flink Units (CFUs) that the Flink compute pool should auto-scale to. The accepted values are: `5` and `10`.
         * 
         * @return builder
         * 
         */
        public Builder maxCfu(Integer maxCfu) {
            return maxCfu(Output.of(maxCfu));
        }

        /**
         * @param region The cloud service provider region that hosts the Flink Compute Pool.
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The cloud service provider region that hosts the Flink Compute Pool.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        public FlinkComputePoolArgs build() {
            if ($.cloud == null) {
                throw new MissingRequiredPropertyException("FlinkComputePoolArgs", "cloud");
            }
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("FlinkComputePoolArgs", "displayName");
            }
            if ($.environment == null) {
                throw new MissingRequiredPropertyException("FlinkComputePoolArgs", "environment");
            }
            if ($.region == null) {
                throw new MissingRequiredPropertyException("FlinkComputePoolArgs", "region");
            }
            return $;
        }
    }

}

// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud;

import com.pulumi.confluentcloud.inputs.ConnectArtifactEnvironmentArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectArtifactArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectArtifactArgs Empty = new ConnectArtifactArgs();

    /**
     * The artifact file for Connect Artifact in `JAR` or `ZIP` format. This can be relative or absolute path
     * 
     */
    @Import(name="artifactFile")
    private @Nullable Output<String> artifactFile;

    /**
     * @return The artifact file for Connect Artifact in `JAR` or `ZIP` format. This can be relative or absolute path
     * 
     */
    public Optional<Output<String>> artifactFile() {
        return Optional.ofNullable(this.artifactFile);
    }

    /**
     * Cloud provider where the Connect Artifact archive is uploaded.
     * 
     */
    @Import(name="cloud", required=true)
    private Output<String> cloud;

    /**
     * @return Cloud provider where the Connect Artifact archive is uploaded.
     * 
     */
    public Output<String> cloud() {
        return this.cloud;
    }

    /**
     * Archive format of the Connect Artifact. Supported formats are `JAR` and `ZIP`.
     * 
     */
    @Import(name="contentFormat", required=true)
    private Output<String> contentFormat;

    /**
     * @return Archive format of the Connect Artifact. Supported formats are `JAR` and `ZIP`.
     * 
     */
    public Output<String> contentFormat() {
        return this.contentFormat;
    }

    /**
     * Description of the Connect Artifact.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the Connect Artifact.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The unique name of the Connect Artifact per cloud, environment scope.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return The unique name of the Connect Artifact per cloud, environment scope.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     * 
     */
    @Import(name="environment", required=true)
    private Output<ConnectArtifactEnvironmentArgs> environment;

    /**
     * @return Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     * 
     */
    public Output<ConnectArtifactEnvironmentArgs> environment() {
        return this.environment;
    }

    private ConnectArtifactArgs() {}

    private ConnectArtifactArgs(ConnectArtifactArgs $) {
        this.artifactFile = $.artifactFile;
        this.cloud = $.cloud;
        this.contentFormat = $.contentFormat;
        this.description = $.description;
        this.displayName = $.displayName;
        this.environment = $.environment;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectArtifactArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectArtifactArgs $;

        public Builder() {
            $ = new ConnectArtifactArgs();
        }

        public Builder(ConnectArtifactArgs defaults) {
            $ = new ConnectArtifactArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param artifactFile The artifact file for Connect Artifact in `JAR` or `ZIP` format. This can be relative or absolute path
         * 
         * @return builder
         * 
         */
        public Builder artifactFile(@Nullable Output<String> artifactFile) {
            $.artifactFile = artifactFile;
            return this;
        }

        /**
         * @param artifactFile The artifact file for Connect Artifact in `JAR` or `ZIP` format. This can be relative or absolute path
         * 
         * @return builder
         * 
         */
        public Builder artifactFile(String artifactFile) {
            return artifactFile(Output.of(artifactFile));
        }

        /**
         * @param cloud Cloud provider where the Connect Artifact archive is uploaded.
         * 
         * @return builder
         * 
         */
        public Builder cloud(Output<String> cloud) {
            $.cloud = cloud;
            return this;
        }

        /**
         * @param cloud Cloud provider where the Connect Artifact archive is uploaded.
         * 
         * @return builder
         * 
         */
        public Builder cloud(String cloud) {
            return cloud(Output.of(cloud));
        }

        /**
         * @param contentFormat Archive format of the Connect Artifact. Supported formats are `JAR` and `ZIP`.
         * 
         * @return builder
         * 
         */
        public Builder contentFormat(Output<String> contentFormat) {
            $.contentFormat = contentFormat;
            return this;
        }

        /**
         * @param contentFormat Archive format of the Connect Artifact. Supported formats are `JAR` and `ZIP`.
         * 
         * @return builder
         * 
         */
        public Builder contentFormat(String contentFormat) {
            return contentFormat(Output.of(contentFormat));
        }

        /**
         * @param description Description of the Connect Artifact.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the Connect Artifact.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName The unique name of the Connect Artifact per cloud, environment scope.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The unique name of the Connect Artifact per cloud, environment scope.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param environment Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
         * 
         * @return builder
         * 
         */
        public Builder environment(Output<ConnectArtifactEnvironmentArgs> environment) {
            $.environment = environment;
            return this;
        }

        /**
         * @param environment Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
         * 
         * @return builder
         * 
         */
        public Builder environment(ConnectArtifactEnvironmentArgs environment) {
            return environment(Output.of(environment));
        }

        public ConnectArtifactArgs build() {
            if ($.cloud == null) {
                throw new MissingRequiredPropertyException("ConnectArtifactArgs", "cloud");
            }
            if ($.contentFormat == null) {
                throw new MissingRequiredPropertyException("ConnectArtifactArgs", "contentFormat");
            }
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("ConnectArtifactArgs", "displayName");
            }
            if ($.environment == null) {
                throw new MissingRequiredPropertyException("ConnectArtifactArgs", "environment");
            }
            return $;
        }
    }

}

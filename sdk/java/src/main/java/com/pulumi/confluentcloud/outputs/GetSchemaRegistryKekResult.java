// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.outputs;

import com.pulumi.confluentcloud.outputs.GetSchemaRegistryKekCredentials;
import com.pulumi.confluentcloud.outputs.GetSchemaRegistryKekSchemaRegistryCluster;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSchemaRegistryKekResult {
    private @Nullable GetSchemaRegistryKekCredentials credentials;
    /**
     * @return (Optional String) The optional description for the KEK.
     * 
     */
    private String doc;
    /**
     * @return (Optional Boolean) The optional flag to control whether a kek should be soft or hard deleted. Defaults to `false`.
     * 
     */
    private Boolean hardDelete;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return (Required String) The ID of the key from KMS.
     * - When using the AWS KMS, this is an ARN, for example, `arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789abc`.
     * - When using the Azure Key Vault, this is a Key Identifier (URI), for example, `https://test-keyvault1.vault.azure.net/keys/test-key1/1234567890abcdef1234567890abcdef`.
     * - When using the GCP KMS, this is a resource name, for example, `projects/test-project1/locations/us-central1/keyRings/test-keyRing1/cryptoKeys/test-key1`.
     * 
     */
    private String kmsKeyId;
    /**
     * @return (Required String) The type of Key Management Service (KMS). The supported values include `aws-kms`, `azure-kms`, and `gcp-kms`. Additionally, custom KMS types are supported as well.
     * 
     */
    private String kmsType;
    /**
     * @return (Required String) The custom property name (for example, `KeyUsage`).
     * 
     */
    private String name;
    /**
     * @return (Optional Map) The custom properties to set (for example, `KeyUsage=ENCRYPT_DECRYPT`, `KeyState=Enabled`):
     * 
     */
    private Map<String,String> properties;
    private @Nullable String restEndpoint;
    private @Nullable GetSchemaRegistryKekSchemaRegistryCluster schemaRegistryCluster;
    /**
     * @return (Optional Boolean) The optional flag to control whether the DEK Registry has shared access to the KMS. Defaults to `false`.
     * 
     */
    private Boolean shared;

    private GetSchemaRegistryKekResult() {}
    public Optional<GetSchemaRegistryKekCredentials> credentials() {
        return Optional.ofNullable(this.credentials);
    }
    /**
     * @return (Optional String) The optional description for the KEK.
     * 
     */
    public String doc() {
        return this.doc;
    }
    /**
     * @return (Optional Boolean) The optional flag to control whether a kek should be soft or hard deleted. Defaults to `false`.
     * 
     */
    public Boolean hardDelete() {
        return this.hardDelete;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return (Required String) The ID of the key from KMS.
     * - When using the AWS KMS, this is an ARN, for example, `arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789abc`.
     * - When using the Azure Key Vault, this is a Key Identifier (URI), for example, `https://test-keyvault1.vault.azure.net/keys/test-key1/1234567890abcdef1234567890abcdef`.
     * - When using the GCP KMS, this is a resource name, for example, `projects/test-project1/locations/us-central1/keyRings/test-keyRing1/cryptoKeys/test-key1`.
     * 
     */
    public String kmsKeyId() {
        return this.kmsKeyId;
    }
    /**
     * @return (Required String) The type of Key Management Service (KMS). The supported values include `aws-kms`, `azure-kms`, and `gcp-kms`. Additionally, custom KMS types are supported as well.
     * 
     */
    public String kmsType() {
        return this.kmsType;
    }
    /**
     * @return (Required String) The custom property name (for example, `KeyUsage`).
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return (Optional Map) The custom properties to set (for example, `KeyUsage=ENCRYPT_DECRYPT`, `KeyState=Enabled`):
     * 
     */
    public Map<String,String> properties() {
        return this.properties;
    }
    public Optional<String> restEndpoint() {
        return Optional.ofNullable(this.restEndpoint);
    }
    public Optional<GetSchemaRegistryKekSchemaRegistryCluster> schemaRegistryCluster() {
        return Optional.ofNullable(this.schemaRegistryCluster);
    }
    /**
     * @return (Optional Boolean) The optional flag to control whether the DEK Registry has shared access to the KMS. Defaults to `false`.
     * 
     */
    public Boolean shared() {
        return this.shared;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSchemaRegistryKekResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable GetSchemaRegistryKekCredentials credentials;
        private String doc;
        private Boolean hardDelete;
        private String id;
        private String kmsKeyId;
        private String kmsType;
        private String name;
        private Map<String,String> properties;
        private @Nullable String restEndpoint;
        private @Nullable GetSchemaRegistryKekSchemaRegistryCluster schemaRegistryCluster;
        private Boolean shared;
        public Builder() {}
        public Builder(GetSchemaRegistryKekResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.credentials = defaults.credentials;
    	      this.doc = defaults.doc;
    	      this.hardDelete = defaults.hardDelete;
    	      this.id = defaults.id;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.kmsType = defaults.kmsType;
    	      this.name = defaults.name;
    	      this.properties = defaults.properties;
    	      this.restEndpoint = defaults.restEndpoint;
    	      this.schemaRegistryCluster = defaults.schemaRegistryCluster;
    	      this.shared = defaults.shared;
        }

        @CustomType.Setter
        public Builder credentials(@Nullable GetSchemaRegistryKekCredentials credentials) {

            this.credentials = credentials;
            return this;
        }
        @CustomType.Setter
        public Builder doc(String doc) {
            if (doc == null) {
              throw new MissingRequiredPropertyException("GetSchemaRegistryKekResult", "doc");
            }
            this.doc = doc;
            return this;
        }
        @CustomType.Setter
        public Builder hardDelete(Boolean hardDelete) {
            if (hardDelete == null) {
              throw new MissingRequiredPropertyException("GetSchemaRegistryKekResult", "hardDelete");
            }
            this.hardDelete = hardDelete;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSchemaRegistryKekResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyId(String kmsKeyId) {
            if (kmsKeyId == null) {
              throw new MissingRequiredPropertyException("GetSchemaRegistryKekResult", "kmsKeyId");
            }
            this.kmsKeyId = kmsKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder kmsType(String kmsType) {
            if (kmsType == null) {
              throw new MissingRequiredPropertyException("GetSchemaRegistryKekResult", "kmsType");
            }
            this.kmsType = kmsType;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSchemaRegistryKekResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder properties(Map<String,String> properties) {
            if (properties == null) {
              throw new MissingRequiredPropertyException("GetSchemaRegistryKekResult", "properties");
            }
            this.properties = properties;
            return this;
        }
        @CustomType.Setter
        public Builder restEndpoint(@Nullable String restEndpoint) {

            this.restEndpoint = restEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder schemaRegistryCluster(@Nullable GetSchemaRegistryKekSchemaRegistryCluster schemaRegistryCluster) {

            this.schemaRegistryCluster = schemaRegistryCluster;
            return this;
        }
        @CustomType.Setter
        public Builder shared(Boolean shared) {
            if (shared == null) {
              throw new MissingRequiredPropertyException("GetSchemaRegistryKekResult", "shared");
            }
            this.shared = shared;
            return this;
        }
        public GetSchemaRegistryKekResult build() {
            final var _resultValue = new GetSchemaRegistryKekResult();
            _resultValue.credentials = credentials;
            _resultValue.doc = doc;
            _resultValue.hardDelete = hardDelete;
            _resultValue.id = id;
            _resultValue.kmsKeyId = kmsKeyId;
            _resultValue.kmsType = kmsType;
            _resultValue.name = name;
            _resultValue.properties = properties;
            _resultValue.restEndpoint = restEndpoint;
            _resultValue.schemaRegistryCluster = schemaRegistryCluster;
            _resultValue.shared = shared;
            return _resultValue;
        }
    }
}

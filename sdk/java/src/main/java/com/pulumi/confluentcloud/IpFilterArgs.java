// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IpFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final IpFilterArgs Empty = new IpFilterArgs();

    /**
     * A human-readable name for an IP Filter. Can contain any unicode letter or number, the ASCII space character, or any of the following special characters: `[`, `]`, `|`, `&amp;`, `+`, `-`, `_`, `/`, `.`, `,`.
     * 
     */
    @Import(name="filterName", required=true)
    private Output<String> filterName;

    /**
     * @return A human-readable name for an IP Filter. Can contain any unicode letter or number, the ASCII space character, or any of the following special characters: `[`, `]`, `|`, `&amp;`, `+`, `-`, `_`, `/`, `.`, `,`.
     * 
     */
    public Output<String> filterName() {
        return this.filterName;
    }

    /**
     * A list of IP Groups.
     * 
     */
    @Import(name="ipGroups", required=true)
    private Output<List<String>> ipGroups;

    /**
     * @return A list of IP Groups.
     * 
     */
    public Output<List<String>> ipGroups() {
        return this.ipGroups;
    }

    /**
     * Scope of resources covered by this IP Filter. Resource group must be set to &#39;multiple&#39; in order to use this property. During update operations, note that the operation groups passed in will replace the list of existing operation groups (passing in an empty list will remove all operation groups) from the filter (in line with the behavior for `ipGroups` attribute).
     * 
     */
    @Import(name="operationGroups")
    private @Nullable Output<List<String>> operationGroups;

    /**
     * @return Scope of resources covered by this IP Filter. Resource group must be set to &#39;multiple&#39; in order to use this property. During update operations, note that the operation groups passed in will replace the list of existing operation groups (passing in an empty list will remove all operation groups) from the filter (in line with the behavior for `ipGroups` attribute).
     * 
     */
    public Optional<Output<List<String>>> operationGroups() {
        return Optional.ofNullable(this.operationGroups);
    }

    /**
     * Scope of resources covered by this IP Filter. Available resource groups include `&#34;management&#34;` and `&#34;multiple&#34;`.
     * 
     */
    @Import(name="resourceGroup", required=true)
    private Output<String> resourceGroup;

    /**
     * @return Scope of resources covered by this IP Filter. Available resource groups include `&#34;management&#34;` and `&#34;multiple&#34;`.
     * 
     */
    public Output<String> resourceGroup() {
        return this.resourceGroup;
    }

    /**
     * A CRN that specifies the scope of the IP Filter, specifically the organization or environment. Without specifying this property, the IP Filter would apply to the whole organization. For example, `&#34;crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa&#34;` or `data.confluent_organization.resource_name`.
     * 
     */
    @Import(name="resourceScope")
    private @Nullable Output<String> resourceScope;

    /**
     * @return A CRN that specifies the scope of the IP Filter, specifically the organization or environment. Without specifying this property, the IP Filter would apply to the whole organization. For example, `&#34;crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa&#34;` or `data.confluent_organization.resource_name`.
     * 
     */
    public Optional<Output<String>> resourceScope() {
        return Optional.ofNullable(this.resourceScope);
    }

    private IpFilterArgs() {}

    private IpFilterArgs(IpFilterArgs $) {
        this.filterName = $.filterName;
        this.ipGroups = $.ipGroups;
        this.operationGroups = $.operationGroups;
        this.resourceGroup = $.resourceGroup;
        this.resourceScope = $.resourceScope;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IpFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IpFilterArgs $;

        public Builder() {
            $ = new IpFilterArgs();
        }

        public Builder(IpFilterArgs defaults) {
            $ = new IpFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param filterName A human-readable name for an IP Filter. Can contain any unicode letter or number, the ASCII space character, or any of the following special characters: `[`, `]`, `|`, `&amp;`, `+`, `-`, `_`, `/`, `.`, `,`.
         * 
         * @return builder
         * 
         */
        public Builder filterName(Output<String> filterName) {
            $.filterName = filterName;
            return this;
        }

        /**
         * @param filterName A human-readable name for an IP Filter. Can contain any unicode letter or number, the ASCII space character, or any of the following special characters: `[`, `]`, `|`, `&amp;`, `+`, `-`, `_`, `/`, `.`, `,`.
         * 
         * @return builder
         * 
         */
        public Builder filterName(String filterName) {
            return filterName(Output.of(filterName));
        }

        /**
         * @param ipGroups A list of IP Groups.
         * 
         * @return builder
         * 
         */
        public Builder ipGroups(Output<List<String>> ipGroups) {
            $.ipGroups = ipGroups;
            return this;
        }

        /**
         * @param ipGroups A list of IP Groups.
         * 
         * @return builder
         * 
         */
        public Builder ipGroups(List<String> ipGroups) {
            return ipGroups(Output.of(ipGroups));
        }

        /**
         * @param ipGroups A list of IP Groups.
         * 
         * @return builder
         * 
         */
        public Builder ipGroups(String... ipGroups) {
            return ipGroups(List.of(ipGroups));
        }

        /**
         * @param operationGroups Scope of resources covered by this IP Filter. Resource group must be set to &#39;multiple&#39; in order to use this property. During update operations, note that the operation groups passed in will replace the list of existing operation groups (passing in an empty list will remove all operation groups) from the filter (in line with the behavior for `ipGroups` attribute).
         * 
         * @return builder
         * 
         */
        public Builder operationGroups(@Nullable Output<List<String>> operationGroups) {
            $.operationGroups = operationGroups;
            return this;
        }

        /**
         * @param operationGroups Scope of resources covered by this IP Filter. Resource group must be set to &#39;multiple&#39; in order to use this property. During update operations, note that the operation groups passed in will replace the list of existing operation groups (passing in an empty list will remove all operation groups) from the filter (in line with the behavior for `ipGroups` attribute).
         * 
         * @return builder
         * 
         */
        public Builder operationGroups(List<String> operationGroups) {
            return operationGroups(Output.of(operationGroups));
        }

        /**
         * @param operationGroups Scope of resources covered by this IP Filter. Resource group must be set to &#39;multiple&#39; in order to use this property. During update operations, note that the operation groups passed in will replace the list of existing operation groups (passing in an empty list will remove all operation groups) from the filter (in line with the behavior for `ipGroups` attribute).
         * 
         * @return builder
         * 
         */
        public Builder operationGroups(String... operationGroups) {
            return operationGroups(List.of(operationGroups));
        }

        /**
         * @param resourceGroup Scope of resources covered by this IP Filter. Available resource groups include `&#34;management&#34;` and `&#34;multiple&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroup(Output<String> resourceGroup) {
            $.resourceGroup = resourceGroup;
            return this;
        }

        /**
         * @param resourceGroup Scope of resources covered by this IP Filter. Available resource groups include `&#34;management&#34;` and `&#34;multiple&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroup(String resourceGroup) {
            return resourceGroup(Output.of(resourceGroup));
        }

        /**
         * @param resourceScope A CRN that specifies the scope of the IP Filter, specifically the organization or environment. Without specifying this property, the IP Filter would apply to the whole organization. For example, `&#34;crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa&#34;` or `data.confluent_organization.resource_name`.
         * 
         * @return builder
         * 
         */
        public Builder resourceScope(@Nullable Output<String> resourceScope) {
            $.resourceScope = resourceScope;
            return this;
        }

        /**
         * @param resourceScope A CRN that specifies the scope of the IP Filter, specifically the organization or environment. Without specifying this property, the IP Filter would apply to the whole organization. For example, `&#34;crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa&#34;` or `data.confluent_organization.resource_name`.
         * 
         * @return builder
         * 
         */
        public Builder resourceScope(String resourceScope) {
            return resourceScope(Output.of(resourceScope));
        }

        public IpFilterArgs build() {
            if ($.filterName == null) {
                throw new MissingRequiredPropertyException("IpFilterArgs", "filterName");
            }
            if ($.ipGroups == null) {
                throw new MissingRequiredPropertyException("IpFilterArgs", "ipGroups");
            }
            if ($.resourceGroup == null) {
                throw new MissingRequiredPropertyException("IpFilterArgs", "resourceGroup");
            }
            return $;
        }
    }

}

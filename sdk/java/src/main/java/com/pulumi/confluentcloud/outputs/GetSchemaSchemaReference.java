// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSchemaSchemaReference {
    /**
     * @return (Optional String) A user-defined name that can be used to reference the rule.
     * 
     */
    private String name;
    /**
     * @return The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`. Schemas evolve safely, following a compatibility mode defined, under a subject name.
     * 
     */
    private String subjectName;
    /**
     * @return (Required Integer) The version of the Schema, for example, `4`.
     * 
     */
    private Integer version;

    private GetSchemaSchemaReference() {}
    /**
     * @return (Optional String) A user-defined name that can be used to reference the rule.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`. Schemas evolve safely, following a compatibility mode defined, under a subject name.
     * 
     */
    public String subjectName() {
        return this.subjectName;
    }
    /**
     * @return (Required Integer) The version of the Schema, for example, `4`.
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSchemaSchemaReference defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String name;
        private String subjectName;
        private Integer version;
        public Builder() {}
        public Builder(GetSchemaSchemaReference defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.name = defaults.name;
    	      this.subjectName = defaults.subjectName;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSchemaSchemaReference", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder subjectName(String subjectName) {
            if (subjectName == null) {
              throw new MissingRequiredPropertyException("GetSchemaSchemaReference", "subjectName");
            }
            this.subjectName = subjectName;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetSchemaSchemaReference", "version");
            }
            this.version = version;
            return this;
        }
        public GetSchemaSchemaReference build() {
            final var _resultValue = new GetSchemaSchemaReference();
            _resultValue.name = name;
            _resultValue.subjectName = subjectName;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}

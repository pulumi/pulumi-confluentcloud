// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class KafkaClusterConfigCredentialsArgs extends com.pulumi.resources.ResourceArgs {

    public static final KafkaClusterConfigCredentialsArgs Empty = new KafkaClusterConfigCredentialsArgs();

    /**
     * The Kafka API Key.
     * 
     */
    @Import(name="key", required=true)
    private Output<String> key;

    /**
     * @return The Kafka API Key.
     * 
     */
    public Output<String> key() {
        return this.key;
    }

    /**
     * The Kafka API Secret.
     * 
     * &gt; **Note:** A Kafka API key consists of a key and a secret. Kafka API keys are required to interact with Kafka clusters in Confluent Cloud. Each Kafka API key is valid for one specific Kafka cluster.
     * 
     * &gt; **Note:** Use Option #2 to simplify the key rotation process. When using Option #1, to rotate a Kafka API key, create a new Kafka API key, update the `credentials` block in all configuration files to use the new Kafka API key, run `pulumi up -target=&#34;confluent_kafka_cluster_config.orders&#34;`, and remove the old Kafka API key. Alternatively, in case the old Kafka API Key was deleted already, you might need to run `pulumi preview -refresh=false -target=&#34;confluent_kafka_cluster_config.orders&#34; -out=rotate-kafka-api-key` and `pulumi up rotate-kafka-api-key` instead.
     * 
     */
    @Import(name="secret", required=true)
    private Output<String> secret;

    /**
     * @return The Kafka API Secret.
     * 
     * &gt; **Note:** A Kafka API key consists of a key and a secret. Kafka API keys are required to interact with Kafka clusters in Confluent Cloud. Each Kafka API key is valid for one specific Kafka cluster.
     * 
     * &gt; **Note:** Use Option #2 to simplify the key rotation process. When using Option #1, to rotate a Kafka API key, create a new Kafka API key, update the `credentials` block in all configuration files to use the new Kafka API key, run `pulumi up -target=&#34;confluent_kafka_cluster_config.orders&#34;`, and remove the old Kafka API key. Alternatively, in case the old Kafka API Key was deleted already, you might need to run `pulumi preview -refresh=false -target=&#34;confluent_kafka_cluster_config.orders&#34; -out=rotate-kafka-api-key` and `pulumi up rotate-kafka-api-key` instead.
     * 
     */
    public Output<String> secret() {
        return this.secret;
    }

    private KafkaClusterConfigCredentialsArgs() {}

    private KafkaClusterConfigCredentialsArgs(KafkaClusterConfigCredentialsArgs $) {
        this.key = $.key;
        this.secret = $.secret;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KafkaClusterConfigCredentialsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KafkaClusterConfigCredentialsArgs $;

        public Builder() {
            $ = new KafkaClusterConfigCredentialsArgs();
        }

        public Builder(KafkaClusterConfigCredentialsArgs defaults) {
            $ = new KafkaClusterConfigCredentialsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param key The Kafka API Key.
         * 
         * @return builder
         * 
         */
        public Builder key(Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key The Kafka API Key.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param secret The Kafka API Secret.
         * 
         * &gt; **Note:** A Kafka API key consists of a key and a secret. Kafka API keys are required to interact with Kafka clusters in Confluent Cloud. Each Kafka API key is valid for one specific Kafka cluster.
         * 
         * &gt; **Note:** Use Option #2 to simplify the key rotation process. When using Option #1, to rotate a Kafka API key, create a new Kafka API key, update the `credentials` block in all configuration files to use the new Kafka API key, run `pulumi up -target=&#34;confluent_kafka_cluster_config.orders&#34;`, and remove the old Kafka API key. Alternatively, in case the old Kafka API Key was deleted already, you might need to run `pulumi preview -refresh=false -target=&#34;confluent_kafka_cluster_config.orders&#34; -out=rotate-kafka-api-key` and `pulumi up rotate-kafka-api-key` instead.
         * 
         * @return builder
         * 
         */
        public Builder secret(Output<String> secret) {
            $.secret = secret;
            return this;
        }

        /**
         * @param secret The Kafka API Secret.
         * 
         * &gt; **Note:** A Kafka API key consists of a key and a secret. Kafka API keys are required to interact with Kafka clusters in Confluent Cloud. Each Kafka API key is valid for one specific Kafka cluster.
         * 
         * &gt; **Note:** Use Option #2 to simplify the key rotation process. When using Option #1, to rotate a Kafka API key, create a new Kafka API key, update the `credentials` block in all configuration files to use the new Kafka API key, run `pulumi up -target=&#34;confluent_kafka_cluster_config.orders&#34;`, and remove the old Kafka API key. Alternatively, in case the old Kafka API Key was deleted already, you might need to run `pulumi preview -refresh=false -target=&#34;confluent_kafka_cluster_config.orders&#34; -out=rotate-kafka-api-key` and `pulumi up rotate-kafka-api-key` instead.
         * 
         * @return builder
         * 
         */
        public Builder secret(String secret) {
            return secret(Output.of(secret));
        }

        public KafkaClusterConfigCredentialsArgs build() {
            if ($.key == null) {
                throw new MissingRequiredPropertyException("KafkaClusterConfigCredentialsArgs", "key");
            }
            if ($.secret == null) {
                throw new MissingRequiredPropertyException("KafkaClusterConfigCredentialsArgs", "secret");
            }
            return $;
        }
    }

}

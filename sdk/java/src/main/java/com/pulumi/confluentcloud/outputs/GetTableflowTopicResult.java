// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.outputs;

import com.pulumi.confluentcloud.outputs.GetTableflowTopicByobAw;
import com.pulumi.confluentcloud.outputs.GetTableflowTopicCredentials;
import com.pulumi.confluentcloud.outputs.GetTableflowTopicEnvironment;
import com.pulumi.confluentcloud.outputs.GetTableflowTopicKafkaCluster;
import com.pulumi.confluentcloud.outputs.GetTableflowTopicManagedStorage;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetTableflowTopicResult {
    /**
     * @return (Optional Configuration Block) supports the following:
     * 
     */
    private List<GetTableflowTopicByobAw> byobAws;
    private @Nullable GetTableflowTopicCredentials credentials;
    private String displayName;
    /**
     * @return (Optional Boolean) This flag determines whether to enable compaction for the Tableflow enabled topic.
     * 
     */
    private Boolean enableCompaction;
    /**
     * @return (Optional Boolean) This flag determines whether to enable partitioning for the Tableflow enabled topic.
     * 
     */
    private Boolean enablePartitioning;
    private GetTableflowTopicEnvironment environment;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private GetTableflowTopicKafkaCluster kafkaCluster;
    /**
     * @return (Optional Configuration Block) The configuration of the Confluent managed bucket.
     * 
     */
    private List<GetTableflowTopicManagedStorage> managedStorages;
    /**
     * @return (Optional String) The strategy to handle record failures in the Tableflow enabled topic during materialization. For `SKIP`, we skip the bad records and move to the next record. For `SUSPEND`, we suspend the materialization of the topic.
     * 
     */
    private String recordFailureStrategy;
    /**
     * @return (Optional String) The max age of snapshots (Iceberg) or versions (Delta) (snapshot/version expiration) to keep on the table in milliseconds for the Tableflow enabled topic.
     * 
     */
    private String retentionMs;
    /**
     * @return (Optional Boolean) Indicates whether the Tableflow should be suspended.
     * 
     */
    private Boolean suspended;
    /**
     * @return (Optional List) The supported table formats for the Tableflow-enabled topic.
     * 
     */
    private List<String> tableFormats;
    /**
     * @return (Optional String) The current storage path where the data and metadata is stored for this table.
     * 
     */
    private String tablePath;
    /**
     * @return (Optional String) Indicates the write mode of the Tableflow topic.
     * 
     */
    private String writeMode;

    private GetTableflowTopicResult() {}
    /**
     * @return (Optional Configuration Block) supports the following:
     * 
     */
    public List<GetTableflowTopicByobAw> byobAws() {
        return this.byobAws;
    }
    public Optional<GetTableflowTopicCredentials> credentials() {
        return Optional.ofNullable(this.credentials);
    }
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return (Optional Boolean) This flag determines whether to enable compaction for the Tableflow enabled topic.
     * 
     */
    public Boolean enableCompaction() {
        return this.enableCompaction;
    }
    /**
     * @return (Optional Boolean) This flag determines whether to enable partitioning for the Tableflow enabled topic.
     * 
     */
    public Boolean enablePartitioning() {
        return this.enablePartitioning;
    }
    public GetTableflowTopicEnvironment environment() {
        return this.environment;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public GetTableflowTopicKafkaCluster kafkaCluster() {
        return this.kafkaCluster;
    }
    /**
     * @return (Optional Configuration Block) The configuration of the Confluent managed bucket.
     * 
     */
    public List<GetTableflowTopicManagedStorage> managedStorages() {
        return this.managedStorages;
    }
    /**
     * @return (Optional String) The strategy to handle record failures in the Tableflow enabled topic during materialization. For `SKIP`, we skip the bad records and move to the next record. For `SUSPEND`, we suspend the materialization of the topic.
     * 
     */
    public String recordFailureStrategy() {
        return this.recordFailureStrategy;
    }
    /**
     * @return (Optional String) The max age of snapshots (Iceberg) or versions (Delta) (snapshot/version expiration) to keep on the table in milliseconds for the Tableflow enabled topic.
     * 
     */
    public String retentionMs() {
        return this.retentionMs;
    }
    /**
     * @return (Optional Boolean) Indicates whether the Tableflow should be suspended.
     * 
     */
    public Boolean suspended() {
        return this.suspended;
    }
    /**
     * @return (Optional List) The supported table formats for the Tableflow-enabled topic.
     * 
     */
    public List<String> tableFormats() {
        return this.tableFormats;
    }
    /**
     * @return (Optional String) The current storage path where the data and metadata is stored for this table.
     * 
     */
    public String tablePath() {
        return this.tablePath;
    }
    /**
     * @return (Optional String) Indicates the write mode of the Tableflow topic.
     * 
     */
    public String writeMode() {
        return this.writeMode;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTableflowTopicResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetTableflowTopicByobAw> byobAws;
        private @Nullable GetTableflowTopicCredentials credentials;
        private String displayName;
        private Boolean enableCompaction;
        private Boolean enablePartitioning;
        private GetTableflowTopicEnvironment environment;
        private String id;
        private GetTableflowTopicKafkaCluster kafkaCluster;
        private List<GetTableflowTopicManagedStorage> managedStorages;
        private String recordFailureStrategy;
        private String retentionMs;
        private Boolean suspended;
        private List<String> tableFormats;
        private String tablePath;
        private String writeMode;
        public Builder() {}
        public Builder(GetTableflowTopicResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.byobAws = defaults.byobAws;
    	      this.credentials = defaults.credentials;
    	      this.displayName = defaults.displayName;
    	      this.enableCompaction = defaults.enableCompaction;
    	      this.enablePartitioning = defaults.enablePartitioning;
    	      this.environment = defaults.environment;
    	      this.id = defaults.id;
    	      this.kafkaCluster = defaults.kafkaCluster;
    	      this.managedStorages = defaults.managedStorages;
    	      this.recordFailureStrategy = defaults.recordFailureStrategy;
    	      this.retentionMs = defaults.retentionMs;
    	      this.suspended = defaults.suspended;
    	      this.tableFormats = defaults.tableFormats;
    	      this.tablePath = defaults.tablePath;
    	      this.writeMode = defaults.writeMode;
        }

        @CustomType.Setter
        public Builder byobAws(List<GetTableflowTopicByobAw> byobAws) {
            if (byobAws == null) {
              throw new MissingRequiredPropertyException("GetTableflowTopicResult", "byobAws");
            }
            this.byobAws = byobAws;
            return this;
        }
        public Builder byobAws(GetTableflowTopicByobAw... byobAws) {
            return byobAws(List.of(byobAws));
        }
        @CustomType.Setter
        public Builder credentials(@Nullable GetTableflowTopicCredentials credentials) {

            this.credentials = credentials;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetTableflowTopicResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder enableCompaction(Boolean enableCompaction) {
            if (enableCompaction == null) {
              throw new MissingRequiredPropertyException("GetTableflowTopicResult", "enableCompaction");
            }
            this.enableCompaction = enableCompaction;
            return this;
        }
        @CustomType.Setter
        public Builder enablePartitioning(Boolean enablePartitioning) {
            if (enablePartitioning == null) {
              throw new MissingRequiredPropertyException("GetTableflowTopicResult", "enablePartitioning");
            }
            this.enablePartitioning = enablePartitioning;
            return this;
        }
        @CustomType.Setter
        public Builder environment(GetTableflowTopicEnvironment environment) {
            if (environment == null) {
              throw new MissingRequiredPropertyException("GetTableflowTopicResult", "environment");
            }
            this.environment = environment;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetTableflowTopicResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder kafkaCluster(GetTableflowTopicKafkaCluster kafkaCluster) {
            if (kafkaCluster == null) {
              throw new MissingRequiredPropertyException("GetTableflowTopicResult", "kafkaCluster");
            }
            this.kafkaCluster = kafkaCluster;
            return this;
        }
        @CustomType.Setter
        public Builder managedStorages(List<GetTableflowTopicManagedStorage> managedStorages) {
            if (managedStorages == null) {
              throw new MissingRequiredPropertyException("GetTableflowTopicResult", "managedStorages");
            }
            this.managedStorages = managedStorages;
            return this;
        }
        public Builder managedStorages(GetTableflowTopicManagedStorage... managedStorages) {
            return managedStorages(List.of(managedStorages));
        }
        @CustomType.Setter
        public Builder recordFailureStrategy(String recordFailureStrategy) {
            if (recordFailureStrategy == null) {
              throw new MissingRequiredPropertyException("GetTableflowTopicResult", "recordFailureStrategy");
            }
            this.recordFailureStrategy = recordFailureStrategy;
            return this;
        }
        @CustomType.Setter
        public Builder retentionMs(String retentionMs) {
            if (retentionMs == null) {
              throw new MissingRequiredPropertyException("GetTableflowTopicResult", "retentionMs");
            }
            this.retentionMs = retentionMs;
            return this;
        }
        @CustomType.Setter
        public Builder suspended(Boolean suspended) {
            if (suspended == null) {
              throw new MissingRequiredPropertyException("GetTableflowTopicResult", "suspended");
            }
            this.suspended = suspended;
            return this;
        }
        @CustomType.Setter
        public Builder tableFormats(List<String> tableFormats) {
            if (tableFormats == null) {
              throw new MissingRequiredPropertyException("GetTableflowTopicResult", "tableFormats");
            }
            this.tableFormats = tableFormats;
            return this;
        }
        public Builder tableFormats(String... tableFormats) {
            return tableFormats(List.of(tableFormats));
        }
        @CustomType.Setter
        public Builder tablePath(String tablePath) {
            if (tablePath == null) {
              throw new MissingRequiredPropertyException("GetTableflowTopicResult", "tablePath");
            }
            this.tablePath = tablePath;
            return this;
        }
        @CustomType.Setter
        public Builder writeMode(String writeMode) {
            if (writeMode == null) {
              throw new MissingRequiredPropertyException("GetTableflowTopicResult", "writeMode");
            }
            this.writeMode = writeMode;
            return this;
        }
        public GetTableflowTopicResult build() {
            final var _resultValue = new GetTableflowTopicResult();
            _resultValue.byobAws = byobAws;
            _resultValue.credentials = credentials;
            _resultValue.displayName = displayName;
            _resultValue.enableCompaction = enableCompaction;
            _resultValue.enablePartitioning = enablePartitioning;
            _resultValue.environment = environment;
            _resultValue.id = id;
            _resultValue.kafkaCluster = kafkaCluster;
            _resultValue.managedStorages = managedStorages;
            _resultValue.recordFailureStrategy = recordFailureStrategy;
            _resultValue.retentionMs = retentionMs;
            _resultValue.suspended = suspended;
            _resultValue.tableFormats = tableFormats;
            _resultValue.tablePath = tablePath;
            _resultValue.writeMode = writeMode;
            return _resultValue;
        }
    }
}

// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderOauthArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderOauthArgs Empty = new ProviderOauthArgs();

    /**
     * OAuth existing access token already fetched from external IDP
     * 
     */
    @Import(name="oauthExternalAccessToken")
    private @Nullable Output<String> oauthExternalAccessToken;

    /**
     * @return OAuth existing access token already fetched from external IDP
     * 
     */
    public Optional<Output<String>> oauthExternalAccessToken() {
        return Optional.ofNullable(this.oauthExternalAccessToken);
    }

    /**
     * OAuth client id from external token source
     * 
     */
    @Import(name="oauthExternalClientId")
    private @Nullable Output<String> oauthExternalClientId;

    /**
     * @return OAuth client id from external token source
     * 
     */
    public Optional<Output<String>> oauthExternalClientId() {
        return Optional.ofNullable(this.oauthExternalClientId);
    }

    /**
     * OAuth client secret from external token source
     * 
     */
    @Import(name="oauthExternalClientSecret")
    private @Nullable Output<String> oauthExternalClientSecret;

    /**
     * @return OAuth client secret from external token source
     * 
     */
    public Optional<Output<String>> oauthExternalClientSecret() {
        return Optional.ofNullable(this.oauthExternalClientSecret);
    }

    /**
     * OAuth access token scope
     * 
     */
    @Import(name="oauthExternalTokenScope")
    private @Nullable Output<String> oauthExternalTokenScope;

    /**
     * @return OAuth access token scope
     * 
     */
    public Optional<Output<String>> oauthExternalTokenScope() {
        return Optional.ofNullable(this.oauthExternalTokenScope);
    }

    /**
     * OAuth token URL to fetch access token from external IDP
     * 
     */
    @Import(name="oauthExternalTokenUrl")
    private @Nullable Output<String> oauthExternalTokenUrl;

    /**
     * @return OAuth token URL to fetch access token from external IDP
     * 
     */
    public Optional<Output<String>> oauthExternalTokenUrl() {
        return Optional.ofNullable(this.oauthExternalTokenUrl);
    }

    /**
     * OAuth identity pool id used for processing external token and exchange STS token
     * 
     */
    @Import(name="oauthIdentityPoolId", required=true)
    private Output<String> oauthIdentityPoolId;

    /**
     * @return OAuth identity pool id used for processing external token and exchange STS token
     * 
     */
    public Output<String> oauthIdentityPoolId() {
        return this.oauthIdentityPoolId;
    }

    /**
     * OAuth STS access token expired in second from Confluent Cloud
     * 
     */
    @Import(name="oauthStsTokenExpiredInSeconds")
    private @Nullable Output<String> oauthStsTokenExpiredInSeconds;

    /**
     * @return OAuth STS access token expired in second from Confluent Cloud
     * 
     */
    public Optional<Output<String>> oauthStsTokenExpiredInSeconds() {
        return Optional.ofNullable(this.oauthStsTokenExpiredInSeconds);
    }

    private ProviderOauthArgs() {}

    private ProviderOauthArgs(ProviderOauthArgs $) {
        this.oauthExternalAccessToken = $.oauthExternalAccessToken;
        this.oauthExternalClientId = $.oauthExternalClientId;
        this.oauthExternalClientSecret = $.oauthExternalClientSecret;
        this.oauthExternalTokenScope = $.oauthExternalTokenScope;
        this.oauthExternalTokenUrl = $.oauthExternalTokenUrl;
        this.oauthIdentityPoolId = $.oauthIdentityPoolId;
        this.oauthStsTokenExpiredInSeconds = $.oauthStsTokenExpiredInSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderOauthArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderOauthArgs $;

        public Builder() {
            $ = new ProviderOauthArgs();
        }

        public Builder(ProviderOauthArgs defaults) {
            $ = new ProviderOauthArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param oauthExternalAccessToken OAuth existing access token already fetched from external IDP
         * 
         * @return builder
         * 
         */
        public Builder oauthExternalAccessToken(@Nullable Output<String> oauthExternalAccessToken) {
            $.oauthExternalAccessToken = oauthExternalAccessToken;
            return this;
        }

        /**
         * @param oauthExternalAccessToken OAuth existing access token already fetched from external IDP
         * 
         * @return builder
         * 
         */
        public Builder oauthExternalAccessToken(String oauthExternalAccessToken) {
            return oauthExternalAccessToken(Output.of(oauthExternalAccessToken));
        }

        /**
         * @param oauthExternalClientId OAuth client id from external token source
         * 
         * @return builder
         * 
         */
        public Builder oauthExternalClientId(@Nullable Output<String> oauthExternalClientId) {
            $.oauthExternalClientId = oauthExternalClientId;
            return this;
        }

        /**
         * @param oauthExternalClientId OAuth client id from external token source
         * 
         * @return builder
         * 
         */
        public Builder oauthExternalClientId(String oauthExternalClientId) {
            return oauthExternalClientId(Output.of(oauthExternalClientId));
        }

        /**
         * @param oauthExternalClientSecret OAuth client secret from external token source
         * 
         * @return builder
         * 
         */
        public Builder oauthExternalClientSecret(@Nullable Output<String> oauthExternalClientSecret) {
            $.oauthExternalClientSecret = oauthExternalClientSecret;
            return this;
        }

        /**
         * @param oauthExternalClientSecret OAuth client secret from external token source
         * 
         * @return builder
         * 
         */
        public Builder oauthExternalClientSecret(String oauthExternalClientSecret) {
            return oauthExternalClientSecret(Output.of(oauthExternalClientSecret));
        }

        /**
         * @param oauthExternalTokenScope OAuth access token scope
         * 
         * @return builder
         * 
         */
        public Builder oauthExternalTokenScope(@Nullable Output<String> oauthExternalTokenScope) {
            $.oauthExternalTokenScope = oauthExternalTokenScope;
            return this;
        }

        /**
         * @param oauthExternalTokenScope OAuth access token scope
         * 
         * @return builder
         * 
         */
        public Builder oauthExternalTokenScope(String oauthExternalTokenScope) {
            return oauthExternalTokenScope(Output.of(oauthExternalTokenScope));
        }

        /**
         * @param oauthExternalTokenUrl OAuth token URL to fetch access token from external IDP
         * 
         * @return builder
         * 
         */
        public Builder oauthExternalTokenUrl(@Nullable Output<String> oauthExternalTokenUrl) {
            $.oauthExternalTokenUrl = oauthExternalTokenUrl;
            return this;
        }

        /**
         * @param oauthExternalTokenUrl OAuth token URL to fetch access token from external IDP
         * 
         * @return builder
         * 
         */
        public Builder oauthExternalTokenUrl(String oauthExternalTokenUrl) {
            return oauthExternalTokenUrl(Output.of(oauthExternalTokenUrl));
        }

        /**
         * @param oauthIdentityPoolId OAuth identity pool id used for processing external token and exchange STS token
         * 
         * @return builder
         * 
         */
        public Builder oauthIdentityPoolId(Output<String> oauthIdentityPoolId) {
            $.oauthIdentityPoolId = oauthIdentityPoolId;
            return this;
        }

        /**
         * @param oauthIdentityPoolId OAuth identity pool id used for processing external token and exchange STS token
         * 
         * @return builder
         * 
         */
        public Builder oauthIdentityPoolId(String oauthIdentityPoolId) {
            return oauthIdentityPoolId(Output.of(oauthIdentityPoolId));
        }

        /**
         * @param oauthStsTokenExpiredInSeconds OAuth STS access token expired in second from Confluent Cloud
         * 
         * @return builder
         * 
         */
        public Builder oauthStsTokenExpiredInSeconds(@Nullable Output<String> oauthStsTokenExpiredInSeconds) {
            $.oauthStsTokenExpiredInSeconds = oauthStsTokenExpiredInSeconds;
            return this;
        }

        /**
         * @param oauthStsTokenExpiredInSeconds OAuth STS access token expired in second from Confluent Cloud
         * 
         * @return builder
         * 
         */
        public Builder oauthStsTokenExpiredInSeconds(String oauthStsTokenExpiredInSeconds) {
            return oauthStsTokenExpiredInSeconds(Output.of(oauthStsTokenExpiredInSeconds));
        }

        public ProviderOauthArgs build() {
            if ($.oauthIdentityPoolId == null) {
                throw new MissingRequiredPropertyException("ProviderOauthArgs", "oauthIdentityPoolId");
            }
            return $;
        }
    }

}

// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.inputs;

import com.pulumi.confluentcloud.inputs.GetSchemaMetadataTag;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;


public final class GetSchemaMetadata extends com.pulumi.resources.InvokeArgs {

    public static final GetSchemaMetadata Empty = new GetSchemaMetadata();

    /**
     * (Optional Map) The custom properties to set:
     * 
     */
    @Import(name="properties", required=true)
    private Map<String,String> properties;

    /**
     * @return (Optional Map) The custom properties to set:
     * 
     */
    public Map<String,String> properties() {
        return this.properties;
    }

    /**
     * (Optional List of Strings) A list of metadata properties to be encrypted.
     * 
     */
    @Import(name="sensitives", required=true)
    private List<String> sensitives;

    /**
     * @return (Optional List of Strings) A list of metadata properties to be encrypted.
     * 
     */
    public List<String> sensitives() {
        return this.sensitives;
    }

    /**
     * (Optional String List) The tags to which the rule applies, if any.
     * 
     */
    @Import(name="tags", required=true)
    private List<GetSchemaMetadataTag> tags;

    /**
     * @return (Optional String List) The tags to which the rule applies, if any.
     * 
     */
    public List<GetSchemaMetadataTag> tags() {
        return this.tags;
    }

    private GetSchemaMetadata() {}

    private GetSchemaMetadata(GetSchemaMetadata $) {
        this.properties = $.properties;
        this.sensitives = $.sensitives;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSchemaMetadata defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSchemaMetadata $;

        public Builder() {
            $ = new GetSchemaMetadata();
        }

        public Builder(GetSchemaMetadata defaults) {
            $ = new GetSchemaMetadata(Objects.requireNonNull(defaults));
        }

        /**
         * @param properties (Optional Map) The custom properties to set:
         * 
         * @return builder
         * 
         */
        public Builder properties(Map<String,String> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param sensitives (Optional List of Strings) A list of metadata properties to be encrypted.
         * 
         * @return builder
         * 
         */
        public Builder sensitives(List<String> sensitives) {
            $.sensitives = sensitives;
            return this;
        }

        /**
         * @param sensitives (Optional List of Strings) A list of metadata properties to be encrypted.
         * 
         * @return builder
         * 
         */
        public Builder sensitives(String... sensitives) {
            return sensitives(List.of(sensitives));
        }

        /**
         * @param tags (Optional String List) The tags to which the rule applies, if any.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<GetSchemaMetadataTag> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags (Optional String List) The tags to which the rule applies, if any.
         * 
         * @return builder
         * 
         */
        public Builder tags(GetSchemaMetadataTag... tags) {
            return tags(List.of(tags));
        }

        public GetSchemaMetadata build() {
            if ($.properties == null) {
                throw new MissingRequiredPropertyException("GetSchemaMetadata", "properties");
            }
            if ($.sensitives == null) {
                throw new MissingRequiredPropertyException("GetSchemaMetadata", "sensitives");
            }
            if ($.tags == null) {
                throw new MissingRequiredPropertyException("GetSchemaMetadata", "tags");
            }
            return $;
        }
    }

}

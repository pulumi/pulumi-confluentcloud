// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class CatalogIntegrationSnowflakeArgs extends com.pulumi.resources.ResourceArgs {

    public static final CatalogIntegrationSnowflakeArgs Empty = new CatalogIntegrationSnowflakeArgs();

    /**
     * Allowed scope of the Snowflake Open Catalog.
     * 
     */
    @Import(name="allowedScope", required=true)
    private Output<String> allowedScope;

    /**
     * @return Allowed scope of the Snowflake Open Catalog.
     * 
     */
    public Output<String> allowedScope() {
        return this.allowedScope;
    }

    /**
     * The client ID of the catalog integration.
     * 
     */
    @Import(name="clientId", required=true)
    private Output<String> clientId;

    /**
     * @return The client ID of the catalog integration.
     * 
     */
    public Output<String> clientId() {
        return this.clientId;
    }

    /**
     * The client secret of the catalog integration.
     * 
     */
    @Import(name="clientSecret", required=true)
    private Output<String> clientSecret;

    /**
     * @return The client secret of the catalog integration.
     * 
     */
    public Output<String> clientSecret() {
        return this.clientSecret;
    }

    /**
     * The catalog integration connection endpoint for Snowflake Open Catalog.
     * 
     */
    @Import(name="endpoint", required=true)
    private Output<String> endpoint;

    /**
     * @return The catalog integration connection endpoint for Snowflake Open Catalog.
     * 
     */
    public Output<String> endpoint() {
        return this.endpoint;
    }

    /**
     * Warehouse name of the Snowflake Open Catalog, for example, `catalog-name`.
     * 
     */
    @Import(name="warehouse", required=true)
    private Output<String> warehouse;

    /**
     * @return Warehouse name of the Snowflake Open Catalog, for example, `catalog-name`.
     * 
     */
    public Output<String> warehouse() {
        return this.warehouse;
    }

    private CatalogIntegrationSnowflakeArgs() {}

    private CatalogIntegrationSnowflakeArgs(CatalogIntegrationSnowflakeArgs $) {
        this.allowedScope = $.allowedScope;
        this.clientId = $.clientId;
        this.clientSecret = $.clientSecret;
        this.endpoint = $.endpoint;
        this.warehouse = $.warehouse;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CatalogIntegrationSnowflakeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CatalogIntegrationSnowflakeArgs $;

        public Builder() {
            $ = new CatalogIntegrationSnowflakeArgs();
        }

        public Builder(CatalogIntegrationSnowflakeArgs defaults) {
            $ = new CatalogIntegrationSnowflakeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedScope Allowed scope of the Snowflake Open Catalog.
         * 
         * @return builder
         * 
         */
        public Builder allowedScope(Output<String> allowedScope) {
            $.allowedScope = allowedScope;
            return this;
        }

        /**
         * @param allowedScope Allowed scope of the Snowflake Open Catalog.
         * 
         * @return builder
         * 
         */
        public Builder allowedScope(String allowedScope) {
            return allowedScope(Output.of(allowedScope));
        }

        /**
         * @param clientId The client ID of the catalog integration.
         * 
         * @return builder
         * 
         */
        public Builder clientId(Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId The client ID of the catalog integration.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param clientSecret The client secret of the catalog integration.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(Output<String> clientSecret) {
            $.clientSecret = clientSecret;
            return this;
        }

        /**
         * @param clientSecret The client secret of the catalog integration.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(String clientSecret) {
            return clientSecret(Output.of(clientSecret));
        }

        /**
         * @param endpoint The catalog integration connection endpoint for Snowflake Open Catalog.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint The catalog integration connection endpoint for Snowflake Open Catalog.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        /**
         * @param warehouse Warehouse name of the Snowflake Open Catalog, for example, `catalog-name`.
         * 
         * @return builder
         * 
         */
        public Builder warehouse(Output<String> warehouse) {
            $.warehouse = warehouse;
            return this;
        }

        /**
         * @param warehouse Warehouse name of the Snowflake Open Catalog, for example, `catalog-name`.
         * 
         * @return builder
         * 
         */
        public Builder warehouse(String warehouse) {
            return warehouse(Output.of(warehouse));
        }

        public CatalogIntegrationSnowflakeArgs build() {
            if ($.allowedScope == null) {
                throw new MissingRequiredPropertyException("CatalogIntegrationSnowflakeArgs", "allowedScope");
            }
            if ($.clientId == null) {
                throw new MissingRequiredPropertyException("CatalogIntegrationSnowflakeArgs", "clientId");
            }
            if ($.clientSecret == null) {
                throw new MissingRequiredPropertyException("CatalogIntegrationSnowflakeArgs", "clientSecret");
            }
            if ($.endpoint == null) {
                throw new MissingRequiredPropertyException("CatalogIntegrationSnowflakeArgs", "endpoint");
            }
            if ($.warehouse == null) {
                throw new MissingRequiredPropertyException("CatalogIntegrationSnowflakeArgs", "warehouse");
            }
            return $;
        }
    }

}

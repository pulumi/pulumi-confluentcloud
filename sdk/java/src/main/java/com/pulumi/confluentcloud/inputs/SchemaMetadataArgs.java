// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.inputs;

import com.pulumi.confluentcloud.inputs.SchemaMetadataTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SchemaMetadataArgs extends com.pulumi.resources.ResourceArgs {

    public static final SchemaMetadataArgs Empty = new SchemaMetadataArgs();

    /**
     * The custom properties to set:
     * 
     */
    @Import(name="properties")
    private @Nullable Output<Map<String,String>> properties;

    /**
     * @return The custom properties to set:
     * 
     */
    public Optional<Output<Map<String,String>>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * A list of metadata properties to be encrypted.
     * 
     */
    @Import(name="sensitives")
    private @Nullable Output<List<String>> sensitives;

    /**
     * @return A list of metadata properties to be encrypted.
     * 
     */
    public Optional<Output<List<String>>> sensitives() {
        return Optional.ofNullable(this.sensitives);
    }

    /**
     * The tags to which the rule applies, if any.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<SchemaMetadataTagArgs>> tags;

    /**
     * @return The tags to which the rule applies, if any.
     * 
     */
    public Optional<Output<List<SchemaMetadataTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private SchemaMetadataArgs() {}

    private SchemaMetadataArgs(SchemaMetadataArgs $) {
        this.properties = $.properties;
        this.sensitives = $.sensitives;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SchemaMetadataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SchemaMetadataArgs $;

        public Builder() {
            $ = new SchemaMetadataArgs();
        }

        public Builder(SchemaMetadataArgs defaults) {
            $ = new SchemaMetadataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param properties The custom properties to set:
         * 
         * @return builder
         * 
         */
        public Builder properties(@Nullable Output<Map<String,String>> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param properties The custom properties to set:
         * 
         * @return builder
         * 
         */
        public Builder properties(Map<String,String> properties) {
            return properties(Output.of(properties));
        }

        /**
         * @param sensitives A list of metadata properties to be encrypted.
         * 
         * @return builder
         * 
         */
        public Builder sensitives(@Nullable Output<List<String>> sensitives) {
            $.sensitives = sensitives;
            return this;
        }

        /**
         * @param sensitives A list of metadata properties to be encrypted.
         * 
         * @return builder
         * 
         */
        public Builder sensitives(List<String> sensitives) {
            return sensitives(Output.of(sensitives));
        }

        /**
         * @param sensitives A list of metadata properties to be encrypted.
         * 
         * @return builder
         * 
         */
        public Builder sensitives(String... sensitives) {
            return sensitives(List.of(sensitives));
        }

        /**
         * @param tags The tags to which the rule applies, if any.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<SchemaMetadataTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tags to which the rule applies, if any.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<SchemaMetadataTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags The tags to which the rule applies, if any.
         * 
         * @return builder
         * 
         */
        public Builder tags(SchemaMetadataTagArgs... tags) {
            return tags(List.of(tags));
        }

        public SchemaMetadataArgs build() {
            return $;
        }
    }

}

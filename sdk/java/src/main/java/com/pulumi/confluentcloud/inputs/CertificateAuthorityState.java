// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertificateAuthorityState extends com.pulumi.resources.ResourceArgs {

    public static final CertificateAuthorityState Empty = new CertificateAuthorityState();

    /**
     * A base64 encoded string containing the signing certificate chain.
     * 
     */
    @Import(name="certificateChain")
    private @Nullable Output<String> certificateChain;

    /**
     * @return A base64 encoded string containing the signing certificate chain.
     * 
     */
    public Optional<Output<String>> certificateChain() {
        return Optional.ofNullable(this.certificateChain);
    }

    /**
     * The name of the certificate file.
     * 
     */
    @Import(name="certificateChainFilename")
    private @Nullable Output<String> certificateChainFilename;

    /**
     * @return The name of the certificate file.
     * 
     */
    public Optional<Output<String>> certificateChainFilename() {
        return Optional.ofNullable(this.certificateChainFilename);
    }

    /**
     * A base64 encoded string containing the CRL for this certificate authority.
     * 
     */
    @Import(name="crlChain")
    private @Nullable Output<String> crlChain;

    /**
     * @return A base64 encoded string containing the CRL for this certificate authority.
     * 
     */
    public Optional<Output<String>> crlChain() {
        return Optional.ofNullable(this.crlChain);
    }

    /**
     * (Optional String) The source specifies whether the Certificate Revocation List (CRL) is updated from either local file uploaded (LOCAL) or from url of CRL (URL).
     * 
     */
    @Import(name="crlSource")
    private @Nullable Output<String> crlSource;

    /**
     * @return (Optional String) The source specifies whether the Certificate Revocation List (CRL) is updated from either local file uploaded (LOCAL) or from url of CRL (URL).
     * 
     */
    public Optional<Output<String>> crlSource() {
        return Optional.ofNullable(this.crlSource);
    }

    /**
     * (Optional String) The timestamp for when CRL was last updated.
     * 
     */
    @Import(name="crlUpdatedAt")
    private @Nullable Output<String> crlUpdatedAt;

    /**
     * @return (Optional String) The timestamp for when CRL was last updated.
     * 
     */
    public Optional<Output<String>> crlUpdatedAt() {
        return Optional.ofNullable(this.crlUpdatedAt);
    }

    /**
     * The url from which to fetch the CRL for the certificate authority.
     * 
     */
    @Import(name="crlUrl")
    private @Nullable Output<String> crlUrl;

    /**
     * @return The url from which to fetch the CRL for the certificate authority.
     * 
     */
    public Optional<Output<String>> crlUrl() {
        return Optional.ofNullable(this.crlUrl);
    }

    /**
     * A description of the Certificate Authority.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of the Certificate Authority.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the Certificate Authority.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The name of the Certificate Authority.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * (Required List of Strings) The expiration dates of certificates in the chain.
     * 
     */
    @Import(name="expirationDates")
    private @Nullable Output<List<String>> expirationDates;

    /**
     * @return (Required List of Strings) The expiration dates of certificates in the chain.
     * 
     */
    public Optional<Output<List<String>>> expirationDates() {
        return Optional.ofNullable(this.expirationDates);
    }

    /**
     * (Required List of Strings) The fingerprints for each certificate in the certificate chain.
     * 
     */
    @Import(name="fingerprints")
    private @Nullable Output<List<String>> fingerprints;

    /**
     * @return (Required List of Strings) The fingerprints for each certificate in the certificate chain.
     * 
     */
    public Optional<Output<List<String>>> fingerprints() {
        return Optional.ofNullable(this.fingerprints);
    }

    /**
     * (Required List of Strings) The serial numbers for each certificate in the certificate chain.
     * 
     */
    @Import(name="serialNumbers")
    private @Nullable Output<List<String>> serialNumbers;

    /**
     * @return (Required List of Strings) The serial numbers for each certificate in the certificate chain.
     * 
     */
    public Optional<Output<List<String>>> serialNumbers() {
        return Optional.ofNullable(this.serialNumbers);
    }

    private CertificateAuthorityState() {}

    private CertificateAuthorityState(CertificateAuthorityState $) {
        this.certificateChain = $.certificateChain;
        this.certificateChainFilename = $.certificateChainFilename;
        this.crlChain = $.crlChain;
        this.crlSource = $.crlSource;
        this.crlUpdatedAt = $.crlUpdatedAt;
        this.crlUrl = $.crlUrl;
        this.description = $.description;
        this.displayName = $.displayName;
        this.expirationDates = $.expirationDates;
        this.fingerprints = $.fingerprints;
        this.serialNumbers = $.serialNumbers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateAuthorityState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateAuthorityState $;

        public Builder() {
            $ = new CertificateAuthorityState();
        }

        public Builder(CertificateAuthorityState defaults) {
            $ = new CertificateAuthorityState(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateChain A base64 encoded string containing the signing certificate chain.
         * 
         * @return builder
         * 
         */
        public Builder certificateChain(@Nullable Output<String> certificateChain) {
            $.certificateChain = certificateChain;
            return this;
        }

        /**
         * @param certificateChain A base64 encoded string containing the signing certificate chain.
         * 
         * @return builder
         * 
         */
        public Builder certificateChain(String certificateChain) {
            return certificateChain(Output.of(certificateChain));
        }

        /**
         * @param certificateChainFilename The name of the certificate file.
         * 
         * @return builder
         * 
         */
        public Builder certificateChainFilename(@Nullable Output<String> certificateChainFilename) {
            $.certificateChainFilename = certificateChainFilename;
            return this;
        }

        /**
         * @param certificateChainFilename The name of the certificate file.
         * 
         * @return builder
         * 
         */
        public Builder certificateChainFilename(String certificateChainFilename) {
            return certificateChainFilename(Output.of(certificateChainFilename));
        }

        /**
         * @param crlChain A base64 encoded string containing the CRL for this certificate authority.
         * 
         * @return builder
         * 
         */
        public Builder crlChain(@Nullable Output<String> crlChain) {
            $.crlChain = crlChain;
            return this;
        }

        /**
         * @param crlChain A base64 encoded string containing the CRL for this certificate authority.
         * 
         * @return builder
         * 
         */
        public Builder crlChain(String crlChain) {
            return crlChain(Output.of(crlChain));
        }

        /**
         * @param crlSource (Optional String) The source specifies whether the Certificate Revocation List (CRL) is updated from either local file uploaded (LOCAL) or from url of CRL (URL).
         * 
         * @return builder
         * 
         */
        public Builder crlSource(@Nullable Output<String> crlSource) {
            $.crlSource = crlSource;
            return this;
        }

        /**
         * @param crlSource (Optional String) The source specifies whether the Certificate Revocation List (CRL) is updated from either local file uploaded (LOCAL) or from url of CRL (URL).
         * 
         * @return builder
         * 
         */
        public Builder crlSource(String crlSource) {
            return crlSource(Output.of(crlSource));
        }

        /**
         * @param crlUpdatedAt (Optional String) The timestamp for when CRL was last updated.
         * 
         * @return builder
         * 
         */
        public Builder crlUpdatedAt(@Nullable Output<String> crlUpdatedAt) {
            $.crlUpdatedAt = crlUpdatedAt;
            return this;
        }

        /**
         * @param crlUpdatedAt (Optional String) The timestamp for when CRL was last updated.
         * 
         * @return builder
         * 
         */
        public Builder crlUpdatedAt(String crlUpdatedAt) {
            return crlUpdatedAt(Output.of(crlUpdatedAt));
        }

        /**
         * @param crlUrl The url from which to fetch the CRL for the certificate authority.
         * 
         * @return builder
         * 
         */
        public Builder crlUrl(@Nullable Output<String> crlUrl) {
            $.crlUrl = crlUrl;
            return this;
        }

        /**
         * @param crlUrl The url from which to fetch the CRL for the certificate authority.
         * 
         * @return builder
         * 
         */
        public Builder crlUrl(String crlUrl) {
            return crlUrl(Output.of(crlUrl));
        }

        /**
         * @param description A description of the Certificate Authority.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of the Certificate Authority.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName The name of the Certificate Authority.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The name of the Certificate Authority.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param expirationDates (Required List of Strings) The expiration dates of certificates in the chain.
         * 
         * @return builder
         * 
         */
        public Builder expirationDates(@Nullable Output<List<String>> expirationDates) {
            $.expirationDates = expirationDates;
            return this;
        }

        /**
         * @param expirationDates (Required List of Strings) The expiration dates of certificates in the chain.
         * 
         * @return builder
         * 
         */
        public Builder expirationDates(List<String> expirationDates) {
            return expirationDates(Output.of(expirationDates));
        }

        /**
         * @param expirationDates (Required List of Strings) The expiration dates of certificates in the chain.
         * 
         * @return builder
         * 
         */
        public Builder expirationDates(String... expirationDates) {
            return expirationDates(List.of(expirationDates));
        }

        /**
         * @param fingerprints (Required List of Strings) The fingerprints for each certificate in the certificate chain.
         * 
         * @return builder
         * 
         */
        public Builder fingerprints(@Nullable Output<List<String>> fingerprints) {
            $.fingerprints = fingerprints;
            return this;
        }

        /**
         * @param fingerprints (Required List of Strings) The fingerprints for each certificate in the certificate chain.
         * 
         * @return builder
         * 
         */
        public Builder fingerprints(List<String> fingerprints) {
            return fingerprints(Output.of(fingerprints));
        }

        /**
         * @param fingerprints (Required List of Strings) The fingerprints for each certificate in the certificate chain.
         * 
         * @return builder
         * 
         */
        public Builder fingerprints(String... fingerprints) {
            return fingerprints(List.of(fingerprints));
        }

        /**
         * @param serialNumbers (Required List of Strings) The serial numbers for each certificate in the certificate chain.
         * 
         * @return builder
         * 
         */
        public Builder serialNumbers(@Nullable Output<List<String>> serialNumbers) {
            $.serialNumbers = serialNumbers;
            return this;
        }

        /**
         * @param serialNumbers (Required List of Strings) The serial numbers for each certificate in the certificate chain.
         * 
         * @return builder
         * 
         */
        public Builder serialNumbers(List<String> serialNumbers) {
            return serialNumbers(Output.of(serialNumbers));
        }

        /**
         * @param serialNumbers (Required List of Strings) The serial numbers for each certificate in the certificate chain.
         * 
         * @return builder
         * 
         */
        public Builder serialNumbers(String... serialNumbers) {
            return serialNumbers(List.of(serialNumbers));
        }

        public CertificateAuthorityState build() {
            return $;
        }
    }

}

// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud;

import com.pulumi.confluentcloud.IpFilterArgs;
import com.pulumi.confluentcloud.Utilities;
import com.pulumi.confluentcloud.inputs.IpFilterState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
 * 
 * `confluentcloud.IpFilter` provides an IP Filter resource that enables creating, editing, and deleting IP Filters on Confluent Cloud.
 * 
 * &gt; **Note:** See [IP Filtering on Confluent Cloud](https://docs.confluent.io/cloud/current/security/access-control/ip-filtering/overview.html) for more details about the IP Filtering feature, its prerequisites, and its limitations.
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.confluentcloud.IpFilter;
 * import com.pulumi.confluentcloud.IpFilterArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var management_filter = new IpFilter("management-filter", IpFilterArgs.builder()
 *             .filterName("Management API Rules")
 *             .resourceGroup("management")
 *             .ipGroups(example.id())
 *             .build());
 * 
 *         var multiple_filter = new IpFilter("multiple-filter", IpFilterArgs.builder()
 *             .filterName("Management, Schema, Flink API Rules")
 *             .resourceGroup("multiple")
 *             .operationGroups(            
 *                 "MANAGEMENT",
 *                 "SCHEMA",
 *                 "FLINK")
 *             .ipGroups(example.id())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * You can import an IP Filter by using IP Filter ID, for example:
 * 
 * $ export CONFLUENT_CLOUD_API_KEY=&#34;&lt;cloud_api_key&gt;&#34;
 * 
 * $ export CONFLUENT_CLOUD_API_SECRET=&#34;&lt;cloud_api_secret&gt;&#34;
 * 
 * ```sh
 * $ pulumi import confluentcloud:index/ipFilter:IpFilter example ipf-abc123
 * ```
 * 
 * !&gt; **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
 * 
 */
@ResourceType(type="confluentcloud:index/ipFilter:IpFilter")
public class IpFilter extends com.pulumi.resources.CustomResource {
    /**
     * A human-readable name for an IP Filter. Can contain any unicode letter or number, the ASCII space character, or any of the following special characters: `[`, `]`, `|`, `&amp;`, `+`, `-`, `_`, `/`, `.`, `,`.
     * 
     */
    @Export(name="filterName", refs={String.class}, tree="[0]")
    private Output<String> filterName;

    /**
     * @return A human-readable name for an IP Filter. Can contain any unicode letter or number, the ASCII space character, or any of the following special characters: `[`, `]`, `|`, `&amp;`, `+`, `-`, `_`, `/`, `.`, `,`.
     * 
     */
    public Output<String> filterName() {
        return this.filterName;
    }
    /**
     * A list of IP Groups.
     * 
     */
    @Export(name="ipGroups", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> ipGroups;

    /**
     * @return A list of IP Groups.
     * 
     */
    public Output<List<String>> ipGroups() {
        return this.ipGroups;
    }
    /**
     * Scope of resources covered by this IP Filter. Resource group must be set to &#39;multiple&#39; in order to use this property. During update operations, note that the operation groups passed in will replace the list of existing operation groups (passing in an empty list will remove all operation groups) from the filter (in line with the behavior for `ipGroups` attribute).
     * 
     */
    @Export(name="operationGroups", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> operationGroups;

    /**
     * @return Scope of resources covered by this IP Filter. Resource group must be set to &#39;multiple&#39; in order to use this property. During update operations, note that the operation groups passed in will replace the list of existing operation groups (passing in an empty list will remove all operation groups) from the filter (in line with the behavior for `ipGroups` attribute).
     * 
     */
    public Output<List<String>> operationGroups() {
        return this.operationGroups;
    }
    /**
     * Scope of resources covered by this IP Filter. Available resource groups include `&#34;management&#34;` and `&#34;multiple&#34;`.
     * 
     */
    @Export(name="resourceGroup", refs={String.class}, tree="[0]")
    private Output<String> resourceGroup;

    /**
     * @return Scope of resources covered by this IP Filter. Available resource groups include `&#34;management&#34;` and `&#34;multiple&#34;`.
     * 
     */
    public Output<String> resourceGroup() {
        return this.resourceGroup;
    }
    /**
     * A CRN that specifies the scope of the IP Filter, specifically the organization or environment. Without specifying this property, the IP Filter would apply to the whole organization. For example, `&#34;crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa&#34;` or `data.confluent_organization.resource_name`.
     * 
     */
    @Export(name="resourceScope", refs={String.class}, tree="[0]")
    private Output<String> resourceScope;

    /**
     * @return A CRN that specifies the scope of the IP Filter, specifically the organization or environment. Without specifying this property, the IP Filter would apply to the whole organization. For example, `&#34;crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa&#34;` or `data.confluent_organization.resource_name`.
     * 
     */
    public Output<String> resourceScope() {
        return this.resourceScope;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public IpFilter(java.lang.String name) {
        this(name, IpFilterArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public IpFilter(java.lang.String name, IpFilterArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public IpFilter(java.lang.String name, IpFilterArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("confluentcloud:index/ipFilter:IpFilter", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private IpFilter(java.lang.String name, Output<java.lang.String> id, @Nullable IpFilterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("confluentcloud:index/ipFilter:IpFilter", name, state, makeResourceOptions(options, id), false);
    }

    private static IpFilterArgs makeArgs(IpFilterArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? IpFilterArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static IpFilter get(java.lang.String name, Output<java.lang.String> id, @Nullable IpFilterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new IpFilter(name, id, state, options);
    }
}

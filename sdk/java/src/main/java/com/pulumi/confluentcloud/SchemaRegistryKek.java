// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud;

import com.pulumi.confluentcloud.SchemaRegistryKekArgs;
import com.pulumi.confluentcloud.Utilities;
import com.pulumi.confluentcloud.inputs.SchemaRegistryKekState;
import com.pulumi.confluentcloud.outputs.SchemaRegistryKekCredentials;
import com.pulumi.confluentcloud.outputs.SchemaRegistryKekSchemaRegistryCluster;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Import
 * 
 * You can import a Schema Registry Key by using the Schema Registry cluster ID, Kek name in the format `&lt;Schema Registry cluster ID&gt;/&lt;Kek name&gt;`, for example:
 * 
 * $ export IMPORT_SCHEMA_REGISTRY_API_KEY=&#34;&lt;schema_registry_api_key&gt;&#34;
 * 
 * $ export IMPORT_SCHEMA_REGISTRY_API_SECRET=&#34;&lt;schema_registry_api_secret&gt;&#34;
 * 
 * $ export IMPORT_SCHEMA_REGISTRY_REST_ENDPOINT=&#34;&lt;schema_registry_rest_endpoint&gt;&#34;
 * 
 * ```sh
 * $ pulumi import confluentcloud:index/schemaRegistryKek:SchemaRegistryKek aws_key lsrc-8wrx70/aws_key
 * ```
 * 
 * !&gt; **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
 * 
 */
@ResourceType(type="confluentcloud:index/schemaRegistryKek:SchemaRegistryKek")
public class SchemaRegistryKek extends com.pulumi.resources.CustomResource {
    /**
     * The Cluster API Credentials.
     * 
     */
    @Export(name="credentials", refs={SchemaRegistryKekCredentials.class}, tree="[0]")
    private Output</* @Nullable */ SchemaRegistryKekCredentials> credentials;

    /**
     * @return The Cluster API Credentials.
     * 
     */
    public Output<Optional<SchemaRegistryKekCredentials>> credentials() {
        return Codegen.optional(this.credentials);
    }
    /**
     * The optional description for the KEK.
     * 
     */
    @Export(name="doc", refs={String.class}, tree="[0]")
    private Output<String> doc;

    /**
     * @return The optional description for the KEK.
     * 
     */
    public Output<String> doc() {
        return this.doc;
    }
    /**
     * Controls whether a kek should be soft or hard deleted. Set it to `true` if you want to hard delete a schema registry kek
     * on destroy. Defaults to `false` (soft delete).
     * 
     */
    @Export(name="hardDelete", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> hardDelete;

    /**
     * @return Controls whether a kek should be soft or hard deleted. Set it to `true` if you want to hard delete a schema registry kek
     * on destroy. Defaults to `false` (soft delete).
     * 
     */
    public Output<Optional<Boolean>> hardDelete() {
        return Codegen.optional(this.hardDelete);
    }
    /**
     * The ID of the key from KMS.
     * - When using the AWS KMS, this is an ARN, for example, `arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789abc`.
     * - When using the Azure Key Vault, this is a Key Identifier (URI), for example, `https://test-keyvault1.vault.azure.net/keys/test-key1/1234567890abcdef1234567890abcdef`.
     * - When using the GCP KMS, this is a resource name, for example, `projects/test-project1/locations/us-central1/keyRings/test-keyRing1/cryptoKeys/test-key1`.
     * 
     */
    @Export(name="kmsKeyId", refs={String.class}, tree="[0]")
    private Output<String> kmsKeyId;

    /**
     * @return The ID of the key from KMS.
     * - When using the AWS KMS, this is an ARN, for example, `arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789abc`.
     * - When using the Azure Key Vault, this is a Key Identifier (URI), for example, `https://test-keyvault1.vault.azure.net/keys/test-key1/1234567890abcdef1234567890abcdef`.
     * - When using the GCP KMS, this is a resource name, for example, `projects/test-project1/locations/us-central1/keyRings/test-keyRing1/cryptoKeys/test-key1`.
     * 
     */
    public Output<String> kmsKeyId() {
        return this.kmsKeyId;
    }
    /**
     * The type of Key Management Service (KMS). The supported values include `aws-kms`, `azure-kms`, and `gcp-kms`. Additionally, custom KMS types are supported as well.
     * 
     */
    @Export(name="kmsType", refs={String.class}, tree="[0]")
    private Output<String> kmsType;

    /**
     * @return The type of Key Management Service (KMS). The supported values include `aws-kms`, `azure-kms`, and `gcp-kms`. Additionally, custom KMS types are supported as well.
     * 
     */
    public Output<String> kmsType() {
        return this.kmsType;
    }
    /**
     * The name for the KEK.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name for the KEK.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The custom properties to set (for example, `KeyUsage=ENCRYPT_DECRYPT`, `KeyState=Enabled`):
     * 
     */
    @Export(name="properties", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> properties;

    /**
     * @return The custom properties to set (for example, `KeyUsage=ENCRYPT_DECRYPT`, `KeyState=Enabled`):
     * 
     */
    public Output<Map<String,String>> properties() {
        return this.properties;
    }
    /**
     * The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
     * 
     */
    @Export(name="restEndpoint", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> restEndpoint;

    /**
     * @return The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
     * 
     */
    public Output<Optional<String>> restEndpoint() {
        return Codegen.optional(this.restEndpoint);
    }
    @Export(name="schemaRegistryCluster", refs={SchemaRegistryKekSchemaRegistryCluster.class}, tree="[0]")
    private Output</* @Nullable */ SchemaRegistryKekSchemaRegistryCluster> schemaRegistryCluster;

    public Output<Optional<SchemaRegistryKekSchemaRegistryCluster>> schemaRegistryCluster() {
        return Codegen.optional(this.schemaRegistryCluster);
    }
    /**
     * The optional flag to control whether the DEK Registry has shared access to the KMS. Defaults to `false`.
     * 
     */
    @Export(name="shared", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> shared;

    /**
     * @return The optional flag to control whether the DEK Registry has shared access to the KMS. Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> shared() {
        return Codegen.optional(this.shared);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SchemaRegistryKek(java.lang.String name) {
        this(name, SchemaRegistryKekArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SchemaRegistryKek(java.lang.String name, SchemaRegistryKekArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SchemaRegistryKek(java.lang.String name, SchemaRegistryKekArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("confluentcloud:index/schemaRegistryKek:SchemaRegistryKek", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private SchemaRegistryKek(java.lang.String name, Output<java.lang.String> id, @Nullable SchemaRegistryKekState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("confluentcloud:index/schemaRegistryKek:SchemaRegistryKek", name, state, makeResourceOptions(options, id), false);
    }

    private static SchemaRegistryKekArgs makeArgs(SchemaRegistryKekArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? SchemaRegistryKekArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "credentials"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SchemaRegistryKek get(java.lang.String name, Output<java.lang.String> id, @Nullable SchemaRegistryKekState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SchemaRegistryKek(name, id, state, options);
    }
}

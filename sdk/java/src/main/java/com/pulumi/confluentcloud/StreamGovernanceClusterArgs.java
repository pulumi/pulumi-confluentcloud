// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud;

import com.pulumi.confluentcloud.inputs.StreamGovernanceClusterEnvironmentArgs;
import com.pulumi.confluentcloud.inputs.StreamGovernanceClusterRegionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class StreamGovernanceClusterArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamGovernanceClusterArgs Empty = new StreamGovernanceClusterArgs();

    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     * 
     */
    @Import(name="environment", required=true)
    private Output<StreamGovernanceClusterEnvironmentArgs> environment;

    /**
     * @return Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     * 
     */
    public Output<StreamGovernanceClusterEnvironmentArgs> environment() {
        return this.environment;
    }

    /**
     * The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.
     * 
     */
    @Import(name="package", required=true)
    private Output<String> package_;

    /**
     * @return The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.
     * 
     */
    public Output<String> package_() {
        return this.package_;
    }

    @Import(name="region", required=true)
    private Output<StreamGovernanceClusterRegionArgs> region;

    public Output<StreamGovernanceClusterRegionArgs> region() {
        return this.region;
    }

    private StreamGovernanceClusterArgs() {}

    private StreamGovernanceClusterArgs(StreamGovernanceClusterArgs $) {
        this.environment = $.environment;
        this.package_ = $.package_;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamGovernanceClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamGovernanceClusterArgs $;

        public Builder() {
            $ = new StreamGovernanceClusterArgs();
        }

        public Builder(StreamGovernanceClusterArgs defaults) {
            $ = new StreamGovernanceClusterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param environment Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
         * 
         * @return builder
         * 
         */
        public Builder environment(Output<StreamGovernanceClusterEnvironmentArgs> environment) {
            $.environment = environment;
            return this;
        }

        /**
         * @param environment Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
         * 
         * @return builder
         * 
         */
        public Builder environment(StreamGovernanceClusterEnvironmentArgs environment) {
            return environment(Output.of(environment));
        }

        /**
         * @param package_ The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.
         * 
         * @return builder
         * 
         */
        public Builder package_(Output<String> package_) {
            $.package_ = package_;
            return this;
        }

        /**
         * @param package_ The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.
         * 
         * @return builder
         * 
         */
        public Builder package_(String package_) {
            return package_(Output.of(package_));
        }

        public Builder region(Output<StreamGovernanceClusterRegionArgs> region) {
            $.region = region;
            return this;
        }

        public Builder region(StreamGovernanceClusterRegionArgs region) {
            return region(Output.of(region));
        }

        public StreamGovernanceClusterArgs build() {
            $.environment = Objects.requireNonNull($.environment, "expected parameter 'environment' to be non-null");
            $.package_ = Objects.requireNonNull($.package_, "expected parameter 'package' to be non-null");
            $.region = Objects.requireNonNull($.region, "expected parameter 'region' to be non-null");
            return $;
        }
    }

}

// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud;

import com.pulumi.confluentcloud.TfImporterArgs;
import com.pulumi.confluentcloud.Utilities;
import com.pulumi.confluentcloud.inputs.TfImporterState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.confluentcloud.TfImporter;
 * import com.pulumi.confluentcloud.TfImporterArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new TfImporter(&#34;example&#34;, TfImporterArgs.builder()        
 *             .resources(            
 *                 &#34;confluent_service_account&#34;,
 *                 &#34;confluent_environment&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ## Getting Started
 * 
 * The following end-to-end examples might help to get started with the `confluentcloud.TfImporter` resource:
 *   * `cloud-importer`: Export _Cloud_ resources (for example, Service Accounts, Environments)
 *   * `kafka-importer`: Export _Kafka_ resources (for example, ACLs, Topics)
 * 
 */
@ResourceType(type="confluentcloud:index/tfImporter:TfImporter")
public class TfImporter extends com.pulumi.resources.CustomResource {
    /**
     * An absolute path to a folder for outputting generated TF state and TF configuration files for your infrastructure. The folder is created if it doesn&#39;t exist. Defaults to `./imported_confluent_infrastructure`.
     * 
     * These are the exportable resources:
     * * Service Accounts
     * * Environments
     * * Connectors
     * * Kafka Clusters
     * * Access Control Lists (ACLs)
     * * Topics
     * * Schemas
     * 
     * &gt; **Note:** File an issue to request a support for other resources.
     * 
     */
    @Export(name="outputPath", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> outputPath;

    /**
     * @return An absolute path to a folder for outputting generated TF state and TF configuration files for your infrastructure. The folder is created if it doesn&#39;t exist. Defaults to `./imported_confluent_infrastructure`.
     * 
     * These are the exportable resources:
     * * Service Accounts
     * * Environments
     * * Connectors
     * * Kafka Clusters
     * * Access Control Lists (ACLs)
     * * Topics
     * * Schemas
     * 
     * &gt; **Note:** File an issue to request a support for other resources.
     * 
     */
    public Output<Optional<String>> outputPath() {
        return Codegen.optional(this.outputPath);
    }
    /**
     * A list of resources names to export. Defaults to all exportable resources.
     * 
     */
    @Export(name="resources", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> resources;

    /**
     * @return A list of resources names to export. Defaults to all exportable resources.
     * 
     */
    public Output<Optional<List<String>>> resources() {
        return Codegen.optional(this.resources);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public TfImporter(String name) {
        this(name, TfImporterArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public TfImporter(String name, @Nullable TfImporterArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public TfImporter(String name, @Nullable TfImporterArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("confluentcloud:index/tfImporter:TfImporter", name, args == null ? TfImporterArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private TfImporter(String name, Output<String> id, @Nullable TfImporterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("confluentcloud:index/tfImporter:TfImporter", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static TfImporter get(String name, Output<String> id, @Nullable TfImporterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new TfImporter(name, id, state, options);
    }
}

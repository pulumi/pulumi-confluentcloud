// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertificateAuthorityArgs extends com.pulumi.resources.ResourceArgs {

    public static final CertificateAuthorityArgs Empty = new CertificateAuthorityArgs();

    /**
     * A base64 encoded string containing the signing certificate chain.
     * 
     */
    @Import(name="certificateChain", required=true)
    private Output<String> certificateChain;

    /**
     * @return A base64 encoded string containing the signing certificate chain.
     * 
     */
    public Output<String> certificateChain() {
        return this.certificateChain;
    }

    /**
     * The name of the certificate file.
     * 
     */
    @Import(name="certificateChainFilename", required=true)
    private Output<String> certificateChainFilename;

    /**
     * @return The name of the certificate file.
     * 
     */
    public Output<String> certificateChainFilename() {
        return this.certificateChainFilename;
    }

    /**
     * A base64 encoded string containing the CRL for this certificate authority.
     * 
     */
    @Import(name="crlChain")
    private @Nullable Output<String> crlChain;

    /**
     * @return A base64 encoded string containing the CRL for this certificate authority.
     * 
     */
    public Optional<Output<String>> crlChain() {
        return Optional.ofNullable(this.crlChain);
    }

    /**
     * The url from which to fetch the CRL for the certificate authority.
     * 
     */
    @Import(name="crlUrl")
    private @Nullable Output<String> crlUrl;

    /**
     * @return The url from which to fetch the CRL for the certificate authority.
     * 
     */
    public Optional<Output<String>> crlUrl() {
        return Optional.ofNullable(this.crlUrl);
    }

    /**
     * A description of the Certificate Authority.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return A description of the Certificate Authority.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * The name of the Certificate Authority.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return The name of the Certificate Authority.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    private CertificateAuthorityArgs() {}

    private CertificateAuthorityArgs(CertificateAuthorityArgs $) {
        this.certificateChain = $.certificateChain;
        this.certificateChainFilename = $.certificateChainFilename;
        this.crlChain = $.crlChain;
        this.crlUrl = $.crlUrl;
        this.description = $.description;
        this.displayName = $.displayName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateAuthorityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateAuthorityArgs $;

        public Builder() {
            $ = new CertificateAuthorityArgs();
        }

        public Builder(CertificateAuthorityArgs defaults) {
            $ = new CertificateAuthorityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateChain A base64 encoded string containing the signing certificate chain.
         * 
         * @return builder
         * 
         */
        public Builder certificateChain(Output<String> certificateChain) {
            $.certificateChain = certificateChain;
            return this;
        }

        /**
         * @param certificateChain A base64 encoded string containing the signing certificate chain.
         * 
         * @return builder
         * 
         */
        public Builder certificateChain(String certificateChain) {
            return certificateChain(Output.of(certificateChain));
        }

        /**
         * @param certificateChainFilename The name of the certificate file.
         * 
         * @return builder
         * 
         */
        public Builder certificateChainFilename(Output<String> certificateChainFilename) {
            $.certificateChainFilename = certificateChainFilename;
            return this;
        }

        /**
         * @param certificateChainFilename The name of the certificate file.
         * 
         * @return builder
         * 
         */
        public Builder certificateChainFilename(String certificateChainFilename) {
            return certificateChainFilename(Output.of(certificateChainFilename));
        }

        /**
         * @param crlChain A base64 encoded string containing the CRL for this certificate authority.
         * 
         * @return builder
         * 
         */
        public Builder crlChain(@Nullable Output<String> crlChain) {
            $.crlChain = crlChain;
            return this;
        }

        /**
         * @param crlChain A base64 encoded string containing the CRL for this certificate authority.
         * 
         * @return builder
         * 
         */
        public Builder crlChain(String crlChain) {
            return crlChain(Output.of(crlChain));
        }

        /**
         * @param crlUrl The url from which to fetch the CRL for the certificate authority.
         * 
         * @return builder
         * 
         */
        public Builder crlUrl(@Nullable Output<String> crlUrl) {
            $.crlUrl = crlUrl;
            return this;
        }

        /**
         * @param crlUrl The url from which to fetch the CRL for the certificate authority.
         * 
         * @return builder
         * 
         */
        public Builder crlUrl(String crlUrl) {
            return crlUrl(Output.of(crlUrl));
        }

        /**
         * @param description A description of the Certificate Authority.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of the Certificate Authority.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName The name of the Certificate Authority.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The name of the Certificate Authority.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public CertificateAuthorityArgs build() {
            if ($.certificateChain == null) {
                throw new MissingRequiredPropertyException("CertificateAuthorityArgs", "certificateChain");
            }
            if ($.certificateChainFilename == null) {
                throw new MissingRequiredPropertyException("CertificateAuthorityArgs", "certificateChainFilename");
            }
            if ($.description == null) {
                throw new MissingRequiredPropertyException("CertificateAuthorityArgs", "description");
            }
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("CertificateAuthorityArgs", "displayName");
            }
            return $;
        }
    }

}

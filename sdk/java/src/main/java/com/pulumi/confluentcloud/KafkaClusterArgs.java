// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud;

import com.pulumi.confluentcloud.inputs.KafkaClusterBasicArgs;
import com.pulumi.confluentcloud.inputs.KafkaClusterDedicatedArgs;
import com.pulumi.confluentcloud.inputs.KafkaClusterEnvironmentArgs;
import com.pulumi.confluentcloud.inputs.KafkaClusterNetworkArgs;
import com.pulumi.confluentcloud.inputs.KafkaClusterStandardArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KafkaClusterArgs extends com.pulumi.resources.ResourceArgs {

    public static final KafkaClusterArgs Empty = new KafkaClusterArgs();

    /**
     * The availability zone configuration of the Kafka cluster. Accepted values are: `SINGLE_ZONE` and `MULTI_ZONE`.
     * 
     */
    @Import(name="availability", required=true)
    private Output<String> availability;

    /**
     * @return The availability zone configuration of the Kafka cluster. Accepted values are: `SINGLE_ZONE` and `MULTI_ZONE`.
     * 
     */
    public Output<String> availability() {
        return this.availability;
    }

    /**
     * The configuration of the Basic Kafka cluster.
     * 
     */
    @Import(name="basics")
    private @Nullable Output<List<KafkaClusterBasicArgs>> basics;

    /**
     * @return The configuration of the Basic Kafka cluster.
     * 
     */
    public Optional<Output<List<KafkaClusterBasicArgs>>> basics() {
        return Optional.ofNullable(this.basics);
    }

    /**
     * The cloud service provider that runs the Kafka cluster. Accepted values are: `AWS`, `AZURE`, and `GCP`.
     * 
     */
    @Import(name="cloud", required=true)
    private Output<String> cloud;

    /**
     * @return The cloud service provider that runs the Kafka cluster. Accepted values are: `AWS`, `AZURE`, and `GCP`.
     * 
     */
    public Output<String> cloud() {
        return this.cloud;
    }

    @Import(name="dedicated")
    private @Nullable Output<KafkaClusterDedicatedArgs> dedicated;

    public Optional<Output<KafkaClusterDedicatedArgs>> dedicated() {
        return Optional.ofNullable(this.dedicated);
    }

    /**
     * The name of the Kafka cluster.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The name of the Kafka cluster.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     * 
     */
    @Import(name="environment", required=true)
    private Output<KafkaClusterEnvironmentArgs> environment;

    /**
     * @return Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     * 
     */
    public Output<KafkaClusterEnvironmentArgs> environment() {
        return this.environment;
    }

    /**
     * Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider
     * accounts.
     * 
     */
    @Import(name="network")
    private @Nullable Output<KafkaClusterNetworkArgs> network;

    /**
     * @return Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider
     * accounts.
     * 
     */
    public Optional<Output<KafkaClusterNetworkArgs>> network() {
        return Optional.ofNullable(this.network);
    }

    /**
     * The cloud service provider region where the Kafka cluster is running, for example, `us-west-2`. See [Cloud Providers and Regions](https://docs.confluent.io/cloud/current/clusters/regions.html#cloud-providers-and-regions) for a full list of options for AWS, Azure, and GCP.
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return The cloud service provider region where the Kafka cluster is running, for example, `us-west-2`. See [Cloud Providers and Regions](https://docs.confluent.io/cloud/current/clusters/regions.html#cloud-providers-and-regions) for a full list of options for AWS, Azure, and GCP.
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    /**
     * The configuration of the Standard Kafka cluster.
     * 
     */
    @Import(name="standards")
    private @Nullable Output<List<KafkaClusterStandardArgs>> standards;

    /**
     * @return The configuration of the Standard Kafka cluster.
     * 
     */
    public Optional<Output<List<KafkaClusterStandardArgs>>> standards() {
        return Optional.ofNullable(this.standards);
    }

    private KafkaClusterArgs() {}

    private KafkaClusterArgs(KafkaClusterArgs $) {
        this.availability = $.availability;
        this.basics = $.basics;
        this.cloud = $.cloud;
        this.dedicated = $.dedicated;
        this.displayName = $.displayName;
        this.environment = $.environment;
        this.network = $.network;
        this.region = $.region;
        this.standards = $.standards;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KafkaClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KafkaClusterArgs $;

        public Builder() {
            $ = new KafkaClusterArgs();
        }

        public Builder(KafkaClusterArgs defaults) {
            $ = new KafkaClusterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param availability The availability zone configuration of the Kafka cluster. Accepted values are: `SINGLE_ZONE` and `MULTI_ZONE`.
         * 
         * @return builder
         * 
         */
        public Builder availability(Output<String> availability) {
            $.availability = availability;
            return this;
        }

        /**
         * @param availability The availability zone configuration of the Kafka cluster. Accepted values are: `SINGLE_ZONE` and `MULTI_ZONE`.
         * 
         * @return builder
         * 
         */
        public Builder availability(String availability) {
            return availability(Output.of(availability));
        }

        /**
         * @param basics The configuration of the Basic Kafka cluster.
         * 
         * @return builder
         * 
         */
        public Builder basics(@Nullable Output<List<KafkaClusterBasicArgs>> basics) {
            $.basics = basics;
            return this;
        }

        /**
         * @param basics The configuration of the Basic Kafka cluster.
         * 
         * @return builder
         * 
         */
        public Builder basics(List<KafkaClusterBasicArgs> basics) {
            return basics(Output.of(basics));
        }

        /**
         * @param basics The configuration of the Basic Kafka cluster.
         * 
         * @return builder
         * 
         */
        public Builder basics(KafkaClusterBasicArgs... basics) {
            return basics(List.of(basics));
        }

        /**
         * @param cloud The cloud service provider that runs the Kafka cluster. Accepted values are: `AWS`, `AZURE`, and `GCP`.
         * 
         * @return builder
         * 
         */
        public Builder cloud(Output<String> cloud) {
            $.cloud = cloud;
            return this;
        }

        /**
         * @param cloud The cloud service provider that runs the Kafka cluster. Accepted values are: `AWS`, `AZURE`, and `GCP`.
         * 
         * @return builder
         * 
         */
        public Builder cloud(String cloud) {
            return cloud(Output.of(cloud));
        }

        public Builder dedicated(@Nullable Output<KafkaClusterDedicatedArgs> dedicated) {
            $.dedicated = dedicated;
            return this;
        }

        public Builder dedicated(KafkaClusterDedicatedArgs dedicated) {
            return dedicated(Output.of(dedicated));
        }

        /**
         * @param displayName The name of the Kafka cluster.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The name of the Kafka cluster.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param environment Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
         * 
         * @return builder
         * 
         */
        public Builder environment(Output<KafkaClusterEnvironmentArgs> environment) {
            $.environment = environment;
            return this;
        }

        /**
         * @param environment Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
         * 
         * @return builder
         * 
         */
        public Builder environment(KafkaClusterEnvironmentArgs environment) {
            return environment(Output.of(environment));
        }

        /**
         * @param network Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider
         * accounts.
         * 
         * @return builder
         * 
         */
        public Builder network(@Nullable Output<KafkaClusterNetworkArgs> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider
         * accounts.
         * 
         * @return builder
         * 
         */
        public Builder network(KafkaClusterNetworkArgs network) {
            return network(Output.of(network));
        }

        /**
         * @param region The cloud service provider region where the Kafka cluster is running, for example, `us-west-2`. See [Cloud Providers and Regions](https://docs.confluent.io/cloud/current/clusters/regions.html#cloud-providers-and-regions) for a full list of options for AWS, Azure, and GCP.
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The cloud service provider region where the Kafka cluster is running, for example, `us-west-2`. See [Cloud Providers and Regions](https://docs.confluent.io/cloud/current/clusters/regions.html#cloud-providers-and-regions) for a full list of options for AWS, Azure, and GCP.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param standards The configuration of the Standard Kafka cluster.
         * 
         * @return builder
         * 
         */
        public Builder standards(@Nullable Output<List<KafkaClusterStandardArgs>> standards) {
            $.standards = standards;
            return this;
        }

        /**
         * @param standards The configuration of the Standard Kafka cluster.
         * 
         * @return builder
         * 
         */
        public Builder standards(List<KafkaClusterStandardArgs> standards) {
            return standards(Output.of(standards));
        }

        /**
         * @param standards The configuration of the Standard Kafka cluster.
         * 
         * @return builder
         * 
         */
        public Builder standards(KafkaClusterStandardArgs... standards) {
            return standards(List.of(standards));
        }

        public KafkaClusterArgs build() {
            $.availability = Objects.requireNonNull($.availability, "expected parameter 'availability' to be non-null");
            $.cloud = Objects.requireNonNull($.cloud, "expected parameter 'cloud' to be non-null");
            $.environment = Objects.requireNonNull($.environment, "expected parameter 'environment' to be non-null");
            $.region = Objects.requireNonNull($.region, "expected parameter 'region' to be non-null");
            return $;
        }
    }

}

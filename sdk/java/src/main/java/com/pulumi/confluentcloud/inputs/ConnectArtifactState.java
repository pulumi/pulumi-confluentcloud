// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.inputs;

import com.pulumi.confluentcloud.inputs.ConnectArtifactEnvironmentArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectArtifactState extends com.pulumi.resources.ResourceArgs {

    public static final ConnectArtifactState Empty = new ConnectArtifactState();

    /**
     * The artifact file for Connect Artifact in `JAR` or `ZIP` format. This can be relative or absolute path
     * 
     */
    @Import(name="artifactFile")
    private @Nullable Output<String> artifactFile;

    /**
     * @return The artifact file for Connect Artifact in `JAR` or `ZIP` format. This can be relative or absolute path
     * 
     */
    public Optional<Output<String>> artifactFile() {
        return Optional.ofNullable(this.artifactFile);
    }

    /**
     * Cloud provider where the Connect Artifact archive is uploaded.
     * 
     */
    @Import(name="cloud")
    private @Nullable Output<String> cloud;

    /**
     * @return Cloud provider where the Connect Artifact archive is uploaded.
     * 
     */
    public Optional<Output<String>> cloud() {
        return Optional.ofNullable(this.cloud);
    }

    /**
     * Archive format of the Connect Artifact. Supported formats are `JAR` and `ZIP`.
     * 
     */
    @Import(name="contentFormat")
    private @Nullable Output<String> contentFormat;

    /**
     * @return Archive format of the Connect Artifact. Supported formats are `JAR` and `ZIP`.
     * 
     */
    public Optional<Output<String>> contentFormat() {
        return Optional.ofNullable(this.contentFormat);
    }

    /**
     * Description of the Connect Artifact.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the Connect Artifact.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The unique name of the Connect Artifact per cloud, environment scope.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The unique name of the Connect Artifact per cloud, environment scope.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     * 
     */
    @Import(name="environment")
    private @Nullable Output<ConnectArtifactEnvironmentArgs> environment;

    /**
     * @return Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     * 
     */
    public Optional<Output<ConnectArtifactEnvironmentArgs>> environment() {
        return Optional.ofNullable(this.environment);
    }

    /**
     * Status of the Connect Artifact.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of the Connect Artifact.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private ConnectArtifactState() {}

    private ConnectArtifactState(ConnectArtifactState $) {
        this.artifactFile = $.artifactFile;
        this.cloud = $.cloud;
        this.contentFormat = $.contentFormat;
        this.description = $.description;
        this.displayName = $.displayName;
        this.environment = $.environment;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectArtifactState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectArtifactState $;

        public Builder() {
            $ = new ConnectArtifactState();
        }

        public Builder(ConnectArtifactState defaults) {
            $ = new ConnectArtifactState(Objects.requireNonNull(defaults));
        }

        /**
         * @param artifactFile The artifact file for Connect Artifact in `JAR` or `ZIP` format. This can be relative or absolute path
         * 
         * @return builder
         * 
         */
        public Builder artifactFile(@Nullable Output<String> artifactFile) {
            $.artifactFile = artifactFile;
            return this;
        }

        /**
         * @param artifactFile The artifact file for Connect Artifact in `JAR` or `ZIP` format. This can be relative or absolute path
         * 
         * @return builder
         * 
         */
        public Builder artifactFile(String artifactFile) {
            return artifactFile(Output.of(artifactFile));
        }

        /**
         * @param cloud Cloud provider where the Connect Artifact archive is uploaded.
         * 
         * @return builder
         * 
         */
        public Builder cloud(@Nullable Output<String> cloud) {
            $.cloud = cloud;
            return this;
        }

        /**
         * @param cloud Cloud provider where the Connect Artifact archive is uploaded.
         * 
         * @return builder
         * 
         */
        public Builder cloud(String cloud) {
            return cloud(Output.of(cloud));
        }

        /**
         * @param contentFormat Archive format of the Connect Artifact. Supported formats are `JAR` and `ZIP`.
         * 
         * @return builder
         * 
         */
        public Builder contentFormat(@Nullable Output<String> contentFormat) {
            $.contentFormat = contentFormat;
            return this;
        }

        /**
         * @param contentFormat Archive format of the Connect Artifact. Supported formats are `JAR` and `ZIP`.
         * 
         * @return builder
         * 
         */
        public Builder contentFormat(String contentFormat) {
            return contentFormat(Output.of(contentFormat));
        }

        /**
         * @param description Description of the Connect Artifact.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the Connect Artifact.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName The unique name of the Connect Artifact per cloud, environment scope.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The unique name of the Connect Artifact per cloud, environment scope.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param environment Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
         * 
         * @return builder
         * 
         */
        public Builder environment(@Nullable Output<ConnectArtifactEnvironmentArgs> environment) {
            $.environment = environment;
            return this;
        }

        /**
         * @param environment Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
         * 
         * @return builder
         * 
         */
        public Builder environment(ConnectArtifactEnvironmentArgs environment) {
            return environment(Output.of(environment));
        }

        /**
         * @param status Status of the Connect Artifact.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of the Connect Artifact.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public ConnectArtifactState build() {
            return $;
        }
    }

}

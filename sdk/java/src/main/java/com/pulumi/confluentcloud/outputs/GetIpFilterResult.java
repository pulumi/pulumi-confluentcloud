// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetIpFilterResult {
    /**
     * @return (Required String) A human-readable name for an IP Filter. Can contain any unicode letter or number, the ASCII space character, or any of the following special characters: `[`, `]`, `|`, `&amp;`, `+`, `-`, `_`, `/`, `.`, `,`.
     * 
     */
    private String filterName;
    private String id;
    /**
     * @return (Required List of Strings) A list of IP Groups.
     * 
     */
    private List<String> ipGroups;
    /**
     * @return (Required List of Strings) Scope of resources covered by this IP Filter. Resource group must be set to &#39;multiple&#39; in order to use this property. During update operations, note that the operation groups passed in will replace the list of existing operation groups (passing in an empty list will remove all operation groups) from the filter (in line with the behavior for `ip_groups` attribute).
     * 
     */
    private List<String> operationGroups;
    /**
     * @return (Required String) Scope of resources covered by this IP Filter. Available resource groups include `&#34;management&#34;` and `&#34;multiple&#34;`.
     * 
     */
    private String resourceGroup;
    /**
     * @return (Required String) A CRN that specifies the scope of the IP Filter, specifically the organization or environment. Without specifying this property, the IP Filter would apply to the whole organization. For example, `&#34;crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa&#34;` or `data.confluent_organization.resource_name`.
     * 
     */
    private String resourceScope;

    private GetIpFilterResult() {}
    /**
     * @return (Required String) A human-readable name for an IP Filter. Can contain any unicode letter or number, the ASCII space character, or any of the following special characters: `[`, `]`, `|`, `&amp;`, `+`, `-`, `_`, `/`, `.`, `,`.
     * 
     */
    public String filterName() {
        return this.filterName;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return (Required List of Strings) A list of IP Groups.
     * 
     */
    public List<String> ipGroups() {
        return this.ipGroups;
    }
    /**
     * @return (Required List of Strings) Scope of resources covered by this IP Filter. Resource group must be set to &#39;multiple&#39; in order to use this property. During update operations, note that the operation groups passed in will replace the list of existing operation groups (passing in an empty list will remove all operation groups) from the filter (in line with the behavior for `ip_groups` attribute).
     * 
     */
    public List<String> operationGroups() {
        return this.operationGroups;
    }
    /**
     * @return (Required String) Scope of resources covered by this IP Filter. Available resource groups include `&#34;management&#34;` and `&#34;multiple&#34;`.
     * 
     */
    public String resourceGroup() {
        return this.resourceGroup;
    }
    /**
     * @return (Required String) A CRN that specifies the scope of the IP Filter, specifically the organization or environment. Without specifying this property, the IP Filter would apply to the whole organization. For example, `&#34;crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa&#34;` or `data.confluent_organization.resource_name`.
     * 
     */
    public String resourceScope() {
        return this.resourceScope;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetIpFilterResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String filterName;
        private String id;
        private List<String> ipGroups;
        private List<String> operationGroups;
        private String resourceGroup;
        private String resourceScope;
        public Builder() {}
        public Builder(GetIpFilterResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filterName = defaults.filterName;
    	      this.id = defaults.id;
    	      this.ipGroups = defaults.ipGroups;
    	      this.operationGroups = defaults.operationGroups;
    	      this.resourceGroup = defaults.resourceGroup;
    	      this.resourceScope = defaults.resourceScope;
        }

        @CustomType.Setter
        public Builder filterName(String filterName) {
            if (filterName == null) {
              throw new MissingRequiredPropertyException("GetIpFilterResult", "filterName");
            }
            this.filterName = filterName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetIpFilterResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipGroups(List<String> ipGroups) {
            if (ipGroups == null) {
              throw new MissingRequiredPropertyException("GetIpFilterResult", "ipGroups");
            }
            this.ipGroups = ipGroups;
            return this;
        }
        public Builder ipGroups(String... ipGroups) {
            return ipGroups(List.of(ipGroups));
        }
        @CustomType.Setter
        public Builder operationGroups(List<String> operationGroups) {
            if (operationGroups == null) {
              throw new MissingRequiredPropertyException("GetIpFilterResult", "operationGroups");
            }
            this.operationGroups = operationGroups;
            return this;
        }
        public Builder operationGroups(String... operationGroups) {
            return operationGroups(List.of(operationGroups));
        }
        @CustomType.Setter
        public Builder resourceGroup(String resourceGroup) {
            if (resourceGroup == null) {
              throw new MissingRequiredPropertyException("GetIpFilterResult", "resourceGroup");
            }
            this.resourceGroup = resourceGroup;
            return this;
        }
        @CustomType.Setter
        public Builder resourceScope(String resourceScope) {
            if (resourceScope == null) {
              throw new MissingRequiredPropertyException("GetIpFilterResult", "resourceScope");
            }
            this.resourceScope = resourceScope;
            return this;
        }
        public GetIpFilterResult build() {
            final var _resultValue = new GetIpFilterResult();
            _resultValue.filterName = filterName;
            _resultValue.id = id;
            _resultValue.ipGroups = ipGroups;
            _resultValue.operationGroups = operationGroups;
            _resultValue.resourceGroup = resourceGroup;
            _resultValue.resourceScope = resourceScope;
            return _resultValue;
        }
    }
}

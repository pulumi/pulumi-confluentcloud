// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class CustomConnectorPluginVersionConnectorClassArgs extends com.pulumi.resources.ResourceArgs {

    public static final CustomConnectorPluginVersionConnectorClassArgs Empty = new CustomConnectorPluginVersionConnectorClassArgs();

    /**
     * The name of the connector class.
     * 
     */
    @Import(name="connectorClassName", required=true)
    private Output<String> connectorClassName;

    /**
     * @return The name of the connector class.
     * 
     */
    public Output<String> connectorClassName() {
        return this.connectorClassName;
    }

    /**
     * The type of the Custom Connector Plugin. Accepted values are: `SOURCE`, `SINK`.
     * 
     */
    @Import(name="connectorType", required=true)
    private Output<String> connectorType;

    /**
     * @return The type of the Custom Connector Plugin. Accepted values are: `SOURCE`, `SINK`.
     * 
     */
    public Output<String> connectorType() {
        return this.connectorType;
    }

    private CustomConnectorPluginVersionConnectorClassArgs() {}

    private CustomConnectorPluginVersionConnectorClassArgs(CustomConnectorPluginVersionConnectorClassArgs $) {
        this.connectorClassName = $.connectorClassName;
        this.connectorType = $.connectorType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomConnectorPluginVersionConnectorClassArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomConnectorPluginVersionConnectorClassArgs $;

        public Builder() {
            $ = new CustomConnectorPluginVersionConnectorClassArgs();
        }

        public Builder(CustomConnectorPluginVersionConnectorClassArgs defaults) {
            $ = new CustomConnectorPluginVersionConnectorClassArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectorClassName The name of the connector class.
         * 
         * @return builder
         * 
         */
        public Builder connectorClassName(Output<String> connectorClassName) {
            $.connectorClassName = connectorClassName;
            return this;
        }

        /**
         * @param connectorClassName The name of the connector class.
         * 
         * @return builder
         * 
         */
        public Builder connectorClassName(String connectorClassName) {
            return connectorClassName(Output.of(connectorClassName));
        }

        /**
         * @param connectorType The type of the Custom Connector Plugin. Accepted values are: `SOURCE`, `SINK`.
         * 
         * @return builder
         * 
         */
        public Builder connectorType(Output<String> connectorType) {
            $.connectorType = connectorType;
            return this;
        }

        /**
         * @param connectorType The type of the Custom Connector Plugin. Accepted values are: `SOURCE`, `SINK`.
         * 
         * @return builder
         * 
         */
        public Builder connectorType(String connectorType) {
            return connectorType(Output.of(connectorType));
        }

        public CustomConnectorPluginVersionConnectorClassArgs build() {
            if ($.connectorClassName == null) {
                throw new MissingRequiredPropertyException("CustomConnectorPluginVersionConnectorClassArgs", "connectorClassName");
            }
            if ($.connectorType == null) {
                throw new MissingRequiredPropertyException("CustomConnectorPluginVersionConnectorClassArgs", "connectorType");
            }
            return $;
        }
    }

}

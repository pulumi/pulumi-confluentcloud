// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TableflowTopicErrorHandling {
    /**
     * @return The topic to which the bad records will be logged for error handling mode `LOG`. Creates the topic if it doesn&#39;t already exist. The default topic is &#34;errorLog&#34; if error handling mode is `LOG`, and empty otherwise.
     * 
     */
    private @Nullable String logTarget;
    /**
     * @return The error handling mode. For `SUSPEND`, the materialization of the topic is suspended in case of record failures. For `SKIP`, bad records are skipped and the materialization continues with the next record. For `LOG`, bad records are logged to a dead-letter queue (DLQ) topic and the materialization continues with the next record. The default mode is `SUSPEND`.
     * 
     */
    private @Nullable String mode;

    private TableflowTopicErrorHandling() {}
    /**
     * @return The topic to which the bad records will be logged for error handling mode `LOG`. Creates the topic if it doesn&#39;t already exist. The default topic is &#34;errorLog&#34; if error handling mode is `LOG`, and empty otherwise.
     * 
     */
    public Optional<String> logTarget() {
        return Optional.ofNullable(this.logTarget);
    }
    /**
     * @return The error handling mode. For `SUSPEND`, the materialization of the topic is suspended in case of record failures. For `SKIP`, bad records are skipped and the materialization continues with the next record. For `LOG`, bad records are logged to a dead-letter queue (DLQ) topic and the materialization continues with the next record. The default mode is `SUSPEND`.
     * 
     */
    public Optional<String> mode() {
        return Optional.ofNullable(this.mode);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TableflowTopicErrorHandling defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String logTarget;
        private @Nullable String mode;
        public Builder() {}
        public Builder(TableflowTopicErrorHandling defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.logTarget = defaults.logTarget;
    	      this.mode = defaults.mode;
        }

        @CustomType.Setter
        public Builder logTarget(@Nullable String logTarget) {

            this.logTarget = logTarget;
            return this;
        }
        @CustomType.Setter
        public Builder mode(@Nullable String mode) {

            this.mode = mode;
            return this;
        }
        public TableflowTopicErrorHandling build() {
            final var _resultValue = new TableflowTopicErrorHandling();
            _resultValue.logTarget = logTarget;
            _resultValue.mode = mode;
            return _resultValue;
        }
    }
}

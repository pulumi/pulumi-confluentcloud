// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud;

import com.pulumi.confluentcloud.KafkaClusterConfigArgs;
import com.pulumi.confluentcloud.Utilities;
import com.pulumi.confluentcloud.inputs.KafkaClusterConfigState;
import com.pulumi.confluentcloud.outputs.KafkaClusterConfigCredentials;
import com.pulumi.confluentcloud.outputs.KafkaClusterConfigKafkaCluster;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Import
 * 
 * You can import a Kafka cluster config by using the Kafka cluster ID, for example:
 * 
 *  Option #1: Manage multiple Kafka clusters in the same Terraform workspace
 * 
 *  $ export IMPORT_KAFKA_API_KEY=&#34;&lt;kafka_api_key&gt;&#34;
 * 
 *  $ export IMPORT_KAFKA_API_SECRET=&#34;&lt;kafka_api_secret&gt;&#34;
 * 
 *  $ export IMPORT_KAFKA_REST_ENDPOINT=&#34;&lt;kafka_rest_endpoint&gt;&#34;
 * 
 * ```sh
 * $ pulumi import confluentcloud:index/kafkaClusterConfig:KafkaClusterConfig test lkc-abc123
 * ```
 * 
 *  Option #2: Manage a single Kafka cluster in the same Terraform workspace
 * 
 * ```sh
 * $ pulumi import confluentcloud:index/kafkaClusterConfig:KafkaClusterConfig test lkc-abc123
 * ```
 * 
 *  !&gt; **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
 * 
 */
@ResourceType(type="confluentcloud:index/kafkaClusterConfig:KafkaClusterConfig")
public class KafkaClusterConfig extends com.pulumi.resources.CustomResource {
    /**
     * The custom cluster settings to set:
     * 
     */
    @Export(name="config", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> config;

    /**
     * @return The custom cluster settings to set:
     * 
     */
    public Output<Map<String,String>> config() {
        return this.config;
    }
    /**
     * The Cluster API Credentials.
     * 
     */
    @Export(name="credentials", refs={KafkaClusterConfigCredentials.class}, tree="[0]")
    private Output</* @Nullable */ KafkaClusterConfigCredentials> credentials;

    /**
     * @return The Cluster API Credentials.
     * 
     */
    public Output<Optional<KafkaClusterConfigCredentials>> credentials() {
        return Codegen.optional(this.credentials);
    }
    @Export(name="kafkaCluster", refs={KafkaClusterConfigKafkaCluster.class}, tree="[0]")
    private Output</* @Nullable */ KafkaClusterConfigKafkaCluster> kafkaCluster;

    public Output<Optional<KafkaClusterConfigKafkaCluster>> kafkaCluster() {
        return Codegen.optional(this.kafkaCluster);
    }
    /**
     * The REST endpoint of the Dedicated Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
     * 
     */
    @Export(name="restEndpoint", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> restEndpoint;

    /**
     * @return The REST endpoint of the Dedicated Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
     * 
     */
    public Output<Optional<String>> restEndpoint() {
        return Codegen.optional(this.restEndpoint);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public KafkaClusterConfig(String name) {
        this(name, KafkaClusterConfigArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public KafkaClusterConfig(String name, KafkaClusterConfigArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public KafkaClusterConfig(String name, KafkaClusterConfigArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("confluentcloud:index/kafkaClusterConfig:KafkaClusterConfig", name, args == null ? KafkaClusterConfigArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private KafkaClusterConfig(String name, Output<String> id, @Nullable KafkaClusterConfigState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("confluentcloud:index/kafkaClusterConfig:KafkaClusterConfig", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "credentials"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static KafkaClusterConfig get(String name, Output<String> id, @Nullable KafkaClusterConfigState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new KafkaClusterConfig(name, id, state, options);
    }
}

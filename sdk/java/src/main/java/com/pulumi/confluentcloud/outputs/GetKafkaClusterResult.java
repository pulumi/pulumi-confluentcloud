// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.outputs;

import com.pulumi.confluentcloud.outputs.GetKafkaClusterBasic;
import com.pulumi.confluentcloud.outputs.GetKafkaClusterByokKey;
import com.pulumi.confluentcloud.outputs.GetKafkaClusterDedicated;
import com.pulumi.confluentcloud.outputs.GetKafkaClusterEnterprise;
import com.pulumi.confluentcloud.outputs.GetKafkaClusterEnvironment;
import com.pulumi.confluentcloud.outputs.GetKafkaClusterNetwork;
import com.pulumi.confluentcloud.outputs.GetKafkaClusterStandard;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetKafkaClusterResult {
    /**
     * @return (Required String) An API Version of the schema version of the Kafka cluster, for example, `cmk/v2`.
     * 
     */
    private String apiVersion;
    /**
     * @return (Required String) The availability zone configuration of the Kafka cluster. Accepted values are: `SINGLE_ZONE` and `MULTI_ZONE`.
     * 
     */
    private String availability;
    /**
     * @return (Optional Configuration Block) The configuration of the Basic Kafka cluster.
     * 
     */
    private @Nullable List<GetKafkaClusterBasic> basics;
    /**
     * @return (Required String) The bootstrap endpoint used by Kafka clients to connect to the Kafka cluster. (e.g., `pkc-00000.us-central1.gcp.confluent.cloud:9092`).
     * 
     */
    private String bootstrapEndpoint;
    /**
     * @return (Optional Configuration Block) supports the following:
     * 
     */
    private List<GetKafkaClusterByokKey> byokKeys;
    /**
     * @return (Required String) The cloud service provider that runs the Kafka cluster. Accepted values are: `AWS`, `AZURE`, and `GCP`.
     * 
     */
    private String cloud;
    /**
     * @return (Optional Configuration Block) The configuration of the Dedicated Kafka cluster. It supports the following:
     * 
     */
    private @Nullable GetKafkaClusterDedicated dedicated;
    /**
     * @return (Required String) The name of the Kafka cluster.
     * 
     */
    private String displayName;
    /**
     * @return (Optional Configuration Block) The configuration of the Enterprise Kafka cluster.
     * 
     */
    private @Nullable List<GetKafkaClusterEnterprise> enterprises;
    private GetKafkaClusterEnvironment environment;
    /**
     * @return (Required String) The ID of the Confluent key that is used to encrypt the data in the Kafka cluster, for example, `cck-lye5m`.
     * 
     */
    private String id;
    /**
     * @return (Required String) A kind of the Kafka cluster, for example, `Cluster`.
     * 
     */
    private String kind;
    /**
     * @return (Optional Configuration Block) supports the following:
     * 
     */
    private List<GetKafkaClusterNetwork> networks;
    /**
     * @return (Required String) The Confluent Resource Name of the Kafka cluster, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/cloud-cluster=lkc-abc123`.
     * 
     */
    private String rbacCrn;
    /**
     * @return (Required String) The cloud service provider region where the Kafka cluster is running, for example, `us-west-2`. See [Cloud Providers and Regions](https://docs.confluent.io/cloud/current/clusters/regions.html#cloud-providers-and-regions) for a full list of options for AWS, Azure, and GCP.
     * 
     */
    private String region;
    /**
     * @return (Required String) The REST endpoint of the Kafka cluster (e.g., `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
     * 
     */
    private String restEndpoint;
    /**
     * @return (Optional Configuration Block) The configuration of the Standard Kafka cluster.
     * 
     */
    private @Nullable List<GetKafkaClusterStandard> standards;

    private GetKafkaClusterResult() {}
    /**
     * @return (Required String) An API Version of the schema version of the Kafka cluster, for example, `cmk/v2`.
     * 
     */
    public String apiVersion() {
        return this.apiVersion;
    }
    /**
     * @return (Required String) The availability zone configuration of the Kafka cluster. Accepted values are: `SINGLE_ZONE` and `MULTI_ZONE`.
     * 
     */
    public String availability() {
        return this.availability;
    }
    /**
     * @return (Optional Configuration Block) The configuration of the Basic Kafka cluster.
     * 
     */
    public List<GetKafkaClusterBasic> basics() {
        return this.basics == null ? List.of() : this.basics;
    }
    /**
     * @return (Required String) The bootstrap endpoint used by Kafka clients to connect to the Kafka cluster. (e.g., `pkc-00000.us-central1.gcp.confluent.cloud:9092`).
     * 
     */
    public String bootstrapEndpoint() {
        return this.bootstrapEndpoint;
    }
    /**
     * @return (Optional Configuration Block) supports the following:
     * 
     */
    public List<GetKafkaClusterByokKey> byokKeys() {
        return this.byokKeys;
    }
    /**
     * @return (Required String) The cloud service provider that runs the Kafka cluster. Accepted values are: `AWS`, `AZURE`, and `GCP`.
     * 
     */
    public String cloud() {
        return this.cloud;
    }
    /**
     * @return (Optional Configuration Block) The configuration of the Dedicated Kafka cluster. It supports the following:
     * 
     */
    public Optional<GetKafkaClusterDedicated> dedicated() {
        return Optional.ofNullable(this.dedicated);
    }
    /**
     * @return (Required String) The name of the Kafka cluster.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return (Optional Configuration Block) The configuration of the Enterprise Kafka cluster.
     * 
     */
    public List<GetKafkaClusterEnterprise> enterprises() {
        return this.enterprises == null ? List.of() : this.enterprises;
    }
    public GetKafkaClusterEnvironment environment() {
        return this.environment;
    }
    /**
     * @return (Required String) The ID of the Confluent key that is used to encrypt the data in the Kafka cluster, for example, `cck-lye5m`.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return (Required String) A kind of the Kafka cluster, for example, `Cluster`.
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return (Optional Configuration Block) supports the following:
     * 
     */
    public List<GetKafkaClusterNetwork> networks() {
        return this.networks;
    }
    /**
     * @return (Required String) The Confluent Resource Name of the Kafka cluster, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/cloud-cluster=lkc-abc123`.
     * 
     */
    public String rbacCrn() {
        return this.rbacCrn;
    }
    /**
     * @return (Required String) The cloud service provider region where the Kafka cluster is running, for example, `us-west-2`. See [Cloud Providers and Regions](https://docs.confluent.io/cloud/current/clusters/regions.html#cloud-providers-and-regions) for a full list of options for AWS, Azure, and GCP.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return (Required String) The REST endpoint of the Kafka cluster (e.g., `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
     * 
     */
    public String restEndpoint() {
        return this.restEndpoint;
    }
    /**
     * @return (Optional Configuration Block) The configuration of the Standard Kafka cluster.
     * 
     */
    public List<GetKafkaClusterStandard> standards() {
        return this.standards == null ? List.of() : this.standards;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKafkaClusterResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String apiVersion;
        private String availability;
        private @Nullable List<GetKafkaClusterBasic> basics;
        private String bootstrapEndpoint;
        private List<GetKafkaClusterByokKey> byokKeys;
        private String cloud;
        private @Nullable GetKafkaClusterDedicated dedicated;
        private String displayName;
        private @Nullable List<GetKafkaClusterEnterprise> enterprises;
        private GetKafkaClusterEnvironment environment;
        private String id;
        private String kind;
        private List<GetKafkaClusterNetwork> networks;
        private String rbacCrn;
        private String region;
        private String restEndpoint;
        private @Nullable List<GetKafkaClusterStandard> standards;
        public Builder() {}
        public Builder(GetKafkaClusterResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiVersion = defaults.apiVersion;
    	      this.availability = defaults.availability;
    	      this.basics = defaults.basics;
    	      this.bootstrapEndpoint = defaults.bootstrapEndpoint;
    	      this.byokKeys = defaults.byokKeys;
    	      this.cloud = defaults.cloud;
    	      this.dedicated = defaults.dedicated;
    	      this.displayName = defaults.displayName;
    	      this.enterprises = defaults.enterprises;
    	      this.environment = defaults.environment;
    	      this.id = defaults.id;
    	      this.kind = defaults.kind;
    	      this.networks = defaults.networks;
    	      this.rbacCrn = defaults.rbacCrn;
    	      this.region = defaults.region;
    	      this.restEndpoint = defaults.restEndpoint;
    	      this.standards = defaults.standards;
        }

        @CustomType.Setter
        public Builder apiVersion(String apiVersion) {
            this.apiVersion = Objects.requireNonNull(apiVersion);
            return this;
        }
        @CustomType.Setter
        public Builder availability(String availability) {
            this.availability = Objects.requireNonNull(availability);
            return this;
        }
        @CustomType.Setter
        public Builder basics(@Nullable List<GetKafkaClusterBasic> basics) {
            this.basics = basics;
            return this;
        }
        public Builder basics(GetKafkaClusterBasic... basics) {
            return basics(List.of(basics));
        }
        @CustomType.Setter
        public Builder bootstrapEndpoint(String bootstrapEndpoint) {
            this.bootstrapEndpoint = Objects.requireNonNull(bootstrapEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder byokKeys(List<GetKafkaClusterByokKey> byokKeys) {
            this.byokKeys = Objects.requireNonNull(byokKeys);
            return this;
        }
        public Builder byokKeys(GetKafkaClusterByokKey... byokKeys) {
            return byokKeys(List.of(byokKeys));
        }
        @CustomType.Setter
        public Builder cloud(String cloud) {
            this.cloud = Objects.requireNonNull(cloud);
            return this;
        }
        @CustomType.Setter
        public Builder dedicated(@Nullable GetKafkaClusterDedicated dedicated) {
            this.dedicated = dedicated;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder enterprises(@Nullable List<GetKafkaClusterEnterprise> enterprises) {
            this.enterprises = enterprises;
            return this;
        }
        public Builder enterprises(GetKafkaClusterEnterprise... enterprises) {
            return enterprises(List.of(enterprises));
        }
        @CustomType.Setter
        public Builder environment(GetKafkaClusterEnvironment environment) {
            this.environment = Objects.requireNonNull(environment);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder kind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        @CustomType.Setter
        public Builder networks(List<GetKafkaClusterNetwork> networks) {
            this.networks = Objects.requireNonNull(networks);
            return this;
        }
        public Builder networks(GetKafkaClusterNetwork... networks) {
            return networks(List.of(networks));
        }
        @CustomType.Setter
        public Builder rbacCrn(String rbacCrn) {
            this.rbacCrn = Objects.requireNonNull(rbacCrn);
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }
        @CustomType.Setter
        public Builder restEndpoint(String restEndpoint) {
            this.restEndpoint = Objects.requireNonNull(restEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder standards(@Nullable List<GetKafkaClusterStandard> standards) {
            this.standards = standards;
            return this;
        }
        public Builder standards(GetKafkaClusterStandard... standards) {
            return standards(List.of(standards));
        }
        public GetKafkaClusterResult build() {
            final var o = new GetKafkaClusterResult();
            o.apiVersion = apiVersion;
            o.availability = availability;
            o.basics = basics;
            o.bootstrapEndpoint = bootstrapEndpoint;
            o.byokKeys = byokKeys;
            o.cloud = cloud;
            o.dedicated = dedicated;
            o.displayName = displayName;
            o.enterprises = enterprises;
            o.environment = environment;
            o.id = id;
            o.kind = kind;
            o.networks = networks;
            o.rbacCrn = rbacCrn;
            o.region = region;
            o.restEndpoint = restEndpoint;
            o.standards = standards;
            return o;
        }
    }
}

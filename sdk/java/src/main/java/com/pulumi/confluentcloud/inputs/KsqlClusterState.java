// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.inputs;

import com.pulumi.confluentcloud.inputs.KsqlClusterCredentialIdentityArgs;
import com.pulumi.confluentcloud.inputs.KsqlClusterEnvironmentArgs;
import com.pulumi.confluentcloud.inputs.KsqlClusterKafkaClusterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KsqlClusterState extends com.pulumi.resources.ResourceArgs {

    public static final KsqlClusterState Empty = new KsqlClusterState();

    /**
     * (Required String) An API Version of the schema version of the ksqlDB cluster, for example, `ksqldbcm/v2`.
     * 
     */
    @Import(name="apiVersion")
    private @Nullable Output<String> apiVersion;

    /**
     * @return (Required String) An API Version of the schema version of the ksqlDB cluster, for example, `ksqldbcm/v2`.
     * 
     */
    public Optional<Output<String>> apiVersion() {
        return Optional.ofNullable(this.apiVersion);
    }

    @Import(name="credentialIdentity")
    private @Nullable Output<KsqlClusterCredentialIdentityArgs> credentialIdentity;

    public Optional<Output<KsqlClusterCredentialIdentityArgs>> credentialIdentity() {
        return Optional.ofNullable(this.credentialIdentity);
    }

    /**
     * The number of Confluent Streaming Units (CSUs) for the ksqlDB cluster.
     * 
     */
    @Import(name="csu")
    private @Nullable Output<Integer> csu;

    /**
     * @return The number of Confluent Streaming Units (CSUs) for the ksqlDB cluster.
     * 
     */
    public Optional<Output<Integer>> csu() {
        return Optional.ofNullable(this.csu);
    }

    /**
     * The name of the ksqlDB cluster.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The name of the ksqlDB cluster.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     * 
     */
    @Import(name="environment")
    private @Nullable Output<KsqlClusterEnvironmentArgs> environment;

    /**
     * @return Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     * 
     */
    public Optional<Output<KsqlClusterEnvironmentArgs>> environment() {
        return Optional.ofNullable(this.environment);
    }

    @Import(name="kafkaCluster")
    private @Nullable Output<KsqlClusterKafkaClusterArgs> kafkaCluster;

    public Optional<Output<KsqlClusterKafkaClusterArgs>> kafkaCluster() {
        return Optional.ofNullable(this.kafkaCluster);
    }

    /**
     * (Required String) A kind of the ksqlDB cluster, for example, `Cluster`.
     * 
     */
    @Import(name="kind")
    private @Nullable Output<String> kind;

    /**
     * @return (Required String) A kind of the ksqlDB cluster, for example, `Cluster`.
     * 
     */
    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * (Required String) The Confluent Resource Name of the ksqlDB cluster.
     * 
     */
    @Import(name="resourceName")
    private @Nullable Output<String> resourceName;

    /**
     * @return (Required String) The Confluent Resource Name of the ksqlDB cluster.
     * 
     */
    public Optional<Output<String>> resourceName() {
        return Optional.ofNullable(this.resourceName);
    }

    /**
     * (Required String) The API endpoint of the ksqlDB cluster, for example, `https://pksqlc-00000.us-central1.gcp.glb.confluent.cloud`.
     * 
     */
    @Import(name="restEndpoint")
    private @Nullable Output<String> restEndpoint;

    /**
     * @return (Required String) The API endpoint of the ksqlDB cluster, for example, `https://pksqlc-00000.us-central1.gcp.glb.confluent.cloud`.
     * 
     */
    public Optional<Output<String>> restEndpoint() {
        return Optional.ofNullable(this.restEndpoint);
    }

    /**
     * (Required Integer) The amount of storage (in GB) provisioned to the ksqlDB cluster.
     * 
     */
    @Import(name="storage")
    private @Nullable Output<Integer> storage;

    /**
     * @return (Required Integer) The amount of storage (in GB) provisioned to the ksqlDB cluster.
     * 
     */
    public Optional<Output<Integer>> storage() {
        return Optional.ofNullable(this.storage);
    }

    /**
     * (Required String) Topic name prefix used by this ksqlDB cluster. Used to assign ACLs for this ksqlDB cluster to use, for example, `pksqlc-00000`.
     * 
     */
    @Import(name="topicPrefix")
    private @Nullable Output<String> topicPrefix;

    /**
     * @return (Required String) Topic name prefix used by this ksqlDB cluster. Used to assign ACLs for this ksqlDB cluster to use, for example, `pksqlc-00000`.
     * 
     */
    public Optional<Output<String>> topicPrefix() {
        return Optional.ofNullable(this.topicPrefix);
    }

    /**
     * Controls whether the row data should be included in the processing log topic. Set it to `false` if you don&#39;t want to emit sensitive information to the processing log. Defaults to `true`.
     * 
     */
    @Import(name="useDetailedProcessingLog")
    private @Nullable Output<Boolean> useDetailedProcessingLog;

    /**
     * @return Controls whether the row data should be included in the processing log topic. Set it to `false` if you don&#39;t want to emit sensitive information to the processing log. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> useDetailedProcessingLog() {
        return Optional.ofNullable(this.useDetailedProcessingLog);
    }

    private KsqlClusterState() {}

    private KsqlClusterState(KsqlClusterState $) {
        this.apiVersion = $.apiVersion;
        this.credentialIdentity = $.credentialIdentity;
        this.csu = $.csu;
        this.displayName = $.displayName;
        this.environment = $.environment;
        this.kafkaCluster = $.kafkaCluster;
        this.kind = $.kind;
        this.resourceName = $.resourceName;
        this.restEndpoint = $.restEndpoint;
        this.storage = $.storage;
        this.topicPrefix = $.topicPrefix;
        this.useDetailedProcessingLog = $.useDetailedProcessingLog;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KsqlClusterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KsqlClusterState $;

        public Builder() {
            $ = new KsqlClusterState();
        }

        public Builder(KsqlClusterState defaults) {
            $ = new KsqlClusterState(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiVersion (Required String) An API Version of the schema version of the ksqlDB cluster, for example, `ksqldbcm/v2`.
         * 
         * @return builder
         * 
         */
        public Builder apiVersion(@Nullable Output<String> apiVersion) {
            $.apiVersion = apiVersion;
            return this;
        }

        /**
         * @param apiVersion (Required String) An API Version of the schema version of the ksqlDB cluster, for example, `ksqldbcm/v2`.
         * 
         * @return builder
         * 
         */
        public Builder apiVersion(String apiVersion) {
            return apiVersion(Output.of(apiVersion));
        }

        public Builder credentialIdentity(@Nullable Output<KsqlClusterCredentialIdentityArgs> credentialIdentity) {
            $.credentialIdentity = credentialIdentity;
            return this;
        }

        public Builder credentialIdentity(KsqlClusterCredentialIdentityArgs credentialIdentity) {
            return credentialIdentity(Output.of(credentialIdentity));
        }

        /**
         * @param csu The number of Confluent Streaming Units (CSUs) for the ksqlDB cluster.
         * 
         * @return builder
         * 
         */
        public Builder csu(@Nullable Output<Integer> csu) {
            $.csu = csu;
            return this;
        }

        /**
         * @param csu The number of Confluent Streaming Units (CSUs) for the ksqlDB cluster.
         * 
         * @return builder
         * 
         */
        public Builder csu(Integer csu) {
            return csu(Output.of(csu));
        }

        /**
         * @param displayName The name of the ksqlDB cluster.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The name of the ksqlDB cluster.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param environment Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
         * 
         * @return builder
         * 
         */
        public Builder environment(@Nullable Output<KsqlClusterEnvironmentArgs> environment) {
            $.environment = environment;
            return this;
        }

        /**
         * @param environment Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
         * 
         * @return builder
         * 
         */
        public Builder environment(KsqlClusterEnvironmentArgs environment) {
            return environment(Output.of(environment));
        }

        public Builder kafkaCluster(@Nullable Output<KsqlClusterKafkaClusterArgs> kafkaCluster) {
            $.kafkaCluster = kafkaCluster;
            return this;
        }

        public Builder kafkaCluster(KsqlClusterKafkaClusterArgs kafkaCluster) {
            return kafkaCluster(Output.of(kafkaCluster));
        }

        /**
         * @param kind (Required String) A kind of the ksqlDB cluster, for example, `Cluster`.
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind (Required String) A kind of the ksqlDB cluster, for example, `Cluster`.
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param resourceName (Required String) The Confluent Resource Name of the ksqlDB cluster.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(@Nullable Output<String> resourceName) {
            $.resourceName = resourceName;
            return this;
        }

        /**
         * @param resourceName (Required String) The Confluent Resource Name of the ksqlDB cluster.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(String resourceName) {
            return resourceName(Output.of(resourceName));
        }

        /**
         * @param restEndpoint (Required String) The API endpoint of the ksqlDB cluster, for example, `https://pksqlc-00000.us-central1.gcp.glb.confluent.cloud`.
         * 
         * @return builder
         * 
         */
        public Builder restEndpoint(@Nullable Output<String> restEndpoint) {
            $.restEndpoint = restEndpoint;
            return this;
        }

        /**
         * @param restEndpoint (Required String) The API endpoint of the ksqlDB cluster, for example, `https://pksqlc-00000.us-central1.gcp.glb.confluent.cloud`.
         * 
         * @return builder
         * 
         */
        public Builder restEndpoint(String restEndpoint) {
            return restEndpoint(Output.of(restEndpoint));
        }

        /**
         * @param storage (Required Integer) The amount of storage (in GB) provisioned to the ksqlDB cluster.
         * 
         * @return builder
         * 
         */
        public Builder storage(@Nullable Output<Integer> storage) {
            $.storage = storage;
            return this;
        }

        /**
         * @param storage (Required Integer) The amount of storage (in GB) provisioned to the ksqlDB cluster.
         * 
         * @return builder
         * 
         */
        public Builder storage(Integer storage) {
            return storage(Output.of(storage));
        }

        /**
         * @param topicPrefix (Required String) Topic name prefix used by this ksqlDB cluster. Used to assign ACLs for this ksqlDB cluster to use, for example, `pksqlc-00000`.
         * 
         * @return builder
         * 
         */
        public Builder topicPrefix(@Nullable Output<String> topicPrefix) {
            $.topicPrefix = topicPrefix;
            return this;
        }

        /**
         * @param topicPrefix (Required String) Topic name prefix used by this ksqlDB cluster. Used to assign ACLs for this ksqlDB cluster to use, for example, `pksqlc-00000`.
         * 
         * @return builder
         * 
         */
        public Builder topicPrefix(String topicPrefix) {
            return topicPrefix(Output.of(topicPrefix));
        }

        /**
         * @param useDetailedProcessingLog Controls whether the row data should be included in the processing log topic. Set it to `false` if you don&#39;t want to emit sensitive information to the processing log. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder useDetailedProcessingLog(@Nullable Output<Boolean> useDetailedProcessingLog) {
            $.useDetailedProcessingLog = useDetailedProcessingLog;
            return this;
        }

        /**
         * @param useDetailedProcessingLog Controls whether the row data should be included in the processing log topic. Set it to `false` if you don&#39;t want to emit sensitive information to the processing log. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder useDetailedProcessingLog(Boolean useDetailedProcessingLog) {
            return useDetailedProcessingLog(Output.of(useDetailedProcessingLog));
        }

        public KsqlClusterState build() {
            return $;
        }
    }

}

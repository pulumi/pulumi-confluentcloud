// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.outputs;

import com.pulumi.confluentcloud.outputs.GetSchemaCredentials;
import com.pulumi.confluentcloud.outputs.GetSchemaSchemaReference;
import com.pulumi.confluentcloud.outputs.GetSchemaSchemaRegistryCluster;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSchemaResult {
    private @Nullable GetSchemaCredentials credentials;
    /**
     * @return (Required String) The format of the schema. Accepted values are: `AVRO`, `PROTOBUF`, and `JSON`.
     * 
     */
    private String format;
    private Boolean hardDelete;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private Boolean recreateOnUpdate;
    private @Nullable String restEndpoint;
    /**
     * @return (Required String) The schema string, for example, `file(&#34;./schema_version_1.avsc&#34;)`.
     * 
     */
    private String schema;
    private Integer schemaIdentifier;
    /**
     * @return (Optional List) The list of referenced schemas (see [Schema References](https://docs.confluent.io/platform/current/schema-registry/serdes-develop/index.html#schema-references) for more details):
     * 
     */
    private List<GetSchemaSchemaReference> schemaReferences;
    private @Nullable GetSchemaSchemaRegistryCluster schemaRegistryCluster;
    /**
     * @return (Required String) The name for the reference. (For Avro Schema, the reference name is the fully qualified schema name, for JSON Schema it is a URL, and for Protobuf Schema, it is the name of another Protobuf file.)
     * 
     */
    private String subjectName;
    /**
     * @return (Required Integer) The version of the Schema, for example, `4`.
     * 
     */
    private Integer version;

    private GetSchemaResult() {}
    public Optional<GetSchemaCredentials> credentials() {
        return Optional.ofNullable(this.credentials);
    }
    /**
     * @return (Required String) The format of the schema. Accepted values are: `AVRO`, `PROTOBUF`, and `JSON`.
     * 
     */
    public String format() {
        return this.format;
    }
    public Boolean hardDelete() {
        return this.hardDelete;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Boolean recreateOnUpdate() {
        return this.recreateOnUpdate;
    }
    public Optional<String> restEndpoint() {
        return Optional.ofNullable(this.restEndpoint);
    }
    /**
     * @return (Required String) The schema string, for example, `file(&#34;./schema_version_1.avsc&#34;)`.
     * 
     */
    public String schema() {
        return this.schema;
    }
    public Integer schemaIdentifier() {
        return this.schemaIdentifier;
    }
    /**
     * @return (Optional List) The list of referenced schemas (see [Schema References](https://docs.confluent.io/platform/current/schema-registry/serdes-develop/index.html#schema-references) for more details):
     * 
     */
    public List<GetSchemaSchemaReference> schemaReferences() {
        return this.schemaReferences;
    }
    public Optional<GetSchemaSchemaRegistryCluster> schemaRegistryCluster() {
        return Optional.ofNullable(this.schemaRegistryCluster);
    }
    /**
     * @return (Required String) The name for the reference. (For Avro Schema, the reference name is the fully qualified schema name, for JSON Schema it is a URL, and for Protobuf Schema, it is the name of another Protobuf file.)
     * 
     */
    public String subjectName() {
        return this.subjectName;
    }
    /**
     * @return (Required Integer) The version of the Schema, for example, `4`.
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSchemaResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable GetSchemaCredentials credentials;
        private String format;
        private Boolean hardDelete;
        private String id;
        private Boolean recreateOnUpdate;
        private @Nullable String restEndpoint;
        private String schema;
        private Integer schemaIdentifier;
        private List<GetSchemaSchemaReference> schemaReferences;
        private @Nullable GetSchemaSchemaRegistryCluster schemaRegistryCluster;
        private String subjectName;
        private Integer version;
        public Builder() {}
        public Builder(GetSchemaResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.credentials = defaults.credentials;
    	      this.format = defaults.format;
    	      this.hardDelete = defaults.hardDelete;
    	      this.id = defaults.id;
    	      this.recreateOnUpdate = defaults.recreateOnUpdate;
    	      this.restEndpoint = defaults.restEndpoint;
    	      this.schema = defaults.schema;
    	      this.schemaIdentifier = defaults.schemaIdentifier;
    	      this.schemaReferences = defaults.schemaReferences;
    	      this.schemaRegistryCluster = defaults.schemaRegistryCluster;
    	      this.subjectName = defaults.subjectName;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder credentials(@Nullable GetSchemaCredentials credentials) {

            this.credentials = credentials;
            return this;
        }
        @CustomType.Setter
        public Builder format(String format) {
            if (format == null) {
              throw new MissingRequiredPropertyException("GetSchemaResult", "format");
            }
            this.format = format;
            return this;
        }
        @CustomType.Setter
        public Builder hardDelete(Boolean hardDelete) {
            if (hardDelete == null) {
              throw new MissingRequiredPropertyException("GetSchemaResult", "hardDelete");
            }
            this.hardDelete = hardDelete;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSchemaResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder recreateOnUpdate(Boolean recreateOnUpdate) {
            if (recreateOnUpdate == null) {
              throw new MissingRequiredPropertyException("GetSchemaResult", "recreateOnUpdate");
            }
            this.recreateOnUpdate = recreateOnUpdate;
            return this;
        }
        @CustomType.Setter
        public Builder restEndpoint(@Nullable String restEndpoint) {

            this.restEndpoint = restEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder schema(String schema) {
            if (schema == null) {
              throw new MissingRequiredPropertyException("GetSchemaResult", "schema");
            }
            this.schema = schema;
            return this;
        }
        @CustomType.Setter
        public Builder schemaIdentifier(Integer schemaIdentifier) {
            if (schemaIdentifier == null) {
              throw new MissingRequiredPropertyException("GetSchemaResult", "schemaIdentifier");
            }
            this.schemaIdentifier = schemaIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder schemaReferences(List<GetSchemaSchemaReference> schemaReferences) {
            if (schemaReferences == null) {
              throw new MissingRequiredPropertyException("GetSchemaResult", "schemaReferences");
            }
            this.schemaReferences = schemaReferences;
            return this;
        }
        public Builder schemaReferences(GetSchemaSchemaReference... schemaReferences) {
            return schemaReferences(List.of(schemaReferences));
        }
        @CustomType.Setter
        public Builder schemaRegistryCluster(@Nullable GetSchemaSchemaRegistryCluster schemaRegistryCluster) {

            this.schemaRegistryCluster = schemaRegistryCluster;
            return this;
        }
        @CustomType.Setter
        public Builder subjectName(String subjectName) {
            if (subjectName == null) {
              throw new MissingRequiredPropertyException("GetSchemaResult", "subjectName");
            }
            this.subjectName = subjectName;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetSchemaResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetSchemaResult build() {
            final var _resultValue = new GetSchemaResult();
            _resultValue.credentials = credentials;
            _resultValue.format = format;
            _resultValue.hardDelete = hardDelete;
            _resultValue.id = id;
            _resultValue.recreateOnUpdate = recreateOnUpdate;
            _resultValue.restEndpoint = restEndpoint;
            _resultValue.schema = schema;
            _resultValue.schemaIdentifier = schemaIdentifier;
            _resultValue.schemaReferences = schemaReferences;
            _resultValue.schemaRegistryCluster = schemaRegistryCluster;
            _resultValue.subjectName = subjectName;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}

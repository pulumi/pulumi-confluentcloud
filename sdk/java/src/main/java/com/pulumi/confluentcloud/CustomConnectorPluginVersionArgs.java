// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud;

import com.pulumi.confluentcloud.inputs.CustomConnectorPluginVersionConnectorClassArgs;
import com.pulumi.confluentcloud.inputs.CustomConnectorPluginVersionEnvironmentArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CustomConnectorPluginVersionArgs extends com.pulumi.resources.ResourceArgs {

    public static final CustomConnectorPluginVersionArgs Empty = new CustomConnectorPluginVersionArgs();

    /**
     * Cloud provider where the Custom Connector Plugin Version archive is uploaded. Accepted values are: `AWS`, `AZURE`, `GCP`.
     * 
     */
    @Import(name="cloud", required=true)
    private Output<String> cloud;

    /**
     * @return Cloud provider where the Custom Connector Plugin Version archive is uploaded. Accepted values are: `AWS`, `AZURE`, `GCP`.
     * 
     */
    public Output<String> cloud() {
        return this.cloud;
    }

    /**
     * The Java class name or alias for the connector. You can get the connector class from the connector documentation provided by the developer.
     * 
     */
    @Import(name="connectorClasses", required=true)
    private Output<List<CustomConnectorPluginVersionConnectorClassArgs>> connectorClasses;

    /**
     * @return The Java class name or alias for the connector. You can get the connector class from the connector documentation provided by the developer.
     * 
     */
    public Output<List<CustomConnectorPluginVersionConnectorClassArgs>> connectorClasses() {
        return this.connectorClasses;
    }

    /**
     * The documentation link of the Custom Connector Plugin Version.
     * 
     */
    @Import(name="documentationLink")
    private @Nullable Output<String> documentationLink;

    /**
     * @return The documentation link of the Custom Connector Plugin Version.
     * 
     */
    public Optional<Output<String>> documentationLink() {
        return Optional.ofNullable(this.documentationLink);
    }

    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     * 
     */
    @Import(name="environment", required=true)
    private Output<CustomConnectorPluginVersionEnvironmentArgs> environment;

    /**
     * @return Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     * 
     */
    public Output<CustomConnectorPluginVersionEnvironmentArgs> environment() {
        return this.environment;
    }

    /**
     * The path to the Custom Connector Plugin Version archive to be uploaded. Accepted archive formats are: `.jar`, `.zip`.
     * 
     */
    @Import(name="filename", required=true)
    private Output<String> filename;

    /**
     * @return The path to the Custom Connector Plugin Version archive to be uploaded. Accepted archive formats are: `.jar`, `.zip`.
     * 
     */
    public Output<String> filename() {
        return this.filename;
    }

    /**
     * The ID of the plugin created using `confluentcloud.Plugin` resource, or through other ways.
     * 
     */
    @Import(name="pluginId", required=true)
    private Output<String> pluginId;

    /**
     * @return The ID of the plugin created using `confluentcloud.Plugin` resource, or through other ways.
     * 
     */
    public Output<String> pluginId() {
        return this.pluginId;
    }

    /**
     * The list of sensitive properties. A sensitive property is a connector configuration property that must be hidden after a user enters the property value when setting up the connector, for example, passwords, keys, and tokens. Refer to the developer documentation and add all required and optional sensitive properties that a user could potentially configure for the connector. Marking a property as sensitive ensures that these fields are handled appropriately within the Confluent infrastructure. This includes masking fields, for example in exception logging, and encrypting field values in the underlying data store. You must identify all sensitive properties. Failure to identify sensitive properties can result in the sensitive property value being stored in plain text rather than in encrypted format. Only add connector-specific sensitive properties. Kafka keys, passwords, and service account information should not be entered here.
     * 
     */
    @Import(name="sensitiveConfigProperties")
    private @Nullable Output<List<String>> sensitiveConfigProperties;

    /**
     * @return The list of sensitive properties. A sensitive property is a connector configuration property that must be hidden after a user enters the property value when setting up the connector, for example, passwords, keys, and tokens. Refer to the developer documentation and add all required and optional sensitive properties that a user could potentially configure for the connector. Marking a property as sensitive ensures that these fields are handled appropriately within the Confluent infrastructure. This includes masking fields, for example in exception logging, and encrypting field values in the underlying data store. You must identify all sensitive properties. Failure to identify sensitive properties can result in the sensitive property value being stored in plain text rather than in encrypted format. Only add connector-specific sensitive properties. Kafka keys, passwords, and service account information should not be entered here.
     * 
     */
    public Optional<Output<List<String>>> sensitiveConfigProperties() {
        return Optional.ofNullable(this.sensitiveConfigProperties);
    }

    /**
     * The version number of the plugin version we want to create. This must start with the character `v` and follow semantic versioning.
     * 
     */
    @Import(name="version", required=true)
    private Output<String> version;

    /**
     * @return The version number of the plugin version we want to create. This must start with the character `v` and follow semantic versioning.
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    private CustomConnectorPluginVersionArgs() {}

    private CustomConnectorPluginVersionArgs(CustomConnectorPluginVersionArgs $) {
        this.cloud = $.cloud;
        this.connectorClasses = $.connectorClasses;
        this.documentationLink = $.documentationLink;
        this.environment = $.environment;
        this.filename = $.filename;
        this.pluginId = $.pluginId;
        this.sensitiveConfigProperties = $.sensitiveConfigProperties;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomConnectorPluginVersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomConnectorPluginVersionArgs $;

        public Builder() {
            $ = new CustomConnectorPluginVersionArgs();
        }

        public Builder(CustomConnectorPluginVersionArgs defaults) {
            $ = new CustomConnectorPluginVersionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cloud Cloud provider where the Custom Connector Plugin Version archive is uploaded. Accepted values are: `AWS`, `AZURE`, `GCP`.
         * 
         * @return builder
         * 
         */
        public Builder cloud(Output<String> cloud) {
            $.cloud = cloud;
            return this;
        }

        /**
         * @param cloud Cloud provider where the Custom Connector Plugin Version archive is uploaded. Accepted values are: `AWS`, `AZURE`, `GCP`.
         * 
         * @return builder
         * 
         */
        public Builder cloud(String cloud) {
            return cloud(Output.of(cloud));
        }

        /**
         * @param connectorClasses The Java class name or alias for the connector. You can get the connector class from the connector documentation provided by the developer.
         * 
         * @return builder
         * 
         */
        public Builder connectorClasses(Output<List<CustomConnectorPluginVersionConnectorClassArgs>> connectorClasses) {
            $.connectorClasses = connectorClasses;
            return this;
        }

        /**
         * @param connectorClasses The Java class name or alias for the connector. You can get the connector class from the connector documentation provided by the developer.
         * 
         * @return builder
         * 
         */
        public Builder connectorClasses(List<CustomConnectorPluginVersionConnectorClassArgs> connectorClasses) {
            return connectorClasses(Output.of(connectorClasses));
        }

        /**
         * @param connectorClasses The Java class name or alias for the connector. You can get the connector class from the connector documentation provided by the developer.
         * 
         * @return builder
         * 
         */
        public Builder connectorClasses(CustomConnectorPluginVersionConnectorClassArgs... connectorClasses) {
            return connectorClasses(List.of(connectorClasses));
        }

        /**
         * @param documentationLink The documentation link of the Custom Connector Plugin Version.
         * 
         * @return builder
         * 
         */
        public Builder documentationLink(@Nullable Output<String> documentationLink) {
            $.documentationLink = documentationLink;
            return this;
        }

        /**
         * @param documentationLink The documentation link of the Custom Connector Plugin Version.
         * 
         * @return builder
         * 
         */
        public Builder documentationLink(String documentationLink) {
            return documentationLink(Output.of(documentationLink));
        }

        /**
         * @param environment Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
         * 
         * @return builder
         * 
         */
        public Builder environment(Output<CustomConnectorPluginVersionEnvironmentArgs> environment) {
            $.environment = environment;
            return this;
        }

        /**
         * @param environment Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
         * 
         * @return builder
         * 
         */
        public Builder environment(CustomConnectorPluginVersionEnvironmentArgs environment) {
            return environment(Output.of(environment));
        }

        /**
         * @param filename The path to the Custom Connector Plugin Version archive to be uploaded. Accepted archive formats are: `.jar`, `.zip`.
         * 
         * @return builder
         * 
         */
        public Builder filename(Output<String> filename) {
            $.filename = filename;
            return this;
        }

        /**
         * @param filename The path to the Custom Connector Plugin Version archive to be uploaded. Accepted archive formats are: `.jar`, `.zip`.
         * 
         * @return builder
         * 
         */
        public Builder filename(String filename) {
            return filename(Output.of(filename));
        }

        /**
         * @param pluginId The ID of the plugin created using `confluentcloud.Plugin` resource, or through other ways.
         * 
         * @return builder
         * 
         */
        public Builder pluginId(Output<String> pluginId) {
            $.pluginId = pluginId;
            return this;
        }

        /**
         * @param pluginId The ID of the plugin created using `confluentcloud.Plugin` resource, or through other ways.
         * 
         * @return builder
         * 
         */
        public Builder pluginId(String pluginId) {
            return pluginId(Output.of(pluginId));
        }

        /**
         * @param sensitiveConfigProperties The list of sensitive properties. A sensitive property is a connector configuration property that must be hidden after a user enters the property value when setting up the connector, for example, passwords, keys, and tokens. Refer to the developer documentation and add all required and optional sensitive properties that a user could potentially configure for the connector. Marking a property as sensitive ensures that these fields are handled appropriately within the Confluent infrastructure. This includes masking fields, for example in exception logging, and encrypting field values in the underlying data store. You must identify all sensitive properties. Failure to identify sensitive properties can result in the sensitive property value being stored in plain text rather than in encrypted format. Only add connector-specific sensitive properties. Kafka keys, passwords, and service account information should not be entered here.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveConfigProperties(@Nullable Output<List<String>> sensitiveConfigProperties) {
            $.sensitiveConfigProperties = sensitiveConfigProperties;
            return this;
        }

        /**
         * @param sensitiveConfigProperties The list of sensitive properties. A sensitive property is a connector configuration property that must be hidden after a user enters the property value when setting up the connector, for example, passwords, keys, and tokens. Refer to the developer documentation and add all required and optional sensitive properties that a user could potentially configure for the connector. Marking a property as sensitive ensures that these fields are handled appropriately within the Confluent infrastructure. This includes masking fields, for example in exception logging, and encrypting field values in the underlying data store. You must identify all sensitive properties. Failure to identify sensitive properties can result in the sensitive property value being stored in plain text rather than in encrypted format. Only add connector-specific sensitive properties. Kafka keys, passwords, and service account information should not be entered here.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveConfigProperties(List<String> sensitiveConfigProperties) {
            return sensitiveConfigProperties(Output.of(sensitiveConfigProperties));
        }

        /**
         * @param sensitiveConfigProperties The list of sensitive properties. A sensitive property is a connector configuration property that must be hidden after a user enters the property value when setting up the connector, for example, passwords, keys, and tokens. Refer to the developer documentation and add all required and optional sensitive properties that a user could potentially configure for the connector. Marking a property as sensitive ensures that these fields are handled appropriately within the Confluent infrastructure. This includes masking fields, for example in exception logging, and encrypting field values in the underlying data store. You must identify all sensitive properties. Failure to identify sensitive properties can result in the sensitive property value being stored in plain text rather than in encrypted format. Only add connector-specific sensitive properties. Kafka keys, passwords, and service account information should not be entered here.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveConfigProperties(String... sensitiveConfigProperties) {
            return sensitiveConfigProperties(List.of(sensitiveConfigProperties));
        }

        /**
         * @param version The version number of the plugin version we want to create. This must start with the character `v` and follow semantic versioning.
         * 
         * @return builder
         * 
         */
        public Builder version(Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The version number of the plugin version we want to create. This must start with the character `v` and follow semantic versioning.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public CustomConnectorPluginVersionArgs build() {
            if ($.cloud == null) {
                throw new MissingRequiredPropertyException("CustomConnectorPluginVersionArgs", "cloud");
            }
            if ($.connectorClasses == null) {
                throw new MissingRequiredPropertyException("CustomConnectorPluginVersionArgs", "connectorClasses");
            }
            if ($.environment == null) {
                throw new MissingRequiredPropertyException("CustomConnectorPluginVersionArgs", "environment");
            }
            if ($.filename == null) {
                throw new MissingRequiredPropertyException("CustomConnectorPluginVersionArgs", "filename");
            }
            if ($.pluginId == null) {
                throw new MissingRequiredPropertyException("CustomConnectorPluginVersionArgs", "pluginId");
            }
            if ($.version == null) {
                throw new MissingRequiredPropertyException("CustomConnectorPluginVersionArgs", "version");
            }
            return $;
        }
    }

}

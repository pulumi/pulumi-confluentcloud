// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.inputs;

import com.pulumi.confluentcloud.inputs.SchemaExporterCredentialsArgs;
import com.pulumi.confluentcloud.inputs.SchemaExporterDestinationSchemaRegistryClusterArgs;
import com.pulumi.confluentcloud.inputs.SchemaExporterSchemaRegistryClusterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SchemaExporterState extends com.pulumi.resources.ResourceArgs {

    public static final SchemaExporterState Empty = new SchemaExporterState();

    /**
     * Block for custom *nonsensitive* configuration properties:
     * 
     */
    @Import(name="config")
    private @Nullable Output<Map<String,String>> config;

    /**
     * @return Block for custom *nonsensitive* configuration properties:
     * 
     */
    public Optional<Output<Map<String,String>>> config() {
        return Optional.ofNullable(this.config);
    }

    /**
     * Customized context of the exporter if `context_type` is set to `CUSTOM`.
     * 
     */
    @Import(name="context")
    private @Nullable Output<String> context;

    /**
     * @return Customized context of the exporter if `context_type` is set to `CUSTOM`.
     * 
     */
    public Optional<Output<String>> context() {
        return Optional.ofNullable(this.context);
    }

    /**
     * Context type of the exporter. Accepted values are: `CUSTOM`, `NONE` or `AUTO`. Defaults to `AUTO`.
     * 
     */
    @Import(name="contextType")
    private @Nullable Output<String> contextType;

    /**
     * @return Context type of the exporter. Accepted values are: `CUSTOM`, `NONE` or `AUTO`. Defaults to `AUTO`.
     * 
     */
    public Optional<Output<String>> contextType() {
        return Optional.ofNullable(this.contextType);
    }

    /**
     * The Cluster API Credentials.
     * 
     */
    @Import(name="credentials")
    private @Nullable Output<SchemaExporterCredentialsArgs> credentials;

    /**
     * @return The Cluster API Credentials.
     * 
     */
    public Optional<Output<SchemaExporterCredentialsArgs>> credentials() {
        return Optional.ofNullable(this.credentials);
    }

    @Import(name="destinationSchemaRegistryCluster")
    private @Nullable Output<SchemaExporterDestinationSchemaRegistryClusterArgs> destinationSchemaRegistryCluster;

    public Optional<Output<SchemaExporterDestinationSchemaRegistryClusterArgs>> destinationSchemaRegistryCluster() {
        return Optional.ofNullable(this.destinationSchemaRegistryCluster);
    }

    /**
     * Name of the Schema Exporter.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the Schema Exporter.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The flag to control whether to reset the exporter when updating configs. Defaults to `false`.
     * 
     */
    @Import(name="resetOnUpdate")
    private @Nullable Output<Boolean> resetOnUpdate;

    /**
     * @return The flag to control whether to reset the exporter when updating configs. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> resetOnUpdate() {
        return Optional.ofNullable(this.resetOnUpdate);
    }

    /**
     * The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
     * 
     */
    @Import(name="restEndpoint")
    private @Nullable Output<String> restEndpoint;

    /**
     * @return The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
     * 
     */
    public Optional<Output<String>> restEndpoint() {
        return Optional.ofNullable(this.restEndpoint);
    }

    @Import(name="schemaRegistryCluster")
    private @Nullable Output<SchemaExporterSchemaRegistryClusterArgs> schemaRegistryCluster;

    public Optional<Output<SchemaExporterSchemaRegistryClusterArgs>> schemaRegistryCluster() {
        return Optional.ofNullable(this.schemaRegistryCluster);
    }

    /**
     * The status of the schema exporter. Accepted values are: `RUNNING` and `PAUSED`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the schema exporter. Accepted values are: `RUNNING` and `PAUSED`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Format string for the subject name in the destination cluster, which may contain `${subject}` as a placeholder for the originating subject name. For example, `dc_${subject}` for the subject orders will map to the destination subject name `dc_orders`.
     * 
     */
    @Import(name="subjectRenameFormat")
    private @Nullable Output<String> subjectRenameFormat;

    /**
     * @return Format string for the subject name in the destination cluster, which may contain `${subject}` as a placeholder for the originating subject name. For example, `dc_${subject}` for the subject orders will map to the destination subject name `dc_orders`.
     * 
     */
    public Optional<Output<String>> subjectRenameFormat() {
        return Optional.ofNullable(this.subjectRenameFormat);
    }

    /**
     * Name of each exporter subject.
     * 
     */
    @Import(name="subjects")
    private @Nullable Output<List<String>> subjects;

    /**
     * @return Name of each exporter subject.
     * 
     */
    public Optional<Output<List<String>>> subjects() {
        return Optional.ofNullable(this.subjects);
    }

    private SchemaExporterState() {}

    private SchemaExporterState(SchemaExporterState $) {
        this.config = $.config;
        this.context = $.context;
        this.contextType = $.contextType;
        this.credentials = $.credentials;
        this.destinationSchemaRegistryCluster = $.destinationSchemaRegistryCluster;
        this.name = $.name;
        this.resetOnUpdate = $.resetOnUpdate;
        this.restEndpoint = $.restEndpoint;
        this.schemaRegistryCluster = $.schemaRegistryCluster;
        this.status = $.status;
        this.subjectRenameFormat = $.subjectRenameFormat;
        this.subjects = $.subjects;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SchemaExporterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SchemaExporterState $;

        public Builder() {
            $ = new SchemaExporterState();
        }

        public Builder(SchemaExporterState defaults) {
            $ = new SchemaExporterState(Objects.requireNonNull(defaults));
        }

        /**
         * @param config Block for custom *nonsensitive* configuration properties:
         * 
         * @return builder
         * 
         */
        public Builder config(@Nullable Output<Map<String,String>> config) {
            $.config = config;
            return this;
        }

        /**
         * @param config Block for custom *nonsensitive* configuration properties:
         * 
         * @return builder
         * 
         */
        public Builder config(Map<String,String> config) {
            return config(Output.of(config));
        }

        /**
         * @param context Customized context of the exporter if `context_type` is set to `CUSTOM`.
         * 
         * @return builder
         * 
         */
        public Builder context(@Nullable Output<String> context) {
            $.context = context;
            return this;
        }

        /**
         * @param context Customized context of the exporter if `context_type` is set to `CUSTOM`.
         * 
         * @return builder
         * 
         */
        public Builder context(String context) {
            return context(Output.of(context));
        }

        /**
         * @param contextType Context type of the exporter. Accepted values are: `CUSTOM`, `NONE` or `AUTO`. Defaults to `AUTO`.
         * 
         * @return builder
         * 
         */
        public Builder contextType(@Nullable Output<String> contextType) {
            $.contextType = contextType;
            return this;
        }

        /**
         * @param contextType Context type of the exporter. Accepted values are: `CUSTOM`, `NONE` or `AUTO`. Defaults to `AUTO`.
         * 
         * @return builder
         * 
         */
        public Builder contextType(String contextType) {
            return contextType(Output.of(contextType));
        }

        /**
         * @param credentials The Cluster API Credentials.
         * 
         * @return builder
         * 
         */
        public Builder credentials(@Nullable Output<SchemaExporterCredentialsArgs> credentials) {
            $.credentials = credentials;
            return this;
        }

        /**
         * @param credentials The Cluster API Credentials.
         * 
         * @return builder
         * 
         */
        public Builder credentials(SchemaExporterCredentialsArgs credentials) {
            return credentials(Output.of(credentials));
        }

        public Builder destinationSchemaRegistryCluster(@Nullable Output<SchemaExporterDestinationSchemaRegistryClusterArgs> destinationSchemaRegistryCluster) {
            $.destinationSchemaRegistryCluster = destinationSchemaRegistryCluster;
            return this;
        }

        public Builder destinationSchemaRegistryCluster(SchemaExporterDestinationSchemaRegistryClusterArgs destinationSchemaRegistryCluster) {
            return destinationSchemaRegistryCluster(Output.of(destinationSchemaRegistryCluster));
        }

        /**
         * @param name Name of the Schema Exporter.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the Schema Exporter.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param resetOnUpdate The flag to control whether to reset the exporter when updating configs. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder resetOnUpdate(@Nullable Output<Boolean> resetOnUpdate) {
            $.resetOnUpdate = resetOnUpdate;
            return this;
        }

        /**
         * @param resetOnUpdate The flag to control whether to reset the exporter when updating configs. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder resetOnUpdate(Boolean resetOnUpdate) {
            return resetOnUpdate(Output.of(resetOnUpdate));
        }

        /**
         * @param restEndpoint The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
         * 
         * @return builder
         * 
         */
        public Builder restEndpoint(@Nullable Output<String> restEndpoint) {
            $.restEndpoint = restEndpoint;
            return this;
        }

        /**
         * @param restEndpoint The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
         * 
         * @return builder
         * 
         */
        public Builder restEndpoint(String restEndpoint) {
            return restEndpoint(Output.of(restEndpoint));
        }

        public Builder schemaRegistryCluster(@Nullable Output<SchemaExporterSchemaRegistryClusterArgs> schemaRegistryCluster) {
            $.schemaRegistryCluster = schemaRegistryCluster;
            return this;
        }

        public Builder schemaRegistryCluster(SchemaExporterSchemaRegistryClusterArgs schemaRegistryCluster) {
            return schemaRegistryCluster(Output.of(schemaRegistryCluster));
        }

        /**
         * @param status The status of the schema exporter. Accepted values are: `RUNNING` and `PAUSED`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the schema exporter. Accepted values are: `RUNNING` and `PAUSED`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param subjectRenameFormat Format string for the subject name in the destination cluster, which may contain `${subject}` as a placeholder for the originating subject name. For example, `dc_${subject}` for the subject orders will map to the destination subject name `dc_orders`.
         * 
         * @return builder
         * 
         */
        public Builder subjectRenameFormat(@Nullable Output<String> subjectRenameFormat) {
            $.subjectRenameFormat = subjectRenameFormat;
            return this;
        }

        /**
         * @param subjectRenameFormat Format string for the subject name in the destination cluster, which may contain `${subject}` as a placeholder for the originating subject name. For example, `dc_${subject}` for the subject orders will map to the destination subject name `dc_orders`.
         * 
         * @return builder
         * 
         */
        public Builder subjectRenameFormat(String subjectRenameFormat) {
            return subjectRenameFormat(Output.of(subjectRenameFormat));
        }

        /**
         * @param subjects Name of each exporter subject.
         * 
         * @return builder
         * 
         */
        public Builder subjects(@Nullable Output<List<String>> subjects) {
            $.subjects = subjects;
            return this;
        }

        /**
         * @param subjects Name of each exporter subject.
         * 
         * @return builder
         * 
         */
        public Builder subjects(List<String> subjects) {
            return subjects(Output.of(subjects));
        }

        /**
         * @param subjects Name of each exporter subject.
         * 
         * @return builder
         * 
         */
        public Builder subjects(String... subjects) {
            return subjects(List.of(subjects));
        }

        public SchemaExporterState build() {
            return $;
        }
    }

}

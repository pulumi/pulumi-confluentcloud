// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud;

import com.pulumi.confluentcloud.CertificatePoolArgs;
import com.pulumi.confluentcloud.Utilities;
import com.pulumi.confluentcloud.inputs.CertificatePoolState;
import com.pulumi.confluentcloud.outputs.CertificatePoolCertificateAuthority;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
 * 
 * `confluentcloud.CertificatePool` provides a Certificate Pool resource that enables creating, editing, and deleting Certificate Pools on Confluent Cloud.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.confluentcloud.CertificatePool;
 * import com.pulumi.confluentcloud.CertificatePoolArgs;
 * import com.pulumi.confluentcloud.inputs.CertificatePoolCertificateAuthorityArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var main = new CertificatePool("main", CertificatePoolArgs.builder()
 *             .certificateAuthority(CertificatePoolCertificateAuthorityArgs.builder()
 *                 .id(mainConfluentCertificateAuthority.id())
 *                 .build())
 *             .displayName("my-certificate-pool")
 *             .description("example description")
 *             .externalIdentifier("CN")
 *             .filter("CN == \"test\"")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * You can import a Certificate Pool by using Certificate Authority ID and Certificate Pool ID, in the format `&lt;Certificate Authority ID&gt;/&lt;Certificate Pool ID&gt;`. The following example shows how to import a Certificate Pool:
 * 
 * $ export CONFLUENT_CLOUD_API_KEY=&#34;&lt;cloud_api_key&gt;&#34;
 * 
 * $ export CONFLUENT_CLOUD_API_SECRET=&#34;&lt;cloud_api_secret&gt;&#34;
 * 
 * ```sh
 * $ pulumi import confluentcloud:index/certificatePool:CertificatePool main op-abc123/pool-abc123
 * ```
 * 
 * !&gt; **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
 * 
 */
@ResourceType(type="confluentcloud:index/certificatePool:CertificatePool")
public class CertificatePool extends com.pulumi.resources.CustomResource {
    @Export(name="certificateAuthority", refs={CertificatePoolCertificateAuthority.class}, tree="[0]")
    private Output<CertificatePoolCertificateAuthority> certificateAuthority;

    public Output<CertificatePoolCertificateAuthority> certificateAuthority() {
        return this.certificateAuthority;
    }
    /**
     * A description of the Certificate Pool.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return A description of the Certificate Pool.
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * The name of the Certificate Pool.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return The name of the Certificate Pool.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * The certificate field that will be used to represent the pool&#39;s external identity for audit logging.
     * 
     */
    @Export(name="externalIdentifier", refs={String.class}, tree="[0]")
    private Output<String> externalIdentifier;

    /**
     * @return The certificate field that will be used to represent the pool&#39;s external identity for audit logging.
     * 
     */
    public Output<String> externalIdentifier() {
        return this.externalIdentifier;
    }
    /**
     * A filter expression in [Supported Common Expression Language (CEL)](https://docs.confluent.io/cloud/current/access-management/authenticate/mtls/cel-filters.html) that specifies which identities can authenticate using your certificate pool.
     * 
     */
    @Export(name="filter", refs={String.class}, tree="[0]")
    private Output<String> filter;

    /**
     * @return A filter expression in [Supported Common Expression Language (CEL)](https://docs.confluent.io/cloud/current/access-management/authenticate/mtls/cel-filters.html) that specifies which identities can authenticate using your certificate pool.
     * 
     */
    public Output<String> filter() {
        return this.filter;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CertificatePool(java.lang.String name) {
        this(name, CertificatePoolArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CertificatePool(java.lang.String name, CertificatePoolArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CertificatePool(java.lang.String name, CertificatePoolArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("confluentcloud:index/certificatePool:CertificatePool", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private CertificatePool(java.lang.String name, Output<java.lang.String> id, @Nullable CertificatePoolState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("confluentcloud:index/certificatePool:CertificatePool", name, state, makeResourceOptions(options, id), false);
    }

    private static CertificatePoolArgs makeArgs(CertificatePoolArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? CertificatePoolArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CertificatePool get(java.lang.String name, Output<java.lang.String> id, @Nullable CertificatePoolState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new CertificatePool(name, id, state, options);
    }
}

// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AccessPointGcpEgressPrivateServiceConnectEndpoint {
    /**
     * @return (Required String) Connection ID of the Private Service Connect Endpoint that is connected to the endpoint target.
     * 
     */
    private @Nullable String privateServiceConnectEndpointConnectionId;
    /**
     * @return (Required String) IP address of the Private Service Connect Endpoint that is connected to the endpoint target.
     * 
     */
    private @Nullable String privateServiceConnectEndpointIpAddress;
    /**
     * @return (Required String) Name of the Private Service Connect Endpoint that is connected to the endpoint target.
     * 
     */
    private @Nullable String privateServiceConnectEndpointName;
    /**
     * @return URI of the service attachment for the published service that the Private Service Connect Endpoint connects to, or &#34;all-google-apis&#34; for global Google APIs.
     * 
     */
    private String privateServiceConnectEndpointTarget;

    private AccessPointGcpEgressPrivateServiceConnectEndpoint() {}
    /**
     * @return (Required String) Connection ID of the Private Service Connect Endpoint that is connected to the endpoint target.
     * 
     */
    public Optional<String> privateServiceConnectEndpointConnectionId() {
        return Optional.ofNullable(this.privateServiceConnectEndpointConnectionId);
    }
    /**
     * @return (Required String) IP address of the Private Service Connect Endpoint that is connected to the endpoint target.
     * 
     */
    public Optional<String> privateServiceConnectEndpointIpAddress() {
        return Optional.ofNullable(this.privateServiceConnectEndpointIpAddress);
    }
    /**
     * @return (Required String) Name of the Private Service Connect Endpoint that is connected to the endpoint target.
     * 
     */
    public Optional<String> privateServiceConnectEndpointName() {
        return Optional.ofNullable(this.privateServiceConnectEndpointName);
    }
    /**
     * @return URI of the service attachment for the published service that the Private Service Connect Endpoint connects to, or &#34;all-google-apis&#34; for global Google APIs.
     * 
     */
    public String privateServiceConnectEndpointTarget() {
        return this.privateServiceConnectEndpointTarget;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccessPointGcpEgressPrivateServiceConnectEndpoint defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String privateServiceConnectEndpointConnectionId;
        private @Nullable String privateServiceConnectEndpointIpAddress;
        private @Nullable String privateServiceConnectEndpointName;
        private String privateServiceConnectEndpointTarget;
        public Builder() {}
        public Builder(AccessPointGcpEgressPrivateServiceConnectEndpoint defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.privateServiceConnectEndpointConnectionId = defaults.privateServiceConnectEndpointConnectionId;
    	      this.privateServiceConnectEndpointIpAddress = defaults.privateServiceConnectEndpointIpAddress;
    	      this.privateServiceConnectEndpointName = defaults.privateServiceConnectEndpointName;
    	      this.privateServiceConnectEndpointTarget = defaults.privateServiceConnectEndpointTarget;
        }

        @CustomType.Setter
        public Builder privateServiceConnectEndpointConnectionId(@Nullable String privateServiceConnectEndpointConnectionId) {

            this.privateServiceConnectEndpointConnectionId = privateServiceConnectEndpointConnectionId;
            return this;
        }
        @CustomType.Setter
        public Builder privateServiceConnectEndpointIpAddress(@Nullable String privateServiceConnectEndpointIpAddress) {

            this.privateServiceConnectEndpointIpAddress = privateServiceConnectEndpointIpAddress;
            return this;
        }
        @CustomType.Setter
        public Builder privateServiceConnectEndpointName(@Nullable String privateServiceConnectEndpointName) {

            this.privateServiceConnectEndpointName = privateServiceConnectEndpointName;
            return this;
        }
        @CustomType.Setter
        public Builder privateServiceConnectEndpointTarget(String privateServiceConnectEndpointTarget) {
            if (privateServiceConnectEndpointTarget == null) {
              throw new MissingRequiredPropertyException("AccessPointGcpEgressPrivateServiceConnectEndpoint", "privateServiceConnectEndpointTarget");
            }
            this.privateServiceConnectEndpointTarget = privateServiceConnectEndpointTarget;
            return this;
        }
        public AccessPointGcpEgressPrivateServiceConnectEndpoint build() {
            final var _resultValue = new AccessPointGcpEgressPrivateServiceConnectEndpoint();
            _resultValue.privateServiceConnectEndpointConnectionId = privateServiceConnectEndpointConnectionId;
            _resultValue.privateServiceConnectEndpointIpAddress = privateServiceConnectEndpointIpAddress;
            _resultValue.privateServiceConnectEndpointName = privateServiceConnectEndpointName;
            _resultValue.privateServiceConnectEndpointTarget = privateServiceConnectEndpointTarget;
            return _resultValue;
        }
    }
}

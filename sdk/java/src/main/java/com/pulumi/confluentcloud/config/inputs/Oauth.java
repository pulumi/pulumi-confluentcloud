// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.config.inputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class Oauth {
    /**
     * @return OAuth existing access token already fetched from external IDP
     * 
     */
    private @Nullable String oauthExternalAccessToken;
    /**
     * @return OAuth client id from external token source
     * 
     */
    private @Nullable String oauthExternalClientId;
    /**
     * @return OAuth client secret from external token source
     * 
     */
    private @Nullable String oauthExternalClientSecret;
    /**
     * @return OAuth access token scope
     * 
     */
    private @Nullable String oauthExternalTokenScope;
    /**
     * @return OAuth token URL to fetch access token from external IDP
     * 
     */
    private @Nullable String oauthExternalTokenUrl;
    /**
     * @return OAuth identity pool id used for processing external token and exchange STS token
     * 
     */
    private String oauthIdentityPoolId;
    /**
     * @return OAuth STS access token expired in second from Confluent Cloud
     * 
     */
    private @Nullable String oauthStsTokenExpiredInSeconds;

    private Oauth() {}
    /**
     * @return OAuth existing access token already fetched from external IDP
     * 
     */
    public Optional<String> oauthExternalAccessToken() {
        return Optional.ofNullable(this.oauthExternalAccessToken);
    }
    /**
     * @return OAuth client id from external token source
     * 
     */
    public Optional<String> oauthExternalClientId() {
        return Optional.ofNullable(this.oauthExternalClientId);
    }
    /**
     * @return OAuth client secret from external token source
     * 
     */
    public Optional<String> oauthExternalClientSecret() {
        return Optional.ofNullable(this.oauthExternalClientSecret);
    }
    /**
     * @return OAuth access token scope
     * 
     */
    public Optional<String> oauthExternalTokenScope() {
        return Optional.ofNullable(this.oauthExternalTokenScope);
    }
    /**
     * @return OAuth token URL to fetch access token from external IDP
     * 
     */
    public Optional<String> oauthExternalTokenUrl() {
        return Optional.ofNullable(this.oauthExternalTokenUrl);
    }
    /**
     * @return OAuth identity pool id used for processing external token and exchange STS token
     * 
     */
    public String oauthIdentityPoolId() {
        return this.oauthIdentityPoolId;
    }
    /**
     * @return OAuth STS access token expired in second from Confluent Cloud
     * 
     */
    public Optional<String> oauthStsTokenExpiredInSeconds() {
        return Optional.ofNullable(this.oauthStsTokenExpiredInSeconds);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(Oauth defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String oauthExternalAccessToken;
        private @Nullable String oauthExternalClientId;
        private @Nullable String oauthExternalClientSecret;
        private @Nullable String oauthExternalTokenScope;
        private @Nullable String oauthExternalTokenUrl;
        private String oauthIdentityPoolId;
        private @Nullable String oauthStsTokenExpiredInSeconds;
        public Builder() {}
        public Builder(Oauth defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.oauthExternalAccessToken = defaults.oauthExternalAccessToken;
    	      this.oauthExternalClientId = defaults.oauthExternalClientId;
    	      this.oauthExternalClientSecret = defaults.oauthExternalClientSecret;
    	      this.oauthExternalTokenScope = defaults.oauthExternalTokenScope;
    	      this.oauthExternalTokenUrl = defaults.oauthExternalTokenUrl;
    	      this.oauthIdentityPoolId = defaults.oauthIdentityPoolId;
    	      this.oauthStsTokenExpiredInSeconds = defaults.oauthStsTokenExpiredInSeconds;
        }

        @CustomType.Setter
        public Builder oauthExternalAccessToken(@Nullable String oauthExternalAccessToken) {

            this.oauthExternalAccessToken = oauthExternalAccessToken;
            return this;
        }
        @CustomType.Setter
        public Builder oauthExternalClientId(@Nullable String oauthExternalClientId) {

            this.oauthExternalClientId = oauthExternalClientId;
            return this;
        }
        @CustomType.Setter
        public Builder oauthExternalClientSecret(@Nullable String oauthExternalClientSecret) {

            this.oauthExternalClientSecret = oauthExternalClientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder oauthExternalTokenScope(@Nullable String oauthExternalTokenScope) {

            this.oauthExternalTokenScope = oauthExternalTokenScope;
            return this;
        }
        @CustomType.Setter
        public Builder oauthExternalTokenUrl(@Nullable String oauthExternalTokenUrl) {

            this.oauthExternalTokenUrl = oauthExternalTokenUrl;
            return this;
        }
        @CustomType.Setter
        public Builder oauthIdentityPoolId(String oauthIdentityPoolId) {
            if (oauthIdentityPoolId == null) {
              throw new MissingRequiredPropertyException("Oauth", "oauthIdentityPoolId");
            }
            this.oauthIdentityPoolId = oauthIdentityPoolId;
            return this;
        }
        @CustomType.Setter
        public Builder oauthStsTokenExpiredInSeconds(@Nullable String oauthStsTokenExpiredInSeconds) {

            this.oauthStsTokenExpiredInSeconds = oauthStsTokenExpiredInSeconds;
            return this;
        }
        public Oauth build() {
            final var _resultValue = new Oauth();
            _resultValue.oauthExternalAccessToken = oauthExternalAccessToken;
            _resultValue.oauthExternalClientId = oauthExternalClientId;
            _resultValue.oauthExternalClientSecret = oauthExternalClientSecret;
            _resultValue.oauthExternalTokenScope = oauthExternalTokenScope;
            _resultValue.oauthExternalTokenUrl = oauthExternalTokenUrl;
            _resultValue.oauthIdentityPoolId = oauthIdentityPoolId;
            _resultValue.oauthStsTokenExpiredInSeconds = oauthStsTokenExpiredInSeconds;
            return _resultValue;
        }
    }
}

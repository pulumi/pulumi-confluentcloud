// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.inputs;

import com.pulumi.confluentcloud.inputs.FlinkComputePoolEnvironmentArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FlinkComputePoolState extends com.pulumi.resources.ResourceArgs {

    public static final FlinkComputePoolState Empty = new FlinkComputePoolState();

    /**
     * (Required String) The API Version of the schema version of the Flink Compute Pool, for example, `fcpm/v2`.
     * 
     */
    @Import(name="apiVersion")
    private @Nullable Output<String> apiVersion;

    /**
     * @return (Required String) The API Version of the schema version of the Flink Compute Pool, for example, `fcpm/v2`.
     * 
     */
    public Optional<Output<String>> apiVersion() {
        return Optional.ofNullable(this.apiVersion);
    }

    /**
     * The cloud service provider that runs the Flink Compute Pool.
     * 
     */
    @Import(name="cloud")
    private @Nullable Output<String> cloud;

    /**
     * @return The cloud service provider that runs the Flink Compute Pool.
     * 
     */
    public Optional<Output<String>> cloud() {
        return Optional.ofNullable(this.cloud);
    }

    /**
     * The name of the Flink Compute Pool.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The name of the Flink Compute Pool.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     * 
     */
    @Import(name="environment")
    private @Nullable Output<FlinkComputePoolEnvironmentArgs> environment;

    /**
     * @return Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     * 
     */
    public Optional<Output<FlinkComputePoolEnvironmentArgs>> environment() {
        return Optional.ofNullable(this.environment);
    }

    /**
     * (Required String) The kind of the Flink Compute Pool, for example, `ComputePool`.
     * 
     */
    @Import(name="kind")
    private @Nullable Output<String> kind;

    /**
     * @return (Required String) The kind of the Flink Compute Pool, for example, `ComputePool`.
     * 
     */
    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * Maximum number of Confluent Flink Units (CFUs) that the Flink compute pool should auto-scale to. The accepted values are: `5`, `10`, `20`, `30`, `40` and `50`.
     * 
     */
    @Import(name="maxCfu")
    private @Nullable Output<Integer> maxCfu;

    /**
     * @return Maximum number of Confluent Flink Units (CFUs) that the Flink compute pool should auto-scale to. The accepted values are: `5`, `10`, `20`, `30`, `40` and `50`.
     * 
     */
    public Optional<Output<Integer>> maxCfu() {
        return Optional.ofNullable(this.maxCfu);
    }

    /**
     * The cloud service provider region that hosts the Flink Compute Pool.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The cloud service provider region that hosts the Flink Compute Pool.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * (Required String) The Confluent Resource Name of the Flink Compute Pool.
     * 
     */
    @Import(name="resourceName")
    private @Nullable Output<String> resourceName;

    /**
     * @return (Required String) The Confluent Resource Name of the Flink Compute Pool.
     * 
     */
    public Optional<Output<String>> resourceName() {
        return Optional.ofNullable(this.resourceName);
    }

    private FlinkComputePoolState() {}

    private FlinkComputePoolState(FlinkComputePoolState $) {
        this.apiVersion = $.apiVersion;
        this.cloud = $.cloud;
        this.displayName = $.displayName;
        this.environment = $.environment;
        this.kind = $.kind;
        this.maxCfu = $.maxCfu;
        this.region = $.region;
        this.resourceName = $.resourceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlinkComputePoolState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlinkComputePoolState $;

        public Builder() {
            $ = new FlinkComputePoolState();
        }

        public Builder(FlinkComputePoolState defaults) {
            $ = new FlinkComputePoolState(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiVersion (Required String) The API Version of the schema version of the Flink Compute Pool, for example, `fcpm/v2`.
         * 
         * @return builder
         * 
         */
        public Builder apiVersion(@Nullable Output<String> apiVersion) {
            $.apiVersion = apiVersion;
            return this;
        }

        /**
         * @param apiVersion (Required String) The API Version of the schema version of the Flink Compute Pool, for example, `fcpm/v2`.
         * 
         * @return builder
         * 
         */
        public Builder apiVersion(String apiVersion) {
            return apiVersion(Output.of(apiVersion));
        }

        /**
         * @param cloud The cloud service provider that runs the Flink Compute Pool.
         * 
         * @return builder
         * 
         */
        public Builder cloud(@Nullable Output<String> cloud) {
            $.cloud = cloud;
            return this;
        }

        /**
         * @param cloud The cloud service provider that runs the Flink Compute Pool.
         * 
         * @return builder
         * 
         */
        public Builder cloud(String cloud) {
            return cloud(Output.of(cloud));
        }

        /**
         * @param displayName The name of the Flink Compute Pool.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The name of the Flink Compute Pool.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param environment Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
         * 
         * @return builder
         * 
         */
        public Builder environment(@Nullable Output<FlinkComputePoolEnvironmentArgs> environment) {
            $.environment = environment;
            return this;
        }

        /**
         * @param environment Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
         * 
         * @return builder
         * 
         */
        public Builder environment(FlinkComputePoolEnvironmentArgs environment) {
            return environment(Output.of(environment));
        }

        /**
         * @param kind (Required String) The kind of the Flink Compute Pool, for example, `ComputePool`.
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind (Required String) The kind of the Flink Compute Pool, for example, `ComputePool`.
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param maxCfu Maximum number of Confluent Flink Units (CFUs) that the Flink compute pool should auto-scale to. The accepted values are: `5`, `10`, `20`, `30`, `40` and `50`.
         * 
         * @return builder
         * 
         */
        public Builder maxCfu(@Nullable Output<Integer> maxCfu) {
            $.maxCfu = maxCfu;
            return this;
        }

        /**
         * @param maxCfu Maximum number of Confluent Flink Units (CFUs) that the Flink compute pool should auto-scale to. The accepted values are: `5`, `10`, `20`, `30`, `40` and `50`.
         * 
         * @return builder
         * 
         */
        public Builder maxCfu(Integer maxCfu) {
            return maxCfu(Output.of(maxCfu));
        }

        /**
         * @param region The cloud service provider region that hosts the Flink Compute Pool.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The cloud service provider region that hosts the Flink Compute Pool.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param resourceName (Required String) The Confluent Resource Name of the Flink Compute Pool.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(@Nullable Output<String> resourceName) {
            $.resourceName = resourceName;
            return this;
        }

        /**
         * @param resourceName (Required String) The Confluent Resource Name of the Flink Compute Pool.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(String resourceName) {
            return resourceName(Output.of(resourceName));
        }

        public FlinkComputePoolState build() {
            return $;
        }
    }

}

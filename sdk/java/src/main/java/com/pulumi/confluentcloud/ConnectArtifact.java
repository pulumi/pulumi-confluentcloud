// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud;

import com.pulumi.confluentcloud.ConnectArtifactArgs;
import com.pulumi.confluentcloud.Utilities;
import com.pulumi.confluentcloud.inputs.ConnectArtifactState;
import com.pulumi.confluentcloud.outputs.ConnectArtifactEnvironment;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.confluentcloud.ConnectArtifact;
 * import com.pulumi.confluentcloud.ConnectArtifactArgs;
 * import com.pulumi.confluentcloud.inputs.ConnectArtifactEnvironmentArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new ConnectArtifact("example", ConnectArtifactArgs.builder()
 *             .displayName("example-connect-artifact")
 *             .cloud("AWS")
 *             .environment(ConnectArtifactEnvironmentArgs.builder()
 *                 .id("env-123456")
 *                 .build())
 *             .contentFormat("JAR")
 *             .artifactFile("path/to/your/artifact.jar")
 *             .description("Example Connect Artifact")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * You can import a Connect Artifact by using Environment ID, Cloud, and Connect Artifact ID in the format `&lt;Environment ID&gt;/&lt;cloud&gt;/&lt;Connect Artifact ID&gt;`, for example:
 * 
 * $ export CONFLUENT_CLOUD_API_KEY=&#34;&lt;cloud_api_key&gt;&#34;
 * 
 * $ export CONFLUENT_CLOUD_API_SECRET=&#34;&lt;cloud_api_secret&gt;&#34;
 * 
 * ```sh
 * $ pulumi import confluentcloud:index/connectArtifact:ConnectArtifact example env-123456/AWS/ca-123456
 * ```
 * 
 * !&gt; **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
 * 
 */
@ResourceType(type="confluentcloud:index/connectArtifact:ConnectArtifact")
public class ConnectArtifact extends com.pulumi.resources.CustomResource {
    /**
     * The artifact file for Connect Artifact in `JAR` or `ZIP` format. This can be relative or absolute path
     * 
     */
    @Export(name="artifactFile", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> artifactFile;

    /**
     * @return The artifact file for Connect Artifact in `JAR` or `ZIP` format. This can be relative or absolute path
     * 
     */
    public Output<Optional<String>> artifactFile() {
        return Codegen.optional(this.artifactFile);
    }
    /**
     * Cloud provider where the Connect Artifact archive is uploaded.
     * 
     */
    @Export(name="cloud", refs={String.class}, tree="[0]")
    private Output<String> cloud;

    /**
     * @return Cloud provider where the Connect Artifact archive is uploaded.
     * 
     */
    public Output<String> cloud() {
        return this.cloud;
    }
    /**
     * Archive format of the Connect Artifact. Supported formats are `JAR` and `ZIP`.
     * 
     */
    @Export(name="contentFormat", refs={String.class}, tree="[0]")
    private Output<String> contentFormat;

    /**
     * @return Archive format of the Connect Artifact. Supported formats are `JAR` and `ZIP`.
     * 
     */
    public Output<String> contentFormat() {
        return this.contentFormat;
    }
    /**
     * Description of the Connect Artifact.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the Connect Artifact.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The unique name of the Connect Artifact per cloud, environment scope.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return The unique name of the Connect Artifact per cloud, environment scope.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     * 
     */
    @Export(name="environment", refs={ConnectArtifactEnvironment.class}, tree="[0]")
    private Output<ConnectArtifactEnvironment> environment;

    /**
     * @return Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     * 
     */
    public Output<ConnectArtifactEnvironment> environment() {
        return this.environment;
    }
    /**
     * Status of the Connect Artifact.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return Status of the Connect Artifact.
     * 
     */
    public Output<String> status() {
        return this.status;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ConnectArtifact(java.lang.String name) {
        this(name, ConnectArtifactArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ConnectArtifact(java.lang.String name, ConnectArtifactArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ConnectArtifact(java.lang.String name, ConnectArtifactArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("confluentcloud:index/connectArtifact:ConnectArtifact", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ConnectArtifact(java.lang.String name, Output<java.lang.String> id, @Nullable ConnectArtifactState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("confluentcloud:index/connectArtifact:ConnectArtifact", name, state, makeResourceOptions(options, id), false);
    }

    private static ConnectArtifactArgs makeArgs(ConnectArtifactArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ConnectArtifactArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ConnectArtifact get(java.lang.String name, Output<java.lang.String> id, @Nullable ConnectArtifactState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ConnectArtifact(name, id, state, options);
    }
}

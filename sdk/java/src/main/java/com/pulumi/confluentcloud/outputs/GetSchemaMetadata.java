// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.outputs;

import com.pulumi.confluentcloud.outputs.GetSchemaMetadataTag;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetSchemaMetadata {
    /**
     * @return (Optional Map) The custom properties to set:
     * 
     */
    private Map<String,String> properties;
    /**
     * @return (Optional List of Strings) A list of metadata properties to be encrypted.
     * 
     */
    private List<String> sensitives;
    /**
     * @return (Optional String List) The tags to which the rule applies, if any.
     * 
     */
    private List<GetSchemaMetadataTag> tags;

    private GetSchemaMetadata() {}
    /**
     * @return (Optional Map) The custom properties to set:
     * 
     */
    public Map<String,String> properties() {
        return this.properties;
    }
    /**
     * @return (Optional List of Strings) A list of metadata properties to be encrypted.
     * 
     */
    public List<String> sensitives() {
        return this.sensitives;
    }
    /**
     * @return (Optional String List) The tags to which the rule applies, if any.
     * 
     */
    public List<GetSchemaMetadataTag> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSchemaMetadata defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,String> properties;
        private List<String> sensitives;
        private List<GetSchemaMetadataTag> tags;
        public Builder() {}
        public Builder(GetSchemaMetadata defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.properties = defaults.properties;
    	      this.sensitives = defaults.sensitives;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder properties(Map<String,String> properties) {
            if (properties == null) {
              throw new MissingRequiredPropertyException("GetSchemaMetadata", "properties");
            }
            this.properties = properties;
            return this;
        }
        @CustomType.Setter
        public Builder sensitives(List<String> sensitives) {
            if (sensitives == null) {
              throw new MissingRequiredPropertyException("GetSchemaMetadata", "sensitives");
            }
            this.sensitives = sensitives;
            return this;
        }
        public Builder sensitives(String... sensitives) {
            return sensitives(List.of(sensitives));
        }
        @CustomType.Setter
        public Builder tags(List<GetSchemaMetadataTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetSchemaMetadata", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetSchemaMetadataTag... tags) {
            return tags(List.of(tags));
        }
        public GetSchemaMetadata build() {
            final var _resultValue = new GetSchemaMetadata();
            _resultValue.properties = properties;
            _resultValue.sensitives = sensitives;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}

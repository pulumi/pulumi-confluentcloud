// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.inputs;

import com.pulumi.confluentcloud.inputs.GetCatalogIntegrationCredentialsArgs;
import com.pulumi.confluentcloud.inputs.GetCatalogIntegrationEnvironmentArgs;
import com.pulumi.confluentcloud.inputs.GetCatalogIntegrationKafkaClusterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCatalogIntegrationArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetCatalogIntegrationArgs Empty = new GetCatalogIntegrationArgs();

    @Import(name="credentials")
    private @Nullable Output<GetCatalogIntegrationCredentialsArgs> credentials;

    public Optional<Output<GetCatalogIntegrationCredentialsArgs>> credentials() {
        return Optional.ofNullable(this.credentials);
    }

    @Import(name="environment", required=true)
    private Output<GetCatalogIntegrationEnvironmentArgs> environment;

    public Output<GetCatalogIntegrationEnvironmentArgs> environment() {
        return this.environment;
    }

    /**
     * The ID of the Catalog Integration, for example, `tci-abc123`.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The ID of the Catalog Integration, for example, `tci-abc123`.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    @Import(name="kafkaCluster", required=true)
    private Output<GetCatalogIntegrationKafkaClusterArgs> kafkaCluster;

    public Output<GetCatalogIntegrationKafkaClusterArgs> kafkaCluster() {
        return this.kafkaCluster;
    }

    private GetCatalogIntegrationArgs() {}

    private GetCatalogIntegrationArgs(GetCatalogIntegrationArgs $) {
        this.credentials = $.credentials;
        this.environment = $.environment;
        this.id = $.id;
        this.kafkaCluster = $.kafkaCluster;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCatalogIntegrationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCatalogIntegrationArgs $;

        public Builder() {
            $ = new GetCatalogIntegrationArgs();
        }

        public Builder(GetCatalogIntegrationArgs defaults) {
            $ = new GetCatalogIntegrationArgs(Objects.requireNonNull(defaults));
        }

        public Builder credentials(@Nullable Output<GetCatalogIntegrationCredentialsArgs> credentials) {
            $.credentials = credentials;
            return this;
        }

        public Builder credentials(GetCatalogIntegrationCredentialsArgs credentials) {
            return credentials(Output.of(credentials));
        }

        public Builder environment(Output<GetCatalogIntegrationEnvironmentArgs> environment) {
            $.environment = environment;
            return this;
        }

        public Builder environment(GetCatalogIntegrationEnvironmentArgs environment) {
            return environment(Output.of(environment));
        }

        /**
         * @param id The ID of the Catalog Integration, for example, `tci-abc123`.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ID of the Catalog Integration, for example, `tci-abc123`.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder kafkaCluster(Output<GetCatalogIntegrationKafkaClusterArgs> kafkaCluster) {
            $.kafkaCluster = kafkaCluster;
            return this;
        }

        public Builder kafkaCluster(GetCatalogIntegrationKafkaClusterArgs kafkaCluster) {
            return kafkaCluster(Output.of(kafkaCluster));
        }

        public GetCatalogIntegrationArgs build() {
            if ($.environment == null) {
                throw new MissingRequiredPropertyException("GetCatalogIntegrationArgs", "environment");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetCatalogIntegrationArgs", "id");
            }
            if ($.kafkaCluster == null) {
                throw new MissingRequiredPropertyException("GetCatalogIntegrationArgs", "kafkaCluster");
            }
            return $;
        }
    }

}

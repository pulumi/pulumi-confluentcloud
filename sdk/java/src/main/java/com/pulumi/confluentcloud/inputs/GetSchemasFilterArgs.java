// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSchemasFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetSchemasFilterArgs Empty = new GetSchemasFilterArgs();

    /**
     * The boolean flag to control whether to return soft deleted schemas. Defaults to `false`.
     * 
     */
    @Import(name="deleted")
    private @Nullable Output<Boolean> deleted;

    /**
     * @return The boolean flag to control whether to return soft deleted schemas. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> deleted() {
        return Optional.ofNullable(this.deleted);
    }

    /**
     * The boolean flag to control whether to return latest schema versions only for each matching subject. Defaults to `false`.
     * 
     */
    @Import(name="latestOnly")
    private @Nullable Output<Boolean> latestOnly;

    /**
     * @return The boolean flag to control whether to return latest schema versions only for each matching subject. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> latestOnly() {
        return Optional.ofNullable(this.latestOnly);
    }

    /**
     * The prefix of the subjects (in other words, the namespaces), representing the subjects under which the schemas are registered.
     * 
     */
    @Import(name="subjectPrefix")
    private @Nullable Output<String> subjectPrefix;

    /**
     * @return The prefix of the subjects (in other words, the namespaces), representing the subjects under which the schemas are registered.
     * 
     */
    public Optional<Output<String>> subjectPrefix() {
        return Optional.ofNullable(this.subjectPrefix);
    }

    private GetSchemasFilterArgs() {}

    private GetSchemasFilterArgs(GetSchemasFilterArgs $) {
        this.deleted = $.deleted;
        this.latestOnly = $.latestOnly;
        this.subjectPrefix = $.subjectPrefix;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSchemasFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSchemasFilterArgs $;

        public Builder() {
            $ = new GetSchemasFilterArgs();
        }

        public Builder(GetSchemasFilterArgs defaults) {
            $ = new GetSchemasFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deleted The boolean flag to control whether to return soft deleted schemas. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder deleted(@Nullable Output<Boolean> deleted) {
            $.deleted = deleted;
            return this;
        }

        /**
         * @param deleted The boolean flag to control whether to return soft deleted schemas. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder deleted(Boolean deleted) {
            return deleted(Output.of(deleted));
        }

        /**
         * @param latestOnly The boolean flag to control whether to return latest schema versions only for each matching subject. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder latestOnly(@Nullable Output<Boolean> latestOnly) {
            $.latestOnly = latestOnly;
            return this;
        }

        /**
         * @param latestOnly The boolean flag to control whether to return latest schema versions only for each matching subject. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder latestOnly(Boolean latestOnly) {
            return latestOnly(Output.of(latestOnly));
        }

        /**
         * @param subjectPrefix The prefix of the subjects (in other words, the namespaces), representing the subjects under which the schemas are registered.
         * 
         * @return builder
         * 
         */
        public Builder subjectPrefix(@Nullable Output<String> subjectPrefix) {
            $.subjectPrefix = subjectPrefix;
            return this;
        }

        /**
         * @param subjectPrefix The prefix of the subjects (in other words, the namespaces), representing the subjects under which the schemas are registered.
         * 
         * @return builder
         * 
         */
        public Builder subjectPrefix(String subjectPrefix) {
            return subjectPrefix(Output.of(subjectPrefix));
        }

        public GetSchemasFilterArgs build() {
            return $;
        }
    }

}

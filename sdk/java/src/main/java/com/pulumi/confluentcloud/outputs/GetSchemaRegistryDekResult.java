// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluentcloud.outputs;

import com.pulumi.confluentcloud.outputs.GetSchemaRegistryDekCredentials;
import com.pulumi.confluentcloud.outputs.GetSchemaRegistryDekSchemaRegistryCluster;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSchemaRegistryDekResult {
    private @Nullable String algorithm;
    private @Nullable GetSchemaRegistryDekCredentials credentials;
    private String encryptedKeyMaterial;
    private Boolean hardDelete;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String kekName;
    private String keyMaterial;
    private @Nullable String restEndpoint;
    private @Nullable GetSchemaRegistryDekSchemaRegistryCluster schemaRegistryCluster;
    private String subjectName;
    private @Nullable Integer version;

    private GetSchemaRegistryDekResult() {}
    public Optional<String> algorithm() {
        return Optional.ofNullable(this.algorithm);
    }
    public Optional<GetSchemaRegistryDekCredentials> credentials() {
        return Optional.ofNullable(this.credentials);
    }
    public String encryptedKeyMaterial() {
        return this.encryptedKeyMaterial;
    }
    public Boolean hardDelete() {
        return this.hardDelete;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String kekName() {
        return this.kekName;
    }
    public String keyMaterial() {
        return this.keyMaterial;
    }
    public Optional<String> restEndpoint() {
        return Optional.ofNullable(this.restEndpoint);
    }
    public Optional<GetSchemaRegistryDekSchemaRegistryCluster> schemaRegistryCluster() {
        return Optional.ofNullable(this.schemaRegistryCluster);
    }
    public String subjectName() {
        return this.subjectName;
    }
    public Optional<Integer> version() {
        return Optional.ofNullable(this.version);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSchemaRegistryDekResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String algorithm;
        private @Nullable GetSchemaRegistryDekCredentials credentials;
        private String encryptedKeyMaterial;
        private Boolean hardDelete;
        private String id;
        private String kekName;
        private String keyMaterial;
        private @Nullable String restEndpoint;
        private @Nullable GetSchemaRegistryDekSchemaRegistryCluster schemaRegistryCluster;
        private String subjectName;
        private @Nullable Integer version;
        public Builder() {}
        public Builder(GetSchemaRegistryDekResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.algorithm = defaults.algorithm;
    	      this.credentials = defaults.credentials;
    	      this.encryptedKeyMaterial = defaults.encryptedKeyMaterial;
    	      this.hardDelete = defaults.hardDelete;
    	      this.id = defaults.id;
    	      this.kekName = defaults.kekName;
    	      this.keyMaterial = defaults.keyMaterial;
    	      this.restEndpoint = defaults.restEndpoint;
    	      this.schemaRegistryCluster = defaults.schemaRegistryCluster;
    	      this.subjectName = defaults.subjectName;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder algorithm(@Nullable String algorithm) {

            this.algorithm = algorithm;
            return this;
        }
        @CustomType.Setter
        public Builder credentials(@Nullable GetSchemaRegistryDekCredentials credentials) {

            this.credentials = credentials;
            return this;
        }
        @CustomType.Setter
        public Builder encryptedKeyMaterial(String encryptedKeyMaterial) {
            if (encryptedKeyMaterial == null) {
              throw new MissingRequiredPropertyException("GetSchemaRegistryDekResult", "encryptedKeyMaterial");
            }
            this.encryptedKeyMaterial = encryptedKeyMaterial;
            return this;
        }
        @CustomType.Setter
        public Builder hardDelete(Boolean hardDelete) {
            if (hardDelete == null) {
              throw new MissingRequiredPropertyException("GetSchemaRegistryDekResult", "hardDelete");
            }
            this.hardDelete = hardDelete;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSchemaRegistryDekResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder kekName(String kekName) {
            if (kekName == null) {
              throw new MissingRequiredPropertyException("GetSchemaRegistryDekResult", "kekName");
            }
            this.kekName = kekName;
            return this;
        }
        @CustomType.Setter
        public Builder keyMaterial(String keyMaterial) {
            if (keyMaterial == null) {
              throw new MissingRequiredPropertyException("GetSchemaRegistryDekResult", "keyMaterial");
            }
            this.keyMaterial = keyMaterial;
            return this;
        }
        @CustomType.Setter
        public Builder restEndpoint(@Nullable String restEndpoint) {

            this.restEndpoint = restEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder schemaRegistryCluster(@Nullable GetSchemaRegistryDekSchemaRegistryCluster schemaRegistryCluster) {

            this.schemaRegistryCluster = schemaRegistryCluster;
            return this;
        }
        @CustomType.Setter
        public Builder subjectName(String subjectName) {
            if (subjectName == null) {
              throw new MissingRequiredPropertyException("GetSchemaRegistryDekResult", "subjectName");
            }
            this.subjectName = subjectName;
            return this;
        }
        @CustomType.Setter
        public Builder version(@Nullable Integer version) {

            this.version = version;
            return this;
        }
        public GetSchemaRegistryDekResult build() {
            final var _resultValue = new GetSchemaRegistryDekResult();
            _resultValue.algorithm = algorithm;
            _resultValue.credentials = credentials;
            _resultValue.encryptedKeyMaterial = encryptedKeyMaterial;
            _resultValue.hardDelete = hardDelete;
            _resultValue.id = id;
            _resultValue.kekName = kekName;
            _resultValue.keyMaterial = keyMaterial;
            _resultValue.restEndpoint = restEndpoint;
            _resultValue.schemaRegistryCluster = schemaRegistryCluster;
            _resultValue.subjectName = subjectName;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}

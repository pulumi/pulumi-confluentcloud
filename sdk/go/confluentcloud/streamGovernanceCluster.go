// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			development, err := confluentcloud.NewEnvironment(ctx, "development", nil)
//			if err != nil {
//				return err
//			}
//			example, err := confluentcloud.GetStreamGovernanceRegion(ctx, &GetStreamGovernanceRegionArgs{
//				Cloud:   "AWS",
//				Region:  "us-east-2",
//				Package: "ESSENTIALS",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = confluentcloud.NewStreamGovernanceCluster(ctx, "essentials", &confluentcloud.StreamGovernanceClusterArgs{
//				Package: pulumi.String(example.Package),
//				Environment: &StreamGovernanceClusterEnvironmentArgs{
//					Id: development.ID(),
//				},
//				Region: &StreamGovernanceClusterRegionArgs{
//					Id: pulumi.String(example.Id),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// You can import a Stream Governance cluster by using Environment ID and Stream Governance cluster ID, in the format `<Environment ID>/<Stream Governance cluster ID>`, for example$ export CONFLUENT_CLOUD_API_KEY="<cloud_api_key>" $ export CONFLUENT_CLOUD_API_SECRET="<cloud_api_secret>"
//
// ```sh
//
//	$ pulumi import confluentcloud:index/streamGovernanceCluster:StreamGovernanceCluster example env-abc123/lsrc-abc123
//
// ```
//
//	!> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
type StreamGovernanceCluster struct {
	pulumi.CustomResourceState

	// (Required String) An API Version of the schema version of the Stream Governance cluster, for example, `stream-governance/v2`.
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// (Required String) The name of the Stream Governance cluster, for example, `Stream Governance Package`.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment StreamGovernanceClusterEnvironmentOutput `pulumi:"environment"`
	// (Required String) The HTTP endpoint of the Stream Governance cluster, for example, `https://psrc-00000.us-west-2.aws.confluent.cloud`.
	HttpEndpoint pulumi.StringOutput `pulumi:"httpEndpoint"`
	// (Required String) A kind of the Stream Governance cluster, for example, `Cluster`.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.
	Package pulumi.StringOutput                 `pulumi:"package"`
	Region  StreamGovernanceClusterRegionOutput `pulumi:"region"`
	// (Required String) The Confluent Resource Name of the Stream Governance cluster, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/schema-registry=lsrc-abc123`.
	ResourceName pulumi.StringOutput `pulumi:"resourceName"`
}

// NewStreamGovernanceCluster registers a new resource with the given unique name, arguments, and options.
func NewStreamGovernanceCluster(ctx *pulumi.Context,
	name string, args *StreamGovernanceClusterArgs, opts ...pulumi.ResourceOption) (*StreamGovernanceCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.Package == nil {
		return nil, errors.New("invalid value for required argument 'Package'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	var resource StreamGovernanceCluster
	err := ctx.RegisterResource("confluentcloud:index/streamGovernanceCluster:StreamGovernanceCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStreamGovernanceCluster gets an existing StreamGovernanceCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStreamGovernanceCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamGovernanceClusterState, opts ...pulumi.ResourceOption) (*StreamGovernanceCluster, error) {
	var resource StreamGovernanceCluster
	err := ctx.ReadResource("confluentcloud:index/streamGovernanceCluster:StreamGovernanceCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StreamGovernanceCluster resources.
type streamGovernanceClusterState struct {
	// (Required String) An API Version of the schema version of the Stream Governance cluster, for example, `stream-governance/v2`.
	ApiVersion *string `pulumi:"apiVersion"`
	// (Required String) The name of the Stream Governance cluster, for example, `Stream Governance Package`.
	DisplayName *string `pulumi:"displayName"`
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment *StreamGovernanceClusterEnvironment `pulumi:"environment"`
	// (Required String) The HTTP endpoint of the Stream Governance cluster, for example, `https://psrc-00000.us-west-2.aws.confluent.cloud`.
	HttpEndpoint *string `pulumi:"httpEndpoint"`
	// (Required String) A kind of the Stream Governance cluster, for example, `Cluster`.
	Kind *string `pulumi:"kind"`
	// The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.
	Package *string                        `pulumi:"package"`
	Region  *StreamGovernanceClusterRegion `pulumi:"region"`
	// (Required String) The Confluent Resource Name of the Stream Governance cluster, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/schema-registry=lsrc-abc123`.
	ResourceName *string `pulumi:"resourceName"`
}

type StreamGovernanceClusterState struct {
	// (Required String) An API Version of the schema version of the Stream Governance cluster, for example, `stream-governance/v2`.
	ApiVersion pulumi.StringPtrInput
	// (Required String) The name of the Stream Governance cluster, for example, `Stream Governance Package`.
	DisplayName pulumi.StringPtrInput
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment StreamGovernanceClusterEnvironmentPtrInput
	// (Required String) The HTTP endpoint of the Stream Governance cluster, for example, `https://psrc-00000.us-west-2.aws.confluent.cloud`.
	HttpEndpoint pulumi.StringPtrInput
	// (Required String) A kind of the Stream Governance cluster, for example, `Cluster`.
	Kind pulumi.StringPtrInput
	// The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.
	Package pulumi.StringPtrInput
	Region  StreamGovernanceClusterRegionPtrInput
	// (Required String) The Confluent Resource Name of the Stream Governance cluster, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/schema-registry=lsrc-abc123`.
	ResourceName pulumi.StringPtrInput
}

func (StreamGovernanceClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*streamGovernanceClusterState)(nil)).Elem()
}

type streamGovernanceClusterArgs struct {
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment StreamGovernanceClusterEnvironment `pulumi:"environment"`
	// The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.
	Package string                        `pulumi:"package"`
	Region  StreamGovernanceClusterRegion `pulumi:"region"`
}

// The set of arguments for constructing a StreamGovernanceCluster resource.
type StreamGovernanceClusterArgs struct {
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment StreamGovernanceClusterEnvironmentInput
	// The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.
	Package pulumi.StringInput
	Region  StreamGovernanceClusterRegionInput
}

func (StreamGovernanceClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*streamGovernanceClusterArgs)(nil)).Elem()
}

type StreamGovernanceClusterInput interface {
	pulumi.Input

	ToStreamGovernanceClusterOutput() StreamGovernanceClusterOutput
	ToStreamGovernanceClusterOutputWithContext(ctx context.Context) StreamGovernanceClusterOutput
}

func (*StreamGovernanceCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamGovernanceCluster)(nil)).Elem()
}

func (i *StreamGovernanceCluster) ToStreamGovernanceClusterOutput() StreamGovernanceClusterOutput {
	return i.ToStreamGovernanceClusterOutputWithContext(context.Background())
}

func (i *StreamGovernanceCluster) ToStreamGovernanceClusterOutputWithContext(ctx context.Context) StreamGovernanceClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamGovernanceClusterOutput)
}

// StreamGovernanceClusterArrayInput is an input type that accepts StreamGovernanceClusterArray and StreamGovernanceClusterArrayOutput values.
// You can construct a concrete instance of `StreamGovernanceClusterArrayInput` via:
//
//	StreamGovernanceClusterArray{ StreamGovernanceClusterArgs{...} }
type StreamGovernanceClusterArrayInput interface {
	pulumi.Input

	ToStreamGovernanceClusterArrayOutput() StreamGovernanceClusterArrayOutput
	ToStreamGovernanceClusterArrayOutputWithContext(context.Context) StreamGovernanceClusterArrayOutput
}

type StreamGovernanceClusterArray []StreamGovernanceClusterInput

func (StreamGovernanceClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamGovernanceCluster)(nil)).Elem()
}

func (i StreamGovernanceClusterArray) ToStreamGovernanceClusterArrayOutput() StreamGovernanceClusterArrayOutput {
	return i.ToStreamGovernanceClusterArrayOutputWithContext(context.Background())
}

func (i StreamGovernanceClusterArray) ToStreamGovernanceClusterArrayOutputWithContext(ctx context.Context) StreamGovernanceClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamGovernanceClusterArrayOutput)
}

// StreamGovernanceClusterMapInput is an input type that accepts StreamGovernanceClusterMap and StreamGovernanceClusterMapOutput values.
// You can construct a concrete instance of `StreamGovernanceClusterMapInput` via:
//
//	StreamGovernanceClusterMap{ "key": StreamGovernanceClusterArgs{...} }
type StreamGovernanceClusterMapInput interface {
	pulumi.Input

	ToStreamGovernanceClusterMapOutput() StreamGovernanceClusterMapOutput
	ToStreamGovernanceClusterMapOutputWithContext(context.Context) StreamGovernanceClusterMapOutput
}

type StreamGovernanceClusterMap map[string]StreamGovernanceClusterInput

func (StreamGovernanceClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamGovernanceCluster)(nil)).Elem()
}

func (i StreamGovernanceClusterMap) ToStreamGovernanceClusterMapOutput() StreamGovernanceClusterMapOutput {
	return i.ToStreamGovernanceClusterMapOutputWithContext(context.Background())
}

func (i StreamGovernanceClusterMap) ToStreamGovernanceClusterMapOutputWithContext(ctx context.Context) StreamGovernanceClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamGovernanceClusterMapOutput)
}

type StreamGovernanceClusterOutput struct{ *pulumi.OutputState }

func (StreamGovernanceClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamGovernanceCluster)(nil)).Elem()
}

func (o StreamGovernanceClusterOutput) ToStreamGovernanceClusterOutput() StreamGovernanceClusterOutput {
	return o
}

func (o StreamGovernanceClusterOutput) ToStreamGovernanceClusterOutputWithContext(ctx context.Context) StreamGovernanceClusterOutput {
	return o
}

// (Required String) An API Version of the schema version of the Stream Governance cluster, for example, `stream-governance/v2`.
func (o StreamGovernanceClusterOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamGovernanceCluster) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// (Required String) The name of the Stream Governance cluster, for example, `Stream Governance Package`.
func (o StreamGovernanceClusterOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamGovernanceCluster) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
func (o StreamGovernanceClusterOutput) Environment() StreamGovernanceClusterEnvironmentOutput {
	return o.ApplyT(func(v *StreamGovernanceCluster) StreamGovernanceClusterEnvironmentOutput { return v.Environment }).(StreamGovernanceClusterEnvironmentOutput)
}

// (Required String) The HTTP endpoint of the Stream Governance cluster, for example, `https://psrc-00000.us-west-2.aws.confluent.cloud`.
func (o StreamGovernanceClusterOutput) HttpEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamGovernanceCluster) pulumi.StringOutput { return v.HttpEndpoint }).(pulumi.StringOutput)
}

// (Required String) A kind of the Stream Governance cluster, for example, `Cluster`.
func (o StreamGovernanceClusterOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamGovernanceCluster) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.
func (o StreamGovernanceClusterOutput) Package() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamGovernanceCluster) pulumi.StringOutput { return v.Package }).(pulumi.StringOutput)
}

func (o StreamGovernanceClusterOutput) Region() StreamGovernanceClusterRegionOutput {
	return o.ApplyT(func(v *StreamGovernanceCluster) StreamGovernanceClusterRegionOutput { return v.Region }).(StreamGovernanceClusterRegionOutput)
}

// (Required String) The Confluent Resource Name of the Stream Governance cluster, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/schema-registry=lsrc-abc123`.
func (o StreamGovernanceClusterOutput) ResourceName() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamGovernanceCluster) pulumi.StringOutput { return v.ResourceName }).(pulumi.StringOutput)
}

type StreamGovernanceClusterArrayOutput struct{ *pulumi.OutputState }

func (StreamGovernanceClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamGovernanceCluster)(nil)).Elem()
}

func (o StreamGovernanceClusterArrayOutput) ToStreamGovernanceClusterArrayOutput() StreamGovernanceClusterArrayOutput {
	return o
}

func (o StreamGovernanceClusterArrayOutput) ToStreamGovernanceClusterArrayOutputWithContext(ctx context.Context) StreamGovernanceClusterArrayOutput {
	return o
}

func (o StreamGovernanceClusterArrayOutput) Index(i pulumi.IntInput) StreamGovernanceClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StreamGovernanceCluster {
		return vs[0].([]*StreamGovernanceCluster)[vs[1].(int)]
	}).(StreamGovernanceClusterOutput)
}

type StreamGovernanceClusterMapOutput struct{ *pulumi.OutputState }

func (StreamGovernanceClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamGovernanceCluster)(nil)).Elem()
}

func (o StreamGovernanceClusterMapOutput) ToStreamGovernanceClusterMapOutput() StreamGovernanceClusterMapOutput {
	return o
}

func (o StreamGovernanceClusterMapOutput) ToStreamGovernanceClusterMapOutputWithContext(ctx context.Context) StreamGovernanceClusterMapOutput {
	return o
}

func (o StreamGovernanceClusterMapOutput) MapIndex(k pulumi.StringInput) StreamGovernanceClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StreamGovernanceCluster {
		return vs[0].(map[string]*StreamGovernanceCluster)[vs[1].(string)]
	}).(StreamGovernanceClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StreamGovernanceClusterInput)(nil)).Elem(), &StreamGovernanceCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamGovernanceClusterArrayInput)(nil)).Elem(), StreamGovernanceClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamGovernanceClusterMapInput)(nil)).Elem(), StreamGovernanceClusterMap{})
	pulumi.RegisterOutputType(StreamGovernanceClusterOutput{})
	pulumi.RegisterOutputType(StreamGovernanceClusterArrayOutput{})
	pulumi.RegisterOutputType(StreamGovernanceClusterMapOutput{})
}

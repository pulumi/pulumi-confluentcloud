// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
//
// `CertificatePool` describes a Certificate Pool data source.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := confluentcloud.LookupCertificatePool(ctx, &confluentcloud.LookupCertificatePoolArgs{
//				Id: "pool-def456",
//				CertificateAuthority: confluentcloud.GetCertificatePoolCertificateAuthority{
//					Id: "op-abc123",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("certificatePool", main)
//			return nil
//		})
//	}
//
// ```
func LookupCertificatePool(ctx *pulumi.Context, args *LookupCertificatePoolArgs, opts ...pulumi.InvokeOption) (*LookupCertificatePoolResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCertificatePoolResult
	err := ctx.Invoke("confluentcloud:index/getCertificatePool:getCertificatePool", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCertificatePool.
type LookupCertificatePoolArgs struct {
	CertificateAuthority GetCertificatePoolCertificateAuthority `pulumi:"certificateAuthority"`
	// The ID of the Certificate Pool, for example, `pool-abc123`.
	Id string `pulumi:"id"`
}

// A collection of values returned by getCertificatePool.
type LookupCertificatePoolResult struct {
	CertificateAuthority GetCertificatePoolCertificateAuthority `pulumi:"certificateAuthority"`
	// (Required String) A description of the Certificate Pool.
	Description string `pulumi:"description"`
	// (Required String) A human-readable name for the Certificate Pool.
	DisplayName string `pulumi:"displayName"`
	// (Required String) The certificate field that will be used to represent the pool's external identity for audit logging, for example, `UID`.
	ExternalIdentifier string `pulumi:"externalIdentifier"`
	// (Required String) A filter expression in [Supported Common Expression Language (CEL)](https://docs.confluent.io/cloud/current/access-management/authenticate/mtls/cel-filters.html) that specifies which identities can authenticate using your certificate pool.
	Filter string `pulumi:"filter"`
	Id     string `pulumi:"id"`
}

func LookupCertificatePoolOutput(ctx *pulumi.Context, args LookupCertificatePoolOutputArgs, opts ...pulumi.InvokeOption) LookupCertificatePoolResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCertificatePoolResultOutput, error) {
			args := v.(LookupCertificatePoolArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupCertificatePoolResult
			secret, err := ctx.InvokePackageRaw("confluentcloud:index/getCertificatePool:getCertificatePool", args, &rv, "", opts...)
			if err != nil {
				return LookupCertificatePoolResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupCertificatePoolResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupCertificatePoolResultOutput), nil
			}
			return output, nil
		}).(LookupCertificatePoolResultOutput)
}

// A collection of arguments for invoking getCertificatePool.
type LookupCertificatePoolOutputArgs struct {
	CertificateAuthority GetCertificatePoolCertificateAuthorityInput `pulumi:"certificateAuthority"`
	// The ID of the Certificate Pool, for example, `pool-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupCertificatePoolOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificatePoolArgs)(nil)).Elem()
}

// A collection of values returned by getCertificatePool.
type LookupCertificatePoolResultOutput struct{ *pulumi.OutputState }

func (LookupCertificatePoolResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificatePoolResult)(nil)).Elem()
}

func (o LookupCertificatePoolResultOutput) ToLookupCertificatePoolResultOutput() LookupCertificatePoolResultOutput {
	return o
}

func (o LookupCertificatePoolResultOutput) ToLookupCertificatePoolResultOutputWithContext(ctx context.Context) LookupCertificatePoolResultOutput {
	return o
}

func (o LookupCertificatePoolResultOutput) CertificateAuthority() GetCertificatePoolCertificateAuthorityOutput {
	return o.ApplyT(func(v LookupCertificatePoolResult) GetCertificatePoolCertificateAuthority {
		return v.CertificateAuthority
	}).(GetCertificatePoolCertificateAuthorityOutput)
}

// (Required String) A description of the Certificate Pool.
func (o LookupCertificatePoolResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificatePoolResult) string { return v.Description }).(pulumi.StringOutput)
}

// (Required String) A human-readable name for the Certificate Pool.
func (o LookupCertificatePoolResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificatePoolResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// (Required String) The certificate field that will be used to represent the pool's external identity for audit logging, for example, `UID`.
func (o LookupCertificatePoolResultOutput) ExternalIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificatePoolResult) string { return v.ExternalIdentifier }).(pulumi.StringOutput)
}

// (Required String) A filter expression in [Supported Common Expression Language (CEL)](https://docs.confluent.io/cloud/current/access-management/authenticate/mtls/cel-filters.html) that specifies which identities can authenticate using your certificate pool.
func (o LookupCertificatePoolResultOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificatePoolResult) string { return v.Filter }).(pulumi.StringOutput)
}

func (o LookupCertificatePoolResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificatePoolResult) string { return v.Id }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCertificatePoolResultOutput{})
}

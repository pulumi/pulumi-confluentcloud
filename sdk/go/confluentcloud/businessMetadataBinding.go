// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
//
// `BusinessMetadataBinding` provides a Business Metadata Binding resource that enables creating, editing, and deleting Business Metadata Bindings on Confluent Cloud.
//
// ## Example Usage
//
// ### Option #1: Manage multiple Schema Registry clusters in the same Pulumi Stack
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := confluentcloud.LookupKafkaTopic(ctx, &confluentcloud.LookupKafkaTopicArgs{
//				TopicName: "orders",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = confluentcloud.NewBusinessMetadataBinding(ctx, "main", &confluentcloud.BusinessMetadataBindingArgs{
//				SchemaRegistryCluster: &confluentcloud.BusinessMetadataBindingSchemaRegistryClusterArgs{
//					Id: pulumi.Any(essentials.Id),
//				},
//				RestEndpoint: pulumi.Any(essentials.RestEndpoint),
//				Credentials: &confluentcloud.BusinessMetadataBindingCredentialsArgs{
//					Key:    pulumi.String("<Schema Registry API Key for data.confluent_schema_registry_cluster.essentials>"),
//					Secret: pulumi.String("<Schema Registry API Secret for data.confluent_schema_registry_cluster.essentials>"),
//				},
//				BusinessMetadataName: pulumi.Any(pii.Name),
//				EntityName:           pulumi.Sprintf("%v:%v:%v", schemaRegistryId, kafkaId, main.TopicName),
//				EntityType:           pulumi.String("kafka_topic"),
//				Attributes: pulumi.StringMap{
//					"team":  pulumi.String("teamName"),
//					"email": pulumi.String("team@company.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Option #2: Manage a single Schema Registry cluster in the same Pulumi Stack
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := confluentcloud.LookupKafkaTopic(ctx, &confluentcloud.LookupKafkaTopicArgs{
//				TopicName: "orders",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = confluentcloud.NewBusinessMetadataBinding(ctx, "main", &confluentcloud.BusinessMetadataBindingArgs{
//				BusinessMetadataName: pulumi.Any(pii.Name),
//				EntityName:           pulumi.Sprintf("%v:%v:%v", schemaRegistryId, kafkaId, main.TopicName),
//				EntityType:           pulumi.String("kafka_topic"),
//				Attributes: pulumi.StringMap{
//					"team":  pulumi.String("teamName"),
//					"email": pulumi.String("team@company.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// > **Note:** We also support `schemaRegistryRestEndpoint` instead of `catalogRestEndpoint` for the time being.
//
// ## Getting Started
//
// The following end-to-end example might help to get started with [Stream Catalog](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog.html):
// * stream-catalog
//
// ## Import
//
// You can import a Business Metadata Binding by using the Schema Registry cluster ID, Business Metadata name, entity name and entity type in the format `<Schema Registry Cluster Id>/<Business Metadata Name>/<Entity Name>/<Entity Type>`, for example:
//
// $ export IMPORT_SCHEMA_REGISTRY_API_KEY="<schema_registry_api_key>"
//
// $ export IMPORT_SCHEMA_REGISTRY_API_SECRET="<schema_registry_api_secret>"
//
// $ export IMPORT_CATALOG_REST_ENDPOINT="<catalog_rest_endpoint>"
//
// ```sh
// $ pulumi import confluentcloud:index/businessMetadataBinding:BusinessMetadataBinding main lsrc-8wrx70/PII/lsrc-8wrx70:.:100001/sr_schema
// ```
//
// !> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
type BusinessMetadataBinding struct {
	pulumi.CustomResourceState

	// The attributes.
	Attributes pulumi.StringMapOutput `pulumi:"attributes"`
	// The name of the Business Metadata to be applied, for example, `PII`. The name must not be empty and consist of a letter followed by a sequence of letter, number, space, or _ characters.
	BusinessMetadataName pulumi.StringOutput `pulumi:"businessMetadataName"`
	// The Cluster API Credentials.
	Credentials BusinessMetadataBindingCredentialsPtrOutput `pulumi:"credentials"`
	// The qualified name of the entity, for example, `${data.confluent_schema_registry_cluster.essentials.id}:.:${confluent_schema.purchase.schema_identifier}`, `${data.confluent_schema_registry_cluster.essentials.id}:${confluent_kafka_cluster.basic.id}:${confluent_kafka_topic.purchase.topic_name}`. Refer to the [Examples of qualified names](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#examples-of-qualified-names) to see the full list of supported values for the `entityName` attribute.
	EntityName pulumi.StringOutput `pulumi:"entityName"`
	// The entity type, for example, `srSchema`. Refer to the [Entity types](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#entity-types) to learn more about entity types.
	EntityType pulumi.StringOutput `pulumi:"entityType"`
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          pulumi.StringPtrOutput                                `pulumi:"restEndpoint"`
	SchemaRegistryCluster BusinessMetadataBindingSchemaRegistryClusterPtrOutput `pulumi:"schemaRegistryCluster"`
}

// NewBusinessMetadataBinding registers a new resource with the given unique name, arguments, and options.
func NewBusinessMetadataBinding(ctx *pulumi.Context,
	name string, args *BusinessMetadataBindingArgs, opts ...pulumi.ResourceOption) (*BusinessMetadataBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BusinessMetadataName == nil {
		return nil, errors.New("invalid value for required argument 'BusinessMetadataName'")
	}
	if args.EntityName == nil {
		return nil, errors.New("invalid value for required argument 'EntityName'")
	}
	if args.EntityType == nil {
		return nil, errors.New("invalid value for required argument 'EntityType'")
	}
	if args.Credentials != nil {
		args.Credentials = pulumi.ToSecret(args.Credentials).(BusinessMetadataBindingCredentialsPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"credentials",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BusinessMetadataBinding
	err := ctx.RegisterResource("confluentcloud:index/businessMetadataBinding:BusinessMetadataBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBusinessMetadataBinding gets an existing BusinessMetadataBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBusinessMetadataBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BusinessMetadataBindingState, opts ...pulumi.ResourceOption) (*BusinessMetadataBinding, error) {
	var resource BusinessMetadataBinding
	err := ctx.ReadResource("confluentcloud:index/businessMetadataBinding:BusinessMetadataBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BusinessMetadataBinding resources.
type businessMetadataBindingState struct {
	// The attributes.
	Attributes map[string]string `pulumi:"attributes"`
	// The name of the Business Metadata to be applied, for example, `PII`. The name must not be empty and consist of a letter followed by a sequence of letter, number, space, or _ characters.
	BusinessMetadataName *string `pulumi:"businessMetadataName"`
	// The Cluster API Credentials.
	Credentials *BusinessMetadataBindingCredentials `pulumi:"credentials"`
	// The qualified name of the entity, for example, `${data.confluent_schema_registry_cluster.essentials.id}:.:${confluent_schema.purchase.schema_identifier}`, `${data.confluent_schema_registry_cluster.essentials.id}:${confluent_kafka_cluster.basic.id}:${confluent_kafka_topic.purchase.topic_name}`. Refer to the [Examples of qualified names](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#examples-of-qualified-names) to see the full list of supported values for the `entityName` attribute.
	EntityName *string `pulumi:"entityName"`
	// The entity type, for example, `srSchema`. Refer to the [Entity types](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#entity-types) to learn more about entity types.
	EntityType *string `pulumi:"entityType"`
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          *string                                       `pulumi:"restEndpoint"`
	SchemaRegistryCluster *BusinessMetadataBindingSchemaRegistryCluster `pulumi:"schemaRegistryCluster"`
}

type BusinessMetadataBindingState struct {
	// The attributes.
	Attributes pulumi.StringMapInput
	// The name of the Business Metadata to be applied, for example, `PII`. The name must not be empty and consist of a letter followed by a sequence of letter, number, space, or _ characters.
	BusinessMetadataName pulumi.StringPtrInput
	// The Cluster API Credentials.
	Credentials BusinessMetadataBindingCredentialsPtrInput
	// The qualified name of the entity, for example, `${data.confluent_schema_registry_cluster.essentials.id}:.:${confluent_schema.purchase.schema_identifier}`, `${data.confluent_schema_registry_cluster.essentials.id}:${confluent_kafka_cluster.basic.id}:${confluent_kafka_topic.purchase.topic_name}`. Refer to the [Examples of qualified names](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#examples-of-qualified-names) to see the full list of supported values for the `entityName` attribute.
	EntityName pulumi.StringPtrInput
	// The entity type, for example, `srSchema`. Refer to the [Entity types](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#entity-types) to learn more about entity types.
	EntityType pulumi.StringPtrInput
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          pulumi.StringPtrInput
	SchemaRegistryCluster BusinessMetadataBindingSchemaRegistryClusterPtrInput
}

func (BusinessMetadataBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*businessMetadataBindingState)(nil)).Elem()
}

type businessMetadataBindingArgs struct {
	// The attributes.
	Attributes map[string]string `pulumi:"attributes"`
	// The name of the Business Metadata to be applied, for example, `PII`. The name must not be empty and consist of a letter followed by a sequence of letter, number, space, or _ characters.
	BusinessMetadataName string `pulumi:"businessMetadataName"`
	// The Cluster API Credentials.
	Credentials *BusinessMetadataBindingCredentials `pulumi:"credentials"`
	// The qualified name of the entity, for example, `${data.confluent_schema_registry_cluster.essentials.id}:.:${confluent_schema.purchase.schema_identifier}`, `${data.confluent_schema_registry_cluster.essentials.id}:${confluent_kafka_cluster.basic.id}:${confluent_kafka_topic.purchase.topic_name}`. Refer to the [Examples of qualified names](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#examples-of-qualified-names) to see the full list of supported values for the `entityName` attribute.
	EntityName string `pulumi:"entityName"`
	// The entity type, for example, `srSchema`. Refer to the [Entity types](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#entity-types) to learn more about entity types.
	EntityType string `pulumi:"entityType"`
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          *string                                       `pulumi:"restEndpoint"`
	SchemaRegistryCluster *BusinessMetadataBindingSchemaRegistryCluster `pulumi:"schemaRegistryCluster"`
}

// The set of arguments for constructing a BusinessMetadataBinding resource.
type BusinessMetadataBindingArgs struct {
	// The attributes.
	Attributes pulumi.StringMapInput
	// The name of the Business Metadata to be applied, for example, `PII`. The name must not be empty and consist of a letter followed by a sequence of letter, number, space, or _ characters.
	BusinessMetadataName pulumi.StringInput
	// The Cluster API Credentials.
	Credentials BusinessMetadataBindingCredentialsPtrInput
	// The qualified name of the entity, for example, `${data.confluent_schema_registry_cluster.essentials.id}:.:${confluent_schema.purchase.schema_identifier}`, `${data.confluent_schema_registry_cluster.essentials.id}:${confluent_kafka_cluster.basic.id}:${confluent_kafka_topic.purchase.topic_name}`. Refer to the [Examples of qualified names](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#examples-of-qualified-names) to see the full list of supported values for the `entityName` attribute.
	EntityName pulumi.StringInput
	// The entity type, for example, `srSchema`. Refer to the [Entity types](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#entity-types) to learn more about entity types.
	EntityType pulumi.StringInput
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          pulumi.StringPtrInput
	SchemaRegistryCluster BusinessMetadataBindingSchemaRegistryClusterPtrInput
}

func (BusinessMetadataBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*businessMetadataBindingArgs)(nil)).Elem()
}

type BusinessMetadataBindingInput interface {
	pulumi.Input

	ToBusinessMetadataBindingOutput() BusinessMetadataBindingOutput
	ToBusinessMetadataBindingOutputWithContext(ctx context.Context) BusinessMetadataBindingOutput
}

func (*BusinessMetadataBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**BusinessMetadataBinding)(nil)).Elem()
}

func (i *BusinessMetadataBinding) ToBusinessMetadataBindingOutput() BusinessMetadataBindingOutput {
	return i.ToBusinessMetadataBindingOutputWithContext(context.Background())
}

func (i *BusinessMetadataBinding) ToBusinessMetadataBindingOutputWithContext(ctx context.Context) BusinessMetadataBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessMetadataBindingOutput)
}

// BusinessMetadataBindingArrayInput is an input type that accepts BusinessMetadataBindingArray and BusinessMetadataBindingArrayOutput values.
// You can construct a concrete instance of `BusinessMetadataBindingArrayInput` via:
//
//	BusinessMetadataBindingArray{ BusinessMetadataBindingArgs{...} }
type BusinessMetadataBindingArrayInput interface {
	pulumi.Input

	ToBusinessMetadataBindingArrayOutput() BusinessMetadataBindingArrayOutput
	ToBusinessMetadataBindingArrayOutputWithContext(context.Context) BusinessMetadataBindingArrayOutput
}

type BusinessMetadataBindingArray []BusinessMetadataBindingInput

func (BusinessMetadataBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BusinessMetadataBinding)(nil)).Elem()
}

func (i BusinessMetadataBindingArray) ToBusinessMetadataBindingArrayOutput() BusinessMetadataBindingArrayOutput {
	return i.ToBusinessMetadataBindingArrayOutputWithContext(context.Background())
}

func (i BusinessMetadataBindingArray) ToBusinessMetadataBindingArrayOutputWithContext(ctx context.Context) BusinessMetadataBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessMetadataBindingArrayOutput)
}

// BusinessMetadataBindingMapInput is an input type that accepts BusinessMetadataBindingMap and BusinessMetadataBindingMapOutput values.
// You can construct a concrete instance of `BusinessMetadataBindingMapInput` via:
//
//	BusinessMetadataBindingMap{ "key": BusinessMetadataBindingArgs{...} }
type BusinessMetadataBindingMapInput interface {
	pulumi.Input

	ToBusinessMetadataBindingMapOutput() BusinessMetadataBindingMapOutput
	ToBusinessMetadataBindingMapOutputWithContext(context.Context) BusinessMetadataBindingMapOutput
}

type BusinessMetadataBindingMap map[string]BusinessMetadataBindingInput

func (BusinessMetadataBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BusinessMetadataBinding)(nil)).Elem()
}

func (i BusinessMetadataBindingMap) ToBusinessMetadataBindingMapOutput() BusinessMetadataBindingMapOutput {
	return i.ToBusinessMetadataBindingMapOutputWithContext(context.Background())
}

func (i BusinessMetadataBindingMap) ToBusinessMetadataBindingMapOutputWithContext(ctx context.Context) BusinessMetadataBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessMetadataBindingMapOutput)
}

type BusinessMetadataBindingOutput struct{ *pulumi.OutputState }

func (BusinessMetadataBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BusinessMetadataBinding)(nil)).Elem()
}

func (o BusinessMetadataBindingOutput) ToBusinessMetadataBindingOutput() BusinessMetadataBindingOutput {
	return o
}

func (o BusinessMetadataBindingOutput) ToBusinessMetadataBindingOutputWithContext(ctx context.Context) BusinessMetadataBindingOutput {
	return o
}

// The attributes.
func (o BusinessMetadataBindingOutput) Attributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BusinessMetadataBinding) pulumi.StringMapOutput { return v.Attributes }).(pulumi.StringMapOutput)
}

// The name of the Business Metadata to be applied, for example, `PII`. The name must not be empty and consist of a letter followed by a sequence of letter, number, space, or _ characters.
func (o BusinessMetadataBindingOutput) BusinessMetadataName() pulumi.StringOutput {
	return o.ApplyT(func(v *BusinessMetadataBinding) pulumi.StringOutput { return v.BusinessMetadataName }).(pulumi.StringOutput)
}

// The Cluster API Credentials.
func (o BusinessMetadataBindingOutput) Credentials() BusinessMetadataBindingCredentialsPtrOutput {
	return o.ApplyT(func(v *BusinessMetadataBinding) BusinessMetadataBindingCredentialsPtrOutput { return v.Credentials }).(BusinessMetadataBindingCredentialsPtrOutput)
}

// The qualified name of the entity, for example, `${data.confluent_schema_registry_cluster.essentials.id}:.:${confluent_schema.purchase.schema_identifier}`, `${data.confluent_schema_registry_cluster.essentials.id}:${confluent_kafka_cluster.basic.id}:${confluent_kafka_topic.purchase.topic_name}`. Refer to the [Examples of qualified names](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#examples-of-qualified-names) to see the full list of supported values for the `entityName` attribute.
func (o BusinessMetadataBindingOutput) EntityName() pulumi.StringOutput {
	return o.ApplyT(func(v *BusinessMetadataBinding) pulumi.StringOutput { return v.EntityName }).(pulumi.StringOutput)
}

// The entity type, for example, `srSchema`. Refer to the [Entity types](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#entity-types) to learn more about entity types.
func (o BusinessMetadataBindingOutput) EntityType() pulumi.StringOutput {
	return o.ApplyT(func(v *BusinessMetadataBinding) pulumi.StringOutput { return v.EntityType }).(pulumi.StringOutput)
}

// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
func (o BusinessMetadataBindingOutput) RestEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BusinessMetadataBinding) pulumi.StringPtrOutput { return v.RestEndpoint }).(pulumi.StringPtrOutput)
}

func (o BusinessMetadataBindingOutput) SchemaRegistryCluster() BusinessMetadataBindingSchemaRegistryClusterPtrOutput {
	return o.ApplyT(func(v *BusinessMetadataBinding) BusinessMetadataBindingSchemaRegistryClusterPtrOutput {
		return v.SchemaRegistryCluster
	}).(BusinessMetadataBindingSchemaRegistryClusterPtrOutput)
}

type BusinessMetadataBindingArrayOutput struct{ *pulumi.OutputState }

func (BusinessMetadataBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BusinessMetadataBinding)(nil)).Elem()
}

func (o BusinessMetadataBindingArrayOutput) ToBusinessMetadataBindingArrayOutput() BusinessMetadataBindingArrayOutput {
	return o
}

func (o BusinessMetadataBindingArrayOutput) ToBusinessMetadataBindingArrayOutputWithContext(ctx context.Context) BusinessMetadataBindingArrayOutput {
	return o
}

func (o BusinessMetadataBindingArrayOutput) Index(i pulumi.IntInput) BusinessMetadataBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BusinessMetadataBinding {
		return vs[0].([]*BusinessMetadataBinding)[vs[1].(int)]
	}).(BusinessMetadataBindingOutput)
}

type BusinessMetadataBindingMapOutput struct{ *pulumi.OutputState }

func (BusinessMetadataBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BusinessMetadataBinding)(nil)).Elem()
}

func (o BusinessMetadataBindingMapOutput) ToBusinessMetadataBindingMapOutput() BusinessMetadataBindingMapOutput {
	return o
}

func (o BusinessMetadataBindingMapOutput) ToBusinessMetadataBindingMapOutputWithContext(ctx context.Context) BusinessMetadataBindingMapOutput {
	return o
}

func (o BusinessMetadataBindingMapOutput) MapIndex(k pulumi.StringInput) BusinessMetadataBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BusinessMetadataBinding {
		return vs[0].(map[string]*BusinessMetadataBinding)[vs[1].(string)]
	}).(BusinessMetadataBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BusinessMetadataBindingInput)(nil)).Elem(), &BusinessMetadataBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*BusinessMetadataBindingArrayInput)(nil)).Elem(), BusinessMetadataBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BusinessMetadataBindingMapInput)(nil)).Elem(), BusinessMetadataBindingMap{})
	pulumi.RegisterOutputType(BusinessMetadataBindingOutput{})
	pulumi.RegisterOutputType(BusinessMetadataBindingArrayOutput{})
	pulumi.RegisterOutputType(BusinessMetadataBindingMapOutput{})
}

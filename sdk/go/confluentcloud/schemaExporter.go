// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
//
// `SchemaExporter` provides a Schema Exporter resource that enables creating, editing, and deleting Schema Exporters on Confluent Cloud.
//
// ## Example Usage
//
// ### Option #1: Manage multiple Schema Registry clusters in the same Pulumi Stack
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := confluentcloud.NewSchemaExporter(ctx, "main", &confluentcloud.SchemaExporterArgs{
//				SchemaRegistryCluster: &confluentcloud.SchemaExporterSchemaRegistryClusterArgs{
//					Id: pulumi.Any(essentials.Id),
//				},
//				RestEndpoint: pulumi.Any(essentials.RestEndpoint),
//				Credentials: &confluentcloud.SchemaExporterCredentialsArgs{
//					Key:    pulumi.String("<Schema Registry API Key for data.confluent_schema_registry_cluster.essentials>"),
//					Secret: pulumi.String("<Schema Registry API Secret for data.confluent_schema_registry_cluster.essentials>"),
//				},
//				Name: pulumi.String("test-exporter"),
//				Subjects: pulumi.StringArray{
//					pulumi.String("foo"),
//				},
//				DestinationSchemaRegistryCluster: &confluentcloud.SchemaExporterDestinationSchemaRegistryClusterArgs{
//					RestEndpoint: pulumi.Any(destination.RestEndpoint),
//					Credentials: &confluentcloud.SchemaExporterDestinationSchemaRegistryClusterCredentialsArgs{
//						Key:    pulumi.String("<Schema Registry API Key for data.confluent_schema_registry_cluster.destination>"),
//						Secret: pulumi.String("<Schema Registry API Secret for data.confluent_schema_registry_cluster.destination>"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Option #2: Manage a single Schema Registry cluster in the same Pulumi Stack
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := confluentcloud.NewSchemaExporter(ctx, "main", &confluentcloud.SchemaExporterArgs{
//				Name: pulumi.String("test-exporter"),
//				Subjects: pulumi.StringArray{
//					pulumi.String("foo"),
//				},
//				DestinationSchemaRegistryCluster: &confluentcloud.SchemaExporterDestinationSchemaRegistryClusterArgs{
//					RestEndpoint: pulumi.Any(destination.RestEndpoint),
//					Credentials: &confluentcloud.SchemaExporterDestinationSchemaRegistryClusterCredentialsArgs{
//						Key:    pulumi.String("<Schema Registry API Key for data.confluent_schema_registry_cluster.destination>"),
//						Secret: pulumi.String("<Schema Registry API Secret for data.confluent_schema_registry_cluster.destination>"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Option #3: Manage multiple Schema Registry clusters in the same Pulumi Stack using OAuth authentication
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := confluentcloud.NewSchemaExporter(ctx, "main", &confluentcloud.SchemaExporterArgs{
//				SchemaRegistryCluster: &confluentcloud.SchemaExporterSchemaRegistryClusterArgs{
//					Id: pulumi.Any(essentials.Id),
//				},
//				RestEndpoint: pulumi.Any(essentials.RestEndpoint),
//				Name:         pulumi.String("test-exporter"),
//				Subjects: pulumi.StringArray{
//					pulumi.String("foo"),
//				},
//				DestinationSchemaRegistryCluster: &confluentcloud.SchemaExporterDestinationSchemaRegistryClusterArgs{
//					Id:           pulumi.Any(destination.Id),
//					RestEndpoint: pulumi.Any(destination.RestEndpoint),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// You can import a Schema Exporter by using the Schema Registry cluster ID, Schema Exporter name in the format `<Schema Registry cluster ID>/<Schema Exporter name>`, for example:
//
// $ export IMPORT_SCHEMA_REGISTRY_ID="<schema_registry_cluster_id>"
//
// $ export IMPORT_SCHEMA_REGISTRY_API_KEY="<schema_registry_api_key>"
//
// $ export IMPORT_SCHEMA_REGISTRY_API_SECRET="<schema_registry_api_secret>"
//
// $ export IMPORT_SCHEMA_REGISTRY_REST_ENDPOINT="<schema_registry_rest_endpoint>"
//
// ```sh
// $ pulumi import confluentcloud:index/schemaExporter:SchemaExporter main lsrc-8wrx70/test-exporter
// ```
//
// !> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
type SchemaExporter struct {
	pulumi.CustomResourceState

	// Block for custom *nonsensitive* configuration properties:
	Config pulumi.StringMapOutput `pulumi:"config"`
	// Customized context of the exporter if `contextType` is set to `CUSTOM`.
	Context pulumi.StringOutput `pulumi:"context"`
	// Context type of the exporter. Accepted values are: `CUSTOM`, `NONE` or `AUTO`. Defaults to `AUTO`.
	ContextType pulumi.StringOutput `pulumi:"contextType"`
	// The Cluster API Credentials.
	Credentials                      SchemaExporterCredentialsPtrOutput                   `pulumi:"credentials"`
	DestinationSchemaRegistryCluster SchemaExporterDestinationSchemaRegistryClusterOutput `pulumi:"destinationSchemaRegistryCluster"`
	// Name of the Schema Exporter.
	Name pulumi.StringOutput `pulumi:"name"`
	// The flag to control whether to reset the exporter when updating configs. Defaults to `false`.
	//
	// > **Note:** When using OAuth authentication in the provider block, `destination_schema_registry_cluster.id` is required and credentials blocks for both source and destination schema registry clusters must be removed.
	ResetOnUpdate pulumi.BoolPtrOutput `pulumi:"resetOnUpdate"`
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          pulumi.StringPtrOutput                       `pulumi:"restEndpoint"`
	SchemaRegistryCluster SchemaExporterSchemaRegistryClusterPtrOutput `pulumi:"schemaRegistryCluster"`
	// The status of the schema exporter. Accepted values are: `RUNNING` and `PAUSED`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Format string for the subject name in the destination cluster, which may contain `${subject}` as a placeholder for the originating subject name. For example, `dc_${subject}` for the subject orders will map to the destination subject name `dcOrders`.
	SubjectRenameFormat pulumi.StringOutput `pulumi:"subjectRenameFormat"`
	// Name of each exporter subject.
	Subjects pulumi.StringArrayOutput `pulumi:"subjects"`
}

// NewSchemaExporter registers a new resource with the given unique name, arguments, and options.
func NewSchemaExporter(ctx *pulumi.Context,
	name string, args *SchemaExporterArgs, opts ...pulumi.ResourceOption) (*SchemaExporter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationSchemaRegistryCluster == nil {
		return nil, errors.New("invalid value for required argument 'DestinationSchemaRegistryCluster'")
	}
	if args.Credentials != nil {
		args.Credentials = pulumi.ToSecret(args.Credentials).(SchemaExporterCredentialsPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"credentials",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SchemaExporter
	err := ctx.RegisterResource("confluentcloud:index/schemaExporter:SchemaExporter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSchemaExporter gets an existing SchemaExporter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchemaExporter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SchemaExporterState, opts ...pulumi.ResourceOption) (*SchemaExporter, error) {
	var resource SchemaExporter
	err := ctx.ReadResource("confluentcloud:index/schemaExporter:SchemaExporter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SchemaExporter resources.
type schemaExporterState struct {
	// Block for custom *nonsensitive* configuration properties:
	Config map[string]string `pulumi:"config"`
	// Customized context of the exporter if `contextType` is set to `CUSTOM`.
	Context *string `pulumi:"context"`
	// Context type of the exporter. Accepted values are: `CUSTOM`, `NONE` or `AUTO`. Defaults to `AUTO`.
	ContextType *string `pulumi:"contextType"`
	// The Cluster API Credentials.
	Credentials                      *SchemaExporterCredentials                      `pulumi:"credentials"`
	DestinationSchemaRegistryCluster *SchemaExporterDestinationSchemaRegistryCluster `pulumi:"destinationSchemaRegistryCluster"`
	// Name of the Schema Exporter.
	Name *string `pulumi:"name"`
	// The flag to control whether to reset the exporter when updating configs. Defaults to `false`.
	//
	// > **Note:** When using OAuth authentication in the provider block, `destination_schema_registry_cluster.id` is required and credentials blocks for both source and destination schema registry clusters must be removed.
	ResetOnUpdate *bool `pulumi:"resetOnUpdate"`
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          *string                              `pulumi:"restEndpoint"`
	SchemaRegistryCluster *SchemaExporterSchemaRegistryCluster `pulumi:"schemaRegistryCluster"`
	// The status of the schema exporter. Accepted values are: `RUNNING` and `PAUSED`.
	Status *string `pulumi:"status"`
	// Format string for the subject name in the destination cluster, which may contain `${subject}` as a placeholder for the originating subject name. For example, `dc_${subject}` for the subject orders will map to the destination subject name `dcOrders`.
	SubjectRenameFormat *string `pulumi:"subjectRenameFormat"`
	// Name of each exporter subject.
	Subjects []string `pulumi:"subjects"`
}

type SchemaExporterState struct {
	// Block for custom *nonsensitive* configuration properties:
	Config pulumi.StringMapInput
	// Customized context of the exporter if `contextType` is set to `CUSTOM`.
	Context pulumi.StringPtrInput
	// Context type of the exporter. Accepted values are: `CUSTOM`, `NONE` or `AUTO`. Defaults to `AUTO`.
	ContextType pulumi.StringPtrInput
	// The Cluster API Credentials.
	Credentials                      SchemaExporterCredentialsPtrInput
	DestinationSchemaRegistryCluster SchemaExporterDestinationSchemaRegistryClusterPtrInput
	// Name of the Schema Exporter.
	Name pulumi.StringPtrInput
	// The flag to control whether to reset the exporter when updating configs. Defaults to `false`.
	//
	// > **Note:** When using OAuth authentication in the provider block, `destination_schema_registry_cluster.id` is required and credentials blocks for both source and destination schema registry clusters must be removed.
	ResetOnUpdate pulumi.BoolPtrInput
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          pulumi.StringPtrInput
	SchemaRegistryCluster SchemaExporterSchemaRegistryClusterPtrInput
	// The status of the schema exporter. Accepted values are: `RUNNING` and `PAUSED`.
	Status pulumi.StringPtrInput
	// Format string for the subject name in the destination cluster, which may contain `${subject}` as a placeholder for the originating subject name. For example, `dc_${subject}` for the subject orders will map to the destination subject name `dcOrders`.
	SubjectRenameFormat pulumi.StringPtrInput
	// Name of each exporter subject.
	Subjects pulumi.StringArrayInput
}

func (SchemaExporterState) ElementType() reflect.Type {
	return reflect.TypeOf((*schemaExporterState)(nil)).Elem()
}

type schemaExporterArgs struct {
	// Block for custom *nonsensitive* configuration properties:
	Config map[string]string `pulumi:"config"`
	// Customized context of the exporter if `contextType` is set to `CUSTOM`.
	Context *string `pulumi:"context"`
	// Context type of the exporter. Accepted values are: `CUSTOM`, `NONE` or `AUTO`. Defaults to `AUTO`.
	ContextType *string `pulumi:"contextType"`
	// The Cluster API Credentials.
	Credentials                      *SchemaExporterCredentials                     `pulumi:"credentials"`
	DestinationSchemaRegistryCluster SchemaExporterDestinationSchemaRegistryCluster `pulumi:"destinationSchemaRegistryCluster"`
	// Name of the Schema Exporter.
	Name *string `pulumi:"name"`
	// The flag to control whether to reset the exporter when updating configs. Defaults to `false`.
	//
	// > **Note:** When using OAuth authentication in the provider block, `destination_schema_registry_cluster.id` is required and credentials blocks for both source and destination schema registry clusters must be removed.
	ResetOnUpdate *bool `pulumi:"resetOnUpdate"`
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          *string                              `pulumi:"restEndpoint"`
	SchemaRegistryCluster *SchemaExporterSchemaRegistryCluster `pulumi:"schemaRegistryCluster"`
	// The status of the schema exporter. Accepted values are: `RUNNING` and `PAUSED`.
	Status *string `pulumi:"status"`
	// Format string for the subject name in the destination cluster, which may contain `${subject}` as a placeholder for the originating subject name. For example, `dc_${subject}` for the subject orders will map to the destination subject name `dcOrders`.
	SubjectRenameFormat *string `pulumi:"subjectRenameFormat"`
	// Name of each exporter subject.
	Subjects []string `pulumi:"subjects"`
}

// The set of arguments for constructing a SchemaExporter resource.
type SchemaExporterArgs struct {
	// Block for custom *nonsensitive* configuration properties:
	Config pulumi.StringMapInput
	// Customized context of the exporter if `contextType` is set to `CUSTOM`.
	Context pulumi.StringPtrInput
	// Context type of the exporter. Accepted values are: `CUSTOM`, `NONE` or `AUTO`. Defaults to `AUTO`.
	ContextType pulumi.StringPtrInput
	// The Cluster API Credentials.
	Credentials                      SchemaExporterCredentialsPtrInput
	DestinationSchemaRegistryCluster SchemaExporterDestinationSchemaRegistryClusterInput
	// Name of the Schema Exporter.
	Name pulumi.StringPtrInput
	// The flag to control whether to reset the exporter when updating configs. Defaults to `false`.
	//
	// > **Note:** When using OAuth authentication in the provider block, `destination_schema_registry_cluster.id` is required and credentials blocks for both source and destination schema registry clusters must be removed.
	ResetOnUpdate pulumi.BoolPtrInput
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          pulumi.StringPtrInput
	SchemaRegistryCluster SchemaExporterSchemaRegistryClusterPtrInput
	// The status of the schema exporter. Accepted values are: `RUNNING` and `PAUSED`.
	Status pulumi.StringPtrInput
	// Format string for the subject name in the destination cluster, which may contain `${subject}` as a placeholder for the originating subject name. For example, `dc_${subject}` for the subject orders will map to the destination subject name `dcOrders`.
	SubjectRenameFormat pulumi.StringPtrInput
	// Name of each exporter subject.
	Subjects pulumi.StringArrayInput
}

func (SchemaExporterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*schemaExporterArgs)(nil)).Elem()
}

type SchemaExporterInput interface {
	pulumi.Input

	ToSchemaExporterOutput() SchemaExporterOutput
	ToSchemaExporterOutputWithContext(ctx context.Context) SchemaExporterOutput
}

func (*SchemaExporter) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaExporter)(nil)).Elem()
}

func (i *SchemaExporter) ToSchemaExporterOutput() SchemaExporterOutput {
	return i.ToSchemaExporterOutputWithContext(context.Background())
}

func (i *SchemaExporter) ToSchemaExporterOutputWithContext(ctx context.Context) SchemaExporterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaExporterOutput)
}

// SchemaExporterArrayInput is an input type that accepts SchemaExporterArray and SchemaExporterArrayOutput values.
// You can construct a concrete instance of `SchemaExporterArrayInput` via:
//
//	SchemaExporterArray{ SchemaExporterArgs{...} }
type SchemaExporterArrayInput interface {
	pulumi.Input

	ToSchemaExporterArrayOutput() SchemaExporterArrayOutput
	ToSchemaExporterArrayOutputWithContext(context.Context) SchemaExporterArrayOutput
}

type SchemaExporterArray []SchemaExporterInput

func (SchemaExporterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SchemaExporter)(nil)).Elem()
}

func (i SchemaExporterArray) ToSchemaExporterArrayOutput() SchemaExporterArrayOutput {
	return i.ToSchemaExporterArrayOutputWithContext(context.Background())
}

func (i SchemaExporterArray) ToSchemaExporterArrayOutputWithContext(ctx context.Context) SchemaExporterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaExporterArrayOutput)
}

// SchemaExporterMapInput is an input type that accepts SchemaExporterMap and SchemaExporterMapOutput values.
// You can construct a concrete instance of `SchemaExporterMapInput` via:
//
//	SchemaExporterMap{ "key": SchemaExporterArgs{...} }
type SchemaExporterMapInput interface {
	pulumi.Input

	ToSchemaExporterMapOutput() SchemaExporterMapOutput
	ToSchemaExporterMapOutputWithContext(context.Context) SchemaExporterMapOutput
}

type SchemaExporterMap map[string]SchemaExporterInput

func (SchemaExporterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SchemaExporter)(nil)).Elem()
}

func (i SchemaExporterMap) ToSchemaExporterMapOutput() SchemaExporterMapOutput {
	return i.ToSchemaExporterMapOutputWithContext(context.Background())
}

func (i SchemaExporterMap) ToSchemaExporterMapOutputWithContext(ctx context.Context) SchemaExporterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaExporterMapOutput)
}

type SchemaExporterOutput struct{ *pulumi.OutputState }

func (SchemaExporterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaExporter)(nil)).Elem()
}

func (o SchemaExporterOutput) ToSchemaExporterOutput() SchemaExporterOutput {
	return o
}

func (o SchemaExporterOutput) ToSchemaExporterOutputWithContext(ctx context.Context) SchemaExporterOutput {
	return o
}

// Block for custom *nonsensitive* configuration properties:
func (o SchemaExporterOutput) Config() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SchemaExporter) pulumi.StringMapOutput { return v.Config }).(pulumi.StringMapOutput)
}

// Customized context of the exporter if `contextType` is set to `CUSTOM`.
func (o SchemaExporterOutput) Context() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaExporter) pulumi.StringOutput { return v.Context }).(pulumi.StringOutput)
}

// Context type of the exporter. Accepted values are: `CUSTOM`, `NONE` or `AUTO`. Defaults to `AUTO`.
func (o SchemaExporterOutput) ContextType() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaExporter) pulumi.StringOutput { return v.ContextType }).(pulumi.StringOutput)
}

// The Cluster API Credentials.
func (o SchemaExporterOutput) Credentials() SchemaExporterCredentialsPtrOutput {
	return o.ApplyT(func(v *SchemaExporter) SchemaExporterCredentialsPtrOutput { return v.Credentials }).(SchemaExporterCredentialsPtrOutput)
}

func (o SchemaExporterOutput) DestinationSchemaRegistryCluster() SchemaExporterDestinationSchemaRegistryClusterOutput {
	return o.ApplyT(func(v *SchemaExporter) SchemaExporterDestinationSchemaRegistryClusterOutput {
		return v.DestinationSchemaRegistryCluster
	}).(SchemaExporterDestinationSchemaRegistryClusterOutput)
}

// Name of the Schema Exporter.
func (o SchemaExporterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaExporter) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The flag to control whether to reset the exporter when updating configs. Defaults to `false`.
//
// > **Note:** When using OAuth authentication in the provider block, `destination_schema_registry_cluster.id` is required and credentials blocks for both source and destination schema registry clusters must be removed.
func (o SchemaExporterOutput) ResetOnUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SchemaExporter) pulumi.BoolPtrOutput { return v.ResetOnUpdate }).(pulumi.BoolPtrOutput)
}

// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
func (o SchemaExporterOutput) RestEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaExporter) pulumi.StringPtrOutput { return v.RestEndpoint }).(pulumi.StringPtrOutput)
}

func (o SchemaExporterOutput) SchemaRegistryCluster() SchemaExporterSchemaRegistryClusterPtrOutput {
	return o.ApplyT(func(v *SchemaExporter) SchemaExporterSchemaRegistryClusterPtrOutput { return v.SchemaRegistryCluster }).(SchemaExporterSchemaRegistryClusterPtrOutput)
}

// The status of the schema exporter. Accepted values are: `RUNNING` and `PAUSED`.
func (o SchemaExporterOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaExporter) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Format string for the subject name in the destination cluster, which may contain `${subject}` as a placeholder for the originating subject name. For example, `dc_${subject}` for the subject orders will map to the destination subject name `dcOrders`.
func (o SchemaExporterOutput) SubjectRenameFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaExporter) pulumi.StringOutput { return v.SubjectRenameFormat }).(pulumi.StringOutput)
}

// Name of each exporter subject.
func (o SchemaExporterOutput) Subjects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SchemaExporter) pulumi.StringArrayOutput { return v.Subjects }).(pulumi.StringArrayOutput)
}

type SchemaExporterArrayOutput struct{ *pulumi.OutputState }

func (SchemaExporterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SchemaExporter)(nil)).Elem()
}

func (o SchemaExporterArrayOutput) ToSchemaExporterArrayOutput() SchemaExporterArrayOutput {
	return o
}

func (o SchemaExporterArrayOutput) ToSchemaExporterArrayOutputWithContext(ctx context.Context) SchemaExporterArrayOutput {
	return o
}

func (o SchemaExporterArrayOutput) Index(i pulumi.IntInput) SchemaExporterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SchemaExporter {
		return vs[0].([]*SchemaExporter)[vs[1].(int)]
	}).(SchemaExporterOutput)
}

type SchemaExporterMapOutput struct{ *pulumi.OutputState }

func (SchemaExporterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SchemaExporter)(nil)).Elem()
}

func (o SchemaExporterMapOutput) ToSchemaExporterMapOutput() SchemaExporterMapOutput {
	return o
}

func (o SchemaExporterMapOutput) ToSchemaExporterMapOutputWithContext(ctx context.Context) SchemaExporterMapOutput {
	return o
}

func (o SchemaExporterMapOutput) MapIndex(k pulumi.StringInput) SchemaExporterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SchemaExporter {
		return vs[0].(map[string]*SchemaExporter)[vs[1].(string)]
	}).(SchemaExporterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaExporterInput)(nil)).Elem(), &SchemaExporter{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaExporterArrayInput)(nil)).Elem(), SchemaExporterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaExporterMapInput)(nil)).Elem(), SchemaExporterMap{})
	pulumi.RegisterOutputType(SchemaExporterOutput{})
	pulumi.RegisterOutputType(SchemaExporterArrayOutput{})
	pulumi.RegisterOutputType(SchemaExporterMapOutput{})
}

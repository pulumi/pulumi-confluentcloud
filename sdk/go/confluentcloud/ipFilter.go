// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
//
// `IpFilter` provides an IP Filter resource that enables creating, editing, and deleting IP Filters on Confluent Cloud.
//
// > **Note:** See [IP Filtering on Confluent Cloud](https://docs.confluent.io/cloud/current/security/access-control/ip-filtering/overview.html) for more details about the IP Filtering feature, its prerequisites, and its limitations.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := confluentcloud.NewIpFilter(ctx, "management-filter", &confluentcloud.IpFilterArgs{
//				FilterName:    pulumi.String("Management API Rules"),
//				ResourceGroup: pulumi.String("management"),
//				IpGroups: pulumi.StringArray{
//					example.Id,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = confluentcloud.NewIpFilter(ctx, "multiple-filter", &confluentcloud.IpFilterArgs{
//				FilterName:    pulumi.String("Management, Schema, Flink API Rules"),
//				ResourceGroup: pulumi.String("multiple"),
//				OperationGroups: pulumi.StringArray{
//					pulumi.String("MANAGEMENT"),
//					pulumi.String("SCHEMA"),
//					pulumi.String("FLINK"),
//				},
//				IpGroups: pulumi.StringArray{
//					example.Id,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// You can import an IP Filter by using IP Filter ID, for example:
//
// $ export CONFLUENT_CLOUD_API_KEY="<cloud_api_key>"
//
// $ export CONFLUENT_CLOUD_API_SECRET="<cloud_api_secret>"
//
// ```sh
// $ pulumi import confluentcloud:index/ipFilter:IpFilter example ipf-abc123
// ```
//
// !> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
type IpFilter struct {
	pulumi.CustomResourceState

	// A human-readable name for an IP Filter. Can contain any unicode letter or number, the ASCII space character, or any of the following special characters: `[`, `]`, `|`, `&`, `+`, `-`, `_`, `/`, `.`, `,`.
	FilterName pulumi.StringOutput `pulumi:"filterName"`
	// A list of IP Groups.
	IpGroups pulumi.StringArrayOutput `pulumi:"ipGroups"`
	// Scope of resources covered by this IP Filter. Resource group must be set to 'multiple' in order to use this property. During update operations, note that the operation groups passed in will replace the list of existing operation groups (passing in an empty list will remove all operation groups) from the filter (in line with the behavior for `ipGroups` attribute).
	OperationGroups pulumi.StringArrayOutput `pulumi:"operationGroups"`
	// Scope of resources covered by this IP Filter. Available resource groups include `"management"` and `"multiple"`.
	ResourceGroup pulumi.StringOutput `pulumi:"resourceGroup"`
	// A CRN that specifies the scope of the IP Filter, specifically the organization or environment. Without specifying this property, the IP Filter would apply to the whole organization. For example, `"crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa"` or `data.confluent_organization.resource_name`.
	ResourceScope pulumi.StringOutput `pulumi:"resourceScope"`
}

// NewIpFilter registers a new resource with the given unique name, arguments, and options.
func NewIpFilter(ctx *pulumi.Context,
	name string, args *IpFilterArgs, opts ...pulumi.ResourceOption) (*IpFilter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FilterName == nil {
		return nil, errors.New("invalid value for required argument 'FilterName'")
	}
	if args.IpGroups == nil {
		return nil, errors.New("invalid value for required argument 'IpGroups'")
	}
	if args.ResourceGroup == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroup'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IpFilter
	err := ctx.RegisterResource("confluentcloud:index/ipFilter:IpFilter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpFilter gets an existing IpFilter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpFilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpFilterState, opts ...pulumi.ResourceOption) (*IpFilter, error) {
	var resource IpFilter
	err := ctx.ReadResource("confluentcloud:index/ipFilter:IpFilter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpFilter resources.
type ipFilterState struct {
	// A human-readable name for an IP Filter. Can contain any unicode letter or number, the ASCII space character, or any of the following special characters: `[`, `]`, `|`, `&`, `+`, `-`, `_`, `/`, `.`, `,`.
	FilterName *string `pulumi:"filterName"`
	// A list of IP Groups.
	IpGroups []string `pulumi:"ipGroups"`
	// Scope of resources covered by this IP Filter. Resource group must be set to 'multiple' in order to use this property. During update operations, note that the operation groups passed in will replace the list of existing operation groups (passing in an empty list will remove all operation groups) from the filter (in line with the behavior for `ipGroups` attribute).
	OperationGroups []string `pulumi:"operationGroups"`
	// Scope of resources covered by this IP Filter. Available resource groups include `"management"` and `"multiple"`.
	ResourceGroup *string `pulumi:"resourceGroup"`
	// A CRN that specifies the scope of the IP Filter, specifically the organization or environment. Without specifying this property, the IP Filter would apply to the whole organization. For example, `"crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa"` or `data.confluent_organization.resource_name`.
	ResourceScope *string `pulumi:"resourceScope"`
}

type IpFilterState struct {
	// A human-readable name for an IP Filter. Can contain any unicode letter or number, the ASCII space character, or any of the following special characters: `[`, `]`, `|`, `&`, `+`, `-`, `_`, `/`, `.`, `,`.
	FilterName pulumi.StringPtrInput
	// A list of IP Groups.
	IpGroups pulumi.StringArrayInput
	// Scope of resources covered by this IP Filter. Resource group must be set to 'multiple' in order to use this property. During update operations, note that the operation groups passed in will replace the list of existing operation groups (passing in an empty list will remove all operation groups) from the filter (in line with the behavior for `ipGroups` attribute).
	OperationGroups pulumi.StringArrayInput
	// Scope of resources covered by this IP Filter. Available resource groups include `"management"` and `"multiple"`.
	ResourceGroup pulumi.StringPtrInput
	// A CRN that specifies the scope of the IP Filter, specifically the organization or environment. Without specifying this property, the IP Filter would apply to the whole organization. For example, `"crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa"` or `data.confluent_organization.resource_name`.
	ResourceScope pulumi.StringPtrInput
}

func (IpFilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipFilterState)(nil)).Elem()
}

type ipFilterArgs struct {
	// A human-readable name for an IP Filter. Can contain any unicode letter or number, the ASCII space character, or any of the following special characters: `[`, `]`, `|`, `&`, `+`, `-`, `_`, `/`, `.`, `,`.
	FilterName string `pulumi:"filterName"`
	// A list of IP Groups.
	IpGroups []string `pulumi:"ipGroups"`
	// Scope of resources covered by this IP Filter. Resource group must be set to 'multiple' in order to use this property. During update operations, note that the operation groups passed in will replace the list of existing operation groups (passing in an empty list will remove all operation groups) from the filter (in line with the behavior for `ipGroups` attribute).
	OperationGroups []string `pulumi:"operationGroups"`
	// Scope of resources covered by this IP Filter. Available resource groups include `"management"` and `"multiple"`.
	ResourceGroup string `pulumi:"resourceGroup"`
	// A CRN that specifies the scope of the IP Filter, specifically the organization or environment. Without specifying this property, the IP Filter would apply to the whole organization. For example, `"crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa"` or `data.confluent_organization.resource_name`.
	ResourceScope *string `pulumi:"resourceScope"`
}

// The set of arguments for constructing a IpFilter resource.
type IpFilterArgs struct {
	// A human-readable name for an IP Filter. Can contain any unicode letter or number, the ASCII space character, or any of the following special characters: `[`, `]`, `|`, `&`, `+`, `-`, `_`, `/`, `.`, `,`.
	FilterName pulumi.StringInput
	// A list of IP Groups.
	IpGroups pulumi.StringArrayInput
	// Scope of resources covered by this IP Filter. Resource group must be set to 'multiple' in order to use this property. During update operations, note that the operation groups passed in will replace the list of existing operation groups (passing in an empty list will remove all operation groups) from the filter (in line with the behavior for `ipGroups` attribute).
	OperationGroups pulumi.StringArrayInput
	// Scope of resources covered by this IP Filter. Available resource groups include `"management"` and `"multiple"`.
	ResourceGroup pulumi.StringInput
	// A CRN that specifies the scope of the IP Filter, specifically the organization or environment. Without specifying this property, the IP Filter would apply to the whole organization. For example, `"crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa"` or `data.confluent_organization.resource_name`.
	ResourceScope pulumi.StringPtrInput
}

func (IpFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipFilterArgs)(nil)).Elem()
}

type IpFilterInput interface {
	pulumi.Input

	ToIpFilterOutput() IpFilterOutput
	ToIpFilterOutputWithContext(ctx context.Context) IpFilterOutput
}

func (*IpFilter) ElementType() reflect.Type {
	return reflect.TypeOf((**IpFilter)(nil)).Elem()
}

func (i *IpFilter) ToIpFilterOutput() IpFilterOutput {
	return i.ToIpFilterOutputWithContext(context.Background())
}

func (i *IpFilter) ToIpFilterOutputWithContext(ctx context.Context) IpFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpFilterOutput)
}

// IpFilterArrayInput is an input type that accepts IpFilterArray and IpFilterArrayOutput values.
// You can construct a concrete instance of `IpFilterArrayInput` via:
//
//	IpFilterArray{ IpFilterArgs{...} }
type IpFilterArrayInput interface {
	pulumi.Input

	ToIpFilterArrayOutput() IpFilterArrayOutput
	ToIpFilterArrayOutputWithContext(context.Context) IpFilterArrayOutput
}

type IpFilterArray []IpFilterInput

func (IpFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpFilter)(nil)).Elem()
}

func (i IpFilterArray) ToIpFilterArrayOutput() IpFilterArrayOutput {
	return i.ToIpFilterArrayOutputWithContext(context.Background())
}

func (i IpFilterArray) ToIpFilterArrayOutputWithContext(ctx context.Context) IpFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpFilterArrayOutput)
}

// IpFilterMapInput is an input type that accepts IpFilterMap and IpFilterMapOutput values.
// You can construct a concrete instance of `IpFilterMapInput` via:
//
//	IpFilterMap{ "key": IpFilterArgs{...} }
type IpFilterMapInput interface {
	pulumi.Input

	ToIpFilterMapOutput() IpFilterMapOutput
	ToIpFilterMapOutputWithContext(context.Context) IpFilterMapOutput
}

type IpFilterMap map[string]IpFilterInput

func (IpFilterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpFilter)(nil)).Elem()
}

func (i IpFilterMap) ToIpFilterMapOutput() IpFilterMapOutput {
	return i.ToIpFilterMapOutputWithContext(context.Background())
}

func (i IpFilterMap) ToIpFilterMapOutputWithContext(ctx context.Context) IpFilterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpFilterMapOutput)
}

type IpFilterOutput struct{ *pulumi.OutputState }

func (IpFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpFilter)(nil)).Elem()
}

func (o IpFilterOutput) ToIpFilterOutput() IpFilterOutput {
	return o
}

func (o IpFilterOutput) ToIpFilterOutputWithContext(ctx context.Context) IpFilterOutput {
	return o
}

// A human-readable name for an IP Filter. Can contain any unicode letter or number, the ASCII space character, or any of the following special characters: `[`, `]`, `|`, `&`, `+`, `-`, `_`, `/`, `.`, `,`.
func (o IpFilterOutput) FilterName() pulumi.StringOutput {
	return o.ApplyT(func(v *IpFilter) pulumi.StringOutput { return v.FilterName }).(pulumi.StringOutput)
}

// A list of IP Groups.
func (o IpFilterOutput) IpGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IpFilter) pulumi.StringArrayOutput { return v.IpGroups }).(pulumi.StringArrayOutput)
}

// Scope of resources covered by this IP Filter. Resource group must be set to 'multiple' in order to use this property. During update operations, note that the operation groups passed in will replace the list of existing operation groups (passing in an empty list will remove all operation groups) from the filter (in line with the behavior for `ipGroups` attribute).
func (o IpFilterOutput) OperationGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IpFilter) pulumi.StringArrayOutput { return v.OperationGroups }).(pulumi.StringArrayOutput)
}

// Scope of resources covered by this IP Filter. Available resource groups include `"management"` and `"multiple"`.
func (o IpFilterOutput) ResourceGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *IpFilter) pulumi.StringOutput { return v.ResourceGroup }).(pulumi.StringOutput)
}

// A CRN that specifies the scope of the IP Filter, specifically the organization or environment. Without specifying this property, the IP Filter would apply to the whole organization. For example, `"crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa"` or `data.confluent_organization.resource_name`.
func (o IpFilterOutput) ResourceScope() pulumi.StringOutput {
	return o.ApplyT(func(v *IpFilter) pulumi.StringOutput { return v.ResourceScope }).(pulumi.StringOutput)
}

type IpFilterArrayOutput struct{ *pulumi.OutputState }

func (IpFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpFilter)(nil)).Elem()
}

func (o IpFilterArrayOutput) ToIpFilterArrayOutput() IpFilterArrayOutput {
	return o
}

func (o IpFilterArrayOutput) ToIpFilterArrayOutputWithContext(ctx context.Context) IpFilterArrayOutput {
	return o
}

func (o IpFilterArrayOutput) Index(i pulumi.IntInput) IpFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpFilter {
		return vs[0].([]*IpFilter)[vs[1].(int)]
	}).(IpFilterOutput)
}

type IpFilterMapOutput struct{ *pulumi.OutputState }

func (IpFilterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpFilter)(nil)).Elem()
}

func (o IpFilterMapOutput) ToIpFilterMapOutput() IpFilterMapOutput {
	return o
}

func (o IpFilterMapOutput) ToIpFilterMapOutputWithContext(ctx context.Context) IpFilterMapOutput {
	return o
}

func (o IpFilterMapOutput) MapIndex(k pulumi.StringInput) IpFilterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpFilter {
		return vs[0].(map[string]*IpFilter)[vs[1].(string)]
	}).(IpFilterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpFilterInput)(nil)).Elem(), &IpFilter{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpFilterArrayInput)(nil)).Elem(), IpFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpFilterMapInput)(nil)).Elem(), IpFilterMap{})
	pulumi.RegisterOutputType(IpFilterOutput{})
	pulumi.RegisterOutputType(IpFilterArrayOutput{})
	pulumi.RegisterOutputType(IpFilterMapOutput{})
}

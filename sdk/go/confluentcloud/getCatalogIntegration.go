// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
//
// `CatalogIntegration` describes a Catalog Integration data source.
//
// ## Example Usage
//
// ### Option #1: Manage multiple Catalog Integrations in the same Pulumi Stack
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := confluentcloud.LookupCatalogIntegration(ctx, &confluentcloud.LookupCatalogIntegrationArgs{
//				Environment: confluentcloud.GetCatalogIntegrationEnvironment{
//					Id: staging.Id,
//				},
//				KafkaCluster: confluentcloud.GetCatalogIntegrationKafkaCluster{
//					Id: stagingConfluentKafkaCluster.Id,
//				},
//				Id: "tci-abc123",
//				Credentials: confluentcloud.GetCatalogIntegrationCredentials{
//					Key:    env_admin_tableflow_api_key.Id,
//					Secret: env_admin_tableflow_api_key.Secret,
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("retention-ms", example.RetentionMs)
//			return nil
//		})
//	}
//
// ```
//
// ### Option #2: Manage a single Catalog Integration in the same Pulumi Stack
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := confluentcloud.LookupCatalogIntegration(ctx, &confluentcloud.LookupCatalogIntegrationArgs{
//				Id: "tci-abc123",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("retention-ms", example.RetentionMs)
//			return nil
//		})
//	}
//
// ```
func LookupCatalogIntegration(ctx *pulumi.Context, args *LookupCatalogIntegrationArgs, opts ...pulumi.InvokeOption) (*LookupCatalogIntegrationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCatalogIntegrationResult
	err := ctx.Invoke("confluentcloud:index/getCatalogIntegration:getCatalogIntegration", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCatalogIntegration.
type LookupCatalogIntegrationArgs struct {
	Credentials *GetCatalogIntegrationCredentials `pulumi:"credentials"`
	Environment GetCatalogIntegrationEnvironment  `pulumi:"environment"`
	// The ID of the Catalog Integration, for example, `tci-abc123`.
	Id           string                            `pulumi:"id"`
	KafkaCluster GetCatalogIntegrationKafkaCluster `pulumi:"kafkaCluster"`
}

// A collection of values returned by getCatalogIntegration.
type LookupCatalogIntegrationResult struct {
	// (Optional Configuration Block) supports the following:
	AwsGlues    []GetCatalogIntegrationAwsGlue    `pulumi:"awsGlues"`
	Credentials *GetCatalogIntegrationCredentials `pulumi:"credentials"`
	// (Required String) The name of the catalog integration.
	DisplayName  string                            `pulumi:"displayName"`
	Environment  GetCatalogIntegrationEnvironment  `pulumi:"environment"`
	Id           string                            `pulumi:"id"`
	KafkaCluster GetCatalogIntegrationKafkaCluster `pulumi:"kafkaCluster"`
	// (Optional Configuration Block) supports the following:
	Snowflakes []GetCatalogIntegrationSnowflake `pulumi:"snowflakes"`
	// (Optional Boolean) Indicates whether the Catalog Integration should be suspended.
	Suspended bool `pulumi:"suspended"`
}

func LookupCatalogIntegrationOutput(ctx *pulumi.Context, args LookupCatalogIntegrationOutputArgs, opts ...pulumi.InvokeOption) LookupCatalogIntegrationResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupCatalogIntegrationResultOutput, error) {
			args := v.(LookupCatalogIntegrationArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("confluentcloud:index/getCatalogIntegration:getCatalogIntegration", args, LookupCatalogIntegrationResultOutput{}, options).(LookupCatalogIntegrationResultOutput), nil
		}).(LookupCatalogIntegrationResultOutput)
}

// A collection of arguments for invoking getCatalogIntegration.
type LookupCatalogIntegrationOutputArgs struct {
	Credentials GetCatalogIntegrationCredentialsPtrInput `pulumi:"credentials"`
	Environment GetCatalogIntegrationEnvironmentInput    `pulumi:"environment"`
	// The ID of the Catalog Integration, for example, `tci-abc123`.
	Id           pulumi.StringInput                     `pulumi:"id"`
	KafkaCluster GetCatalogIntegrationKafkaClusterInput `pulumi:"kafkaCluster"`
}

func (LookupCatalogIntegrationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCatalogIntegrationArgs)(nil)).Elem()
}

// A collection of values returned by getCatalogIntegration.
type LookupCatalogIntegrationResultOutput struct{ *pulumi.OutputState }

func (LookupCatalogIntegrationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCatalogIntegrationResult)(nil)).Elem()
}

func (o LookupCatalogIntegrationResultOutput) ToLookupCatalogIntegrationResultOutput() LookupCatalogIntegrationResultOutput {
	return o
}

func (o LookupCatalogIntegrationResultOutput) ToLookupCatalogIntegrationResultOutputWithContext(ctx context.Context) LookupCatalogIntegrationResultOutput {
	return o
}

// (Optional Configuration Block) supports the following:
func (o LookupCatalogIntegrationResultOutput) AwsGlues() GetCatalogIntegrationAwsGlueArrayOutput {
	return o.ApplyT(func(v LookupCatalogIntegrationResult) []GetCatalogIntegrationAwsGlue { return v.AwsGlues }).(GetCatalogIntegrationAwsGlueArrayOutput)
}

func (o LookupCatalogIntegrationResultOutput) Credentials() GetCatalogIntegrationCredentialsPtrOutput {
	return o.ApplyT(func(v LookupCatalogIntegrationResult) *GetCatalogIntegrationCredentials { return v.Credentials }).(GetCatalogIntegrationCredentialsPtrOutput)
}

// (Required String) The name of the catalog integration.
func (o LookupCatalogIntegrationResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCatalogIntegrationResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

func (o LookupCatalogIntegrationResultOutput) Environment() GetCatalogIntegrationEnvironmentOutput {
	return o.ApplyT(func(v LookupCatalogIntegrationResult) GetCatalogIntegrationEnvironment { return v.Environment }).(GetCatalogIntegrationEnvironmentOutput)
}

func (o LookupCatalogIntegrationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCatalogIntegrationResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupCatalogIntegrationResultOutput) KafkaCluster() GetCatalogIntegrationKafkaClusterOutput {
	return o.ApplyT(func(v LookupCatalogIntegrationResult) GetCatalogIntegrationKafkaCluster { return v.KafkaCluster }).(GetCatalogIntegrationKafkaClusterOutput)
}

// (Optional Configuration Block) supports the following:
func (o LookupCatalogIntegrationResultOutput) Snowflakes() GetCatalogIntegrationSnowflakeArrayOutput {
	return o.ApplyT(func(v LookupCatalogIntegrationResult) []GetCatalogIntegrationSnowflake { return v.Snowflakes }).(GetCatalogIntegrationSnowflakeArrayOutput)
}

// (Optional Boolean) Indicates whether the Catalog Integration should be suspended.
func (o LookupCatalogIntegrationResultOutput) Suspended() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCatalogIntegrationResult) bool { return v.Suspended }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCatalogIntegrationResultOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
//
// `IpGroup` provides an IP Group resource that enables creating, editing, and deleting IP Groups on Confluent Cloud.
//
// > **Note:** See [IP Filtering on Confluent Cloud](https://docs.confluent.io/cloud/current/security/access-control/ip-filtering/overview.html) for more details about the IP Filtering feature, its prerequisites, and its limitations.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := confluentcloud.NewIpGroup(ctx, "example", &confluentcloud.IpGroupArgs{
//				GroupName: pulumi.String("CorpNet"),
//				CidrBlocks: pulumi.StringArray{
//					pulumi.String("192.168.0.0/24"),
//					pulumi.String("192.168.7.0/24"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// You can import an IP Group by using IP Group ID, for example:
//
// $ export CONFLUENT_CLOUD_API_KEY="<cloud_api_key>"
//
// $ export CONFLUENT_CLOUD_API_SECRET="<cloud_api_secret>"
//
// ```sh
// $ pulumi import confluentcloud:index/ipGroup:IpGroup example ipg-abc123
// ```
//
// !> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
type IpGroup struct {
	pulumi.CustomResourceState

	// A list of CIDRs.
	CidrBlocks pulumi.StringArrayOutput `pulumi:"cidrBlocks"`
	// A human-readable name for an IP Group. Can contain any unicode letter or number, the ASCII space character, or any of the following special characters: `[`, `]`, `|`, `&`, `+`, `-`, `_`, `/`, `.`, `,`.
	GroupName pulumi.StringOutput `pulumi:"groupName"`
}

// NewIpGroup registers a new resource with the given unique name, arguments, and options.
func NewIpGroup(ctx *pulumi.Context,
	name string, args *IpGroupArgs, opts ...pulumi.ResourceOption) (*IpGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CidrBlocks == nil {
		return nil, errors.New("invalid value for required argument 'CidrBlocks'")
	}
	if args.GroupName == nil {
		return nil, errors.New("invalid value for required argument 'GroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IpGroup
	err := ctx.RegisterResource("confluentcloud:index/ipGroup:IpGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpGroup gets an existing IpGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpGroupState, opts ...pulumi.ResourceOption) (*IpGroup, error) {
	var resource IpGroup
	err := ctx.ReadResource("confluentcloud:index/ipGroup:IpGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpGroup resources.
type ipGroupState struct {
	// A list of CIDRs.
	CidrBlocks []string `pulumi:"cidrBlocks"`
	// A human-readable name for an IP Group. Can contain any unicode letter or number, the ASCII space character, or any of the following special characters: `[`, `]`, `|`, `&`, `+`, `-`, `_`, `/`, `.`, `,`.
	GroupName *string `pulumi:"groupName"`
}

type IpGroupState struct {
	// A list of CIDRs.
	CidrBlocks pulumi.StringArrayInput
	// A human-readable name for an IP Group. Can contain any unicode letter or number, the ASCII space character, or any of the following special characters: `[`, `]`, `|`, `&`, `+`, `-`, `_`, `/`, `.`, `,`.
	GroupName pulumi.StringPtrInput
}

func (IpGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipGroupState)(nil)).Elem()
}

type ipGroupArgs struct {
	// A list of CIDRs.
	CidrBlocks []string `pulumi:"cidrBlocks"`
	// A human-readable name for an IP Group. Can contain any unicode letter or number, the ASCII space character, or any of the following special characters: `[`, `]`, `|`, `&`, `+`, `-`, `_`, `/`, `.`, `,`.
	GroupName string `pulumi:"groupName"`
}

// The set of arguments for constructing a IpGroup resource.
type IpGroupArgs struct {
	// A list of CIDRs.
	CidrBlocks pulumi.StringArrayInput
	// A human-readable name for an IP Group. Can contain any unicode letter or number, the ASCII space character, or any of the following special characters: `[`, `]`, `|`, `&`, `+`, `-`, `_`, `/`, `.`, `,`.
	GroupName pulumi.StringInput
}

func (IpGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipGroupArgs)(nil)).Elem()
}

type IpGroupInput interface {
	pulumi.Input

	ToIpGroupOutput() IpGroupOutput
	ToIpGroupOutputWithContext(ctx context.Context) IpGroupOutput
}

func (*IpGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**IpGroup)(nil)).Elem()
}

func (i *IpGroup) ToIpGroupOutput() IpGroupOutput {
	return i.ToIpGroupOutputWithContext(context.Background())
}

func (i *IpGroup) ToIpGroupOutputWithContext(ctx context.Context) IpGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpGroupOutput)
}

// IpGroupArrayInput is an input type that accepts IpGroupArray and IpGroupArrayOutput values.
// You can construct a concrete instance of `IpGroupArrayInput` via:
//
//	IpGroupArray{ IpGroupArgs{...} }
type IpGroupArrayInput interface {
	pulumi.Input

	ToIpGroupArrayOutput() IpGroupArrayOutput
	ToIpGroupArrayOutputWithContext(context.Context) IpGroupArrayOutput
}

type IpGroupArray []IpGroupInput

func (IpGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpGroup)(nil)).Elem()
}

func (i IpGroupArray) ToIpGroupArrayOutput() IpGroupArrayOutput {
	return i.ToIpGroupArrayOutputWithContext(context.Background())
}

func (i IpGroupArray) ToIpGroupArrayOutputWithContext(ctx context.Context) IpGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpGroupArrayOutput)
}

// IpGroupMapInput is an input type that accepts IpGroupMap and IpGroupMapOutput values.
// You can construct a concrete instance of `IpGroupMapInput` via:
//
//	IpGroupMap{ "key": IpGroupArgs{...} }
type IpGroupMapInput interface {
	pulumi.Input

	ToIpGroupMapOutput() IpGroupMapOutput
	ToIpGroupMapOutputWithContext(context.Context) IpGroupMapOutput
}

type IpGroupMap map[string]IpGroupInput

func (IpGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpGroup)(nil)).Elem()
}

func (i IpGroupMap) ToIpGroupMapOutput() IpGroupMapOutput {
	return i.ToIpGroupMapOutputWithContext(context.Background())
}

func (i IpGroupMap) ToIpGroupMapOutputWithContext(ctx context.Context) IpGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpGroupMapOutput)
}

type IpGroupOutput struct{ *pulumi.OutputState }

func (IpGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpGroup)(nil)).Elem()
}

func (o IpGroupOutput) ToIpGroupOutput() IpGroupOutput {
	return o
}

func (o IpGroupOutput) ToIpGroupOutputWithContext(ctx context.Context) IpGroupOutput {
	return o
}

// A list of CIDRs.
func (o IpGroupOutput) CidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IpGroup) pulumi.StringArrayOutput { return v.CidrBlocks }).(pulumi.StringArrayOutput)
}

// A human-readable name for an IP Group. Can contain any unicode letter or number, the ASCII space character, or any of the following special characters: `[`, `]`, `|`, `&`, `+`, `-`, `_`, `/`, `.`, `,`.
func (o IpGroupOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *IpGroup) pulumi.StringOutput { return v.GroupName }).(pulumi.StringOutput)
}

type IpGroupArrayOutput struct{ *pulumi.OutputState }

func (IpGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpGroup)(nil)).Elem()
}

func (o IpGroupArrayOutput) ToIpGroupArrayOutput() IpGroupArrayOutput {
	return o
}

func (o IpGroupArrayOutput) ToIpGroupArrayOutputWithContext(ctx context.Context) IpGroupArrayOutput {
	return o
}

func (o IpGroupArrayOutput) Index(i pulumi.IntInput) IpGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpGroup {
		return vs[0].([]*IpGroup)[vs[1].(int)]
	}).(IpGroupOutput)
}

type IpGroupMapOutput struct{ *pulumi.OutputState }

func (IpGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpGroup)(nil)).Elem()
}

func (o IpGroupMapOutput) ToIpGroupMapOutput() IpGroupMapOutput {
	return o
}

func (o IpGroupMapOutput) ToIpGroupMapOutputWithContext(ctx context.Context) IpGroupMapOutput {
	return o
}

func (o IpGroupMapOutput) MapIndex(k pulumi.StringInput) IpGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpGroup {
		return vs[0].(map[string]*IpGroup)[vs[1].(string)]
	}).(IpGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpGroupInput)(nil)).Elem(), &IpGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpGroupArrayInput)(nil)).Elem(), IpGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpGroupMapInput)(nil)).Elem(), IpGroupMap{})
	pulumi.RegisterOutputType(IpGroupOutput{})
	pulumi.RegisterOutputType(IpGroupArrayOutput{})
	pulumi.RegisterOutputType(IpGroupMapOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupSchemaRegistryKek(ctx *pulumi.Context, args *LookupSchemaRegistryKekArgs, opts ...pulumi.InvokeOption) (*LookupSchemaRegistryKekResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSchemaRegistryKekResult
	err := ctx.Invoke("confluentcloud:index/getSchemaRegistryKek:getSchemaRegistryKek", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSchemaRegistryKek.
type LookupSchemaRegistryKekArgs struct {
	Credentials           *GetSchemaRegistryKekCredentials           `pulumi:"credentials"`
	Name                  string                                     `pulumi:"name"`
	RestEndpoint          *string                                    `pulumi:"restEndpoint"`
	SchemaRegistryCluster *GetSchemaRegistryKekSchemaRegistryCluster `pulumi:"schemaRegistryCluster"`
}

// A collection of values returned by getSchemaRegistryKek.
type LookupSchemaRegistryKekResult struct {
	Credentials *GetSchemaRegistryKekCredentials `pulumi:"credentials"`
	Doc         string                           `pulumi:"doc"`
	HardDelete  bool                             `pulumi:"hardDelete"`
	// The provider-assigned unique ID for this managed resource.
	Id                    string                                     `pulumi:"id"`
	KmsKeyId              string                                     `pulumi:"kmsKeyId"`
	KmsType               string                                     `pulumi:"kmsType"`
	Name                  string                                     `pulumi:"name"`
	Properties            map[string]string                          `pulumi:"properties"`
	RestEndpoint          *string                                    `pulumi:"restEndpoint"`
	SchemaRegistryCluster *GetSchemaRegistryKekSchemaRegistryCluster `pulumi:"schemaRegistryCluster"`
	Shared                bool                                       `pulumi:"shared"`
}

func LookupSchemaRegistryKekOutput(ctx *pulumi.Context, args LookupSchemaRegistryKekOutputArgs, opts ...pulumi.InvokeOption) LookupSchemaRegistryKekResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSchemaRegistryKekResult, error) {
			args := v.(LookupSchemaRegistryKekArgs)
			r, err := LookupSchemaRegistryKek(ctx, &args, opts...)
			var s LookupSchemaRegistryKekResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSchemaRegistryKekResultOutput)
}

// A collection of arguments for invoking getSchemaRegistryKek.
type LookupSchemaRegistryKekOutputArgs struct {
	Credentials           GetSchemaRegistryKekCredentialsPtrInput           `pulumi:"credentials"`
	Name                  pulumi.StringInput                                `pulumi:"name"`
	RestEndpoint          pulumi.StringPtrInput                             `pulumi:"restEndpoint"`
	SchemaRegistryCluster GetSchemaRegistryKekSchemaRegistryClusterPtrInput `pulumi:"schemaRegistryCluster"`
}

func (LookupSchemaRegistryKekOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSchemaRegistryKekArgs)(nil)).Elem()
}

// A collection of values returned by getSchemaRegistryKek.
type LookupSchemaRegistryKekResultOutput struct{ *pulumi.OutputState }

func (LookupSchemaRegistryKekResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSchemaRegistryKekResult)(nil)).Elem()
}

func (o LookupSchemaRegistryKekResultOutput) ToLookupSchemaRegistryKekResultOutput() LookupSchemaRegistryKekResultOutput {
	return o
}

func (o LookupSchemaRegistryKekResultOutput) ToLookupSchemaRegistryKekResultOutputWithContext(ctx context.Context) LookupSchemaRegistryKekResultOutput {
	return o
}

func (o LookupSchemaRegistryKekResultOutput) Credentials() GetSchemaRegistryKekCredentialsPtrOutput {
	return o.ApplyT(func(v LookupSchemaRegistryKekResult) *GetSchemaRegistryKekCredentials { return v.Credentials }).(GetSchemaRegistryKekCredentialsPtrOutput)
}

func (o LookupSchemaRegistryKekResultOutput) Doc() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaRegistryKekResult) string { return v.Doc }).(pulumi.StringOutput)
}

func (o LookupSchemaRegistryKekResultOutput) HardDelete() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSchemaRegistryKekResult) bool { return v.HardDelete }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSchemaRegistryKekResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaRegistryKekResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupSchemaRegistryKekResultOutput) KmsKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaRegistryKekResult) string { return v.KmsKeyId }).(pulumi.StringOutput)
}

func (o LookupSchemaRegistryKekResultOutput) KmsType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaRegistryKekResult) string { return v.KmsType }).(pulumi.StringOutput)
}

func (o LookupSchemaRegistryKekResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaRegistryKekResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupSchemaRegistryKekResultOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSchemaRegistryKekResult) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

func (o LookupSchemaRegistryKekResultOutput) RestEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSchemaRegistryKekResult) *string { return v.RestEndpoint }).(pulumi.StringPtrOutput)
}

func (o LookupSchemaRegistryKekResultOutput) SchemaRegistryCluster() GetSchemaRegistryKekSchemaRegistryClusterPtrOutput {
	return o.ApplyT(func(v LookupSchemaRegistryKekResult) *GetSchemaRegistryKekSchemaRegistryCluster {
		return v.SchemaRegistryCluster
	}).(GetSchemaRegistryKekSchemaRegistryClusterPtrOutput)
}

func (o LookupSchemaRegistryKekResultOutput) Shared() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSchemaRegistryKekResult) bool { return v.Shared }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSchemaRegistryKekResultOutput{})
}

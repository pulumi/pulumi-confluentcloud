// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
//
// `SchemaRegistryKek` describes a Schema Registry Key Encryption Key (KEK) data source.
//
// ## Example Usage
//
// ### Option #1: Manage multiple Schema Registry clusters in the same Pulumi Stack
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := confluentcloud.LookupSchemaRegistryKek(ctx, &confluentcloud.LookupSchemaRegistryKekArgs{
//				SchemaRegistryCluster: confluentcloud.GetSchemaRegistryKekSchemaRegistryCluster{
//					Id: essentials.Id,
//				},
//				RestEndpoint: pulumi.StringRef(essentials.RestEndpoint),
//				Credentials: confluentcloud.GetSchemaRegistryKekCredentials{
//					Key:    "<Schema Registry API Key for data.confluent_schema_registry_cluster.essentials>",
//					Secret: "<Schema Registry API Secret for data.confluent_schema_registry_cluster.essentials>",
//				},
//				Name: "my_key",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Option #2: Manage a single Schema Registry cluster in the same Pulumi Stack
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := confluentcloud.LookupSchemaRegistryKek(ctx, &confluentcloud.LookupSchemaRegistryKekArgs{
//				Name: "my_key",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSchemaRegistryKek(ctx *pulumi.Context, args *LookupSchemaRegistryKekArgs, opts ...pulumi.InvokeOption) (*LookupSchemaRegistryKekResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSchemaRegistryKekResult
	err := ctx.Invoke("confluentcloud:index/getSchemaRegistryKek:getSchemaRegistryKek", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSchemaRegistryKek.
type LookupSchemaRegistryKekArgs struct {
	Credentials *GetSchemaRegistryKekCredentials `pulumi:"credentials"`
	// The name for the KEK.
	//
	// > **Note:** A Schema Registry API key consists of a key and a secret. Schema Registry API keys are required to interact with Schema Registry clusters in Confluent Cloud. Each Schema Registry API key is valid for one specific Schema Registry cluster.
	Name string `pulumi:"name"`
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          *string                                    `pulumi:"restEndpoint"`
	SchemaRegistryCluster *GetSchemaRegistryKekSchemaRegistryCluster `pulumi:"schemaRegistryCluster"`
}

// A collection of values returned by getSchemaRegistryKek.
type LookupSchemaRegistryKekResult struct {
	Credentials *GetSchemaRegistryKekCredentials `pulumi:"credentials"`
	// (Optional String) The optional description for the KEK.
	Doc string `pulumi:"doc"`
	// (Optional Boolean) The optional flag to control whether a kek should be soft or hard deleted. Defaults to `false`.
	HardDelete bool `pulumi:"hardDelete"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// (Required String) The ID of the key from KMS.
	// - When using the AWS KMS, this is an ARN, for example, `arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789abc`.
	// - When using the Azure Key Vault, this is a Key Identifier (URI), for example, `https://test-keyvault1.vault.azure.net/keys/test-key1/1234567890abcdef1234567890abcdef`.
	// - When using the GCP KMS, this is a resource name, for example, `projects/test-project1/locations/us-central1/keyRings/test-keyRing1/cryptoKeys/test-key1`.
	KmsKeyId string `pulumi:"kmsKeyId"`
	// (Required String) The type of Key Management Service (KMS). The supported values include `aws-kms`, `azure-kms`, and `gcp-kms`. Additionally, custom KMS types are supported as well.
	KmsType string `pulumi:"kmsType"`
	// (Required String) The custom property name (for example, `KeyUsage`).
	Name string `pulumi:"name"`
	// (Optional Map) The custom properties to set (for example, `KeyUsage=ENCRYPT_DECRYPT`, `KeyState=Enabled`):
	Properties            map[string]string                          `pulumi:"properties"`
	RestEndpoint          *string                                    `pulumi:"restEndpoint"`
	SchemaRegistryCluster *GetSchemaRegistryKekSchemaRegistryCluster `pulumi:"schemaRegistryCluster"`
	// (Optional Boolean) The optional flag to control whether the DEK Registry has shared access to the KMS. Defaults to `false`.
	Shared bool `pulumi:"shared"`
}

func LookupSchemaRegistryKekOutput(ctx *pulumi.Context, args LookupSchemaRegistryKekOutputArgs, opts ...pulumi.InvokeOption) LookupSchemaRegistryKekResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSchemaRegistryKekResultOutput, error) {
			args := v.(LookupSchemaRegistryKekArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupSchemaRegistryKekResult
			secret, err := ctx.InvokePackageRaw("confluentcloud:index/getSchemaRegistryKek:getSchemaRegistryKek", args, &rv, "", opts...)
			if err != nil {
				return LookupSchemaRegistryKekResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupSchemaRegistryKekResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupSchemaRegistryKekResultOutput), nil
			}
			return output, nil
		}).(LookupSchemaRegistryKekResultOutput)
}

// A collection of arguments for invoking getSchemaRegistryKek.
type LookupSchemaRegistryKekOutputArgs struct {
	Credentials GetSchemaRegistryKekCredentialsPtrInput `pulumi:"credentials"`
	// The name for the KEK.
	//
	// > **Note:** A Schema Registry API key consists of a key and a secret. Schema Registry API keys are required to interact with Schema Registry clusters in Confluent Cloud. Each Schema Registry API key is valid for one specific Schema Registry cluster.
	Name pulumi.StringInput `pulumi:"name"`
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          pulumi.StringPtrInput                             `pulumi:"restEndpoint"`
	SchemaRegistryCluster GetSchemaRegistryKekSchemaRegistryClusterPtrInput `pulumi:"schemaRegistryCluster"`
}

func (LookupSchemaRegistryKekOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSchemaRegistryKekArgs)(nil)).Elem()
}

// A collection of values returned by getSchemaRegistryKek.
type LookupSchemaRegistryKekResultOutput struct{ *pulumi.OutputState }

func (LookupSchemaRegistryKekResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSchemaRegistryKekResult)(nil)).Elem()
}

func (o LookupSchemaRegistryKekResultOutput) ToLookupSchemaRegistryKekResultOutput() LookupSchemaRegistryKekResultOutput {
	return o
}

func (o LookupSchemaRegistryKekResultOutput) ToLookupSchemaRegistryKekResultOutputWithContext(ctx context.Context) LookupSchemaRegistryKekResultOutput {
	return o
}

func (o LookupSchemaRegistryKekResultOutput) Credentials() GetSchemaRegistryKekCredentialsPtrOutput {
	return o.ApplyT(func(v LookupSchemaRegistryKekResult) *GetSchemaRegistryKekCredentials { return v.Credentials }).(GetSchemaRegistryKekCredentialsPtrOutput)
}

// (Optional String) The optional description for the KEK.
func (o LookupSchemaRegistryKekResultOutput) Doc() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaRegistryKekResult) string { return v.Doc }).(pulumi.StringOutput)
}

// (Optional Boolean) The optional flag to control whether a kek should be soft or hard deleted. Defaults to `false`.
func (o LookupSchemaRegistryKekResultOutput) HardDelete() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSchemaRegistryKekResult) bool { return v.HardDelete }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSchemaRegistryKekResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaRegistryKekResult) string { return v.Id }).(pulumi.StringOutput)
}

// (Required String) The ID of the key from KMS.
// - When using the AWS KMS, this is an ARN, for example, `arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789abc`.
// - When using the Azure Key Vault, this is a Key Identifier (URI), for example, `https://test-keyvault1.vault.azure.net/keys/test-key1/1234567890abcdef1234567890abcdef`.
// - When using the GCP KMS, this is a resource name, for example, `projects/test-project1/locations/us-central1/keyRings/test-keyRing1/cryptoKeys/test-key1`.
func (o LookupSchemaRegistryKekResultOutput) KmsKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaRegistryKekResult) string { return v.KmsKeyId }).(pulumi.StringOutput)
}

// (Required String) The type of Key Management Service (KMS). The supported values include `aws-kms`, `azure-kms`, and `gcp-kms`. Additionally, custom KMS types are supported as well.
func (o LookupSchemaRegistryKekResultOutput) KmsType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaRegistryKekResult) string { return v.KmsType }).(pulumi.StringOutput)
}

// (Required String) The custom property name (for example, `KeyUsage`).
func (o LookupSchemaRegistryKekResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaRegistryKekResult) string { return v.Name }).(pulumi.StringOutput)
}

// (Optional Map) The custom properties to set (for example, `KeyUsage=ENCRYPT_DECRYPT`, `KeyState=Enabled`):
func (o LookupSchemaRegistryKekResultOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSchemaRegistryKekResult) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

func (o LookupSchemaRegistryKekResultOutput) RestEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSchemaRegistryKekResult) *string { return v.RestEndpoint }).(pulumi.StringPtrOutput)
}

func (o LookupSchemaRegistryKekResultOutput) SchemaRegistryCluster() GetSchemaRegistryKekSchemaRegistryClusterPtrOutput {
	return o.ApplyT(func(v LookupSchemaRegistryKekResult) *GetSchemaRegistryKekSchemaRegistryCluster {
		return v.SchemaRegistryCluster
	}).(GetSchemaRegistryKekSchemaRegistryClusterPtrOutput)
}

// (Optional Boolean) The optional flag to control whether the DEK Registry has shared access to the KMS. Defaults to `false`.
func (o LookupSchemaRegistryKekResultOutput) Shared() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSchemaRegistryKekResult) bool { return v.Shared }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSchemaRegistryKekResultOutput{})
}

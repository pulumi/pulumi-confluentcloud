// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// You can import a Kafka cluster config by using the Kafka cluster ID, for example:
//
// Option #1: Manage multiple Kafka clusters in the same Terraform workspace
//
// $ export IMPORT_KAFKA_API_KEY="<kafka_api_key>"
//
// $ export IMPORT_KAFKA_API_SECRET="<kafka_api_secret>"
//
// $ export IMPORT_KAFKA_REST_ENDPOINT="<kafka_rest_endpoint>"
//
// ```sh
// $ pulumi import confluentcloud:index/kafkaClusterConfig:KafkaClusterConfig test lkc-abc123
// ```
//
// Option #2: Manage a single Kafka cluster in the same Terraform workspace
//
// ```sh
// $ pulumi import confluentcloud:index/kafkaClusterConfig:KafkaClusterConfig test lkc-abc123
// ```
//
// !> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
type KafkaClusterConfig struct {
	pulumi.CustomResourceState

	// The custom cluster settings to set:
	Config pulumi.StringMapOutput `pulumi:"config"`
	// The Cluster API Credentials.
	Credentials  KafkaClusterConfigCredentialsPtrOutput  `pulumi:"credentials"`
	KafkaCluster KafkaClusterConfigKafkaClusterPtrOutput `pulumi:"kafkaCluster"`
	// The REST endpoint of the Dedicated Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint pulumi.StringPtrOutput `pulumi:"restEndpoint"`
}

// NewKafkaClusterConfig registers a new resource with the given unique name, arguments, and options.
func NewKafkaClusterConfig(ctx *pulumi.Context,
	name string, args *KafkaClusterConfigArgs, opts ...pulumi.ResourceOption) (*KafkaClusterConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	if args.Credentials != nil {
		args.Credentials = pulumi.ToSecret(args.Credentials).(KafkaClusterConfigCredentialsPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"credentials",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KafkaClusterConfig
	err := ctx.RegisterResource("confluentcloud:index/kafkaClusterConfig:KafkaClusterConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaClusterConfig gets an existing KafkaClusterConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaClusterConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaClusterConfigState, opts ...pulumi.ResourceOption) (*KafkaClusterConfig, error) {
	var resource KafkaClusterConfig
	err := ctx.ReadResource("confluentcloud:index/kafkaClusterConfig:KafkaClusterConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaClusterConfig resources.
type kafkaClusterConfigState struct {
	// The custom cluster settings to set:
	Config map[string]string `pulumi:"config"`
	// The Cluster API Credentials.
	Credentials  *KafkaClusterConfigCredentials  `pulumi:"credentials"`
	KafkaCluster *KafkaClusterConfigKafkaCluster `pulumi:"kafkaCluster"`
	// The REST endpoint of the Dedicated Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint *string `pulumi:"restEndpoint"`
}

type KafkaClusterConfigState struct {
	// The custom cluster settings to set:
	Config pulumi.StringMapInput
	// The Cluster API Credentials.
	Credentials  KafkaClusterConfigCredentialsPtrInput
	KafkaCluster KafkaClusterConfigKafkaClusterPtrInput
	// The REST endpoint of the Dedicated Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint pulumi.StringPtrInput
}

func (KafkaClusterConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaClusterConfigState)(nil)).Elem()
}

type kafkaClusterConfigArgs struct {
	// The custom cluster settings to set:
	Config map[string]string `pulumi:"config"`
	// The Cluster API Credentials.
	Credentials  *KafkaClusterConfigCredentials  `pulumi:"credentials"`
	KafkaCluster *KafkaClusterConfigKafkaCluster `pulumi:"kafkaCluster"`
	// The REST endpoint of the Dedicated Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint *string `pulumi:"restEndpoint"`
}

// The set of arguments for constructing a KafkaClusterConfig resource.
type KafkaClusterConfigArgs struct {
	// The custom cluster settings to set:
	Config pulumi.StringMapInput
	// The Cluster API Credentials.
	Credentials  KafkaClusterConfigCredentialsPtrInput
	KafkaCluster KafkaClusterConfigKafkaClusterPtrInput
	// The REST endpoint of the Dedicated Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint pulumi.StringPtrInput
}

func (KafkaClusterConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaClusterConfigArgs)(nil)).Elem()
}

type KafkaClusterConfigInput interface {
	pulumi.Input

	ToKafkaClusterConfigOutput() KafkaClusterConfigOutput
	ToKafkaClusterConfigOutputWithContext(ctx context.Context) KafkaClusterConfigOutput
}

func (*KafkaClusterConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaClusterConfig)(nil)).Elem()
}

func (i *KafkaClusterConfig) ToKafkaClusterConfigOutput() KafkaClusterConfigOutput {
	return i.ToKafkaClusterConfigOutputWithContext(context.Background())
}

func (i *KafkaClusterConfig) ToKafkaClusterConfigOutputWithContext(ctx context.Context) KafkaClusterConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterConfigOutput)
}

// KafkaClusterConfigArrayInput is an input type that accepts KafkaClusterConfigArray and KafkaClusterConfigArrayOutput values.
// You can construct a concrete instance of `KafkaClusterConfigArrayInput` via:
//
//	KafkaClusterConfigArray{ KafkaClusterConfigArgs{...} }
type KafkaClusterConfigArrayInput interface {
	pulumi.Input

	ToKafkaClusterConfigArrayOutput() KafkaClusterConfigArrayOutput
	ToKafkaClusterConfigArrayOutputWithContext(context.Context) KafkaClusterConfigArrayOutput
}

type KafkaClusterConfigArray []KafkaClusterConfigInput

func (KafkaClusterConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaClusterConfig)(nil)).Elem()
}

func (i KafkaClusterConfigArray) ToKafkaClusterConfigArrayOutput() KafkaClusterConfigArrayOutput {
	return i.ToKafkaClusterConfigArrayOutputWithContext(context.Background())
}

func (i KafkaClusterConfigArray) ToKafkaClusterConfigArrayOutputWithContext(ctx context.Context) KafkaClusterConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterConfigArrayOutput)
}

// KafkaClusterConfigMapInput is an input type that accepts KafkaClusterConfigMap and KafkaClusterConfigMapOutput values.
// You can construct a concrete instance of `KafkaClusterConfigMapInput` via:
//
//	KafkaClusterConfigMap{ "key": KafkaClusterConfigArgs{...} }
type KafkaClusterConfigMapInput interface {
	pulumi.Input

	ToKafkaClusterConfigMapOutput() KafkaClusterConfigMapOutput
	ToKafkaClusterConfigMapOutputWithContext(context.Context) KafkaClusterConfigMapOutput
}

type KafkaClusterConfigMap map[string]KafkaClusterConfigInput

func (KafkaClusterConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaClusterConfig)(nil)).Elem()
}

func (i KafkaClusterConfigMap) ToKafkaClusterConfigMapOutput() KafkaClusterConfigMapOutput {
	return i.ToKafkaClusterConfigMapOutputWithContext(context.Background())
}

func (i KafkaClusterConfigMap) ToKafkaClusterConfigMapOutputWithContext(ctx context.Context) KafkaClusterConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterConfigMapOutput)
}

type KafkaClusterConfigOutput struct{ *pulumi.OutputState }

func (KafkaClusterConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaClusterConfig)(nil)).Elem()
}

func (o KafkaClusterConfigOutput) ToKafkaClusterConfigOutput() KafkaClusterConfigOutput {
	return o
}

func (o KafkaClusterConfigOutput) ToKafkaClusterConfigOutputWithContext(ctx context.Context) KafkaClusterConfigOutput {
	return o
}

// The custom cluster settings to set:
func (o KafkaClusterConfigOutput) Config() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KafkaClusterConfig) pulumi.StringMapOutput { return v.Config }).(pulumi.StringMapOutput)
}

// The Cluster API Credentials.
func (o KafkaClusterConfigOutput) Credentials() KafkaClusterConfigCredentialsPtrOutput {
	return o.ApplyT(func(v *KafkaClusterConfig) KafkaClusterConfigCredentialsPtrOutput { return v.Credentials }).(KafkaClusterConfigCredentialsPtrOutput)
}

func (o KafkaClusterConfigOutput) KafkaCluster() KafkaClusterConfigKafkaClusterPtrOutput {
	return o.ApplyT(func(v *KafkaClusterConfig) KafkaClusterConfigKafkaClusterPtrOutput { return v.KafkaCluster }).(KafkaClusterConfigKafkaClusterPtrOutput)
}

// The REST endpoint of the Dedicated Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
func (o KafkaClusterConfigOutput) RestEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaClusterConfig) pulumi.StringPtrOutput { return v.RestEndpoint }).(pulumi.StringPtrOutput)
}

type KafkaClusterConfigArrayOutput struct{ *pulumi.OutputState }

func (KafkaClusterConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaClusterConfig)(nil)).Elem()
}

func (o KafkaClusterConfigArrayOutput) ToKafkaClusterConfigArrayOutput() KafkaClusterConfigArrayOutput {
	return o
}

func (o KafkaClusterConfigArrayOutput) ToKafkaClusterConfigArrayOutputWithContext(ctx context.Context) KafkaClusterConfigArrayOutput {
	return o
}

func (o KafkaClusterConfigArrayOutput) Index(i pulumi.IntInput) KafkaClusterConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaClusterConfig {
		return vs[0].([]*KafkaClusterConfig)[vs[1].(int)]
	}).(KafkaClusterConfigOutput)
}

type KafkaClusterConfigMapOutput struct{ *pulumi.OutputState }

func (KafkaClusterConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaClusterConfig)(nil)).Elem()
}

func (o KafkaClusterConfigMapOutput) ToKafkaClusterConfigMapOutput() KafkaClusterConfigMapOutput {
	return o
}

func (o KafkaClusterConfigMapOutput) ToKafkaClusterConfigMapOutputWithContext(ctx context.Context) KafkaClusterConfigMapOutput {
	return o
}

func (o KafkaClusterConfigMapOutput) MapIndex(k pulumi.StringInput) KafkaClusterConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaClusterConfig {
		return vs[0].(map[string]*KafkaClusterConfig)[vs[1].(string)]
	}).(KafkaClusterConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaClusterConfigInput)(nil)).Elem(), &KafkaClusterConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaClusterConfigArrayInput)(nil)).Elem(), KafkaClusterConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaClusterConfigMapInput)(nil)).Elem(), KafkaClusterConfigMap{})
	pulumi.RegisterOutputType(KafkaClusterConfigOutput{})
	pulumi.RegisterOutputType(KafkaClusterConfigArrayOutput{})
	pulumi.RegisterOutputType(KafkaClusterConfigMapOutput{})
}

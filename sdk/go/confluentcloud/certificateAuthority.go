// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
//
// `CertificateAuthority` provides a Certificate Authority resource that enables creating, editing, and deleting Certificate Authorities on Confluent Cloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := confluentcloud.NewCertificateAuthority(ctx, "main", &confluentcloud.CertificateAuthorityArgs{
//				DisplayName:              pulumi.String("my_certificate_authority"),
//				Description:              pulumi.String("description"),
//				CertificateChainFilename: pulumi.String("certificate.pem"),
//				CertificateChain:         pulumi.String("***REDACTED***"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// You can import a Certificate Authority by using Certificate Authority ID, for example:
//
// $ export CONFLUENT_CLOUD_API_KEY="<cloud_api_key>"
//
// $ export CONFLUENT_CLOUD_API_SECRET="<cloud_api_secret>"
//
// ```sh
// $ pulumi import confluentcloud:index/certificateAuthority:CertificateAuthority main op-abc123
// ```
//
// !> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
type CertificateAuthority struct {
	pulumi.CustomResourceState

	// A PEM encoded string containing the signing certificate chain.
	CertificateChain pulumi.StringOutput `pulumi:"certificateChain"`
	// The name of the certificate file.
	CertificateChainFilename pulumi.StringOutput `pulumi:"certificateChainFilename"`
	// A PEM encoded string containing the CRL for this certificate authority.
	CrlChain pulumi.StringPtrOutput `pulumi:"crlChain"`
	// (Optional String) The source specifies whether the Certificate Revocation List (CRL) is updated from either local file uploaded (LOCAL) or from url of CRL (URL).
	CrlSource pulumi.StringOutput `pulumi:"crlSource"`
	// (Optional String) The timestamp for when CRL was last updated.
	CrlUpdatedAt pulumi.StringOutput `pulumi:"crlUpdatedAt"`
	// The url from which to fetch the CRL for the certificate authority.
	CrlUrl pulumi.StringPtrOutput `pulumi:"crlUrl"`
	// A description of the Certificate Authority.
	Description pulumi.StringOutput `pulumi:"description"`
	// The name of the Certificate Authority.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Required List of Strings) The expiration dates of certificates in the chain.
	ExpirationDates pulumi.StringArrayOutput `pulumi:"expirationDates"`
	// (Required List of Strings) The fingerprints for each certificate in the certificate chain.
	Fingerprints pulumi.StringArrayOutput `pulumi:"fingerprints"`
	// (Required List of Strings) The serial numbers for each certificate in the certificate chain.
	SerialNumbers pulumi.StringArrayOutput `pulumi:"serialNumbers"`
}

// NewCertificateAuthority registers a new resource with the given unique name, arguments, and options.
func NewCertificateAuthority(ctx *pulumi.Context,
	name string, args *CertificateAuthorityArgs, opts ...pulumi.ResourceOption) (*CertificateAuthority, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateChain == nil {
		return nil, errors.New("invalid value for required argument 'CertificateChain'")
	}
	if args.CertificateChainFilename == nil {
		return nil, errors.New("invalid value for required argument 'CertificateChainFilename'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.CertificateChain != nil {
		args.CertificateChain = pulumi.ToSecret(args.CertificateChain).(pulumi.StringInput)
	}
	if args.CrlChain != nil {
		args.CrlChain = pulumi.ToSecret(args.CrlChain).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"certificateChain",
		"crlChain",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CertificateAuthority
	err := ctx.RegisterResource("confluentcloud:index/certificateAuthority:CertificateAuthority", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificateAuthority gets an existing CertificateAuthority resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificateAuthority(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateAuthorityState, opts ...pulumi.ResourceOption) (*CertificateAuthority, error) {
	var resource CertificateAuthority
	err := ctx.ReadResource("confluentcloud:index/certificateAuthority:CertificateAuthority", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CertificateAuthority resources.
type certificateAuthorityState struct {
	// A PEM encoded string containing the signing certificate chain.
	CertificateChain *string `pulumi:"certificateChain"`
	// The name of the certificate file.
	CertificateChainFilename *string `pulumi:"certificateChainFilename"`
	// A PEM encoded string containing the CRL for this certificate authority.
	CrlChain *string `pulumi:"crlChain"`
	// (Optional String) The source specifies whether the Certificate Revocation List (CRL) is updated from either local file uploaded (LOCAL) or from url of CRL (URL).
	CrlSource *string `pulumi:"crlSource"`
	// (Optional String) The timestamp for when CRL was last updated.
	CrlUpdatedAt *string `pulumi:"crlUpdatedAt"`
	// The url from which to fetch the CRL for the certificate authority.
	CrlUrl *string `pulumi:"crlUrl"`
	// A description of the Certificate Authority.
	Description *string `pulumi:"description"`
	// The name of the Certificate Authority.
	DisplayName *string `pulumi:"displayName"`
	// (Required List of Strings) The expiration dates of certificates in the chain.
	ExpirationDates []string `pulumi:"expirationDates"`
	// (Required List of Strings) The fingerprints for each certificate in the certificate chain.
	Fingerprints []string `pulumi:"fingerprints"`
	// (Required List of Strings) The serial numbers for each certificate in the certificate chain.
	SerialNumbers []string `pulumi:"serialNumbers"`
}

type CertificateAuthorityState struct {
	// A PEM encoded string containing the signing certificate chain.
	CertificateChain pulumi.StringPtrInput
	// The name of the certificate file.
	CertificateChainFilename pulumi.StringPtrInput
	// A PEM encoded string containing the CRL for this certificate authority.
	CrlChain pulumi.StringPtrInput
	// (Optional String) The source specifies whether the Certificate Revocation List (CRL) is updated from either local file uploaded (LOCAL) or from url of CRL (URL).
	CrlSource pulumi.StringPtrInput
	// (Optional String) The timestamp for when CRL was last updated.
	CrlUpdatedAt pulumi.StringPtrInput
	// The url from which to fetch the CRL for the certificate authority.
	CrlUrl pulumi.StringPtrInput
	// A description of the Certificate Authority.
	Description pulumi.StringPtrInput
	// The name of the Certificate Authority.
	DisplayName pulumi.StringPtrInput
	// (Required List of Strings) The expiration dates of certificates in the chain.
	ExpirationDates pulumi.StringArrayInput
	// (Required List of Strings) The fingerprints for each certificate in the certificate chain.
	Fingerprints pulumi.StringArrayInput
	// (Required List of Strings) The serial numbers for each certificate in the certificate chain.
	SerialNumbers pulumi.StringArrayInput
}

func (CertificateAuthorityState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateAuthorityState)(nil)).Elem()
}

type certificateAuthorityArgs struct {
	// A PEM encoded string containing the signing certificate chain.
	CertificateChain string `pulumi:"certificateChain"`
	// The name of the certificate file.
	CertificateChainFilename string `pulumi:"certificateChainFilename"`
	// A PEM encoded string containing the CRL for this certificate authority.
	CrlChain *string `pulumi:"crlChain"`
	// The url from which to fetch the CRL for the certificate authority.
	CrlUrl *string `pulumi:"crlUrl"`
	// A description of the Certificate Authority.
	Description string `pulumi:"description"`
	// The name of the Certificate Authority.
	DisplayName string `pulumi:"displayName"`
}

// The set of arguments for constructing a CertificateAuthority resource.
type CertificateAuthorityArgs struct {
	// A PEM encoded string containing the signing certificate chain.
	CertificateChain pulumi.StringInput
	// The name of the certificate file.
	CertificateChainFilename pulumi.StringInput
	// A PEM encoded string containing the CRL for this certificate authority.
	CrlChain pulumi.StringPtrInput
	// The url from which to fetch the CRL for the certificate authority.
	CrlUrl pulumi.StringPtrInput
	// A description of the Certificate Authority.
	Description pulumi.StringInput
	// The name of the Certificate Authority.
	DisplayName pulumi.StringInput
}

func (CertificateAuthorityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateAuthorityArgs)(nil)).Elem()
}

type CertificateAuthorityInput interface {
	pulumi.Input

	ToCertificateAuthorityOutput() CertificateAuthorityOutput
	ToCertificateAuthorityOutputWithContext(ctx context.Context) CertificateAuthorityOutput
}

func (*CertificateAuthority) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateAuthority)(nil)).Elem()
}

func (i *CertificateAuthority) ToCertificateAuthorityOutput() CertificateAuthorityOutput {
	return i.ToCertificateAuthorityOutputWithContext(context.Background())
}

func (i *CertificateAuthority) ToCertificateAuthorityOutputWithContext(ctx context.Context) CertificateAuthorityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateAuthorityOutput)
}

// CertificateAuthorityArrayInput is an input type that accepts CertificateAuthorityArray and CertificateAuthorityArrayOutput values.
// You can construct a concrete instance of `CertificateAuthorityArrayInput` via:
//
//	CertificateAuthorityArray{ CertificateAuthorityArgs{...} }
type CertificateAuthorityArrayInput interface {
	pulumi.Input

	ToCertificateAuthorityArrayOutput() CertificateAuthorityArrayOutput
	ToCertificateAuthorityArrayOutputWithContext(context.Context) CertificateAuthorityArrayOutput
}

type CertificateAuthorityArray []CertificateAuthorityInput

func (CertificateAuthorityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificateAuthority)(nil)).Elem()
}

func (i CertificateAuthorityArray) ToCertificateAuthorityArrayOutput() CertificateAuthorityArrayOutput {
	return i.ToCertificateAuthorityArrayOutputWithContext(context.Background())
}

func (i CertificateAuthorityArray) ToCertificateAuthorityArrayOutputWithContext(ctx context.Context) CertificateAuthorityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateAuthorityArrayOutput)
}

// CertificateAuthorityMapInput is an input type that accepts CertificateAuthorityMap and CertificateAuthorityMapOutput values.
// You can construct a concrete instance of `CertificateAuthorityMapInput` via:
//
//	CertificateAuthorityMap{ "key": CertificateAuthorityArgs{...} }
type CertificateAuthorityMapInput interface {
	pulumi.Input

	ToCertificateAuthorityMapOutput() CertificateAuthorityMapOutput
	ToCertificateAuthorityMapOutputWithContext(context.Context) CertificateAuthorityMapOutput
}

type CertificateAuthorityMap map[string]CertificateAuthorityInput

func (CertificateAuthorityMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificateAuthority)(nil)).Elem()
}

func (i CertificateAuthorityMap) ToCertificateAuthorityMapOutput() CertificateAuthorityMapOutput {
	return i.ToCertificateAuthorityMapOutputWithContext(context.Background())
}

func (i CertificateAuthorityMap) ToCertificateAuthorityMapOutputWithContext(ctx context.Context) CertificateAuthorityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateAuthorityMapOutput)
}

type CertificateAuthorityOutput struct{ *pulumi.OutputState }

func (CertificateAuthorityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateAuthority)(nil)).Elem()
}

func (o CertificateAuthorityOutput) ToCertificateAuthorityOutput() CertificateAuthorityOutput {
	return o
}

func (o CertificateAuthorityOutput) ToCertificateAuthorityOutputWithContext(ctx context.Context) CertificateAuthorityOutput {
	return o
}

// A PEM encoded string containing the signing certificate chain.
func (o CertificateAuthorityOutput) CertificateChain() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateAuthority) pulumi.StringOutput { return v.CertificateChain }).(pulumi.StringOutput)
}

// The name of the certificate file.
func (o CertificateAuthorityOutput) CertificateChainFilename() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateAuthority) pulumi.StringOutput { return v.CertificateChainFilename }).(pulumi.StringOutput)
}

// A PEM encoded string containing the CRL for this certificate authority.
func (o CertificateAuthorityOutput) CrlChain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateAuthority) pulumi.StringPtrOutput { return v.CrlChain }).(pulumi.StringPtrOutput)
}

// (Optional String) The source specifies whether the Certificate Revocation List (CRL) is updated from either local file uploaded (LOCAL) or from url of CRL (URL).
func (o CertificateAuthorityOutput) CrlSource() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateAuthority) pulumi.StringOutput { return v.CrlSource }).(pulumi.StringOutput)
}

// (Optional String) The timestamp for when CRL was last updated.
func (o CertificateAuthorityOutput) CrlUpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateAuthority) pulumi.StringOutput { return v.CrlUpdatedAt }).(pulumi.StringOutput)
}

// The url from which to fetch the CRL for the certificate authority.
func (o CertificateAuthorityOutput) CrlUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateAuthority) pulumi.StringPtrOutput { return v.CrlUrl }).(pulumi.StringPtrOutput)
}

// A description of the Certificate Authority.
func (o CertificateAuthorityOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateAuthority) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The name of the Certificate Authority.
func (o CertificateAuthorityOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateAuthority) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// (Required List of Strings) The expiration dates of certificates in the chain.
func (o CertificateAuthorityOutput) ExpirationDates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertificateAuthority) pulumi.StringArrayOutput { return v.ExpirationDates }).(pulumi.StringArrayOutput)
}

// (Required List of Strings) The fingerprints for each certificate in the certificate chain.
func (o CertificateAuthorityOutput) Fingerprints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertificateAuthority) pulumi.StringArrayOutput { return v.Fingerprints }).(pulumi.StringArrayOutput)
}

// (Required List of Strings) The serial numbers for each certificate in the certificate chain.
func (o CertificateAuthorityOutput) SerialNumbers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertificateAuthority) pulumi.StringArrayOutput { return v.SerialNumbers }).(pulumi.StringArrayOutput)
}

type CertificateAuthorityArrayOutput struct{ *pulumi.OutputState }

func (CertificateAuthorityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificateAuthority)(nil)).Elem()
}

func (o CertificateAuthorityArrayOutput) ToCertificateAuthorityArrayOutput() CertificateAuthorityArrayOutput {
	return o
}

func (o CertificateAuthorityArrayOutput) ToCertificateAuthorityArrayOutputWithContext(ctx context.Context) CertificateAuthorityArrayOutput {
	return o
}

func (o CertificateAuthorityArrayOutput) Index(i pulumi.IntInput) CertificateAuthorityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CertificateAuthority {
		return vs[0].([]*CertificateAuthority)[vs[1].(int)]
	}).(CertificateAuthorityOutput)
}

type CertificateAuthorityMapOutput struct{ *pulumi.OutputState }

func (CertificateAuthorityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificateAuthority)(nil)).Elem()
}

func (o CertificateAuthorityMapOutput) ToCertificateAuthorityMapOutput() CertificateAuthorityMapOutput {
	return o
}

func (o CertificateAuthorityMapOutput) ToCertificateAuthorityMapOutputWithContext(ctx context.Context) CertificateAuthorityMapOutput {
	return o
}

func (o CertificateAuthorityMapOutput) MapIndex(k pulumi.StringInput) CertificateAuthorityOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CertificateAuthority {
		return vs[0].(map[string]*CertificateAuthority)[vs[1].(string)]
	}).(CertificateAuthorityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateAuthorityInput)(nil)).Elem(), &CertificateAuthority{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateAuthorityArrayInput)(nil)).Elem(), CertificateAuthorityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateAuthorityMapInput)(nil)).Elem(), CertificateAuthorityMap{})
	pulumi.RegisterOutputType(CertificateAuthorityOutput{})
	pulumi.RegisterOutputType(CertificateAuthorityArrayOutput{})
	pulumi.RegisterOutputType(CertificateAuthorityMapOutput{})
}

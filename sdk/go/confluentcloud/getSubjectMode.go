// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
//
// `SubjectMode` describes a Subject Mode data source.
//
// ## Example Usage
//
// ### Option #1: Manage multiple Schema Registry clusters in the same Pulumi Stack
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			purchase_v1, err := confluentcloud.LookupSubjectMode(ctx, &confluentcloud.LookupSubjectModeArgs{
//				SchemaRegistryCluster: confluentcloud.GetSubjectModeSchemaRegistryCluster{
//					Id: essentials.Id,
//				},
//				RestEndpoint: pulumi.StringRef(essentials.RestEndpoint),
//				SubjectName:  "proto-purchase-value",
//				Credentials: confluentcloud.GetSubjectModeCredentials{
//					Key:    "<Schema Registry API Key for data.confluent_schema_registry_cluster.essentials>",
//					Secret: "<Schema Registry API Secret for data.confluent_schema_registry_cluster.essentials>",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("mode", purchase_v1.Mode)
//			return nil
//		})
//	}
//
// ```
//
// ### Option #2: Manage a single Schema Registry cluster in the same Pulumi Stack
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			purchase_v1, err := confluentcloud.LookupSubjectMode(ctx, &confluentcloud.LookupSubjectModeArgs{
//				SubjectName: "proto-purchase-value",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("mode", purchase_v1.Mode)
//			return nil
//		})
//	}
//
// ```
func LookupSubjectMode(ctx *pulumi.Context, args *LookupSubjectModeArgs, opts ...pulumi.InvokeOption) (*LookupSubjectModeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSubjectModeResult
	err := ctx.Invoke("confluentcloud:index/getSubjectMode:getSubjectMode", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSubjectMode.
type LookupSubjectModeArgs struct {
	Credentials *GetSubjectModeCredentials `pulumi:"credentials"`
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          *string                              `pulumi:"restEndpoint"`
	SchemaRegistryCluster *GetSubjectModeSchemaRegistryCluster `pulumi:"schemaRegistryCluster"`
	// The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`.
	//
	// > **Note:** A Schema Registry API key consists of a key and a secret. Schema Registry API keys are required to interact with Schema Registry clusters in Confluent Cloud. Each Schema Registry API key is valid for one specific Schema Registry cluster.
	SubjectName string `pulumi:"subjectName"`
}

// A collection of values returned by getSubjectMode.
type LookupSubjectModeResult struct {
	Credentials *GetSubjectModeCredentials `pulumi:"credentials"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// (Required String) The mode of the specified subject. Accepted values are: `READWRITE`, `READONLY`, `READONLY_OVERRIDE`, and `IMPORT`.
	Mode                  string                               `pulumi:"mode"`
	RestEndpoint          *string                              `pulumi:"restEndpoint"`
	SchemaRegistryCluster *GetSubjectModeSchemaRegistryCluster `pulumi:"schemaRegistryCluster"`
	SubjectName           string                               `pulumi:"subjectName"`
}

func LookupSubjectModeOutput(ctx *pulumi.Context, args LookupSubjectModeOutputArgs, opts ...pulumi.InvokeOption) LookupSubjectModeResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSubjectModeResultOutput, error) {
			args := v.(LookupSubjectModeArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("confluentcloud:index/getSubjectMode:getSubjectMode", args, LookupSubjectModeResultOutput{}, options).(LookupSubjectModeResultOutput), nil
		}).(LookupSubjectModeResultOutput)
}

// A collection of arguments for invoking getSubjectMode.
type LookupSubjectModeOutputArgs struct {
	Credentials GetSubjectModeCredentialsPtrInput `pulumi:"credentials"`
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          pulumi.StringPtrInput                       `pulumi:"restEndpoint"`
	SchemaRegistryCluster GetSubjectModeSchemaRegistryClusterPtrInput `pulumi:"schemaRegistryCluster"`
	// The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`.
	//
	// > **Note:** A Schema Registry API key consists of a key and a secret. Schema Registry API keys are required to interact with Schema Registry clusters in Confluent Cloud. Each Schema Registry API key is valid for one specific Schema Registry cluster.
	SubjectName pulumi.StringInput `pulumi:"subjectName"`
}

func (LookupSubjectModeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubjectModeArgs)(nil)).Elem()
}

// A collection of values returned by getSubjectMode.
type LookupSubjectModeResultOutput struct{ *pulumi.OutputState }

func (LookupSubjectModeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubjectModeResult)(nil)).Elem()
}

func (o LookupSubjectModeResultOutput) ToLookupSubjectModeResultOutput() LookupSubjectModeResultOutput {
	return o
}

func (o LookupSubjectModeResultOutput) ToLookupSubjectModeResultOutputWithContext(ctx context.Context) LookupSubjectModeResultOutput {
	return o
}

func (o LookupSubjectModeResultOutput) Credentials() GetSubjectModeCredentialsPtrOutput {
	return o.ApplyT(func(v LookupSubjectModeResult) *GetSubjectModeCredentials { return v.Credentials }).(GetSubjectModeCredentialsPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSubjectModeResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubjectModeResult) string { return v.Id }).(pulumi.StringOutput)
}

// (Required String) The mode of the specified subject. Accepted values are: `READWRITE`, `READONLY`, `READONLY_OVERRIDE`, and `IMPORT`.
func (o LookupSubjectModeResultOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubjectModeResult) string { return v.Mode }).(pulumi.StringOutput)
}

func (o LookupSubjectModeResultOutput) RestEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSubjectModeResult) *string { return v.RestEndpoint }).(pulumi.StringPtrOutput)
}

func (o LookupSubjectModeResultOutput) SchemaRegistryCluster() GetSubjectModeSchemaRegistryClusterPtrOutput {
	return o.ApplyT(func(v LookupSubjectModeResult) *GetSubjectModeSchemaRegistryCluster { return v.SchemaRegistryCluster }).(GetSubjectModeSchemaRegistryClusterPtrOutput)
}

func (o LookupSubjectModeResultOutput) SubjectName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubjectModeResult) string { return v.SubjectName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSubjectModeResultOutput{})
}

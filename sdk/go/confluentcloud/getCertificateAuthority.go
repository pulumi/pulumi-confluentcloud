// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// [![Limited Availability](https://img.shields.io/badge/Lifecycle%20Stage-Limited%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
//
// `CertificateAuthority` describes a Certificate Authority data source.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := confluentcloud.LookupCertificateAuthority(ctx, &confluentcloud.LookupCertificateAuthorityArgs{
//				Id: "op-abc123",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("certificateAuthority", main)
//			return nil
//		})
//	}
//
// ```
func LookupCertificateAuthority(ctx *pulumi.Context, args *LookupCertificateAuthorityArgs, opts ...pulumi.InvokeOption) (*LookupCertificateAuthorityResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCertificateAuthorityResult
	err := ctx.Invoke("confluentcloud:index/getCertificateAuthority:getCertificateAuthority", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCertificateAuthority.
type LookupCertificateAuthorityArgs struct {
	// (Optional String) The source specifies whether the Certificate Revocation List (CRL) is updated from either local file uploaded (LOCAL) or from url of CRL (URL). Accepted values are `LOCAL` and `URL`.
	CrlSource *string `pulumi:"crlSource"`
	// (Optional String) The timestamp for when CRL was last updated, for example, `2017-07-21T17:32:28Z`.
	CrlUpdatedAt *string `pulumi:"crlUpdatedAt"`
	// (Optional String) The url from which to fetch the CRL for the certificate authority if crlSource is URL.
	CrlUrl *string `pulumi:"crlUrl"`
	// The ID of the Certificate Authority, for example, `op-abc123`.
	Id string `pulumi:"id"`
}

// A collection of values returned by getCertificateAuthority.
type LookupCertificateAuthorityResult struct {
	// (Required String) The name of the certificate file, for example, `certificate.pem`.
	CertificateChainFilename string `pulumi:"certificateChainFilename"`
	// (Optional String) The source specifies whether the Certificate Revocation List (CRL) is updated from either local file uploaded (LOCAL) or from url of CRL (URL). Accepted values are `LOCAL` and `URL`.
	CrlSource string `pulumi:"crlSource"`
	// (Optional String) The timestamp for when CRL was last updated, for example, `2017-07-21T17:32:28Z`.
	CrlUpdatedAt string `pulumi:"crlUpdatedAt"`
	// (Optional String) The url from which to fetch the CRL for the certificate authority if crlSource is URL.
	CrlUrl string `pulumi:"crlUrl"`
	// (Required String) A description for the Certificate Authority.
	Description string `pulumi:"description"`
	// (Required String) A human-readable name for the Certificate Authority.
	DisplayName string `pulumi:"displayName"`
	// (Required List of Strings) The expiration dates of certificates in the chain, for example, `["2017-07-21T17:32:28Z"]`.
	ExpirationDates []string `pulumi:"expirationDates"`
	// (Required List of Strings) The fingerprints for each certificate in the certificate chain, for example, `["B1BC968BD4f49D622AA89A81F2150152A41D829C"]`.
	Fingerprints []string `pulumi:"fingerprints"`
	Id           string   `pulumi:"id"`
	// (Required List of Strings) The serial numbers for each certificate in the certificate chain.
	SerialNumbers []string `pulumi:"serialNumbers"`
}

func LookupCertificateAuthorityOutput(ctx *pulumi.Context, args LookupCertificateAuthorityOutputArgs, opts ...pulumi.InvokeOption) LookupCertificateAuthorityResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCertificateAuthorityResultOutput, error) {
			args := v.(LookupCertificateAuthorityArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupCertificateAuthorityResult
			secret, err := ctx.InvokePackageRaw("confluentcloud:index/getCertificateAuthority:getCertificateAuthority", args, &rv, "", opts...)
			if err != nil {
				return LookupCertificateAuthorityResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupCertificateAuthorityResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupCertificateAuthorityResultOutput), nil
			}
			return output, nil
		}).(LookupCertificateAuthorityResultOutput)
}

// A collection of arguments for invoking getCertificateAuthority.
type LookupCertificateAuthorityOutputArgs struct {
	// (Optional String) The source specifies whether the Certificate Revocation List (CRL) is updated from either local file uploaded (LOCAL) or from url of CRL (URL). Accepted values are `LOCAL` and `URL`.
	CrlSource pulumi.StringPtrInput `pulumi:"crlSource"`
	// (Optional String) The timestamp for when CRL was last updated, for example, `2017-07-21T17:32:28Z`.
	CrlUpdatedAt pulumi.StringPtrInput `pulumi:"crlUpdatedAt"`
	// (Optional String) The url from which to fetch the CRL for the certificate authority if crlSource is URL.
	CrlUrl pulumi.StringPtrInput `pulumi:"crlUrl"`
	// The ID of the Certificate Authority, for example, `op-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupCertificateAuthorityOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificateAuthorityArgs)(nil)).Elem()
}

// A collection of values returned by getCertificateAuthority.
type LookupCertificateAuthorityResultOutput struct{ *pulumi.OutputState }

func (LookupCertificateAuthorityResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificateAuthorityResult)(nil)).Elem()
}

func (o LookupCertificateAuthorityResultOutput) ToLookupCertificateAuthorityResultOutput() LookupCertificateAuthorityResultOutput {
	return o
}

func (o LookupCertificateAuthorityResultOutput) ToLookupCertificateAuthorityResultOutputWithContext(ctx context.Context) LookupCertificateAuthorityResultOutput {
	return o
}

// (Required String) The name of the certificate file, for example, `certificate.pem`.
func (o LookupCertificateAuthorityResultOutput) CertificateChainFilename() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateAuthorityResult) string { return v.CertificateChainFilename }).(pulumi.StringOutput)
}

// (Optional String) The source specifies whether the Certificate Revocation List (CRL) is updated from either local file uploaded (LOCAL) or from url of CRL (URL). Accepted values are `LOCAL` and `URL`.
func (o LookupCertificateAuthorityResultOutput) CrlSource() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateAuthorityResult) string { return v.CrlSource }).(pulumi.StringOutput)
}

// (Optional String) The timestamp for when CRL was last updated, for example, `2017-07-21T17:32:28Z`.
func (o LookupCertificateAuthorityResultOutput) CrlUpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateAuthorityResult) string { return v.CrlUpdatedAt }).(pulumi.StringOutput)
}

// (Optional String) The url from which to fetch the CRL for the certificate authority if crlSource is URL.
func (o LookupCertificateAuthorityResultOutput) CrlUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateAuthorityResult) string { return v.CrlUrl }).(pulumi.StringOutput)
}

// (Required String) A description for the Certificate Authority.
func (o LookupCertificateAuthorityResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateAuthorityResult) string { return v.Description }).(pulumi.StringOutput)
}

// (Required String) A human-readable name for the Certificate Authority.
func (o LookupCertificateAuthorityResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateAuthorityResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// (Required List of Strings) The expiration dates of certificates in the chain, for example, `["2017-07-21T17:32:28Z"]`.
func (o LookupCertificateAuthorityResultOutput) ExpirationDates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCertificateAuthorityResult) []string { return v.ExpirationDates }).(pulumi.StringArrayOutput)
}

// (Required List of Strings) The fingerprints for each certificate in the certificate chain, for example, `["B1BC968BD4f49D622AA89A81F2150152A41D829C"]`.
func (o LookupCertificateAuthorityResultOutput) Fingerprints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCertificateAuthorityResult) []string { return v.Fingerprints }).(pulumi.StringArrayOutput)
}

func (o LookupCertificateAuthorityResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateAuthorityResult) string { return v.Id }).(pulumi.StringOutput)
}

// (Required List of Strings) The serial numbers for each certificate in the certificate chain.
func (o LookupCertificateAuthorityResultOutput) SerialNumbers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCertificateAuthorityResult) []string { return v.SerialNumbers }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCertificateAuthorityResultOutput{})
}

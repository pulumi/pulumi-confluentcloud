// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
//
// `CertificatePool` provides a Certificate Pool resource that enables creating, editing, and deleting Certificate Pools on Confluent Cloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := confluentcloud.NewCertificatePool(ctx, "main", &confluentcloud.CertificatePoolArgs{
//				CertificateAuthority: &confluentcloud.CertificatePoolCertificateAuthorityArgs{
//					Id: pulumi.Any(mainConfluentCertificateAuthority.Id),
//				},
//				DisplayName:        pulumi.String("my-certificate-pool"),
//				Description:        pulumi.String("example description"),
//				ExternalIdentifier: pulumi.String("CN"),
//				Filter:             pulumi.String("CN == \"test\""),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// You can import a Certificate Pool by using Certificate Authority ID and Certificate Pool ID, in the format `<Certificate Authority ID>/<Certificate Pool ID>`. The following example shows how to import a Certificate Pool:
//
// $ export CONFLUENT_CLOUD_API_KEY="<cloud_api_key>"
//
// $ export CONFLUENT_CLOUD_API_SECRET="<cloud_api_secret>"
//
// ```sh
// $ pulumi import confluentcloud:index/certificatePool:CertificatePool main op-abc123/pool-abc123
// ```
//
// !> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
type CertificatePool struct {
	pulumi.CustomResourceState

	CertificateAuthority CertificatePoolCertificateAuthorityOutput `pulumi:"certificateAuthority"`
	// A description of the Certificate Pool.
	Description pulumi.StringOutput `pulumi:"description"`
	// The name of the Certificate Pool.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The certificate field that will be used to represent the pool's external identity for audit logging.
	ExternalIdentifier pulumi.StringOutput `pulumi:"externalIdentifier"`
	// A filter expression in [Supported Common Expression Language (CEL)](https://docs.confluent.io/cloud/current/access-management/authenticate/mtls/cel-filters.html) that specifies which identities can authenticate using your certificate pool.
	Filter pulumi.StringOutput `pulumi:"filter"`
}

// NewCertificatePool registers a new resource with the given unique name, arguments, and options.
func NewCertificatePool(ctx *pulumi.Context,
	name string, args *CertificatePoolArgs, opts ...pulumi.ResourceOption) (*CertificatePool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateAuthority == nil {
		return nil, errors.New("invalid value for required argument 'CertificateAuthority'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.ExternalIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'ExternalIdentifier'")
	}
	if args.Filter == nil {
		return nil, errors.New("invalid value for required argument 'Filter'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CertificatePool
	err := ctx.RegisterResource("confluentcloud:index/certificatePool:CertificatePool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificatePool gets an existing CertificatePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificatePool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificatePoolState, opts ...pulumi.ResourceOption) (*CertificatePool, error) {
	var resource CertificatePool
	err := ctx.ReadResource("confluentcloud:index/certificatePool:CertificatePool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CertificatePool resources.
type certificatePoolState struct {
	CertificateAuthority *CertificatePoolCertificateAuthority `pulumi:"certificateAuthority"`
	// A description of the Certificate Pool.
	Description *string `pulumi:"description"`
	// The name of the Certificate Pool.
	DisplayName *string `pulumi:"displayName"`
	// The certificate field that will be used to represent the pool's external identity for audit logging.
	ExternalIdentifier *string `pulumi:"externalIdentifier"`
	// A filter expression in [Supported Common Expression Language (CEL)](https://docs.confluent.io/cloud/current/access-management/authenticate/mtls/cel-filters.html) that specifies which identities can authenticate using your certificate pool.
	Filter *string `pulumi:"filter"`
}

type CertificatePoolState struct {
	CertificateAuthority CertificatePoolCertificateAuthorityPtrInput
	// A description of the Certificate Pool.
	Description pulumi.StringPtrInput
	// The name of the Certificate Pool.
	DisplayName pulumi.StringPtrInput
	// The certificate field that will be used to represent the pool's external identity for audit logging.
	ExternalIdentifier pulumi.StringPtrInput
	// A filter expression in [Supported Common Expression Language (CEL)](https://docs.confluent.io/cloud/current/access-management/authenticate/mtls/cel-filters.html) that specifies which identities can authenticate using your certificate pool.
	Filter pulumi.StringPtrInput
}

func (CertificatePoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificatePoolState)(nil)).Elem()
}

type certificatePoolArgs struct {
	CertificateAuthority CertificatePoolCertificateAuthority `pulumi:"certificateAuthority"`
	// A description of the Certificate Pool.
	Description string `pulumi:"description"`
	// The name of the Certificate Pool.
	DisplayName string `pulumi:"displayName"`
	// The certificate field that will be used to represent the pool's external identity for audit logging.
	ExternalIdentifier string `pulumi:"externalIdentifier"`
	// A filter expression in [Supported Common Expression Language (CEL)](https://docs.confluent.io/cloud/current/access-management/authenticate/mtls/cel-filters.html) that specifies which identities can authenticate using your certificate pool.
	Filter string `pulumi:"filter"`
}

// The set of arguments for constructing a CertificatePool resource.
type CertificatePoolArgs struct {
	CertificateAuthority CertificatePoolCertificateAuthorityInput
	// A description of the Certificate Pool.
	Description pulumi.StringInput
	// The name of the Certificate Pool.
	DisplayName pulumi.StringInput
	// The certificate field that will be used to represent the pool's external identity for audit logging.
	ExternalIdentifier pulumi.StringInput
	// A filter expression in [Supported Common Expression Language (CEL)](https://docs.confluent.io/cloud/current/access-management/authenticate/mtls/cel-filters.html) that specifies which identities can authenticate using your certificate pool.
	Filter pulumi.StringInput
}

func (CertificatePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificatePoolArgs)(nil)).Elem()
}

type CertificatePoolInput interface {
	pulumi.Input

	ToCertificatePoolOutput() CertificatePoolOutput
	ToCertificatePoolOutputWithContext(ctx context.Context) CertificatePoolOutput
}

func (*CertificatePool) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificatePool)(nil)).Elem()
}

func (i *CertificatePool) ToCertificatePoolOutput() CertificatePoolOutput {
	return i.ToCertificatePoolOutputWithContext(context.Background())
}

func (i *CertificatePool) ToCertificatePoolOutputWithContext(ctx context.Context) CertificatePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificatePoolOutput)
}

// CertificatePoolArrayInput is an input type that accepts CertificatePoolArray and CertificatePoolArrayOutput values.
// You can construct a concrete instance of `CertificatePoolArrayInput` via:
//
//	CertificatePoolArray{ CertificatePoolArgs{...} }
type CertificatePoolArrayInput interface {
	pulumi.Input

	ToCertificatePoolArrayOutput() CertificatePoolArrayOutput
	ToCertificatePoolArrayOutputWithContext(context.Context) CertificatePoolArrayOutput
}

type CertificatePoolArray []CertificatePoolInput

func (CertificatePoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificatePool)(nil)).Elem()
}

func (i CertificatePoolArray) ToCertificatePoolArrayOutput() CertificatePoolArrayOutput {
	return i.ToCertificatePoolArrayOutputWithContext(context.Background())
}

func (i CertificatePoolArray) ToCertificatePoolArrayOutputWithContext(ctx context.Context) CertificatePoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificatePoolArrayOutput)
}

// CertificatePoolMapInput is an input type that accepts CertificatePoolMap and CertificatePoolMapOutput values.
// You can construct a concrete instance of `CertificatePoolMapInput` via:
//
//	CertificatePoolMap{ "key": CertificatePoolArgs{...} }
type CertificatePoolMapInput interface {
	pulumi.Input

	ToCertificatePoolMapOutput() CertificatePoolMapOutput
	ToCertificatePoolMapOutputWithContext(context.Context) CertificatePoolMapOutput
}

type CertificatePoolMap map[string]CertificatePoolInput

func (CertificatePoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificatePool)(nil)).Elem()
}

func (i CertificatePoolMap) ToCertificatePoolMapOutput() CertificatePoolMapOutput {
	return i.ToCertificatePoolMapOutputWithContext(context.Background())
}

func (i CertificatePoolMap) ToCertificatePoolMapOutputWithContext(ctx context.Context) CertificatePoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificatePoolMapOutput)
}

type CertificatePoolOutput struct{ *pulumi.OutputState }

func (CertificatePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificatePool)(nil)).Elem()
}

func (o CertificatePoolOutput) ToCertificatePoolOutput() CertificatePoolOutput {
	return o
}

func (o CertificatePoolOutput) ToCertificatePoolOutputWithContext(ctx context.Context) CertificatePoolOutput {
	return o
}

func (o CertificatePoolOutput) CertificateAuthority() CertificatePoolCertificateAuthorityOutput {
	return o.ApplyT(func(v *CertificatePool) CertificatePoolCertificateAuthorityOutput { return v.CertificateAuthority }).(CertificatePoolCertificateAuthorityOutput)
}

// A description of the Certificate Pool.
func (o CertificatePoolOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificatePool) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The name of the Certificate Pool.
func (o CertificatePoolOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificatePool) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The certificate field that will be used to represent the pool's external identity for audit logging.
func (o CertificatePoolOutput) ExternalIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificatePool) pulumi.StringOutput { return v.ExternalIdentifier }).(pulumi.StringOutput)
}

// A filter expression in [Supported Common Expression Language (CEL)](https://docs.confluent.io/cloud/current/access-management/authenticate/mtls/cel-filters.html) that specifies which identities can authenticate using your certificate pool.
func (o CertificatePoolOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificatePool) pulumi.StringOutput { return v.Filter }).(pulumi.StringOutput)
}

type CertificatePoolArrayOutput struct{ *pulumi.OutputState }

func (CertificatePoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificatePool)(nil)).Elem()
}

func (o CertificatePoolArrayOutput) ToCertificatePoolArrayOutput() CertificatePoolArrayOutput {
	return o
}

func (o CertificatePoolArrayOutput) ToCertificatePoolArrayOutputWithContext(ctx context.Context) CertificatePoolArrayOutput {
	return o
}

func (o CertificatePoolArrayOutput) Index(i pulumi.IntInput) CertificatePoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CertificatePool {
		return vs[0].([]*CertificatePool)[vs[1].(int)]
	}).(CertificatePoolOutput)
}

type CertificatePoolMapOutput struct{ *pulumi.OutputState }

func (CertificatePoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificatePool)(nil)).Elem()
}

func (o CertificatePoolMapOutput) ToCertificatePoolMapOutput() CertificatePoolMapOutput {
	return o
}

func (o CertificatePoolMapOutput) ToCertificatePoolMapOutputWithContext(ctx context.Context) CertificatePoolMapOutput {
	return o
}

func (o CertificatePoolMapOutput) MapIndex(k pulumi.StringInput) CertificatePoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CertificatePool {
		return vs[0].(map[string]*CertificatePool)[vs[1].(string)]
	}).(CertificatePoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificatePoolInput)(nil)).Elem(), &CertificatePool{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificatePoolArrayInput)(nil)).Elem(), CertificatePoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificatePoolMapInput)(nil)).Elem(), CertificatePoolMap{})
	pulumi.RegisterOutputType(CertificatePoolOutput{})
	pulumi.RegisterOutputType(CertificatePoolArrayOutput{})
	pulumi.RegisterOutputType(CertificatePoolMapOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### Option #1: Manage multiple Tableflow Topics in the same Pulumi Stack
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := confluentcloud.NewTableflowTopic(ctx, "example", &confluentcloud.TableflowTopicArgs{
//				ManagedStorages: confluentcloud.TableflowTopicManagedStorageArray{
//					&confluentcloud.TableflowTopicManagedStorageArgs{},
//				},
//				Environment: &confluentcloud.TableflowTopicEnvironmentArgs{
//					Id: pulumi.Any(staging.Id),
//				},
//				KafkaCluster: &confluentcloud.TableflowTopicKafkaClusterArgs{
//					Id: pulumi.Any(stagingConfluentKafkaCluster.Id),
//				},
//				DisplayName: pulumi.Any(orders.TopicName),
//				TableFormats: pulumi.StringArray{
//					pulumi.String("ICEBERG"),
//					pulumi.String("DELTA"),
//				},
//				Credentials: &confluentcloud.TableflowTopicCredentialsArgs{
//					Key:    pulumi.Any(env_admin_tableflow_api_key.Id),
//					Secret: pulumi.Any(env_admin_tableflow_api_key.Secret),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Option #2: Manage a single Tableflow Topic in the same Pulumi Stack
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := confluentcloud.NewTableflowTopic(ctx, "example", &confluentcloud.TableflowTopicArgs{
//				Environment: &confluentcloud.TableflowTopicEnvironmentArgs{
//					Id: pulumi.Any(staging.Id),
//				},
//				KafkaCluster: &confluentcloud.TableflowTopicKafkaClusterArgs{
//					Id: pulumi.Any(stagingConfluentKafkaCluster.Id),
//				},
//				DisplayName: pulumi.Any(orders.TopicName),
//				ByobAws: &confluentcloud.TableflowTopicByobAwsArgs{
//					BucketName:            pulumi.String("bucket_1"),
//					ProviderIntegrationId: pulumi.Any(main.Id),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Getting Started
//
// The following end-to-end examples might help to get started with `TableflowTopic` resource:
// * confluent-managed-storage: Tableflow topic with Confluent-managed storage.
// * byob-aws-storage: Tableflow topic with custom (BYOB AWS) storage.
// * datagen-connector-byob-aws-storage: Datagen Source connector with a Tableflow topic with custom (BYOB AWS) storage.
// * datagen-connector-confluent-managed-storage: Datagen Source connector with a Tableflow topic with Confluent-managed storage.
//
// ## Import
//
// You can import a Tableflow Topic by using the Tableflow Topic name, Environment ID, and Kafka Cluster ID, in the format `<Environment ID>/<Kafka Cluster ID>/<Tableflow Topic name>`, for example:
//
// Option #1: Manage multiple Tableflow Topics in the same Pulumi Stack
//
// $ export IMPORT_TABLEFLOW_API_KEY="<tableflow_api_key>"
//
// $ export IMPORT_TABLEFLOW_API_SECRET="<tableflow_api_secret>"
//
// ```sh
// $ pulumi import confluentcloud:index/tableflowTopic:TableflowTopic example env-abc123/lkc-abc123/orders
// ```
//
// Option #2: Manage a single Tableflow Topic in the same Pulumi Stack
//
// ```sh
// $ pulumi import confluentcloud:index/tableflowTopic:TableflowTopic example env-abc123/lkc-abc123/orders
// ```
//
// !> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
type TableflowTopic struct {
	pulumi.CustomResourceState

	// supports the following (See [Quick Start with Custom Storage](https://docs.confluent.io/cloud/current/topics/tableflow/get-started/quick-start-custom-storage-glue.html#cloud-tableflow-quick-start) for more details):
	ByobAws TableflowTopicByobAwsPtrOutput `pulumi:"byobAws"`
	// The Cluster API Credentials.
	Credentials TableflowTopicCredentialsPtrOutput `pulumi:"credentials"`
	// The name of the Kafka topic for which Tableflow is enabled.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Optional Boolean) This flag determines whether to enable compaction for the Tableflow enabled topic.
	EnableCompaction pulumi.BoolOutput `pulumi:"enableCompaction"`
	// (Optional Boolean) This flag determines whether to enable partitioning for the Tableflow enabled topic.
	EnablePartitioning pulumi.BoolOutput `pulumi:"enablePartitioning"`
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment  TableflowTopicEnvironmentOutput  `pulumi:"environment"`
	KafkaCluster TableflowTopicKafkaClusterOutput `pulumi:"kafkaCluster"`
	// The configuration of the Confluent managed storage. See [Quick Start with Managed Storage](https://docs.confluent.io/cloud/current/topics/tableflow/get-started/quick-start-managed-storage.html#cloud-tableflow-quick-start-managed-storage) for more details.
	ManagedStorages TableflowTopicManagedStorageArrayOutput `pulumi:"managedStorages"`
	// The strategy to handle record failures in the Tableflow enabled topic during materialization. Accepted values are `SKIP`, `SUSPEND`. For `SKIP`, we skip the bad records and move to the next record. For `SUSPEND`, we suspend the materialization of the topic.
	RecordFailureStrategy pulumi.StringOutput `pulumi:"recordFailureStrategy"`
	// The max age of snapshots (Iceberg) or versions (Delta) (snapshot/version expiration) to keep on the table in milliseconds for the Tableflow enabled topic.
	RetentionMs pulumi.StringPtrOutput `pulumi:"retentionMs"`
	// (Optional Boolean) Indicates whether the Tableflow should be suspended.
	Suspended pulumi.BoolOutput `pulumi:"suspended"`
	// The supported table formats for the Tableflow-enabled topic. Accepted values are `DELTA`, `ICEBERG`.
	TableFormats pulumi.StringArrayOutput `pulumi:"tableFormats"`
}

// NewTableflowTopic registers a new resource with the given unique name, arguments, and options.
func NewTableflowTopic(ctx *pulumi.Context,
	name string, args *TableflowTopicArgs, opts ...pulumi.ResourceOption) (*TableflowTopic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.KafkaCluster == nil {
		return nil, errors.New("invalid value for required argument 'KafkaCluster'")
	}
	if args.Credentials != nil {
		args.Credentials = pulumi.ToSecret(args.Credentials).(TableflowTopicCredentialsPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"credentials",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TableflowTopic
	err := ctx.RegisterResource("confluentcloud:index/tableflowTopic:TableflowTopic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTableflowTopic gets an existing TableflowTopic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTableflowTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TableflowTopicState, opts ...pulumi.ResourceOption) (*TableflowTopic, error) {
	var resource TableflowTopic
	err := ctx.ReadResource("confluentcloud:index/tableflowTopic:TableflowTopic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TableflowTopic resources.
type tableflowTopicState struct {
	// supports the following (See [Quick Start with Custom Storage](https://docs.confluent.io/cloud/current/topics/tableflow/get-started/quick-start-custom-storage-glue.html#cloud-tableflow-quick-start) for more details):
	ByobAws *TableflowTopicByobAws `pulumi:"byobAws"`
	// The Cluster API Credentials.
	Credentials *TableflowTopicCredentials `pulumi:"credentials"`
	// The name of the Kafka topic for which Tableflow is enabled.
	DisplayName *string `pulumi:"displayName"`
	// (Optional Boolean) This flag determines whether to enable compaction for the Tableflow enabled topic.
	EnableCompaction *bool `pulumi:"enableCompaction"`
	// (Optional Boolean) This flag determines whether to enable partitioning for the Tableflow enabled topic.
	EnablePartitioning *bool `pulumi:"enablePartitioning"`
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment  *TableflowTopicEnvironment  `pulumi:"environment"`
	KafkaCluster *TableflowTopicKafkaCluster `pulumi:"kafkaCluster"`
	// The configuration of the Confluent managed storage. See [Quick Start with Managed Storage](https://docs.confluent.io/cloud/current/topics/tableflow/get-started/quick-start-managed-storage.html#cloud-tableflow-quick-start-managed-storage) for more details.
	ManagedStorages []TableflowTopicManagedStorage `pulumi:"managedStorages"`
	// The strategy to handle record failures in the Tableflow enabled topic during materialization. Accepted values are `SKIP`, `SUSPEND`. For `SKIP`, we skip the bad records and move to the next record. For `SUSPEND`, we suspend the materialization of the topic.
	RecordFailureStrategy *string `pulumi:"recordFailureStrategy"`
	// The max age of snapshots (Iceberg) or versions (Delta) (snapshot/version expiration) to keep on the table in milliseconds for the Tableflow enabled topic.
	RetentionMs *string `pulumi:"retentionMs"`
	// (Optional Boolean) Indicates whether the Tableflow should be suspended.
	Suspended *bool `pulumi:"suspended"`
	// The supported table formats for the Tableflow-enabled topic. Accepted values are `DELTA`, `ICEBERG`.
	TableFormats []string `pulumi:"tableFormats"`
}

type TableflowTopicState struct {
	// supports the following (See [Quick Start with Custom Storage](https://docs.confluent.io/cloud/current/topics/tableflow/get-started/quick-start-custom-storage-glue.html#cloud-tableflow-quick-start) for more details):
	ByobAws TableflowTopicByobAwsPtrInput
	// The Cluster API Credentials.
	Credentials TableflowTopicCredentialsPtrInput
	// The name of the Kafka topic for which Tableflow is enabled.
	DisplayName pulumi.StringPtrInput
	// (Optional Boolean) This flag determines whether to enable compaction for the Tableflow enabled topic.
	EnableCompaction pulumi.BoolPtrInput
	// (Optional Boolean) This flag determines whether to enable partitioning for the Tableflow enabled topic.
	EnablePartitioning pulumi.BoolPtrInput
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment  TableflowTopicEnvironmentPtrInput
	KafkaCluster TableflowTopicKafkaClusterPtrInput
	// The configuration of the Confluent managed storage. See [Quick Start with Managed Storage](https://docs.confluent.io/cloud/current/topics/tableflow/get-started/quick-start-managed-storage.html#cloud-tableflow-quick-start-managed-storage) for more details.
	ManagedStorages TableflowTopicManagedStorageArrayInput
	// The strategy to handle record failures in the Tableflow enabled topic during materialization. Accepted values are `SKIP`, `SUSPEND`. For `SKIP`, we skip the bad records and move to the next record. For `SUSPEND`, we suspend the materialization of the topic.
	RecordFailureStrategy pulumi.StringPtrInput
	// The max age of snapshots (Iceberg) or versions (Delta) (snapshot/version expiration) to keep on the table in milliseconds for the Tableflow enabled topic.
	RetentionMs pulumi.StringPtrInput
	// (Optional Boolean) Indicates whether the Tableflow should be suspended.
	Suspended pulumi.BoolPtrInput
	// The supported table formats for the Tableflow-enabled topic. Accepted values are `DELTA`, `ICEBERG`.
	TableFormats pulumi.StringArrayInput
}

func (TableflowTopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*tableflowTopicState)(nil)).Elem()
}

type tableflowTopicArgs struct {
	// supports the following (See [Quick Start with Custom Storage](https://docs.confluent.io/cloud/current/topics/tableflow/get-started/quick-start-custom-storage-glue.html#cloud-tableflow-quick-start) for more details):
	ByobAws *TableflowTopicByobAws `pulumi:"byobAws"`
	// The Cluster API Credentials.
	Credentials *TableflowTopicCredentials `pulumi:"credentials"`
	// The name of the Kafka topic for which Tableflow is enabled.
	DisplayName string `pulumi:"displayName"`
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment  TableflowTopicEnvironment  `pulumi:"environment"`
	KafkaCluster TableflowTopicKafkaCluster `pulumi:"kafkaCluster"`
	// The configuration of the Confluent managed storage. See [Quick Start with Managed Storage](https://docs.confluent.io/cloud/current/topics/tableflow/get-started/quick-start-managed-storage.html#cloud-tableflow-quick-start-managed-storage) for more details.
	ManagedStorages []TableflowTopicManagedStorage `pulumi:"managedStorages"`
	// The strategy to handle record failures in the Tableflow enabled topic during materialization. Accepted values are `SKIP`, `SUSPEND`. For `SKIP`, we skip the bad records and move to the next record. For `SUSPEND`, we suspend the materialization of the topic.
	RecordFailureStrategy *string `pulumi:"recordFailureStrategy"`
	// The max age of snapshots (Iceberg) or versions (Delta) (snapshot/version expiration) to keep on the table in milliseconds for the Tableflow enabled topic.
	RetentionMs *string `pulumi:"retentionMs"`
	// The supported table formats for the Tableflow-enabled topic. Accepted values are `DELTA`, `ICEBERG`.
	TableFormats []string `pulumi:"tableFormats"`
}

// The set of arguments for constructing a TableflowTopic resource.
type TableflowTopicArgs struct {
	// supports the following (See [Quick Start with Custom Storage](https://docs.confluent.io/cloud/current/topics/tableflow/get-started/quick-start-custom-storage-glue.html#cloud-tableflow-quick-start) for more details):
	ByobAws TableflowTopicByobAwsPtrInput
	// The Cluster API Credentials.
	Credentials TableflowTopicCredentialsPtrInput
	// The name of the Kafka topic for which Tableflow is enabled.
	DisplayName pulumi.StringInput
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment  TableflowTopicEnvironmentInput
	KafkaCluster TableflowTopicKafkaClusterInput
	// The configuration of the Confluent managed storage. See [Quick Start with Managed Storage](https://docs.confluent.io/cloud/current/topics/tableflow/get-started/quick-start-managed-storage.html#cloud-tableflow-quick-start-managed-storage) for more details.
	ManagedStorages TableflowTopicManagedStorageArrayInput
	// The strategy to handle record failures in the Tableflow enabled topic during materialization. Accepted values are `SKIP`, `SUSPEND`. For `SKIP`, we skip the bad records and move to the next record. For `SUSPEND`, we suspend the materialization of the topic.
	RecordFailureStrategy pulumi.StringPtrInput
	// The max age of snapshots (Iceberg) or versions (Delta) (snapshot/version expiration) to keep on the table in milliseconds for the Tableflow enabled topic.
	RetentionMs pulumi.StringPtrInput
	// The supported table formats for the Tableflow-enabled topic. Accepted values are `DELTA`, `ICEBERG`.
	TableFormats pulumi.StringArrayInput
}

func (TableflowTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tableflowTopicArgs)(nil)).Elem()
}

type TableflowTopicInput interface {
	pulumi.Input

	ToTableflowTopicOutput() TableflowTopicOutput
	ToTableflowTopicOutputWithContext(ctx context.Context) TableflowTopicOutput
}

func (*TableflowTopic) ElementType() reflect.Type {
	return reflect.TypeOf((**TableflowTopic)(nil)).Elem()
}

func (i *TableflowTopic) ToTableflowTopicOutput() TableflowTopicOutput {
	return i.ToTableflowTopicOutputWithContext(context.Background())
}

func (i *TableflowTopic) ToTableflowTopicOutputWithContext(ctx context.Context) TableflowTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableflowTopicOutput)
}

// TableflowTopicArrayInput is an input type that accepts TableflowTopicArray and TableflowTopicArrayOutput values.
// You can construct a concrete instance of `TableflowTopicArrayInput` via:
//
//	TableflowTopicArray{ TableflowTopicArgs{...} }
type TableflowTopicArrayInput interface {
	pulumi.Input

	ToTableflowTopicArrayOutput() TableflowTopicArrayOutput
	ToTableflowTopicArrayOutputWithContext(context.Context) TableflowTopicArrayOutput
}

type TableflowTopicArray []TableflowTopicInput

func (TableflowTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TableflowTopic)(nil)).Elem()
}

func (i TableflowTopicArray) ToTableflowTopicArrayOutput() TableflowTopicArrayOutput {
	return i.ToTableflowTopicArrayOutputWithContext(context.Background())
}

func (i TableflowTopicArray) ToTableflowTopicArrayOutputWithContext(ctx context.Context) TableflowTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableflowTopicArrayOutput)
}

// TableflowTopicMapInput is an input type that accepts TableflowTopicMap and TableflowTopicMapOutput values.
// You can construct a concrete instance of `TableflowTopicMapInput` via:
//
//	TableflowTopicMap{ "key": TableflowTopicArgs{...} }
type TableflowTopicMapInput interface {
	pulumi.Input

	ToTableflowTopicMapOutput() TableflowTopicMapOutput
	ToTableflowTopicMapOutputWithContext(context.Context) TableflowTopicMapOutput
}

type TableflowTopicMap map[string]TableflowTopicInput

func (TableflowTopicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TableflowTopic)(nil)).Elem()
}

func (i TableflowTopicMap) ToTableflowTopicMapOutput() TableflowTopicMapOutput {
	return i.ToTableflowTopicMapOutputWithContext(context.Background())
}

func (i TableflowTopicMap) ToTableflowTopicMapOutputWithContext(ctx context.Context) TableflowTopicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableflowTopicMapOutput)
}

type TableflowTopicOutput struct{ *pulumi.OutputState }

func (TableflowTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableflowTopic)(nil)).Elem()
}

func (o TableflowTopicOutput) ToTableflowTopicOutput() TableflowTopicOutput {
	return o
}

func (o TableflowTopicOutput) ToTableflowTopicOutputWithContext(ctx context.Context) TableflowTopicOutput {
	return o
}

// supports the following (See [Quick Start with Custom Storage](https://docs.confluent.io/cloud/current/topics/tableflow/get-started/quick-start-custom-storage-glue.html#cloud-tableflow-quick-start) for more details):
func (o TableflowTopicOutput) ByobAws() TableflowTopicByobAwsPtrOutput {
	return o.ApplyT(func(v *TableflowTopic) TableflowTopicByobAwsPtrOutput { return v.ByobAws }).(TableflowTopicByobAwsPtrOutput)
}

// The Cluster API Credentials.
func (o TableflowTopicOutput) Credentials() TableflowTopicCredentialsPtrOutput {
	return o.ApplyT(func(v *TableflowTopic) TableflowTopicCredentialsPtrOutput { return v.Credentials }).(TableflowTopicCredentialsPtrOutput)
}

// The name of the Kafka topic for which Tableflow is enabled.
func (o TableflowTopicOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *TableflowTopic) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// (Optional Boolean) This flag determines whether to enable compaction for the Tableflow enabled topic.
func (o TableflowTopicOutput) EnableCompaction() pulumi.BoolOutput {
	return o.ApplyT(func(v *TableflowTopic) pulumi.BoolOutput { return v.EnableCompaction }).(pulumi.BoolOutput)
}

// (Optional Boolean) This flag determines whether to enable partitioning for the Tableflow enabled topic.
func (o TableflowTopicOutput) EnablePartitioning() pulumi.BoolOutput {
	return o.ApplyT(func(v *TableflowTopic) pulumi.BoolOutput { return v.EnablePartitioning }).(pulumi.BoolOutput)
}

// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
func (o TableflowTopicOutput) Environment() TableflowTopicEnvironmentOutput {
	return o.ApplyT(func(v *TableflowTopic) TableflowTopicEnvironmentOutput { return v.Environment }).(TableflowTopicEnvironmentOutput)
}

func (o TableflowTopicOutput) KafkaCluster() TableflowTopicKafkaClusterOutput {
	return o.ApplyT(func(v *TableflowTopic) TableflowTopicKafkaClusterOutput { return v.KafkaCluster }).(TableflowTopicKafkaClusterOutput)
}

// The configuration of the Confluent managed storage. See [Quick Start with Managed Storage](https://docs.confluent.io/cloud/current/topics/tableflow/get-started/quick-start-managed-storage.html#cloud-tableflow-quick-start-managed-storage) for more details.
func (o TableflowTopicOutput) ManagedStorages() TableflowTopicManagedStorageArrayOutput {
	return o.ApplyT(func(v *TableflowTopic) TableflowTopicManagedStorageArrayOutput { return v.ManagedStorages }).(TableflowTopicManagedStorageArrayOutput)
}

// The strategy to handle record failures in the Tableflow enabled topic during materialization. Accepted values are `SKIP`, `SUSPEND`. For `SKIP`, we skip the bad records and move to the next record. For `SUSPEND`, we suspend the materialization of the topic.
func (o TableflowTopicOutput) RecordFailureStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v *TableflowTopic) pulumi.StringOutput { return v.RecordFailureStrategy }).(pulumi.StringOutput)
}

// The max age of snapshots (Iceberg) or versions (Delta) (snapshot/version expiration) to keep on the table in milliseconds for the Tableflow enabled topic.
func (o TableflowTopicOutput) RetentionMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableflowTopic) pulumi.StringPtrOutput { return v.RetentionMs }).(pulumi.StringPtrOutput)
}

// (Optional Boolean) Indicates whether the Tableflow should be suspended.
func (o TableflowTopicOutput) Suspended() pulumi.BoolOutput {
	return o.ApplyT(func(v *TableflowTopic) pulumi.BoolOutput { return v.Suspended }).(pulumi.BoolOutput)
}

// The supported table formats for the Tableflow-enabled topic. Accepted values are `DELTA`, `ICEBERG`.
func (o TableflowTopicOutput) TableFormats() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TableflowTopic) pulumi.StringArrayOutput { return v.TableFormats }).(pulumi.StringArrayOutput)
}

type TableflowTopicArrayOutput struct{ *pulumi.OutputState }

func (TableflowTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TableflowTopic)(nil)).Elem()
}

func (o TableflowTopicArrayOutput) ToTableflowTopicArrayOutput() TableflowTopicArrayOutput {
	return o
}

func (o TableflowTopicArrayOutput) ToTableflowTopicArrayOutputWithContext(ctx context.Context) TableflowTopicArrayOutput {
	return o
}

func (o TableflowTopicArrayOutput) Index(i pulumi.IntInput) TableflowTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TableflowTopic {
		return vs[0].([]*TableflowTopic)[vs[1].(int)]
	}).(TableflowTopicOutput)
}

type TableflowTopicMapOutput struct{ *pulumi.OutputState }

func (TableflowTopicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TableflowTopic)(nil)).Elem()
}

func (o TableflowTopicMapOutput) ToTableflowTopicMapOutput() TableflowTopicMapOutput {
	return o
}

func (o TableflowTopicMapOutput) ToTableflowTopicMapOutputWithContext(ctx context.Context) TableflowTopicMapOutput {
	return o
}

func (o TableflowTopicMapOutput) MapIndex(k pulumi.StringInput) TableflowTopicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TableflowTopic {
		return vs[0].(map[string]*TableflowTopic)[vs[1].(string)]
	}).(TableflowTopicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TableflowTopicInput)(nil)).Elem(), &TableflowTopic{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableflowTopicArrayInput)(nil)).Elem(), TableflowTopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableflowTopicMapInput)(nil)).Elem(), TableflowTopicMap{})
	pulumi.RegisterOutputType(TableflowTopicOutput{})
	pulumi.RegisterOutputType(TableflowTopicArrayOutput{})
	pulumi.RegisterOutputType(TableflowTopicMapOutput{})
}

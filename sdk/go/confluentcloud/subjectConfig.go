// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// You can import a Subject Config by using the Schema Registry cluster ID, Subject name in the format `<Schema Registry cluster ID>/<Subject name>`, for example$ export IMPORT_SCHEMA_REGISTRY_API_KEY="<schema_registry_api_key>" $ export IMPORT_SCHEMA_REGISTRY_API_SECRET="<schema_registry_api_secret>" $ export IMPORT_SCHEMA_REGISTRY_REST_ENDPOINT="<schema_registry_rest_endpoint>"
//
// ```sh
//
//	$ pulumi import confluentcloud:index/subjectConfig:SubjectConfig example lsrc-abc123/test-subject
//
// ```
//
//	!> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
type SubjectConfig struct {
	pulumi.CustomResourceState

	// The Compatibility Level of the specified subject. Accepted values are: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`, `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, and `NONE`. See the [Compatibility Types](https://docs.confluent.io/platform/current/schema-registry/avro.html#compatibility-types) for more details.
	CompatibilityLevel pulumi.StringOutput `pulumi:"compatibilityLevel"`
	// The Cluster API Credentials.
	Credentials SubjectConfigCredentialsPtrOutput `pulumi:"credentials"`
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          pulumi.StringPtrOutput                      `pulumi:"restEndpoint"`
	SchemaRegistryCluster SubjectConfigSchemaRegistryClusterPtrOutput `pulumi:"schemaRegistryCluster"`
	// The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`.
	SubjectName pulumi.StringOutput `pulumi:"subjectName"`
}

// NewSubjectConfig registers a new resource with the given unique name, arguments, and options.
func NewSubjectConfig(ctx *pulumi.Context,
	name string, args *SubjectConfigArgs, opts ...pulumi.ResourceOption) (*SubjectConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SubjectName == nil {
		return nil, errors.New("invalid value for required argument 'SubjectName'")
	}
	if args.Credentials != nil {
		args.Credentials = pulumi.ToSecret(args.Credentials).(SubjectConfigCredentialsPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"credentials",
	})
	opts = append(opts, secrets)
	var resource SubjectConfig
	err := ctx.RegisterResource("confluentcloud:index/subjectConfig:SubjectConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubjectConfig gets an existing SubjectConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubjectConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubjectConfigState, opts ...pulumi.ResourceOption) (*SubjectConfig, error) {
	var resource SubjectConfig
	err := ctx.ReadResource("confluentcloud:index/subjectConfig:SubjectConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SubjectConfig resources.
type subjectConfigState struct {
	// The Compatibility Level of the specified subject. Accepted values are: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`, `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, and `NONE`. See the [Compatibility Types](https://docs.confluent.io/platform/current/schema-registry/avro.html#compatibility-types) for more details.
	CompatibilityLevel *string `pulumi:"compatibilityLevel"`
	// The Cluster API Credentials.
	Credentials *SubjectConfigCredentials `pulumi:"credentials"`
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          *string                             `pulumi:"restEndpoint"`
	SchemaRegistryCluster *SubjectConfigSchemaRegistryCluster `pulumi:"schemaRegistryCluster"`
	// The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`.
	SubjectName *string `pulumi:"subjectName"`
}

type SubjectConfigState struct {
	// The Compatibility Level of the specified subject. Accepted values are: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`, `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, and `NONE`. See the [Compatibility Types](https://docs.confluent.io/platform/current/schema-registry/avro.html#compatibility-types) for more details.
	CompatibilityLevel pulumi.StringPtrInput
	// The Cluster API Credentials.
	Credentials SubjectConfigCredentialsPtrInput
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          pulumi.StringPtrInput
	SchemaRegistryCluster SubjectConfigSchemaRegistryClusterPtrInput
	// The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`.
	SubjectName pulumi.StringPtrInput
}

func (SubjectConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*subjectConfigState)(nil)).Elem()
}

type subjectConfigArgs struct {
	// The Compatibility Level of the specified subject. Accepted values are: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`, `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, and `NONE`. See the [Compatibility Types](https://docs.confluent.io/platform/current/schema-registry/avro.html#compatibility-types) for more details.
	CompatibilityLevel *string `pulumi:"compatibilityLevel"`
	// The Cluster API Credentials.
	Credentials *SubjectConfigCredentials `pulumi:"credentials"`
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          *string                             `pulumi:"restEndpoint"`
	SchemaRegistryCluster *SubjectConfigSchemaRegistryCluster `pulumi:"schemaRegistryCluster"`
	// The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`.
	SubjectName string `pulumi:"subjectName"`
}

// The set of arguments for constructing a SubjectConfig resource.
type SubjectConfigArgs struct {
	// The Compatibility Level of the specified subject. Accepted values are: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`, `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, and `NONE`. See the [Compatibility Types](https://docs.confluent.io/platform/current/schema-registry/avro.html#compatibility-types) for more details.
	CompatibilityLevel pulumi.StringPtrInput
	// The Cluster API Credentials.
	Credentials SubjectConfigCredentialsPtrInput
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          pulumi.StringPtrInput
	SchemaRegistryCluster SubjectConfigSchemaRegistryClusterPtrInput
	// The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`.
	SubjectName pulumi.StringInput
}

func (SubjectConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subjectConfigArgs)(nil)).Elem()
}

type SubjectConfigInput interface {
	pulumi.Input

	ToSubjectConfigOutput() SubjectConfigOutput
	ToSubjectConfigOutputWithContext(ctx context.Context) SubjectConfigOutput
}

func (*SubjectConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectConfig)(nil)).Elem()
}

func (i *SubjectConfig) ToSubjectConfigOutput() SubjectConfigOutput {
	return i.ToSubjectConfigOutputWithContext(context.Background())
}

func (i *SubjectConfig) ToSubjectConfigOutputWithContext(ctx context.Context) SubjectConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectConfigOutput)
}

// SubjectConfigArrayInput is an input type that accepts SubjectConfigArray and SubjectConfigArrayOutput values.
// You can construct a concrete instance of `SubjectConfigArrayInput` via:
//
//	SubjectConfigArray{ SubjectConfigArgs{...} }
type SubjectConfigArrayInput interface {
	pulumi.Input

	ToSubjectConfigArrayOutput() SubjectConfigArrayOutput
	ToSubjectConfigArrayOutputWithContext(context.Context) SubjectConfigArrayOutput
}

type SubjectConfigArray []SubjectConfigInput

func (SubjectConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubjectConfig)(nil)).Elem()
}

func (i SubjectConfigArray) ToSubjectConfigArrayOutput() SubjectConfigArrayOutput {
	return i.ToSubjectConfigArrayOutputWithContext(context.Background())
}

func (i SubjectConfigArray) ToSubjectConfigArrayOutputWithContext(ctx context.Context) SubjectConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectConfigArrayOutput)
}

// SubjectConfigMapInput is an input type that accepts SubjectConfigMap and SubjectConfigMapOutput values.
// You can construct a concrete instance of `SubjectConfigMapInput` via:
//
//	SubjectConfigMap{ "key": SubjectConfigArgs{...} }
type SubjectConfigMapInput interface {
	pulumi.Input

	ToSubjectConfigMapOutput() SubjectConfigMapOutput
	ToSubjectConfigMapOutputWithContext(context.Context) SubjectConfigMapOutput
}

type SubjectConfigMap map[string]SubjectConfigInput

func (SubjectConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubjectConfig)(nil)).Elem()
}

func (i SubjectConfigMap) ToSubjectConfigMapOutput() SubjectConfigMapOutput {
	return i.ToSubjectConfigMapOutputWithContext(context.Background())
}

func (i SubjectConfigMap) ToSubjectConfigMapOutputWithContext(ctx context.Context) SubjectConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectConfigMapOutput)
}

type SubjectConfigOutput struct{ *pulumi.OutputState }

func (SubjectConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectConfig)(nil)).Elem()
}

func (o SubjectConfigOutput) ToSubjectConfigOutput() SubjectConfigOutput {
	return o
}

func (o SubjectConfigOutput) ToSubjectConfigOutputWithContext(ctx context.Context) SubjectConfigOutput {
	return o
}

// The Compatibility Level of the specified subject. Accepted values are: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`, `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, and `NONE`. See the [Compatibility Types](https://docs.confluent.io/platform/current/schema-registry/avro.html#compatibility-types) for more details.
func (o SubjectConfigOutput) CompatibilityLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *SubjectConfig) pulumi.StringOutput { return v.CompatibilityLevel }).(pulumi.StringOutput)
}

// The Cluster API Credentials.
func (o SubjectConfigOutput) Credentials() SubjectConfigCredentialsPtrOutput {
	return o.ApplyT(func(v *SubjectConfig) SubjectConfigCredentialsPtrOutput { return v.Credentials }).(SubjectConfigCredentialsPtrOutput)
}

// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
func (o SubjectConfigOutput) RestEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubjectConfig) pulumi.StringPtrOutput { return v.RestEndpoint }).(pulumi.StringPtrOutput)
}

func (o SubjectConfigOutput) SchemaRegistryCluster() SubjectConfigSchemaRegistryClusterPtrOutput {
	return o.ApplyT(func(v *SubjectConfig) SubjectConfigSchemaRegistryClusterPtrOutput { return v.SchemaRegistryCluster }).(SubjectConfigSchemaRegistryClusterPtrOutput)
}

// The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`.
func (o SubjectConfigOutput) SubjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *SubjectConfig) pulumi.StringOutput { return v.SubjectName }).(pulumi.StringOutput)
}

type SubjectConfigArrayOutput struct{ *pulumi.OutputState }

func (SubjectConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubjectConfig)(nil)).Elem()
}

func (o SubjectConfigArrayOutput) ToSubjectConfigArrayOutput() SubjectConfigArrayOutput {
	return o
}

func (o SubjectConfigArrayOutput) ToSubjectConfigArrayOutputWithContext(ctx context.Context) SubjectConfigArrayOutput {
	return o
}

func (o SubjectConfigArrayOutput) Index(i pulumi.IntInput) SubjectConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SubjectConfig {
		return vs[0].([]*SubjectConfig)[vs[1].(int)]
	}).(SubjectConfigOutput)
}

type SubjectConfigMapOutput struct{ *pulumi.OutputState }

func (SubjectConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubjectConfig)(nil)).Elem()
}

func (o SubjectConfigMapOutput) ToSubjectConfigMapOutput() SubjectConfigMapOutput {
	return o
}

func (o SubjectConfigMapOutput) ToSubjectConfigMapOutputWithContext(ctx context.Context) SubjectConfigMapOutput {
	return o
}

func (o SubjectConfigMapOutput) MapIndex(k pulumi.StringInput) SubjectConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SubjectConfig {
		return vs[0].(map[string]*SubjectConfig)[vs[1].(string)]
	}).(SubjectConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubjectConfigInput)(nil)).Elem(), &SubjectConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubjectConfigArrayInput)(nil)).Elem(), SubjectConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubjectConfigMapInput)(nil)).Elem(), SubjectConfigMap{})
	pulumi.RegisterOutputType(SubjectConfigOutput{})
	pulumi.RegisterOutputType(SubjectConfigArrayOutput{})
	pulumi.RegisterOutputType(SubjectConfigMapOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
//
// `SchemaRegistryDek` describes a Schema Registry Data Encryption Key (DEK) data source.
//
// ## Example Usage
//
// ### Option #1: Manage multiple Schema Registry clusters in the same Pulumi Stack
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := confluentcloud.LookupSchemaRegistryDek(ctx, &confluentcloud.LookupSchemaRegistryDekArgs{
//				SchemaRegistryCluster: confluentcloud.GetSchemaRegistryDekSchemaRegistryCluster{
//					Id: essentials.Id,
//				},
//				RestEndpoint: pulumi.StringRef(essentials.RestEndpoint),
//				Credentials: confluentcloud.GetSchemaRegistryDekCredentials{
//					Key:    "<Schema Registry API Key for data.confluent_schema_registry_cluster.essentials>",
//					Secret: "<Schema Registry API Secret for data.confluent_schema_registry_cluster.essentials>",
//				},
//				KekName:     "my_kek",
//				SubjectName: "my_subject",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Option #2: Manage a single Schema Registry cluster in the same Pulumi Stack
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := confluentcloud.LookupSchemaRegistryDek(ctx, &confluentcloud.LookupSchemaRegistryDekArgs{
//				KekName:     "my_kek",
//				SubjectName: "my_subject",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSchemaRegistryDek(ctx *pulumi.Context, args *LookupSchemaRegistryDekArgs, opts ...pulumi.InvokeOption) (*LookupSchemaRegistryDekResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSchemaRegistryDekResult
	err := ctx.Invoke("confluentcloud:index/getSchemaRegistryDek:getSchemaRegistryDek", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSchemaRegistryDek.
type LookupSchemaRegistryDekArgs struct {
	// Accepted values are: `AES128_GCM`, `AES256_GCM`, and `AES256_SIV`. Defaults to `AES256_GCM`.
	//
	// > **Note:** A Schema Registry API key consists of a key and a secret. Schema Registry API keys are required to interact with Schema Registry clusters in Confluent Cloud. Each Schema Registry API key is valid for one specific Schema Registry cluster.
	Algorithm   *string                          `pulumi:"algorithm"`
	Credentials *GetSchemaRegistryDekCredentials `pulumi:"credentials"`
	// The name of the KEK used to encrypt this DEK.
	KekName string `pulumi:"kekName"`
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          *string                                    `pulumi:"restEndpoint"`
	SchemaRegistryCluster *GetSchemaRegistryDekSchemaRegistryCluster `pulumi:"schemaRegistryCluster"`
	// The subject for this DEK.
	SubjectName string `pulumi:"subjectName"`
	// The version of this DEK. Defaults to `1`.
	Version *int `pulumi:"version"`
}

// A collection of values returned by getSchemaRegistryDek.
type LookupSchemaRegistryDekResult struct {
	Algorithm   *string                          `pulumi:"algorithm"`
	Credentials *GetSchemaRegistryDekCredentials `pulumi:"credentials"`
	// (Optional String) The encrypted key material for the DEK.
	EncryptedKeyMaterial string `pulumi:"encryptedKeyMaterial"`
	// (Optional Boolean) An optional flag to control whether a dek should be soft or hard deleted.
	HardDelete bool `pulumi:"hardDelete"`
	// The provider-assigned unique ID for this managed resource.
	Id      string `pulumi:"id"`
	KekName string `pulumi:"kekName"`
	// (Optional String) The decrypted version of encrypted key material.
	KeyMaterial           string                                     `pulumi:"keyMaterial"`
	RestEndpoint          *string                                    `pulumi:"restEndpoint"`
	SchemaRegistryCluster *GetSchemaRegistryDekSchemaRegistryCluster `pulumi:"schemaRegistryCluster"`
	SubjectName           string                                     `pulumi:"subjectName"`
	Version               *int                                       `pulumi:"version"`
}

func LookupSchemaRegistryDekOutput(ctx *pulumi.Context, args LookupSchemaRegistryDekOutputArgs, opts ...pulumi.InvokeOption) LookupSchemaRegistryDekResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSchemaRegistryDekResultOutput, error) {
			args := v.(LookupSchemaRegistryDekArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupSchemaRegistryDekResult
			secret, err := ctx.InvokePackageRaw("confluentcloud:index/getSchemaRegistryDek:getSchemaRegistryDek", args, &rv, "", opts...)
			if err != nil {
				return LookupSchemaRegistryDekResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupSchemaRegistryDekResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupSchemaRegistryDekResultOutput), nil
			}
			return output, nil
		}).(LookupSchemaRegistryDekResultOutput)
}

// A collection of arguments for invoking getSchemaRegistryDek.
type LookupSchemaRegistryDekOutputArgs struct {
	// Accepted values are: `AES128_GCM`, `AES256_GCM`, and `AES256_SIV`. Defaults to `AES256_GCM`.
	//
	// > **Note:** A Schema Registry API key consists of a key and a secret. Schema Registry API keys are required to interact with Schema Registry clusters in Confluent Cloud. Each Schema Registry API key is valid for one specific Schema Registry cluster.
	Algorithm   pulumi.StringPtrInput                   `pulumi:"algorithm"`
	Credentials GetSchemaRegistryDekCredentialsPtrInput `pulumi:"credentials"`
	// The name of the KEK used to encrypt this DEK.
	KekName pulumi.StringInput `pulumi:"kekName"`
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          pulumi.StringPtrInput                             `pulumi:"restEndpoint"`
	SchemaRegistryCluster GetSchemaRegistryDekSchemaRegistryClusterPtrInput `pulumi:"schemaRegistryCluster"`
	// The subject for this DEK.
	SubjectName pulumi.StringInput `pulumi:"subjectName"`
	// The version of this DEK. Defaults to `1`.
	Version pulumi.IntPtrInput `pulumi:"version"`
}

func (LookupSchemaRegistryDekOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSchemaRegistryDekArgs)(nil)).Elem()
}

// A collection of values returned by getSchemaRegistryDek.
type LookupSchemaRegistryDekResultOutput struct{ *pulumi.OutputState }

func (LookupSchemaRegistryDekResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSchemaRegistryDekResult)(nil)).Elem()
}

func (o LookupSchemaRegistryDekResultOutput) ToLookupSchemaRegistryDekResultOutput() LookupSchemaRegistryDekResultOutput {
	return o
}

func (o LookupSchemaRegistryDekResultOutput) ToLookupSchemaRegistryDekResultOutputWithContext(ctx context.Context) LookupSchemaRegistryDekResultOutput {
	return o
}

func (o LookupSchemaRegistryDekResultOutput) Algorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSchemaRegistryDekResult) *string { return v.Algorithm }).(pulumi.StringPtrOutput)
}

func (o LookupSchemaRegistryDekResultOutput) Credentials() GetSchemaRegistryDekCredentialsPtrOutput {
	return o.ApplyT(func(v LookupSchemaRegistryDekResult) *GetSchemaRegistryDekCredentials { return v.Credentials }).(GetSchemaRegistryDekCredentialsPtrOutput)
}

// (Optional String) The encrypted key material for the DEK.
func (o LookupSchemaRegistryDekResultOutput) EncryptedKeyMaterial() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaRegistryDekResult) string { return v.EncryptedKeyMaterial }).(pulumi.StringOutput)
}

// (Optional Boolean) An optional flag to control whether a dek should be soft or hard deleted.
func (o LookupSchemaRegistryDekResultOutput) HardDelete() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSchemaRegistryDekResult) bool { return v.HardDelete }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSchemaRegistryDekResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaRegistryDekResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupSchemaRegistryDekResultOutput) KekName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaRegistryDekResult) string { return v.KekName }).(pulumi.StringOutput)
}

// (Optional String) The decrypted version of encrypted key material.
func (o LookupSchemaRegistryDekResultOutput) KeyMaterial() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaRegistryDekResult) string { return v.KeyMaterial }).(pulumi.StringOutput)
}

func (o LookupSchemaRegistryDekResultOutput) RestEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSchemaRegistryDekResult) *string { return v.RestEndpoint }).(pulumi.StringPtrOutput)
}

func (o LookupSchemaRegistryDekResultOutput) SchemaRegistryCluster() GetSchemaRegistryDekSchemaRegistryClusterPtrOutput {
	return o.ApplyT(func(v LookupSchemaRegistryDekResult) *GetSchemaRegistryDekSchemaRegistryCluster {
		return v.SchemaRegistryCluster
	}).(GetSchemaRegistryDekSchemaRegistryClusterPtrOutput)
}

func (o LookupSchemaRegistryDekResultOutput) SubjectName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaRegistryDekResult) string { return v.SubjectName }).(pulumi.StringOutput)
}

func (o LookupSchemaRegistryDekResultOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupSchemaRegistryDekResult) *int { return v.Version }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSchemaRegistryDekResultOutput{})
}

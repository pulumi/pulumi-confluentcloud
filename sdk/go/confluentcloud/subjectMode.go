// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// You can import a Subject Mode by using the Schema Registry cluster ID, Subject name in the format `<Schema Registry cluster ID>/<Subject name>`, for example:
//
// $ export IMPORT_SCHEMA_REGISTRY_API_KEY="<schema_registry_api_key>"
//
// $ export IMPORT_SCHEMA_REGISTRY_API_SECRET="<schema_registry_api_secret>"
//
// $ export IMPORT_SCHEMA_REGISTRY_REST_ENDPOINT="<schema_registry_rest_endpoint>"
//
// ```sh
// $ pulumi import confluentcloud:index/subjectMode:SubjectMode example lsrc-abc123/test-subject
// ```
//
// !> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
type SubjectMode struct {
	pulumi.CustomResourceState

	// The Cluster API Credentials.
	Credentials SubjectModeCredentialsPtrOutput `pulumi:"credentials"`
	// The mode of the specified subject. Accepted values are: `READWRITE`, `READONLY`, `READONLY_OVERRIDE`, and `IMPORT`.
	Mode pulumi.StringOutput `pulumi:"mode"`
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          pulumi.StringPtrOutput                    `pulumi:"restEndpoint"`
	SchemaRegistryCluster SubjectModeSchemaRegistryClusterPtrOutput `pulumi:"schemaRegistryCluster"`
	// The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`.
	SubjectName pulumi.StringOutput `pulumi:"subjectName"`
}

// NewSubjectMode registers a new resource with the given unique name, arguments, and options.
func NewSubjectMode(ctx *pulumi.Context,
	name string, args *SubjectModeArgs, opts ...pulumi.ResourceOption) (*SubjectMode, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SubjectName == nil {
		return nil, errors.New("invalid value for required argument 'SubjectName'")
	}
	if args.Credentials != nil {
		args.Credentials = pulumi.ToSecret(args.Credentials).(SubjectModeCredentialsPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"credentials",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SubjectMode
	err := ctx.RegisterResource("confluentcloud:index/subjectMode:SubjectMode", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubjectMode gets an existing SubjectMode resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubjectMode(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubjectModeState, opts ...pulumi.ResourceOption) (*SubjectMode, error) {
	var resource SubjectMode
	err := ctx.ReadResource("confluentcloud:index/subjectMode:SubjectMode", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SubjectMode resources.
type subjectModeState struct {
	// The Cluster API Credentials.
	Credentials *SubjectModeCredentials `pulumi:"credentials"`
	// The mode of the specified subject. Accepted values are: `READWRITE`, `READONLY`, `READONLY_OVERRIDE`, and `IMPORT`.
	Mode *string `pulumi:"mode"`
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          *string                           `pulumi:"restEndpoint"`
	SchemaRegistryCluster *SubjectModeSchemaRegistryCluster `pulumi:"schemaRegistryCluster"`
	// The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`.
	SubjectName *string `pulumi:"subjectName"`
}

type SubjectModeState struct {
	// The Cluster API Credentials.
	Credentials SubjectModeCredentialsPtrInput
	// The mode of the specified subject. Accepted values are: `READWRITE`, `READONLY`, `READONLY_OVERRIDE`, and `IMPORT`.
	Mode pulumi.StringPtrInput
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          pulumi.StringPtrInput
	SchemaRegistryCluster SubjectModeSchemaRegistryClusterPtrInput
	// The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`.
	SubjectName pulumi.StringPtrInput
}

func (SubjectModeState) ElementType() reflect.Type {
	return reflect.TypeOf((*subjectModeState)(nil)).Elem()
}

type subjectModeArgs struct {
	// The Cluster API Credentials.
	Credentials *SubjectModeCredentials `pulumi:"credentials"`
	// The mode of the specified subject. Accepted values are: `READWRITE`, `READONLY`, `READONLY_OVERRIDE`, and `IMPORT`.
	Mode *string `pulumi:"mode"`
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          *string                           `pulumi:"restEndpoint"`
	SchemaRegistryCluster *SubjectModeSchemaRegistryCluster `pulumi:"schemaRegistryCluster"`
	// The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`.
	SubjectName string `pulumi:"subjectName"`
}

// The set of arguments for constructing a SubjectMode resource.
type SubjectModeArgs struct {
	// The Cluster API Credentials.
	Credentials SubjectModeCredentialsPtrInput
	// The mode of the specified subject. Accepted values are: `READWRITE`, `READONLY`, `READONLY_OVERRIDE`, and `IMPORT`.
	Mode pulumi.StringPtrInput
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          pulumi.StringPtrInput
	SchemaRegistryCluster SubjectModeSchemaRegistryClusterPtrInput
	// The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`.
	SubjectName pulumi.StringInput
}

func (SubjectModeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subjectModeArgs)(nil)).Elem()
}

type SubjectModeInput interface {
	pulumi.Input

	ToSubjectModeOutput() SubjectModeOutput
	ToSubjectModeOutputWithContext(ctx context.Context) SubjectModeOutput
}

func (*SubjectMode) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectMode)(nil)).Elem()
}

func (i *SubjectMode) ToSubjectModeOutput() SubjectModeOutput {
	return i.ToSubjectModeOutputWithContext(context.Background())
}

func (i *SubjectMode) ToSubjectModeOutputWithContext(ctx context.Context) SubjectModeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectModeOutput)
}

// SubjectModeArrayInput is an input type that accepts SubjectModeArray and SubjectModeArrayOutput values.
// You can construct a concrete instance of `SubjectModeArrayInput` via:
//
//	SubjectModeArray{ SubjectModeArgs{...} }
type SubjectModeArrayInput interface {
	pulumi.Input

	ToSubjectModeArrayOutput() SubjectModeArrayOutput
	ToSubjectModeArrayOutputWithContext(context.Context) SubjectModeArrayOutput
}

type SubjectModeArray []SubjectModeInput

func (SubjectModeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubjectMode)(nil)).Elem()
}

func (i SubjectModeArray) ToSubjectModeArrayOutput() SubjectModeArrayOutput {
	return i.ToSubjectModeArrayOutputWithContext(context.Background())
}

func (i SubjectModeArray) ToSubjectModeArrayOutputWithContext(ctx context.Context) SubjectModeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectModeArrayOutput)
}

// SubjectModeMapInput is an input type that accepts SubjectModeMap and SubjectModeMapOutput values.
// You can construct a concrete instance of `SubjectModeMapInput` via:
//
//	SubjectModeMap{ "key": SubjectModeArgs{...} }
type SubjectModeMapInput interface {
	pulumi.Input

	ToSubjectModeMapOutput() SubjectModeMapOutput
	ToSubjectModeMapOutputWithContext(context.Context) SubjectModeMapOutput
}

type SubjectModeMap map[string]SubjectModeInput

func (SubjectModeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubjectMode)(nil)).Elem()
}

func (i SubjectModeMap) ToSubjectModeMapOutput() SubjectModeMapOutput {
	return i.ToSubjectModeMapOutputWithContext(context.Background())
}

func (i SubjectModeMap) ToSubjectModeMapOutputWithContext(ctx context.Context) SubjectModeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectModeMapOutput)
}

type SubjectModeOutput struct{ *pulumi.OutputState }

func (SubjectModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectMode)(nil)).Elem()
}

func (o SubjectModeOutput) ToSubjectModeOutput() SubjectModeOutput {
	return o
}

func (o SubjectModeOutput) ToSubjectModeOutputWithContext(ctx context.Context) SubjectModeOutput {
	return o
}

// The Cluster API Credentials.
func (o SubjectModeOutput) Credentials() SubjectModeCredentialsPtrOutput {
	return o.ApplyT(func(v *SubjectMode) SubjectModeCredentialsPtrOutput { return v.Credentials }).(SubjectModeCredentialsPtrOutput)
}

// The mode of the specified subject. Accepted values are: `READWRITE`, `READONLY`, `READONLY_OVERRIDE`, and `IMPORT`.
func (o SubjectModeOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *SubjectMode) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
func (o SubjectModeOutput) RestEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubjectMode) pulumi.StringPtrOutput { return v.RestEndpoint }).(pulumi.StringPtrOutput)
}

func (o SubjectModeOutput) SchemaRegistryCluster() SubjectModeSchemaRegistryClusterPtrOutput {
	return o.ApplyT(func(v *SubjectMode) SubjectModeSchemaRegistryClusterPtrOutput { return v.SchemaRegistryCluster }).(SubjectModeSchemaRegistryClusterPtrOutput)
}

// The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`.
func (o SubjectModeOutput) SubjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *SubjectMode) pulumi.StringOutput { return v.SubjectName }).(pulumi.StringOutput)
}

type SubjectModeArrayOutput struct{ *pulumi.OutputState }

func (SubjectModeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubjectMode)(nil)).Elem()
}

func (o SubjectModeArrayOutput) ToSubjectModeArrayOutput() SubjectModeArrayOutput {
	return o
}

func (o SubjectModeArrayOutput) ToSubjectModeArrayOutputWithContext(ctx context.Context) SubjectModeArrayOutput {
	return o
}

func (o SubjectModeArrayOutput) Index(i pulumi.IntInput) SubjectModeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SubjectMode {
		return vs[0].([]*SubjectMode)[vs[1].(int)]
	}).(SubjectModeOutput)
}

type SubjectModeMapOutput struct{ *pulumi.OutputState }

func (SubjectModeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubjectMode)(nil)).Elem()
}

func (o SubjectModeMapOutput) ToSubjectModeMapOutput() SubjectModeMapOutput {
	return o
}

func (o SubjectModeMapOutput) ToSubjectModeMapOutputWithContext(ctx context.Context) SubjectModeMapOutput {
	return o
}

func (o SubjectModeMapOutput) MapIndex(k pulumi.StringInput) SubjectModeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SubjectMode {
		return vs[0].(map[string]*SubjectMode)[vs[1].(string)]
	}).(SubjectModeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubjectModeInput)(nil)).Elem(), &SubjectMode{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubjectModeArrayInput)(nil)).Elem(), SubjectModeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubjectModeMapInput)(nil)).Elem(), SubjectModeMap{})
	pulumi.RegisterOutputType(SubjectModeOutput{})
	pulumi.RegisterOutputType(SubjectModeArrayOutput{})
	pulumi.RegisterOutputType(SubjectModeMapOutput{})
}

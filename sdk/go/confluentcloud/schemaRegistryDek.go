// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SchemaRegistryDek struct {
	pulumi.CustomResourceState

	Algorithm pulumi.StringPtrOutput `pulumi:"algorithm"`
	// The Cluster API Credentials.
	Credentials          SchemaRegistryDekCredentialsPtrOutput `pulumi:"credentials"`
	EncryptedKeyMaterial pulumi.StringOutput                   `pulumi:"encryptedKeyMaterial"`
	// Controls whether a dek should be soft or hard deleted. Set it to `true` if you want to hard delete a schema registry dek
	// on destroy. Defaults to `false` (soft delete).
	HardDelete  pulumi.BoolPtrOutput `pulumi:"hardDelete"`
	KekName     pulumi.StringOutput  `pulumi:"kekName"`
	KeyMaterial pulumi.StringOutput  `pulumi:"keyMaterial"`
	// The REST endpoint of the Schema Registry cluster, for example,
	// `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          pulumi.StringPtrOutput                          `pulumi:"restEndpoint"`
	SchemaRegistryCluster SchemaRegistryDekSchemaRegistryClusterPtrOutput `pulumi:"schemaRegistryCluster"`
	SubjectName           pulumi.StringOutput                             `pulumi:"subjectName"`
	Version               pulumi.IntPtrOutput                             `pulumi:"version"`
}

// NewSchemaRegistryDek registers a new resource with the given unique name, arguments, and options.
func NewSchemaRegistryDek(ctx *pulumi.Context,
	name string, args *SchemaRegistryDekArgs, opts ...pulumi.ResourceOption) (*SchemaRegistryDek, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KekName == nil {
		return nil, errors.New("invalid value for required argument 'KekName'")
	}
	if args.SubjectName == nil {
		return nil, errors.New("invalid value for required argument 'SubjectName'")
	}
	if args.Credentials != nil {
		args.Credentials = pulumi.ToSecret(args.Credentials).(SchemaRegistryDekCredentialsPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"credentials",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SchemaRegistryDek
	err := ctx.RegisterResource("confluentcloud:index/schemaRegistryDek:SchemaRegistryDek", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSchemaRegistryDek gets an existing SchemaRegistryDek resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchemaRegistryDek(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SchemaRegistryDekState, opts ...pulumi.ResourceOption) (*SchemaRegistryDek, error) {
	var resource SchemaRegistryDek
	err := ctx.ReadResource("confluentcloud:index/schemaRegistryDek:SchemaRegistryDek", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SchemaRegistryDek resources.
type schemaRegistryDekState struct {
	Algorithm *string `pulumi:"algorithm"`
	// The Cluster API Credentials.
	Credentials          *SchemaRegistryDekCredentials `pulumi:"credentials"`
	EncryptedKeyMaterial *string                       `pulumi:"encryptedKeyMaterial"`
	// Controls whether a dek should be soft or hard deleted. Set it to `true` if you want to hard delete a schema registry dek
	// on destroy. Defaults to `false` (soft delete).
	HardDelete  *bool   `pulumi:"hardDelete"`
	KekName     *string `pulumi:"kekName"`
	KeyMaterial *string `pulumi:"keyMaterial"`
	// The REST endpoint of the Schema Registry cluster, for example,
	// `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          *string                                 `pulumi:"restEndpoint"`
	SchemaRegistryCluster *SchemaRegistryDekSchemaRegistryCluster `pulumi:"schemaRegistryCluster"`
	SubjectName           *string                                 `pulumi:"subjectName"`
	Version               *int                                    `pulumi:"version"`
}

type SchemaRegistryDekState struct {
	Algorithm pulumi.StringPtrInput
	// The Cluster API Credentials.
	Credentials          SchemaRegistryDekCredentialsPtrInput
	EncryptedKeyMaterial pulumi.StringPtrInput
	// Controls whether a dek should be soft or hard deleted. Set it to `true` if you want to hard delete a schema registry dek
	// on destroy. Defaults to `false` (soft delete).
	HardDelete  pulumi.BoolPtrInput
	KekName     pulumi.StringPtrInput
	KeyMaterial pulumi.StringPtrInput
	// The REST endpoint of the Schema Registry cluster, for example,
	// `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          pulumi.StringPtrInput
	SchemaRegistryCluster SchemaRegistryDekSchemaRegistryClusterPtrInput
	SubjectName           pulumi.StringPtrInput
	Version               pulumi.IntPtrInput
}

func (SchemaRegistryDekState) ElementType() reflect.Type {
	return reflect.TypeOf((*schemaRegistryDekState)(nil)).Elem()
}

type schemaRegistryDekArgs struct {
	Algorithm *string `pulumi:"algorithm"`
	// The Cluster API Credentials.
	Credentials          *SchemaRegistryDekCredentials `pulumi:"credentials"`
	EncryptedKeyMaterial *string                       `pulumi:"encryptedKeyMaterial"`
	// Controls whether a dek should be soft or hard deleted. Set it to `true` if you want to hard delete a schema registry dek
	// on destroy. Defaults to `false` (soft delete).
	HardDelete *bool  `pulumi:"hardDelete"`
	KekName    string `pulumi:"kekName"`
	// The REST endpoint of the Schema Registry cluster, for example,
	// `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          *string                                 `pulumi:"restEndpoint"`
	SchemaRegistryCluster *SchemaRegistryDekSchemaRegistryCluster `pulumi:"schemaRegistryCluster"`
	SubjectName           string                                  `pulumi:"subjectName"`
	Version               *int                                    `pulumi:"version"`
}

// The set of arguments for constructing a SchemaRegistryDek resource.
type SchemaRegistryDekArgs struct {
	Algorithm pulumi.StringPtrInput
	// The Cluster API Credentials.
	Credentials          SchemaRegistryDekCredentialsPtrInput
	EncryptedKeyMaterial pulumi.StringPtrInput
	// Controls whether a dek should be soft or hard deleted. Set it to `true` if you want to hard delete a schema registry dek
	// on destroy. Defaults to `false` (soft delete).
	HardDelete pulumi.BoolPtrInput
	KekName    pulumi.StringInput
	// The REST endpoint of the Schema Registry cluster, for example,
	// `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          pulumi.StringPtrInput
	SchemaRegistryCluster SchemaRegistryDekSchemaRegistryClusterPtrInput
	SubjectName           pulumi.StringInput
	Version               pulumi.IntPtrInput
}

func (SchemaRegistryDekArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*schemaRegistryDekArgs)(nil)).Elem()
}

type SchemaRegistryDekInput interface {
	pulumi.Input

	ToSchemaRegistryDekOutput() SchemaRegistryDekOutput
	ToSchemaRegistryDekOutputWithContext(ctx context.Context) SchemaRegistryDekOutput
}

func (*SchemaRegistryDek) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaRegistryDek)(nil)).Elem()
}

func (i *SchemaRegistryDek) ToSchemaRegistryDekOutput() SchemaRegistryDekOutput {
	return i.ToSchemaRegistryDekOutputWithContext(context.Background())
}

func (i *SchemaRegistryDek) ToSchemaRegistryDekOutputWithContext(ctx context.Context) SchemaRegistryDekOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryDekOutput)
}

// SchemaRegistryDekArrayInput is an input type that accepts SchemaRegistryDekArray and SchemaRegistryDekArrayOutput values.
// You can construct a concrete instance of `SchemaRegistryDekArrayInput` via:
//
//	SchemaRegistryDekArray{ SchemaRegistryDekArgs{...} }
type SchemaRegistryDekArrayInput interface {
	pulumi.Input

	ToSchemaRegistryDekArrayOutput() SchemaRegistryDekArrayOutput
	ToSchemaRegistryDekArrayOutputWithContext(context.Context) SchemaRegistryDekArrayOutput
}

type SchemaRegistryDekArray []SchemaRegistryDekInput

func (SchemaRegistryDekArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SchemaRegistryDek)(nil)).Elem()
}

func (i SchemaRegistryDekArray) ToSchemaRegistryDekArrayOutput() SchemaRegistryDekArrayOutput {
	return i.ToSchemaRegistryDekArrayOutputWithContext(context.Background())
}

func (i SchemaRegistryDekArray) ToSchemaRegistryDekArrayOutputWithContext(ctx context.Context) SchemaRegistryDekArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryDekArrayOutput)
}

// SchemaRegistryDekMapInput is an input type that accepts SchemaRegistryDekMap and SchemaRegistryDekMapOutput values.
// You can construct a concrete instance of `SchemaRegistryDekMapInput` via:
//
//	SchemaRegistryDekMap{ "key": SchemaRegistryDekArgs{...} }
type SchemaRegistryDekMapInput interface {
	pulumi.Input

	ToSchemaRegistryDekMapOutput() SchemaRegistryDekMapOutput
	ToSchemaRegistryDekMapOutputWithContext(context.Context) SchemaRegistryDekMapOutput
}

type SchemaRegistryDekMap map[string]SchemaRegistryDekInput

func (SchemaRegistryDekMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SchemaRegistryDek)(nil)).Elem()
}

func (i SchemaRegistryDekMap) ToSchemaRegistryDekMapOutput() SchemaRegistryDekMapOutput {
	return i.ToSchemaRegistryDekMapOutputWithContext(context.Background())
}

func (i SchemaRegistryDekMap) ToSchemaRegistryDekMapOutputWithContext(ctx context.Context) SchemaRegistryDekMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryDekMapOutput)
}

type SchemaRegistryDekOutput struct{ *pulumi.OutputState }

func (SchemaRegistryDekOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaRegistryDek)(nil)).Elem()
}

func (o SchemaRegistryDekOutput) ToSchemaRegistryDekOutput() SchemaRegistryDekOutput {
	return o
}

func (o SchemaRegistryDekOutput) ToSchemaRegistryDekOutputWithContext(ctx context.Context) SchemaRegistryDekOutput {
	return o
}

func (o SchemaRegistryDekOutput) Algorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaRegistryDek) pulumi.StringPtrOutput { return v.Algorithm }).(pulumi.StringPtrOutput)
}

// The Cluster API Credentials.
func (o SchemaRegistryDekOutput) Credentials() SchemaRegistryDekCredentialsPtrOutput {
	return o.ApplyT(func(v *SchemaRegistryDek) SchemaRegistryDekCredentialsPtrOutput { return v.Credentials }).(SchemaRegistryDekCredentialsPtrOutput)
}

func (o SchemaRegistryDekOutput) EncryptedKeyMaterial() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaRegistryDek) pulumi.StringOutput { return v.EncryptedKeyMaterial }).(pulumi.StringOutput)
}

// Controls whether a dek should be soft or hard deleted. Set it to `true` if you want to hard delete a schema registry dek
// on destroy. Defaults to `false` (soft delete).
func (o SchemaRegistryDekOutput) HardDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SchemaRegistryDek) pulumi.BoolPtrOutput { return v.HardDelete }).(pulumi.BoolPtrOutput)
}

func (o SchemaRegistryDekOutput) KekName() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaRegistryDek) pulumi.StringOutput { return v.KekName }).(pulumi.StringOutput)
}

func (o SchemaRegistryDekOutput) KeyMaterial() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaRegistryDek) pulumi.StringOutput { return v.KeyMaterial }).(pulumi.StringOutput)
}

// The REST endpoint of the Schema Registry cluster, for example,
// `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
func (o SchemaRegistryDekOutput) RestEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaRegistryDek) pulumi.StringPtrOutput { return v.RestEndpoint }).(pulumi.StringPtrOutput)
}

func (o SchemaRegistryDekOutput) SchemaRegistryCluster() SchemaRegistryDekSchemaRegistryClusterPtrOutput {
	return o.ApplyT(func(v *SchemaRegistryDek) SchemaRegistryDekSchemaRegistryClusterPtrOutput {
		return v.SchemaRegistryCluster
	}).(SchemaRegistryDekSchemaRegistryClusterPtrOutput)
}

func (o SchemaRegistryDekOutput) SubjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaRegistryDek) pulumi.StringOutput { return v.SubjectName }).(pulumi.StringOutput)
}

func (o SchemaRegistryDekOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SchemaRegistryDek) pulumi.IntPtrOutput { return v.Version }).(pulumi.IntPtrOutput)
}

type SchemaRegistryDekArrayOutput struct{ *pulumi.OutputState }

func (SchemaRegistryDekArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SchemaRegistryDek)(nil)).Elem()
}

func (o SchemaRegistryDekArrayOutput) ToSchemaRegistryDekArrayOutput() SchemaRegistryDekArrayOutput {
	return o
}

func (o SchemaRegistryDekArrayOutput) ToSchemaRegistryDekArrayOutputWithContext(ctx context.Context) SchemaRegistryDekArrayOutput {
	return o
}

func (o SchemaRegistryDekArrayOutput) Index(i pulumi.IntInput) SchemaRegistryDekOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SchemaRegistryDek {
		return vs[0].([]*SchemaRegistryDek)[vs[1].(int)]
	}).(SchemaRegistryDekOutput)
}

type SchemaRegistryDekMapOutput struct{ *pulumi.OutputState }

func (SchemaRegistryDekMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SchemaRegistryDek)(nil)).Elem()
}

func (o SchemaRegistryDekMapOutput) ToSchemaRegistryDekMapOutput() SchemaRegistryDekMapOutput {
	return o
}

func (o SchemaRegistryDekMapOutput) ToSchemaRegistryDekMapOutputWithContext(ctx context.Context) SchemaRegistryDekMapOutput {
	return o
}

func (o SchemaRegistryDekMapOutput) MapIndex(k pulumi.StringInput) SchemaRegistryDekOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SchemaRegistryDek {
		return vs[0].(map[string]*SchemaRegistryDek)[vs[1].(string)]
	}).(SchemaRegistryDekOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaRegistryDekInput)(nil)).Elem(), &SchemaRegistryDek{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaRegistryDekArrayInput)(nil)).Elem(), SchemaRegistryDekArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaRegistryDekMapInput)(nil)).Elem(), SchemaRegistryDekMap{})
	pulumi.RegisterOutputType(SchemaRegistryDekOutput{})
	pulumi.RegisterOutputType(SchemaRegistryDekArrayOutput{})
	pulumi.RegisterOutputType(SchemaRegistryDekMapOutput{})
}

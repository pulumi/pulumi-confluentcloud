// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
//
// `RoleBinding` provides a Role Binding resource that enables creating, reading, and deleting role bindings on Confluent Cloud.
//
// > **Note:** For more information on the Role Bindings, see [Predefined RBAC roles in Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/access-control/rbac/predefined-rbac-roles.html).
//
// ## Getting Started
//
// The following end-to-end examples might help to get started with `RoleBinding` resource:
//   - `standard-kafka-rbac`: _Standard_ Kafka cluster with authorization using RBAC
//   - `dedicated-public-kafka-rbac`: _Dedicated_ Kafka cluster that is accessible over the public internet with authorization using RBAC
//   - `dedicated-privatelink-aws-kafka-rbac`: _Dedicated_ Kafka cluster on AWS that is accessible via PrivateLink connections with authorization using RBAC
//   - `dedicated-privatelink-azure-kafka-rbac`: _Dedicated_ Kafka cluster on Azure that is accessible via PrivateLink connections with authorization using RBAC
//   - `dedicated-vnet-peering-azure-kafka-rbac`: _Dedicated_ Kafka cluster on Azure that is accessible via VPC Peering connections with authorization using RBAC
//   - `dedicated-vpc-peering-aws-kafka-rbac`: _Dedicated_ Kafka cluster on AWS that is accessible via VPC Peering connections with authorization using RBAC
//   - `dedicated-vpc-peering-gcp-kafka-rbac`: _Dedicated_ Kafka cluster on GCP that is accessible via VPC Peering connections with authorization using RBAC
//   - `dedicated-transit-gateway-attachment-aws-kafka-acls`: _Dedicated_ Kafka cluster on AWS that is accessible via Transit Gateway Endpoint with authorization using ACLs
//   - `dedicated-transit-gateway-attachment-aws-kafka-rbac`: _Dedicated_ Kafka cluster on AWS that is accessible via Transit Gateway Endpoint with authorization using RBAC
//   - `enterprise-privatelinkattachment-aws-kafka-acls`: _Enterprise_ Kafka cluster on AWS that is accessible via PrivateLink connections with authorization using ACLs
//
// ## Import
//
// You can import a Role Binding by using Role Binding ID, for example$ export CONFLUENT_CLOUD_API_KEY="<cloud_api_key>" $ export CONFLUENT_CLOUD_API_SECRET="<cloud_api_secret>"
//
// ```sh
//
//	$ pulumi import confluentcloud:index/roleBinding:RoleBinding my_rb rb-f3a90de
//
// ```
//
//	!> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
type RoleBinding struct {
	pulumi.CustomResourceState

	// A [Confluent Resource Name(CRN)](<https://docs.confluent.io/cloud/current/api.html#section/Identifiers-and-URLs/Confluent-Resource-Names-(CRNs)>) that specifies the scope and resource patterns necessary for the role to bind.
	CrnPattern pulumi.StringOutput `pulumi:"crnPattern"`
	// A principal User to bind the role to, for example, "User:u-111aaa" for binding to a user "u-111aaa", or "User:sa-111aaa" for binding to a service account "sa-111aaa".
	Principal pulumi.StringOutput `pulumi:"principal"`
	// A name of the role to bind to the principal. See [Confluent Cloud RBAC Roles](https://docs.confluent.io/cloud/current/access-management/access-control/cloud-rbac.html#ccloud-rbac-roles) for a full list of supported role names.
	RoleName pulumi.StringOutput `pulumi:"roleName"`
}

// NewRoleBinding registers a new resource with the given unique name, arguments, and options.
func NewRoleBinding(ctx *pulumi.Context,
	name string, args *RoleBindingArgs, opts ...pulumi.ResourceOption) (*RoleBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CrnPattern == nil {
		return nil, errors.New("invalid value for required argument 'CrnPattern'")
	}
	if args.Principal == nil {
		return nil, errors.New("invalid value for required argument 'Principal'")
	}
	if args.RoleName == nil {
		return nil, errors.New("invalid value for required argument 'RoleName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RoleBinding
	err := ctx.RegisterResource("confluentcloud:index/roleBinding:RoleBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoleBinding gets an existing RoleBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoleBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoleBindingState, opts ...pulumi.ResourceOption) (*RoleBinding, error) {
	var resource RoleBinding
	err := ctx.ReadResource("confluentcloud:index/roleBinding:RoleBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RoleBinding resources.
type roleBindingState struct {
	// A [Confluent Resource Name(CRN)](<https://docs.confluent.io/cloud/current/api.html#section/Identifiers-and-URLs/Confluent-Resource-Names-(CRNs)>) that specifies the scope and resource patterns necessary for the role to bind.
	CrnPattern *string `pulumi:"crnPattern"`
	// A principal User to bind the role to, for example, "User:u-111aaa" for binding to a user "u-111aaa", or "User:sa-111aaa" for binding to a service account "sa-111aaa".
	Principal *string `pulumi:"principal"`
	// A name of the role to bind to the principal. See [Confluent Cloud RBAC Roles](https://docs.confluent.io/cloud/current/access-management/access-control/cloud-rbac.html#ccloud-rbac-roles) for a full list of supported role names.
	RoleName *string `pulumi:"roleName"`
}

type RoleBindingState struct {
	// A [Confluent Resource Name(CRN)](<https://docs.confluent.io/cloud/current/api.html#section/Identifiers-and-URLs/Confluent-Resource-Names-(CRNs)>) that specifies the scope and resource patterns necessary for the role to bind.
	CrnPattern pulumi.StringPtrInput
	// A principal User to bind the role to, for example, "User:u-111aaa" for binding to a user "u-111aaa", or "User:sa-111aaa" for binding to a service account "sa-111aaa".
	Principal pulumi.StringPtrInput
	// A name of the role to bind to the principal. See [Confluent Cloud RBAC Roles](https://docs.confluent.io/cloud/current/access-management/access-control/cloud-rbac.html#ccloud-rbac-roles) for a full list of supported role names.
	RoleName pulumi.StringPtrInput
}

func (RoleBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*roleBindingState)(nil)).Elem()
}

type roleBindingArgs struct {
	// A [Confluent Resource Name(CRN)](<https://docs.confluent.io/cloud/current/api.html#section/Identifiers-and-URLs/Confluent-Resource-Names-(CRNs)>) that specifies the scope and resource patterns necessary for the role to bind.
	CrnPattern string `pulumi:"crnPattern"`
	// A principal User to bind the role to, for example, "User:u-111aaa" for binding to a user "u-111aaa", or "User:sa-111aaa" for binding to a service account "sa-111aaa".
	Principal string `pulumi:"principal"`
	// A name of the role to bind to the principal. See [Confluent Cloud RBAC Roles](https://docs.confluent.io/cloud/current/access-management/access-control/cloud-rbac.html#ccloud-rbac-roles) for a full list of supported role names.
	RoleName string `pulumi:"roleName"`
}

// The set of arguments for constructing a RoleBinding resource.
type RoleBindingArgs struct {
	// A [Confluent Resource Name(CRN)](<https://docs.confluent.io/cloud/current/api.html#section/Identifiers-and-URLs/Confluent-Resource-Names-(CRNs)>) that specifies the scope and resource patterns necessary for the role to bind.
	CrnPattern pulumi.StringInput
	// A principal User to bind the role to, for example, "User:u-111aaa" for binding to a user "u-111aaa", or "User:sa-111aaa" for binding to a service account "sa-111aaa".
	Principal pulumi.StringInput
	// A name of the role to bind to the principal. See [Confluent Cloud RBAC Roles](https://docs.confluent.io/cloud/current/access-management/access-control/cloud-rbac.html#ccloud-rbac-roles) for a full list of supported role names.
	RoleName pulumi.StringInput
}

func (RoleBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*roleBindingArgs)(nil)).Elem()
}

type RoleBindingInput interface {
	pulumi.Input

	ToRoleBindingOutput() RoleBindingOutput
	ToRoleBindingOutputWithContext(ctx context.Context) RoleBindingOutput
}

func (*RoleBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleBinding)(nil)).Elem()
}

func (i *RoleBinding) ToRoleBindingOutput() RoleBindingOutput {
	return i.ToRoleBindingOutputWithContext(context.Background())
}

func (i *RoleBinding) ToRoleBindingOutputWithContext(ctx context.Context) RoleBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleBindingOutput)
}

// RoleBindingArrayInput is an input type that accepts RoleBindingArray and RoleBindingArrayOutput values.
// You can construct a concrete instance of `RoleBindingArrayInput` via:
//
//	RoleBindingArray{ RoleBindingArgs{...} }
type RoleBindingArrayInput interface {
	pulumi.Input

	ToRoleBindingArrayOutput() RoleBindingArrayOutput
	ToRoleBindingArrayOutputWithContext(context.Context) RoleBindingArrayOutput
}

type RoleBindingArray []RoleBindingInput

func (RoleBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoleBinding)(nil)).Elem()
}

func (i RoleBindingArray) ToRoleBindingArrayOutput() RoleBindingArrayOutput {
	return i.ToRoleBindingArrayOutputWithContext(context.Background())
}

func (i RoleBindingArray) ToRoleBindingArrayOutputWithContext(ctx context.Context) RoleBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleBindingArrayOutput)
}

// RoleBindingMapInput is an input type that accepts RoleBindingMap and RoleBindingMapOutput values.
// You can construct a concrete instance of `RoleBindingMapInput` via:
//
//	RoleBindingMap{ "key": RoleBindingArgs{...} }
type RoleBindingMapInput interface {
	pulumi.Input

	ToRoleBindingMapOutput() RoleBindingMapOutput
	ToRoleBindingMapOutputWithContext(context.Context) RoleBindingMapOutput
}

type RoleBindingMap map[string]RoleBindingInput

func (RoleBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoleBinding)(nil)).Elem()
}

func (i RoleBindingMap) ToRoleBindingMapOutput() RoleBindingMapOutput {
	return i.ToRoleBindingMapOutputWithContext(context.Background())
}

func (i RoleBindingMap) ToRoleBindingMapOutputWithContext(ctx context.Context) RoleBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleBindingMapOutput)
}

type RoleBindingOutput struct{ *pulumi.OutputState }

func (RoleBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleBinding)(nil)).Elem()
}

func (o RoleBindingOutput) ToRoleBindingOutput() RoleBindingOutput {
	return o
}

func (o RoleBindingOutput) ToRoleBindingOutputWithContext(ctx context.Context) RoleBindingOutput {
	return o
}

// A [Confluent Resource Name(CRN)](<https://docs.confluent.io/cloud/current/api.html#section/Identifiers-and-URLs/Confluent-Resource-Names-(CRNs)>) that specifies the scope and resource patterns necessary for the role to bind.
func (o RoleBindingOutput) CrnPattern() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleBinding) pulumi.StringOutput { return v.CrnPattern }).(pulumi.StringOutput)
}

// A principal User to bind the role to, for example, "User:u-111aaa" for binding to a user "u-111aaa", or "User:sa-111aaa" for binding to a service account "sa-111aaa".
func (o RoleBindingOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleBinding) pulumi.StringOutput { return v.Principal }).(pulumi.StringOutput)
}

// A name of the role to bind to the principal. See [Confluent Cloud RBAC Roles](https://docs.confluent.io/cloud/current/access-management/access-control/cloud-rbac.html#ccloud-rbac-roles) for a full list of supported role names.
func (o RoleBindingOutput) RoleName() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleBinding) pulumi.StringOutput { return v.RoleName }).(pulumi.StringOutput)
}

type RoleBindingArrayOutput struct{ *pulumi.OutputState }

func (RoleBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoleBinding)(nil)).Elem()
}

func (o RoleBindingArrayOutput) ToRoleBindingArrayOutput() RoleBindingArrayOutput {
	return o
}

func (o RoleBindingArrayOutput) ToRoleBindingArrayOutputWithContext(ctx context.Context) RoleBindingArrayOutput {
	return o
}

func (o RoleBindingArrayOutput) Index(i pulumi.IntInput) RoleBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RoleBinding {
		return vs[0].([]*RoleBinding)[vs[1].(int)]
	}).(RoleBindingOutput)
}

type RoleBindingMapOutput struct{ *pulumi.OutputState }

func (RoleBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoleBinding)(nil)).Elem()
}

func (o RoleBindingMapOutput) ToRoleBindingMapOutput() RoleBindingMapOutput {
	return o
}

func (o RoleBindingMapOutput) ToRoleBindingMapOutputWithContext(ctx context.Context) RoleBindingMapOutput {
	return o
}

func (o RoleBindingMapOutput) MapIndex(k pulumi.StringInput) RoleBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RoleBinding {
		return vs[0].(map[string]*RoleBinding)[vs[1].(string)]
	}).(RoleBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoleBindingInput)(nil)).Elem(), &RoleBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleBindingArrayInput)(nil)).Elem(), RoleBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleBindingMapInput)(nil)).Elem(), RoleBindingMap{})
	pulumi.RegisterOutputType(RoleBindingOutput{})
	pulumi.RegisterOutputType(RoleBindingArrayOutput{})
	pulumi.RegisterOutputType(RoleBindingMapOutput{})
}

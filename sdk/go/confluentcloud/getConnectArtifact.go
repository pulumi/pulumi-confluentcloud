// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
//
// `ConnectArtifact` data source represents a Connect Artifact in Confluent Cloud. Connect Artifacts are used to store and manage custom connector plugins in Confluent Cloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := confluentcloud.LookupConnectArtifact(ctx, &confluentcloud.LookupConnectArtifactArgs{
//				Id: "ca-123456",
//				Environment: confluentcloud.GetConnectArtifactEnvironment{
//					Id: "env-123456",
//				},
//				Cloud: "AWS",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("artifactName", example.DisplayName)
//			ctx.Export("artifactCloud", example.Cloud)
//			ctx.Export("artifactContentFormat", example.ContentFormat)
//			ctx.Export("artifactDescription", example.Description)
//			return nil
//		})
//	}
//
// ```
func LookupConnectArtifact(ctx *pulumi.Context, args *LookupConnectArtifactArgs, opts ...pulumi.InvokeOption) (*LookupConnectArtifactResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupConnectArtifactResult
	err := ctx.Invoke("confluentcloud:index/getConnectArtifact:getConnectArtifact", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getConnectArtifact.
type LookupConnectArtifactArgs struct {
	// Cloud provider where the Connect Artifact archive is uploaded.
	Cloud       string                        `pulumi:"cloud"`
	Environment GetConnectArtifactEnvironment `pulumi:"environment"`
	// The ID of the Connect Artifact.
	Id string `pulumi:"id"`
}

// A collection of values returned by getConnectArtifact.
type LookupConnectArtifactResult struct {
	Cloud string `pulumi:"cloud"`
	// (String) Archive format of the Connect Artifact. Supported formats are `JAR` and `ZIP`.
	ContentFormat string `pulumi:"contentFormat"`
	// (String) Description of the Connect Artifact.
	Description string `pulumi:"description"`
	// (String) The unique name of the Connect Artifact per cloud, environment scope.
	DisplayName string                        `pulumi:"displayName"`
	Environment GetConnectArtifactEnvironment `pulumi:"environment"`
	Id          string                        `pulumi:"id"`
}

func LookupConnectArtifactOutput(ctx *pulumi.Context, args LookupConnectArtifactOutputArgs, opts ...pulumi.InvokeOption) LookupConnectArtifactResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupConnectArtifactResultOutput, error) {
			args := v.(LookupConnectArtifactArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("confluentcloud:index/getConnectArtifact:getConnectArtifact", args, LookupConnectArtifactResultOutput{}, options).(LookupConnectArtifactResultOutput), nil
		}).(LookupConnectArtifactResultOutput)
}

// A collection of arguments for invoking getConnectArtifact.
type LookupConnectArtifactOutputArgs struct {
	// Cloud provider where the Connect Artifact archive is uploaded.
	Cloud       pulumi.StringInput                 `pulumi:"cloud"`
	Environment GetConnectArtifactEnvironmentInput `pulumi:"environment"`
	// The ID of the Connect Artifact.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupConnectArtifactOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectArtifactArgs)(nil)).Elem()
}

// A collection of values returned by getConnectArtifact.
type LookupConnectArtifactResultOutput struct{ *pulumi.OutputState }

func (LookupConnectArtifactResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectArtifactResult)(nil)).Elem()
}

func (o LookupConnectArtifactResultOutput) ToLookupConnectArtifactResultOutput() LookupConnectArtifactResultOutput {
	return o
}

func (o LookupConnectArtifactResultOutput) ToLookupConnectArtifactResultOutputWithContext(ctx context.Context) LookupConnectArtifactResultOutput {
	return o
}

func (o LookupConnectArtifactResultOutput) Cloud() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectArtifactResult) string { return v.Cloud }).(pulumi.StringOutput)
}

// (String) Archive format of the Connect Artifact. Supported formats are `JAR` and `ZIP`.
func (o LookupConnectArtifactResultOutput) ContentFormat() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectArtifactResult) string { return v.ContentFormat }).(pulumi.StringOutput)
}

// (String) Description of the Connect Artifact.
func (o LookupConnectArtifactResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectArtifactResult) string { return v.Description }).(pulumi.StringOutput)
}

// (String) The unique name of the Connect Artifact per cloud, environment scope.
func (o LookupConnectArtifactResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectArtifactResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

func (o LookupConnectArtifactResultOutput) Environment() GetConnectArtifactEnvironmentOutput {
	return o.ApplyT(func(v LookupConnectArtifactResult) GetConnectArtifactEnvironment { return v.Environment }).(GetConnectArtifactEnvironmentOutput)
}

func (o LookupConnectArtifactResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectArtifactResult) string { return v.Id }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupConnectArtifactResultOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
//
// `ClusterLink` describes a Cluster Link data source.
//
// ## Example Usage
//
// ### Option #1: Manage multiple Kafka clusters in the same Pulumi Stack
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := confluentcloud.LookupClusterLink(ctx, &confluentcloud.LookupClusterLinkArgs{
//				LinkName:     "main-link",
//				RestEndpoint: pulumi.StringRef(west.RestEndpoint),
//				KafkaCluster: confluentcloud.GetClusterLinkKafkaCluster{
//					Id: west.Id,
//				},
//				Credentials: confluentcloud.GetClusterLinkCredentials{
//					Key:    app_manager_west_cluster_api_key.Id,
//					Secret: app_manager_west_cluster_api_key.Secret,
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("kafkaClusterLinkId", main.ClusterLinkId)
//			return nil
//		})
//	}
//
// ```
//
// ### Option #2: Manage a single Kafka cluster in the same Pulumi Stack
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := confluentcloud.LookupClusterLink(ctx, &confluentcloud.LookupClusterLinkArgs{
//				LinkName: "main-link",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("kafkaClusterLinkId", main.ClusterLinkId)
//			return nil
//		})
//	}
//
// ```
func LookupClusterLink(ctx *pulumi.Context, args *LookupClusterLinkArgs, opts ...pulumi.InvokeOption) (*LookupClusterLinkResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupClusterLinkResult
	err := ctx.Invoke("confluentcloud:index/getClusterLink:getClusterLink", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getClusterLink.
type LookupClusterLinkArgs struct {
	Credentials  *GetClusterLinkCredentials  `pulumi:"credentials"`
	KafkaCluster *GetClusterLinkKafkaCluster `pulumi:"kafkaCluster"`
	// The name of the cluster link, for example, `my-cluster-link`.
	LinkName string `pulumi:"linkName"`
	// The REST endpoint of the Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint *string `pulumi:"restEndpoint"`
}

// A collection of values returned by getClusterLink.
type LookupClusterLinkResult struct {
	// (Required String) The actual Cluster Link ID assigned from Confluent Cloud that uniquely represents a link between two Kafka clusters, for example, `qz0HDEV-Qz2B5aPFpcWQJQ`.
	ClusterLinkId string `pulumi:"clusterLinkId"`
	// (Optional Map) The custom cluster link settings retrieved:
	Config      map[string]string          `pulumi:"config"`
	Credentials *GetClusterLinkCredentials `pulumi:"credentials"`
	// (Required String) The composite ID of the Cluster Link data-source, in the format `<Kafka cluster ID>/<Cluster link name>`, for example, `lkc-abc123/my-cluster-link`.
	Id           string                      `pulumi:"id"`
	KafkaCluster *GetClusterLinkKafkaCluster `pulumi:"kafkaCluster"`
	LinkName     string                      `pulumi:"linkName"`
	// (Required String) The current state of the Cluster Link.
	LinkState    string  `pulumi:"linkState"`
	RestEndpoint *string `pulumi:"restEndpoint"`
}

func LookupClusterLinkOutput(ctx *pulumi.Context, args LookupClusterLinkOutputArgs, opts ...pulumi.InvokeOption) LookupClusterLinkResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupClusterLinkResultOutput, error) {
			args := v.(LookupClusterLinkArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("confluentcloud:index/getClusterLink:getClusterLink", args, LookupClusterLinkResultOutput{}, options).(LookupClusterLinkResultOutput), nil
		}).(LookupClusterLinkResultOutput)
}

// A collection of arguments for invoking getClusterLink.
type LookupClusterLinkOutputArgs struct {
	Credentials  GetClusterLinkCredentialsPtrInput  `pulumi:"credentials"`
	KafkaCluster GetClusterLinkKafkaClusterPtrInput `pulumi:"kafkaCluster"`
	// The name of the cluster link, for example, `my-cluster-link`.
	LinkName pulumi.StringInput `pulumi:"linkName"`
	// The REST endpoint of the Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint pulumi.StringPtrInput `pulumi:"restEndpoint"`
}

func (LookupClusterLinkOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterLinkArgs)(nil)).Elem()
}

// A collection of values returned by getClusterLink.
type LookupClusterLinkResultOutput struct{ *pulumi.OutputState }

func (LookupClusterLinkResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterLinkResult)(nil)).Elem()
}

func (o LookupClusterLinkResultOutput) ToLookupClusterLinkResultOutput() LookupClusterLinkResultOutput {
	return o
}

func (o LookupClusterLinkResultOutput) ToLookupClusterLinkResultOutputWithContext(ctx context.Context) LookupClusterLinkResultOutput {
	return o
}

// (Required String) The actual Cluster Link ID assigned from Confluent Cloud that uniquely represents a link between two Kafka clusters, for example, `qz0HDEV-Qz2B5aPFpcWQJQ`.
func (o LookupClusterLinkResultOutput) ClusterLinkId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterLinkResult) string { return v.ClusterLinkId }).(pulumi.StringOutput)
}

// (Optional Map) The custom cluster link settings retrieved:
func (o LookupClusterLinkResultOutput) Config() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupClusterLinkResult) map[string]string { return v.Config }).(pulumi.StringMapOutput)
}

func (o LookupClusterLinkResultOutput) Credentials() GetClusterLinkCredentialsPtrOutput {
	return o.ApplyT(func(v LookupClusterLinkResult) *GetClusterLinkCredentials { return v.Credentials }).(GetClusterLinkCredentialsPtrOutput)
}

// (Required String) The composite ID of the Cluster Link data-source, in the format `<Kafka cluster ID>/<Cluster link name>`, for example, `lkc-abc123/my-cluster-link`.
func (o LookupClusterLinkResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterLinkResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupClusterLinkResultOutput) KafkaCluster() GetClusterLinkKafkaClusterPtrOutput {
	return o.ApplyT(func(v LookupClusterLinkResult) *GetClusterLinkKafkaCluster { return v.KafkaCluster }).(GetClusterLinkKafkaClusterPtrOutput)
}

func (o LookupClusterLinkResultOutput) LinkName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterLinkResult) string { return v.LinkName }).(pulumi.StringOutput)
}

// (Required String) The current state of the Cluster Link.
func (o LookupClusterLinkResultOutput) LinkState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterLinkResult) string { return v.LinkState }).(pulumi.StringOutput)
}

func (o LookupClusterLinkResultOutput) RestEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupClusterLinkResult) *string { return v.RestEndpoint }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupClusterLinkResultOutput{})
}

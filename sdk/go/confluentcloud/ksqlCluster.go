// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # KsqlCluster Resource
//
// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
//
// !> **Warning:**  It is strongly recommended that you provision a `data.confluent_schema_registry_cluster` resource before you provision a `KsqlCluster` resource in a given environment. If you're provisioning the `data.confluent_schema_registry_cluster` and the `KsqlCluster` resource in the same pulumi up command, reference the `data.confluent_schema_registry_cluster` from the `dependsOn` argument inside the `KsqlCluster` resource. This ensures that the `data.confluent_schema_registry_cluster` resource is created before the `KsqlCluster` resource. If you provision a `KsqlCluster` resource without a `data.confluent_schema_registry_cluster` resource, and later, you want to add a `data.confluent_schema_registry_cluster` resource, you must destroy and re-create your `KsqlCluster` resource after provisioning a `data.confluent_schema_registry_cluster` resource.
//
// `KsqlCluster` provides a ksqlDB cluster resource that enables creating, editing, and deleting ksqlDB clusters on Confluent Cloud.
//
// ## Import
//
// You can import a ksqlDB cluster by using Environment ID and ksqlDB cluster ID, in the format `<Environment ID>/<ksqlDB cluster ID>`, for example:
//
// $ export CONFLUENT_CLOUD_API_KEY="<cloud_api_key>"
//
// $ export CONFLUENT_CLOUD_API_SECRET="<cloud_api_secret>"
//
// ```sh
// $ pulumi import confluentcloud:index/ksqlCluster:KsqlCluster example env-abc123/lksqlc-abc123
// ```
//
// !> **Warning:**  Do not forget to delete the terminal's command history afterward for security purposes.
type KsqlCluster struct {
	pulumi.CustomResourceState

	// (Required String) An API Version of the schema version of the ksqlDB cluster, for example, `ksqldbcm/v2`.
	ApiVersion         pulumi.StringOutput                 `pulumi:"apiVersion"`
	CredentialIdentity KsqlClusterCredentialIdentityOutput `pulumi:"credentialIdentity"`
	// The number of Confluent Streaming Units (CSUs) for the ksqlDB cluster.
	Csu pulumi.IntOutput `pulumi:"csu"`
	// The name of the ksqlDB cluster.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment  KsqlClusterEnvironmentOutput  `pulumi:"environment"`
	KafkaCluster KsqlClusterKafkaClusterOutput `pulumi:"kafkaCluster"`
	// (Required String) A kind of the ksqlDB cluster, for example, `Cluster`.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// (Required String) The Confluent Resource Name of the ksqlDB cluster.
	ResourceName pulumi.StringOutput `pulumi:"resourceName"`
	// (Required String) The API endpoint of the ksqlDB cluster, for example, `https://pksqlc-00000.us-central1.gcp.glb.confluent.cloud`.
	RestEndpoint pulumi.StringOutput `pulumi:"restEndpoint"`
	// (Required Integer) The amount of storage (in GB) provisioned to the ksqlDB cluster.
	Storage pulumi.IntOutput `pulumi:"storage"`
	// (Required String) Topic name prefix used by this ksqlDB cluster. Used to assign ACLs for this ksqlDB cluster to use, for example, `pksqlc-00000`.
	TopicPrefix pulumi.StringOutput `pulumi:"topicPrefix"`
	// Controls whether the row data should be included in the processing log topic. Set it to `false` if you don't want to emit sensitive information to the processing log. Defaults to `true`.
	UseDetailedProcessingLog pulumi.BoolPtrOutput `pulumi:"useDetailedProcessingLog"`
}

// NewKsqlCluster registers a new resource with the given unique name, arguments, and options.
func NewKsqlCluster(ctx *pulumi.Context,
	name string, args *KsqlClusterArgs, opts ...pulumi.ResourceOption) (*KsqlCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CredentialIdentity == nil {
		return nil, errors.New("invalid value for required argument 'CredentialIdentity'")
	}
	if args.Csu == nil {
		return nil, errors.New("invalid value for required argument 'Csu'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.KafkaCluster == nil {
		return nil, errors.New("invalid value for required argument 'KafkaCluster'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KsqlCluster
	err := ctx.RegisterResource("confluentcloud:index/ksqlCluster:KsqlCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKsqlCluster gets an existing KsqlCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKsqlCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KsqlClusterState, opts ...pulumi.ResourceOption) (*KsqlCluster, error) {
	var resource KsqlCluster
	err := ctx.ReadResource("confluentcloud:index/ksqlCluster:KsqlCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KsqlCluster resources.
type ksqlClusterState struct {
	// (Required String) An API Version of the schema version of the ksqlDB cluster, for example, `ksqldbcm/v2`.
	ApiVersion         *string                        `pulumi:"apiVersion"`
	CredentialIdentity *KsqlClusterCredentialIdentity `pulumi:"credentialIdentity"`
	// The number of Confluent Streaming Units (CSUs) for the ksqlDB cluster.
	Csu *int `pulumi:"csu"`
	// The name of the ksqlDB cluster.
	DisplayName *string `pulumi:"displayName"`
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment  *KsqlClusterEnvironment  `pulumi:"environment"`
	KafkaCluster *KsqlClusterKafkaCluster `pulumi:"kafkaCluster"`
	// (Required String) A kind of the ksqlDB cluster, for example, `Cluster`.
	Kind *string `pulumi:"kind"`
	// (Required String) The Confluent Resource Name of the ksqlDB cluster.
	ResourceName *string `pulumi:"resourceName"`
	// (Required String) The API endpoint of the ksqlDB cluster, for example, `https://pksqlc-00000.us-central1.gcp.glb.confluent.cloud`.
	RestEndpoint *string `pulumi:"restEndpoint"`
	// (Required Integer) The amount of storage (in GB) provisioned to the ksqlDB cluster.
	Storage *int `pulumi:"storage"`
	// (Required String) Topic name prefix used by this ksqlDB cluster. Used to assign ACLs for this ksqlDB cluster to use, for example, `pksqlc-00000`.
	TopicPrefix *string `pulumi:"topicPrefix"`
	// Controls whether the row data should be included in the processing log topic. Set it to `false` if you don't want to emit sensitive information to the processing log. Defaults to `true`.
	UseDetailedProcessingLog *bool `pulumi:"useDetailedProcessingLog"`
}

type KsqlClusterState struct {
	// (Required String) An API Version of the schema version of the ksqlDB cluster, for example, `ksqldbcm/v2`.
	ApiVersion         pulumi.StringPtrInput
	CredentialIdentity KsqlClusterCredentialIdentityPtrInput
	// The number of Confluent Streaming Units (CSUs) for the ksqlDB cluster.
	Csu pulumi.IntPtrInput
	// The name of the ksqlDB cluster.
	DisplayName pulumi.StringPtrInput
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment  KsqlClusterEnvironmentPtrInput
	KafkaCluster KsqlClusterKafkaClusterPtrInput
	// (Required String) A kind of the ksqlDB cluster, for example, `Cluster`.
	Kind pulumi.StringPtrInput
	// (Required String) The Confluent Resource Name of the ksqlDB cluster.
	ResourceName pulumi.StringPtrInput
	// (Required String) The API endpoint of the ksqlDB cluster, for example, `https://pksqlc-00000.us-central1.gcp.glb.confluent.cloud`.
	RestEndpoint pulumi.StringPtrInput
	// (Required Integer) The amount of storage (in GB) provisioned to the ksqlDB cluster.
	Storage pulumi.IntPtrInput
	// (Required String) Topic name prefix used by this ksqlDB cluster. Used to assign ACLs for this ksqlDB cluster to use, for example, `pksqlc-00000`.
	TopicPrefix pulumi.StringPtrInput
	// Controls whether the row data should be included in the processing log topic. Set it to `false` if you don't want to emit sensitive information to the processing log. Defaults to `true`.
	UseDetailedProcessingLog pulumi.BoolPtrInput
}

func (KsqlClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*ksqlClusterState)(nil)).Elem()
}

type ksqlClusterArgs struct {
	CredentialIdentity KsqlClusterCredentialIdentity `pulumi:"credentialIdentity"`
	// The number of Confluent Streaming Units (CSUs) for the ksqlDB cluster.
	Csu int `pulumi:"csu"`
	// The name of the ksqlDB cluster.
	DisplayName string `pulumi:"displayName"`
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment  KsqlClusterEnvironment  `pulumi:"environment"`
	KafkaCluster KsqlClusterKafkaCluster `pulumi:"kafkaCluster"`
	// Controls whether the row data should be included in the processing log topic. Set it to `false` if you don't want to emit sensitive information to the processing log. Defaults to `true`.
	UseDetailedProcessingLog *bool `pulumi:"useDetailedProcessingLog"`
}

// The set of arguments for constructing a KsqlCluster resource.
type KsqlClusterArgs struct {
	CredentialIdentity KsqlClusterCredentialIdentityInput
	// The number of Confluent Streaming Units (CSUs) for the ksqlDB cluster.
	Csu pulumi.IntInput
	// The name of the ksqlDB cluster.
	DisplayName pulumi.StringInput
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment  KsqlClusterEnvironmentInput
	KafkaCluster KsqlClusterKafkaClusterInput
	// Controls whether the row data should be included in the processing log topic. Set it to `false` if you don't want to emit sensitive information to the processing log. Defaults to `true`.
	UseDetailedProcessingLog pulumi.BoolPtrInput
}

func (KsqlClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ksqlClusterArgs)(nil)).Elem()
}

type KsqlClusterInput interface {
	pulumi.Input

	ToKsqlClusterOutput() KsqlClusterOutput
	ToKsqlClusterOutputWithContext(ctx context.Context) KsqlClusterOutput
}

func (*KsqlCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**KsqlCluster)(nil)).Elem()
}

func (i *KsqlCluster) ToKsqlClusterOutput() KsqlClusterOutput {
	return i.ToKsqlClusterOutputWithContext(context.Background())
}

func (i *KsqlCluster) ToKsqlClusterOutputWithContext(ctx context.Context) KsqlClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KsqlClusterOutput)
}

// KsqlClusterArrayInput is an input type that accepts KsqlClusterArray and KsqlClusterArrayOutput values.
// You can construct a concrete instance of `KsqlClusterArrayInput` via:
//
//	KsqlClusterArray{ KsqlClusterArgs{...} }
type KsqlClusterArrayInput interface {
	pulumi.Input

	ToKsqlClusterArrayOutput() KsqlClusterArrayOutput
	ToKsqlClusterArrayOutputWithContext(context.Context) KsqlClusterArrayOutput
}

type KsqlClusterArray []KsqlClusterInput

func (KsqlClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KsqlCluster)(nil)).Elem()
}

func (i KsqlClusterArray) ToKsqlClusterArrayOutput() KsqlClusterArrayOutput {
	return i.ToKsqlClusterArrayOutputWithContext(context.Background())
}

func (i KsqlClusterArray) ToKsqlClusterArrayOutputWithContext(ctx context.Context) KsqlClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KsqlClusterArrayOutput)
}

// KsqlClusterMapInput is an input type that accepts KsqlClusterMap and KsqlClusterMapOutput values.
// You can construct a concrete instance of `KsqlClusterMapInput` via:
//
//	KsqlClusterMap{ "key": KsqlClusterArgs{...} }
type KsqlClusterMapInput interface {
	pulumi.Input

	ToKsqlClusterMapOutput() KsqlClusterMapOutput
	ToKsqlClusterMapOutputWithContext(context.Context) KsqlClusterMapOutput
}

type KsqlClusterMap map[string]KsqlClusterInput

func (KsqlClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KsqlCluster)(nil)).Elem()
}

func (i KsqlClusterMap) ToKsqlClusterMapOutput() KsqlClusterMapOutput {
	return i.ToKsqlClusterMapOutputWithContext(context.Background())
}

func (i KsqlClusterMap) ToKsqlClusterMapOutputWithContext(ctx context.Context) KsqlClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KsqlClusterMapOutput)
}

type KsqlClusterOutput struct{ *pulumi.OutputState }

func (KsqlClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KsqlCluster)(nil)).Elem()
}

func (o KsqlClusterOutput) ToKsqlClusterOutput() KsqlClusterOutput {
	return o
}

func (o KsqlClusterOutput) ToKsqlClusterOutputWithContext(ctx context.Context) KsqlClusterOutput {
	return o
}

// (Required String) An API Version of the schema version of the ksqlDB cluster, for example, `ksqldbcm/v2`.
func (o KsqlClusterOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *KsqlCluster) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

func (o KsqlClusterOutput) CredentialIdentity() KsqlClusterCredentialIdentityOutput {
	return o.ApplyT(func(v *KsqlCluster) KsqlClusterCredentialIdentityOutput { return v.CredentialIdentity }).(KsqlClusterCredentialIdentityOutput)
}

// The number of Confluent Streaming Units (CSUs) for the ksqlDB cluster.
func (o KsqlClusterOutput) Csu() pulumi.IntOutput {
	return o.ApplyT(func(v *KsqlCluster) pulumi.IntOutput { return v.Csu }).(pulumi.IntOutput)
}

// The name of the ksqlDB cluster.
func (o KsqlClusterOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *KsqlCluster) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
func (o KsqlClusterOutput) Environment() KsqlClusterEnvironmentOutput {
	return o.ApplyT(func(v *KsqlCluster) KsqlClusterEnvironmentOutput { return v.Environment }).(KsqlClusterEnvironmentOutput)
}

func (o KsqlClusterOutput) KafkaCluster() KsqlClusterKafkaClusterOutput {
	return o.ApplyT(func(v *KsqlCluster) KsqlClusterKafkaClusterOutput { return v.KafkaCluster }).(KsqlClusterKafkaClusterOutput)
}

// (Required String) A kind of the ksqlDB cluster, for example, `Cluster`.
func (o KsqlClusterOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *KsqlCluster) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// (Required String) The Confluent Resource Name of the ksqlDB cluster.
func (o KsqlClusterOutput) ResourceName() pulumi.StringOutput {
	return o.ApplyT(func(v *KsqlCluster) pulumi.StringOutput { return v.ResourceName }).(pulumi.StringOutput)
}

// (Required String) The API endpoint of the ksqlDB cluster, for example, `https://pksqlc-00000.us-central1.gcp.glb.confluent.cloud`.
func (o KsqlClusterOutput) RestEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *KsqlCluster) pulumi.StringOutput { return v.RestEndpoint }).(pulumi.StringOutput)
}

// (Required Integer) The amount of storage (in GB) provisioned to the ksqlDB cluster.
func (o KsqlClusterOutput) Storage() pulumi.IntOutput {
	return o.ApplyT(func(v *KsqlCluster) pulumi.IntOutput { return v.Storage }).(pulumi.IntOutput)
}

// (Required String) Topic name prefix used by this ksqlDB cluster. Used to assign ACLs for this ksqlDB cluster to use, for example, `pksqlc-00000`.
func (o KsqlClusterOutput) TopicPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *KsqlCluster) pulumi.StringOutput { return v.TopicPrefix }).(pulumi.StringOutput)
}

// Controls whether the row data should be included in the processing log topic. Set it to `false` if you don't want to emit sensitive information to the processing log. Defaults to `true`.
func (o KsqlClusterOutput) UseDetailedProcessingLog() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KsqlCluster) pulumi.BoolPtrOutput { return v.UseDetailedProcessingLog }).(pulumi.BoolPtrOutput)
}

type KsqlClusterArrayOutput struct{ *pulumi.OutputState }

func (KsqlClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KsqlCluster)(nil)).Elem()
}

func (o KsqlClusterArrayOutput) ToKsqlClusterArrayOutput() KsqlClusterArrayOutput {
	return o
}

func (o KsqlClusterArrayOutput) ToKsqlClusterArrayOutputWithContext(ctx context.Context) KsqlClusterArrayOutput {
	return o
}

func (o KsqlClusterArrayOutput) Index(i pulumi.IntInput) KsqlClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KsqlCluster {
		return vs[0].([]*KsqlCluster)[vs[1].(int)]
	}).(KsqlClusterOutput)
}

type KsqlClusterMapOutput struct{ *pulumi.OutputState }

func (KsqlClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KsqlCluster)(nil)).Elem()
}

func (o KsqlClusterMapOutput) ToKsqlClusterMapOutput() KsqlClusterMapOutput {
	return o
}

func (o KsqlClusterMapOutput) ToKsqlClusterMapOutputWithContext(ctx context.Context) KsqlClusterMapOutput {
	return o
}

func (o KsqlClusterMapOutput) MapIndex(k pulumi.StringInput) KsqlClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KsqlCluster {
		return vs[0].(map[string]*KsqlCluster)[vs[1].(string)]
	}).(KsqlClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KsqlClusterInput)(nil)).Elem(), &KsqlCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*KsqlClusterArrayInput)(nil)).Elem(), KsqlClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KsqlClusterMapInput)(nil)).Elem(), KsqlClusterMap{})
	pulumi.RegisterOutputType(KsqlClusterOutput{})
	pulumi.RegisterOutputType(KsqlClusterArrayOutput{})
	pulumi.RegisterOutputType(KsqlClusterMapOutput{})
}

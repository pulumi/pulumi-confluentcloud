// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupProviderIntegrationAuthorization(ctx *pulumi.Context, args *LookupProviderIntegrationAuthorizationArgs, opts ...pulumi.InvokeOption) (*LookupProviderIntegrationAuthorizationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupProviderIntegrationAuthorizationResult
	err := ctx.Invoke("confluentcloud:index/getProviderIntegrationAuthorization:getProviderIntegrationAuthorization", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProviderIntegrationAuthorization.
type LookupProviderIntegrationAuthorizationArgs struct {
	// (Required Configuration Block) supports the following:
	Environment GetProviderIntegrationAuthorizationEnvironment `pulumi:"environment"`
	// The ID of the Provider Integration Authorization, for example, `cspi-4xg0q`.
	Id string `pulumi:"id"`
}

// A collection of values returned by getProviderIntegrationAuthorization.
type LookupProviderIntegrationAuthorizationResult struct {
	// (Optional Configuration Block) Azure-specific configuration details. Present for Azure integrations. It supports the following:
	Azures []GetProviderIntegrationAuthorizationAzure `pulumi:"azures"`
	// (Required Configuration Block) supports the following:
	Environment GetProviderIntegrationAuthorizationEnvironment `pulumi:"environment"`
	// (Optional Configuration Block) GCP-specific configuration details. Present for GCP integrations. It supports the following:
	Gcps []GetProviderIntegrationAuthorizationGcp `pulumi:"gcps"`
	// (Required String) The ID of the Environment that the Provider Integration belongs to, for example, `env-abc123`.
	Id string `pulumi:"id"`
	// (Required String) The ID of the provider integration.
	ProviderIntegrationId string `pulumi:"providerIntegrationId"`
}

func LookupProviderIntegrationAuthorizationOutput(ctx *pulumi.Context, args LookupProviderIntegrationAuthorizationOutputArgs, opts ...pulumi.InvokeOption) LookupProviderIntegrationAuthorizationResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupProviderIntegrationAuthorizationResultOutput, error) {
			args := v.(LookupProviderIntegrationAuthorizationArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("confluentcloud:index/getProviderIntegrationAuthorization:getProviderIntegrationAuthorization", args, LookupProviderIntegrationAuthorizationResultOutput{}, options).(LookupProviderIntegrationAuthorizationResultOutput), nil
		}).(LookupProviderIntegrationAuthorizationResultOutput)
}

// A collection of arguments for invoking getProviderIntegrationAuthorization.
type LookupProviderIntegrationAuthorizationOutputArgs struct {
	// (Required Configuration Block) supports the following:
	Environment GetProviderIntegrationAuthorizationEnvironmentInput `pulumi:"environment"`
	// The ID of the Provider Integration Authorization, for example, `cspi-4xg0q`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupProviderIntegrationAuthorizationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProviderIntegrationAuthorizationArgs)(nil)).Elem()
}

// A collection of values returned by getProviderIntegrationAuthorization.
type LookupProviderIntegrationAuthorizationResultOutput struct{ *pulumi.OutputState }

func (LookupProviderIntegrationAuthorizationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProviderIntegrationAuthorizationResult)(nil)).Elem()
}

func (o LookupProviderIntegrationAuthorizationResultOutput) ToLookupProviderIntegrationAuthorizationResultOutput() LookupProviderIntegrationAuthorizationResultOutput {
	return o
}

func (o LookupProviderIntegrationAuthorizationResultOutput) ToLookupProviderIntegrationAuthorizationResultOutputWithContext(ctx context.Context) LookupProviderIntegrationAuthorizationResultOutput {
	return o
}

// (Optional Configuration Block) Azure-specific configuration details. Present for Azure integrations. It supports the following:
func (o LookupProviderIntegrationAuthorizationResultOutput) Azures() GetProviderIntegrationAuthorizationAzureArrayOutput {
	return o.ApplyT(func(v LookupProviderIntegrationAuthorizationResult) []GetProviderIntegrationAuthorizationAzure {
		return v.Azures
	}).(GetProviderIntegrationAuthorizationAzureArrayOutput)
}

// (Required Configuration Block) supports the following:
func (o LookupProviderIntegrationAuthorizationResultOutput) Environment() GetProviderIntegrationAuthorizationEnvironmentOutput {
	return o.ApplyT(func(v LookupProviderIntegrationAuthorizationResult) GetProviderIntegrationAuthorizationEnvironment {
		return v.Environment
	}).(GetProviderIntegrationAuthorizationEnvironmentOutput)
}

// (Optional Configuration Block) GCP-specific configuration details. Present for GCP integrations. It supports the following:
func (o LookupProviderIntegrationAuthorizationResultOutput) Gcps() GetProviderIntegrationAuthorizationGcpArrayOutput {
	return o.ApplyT(func(v LookupProviderIntegrationAuthorizationResult) []GetProviderIntegrationAuthorizationGcp {
		return v.Gcps
	}).(GetProviderIntegrationAuthorizationGcpArrayOutput)
}

// (Required String) The ID of the Environment that the Provider Integration belongs to, for example, `env-abc123`.
func (o LookupProviderIntegrationAuthorizationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProviderIntegrationAuthorizationResult) string { return v.Id }).(pulumi.StringOutput)
}

// (Required String) The ID of the provider integration.
func (o LookupProviderIntegrationAuthorizationResultOutput) ProviderIntegrationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProviderIntegrationAuthorizationResult) string { return v.ProviderIntegrationId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupProviderIntegrationAuthorizationResultOutput{})
}

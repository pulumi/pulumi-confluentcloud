// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
//
// `Gateway` provides a Gateway resource that enables creating, editing, and deleting Gateways on Confluent Cloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			development, err := confluentcloud.NewEnvironment(ctx, "development", &confluentcloud.EnvironmentArgs{
//				DisplayName: pulumi.String("Development"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = confluentcloud.NewGateway(ctx, "main", &confluentcloud.GatewayArgs{
//				DisplayName: pulumi.String("my_gateway"),
//				Environment: &confluentcloud.GatewayEnvironmentArgs{
//					Id: development.ID(),
//				},
//				AwsEgressPrivateLinkGateway: &confluentcloud.GatewayAwsEgressPrivateLinkGatewayArgs{
//					Region: pulumi.String("us-west-2"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Getting Started
//
// The following end-to-end examples might help to get started with `Gateway` resource:
//   - enterprise-pni-aws-kafka-rbac: _Enterprise_ Kafka cluster on AWS that is accessible via Confluent Private Network Interface (PNI) with authorization using RBAC
//   - freight-aws-kafka-rbac: _Freight_ Kafka cluster on AWS that is accessible via Confluent Private Network Interface (PNI) with authorization using RBAC
//
// ## Import
//
// You can import a Gateway by using Environment ID and Gateway ID, in the format `<Environment ID>/<Gateway ID>`. The following example shows how to import a Gateway:
//
// $ export CONFLUENT_CLOUD_API_KEY="<cloud_api_key>"
//
// $ export CONFLUENT_CLOUD_API_SECRET="<cloud_api_secret>"
//
// ```sh
// $ pulumi import confluentcloud:index/gateway:Gateway main env-abc123/gw-abc123
// ```
//
// !> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
type Gateway struct {
	pulumi.CustomResourceState

	// (Optional Configuration Block) supports the following:
	AwsEgressPrivateLinkGateway GatewayAwsEgressPrivateLinkGatewayOutput `pulumi:"awsEgressPrivateLinkGateway"`
	// (Optional Configuration Block) supports the following:
	AwsPrivateNetworkInterfaceGateway GatewayAwsPrivateNetworkInterfaceGatewayOutput `pulumi:"awsPrivateNetworkInterfaceGateway"`
	// (Optional Configuration Block) supports the following:
	AzureEgressPrivateLinkGateway GatewayAzureEgressPrivateLinkGatewayOutput `pulumi:"azureEgressPrivateLinkGateway"`
	// The name of the Gateway.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment GatewayEnvironmentOutput `pulumi:"environment"`
}

// NewGateway registers a new resource with the given unique name, arguments, and options.
func NewGateway(ctx *pulumi.Context,
	name string, args *GatewayArgs, opts ...pulumi.ResourceOption) (*Gateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Gateway
	err := ctx.RegisterResource("confluentcloud:index/gateway:Gateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGateway gets an existing Gateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayState, opts ...pulumi.ResourceOption) (*Gateway, error) {
	var resource Gateway
	err := ctx.ReadResource("confluentcloud:index/gateway:Gateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Gateway resources.
type gatewayState struct {
	// (Optional Configuration Block) supports the following:
	AwsEgressPrivateLinkGateway *GatewayAwsEgressPrivateLinkGateway `pulumi:"awsEgressPrivateLinkGateway"`
	// (Optional Configuration Block) supports the following:
	AwsPrivateNetworkInterfaceGateway *GatewayAwsPrivateNetworkInterfaceGateway `pulumi:"awsPrivateNetworkInterfaceGateway"`
	// (Optional Configuration Block) supports the following:
	AzureEgressPrivateLinkGateway *GatewayAzureEgressPrivateLinkGateway `pulumi:"azureEgressPrivateLinkGateway"`
	// The name of the Gateway.
	DisplayName *string `pulumi:"displayName"`
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment *GatewayEnvironment `pulumi:"environment"`
}

type GatewayState struct {
	// (Optional Configuration Block) supports the following:
	AwsEgressPrivateLinkGateway GatewayAwsEgressPrivateLinkGatewayPtrInput
	// (Optional Configuration Block) supports the following:
	AwsPrivateNetworkInterfaceGateway GatewayAwsPrivateNetworkInterfaceGatewayPtrInput
	// (Optional Configuration Block) supports the following:
	AzureEgressPrivateLinkGateway GatewayAzureEgressPrivateLinkGatewayPtrInput
	// The name of the Gateway.
	DisplayName pulumi.StringPtrInput
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment GatewayEnvironmentPtrInput
}

func (GatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayState)(nil)).Elem()
}

type gatewayArgs struct {
	// (Optional Configuration Block) supports the following:
	AwsEgressPrivateLinkGateway *GatewayAwsEgressPrivateLinkGateway `pulumi:"awsEgressPrivateLinkGateway"`
	// (Optional Configuration Block) supports the following:
	AwsPrivateNetworkInterfaceGateway *GatewayAwsPrivateNetworkInterfaceGateway `pulumi:"awsPrivateNetworkInterfaceGateway"`
	// (Optional Configuration Block) supports the following:
	AzureEgressPrivateLinkGateway *GatewayAzureEgressPrivateLinkGateway `pulumi:"azureEgressPrivateLinkGateway"`
	// The name of the Gateway.
	DisplayName string `pulumi:"displayName"`
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment GatewayEnvironment `pulumi:"environment"`
}

// The set of arguments for constructing a Gateway resource.
type GatewayArgs struct {
	// (Optional Configuration Block) supports the following:
	AwsEgressPrivateLinkGateway GatewayAwsEgressPrivateLinkGatewayPtrInput
	// (Optional Configuration Block) supports the following:
	AwsPrivateNetworkInterfaceGateway GatewayAwsPrivateNetworkInterfaceGatewayPtrInput
	// (Optional Configuration Block) supports the following:
	AzureEgressPrivateLinkGateway GatewayAzureEgressPrivateLinkGatewayPtrInput
	// The name of the Gateway.
	DisplayName pulumi.StringInput
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment GatewayEnvironmentInput
}

func (GatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayArgs)(nil)).Elem()
}

type GatewayInput interface {
	pulumi.Input

	ToGatewayOutput() GatewayOutput
	ToGatewayOutputWithContext(ctx context.Context) GatewayOutput
}

func (*Gateway) ElementType() reflect.Type {
	return reflect.TypeOf((**Gateway)(nil)).Elem()
}

func (i *Gateway) ToGatewayOutput() GatewayOutput {
	return i.ToGatewayOutputWithContext(context.Background())
}

func (i *Gateway) ToGatewayOutputWithContext(ctx context.Context) GatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayOutput)
}

// GatewayArrayInput is an input type that accepts GatewayArray and GatewayArrayOutput values.
// You can construct a concrete instance of `GatewayArrayInput` via:
//
//	GatewayArray{ GatewayArgs{...} }
type GatewayArrayInput interface {
	pulumi.Input

	ToGatewayArrayOutput() GatewayArrayOutput
	ToGatewayArrayOutputWithContext(context.Context) GatewayArrayOutput
}

type GatewayArray []GatewayInput

func (GatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Gateway)(nil)).Elem()
}

func (i GatewayArray) ToGatewayArrayOutput() GatewayArrayOutput {
	return i.ToGatewayArrayOutputWithContext(context.Background())
}

func (i GatewayArray) ToGatewayArrayOutputWithContext(ctx context.Context) GatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayArrayOutput)
}

// GatewayMapInput is an input type that accepts GatewayMap and GatewayMapOutput values.
// You can construct a concrete instance of `GatewayMapInput` via:
//
//	GatewayMap{ "key": GatewayArgs{...} }
type GatewayMapInput interface {
	pulumi.Input

	ToGatewayMapOutput() GatewayMapOutput
	ToGatewayMapOutputWithContext(context.Context) GatewayMapOutput
}

type GatewayMap map[string]GatewayInput

func (GatewayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Gateway)(nil)).Elem()
}

func (i GatewayMap) ToGatewayMapOutput() GatewayMapOutput {
	return i.ToGatewayMapOutputWithContext(context.Background())
}

func (i GatewayMap) ToGatewayMapOutputWithContext(ctx context.Context) GatewayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayMapOutput)
}

type GatewayOutput struct{ *pulumi.OutputState }

func (GatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Gateway)(nil)).Elem()
}

func (o GatewayOutput) ToGatewayOutput() GatewayOutput {
	return o
}

func (o GatewayOutput) ToGatewayOutputWithContext(ctx context.Context) GatewayOutput {
	return o
}

// (Optional Configuration Block) supports the following:
func (o GatewayOutput) AwsEgressPrivateLinkGateway() GatewayAwsEgressPrivateLinkGatewayOutput {
	return o.ApplyT(func(v *Gateway) GatewayAwsEgressPrivateLinkGatewayOutput { return v.AwsEgressPrivateLinkGateway }).(GatewayAwsEgressPrivateLinkGatewayOutput)
}

// (Optional Configuration Block) supports the following:
func (o GatewayOutput) AwsPrivateNetworkInterfaceGateway() GatewayAwsPrivateNetworkInterfaceGatewayOutput {
	return o.ApplyT(func(v *Gateway) GatewayAwsPrivateNetworkInterfaceGatewayOutput {
		return v.AwsPrivateNetworkInterfaceGateway
	}).(GatewayAwsPrivateNetworkInterfaceGatewayOutput)
}

// (Optional Configuration Block) supports the following:
func (o GatewayOutput) AzureEgressPrivateLinkGateway() GatewayAzureEgressPrivateLinkGatewayOutput {
	return o.ApplyT(func(v *Gateway) GatewayAzureEgressPrivateLinkGatewayOutput { return v.AzureEgressPrivateLinkGateway }).(GatewayAzureEgressPrivateLinkGatewayOutput)
}

// The name of the Gateway.
func (o GatewayOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
func (o GatewayOutput) Environment() GatewayEnvironmentOutput {
	return o.ApplyT(func(v *Gateway) GatewayEnvironmentOutput { return v.Environment }).(GatewayEnvironmentOutput)
}

type GatewayArrayOutput struct{ *pulumi.OutputState }

func (GatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Gateway)(nil)).Elem()
}

func (o GatewayArrayOutput) ToGatewayArrayOutput() GatewayArrayOutput {
	return o
}

func (o GatewayArrayOutput) ToGatewayArrayOutputWithContext(ctx context.Context) GatewayArrayOutput {
	return o
}

func (o GatewayArrayOutput) Index(i pulumi.IntInput) GatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Gateway {
		return vs[0].([]*Gateway)[vs[1].(int)]
	}).(GatewayOutput)
}

type GatewayMapOutput struct{ *pulumi.OutputState }

func (GatewayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Gateway)(nil)).Elem()
}

func (o GatewayMapOutput) ToGatewayMapOutput() GatewayMapOutput {
	return o
}

func (o GatewayMapOutput) ToGatewayMapOutputWithContext(ctx context.Context) GatewayMapOutput {
	return o
}

func (o GatewayMapOutput) MapIndex(k pulumi.StringInput) GatewayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Gateway {
		return vs[0].(map[string]*Gateway)[vs[1].(string)]
	}).(GatewayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayInput)(nil)).Elem(), &Gateway{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayArrayInput)(nil)).Elem(), GatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayMapInput)(nil)).Elem(), GatewayMap{})
	pulumi.RegisterOutputType(GatewayOutput{})
	pulumi.RegisterOutputType(GatewayArrayOutput{})
	pulumi.RegisterOutputType(GatewayMapOutput{})
}

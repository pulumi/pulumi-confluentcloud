// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ApiKeyManagedResource struct {
	// The API group and version of the managed resource that the API Key associated with, for example, `cmk/v2`.
	ApiVersion  string                           `pulumi:"apiVersion"`
	Environment ApiKeyManagedResourceEnvironment `pulumi:"environment"`
	// The ID of the Environment that the managed resource belongs to, for example, `env-abc123`.
	Id string `pulumi:"id"`
	// The kind of the managed resource that the API Key associated with, for example, `Cluster`.
	Kind string `pulumi:"kind"`
}

// ApiKeyManagedResourceInput is an input type that accepts ApiKeyManagedResourceArgs and ApiKeyManagedResourceOutput values.
// You can construct a concrete instance of `ApiKeyManagedResourceInput` via:
//
//	ApiKeyManagedResourceArgs{...}
type ApiKeyManagedResourceInput interface {
	pulumi.Input

	ToApiKeyManagedResourceOutput() ApiKeyManagedResourceOutput
	ToApiKeyManagedResourceOutputWithContext(context.Context) ApiKeyManagedResourceOutput
}

type ApiKeyManagedResourceArgs struct {
	// The API group and version of the managed resource that the API Key associated with, for example, `cmk/v2`.
	ApiVersion  pulumi.StringInput                    `pulumi:"apiVersion"`
	Environment ApiKeyManagedResourceEnvironmentInput `pulumi:"environment"`
	// The ID of the Environment that the managed resource belongs to, for example, `env-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
	// The kind of the managed resource that the API Key associated with, for example, `Cluster`.
	Kind pulumi.StringInput `pulumi:"kind"`
}

func (ApiKeyManagedResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiKeyManagedResource)(nil)).Elem()
}

func (i ApiKeyManagedResourceArgs) ToApiKeyManagedResourceOutput() ApiKeyManagedResourceOutput {
	return i.ToApiKeyManagedResourceOutputWithContext(context.Background())
}

func (i ApiKeyManagedResourceArgs) ToApiKeyManagedResourceOutputWithContext(ctx context.Context) ApiKeyManagedResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyManagedResourceOutput)
}

func (i ApiKeyManagedResourceArgs) ToOutput(ctx context.Context) pulumix.Output[ApiKeyManagedResource] {
	return pulumix.Output[ApiKeyManagedResource]{
		OutputState: i.ToApiKeyManagedResourceOutputWithContext(ctx).OutputState,
	}
}

func (i ApiKeyManagedResourceArgs) ToApiKeyManagedResourcePtrOutput() ApiKeyManagedResourcePtrOutput {
	return i.ToApiKeyManagedResourcePtrOutputWithContext(context.Background())
}

func (i ApiKeyManagedResourceArgs) ToApiKeyManagedResourcePtrOutputWithContext(ctx context.Context) ApiKeyManagedResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyManagedResourceOutput).ToApiKeyManagedResourcePtrOutputWithContext(ctx)
}

// ApiKeyManagedResourcePtrInput is an input type that accepts ApiKeyManagedResourceArgs, ApiKeyManagedResourcePtr and ApiKeyManagedResourcePtrOutput values.
// You can construct a concrete instance of `ApiKeyManagedResourcePtrInput` via:
//
//	        ApiKeyManagedResourceArgs{...}
//
//	or:
//
//	        nil
type ApiKeyManagedResourcePtrInput interface {
	pulumi.Input

	ToApiKeyManagedResourcePtrOutput() ApiKeyManagedResourcePtrOutput
	ToApiKeyManagedResourcePtrOutputWithContext(context.Context) ApiKeyManagedResourcePtrOutput
}

type apiKeyManagedResourcePtrType ApiKeyManagedResourceArgs

func ApiKeyManagedResourcePtr(v *ApiKeyManagedResourceArgs) ApiKeyManagedResourcePtrInput {
	return (*apiKeyManagedResourcePtrType)(v)
}

func (*apiKeyManagedResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiKeyManagedResource)(nil)).Elem()
}

func (i *apiKeyManagedResourcePtrType) ToApiKeyManagedResourcePtrOutput() ApiKeyManagedResourcePtrOutput {
	return i.ToApiKeyManagedResourcePtrOutputWithContext(context.Background())
}

func (i *apiKeyManagedResourcePtrType) ToApiKeyManagedResourcePtrOutputWithContext(ctx context.Context) ApiKeyManagedResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyManagedResourcePtrOutput)
}

func (i *apiKeyManagedResourcePtrType) ToOutput(ctx context.Context) pulumix.Output[*ApiKeyManagedResource] {
	return pulumix.Output[*ApiKeyManagedResource]{
		OutputState: i.ToApiKeyManagedResourcePtrOutputWithContext(ctx).OutputState,
	}
}

type ApiKeyManagedResourceOutput struct{ *pulumi.OutputState }

func (ApiKeyManagedResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiKeyManagedResource)(nil)).Elem()
}

func (o ApiKeyManagedResourceOutput) ToApiKeyManagedResourceOutput() ApiKeyManagedResourceOutput {
	return o
}

func (o ApiKeyManagedResourceOutput) ToApiKeyManagedResourceOutputWithContext(ctx context.Context) ApiKeyManagedResourceOutput {
	return o
}

func (o ApiKeyManagedResourceOutput) ToApiKeyManagedResourcePtrOutput() ApiKeyManagedResourcePtrOutput {
	return o.ToApiKeyManagedResourcePtrOutputWithContext(context.Background())
}

func (o ApiKeyManagedResourceOutput) ToApiKeyManagedResourcePtrOutputWithContext(ctx context.Context) ApiKeyManagedResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApiKeyManagedResource) *ApiKeyManagedResource {
		return &v
	}).(ApiKeyManagedResourcePtrOutput)
}

func (o ApiKeyManagedResourceOutput) ToOutput(ctx context.Context) pulumix.Output[ApiKeyManagedResource] {
	return pulumix.Output[ApiKeyManagedResource]{
		OutputState: o.OutputState,
	}
}

// The API group and version of the managed resource that the API Key associated with, for example, `cmk/v2`.
func (o ApiKeyManagedResourceOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ApiKeyManagedResource) string { return v.ApiVersion }).(pulumi.StringOutput)
}

func (o ApiKeyManagedResourceOutput) Environment() ApiKeyManagedResourceEnvironmentOutput {
	return o.ApplyT(func(v ApiKeyManagedResource) ApiKeyManagedResourceEnvironment { return v.Environment }).(ApiKeyManagedResourceEnvironmentOutput)
}

// The ID of the Environment that the managed resource belongs to, for example, `env-abc123`.
func (o ApiKeyManagedResourceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ApiKeyManagedResource) string { return v.Id }).(pulumi.StringOutput)
}

// The kind of the managed resource that the API Key associated with, for example, `Cluster`.
func (o ApiKeyManagedResourceOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ApiKeyManagedResource) string { return v.Kind }).(pulumi.StringOutput)
}

type ApiKeyManagedResourcePtrOutput struct{ *pulumi.OutputState }

func (ApiKeyManagedResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiKeyManagedResource)(nil)).Elem()
}

func (o ApiKeyManagedResourcePtrOutput) ToApiKeyManagedResourcePtrOutput() ApiKeyManagedResourcePtrOutput {
	return o
}

func (o ApiKeyManagedResourcePtrOutput) ToApiKeyManagedResourcePtrOutputWithContext(ctx context.Context) ApiKeyManagedResourcePtrOutput {
	return o
}

func (o ApiKeyManagedResourcePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApiKeyManagedResource] {
	return pulumix.Output[*ApiKeyManagedResource]{
		OutputState: o.OutputState,
	}
}

func (o ApiKeyManagedResourcePtrOutput) Elem() ApiKeyManagedResourceOutput {
	return o.ApplyT(func(v *ApiKeyManagedResource) ApiKeyManagedResource {
		if v != nil {
			return *v
		}
		var ret ApiKeyManagedResource
		return ret
	}).(ApiKeyManagedResourceOutput)
}

// The API group and version of the managed resource that the API Key associated with, for example, `cmk/v2`.
func (o ApiKeyManagedResourcePtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiKeyManagedResource) *string {
		if v == nil {
			return nil
		}
		return &v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

func (o ApiKeyManagedResourcePtrOutput) Environment() ApiKeyManagedResourceEnvironmentPtrOutput {
	return o.ApplyT(func(v *ApiKeyManagedResource) *ApiKeyManagedResourceEnvironment {
		if v == nil {
			return nil
		}
		return &v.Environment
	}).(ApiKeyManagedResourceEnvironmentPtrOutput)
}

// The ID of the Environment that the managed resource belongs to, for example, `env-abc123`.
func (o ApiKeyManagedResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiKeyManagedResource) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The kind of the managed resource that the API Key associated with, for example, `Cluster`.
func (o ApiKeyManagedResourcePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiKeyManagedResource) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

type ApiKeyManagedResourceEnvironment struct {
	// The ID of the Environment that the managed resource belongs to, for example, `env-abc123`.
	Id string `pulumi:"id"`
}

// ApiKeyManagedResourceEnvironmentInput is an input type that accepts ApiKeyManagedResourceEnvironmentArgs and ApiKeyManagedResourceEnvironmentOutput values.
// You can construct a concrete instance of `ApiKeyManagedResourceEnvironmentInput` via:
//
//	ApiKeyManagedResourceEnvironmentArgs{...}
type ApiKeyManagedResourceEnvironmentInput interface {
	pulumi.Input

	ToApiKeyManagedResourceEnvironmentOutput() ApiKeyManagedResourceEnvironmentOutput
	ToApiKeyManagedResourceEnvironmentOutputWithContext(context.Context) ApiKeyManagedResourceEnvironmentOutput
}

type ApiKeyManagedResourceEnvironmentArgs struct {
	// The ID of the Environment that the managed resource belongs to, for example, `env-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (ApiKeyManagedResourceEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiKeyManagedResourceEnvironment)(nil)).Elem()
}

func (i ApiKeyManagedResourceEnvironmentArgs) ToApiKeyManagedResourceEnvironmentOutput() ApiKeyManagedResourceEnvironmentOutput {
	return i.ToApiKeyManagedResourceEnvironmentOutputWithContext(context.Background())
}

func (i ApiKeyManagedResourceEnvironmentArgs) ToApiKeyManagedResourceEnvironmentOutputWithContext(ctx context.Context) ApiKeyManagedResourceEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyManagedResourceEnvironmentOutput)
}

func (i ApiKeyManagedResourceEnvironmentArgs) ToOutput(ctx context.Context) pulumix.Output[ApiKeyManagedResourceEnvironment] {
	return pulumix.Output[ApiKeyManagedResourceEnvironment]{
		OutputState: i.ToApiKeyManagedResourceEnvironmentOutputWithContext(ctx).OutputState,
	}
}

func (i ApiKeyManagedResourceEnvironmentArgs) ToApiKeyManagedResourceEnvironmentPtrOutput() ApiKeyManagedResourceEnvironmentPtrOutput {
	return i.ToApiKeyManagedResourceEnvironmentPtrOutputWithContext(context.Background())
}

func (i ApiKeyManagedResourceEnvironmentArgs) ToApiKeyManagedResourceEnvironmentPtrOutputWithContext(ctx context.Context) ApiKeyManagedResourceEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyManagedResourceEnvironmentOutput).ToApiKeyManagedResourceEnvironmentPtrOutputWithContext(ctx)
}

// ApiKeyManagedResourceEnvironmentPtrInput is an input type that accepts ApiKeyManagedResourceEnvironmentArgs, ApiKeyManagedResourceEnvironmentPtr and ApiKeyManagedResourceEnvironmentPtrOutput values.
// You can construct a concrete instance of `ApiKeyManagedResourceEnvironmentPtrInput` via:
//
//	        ApiKeyManagedResourceEnvironmentArgs{...}
//
//	or:
//
//	        nil
type ApiKeyManagedResourceEnvironmentPtrInput interface {
	pulumi.Input

	ToApiKeyManagedResourceEnvironmentPtrOutput() ApiKeyManagedResourceEnvironmentPtrOutput
	ToApiKeyManagedResourceEnvironmentPtrOutputWithContext(context.Context) ApiKeyManagedResourceEnvironmentPtrOutput
}

type apiKeyManagedResourceEnvironmentPtrType ApiKeyManagedResourceEnvironmentArgs

func ApiKeyManagedResourceEnvironmentPtr(v *ApiKeyManagedResourceEnvironmentArgs) ApiKeyManagedResourceEnvironmentPtrInput {
	return (*apiKeyManagedResourceEnvironmentPtrType)(v)
}

func (*apiKeyManagedResourceEnvironmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiKeyManagedResourceEnvironment)(nil)).Elem()
}

func (i *apiKeyManagedResourceEnvironmentPtrType) ToApiKeyManagedResourceEnvironmentPtrOutput() ApiKeyManagedResourceEnvironmentPtrOutput {
	return i.ToApiKeyManagedResourceEnvironmentPtrOutputWithContext(context.Background())
}

func (i *apiKeyManagedResourceEnvironmentPtrType) ToApiKeyManagedResourceEnvironmentPtrOutputWithContext(ctx context.Context) ApiKeyManagedResourceEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyManagedResourceEnvironmentPtrOutput)
}

func (i *apiKeyManagedResourceEnvironmentPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApiKeyManagedResourceEnvironment] {
	return pulumix.Output[*ApiKeyManagedResourceEnvironment]{
		OutputState: i.ToApiKeyManagedResourceEnvironmentPtrOutputWithContext(ctx).OutputState,
	}
}

type ApiKeyManagedResourceEnvironmentOutput struct{ *pulumi.OutputState }

func (ApiKeyManagedResourceEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiKeyManagedResourceEnvironment)(nil)).Elem()
}

func (o ApiKeyManagedResourceEnvironmentOutput) ToApiKeyManagedResourceEnvironmentOutput() ApiKeyManagedResourceEnvironmentOutput {
	return o
}

func (o ApiKeyManagedResourceEnvironmentOutput) ToApiKeyManagedResourceEnvironmentOutputWithContext(ctx context.Context) ApiKeyManagedResourceEnvironmentOutput {
	return o
}

func (o ApiKeyManagedResourceEnvironmentOutput) ToApiKeyManagedResourceEnvironmentPtrOutput() ApiKeyManagedResourceEnvironmentPtrOutput {
	return o.ToApiKeyManagedResourceEnvironmentPtrOutputWithContext(context.Background())
}

func (o ApiKeyManagedResourceEnvironmentOutput) ToApiKeyManagedResourceEnvironmentPtrOutputWithContext(ctx context.Context) ApiKeyManagedResourceEnvironmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApiKeyManagedResourceEnvironment) *ApiKeyManagedResourceEnvironment {
		return &v
	}).(ApiKeyManagedResourceEnvironmentPtrOutput)
}

func (o ApiKeyManagedResourceEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[ApiKeyManagedResourceEnvironment] {
	return pulumix.Output[ApiKeyManagedResourceEnvironment]{
		OutputState: o.OutputState,
	}
}

// The ID of the Environment that the managed resource belongs to, for example, `env-abc123`.
func (o ApiKeyManagedResourceEnvironmentOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ApiKeyManagedResourceEnvironment) string { return v.Id }).(pulumi.StringOutput)
}

type ApiKeyManagedResourceEnvironmentPtrOutput struct{ *pulumi.OutputState }

func (ApiKeyManagedResourceEnvironmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiKeyManagedResourceEnvironment)(nil)).Elem()
}

func (o ApiKeyManagedResourceEnvironmentPtrOutput) ToApiKeyManagedResourceEnvironmentPtrOutput() ApiKeyManagedResourceEnvironmentPtrOutput {
	return o
}

func (o ApiKeyManagedResourceEnvironmentPtrOutput) ToApiKeyManagedResourceEnvironmentPtrOutputWithContext(ctx context.Context) ApiKeyManagedResourceEnvironmentPtrOutput {
	return o
}

func (o ApiKeyManagedResourceEnvironmentPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApiKeyManagedResourceEnvironment] {
	return pulumix.Output[*ApiKeyManagedResourceEnvironment]{
		OutputState: o.OutputState,
	}
}

func (o ApiKeyManagedResourceEnvironmentPtrOutput) Elem() ApiKeyManagedResourceEnvironmentOutput {
	return o.ApplyT(func(v *ApiKeyManagedResourceEnvironment) ApiKeyManagedResourceEnvironment {
		if v != nil {
			return *v
		}
		var ret ApiKeyManagedResourceEnvironment
		return ret
	}).(ApiKeyManagedResourceEnvironmentOutput)
}

// The ID of the Environment that the managed resource belongs to, for example, `env-abc123`.
func (o ApiKeyManagedResourceEnvironmentPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiKeyManagedResourceEnvironment) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type ApiKeyOwner struct {
	// The API group and version of the managed resource that the API Key associated with, for example, `cmk/v2`.
	ApiVersion string `pulumi:"apiVersion"`
	// The ID of the Environment that the managed resource belongs to, for example, `env-abc123`.
	Id string `pulumi:"id"`
	// The kind of the managed resource that the API Key associated with, for example, `Cluster`.
	Kind string `pulumi:"kind"`
}

// ApiKeyOwnerInput is an input type that accepts ApiKeyOwnerArgs and ApiKeyOwnerOutput values.
// You can construct a concrete instance of `ApiKeyOwnerInput` via:
//
//	ApiKeyOwnerArgs{...}
type ApiKeyOwnerInput interface {
	pulumi.Input

	ToApiKeyOwnerOutput() ApiKeyOwnerOutput
	ToApiKeyOwnerOutputWithContext(context.Context) ApiKeyOwnerOutput
}

type ApiKeyOwnerArgs struct {
	// The API group and version of the managed resource that the API Key associated with, for example, `cmk/v2`.
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`
	// The ID of the Environment that the managed resource belongs to, for example, `env-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
	// The kind of the managed resource that the API Key associated with, for example, `Cluster`.
	Kind pulumi.StringInput `pulumi:"kind"`
}

func (ApiKeyOwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiKeyOwner)(nil)).Elem()
}

func (i ApiKeyOwnerArgs) ToApiKeyOwnerOutput() ApiKeyOwnerOutput {
	return i.ToApiKeyOwnerOutputWithContext(context.Background())
}

func (i ApiKeyOwnerArgs) ToApiKeyOwnerOutputWithContext(ctx context.Context) ApiKeyOwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyOwnerOutput)
}

func (i ApiKeyOwnerArgs) ToOutput(ctx context.Context) pulumix.Output[ApiKeyOwner] {
	return pulumix.Output[ApiKeyOwner]{
		OutputState: i.ToApiKeyOwnerOutputWithContext(ctx).OutputState,
	}
}

func (i ApiKeyOwnerArgs) ToApiKeyOwnerPtrOutput() ApiKeyOwnerPtrOutput {
	return i.ToApiKeyOwnerPtrOutputWithContext(context.Background())
}

func (i ApiKeyOwnerArgs) ToApiKeyOwnerPtrOutputWithContext(ctx context.Context) ApiKeyOwnerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyOwnerOutput).ToApiKeyOwnerPtrOutputWithContext(ctx)
}

// ApiKeyOwnerPtrInput is an input type that accepts ApiKeyOwnerArgs, ApiKeyOwnerPtr and ApiKeyOwnerPtrOutput values.
// You can construct a concrete instance of `ApiKeyOwnerPtrInput` via:
//
//	        ApiKeyOwnerArgs{...}
//
//	or:
//
//	        nil
type ApiKeyOwnerPtrInput interface {
	pulumi.Input

	ToApiKeyOwnerPtrOutput() ApiKeyOwnerPtrOutput
	ToApiKeyOwnerPtrOutputWithContext(context.Context) ApiKeyOwnerPtrOutput
}

type apiKeyOwnerPtrType ApiKeyOwnerArgs

func ApiKeyOwnerPtr(v *ApiKeyOwnerArgs) ApiKeyOwnerPtrInput {
	return (*apiKeyOwnerPtrType)(v)
}

func (*apiKeyOwnerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiKeyOwner)(nil)).Elem()
}

func (i *apiKeyOwnerPtrType) ToApiKeyOwnerPtrOutput() ApiKeyOwnerPtrOutput {
	return i.ToApiKeyOwnerPtrOutputWithContext(context.Background())
}

func (i *apiKeyOwnerPtrType) ToApiKeyOwnerPtrOutputWithContext(ctx context.Context) ApiKeyOwnerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyOwnerPtrOutput)
}

func (i *apiKeyOwnerPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApiKeyOwner] {
	return pulumix.Output[*ApiKeyOwner]{
		OutputState: i.ToApiKeyOwnerPtrOutputWithContext(ctx).OutputState,
	}
}

type ApiKeyOwnerOutput struct{ *pulumi.OutputState }

func (ApiKeyOwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiKeyOwner)(nil)).Elem()
}

func (o ApiKeyOwnerOutput) ToApiKeyOwnerOutput() ApiKeyOwnerOutput {
	return o
}

func (o ApiKeyOwnerOutput) ToApiKeyOwnerOutputWithContext(ctx context.Context) ApiKeyOwnerOutput {
	return o
}

func (o ApiKeyOwnerOutput) ToApiKeyOwnerPtrOutput() ApiKeyOwnerPtrOutput {
	return o.ToApiKeyOwnerPtrOutputWithContext(context.Background())
}

func (o ApiKeyOwnerOutput) ToApiKeyOwnerPtrOutputWithContext(ctx context.Context) ApiKeyOwnerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApiKeyOwner) *ApiKeyOwner {
		return &v
	}).(ApiKeyOwnerPtrOutput)
}

func (o ApiKeyOwnerOutput) ToOutput(ctx context.Context) pulumix.Output[ApiKeyOwner] {
	return pulumix.Output[ApiKeyOwner]{
		OutputState: o.OutputState,
	}
}

// The API group and version of the managed resource that the API Key associated with, for example, `cmk/v2`.
func (o ApiKeyOwnerOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ApiKeyOwner) string { return v.ApiVersion }).(pulumi.StringOutput)
}

// The ID of the Environment that the managed resource belongs to, for example, `env-abc123`.
func (o ApiKeyOwnerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ApiKeyOwner) string { return v.Id }).(pulumi.StringOutput)
}

// The kind of the managed resource that the API Key associated with, for example, `Cluster`.
func (o ApiKeyOwnerOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ApiKeyOwner) string { return v.Kind }).(pulumi.StringOutput)
}

type ApiKeyOwnerPtrOutput struct{ *pulumi.OutputState }

func (ApiKeyOwnerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiKeyOwner)(nil)).Elem()
}

func (o ApiKeyOwnerPtrOutput) ToApiKeyOwnerPtrOutput() ApiKeyOwnerPtrOutput {
	return o
}

func (o ApiKeyOwnerPtrOutput) ToApiKeyOwnerPtrOutputWithContext(ctx context.Context) ApiKeyOwnerPtrOutput {
	return o
}

func (o ApiKeyOwnerPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApiKeyOwner] {
	return pulumix.Output[*ApiKeyOwner]{
		OutputState: o.OutputState,
	}
}

func (o ApiKeyOwnerPtrOutput) Elem() ApiKeyOwnerOutput {
	return o.ApplyT(func(v *ApiKeyOwner) ApiKeyOwner {
		if v != nil {
			return *v
		}
		var ret ApiKeyOwner
		return ret
	}).(ApiKeyOwnerOutput)
}

// The API group and version of the managed resource that the API Key associated with, for example, `cmk/v2`.
func (o ApiKeyOwnerPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiKeyOwner) *string {
		if v == nil {
			return nil
		}
		return &v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// The ID of the Environment that the managed resource belongs to, for example, `env-abc123`.
func (o ApiKeyOwnerPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiKeyOwner) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The kind of the managed resource that the API Key associated with, for example, `Cluster`.
func (o ApiKeyOwnerPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiKeyOwner) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

type BusinessMetadataAttributeDefinition struct {
	// The default value of this attribute.
	DefaultValue *string `pulumi:"defaultValue"`
	// The description of the Business Metadata.
	Description *string `pulumi:"description"`
	// An optional flag to control whether the attribute should be optional or required. The default value is `false`.
	IsOptional *bool `pulumi:"isOptional"`
	// The name of the attribute.
	Name string `pulumi:"name"`
	// (Optional Map) Block for the attribute options:
	Options map[string]string `pulumi:"options"`
	// (Required String) The type of the attribute, it always returns `string`.
	Type *string `pulumi:"type"`
}

// BusinessMetadataAttributeDefinitionInput is an input type that accepts BusinessMetadataAttributeDefinitionArgs and BusinessMetadataAttributeDefinitionOutput values.
// You can construct a concrete instance of `BusinessMetadataAttributeDefinitionInput` via:
//
//	BusinessMetadataAttributeDefinitionArgs{...}
type BusinessMetadataAttributeDefinitionInput interface {
	pulumi.Input

	ToBusinessMetadataAttributeDefinitionOutput() BusinessMetadataAttributeDefinitionOutput
	ToBusinessMetadataAttributeDefinitionOutputWithContext(context.Context) BusinessMetadataAttributeDefinitionOutput
}

type BusinessMetadataAttributeDefinitionArgs struct {
	// The default value of this attribute.
	DefaultValue pulumi.StringPtrInput `pulumi:"defaultValue"`
	// The description of the Business Metadata.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// An optional flag to control whether the attribute should be optional or required. The default value is `false`.
	IsOptional pulumi.BoolPtrInput `pulumi:"isOptional"`
	// The name of the attribute.
	Name pulumi.StringInput `pulumi:"name"`
	// (Optional Map) Block for the attribute options:
	Options pulumi.StringMapInput `pulumi:"options"`
	// (Required String) The type of the attribute, it always returns `string`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (BusinessMetadataAttributeDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BusinessMetadataAttributeDefinition)(nil)).Elem()
}

func (i BusinessMetadataAttributeDefinitionArgs) ToBusinessMetadataAttributeDefinitionOutput() BusinessMetadataAttributeDefinitionOutput {
	return i.ToBusinessMetadataAttributeDefinitionOutputWithContext(context.Background())
}

func (i BusinessMetadataAttributeDefinitionArgs) ToBusinessMetadataAttributeDefinitionOutputWithContext(ctx context.Context) BusinessMetadataAttributeDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessMetadataAttributeDefinitionOutput)
}

func (i BusinessMetadataAttributeDefinitionArgs) ToOutput(ctx context.Context) pulumix.Output[BusinessMetadataAttributeDefinition] {
	return pulumix.Output[BusinessMetadataAttributeDefinition]{
		OutputState: i.ToBusinessMetadataAttributeDefinitionOutputWithContext(ctx).OutputState,
	}
}

// BusinessMetadataAttributeDefinitionArrayInput is an input type that accepts BusinessMetadataAttributeDefinitionArray and BusinessMetadataAttributeDefinitionArrayOutput values.
// You can construct a concrete instance of `BusinessMetadataAttributeDefinitionArrayInput` via:
//
//	BusinessMetadataAttributeDefinitionArray{ BusinessMetadataAttributeDefinitionArgs{...} }
type BusinessMetadataAttributeDefinitionArrayInput interface {
	pulumi.Input

	ToBusinessMetadataAttributeDefinitionArrayOutput() BusinessMetadataAttributeDefinitionArrayOutput
	ToBusinessMetadataAttributeDefinitionArrayOutputWithContext(context.Context) BusinessMetadataAttributeDefinitionArrayOutput
}

type BusinessMetadataAttributeDefinitionArray []BusinessMetadataAttributeDefinitionInput

func (BusinessMetadataAttributeDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BusinessMetadataAttributeDefinition)(nil)).Elem()
}

func (i BusinessMetadataAttributeDefinitionArray) ToBusinessMetadataAttributeDefinitionArrayOutput() BusinessMetadataAttributeDefinitionArrayOutput {
	return i.ToBusinessMetadataAttributeDefinitionArrayOutputWithContext(context.Background())
}

func (i BusinessMetadataAttributeDefinitionArray) ToBusinessMetadataAttributeDefinitionArrayOutputWithContext(ctx context.Context) BusinessMetadataAttributeDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessMetadataAttributeDefinitionArrayOutput)
}

func (i BusinessMetadataAttributeDefinitionArray) ToOutput(ctx context.Context) pulumix.Output[[]BusinessMetadataAttributeDefinition] {
	return pulumix.Output[[]BusinessMetadataAttributeDefinition]{
		OutputState: i.ToBusinessMetadataAttributeDefinitionArrayOutputWithContext(ctx).OutputState,
	}
}

type BusinessMetadataAttributeDefinitionOutput struct{ *pulumi.OutputState }

func (BusinessMetadataAttributeDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BusinessMetadataAttributeDefinition)(nil)).Elem()
}

func (o BusinessMetadataAttributeDefinitionOutput) ToBusinessMetadataAttributeDefinitionOutput() BusinessMetadataAttributeDefinitionOutput {
	return o
}

func (o BusinessMetadataAttributeDefinitionOutput) ToBusinessMetadataAttributeDefinitionOutputWithContext(ctx context.Context) BusinessMetadataAttributeDefinitionOutput {
	return o
}

func (o BusinessMetadataAttributeDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[BusinessMetadataAttributeDefinition] {
	return pulumix.Output[BusinessMetadataAttributeDefinition]{
		OutputState: o.OutputState,
	}
}

// The default value of this attribute.
func (o BusinessMetadataAttributeDefinitionOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BusinessMetadataAttributeDefinition) *string { return v.DefaultValue }).(pulumi.StringPtrOutput)
}

// The description of the Business Metadata.
func (o BusinessMetadataAttributeDefinitionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BusinessMetadataAttributeDefinition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// An optional flag to control whether the attribute should be optional or required. The default value is `false`.
func (o BusinessMetadataAttributeDefinitionOutput) IsOptional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BusinessMetadataAttributeDefinition) *bool { return v.IsOptional }).(pulumi.BoolPtrOutput)
}

// The name of the attribute.
func (o BusinessMetadataAttributeDefinitionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BusinessMetadataAttributeDefinition) string { return v.Name }).(pulumi.StringOutput)
}

// (Optional Map) Block for the attribute options:
func (o BusinessMetadataAttributeDefinitionOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v BusinessMetadataAttributeDefinition) map[string]string { return v.Options }).(pulumi.StringMapOutput)
}

// (Required String) The type of the attribute, it always returns `string`.
func (o BusinessMetadataAttributeDefinitionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BusinessMetadataAttributeDefinition) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type BusinessMetadataAttributeDefinitionArrayOutput struct{ *pulumi.OutputState }

func (BusinessMetadataAttributeDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BusinessMetadataAttributeDefinition)(nil)).Elem()
}

func (o BusinessMetadataAttributeDefinitionArrayOutput) ToBusinessMetadataAttributeDefinitionArrayOutput() BusinessMetadataAttributeDefinitionArrayOutput {
	return o
}

func (o BusinessMetadataAttributeDefinitionArrayOutput) ToBusinessMetadataAttributeDefinitionArrayOutputWithContext(ctx context.Context) BusinessMetadataAttributeDefinitionArrayOutput {
	return o
}

func (o BusinessMetadataAttributeDefinitionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BusinessMetadataAttributeDefinition] {
	return pulumix.Output[[]BusinessMetadataAttributeDefinition]{
		OutputState: o.OutputState,
	}
}

func (o BusinessMetadataAttributeDefinitionArrayOutput) Index(i pulumi.IntInput) BusinessMetadataAttributeDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BusinessMetadataAttributeDefinition {
		return vs[0].([]BusinessMetadataAttributeDefinition)[vs[1].(int)]
	}).(BusinessMetadataAttributeDefinitionOutput)
}

type BusinessMetadataBindingCredentials struct {
	// The Schema Registry API Key.
	Key string `pulumi:"key"`
	// The Schema Registry API Secret.
	Secret string `pulumi:"secret"`
}

// BusinessMetadataBindingCredentialsInput is an input type that accepts BusinessMetadataBindingCredentialsArgs and BusinessMetadataBindingCredentialsOutput values.
// You can construct a concrete instance of `BusinessMetadataBindingCredentialsInput` via:
//
//	BusinessMetadataBindingCredentialsArgs{...}
type BusinessMetadataBindingCredentialsInput interface {
	pulumi.Input

	ToBusinessMetadataBindingCredentialsOutput() BusinessMetadataBindingCredentialsOutput
	ToBusinessMetadataBindingCredentialsOutputWithContext(context.Context) BusinessMetadataBindingCredentialsOutput
}

type BusinessMetadataBindingCredentialsArgs struct {
	// The Schema Registry API Key.
	Key pulumi.StringInput `pulumi:"key"`
	// The Schema Registry API Secret.
	Secret pulumi.StringInput `pulumi:"secret"`
}

func (BusinessMetadataBindingCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BusinessMetadataBindingCredentials)(nil)).Elem()
}

func (i BusinessMetadataBindingCredentialsArgs) ToBusinessMetadataBindingCredentialsOutput() BusinessMetadataBindingCredentialsOutput {
	return i.ToBusinessMetadataBindingCredentialsOutputWithContext(context.Background())
}

func (i BusinessMetadataBindingCredentialsArgs) ToBusinessMetadataBindingCredentialsOutputWithContext(ctx context.Context) BusinessMetadataBindingCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessMetadataBindingCredentialsOutput)
}

func (i BusinessMetadataBindingCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[BusinessMetadataBindingCredentials] {
	return pulumix.Output[BusinessMetadataBindingCredentials]{
		OutputState: i.ToBusinessMetadataBindingCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i BusinessMetadataBindingCredentialsArgs) ToBusinessMetadataBindingCredentialsPtrOutput() BusinessMetadataBindingCredentialsPtrOutput {
	return i.ToBusinessMetadataBindingCredentialsPtrOutputWithContext(context.Background())
}

func (i BusinessMetadataBindingCredentialsArgs) ToBusinessMetadataBindingCredentialsPtrOutputWithContext(ctx context.Context) BusinessMetadataBindingCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessMetadataBindingCredentialsOutput).ToBusinessMetadataBindingCredentialsPtrOutputWithContext(ctx)
}

// BusinessMetadataBindingCredentialsPtrInput is an input type that accepts BusinessMetadataBindingCredentialsArgs, BusinessMetadataBindingCredentialsPtr and BusinessMetadataBindingCredentialsPtrOutput values.
// You can construct a concrete instance of `BusinessMetadataBindingCredentialsPtrInput` via:
//
//	        BusinessMetadataBindingCredentialsArgs{...}
//
//	or:
//
//	        nil
type BusinessMetadataBindingCredentialsPtrInput interface {
	pulumi.Input

	ToBusinessMetadataBindingCredentialsPtrOutput() BusinessMetadataBindingCredentialsPtrOutput
	ToBusinessMetadataBindingCredentialsPtrOutputWithContext(context.Context) BusinessMetadataBindingCredentialsPtrOutput
}

type businessMetadataBindingCredentialsPtrType BusinessMetadataBindingCredentialsArgs

func BusinessMetadataBindingCredentialsPtr(v *BusinessMetadataBindingCredentialsArgs) BusinessMetadataBindingCredentialsPtrInput {
	return (*businessMetadataBindingCredentialsPtrType)(v)
}

func (*businessMetadataBindingCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BusinessMetadataBindingCredentials)(nil)).Elem()
}

func (i *businessMetadataBindingCredentialsPtrType) ToBusinessMetadataBindingCredentialsPtrOutput() BusinessMetadataBindingCredentialsPtrOutput {
	return i.ToBusinessMetadataBindingCredentialsPtrOutputWithContext(context.Background())
}

func (i *businessMetadataBindingCredentialsPtrType) ToBusinessMetadataBindingCredentialsPtrOutputWithContext(ctx context.Context) BusinessMetadataBindingCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessMetadataBindingCredentialsPtrOutput)
}

func (i *businessMetadataBindingCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*BusinessMetadataBindingCredentials] {
	return pulumix.Output[*BusinessMetadataBindingCredentials]{
		OutputState: i.ToBusinessMetadataBindingCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

type BusinessMetadataBindingCredentialsOutput struct{ *pulumi.OutputState }

func (BusinessMetadataBindingCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BusinessMetadataBindingCredentials)(nil)).Elem()
}

func (o BusinessMetadataBindingCredentialsOutput) ToBusinessMetadataBindingCredentialsOutput() BusinessMetadataBindingCredentialsOutput {
	return o
}

func (o BusinessMetadataBindingCredentialsOutput) ToBusinessMetadataBindingCredentialsOutputWithContext(ctx context.Context) BusinessMetadataBindingCredentialsOutput {
	return o
}

func (o BusinessMetadataBindingCredentialsOutput) ToBusinessMetadataBindingCredentialsPtrOutput() BusinessMetadataBindingCredentialsPtrOutput {
	return o.ToBusinessMetadataBindingCredentialsPtrOutputWithContext(context.Background())
}

func (o BusinessMetadataBindingCredentialsOutput) ToBusinessMetadataBindingCredentialsPtrOutputWithContext(ctx context.Context) BusinessMetadataBindingCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BusinessMetadataBindingCredentials) *BusinessMetadataBindingCredentials {
		return &v
	}).(BusinessMetadataBindingCredentialsPtrOutput)
}

func (o BusinessMetadataBindingCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[BusinessMetadataBindingCredentials] {
	return pulumix.Output[BusinessMetadataBindingCredentials]{
		OutputState: o.OutputState,
	}
}

// The Schema Registry API Key.
func (o BusinessMetadataBindingCredentialsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v BusinessMetadataBindingCredentials) string { return v.Key }).(pulumi.StringOutput)
}

// The Schema Registry API Secret.
func (o BusinessMetadataBindingCredentialsOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v BusinessMetadataBindingCredentials) string { return v.Secret }).(pulumi.StringOutput)
}

type BusinessMetadataBindingCredentialsPtrOutput struct{ *pulumi.OutputState }

func (BusinessMetadataBindingCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BusinessMetadataBindingCredentials)(nil)).Elem()
}

func (o BusinessMetadataBindingCredentialsPtrOutput) ToBusinessMetadataBindingCredentialsPtrOutput() BusinessMetadataBindingCredentialsPtrOutput {
	return o
}

func (o BusinessMetadataBindingCredentialsPtrOutput) ToBusinessMetadataBindingCredentialsPtrOutputWithContext(ctx context.Context) BusinessMetadataBindingCredentialsPtrOutput {
	return o
}

func (o BusinessMetadataBindingCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BusinessMetadataBindingCredentials] {
	return pulumix.Output[*BusinessMetadataBindingCredentials]{
		OutputState: o.OutputState,
	}
}

func (o BusinessMetadataBindingCredentialsPtrOutput) Elem() BusinessMetadataBindingCredentialsOutput {
	return o.ApplyT(func(v *BusinessMetadataBindingCredentials) BusinessMetadataBindingCredentials {
		if v != nil {
			return *v
		}
		var ret BusinessMetadataBindingCredentials
		return ret
	}).(BusinessMetadataBindingCredentialsOutput)
}

// The Schema Registry API Key.
func (o BusinessMetadataBindingCredentialsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BusinessMetadataBindingCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// The Schema Registry API Secret.
func (o BusinessMetadataBindingCredentialsPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BusinessMetadataBindingCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Secret
	}).(pulumi.StringPtrOutput)
}

type BusinessMetadataBindingSchemaRegistryCluster struct {
	// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
	Id string `pulumi:"id"`
}

// BusinessMetadataBindingSchemaRegistryClusterInput is an input type that accepts BusinessMetadataBindingSchemaRegistryClusterArgs and BusinessMetadataBindingSchemaRegistryClusterOutput values.
// You can construct a concrete instance of `BusinessMetadataBindingSchemaRegistryClusterInput` via:
//
//	BusinessMetadataBindingSchemaRegistryClusterArgs{...}
type BusinessMetadataBindingSchemaRegistryClusterInput interface {
	pulumi.Input

	ToBusinessMetadataBindingSchemaRegistryClusterOutput() BusinessMetadataBindingSchemaRegistryClusterOutput
	ToBusinessMetadataBindingSchemaRegistryClusterOutputWithContext(context.Context) BusinessMetadataBindingSchemaRegistryClusterOutput
}

type BusinessMetadataBindingSchemaRegistryClusterArgs struct {
	// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (BusinessMetadataBindingSchemaRegistryClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BusinessMetadataBindingSchemaRegistryCluster)(nil)).Elem()
}

func (i BusinessMetadataBindingSchemaRegistryClusterArgs) ToBusinessMetadataBindingSchemaRegistryClusterOutput() BusinessMetadataBindingSchemaRegistryClusterOutput {
	return i.ToBusinessMetadataBindingSchemaRegistryClusterOutputWithContext(context.Background())
}

func (i BusinessMetadataBindingSchemaRegistryClusterArgs) ToBusinessMetadataBindingSchemaRegistryClusterOutputWithContext(ctx context.Context) BusinessMetadataBindingSchemaRegistryClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessMetadataBindingSchemaRegistryClusterOutput)
}

func (i BusinessMetadataBindingSchemaRegistryClusterArgs) ToOutput(ctx context.Context) pulumix.Output[BusinessMetadataBindingSchemaRegistryCluster] {
	return pulumix.Output[BusinessMetadataBindingSchemaRegistryCluster]{
		OutputState: i.ToBusinessMetadataBindingSchemaRegistryClusterOutputWithContext(ctx).OutputState,
	}
}

func (i BusinessMetadataBindingSchemaRegistryClusterArgs) ToBusinessMetadataBindingSchemaRegistryClusterPtrOutput() BusinessMetadataBindingSchemaRegistryClusterPtrOutput {
	return i.ToBusinessMetadataBindingSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (i BusinessMetadataBindingSchemaRegistryClusterArgs) ToBusinessMetadataBindingSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) BusinessMetadataBindingSchemaRegistryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessMetadataBindingSchemaRegistryClusterOutput).ToBusinessMetadataBindingSchemaRegistryClusterPtrOutputWithContext(ctx)
}

// BusinessMetadataBindingSchemaRegistryClusterPtrInput is an input type that accepts BusinessMetadataBindingSchemaRegistryClusterArgs, BusinessMetadataBindingSchemaRegistryClusterPtr and BusinessMetadataBindingSchemaRegistryClusterPtrOutput values.
// You can construct a concrete instance of `BusinessMetadataBindingSchemaRegistryClusterPtrInput` via:
//
//	        BusinessMetadataBindingSchemaRegistryClusterArgs{...}
//
//	or:
//
//	        nil
type BusinessMetadataBindingSchemaRegistryClusterPtrInput interface {
	pulumi.Input

	ToBusinessMetadataBindingSchemaRegistryClusterPtrOutput() BusinessMetadataBindingSchemaRegistryClusterPtrOutput
	ToBusinessMetadataBindingSchemaRegistryClusterPtrOutputWithContext(context.Context) BusinessMetadataBindingSchemaRegistryClusterPtrOutput
}

type businessMetadataBindingSchemaRegistryClusterPtrType BusinessMetadataBindingSchemaRegistryClusterArgs

func BusinessMetadataBindingSchemaRegistryClusterPtr(v *BusinessMetadataBindingSchemaRegistryClusterArgs) BusinessMetadataBindingSchemaRegistryClusterPtrInput {
	return (*businessMetadataBindingSchemaRegistryClusterPtrType)(v)
}

func (*businessMetadataBindingSchemaRegistryClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BusinessMetadataBindingSchemaRegistryCluster)(nil)).Elem()
}

func (i *businessMetadataBindingSchemaRegistryClusterPtrType) ToBusinessMetadataBindingSchemaRegistryClusterPtrOutput() BusinessMetadataBindingSchemaRegistryClusterPtrOutput {
	return i.ToBusinessMetadataBindingSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (i *businessMetadataBindingSchemaRegistryClusterPtrType) ToBusinessMetadataBindingSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) BusinessMetadataBindingSchemaRegistryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessMetadataBindingSchemaRegistryClusterPtrOutput)
}

func (i *businessMetadataBindingSchemaRegistryClusterPtrType) ToOutput(ctx context.Context) pulumix.Output[*BusinessMetadataBindingSchemaRegistryCluster] {
	return pulumix.Output[*BusinessMetadataBindingSchemaRegistryCluster]{
		OutputState: i.ToBusinessMetadataBindingSchemaRegistryClusterPtrOutputWithContext(ctx).OutputState,
	}
}

type BusinessMetadataBindingSchemaRegistryClusterOutput struct{ *pulumi.OutputState }

func (BusinessMetadataBindingSchemaRegistryClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BusinessMetadataBindingSchemaRegistryCluster)(nil)).Elem()
}

func (o BusinessMetadataBindingSchemaRegistryClusterOutput) ToBusinessMetadataBindingSchemaRegistryClusterOutput() BusinessMetadataBindingSchemaRegistryClusterOutput {
	return o
}

func (o BusinessMetadataBindingSchemaRegistryClusterOutput) ToBusinessMetadataBindingSchemaRegistryClusterOutputWithContext(ctx context.Context) BusinessMetadataBindingSchemaRegistryClusterOutput {
	return o
}

func (o BusinessMetadataBindingSchemaRegistryClusterOutput) ToBusinessMetadataBindingSchemaRegistryClusterPtrOutput() BusinessMetadataBindingSchemaRegistryClusterPtrOutput {
	return o.ToBusinessMetadataBindingSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (o BusinessMetadataBindingSchemaRegistryClusterOutput) ToBusinessMetadataBindingSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) BusinessMetadataBindingSchemaRegistryClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BusinessMetadataBindingSchemaRegistryCluster) *BusinessMetadataBindingSchemaRegistryCluster {
		return &v
	}).(BusinessMetadataBindingSchemaRegistryClusterPtrOutput)
}

func (o BusinessMetadataBindingSchemaRegistryClusterOutput) ToOutput(ctx context.Context) pulumix.Output[BusinessMetadataBindingSchemaRegistryCluster] {
	return pulumix.Output[BusinessMetadataBindingSchemaRegistryCluster]{
		OutputState: o.OutputState,
	}
}

// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
func (o BusinessMetadataBindingSchemaRegistryClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v BusinessMetadataBindingSchemaRegistryCluster) string { return v.Id }).(pulumi.StringOutput)
}

type BusinessMetadataBindingSchemaRegistryClusterPtrOutput struct{ *pulumi.OutputState }

func (BusinessMetadataBindingSchemaRegistryClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BusinessMetadataBindingSchemaRegistryCluster)(nil)).Elem()
}

func (o BusinessMetadataBindingSchemaRegistryClusterPtrOutput) ToBusinessMetadataBindingSchemaRegistryClusterPtrOutput() BusinessMetadataBindingSchemaRegistryClusterPtrOutput {
	return o
}

func (o BusinessMetadataBindingSchemaRegistryClusterPtrOutput) ToBusinessMetadataBindingSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) BusinessMetadataBindingSchemaRegistryClusterPtrOutput {
	return o
}

func (o BusinessMetadataBindingSchemaRegistryClusterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BusinessMetadataBindingSchemaRegistryCluster] {
	return pulumix.Output[*BusinessMetadataBindingSchemaRegistryCluster]{
		OutputState: o.OutputState,
	}
}

func (o BusinessMetadataBindingSchemaRegistryClusterPtrOutput) Elem() BusinessMetadataBindingSchemaRegistryClusterOutput {
	return o.ApplyT(func(v *BusinessMetadataBindingSchemaRegistryCluster) BusinessMetadataBindingSchemaRegistryCluster {
		if v != nil {
			return *v
		}
		var ret BusinessMetadataBindingSchemaRegistryCluster
		return ret
	}).(BusinessMetadataBindingSchemaRegistryClusterOutput)
}

// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
func (o BusinessMetadataBindingSchemaRegistryClusterPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BusinessMetadataBindingSchemaRegistryCluster) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type BusinessMetadataCredentials struct {
	// The Schema Registry API Key.
	Key    string `pulumi:"key"`
	Secret string `pulumi:"secret"`
}

// BusinessMetadataCredentialsInput is an input type that accepts BusinessMetadataCredentialsArgs and BusinessMetadataCredentialsOutput values.
// You can construct a concrete instance of `BusinessMetadataCredentialsInput` via:
//
//	BusinessMetadataCredentialsArgs{...}
type BusinessMetadataCredentialsInput interface {
	pulumi.Input

	ToBusinessMetadataCredentialsOutput() BusinessMetadataCredentialsOutput
	ToBusinessMetadataCredentialsOutputWithContext(context.Context) BusinessMetadataCredentialsOutput
}

type BusinessMetadataCredentialsArgs struct {
	// The Schema Registry API Key.
	Key    pulumi.StringInput `pulumi:"key"`
	Secret pulumi.StringInput `pulumi:"secret"`
}

func (BusinessMetadataCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BusinessMetadataCredentials)(nil)).Elem()
}

func (i BusinessMetadataCredentialsArgs) ToBusinessMetadataCredentialsOutput() BusinessMetadataCredentialsOutput {
	return i.ToBusinessMetadataCredentialsOutputWithContext(context.Background())
}

func (i BusinessMetadataCredentialsArgs) ToBusinessMetadataCredentialsOutputWithContext(ctx context.Context) BusinessMetadataCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessMetadataCredentialsOutput)
}

func (i BusinessMetadataCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[BusinessMetadataCredentials] {
	return pulumix.Output[BusinessMetadataCredentials]{
		OutputState: i.ToBusinessMetadataCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i BusinessMetadataCredentialsArgs) ToBusinessMetadataCredentialsPtrOutput() BusinessMetadataCredentialsPtrOutput {
	return i.ToBusinessMetadataCredentialsPtrOutputWithContext(context.Background())
}

func (i BusinessMetadataCredentialsArgs) ToBusinessMetadataCredentialsPtrOutputWithContext(ctx context.Context) BusinessMetadataCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessMetadataCredentialsOutput).ToBusinessMetadataCredentialsPtrOutputWithContext(ctx)
}

// BusinessMetadataCredentialsPtrInput is an input type that accepts BusinessMetadataCredentialsArgs, BusinessMetadataCredentialsPtr and BusinessMetadataCredentialsPtrOutput values.
// You can construct a concrete instance of `BusinessMetadataCredentialsPtrInput` via:
//
//	        BusinessMetadataCredentialsArgs{...}
//
//	or:
//
//	        nil
type BusinessMetadataCredentialsPtrInput interface {
	pulumi.Input

	ToBusinessMetadataCredentialsPtrOutput() BusinessMetadataCredentialsPtrOutput
	ToBusinessMetadataCredentialsPtrOutputWithContext(context.Context) BusinessMetadataCredentialsPtrOutput
}

type businessMetadataCredentialsPtrType BusinessMetadataCredentialsArgs

func BusinessMetadataCredentialsPtr(v *BusinessMetadataCredentialsArgs) BusinessMetadataCredentialsPtrInput {
	return (*businessMetadataCredentialsPtrType)(v)
}

func (*businessMetadataCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BusinessMetadataCredentials)(nil)).Elem()
}

func (i *businessMetadataCredentialsPtrType) ToBusinessMetadataCredentialsPtrOutput() BusinessMetadataCredentialsPtrOutput {
	return i.ToBusinessMetadataCredentialsPtrOutputWithContext(context.Background())
}

func (i *businessMetadataCredentialsPtrType) ToBusinessMetadataCredentialsPtrOutputWithContext(ctx context.Context) BusinessMetadataCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessMetadataCredentialsPtrOutput)
}

func (i *businessMetadataCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*BusinessMetadataCredentials] {
	return pulumix.Output[*BusinessMetadataCredentials]{
		OutputState: i.ToBusinessMetadataCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

type BusinessMetadataCredentialsOutput struct{ *pulumi.OutputState }

func (BusinessMetadataCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BusinessMetadataCredentials)(nil)).Elem()
}

func (o BusinessMetadataCredentialsOutput) ToBusinessMetadataCredentialsOutput() BusinessMetadataCredentialsOutput {
	return o
}

func (o BusinessMetadataCredentialsOutput) ToBusinessMetadataCredentialsOutputWithContext(ctx context.Context) BusinessMetadataCredentialsOutput {
	return o
}

func (o BusinessMetadataCredentialsOutput) ToBusinessMetadataCredentialsPtrOutput() BusinessMetadataCredentialsPtrOutput {
	return o.ToBusinessMetadataCredentialsPtrOutputWithContext(context.Background())
}

func (o BusinessMetadataCredentialsOutput) ToBusinessMetadataCredentialsPtrOutputWithContext(ctx context.Context) BusinessMetadataCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BusinessMetadataCredentials) *BusinessMetadataCredentials {
		return &v
	}).(BusinessMetadataCredentialsPtrOutput)
}

func (o BusinessMetadataCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[BusinessMetadataCredentials] {
	return pulumix.Output[BusinessMetadataCredentials]{
		OutputState: o.OutputState,
	}
}

// The Schema Registry API Key.
func (o BusinessMetadataCredentialsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v BusinessMetadataCredentials) string { return v.Key }).(pulumi.StringOutput)
}

func (o BusinessMetadataCredentialsOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v BusinessMetadataCredentials) string { return v.Secret }).(pulumi.StringOutput)
}

type BusinessMetadataCredentialsPtrOutput struct{ *pulumi.OutputState }

func (BusinessMetadataCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BusinessMetadataCredentials)(nil)).Elem()
}

func (o BusinessMetadataCredentialsPtrOutput) ToBusinessMetadataCredentialsPtrOutput() BusinessMetadataCredentialsPtrOutput {
	return o
}

func (o BusinessMetadataCredentialsPtrOutput) ToBusinessMetadataCredentialsPtrOutputWithContext(ctx context.Context) BusinessMetadataCredentialsPtrOutput {
	return o
}

func (o BusinessMetadataCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BusinessMetadataCredentials] {
	return pulumix.Output[*BusinessMetadataCredentials]{
		OutputState: o.OutputState,
	}
}

func (o BusinessMetadataCredentialsPtrOutput) Elem() BusinessMetadataCredentialsOutput {
	return o.ApplyT(func(v *BusinessMetadataCredentials) BusinessMetadataCredentials {
		if v != nil {
			return *v
		}
		var ret BusinessMetadataCredentials
		return ret
	}).(BusinessMetadataCredentialsOutput)
}

// The Schema Registry API Key.
func (o BusinessMetadataCredentialsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BusinessMetadataCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

func (o BusinessMetadataCredentialsPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BusinessMetadataCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Secret
	}).(pulumi.StringPtrOutput)
}

type BusinessMetadataSchemaRegistryCluster struct {
	// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
	Id string `pulumi:"id"`
}

// BusinessMetadataSchemaRegistryClusterInput is an input type that accepts BusinessMetadataSchemaRegistryClusterArgs and BusinessMetadataSchemaRegistryClusterOutput values.
// You can construct a concrete instance of `BusinessMetadataSchemaRegistryClusterInput` via:
//
//	BusinessMetadataSchemaRegistryClusterArgs{...}
type BusinessMetadataSchemaRegistryClusterInput interface {
	pulumi.Input

	ToBusinessMetadataSchemaRegistryClusterOutput() BusinessMetadataSchemaRegistryClusterOutput
	ToBusinessMetadataSchemaRegistryClusterOutputWithContext(context.Context) BusinessMetadataSchemaRegistryClusterOutput
}

type BusinessMetadataSchemaRegistryClusterArgs struct {
	// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (BusinessMetadataSchemaRegistryClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BusinessMetadataSchemaRegistryCluster)(nil)).Elem()
}

func (i BusinessMetadataSchemaRegistryClusterArgs) ToBusinessMetadataSchemaRegistryClusterOutput() BusinessMetadataSchemaRegistryClusterOutput {
	return i.ToBusinessMetadataSchemaRegistryClusterOutputWithContext(context.Background())
}

func (i BusinessMetadataSchemaRegistryClusterArgs) ToBusinessMetadataSchemaRegistryClusterOutputWithContext(ctx context.Context) BusinessMetadataSchemaRegistryClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessMetadataSchemaRegistryClusterOutput)
}

func (i BusinessMetadataSchemaRegistryClusterArgs) ToOutput(ctx context.Context) pulumix.Output[BusinessMetadataSchemaRegistryCluster] {
	return pulumix.Output[BusinessMetadataSchemaRegistryCluster]{
		OutputState: i.ToBusinessMetadataSchemaRegistryClusterOutputWithContext(ctx).OutputState,
	}
}

func (i BusinessMetadataSchemaRegistryClusterArgs) ToBusinessMetadataSchemaRegistryClusterPtrOutput() BusinessMetadataSchemaRegistryClusterPtrOutput {
	return i.ToBusinessMetadataSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (i BusinessMetadataSchemaRegistryClusterArgs) ToBusinessMetadataSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) BusinessMetadataSchemaRegistryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessMetadataSchemaRegistryClusterOutput).ToBusinessMetadataSchemaRegistryClusterPtrOutputWithContext(ctx)
}

// BusinessMetadataSchemaRegistryClusterPtrInput is an input type that accepts BusinessMetadataSchemaRegistryClusterArgs, BusinessMetadataSchemaRegistryClusterPtr and BusinessMetadataSchemaRegistryClusterPtrOutput values.
// You can construct a concrete instance of `BusinessMetadataSchemaRegistryClusterPtrInput` via:
//
//	        BusinessMetadataSchemaRegistryClusterArgs{...}
//
//	or:
//
//	        nil
type BusinessMetadataSchemaRegistryClusterPtrInput interface {
	pulumi.Input

	ToBusinessMetadataSchemaRegistryClusterPtrOutput() BusinessMetadataSchemaRegistryClusterPtrOutput
	ToBusinessMetadataSchemaRegistryClusterPtrOutputWithContext(context.Context) BusinessMetadataSchemaRegistryClusterPtrOutput
}

type businessMetadataSchemaRegistryClusterPtrType BusinessMetadataSchemaRegistryClusterArgs

func BusinessMetadataSchemaRegistryClusterPtr(v *BusinessMetadataSchemaRegistryClusterArgs) BusinessMetadataSchemaRegistryClusterPtrInput {
	return (*businessMetadataSchemaRegistryClusterPtrType)(v)
}

func (*businessMetadataSchemaRegistryClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BusinessMetadataSchemaRegistryCluster)(nil)).Elem()
}

func (i *businessMetadataSchemaRegistryClusterPtrType) ToBusinessMetadataSchemaRegistryClusterPtrOutput() BusinessMetadataSchemaRegistryClusterPtrOutput {
	return i.ToBusinessMetadataSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (i *businessMetadataSchemaRegistryClusterPtrType) ToBusinessMetadataSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) BusinessMetadataSchemaRegistryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessMetadataSchemaRegistryClusterPtrOutput)
}

func (i *businessMetadataSchemaRegistryClusterPtrType) ToOutput(ctx context.Context) pulumix.Output[*BusinessMetadataSchemaRegistryCluster] {
	return pulumix.Output[*BusinessMetadataSchemaRegistryCluster]{
		OutputState: i.ToBusinessMetadataSchemaRegistryClusterPtrOutputWithContext(ctx).OutputState,
	}
}

type BusinessMetadataSchemaRegistryClusterOutput struct{ *pulumi.OutputState }

func (BusinessMetadataSchemaRegistryClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BusinessMetadataSchemaRegistryCluster)(nil)).Elem()
}

func (o BusinessMetadataSchemaRegistryClusterOutput) ToBusinessMetadataSchemaRegistryClusterOutput() BusinessMetadataSchemaRegistryClusterOutput {
	return o
}

func (o BusinessMetadataSchemaRegistryClusterOutput) ToBusinessMetadataSchemaRegistryClusterOutputWithContext(ctx context.Context) BusinessMetadataSchemaRegistryClusterOutput {
	return o
}

func (o BusinessMetadataSchemaRegistryClusterOutput) ToBusinessMetadataSchemaRegistryClusterPtrOutput() BusinessMetadataSchemaRegistryClusterPtrOutput {
	return o.ToBusinessMetadataSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (o BusinessMetadataSchemaRegistryClusterOutput) ToBusinessMetadataSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) BusinessMetadataSchemaRegistryClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BusinessMetadataSchemaRegistryCluster) *BusinessMetadataSchemaRegistryCluster {
		return &v
	}).(BusinessMetadataSchemaRegistryClusterPtrOutput)
}

func (o BusinessMetadataSchemaRegistryClusterOutput) ToOutput(ctx context.Context) pulumix.Output[BusinessMetadataSchemaRegistryCluster] {
	return pulumix.Output[BusinessMetadataSchemaRegistryCluster]{
		OutputState: o.OutputState,
	}
}

// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
func (o BusinessMetadataSchemaRegistryClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v BusinessMetadataSchemaRegistryCluster) string { return v.Id }).(pulumi.StringOutput)
}

type BusinessMetadataSchemaRegistryClusterPtrOutput struct{ *pulumi.OutputState }

func (BusinessMetadataSchemaRegistryClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BusinessMetadataSchemaRegistryCluster)(nil)).Elem()
}

func (o BusinessMetadataSchemaRegistryClusterPtrOutput) ToBusinessMetadataSchemaRegistryClusterPtrOutput() BusinessMetadataSchemaRegistryClusterPtrOutput {
	return o
}

func (o BusinessMetadataSchemaRegistryClusterPtrOutput) ToBusinessMetadataSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) BusinessMetadataSchemaRegistryClusterPtrOutput {
	return o
}

func (o BusinessMetadataSchemaRegistryClusterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BusinessMetadataSchemaRegistryCluster] {
	return pulumix.Output[*BusinessMetadataSchemaRegistryCluster]{
		OutputState: o.OutputState,
	}
}

func (o BusinessMetadataSchemaRegistryClusterPtrOutput) Elem() BusinessMetadataSchemaRegistryClusterOutput {
	return o.ApplyT(func(v *BusinessMetadataSchemaRegistryCluster) BusinessMetadataSchemaRegistryCluster {
		if v != nil {
			return *v
		}
		var ret BusinessMetadataSchemaRegistryCluster
		return ret
	}).(BusinessMetadataSchemaRegistryClusterOutput)
}

// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
func (o BusinessMetadataSchemaRegistryClusterPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BusinessMetadataSchemaRegistryCluster) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type ByokKeyAws struct {
	// The Amazon Resource Name (ARN) of an AWS KMS key.
	KeyArn string `pulumi:"keyArn"`
	// (Optional List of Strings) The Amazon Resource Names (ARNs) of IAM Roles created for this key-environment
	Roles []string `pulumi:"roles"`
}

// ByokKeyAwsInput is an input type that accepts ByokKeyAwsArgs and ByokKeyAwsOutput values.
// You can construct a concrete instance of `ByokKeyAwsInput` via:
//
//	ByokKeyAwsArgs{...}
type ByokKeyAwsInput interface {
	pulumi.Input

	ToByokKeyAwsOutput() ByokKeyAwsOutput
	ToByokKeyAwsOutputWithContext(context.Context) ByokKeyAwsOutput
}

type ByokKeyAwsArgs struct {
	// The Amazon Resource Name (ARN) of an AWS KMS key.
	KeyArn pulumi.StringInput `pulumi:"keyArn"`
	// (Optional List of Strings) The Amazon Resource Names (ARNs) of IAM Roles created for this key-environment
	Roles pulumi.StringArrayInput `pulumi:"roles"`
}

func (ByokKeyAwsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ByokKeyAws)(nil)).Elem()
}

func (i ByokKeyAwsArgs) ToByokKeyAwsOutput() ByokKeyAwsOutput {
	return i.ToByokKeyAwsOutputWithContext(context.Background())
}

func (i ByokKeyAwsArgs) ToByokKeyAwsOutputWithContext(ctx context.Context) ByokKeyAwsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ByokKeyAwsOutput)
}

func (i ByokKeyAwsArgs) ToOutput(ctx context.Context) pulumix.Output[ByokKeyAws] {
	return pulumix.Output[ByokKeyAws]{
		OutputState: i.ToByokKeyAwsOutputWithContext(ctx).OutputState,
	}
}

func (i ByokKeyAwsArgs) ToByokKeyAwsPtrOutput() ByokKeyAwsPtrOutput {
	return i.ToByokKeyAwsPtrOutputWithContext(context.Background())
}

func (i ByokKeyAwsArgs) ToByokKeyAwsPtrOutputWithContext(ctx context.Context) ByokKeyAwsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ByokKeyAwsOutput).ToByokKeyAwsPtrOutputWithContext(ctx)
}

// ByokKeyAwsPtrInput is an input type that accepts ByokKeyAwsArgs, ByokKeyAwsPtr and ByokKeyAwsPtrOutput values.
// You can construct a concrete instance of `ByokKeyAwsPtrInput` via:
//
//	        ByokKeyAwsArgs{...}
//
//	or:
//
//	        nil
type ByokKeyAwsPtrInput interface {
	pulumi.Input

	ToByokKeyAwsPtrOutput() ByokKeyAwsPtrOutput
	ToByokKeyAwsPtrOutputWithContext(context.Context) ByokKeyAwsPtrOutput
}

type byokKeyAwsPtrType ByokKeyAwsArgs

func ByokKeyAwsPtr(v *ByokKeyAwsArgs) ByokKeyAwsPtrInput {
	return (*byokKeyAwsPtrType)(v)
}

func (*byokKeyAwsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ByokKeyAws)(nil)).Elem()
}

func (i *byokKeyAwsPtrType) ToByokKeyAwsPtrOutput() ByokKeyAwsPtrOutput {
	return i.ToByokKeyAwsPtrOutputWithContext(context.Background())
}

func (i *byokKeyAwsPtrType) ToByokKeyAwsPtrOutputWithContext(ctx context.Context) ByokKeyAwsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ByokKeyAwsPtrOutput)
}

func (i *byokKeyAwsPtrType) ToOutput(ctx context.Context) pulumix.Output[*ByokKeyAws] {
	return pulumix.Output[*ByokKeyAws]{
		OutputState: i.ToByokKeyAwsPtrOutputWithContext(ctx).OutputState,
	}
}

type ByokKeyAwsOutput struct{ *pulumi.OutputState }

func (ByokKeyAwsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ByokKeyAws)(nil)).Elem()
}

func (o ByokKeyAwsOutput) ToByokKeyAwsOutput() ByokKeyAwsOutput {
	return o
}

func (o ByokKeyAwsOutput) ToByokKeyAwsOutputWithContext(ctx context.Context) ByokKeyAwsOutput {
	return o
}

func (o ByokKeyAwsOutput) ToByokKeyAwsPtrOutput() ByokKeyAwsPtrOutput {
	return o.ToByokKeyAwsPtrOutputWithContext(context.Background())
}

func (o ByokKeyAwsOutput) ToByokKeyAwsPtrOutputWithContext(ctx context.Context) ByokKeyAwsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ByokKeyAws) *ByokKeyAws {
		return &v
	}).(ByokKeyAwsPtrOutput)
}

func (o ByokKeyAwsOutput) ToOutput(ctx context.Context) pulumix.Output[ByokKeyAws] {
	return pulumix.Output[ByokKeyAws]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of an AWS KMS key.
func (o ByokKeyAwsOutput) KeyArn() pulumi.StringOutput {
	return o.ApplyT(func(v ByokKeyAws) string { return v.KeyArn }).(pulumi.StringOutput)
}

// (Optional List of Strings) The Amazon Resource Names (ARNs) of IAM Roles created for this key-environment
func (o ByokKeyAwsOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ByokKeyAws) []string { return v.Roles }).(pulumi.StringArrayOutput)
}

type ByokKeyAwsPtrOutput struct{ *pulumi.OutputState }

func (ByokKeyAwsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ByokKeyAws)(nil)).Elem()
}

func (o ByokKeyAwsPtrOutput) ToByokKeyAwsPtrOutput() ByokKeyAwsPtrOutput {
	return o
}

func (o ByokKeyAwsPtrOutput) ToByokKeyAwsPtrOutputWithContext(ctx context.Context) ByokKeyAwsPtrOutput {
	return o
}

func (o ByokKeyAwsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ByokKeyAws] {
	return pulumix.Output[*ByokKeyAws]{
		OutputState: o.OutputState,
	}
}

func (o ByokKeyAwsPtrOutput) Elem() ByokKeyAwsOutput {
	return o.ApplyT(func(v *ByokKeyAws) ByokKeyAws {
		if v != nil {
			return *v
		}
		var ret ByokKeyAws
		return ret
	}).(ByokKeyAwsOutput)
}

// The Amazon Resource Name (ARN) of an AWS KMS key.
func (o ByokKeyAwsPtrOutput) KeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ByokKeyAws) *string {
		if v == nil {
			return nil
		}
		return &v.KeyArn
	}).(pulumi.StringPtrOutput)
}

// (Optional List of Strings) The Amazon Resource Names (ARNs) of IAM Roles created for this key-environment
func (o ByokKeyAwsPtrOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ByokKeyAws) []string {
		if v == nil {
			return nil
		}
		return v.Roles
	}).(pulumi.StringArrayOutput)
}

type ByokKeyAzure struct {
	// (Optional String) The Application ID created for this key-environment combination.
	ApplicationId *string `pulumi:"applicationId"`
	// The unique Key Object Identifier URL of an Azure Key Vault key.
	KeyIdentifier string `pulumi:"keyIdentifier"`
	// Key Vault ID containing the key.
	KeyVaultId string `pulumi:"keyVaultId"`
	// Tenant ID (uuid) hosting the Key Vault containing the key.
	TenantId string `pulumi:"tenantId"`
}

// ByokKeyAzureInput is an input type that accepts ByokKeyAzureArgs and ByokKeyAzureOutput values.
// You can construct a concrete instance of `ByokKeyAzureInput` via:
//
//	ByokKeyAzureArgs{...}
type ByokKeyAzureInput interface {
	pulumi.Input

	ToByokKeyAzureOutput() ByokKeyAzureOutput
	ToByokKeyAzureOutputWithContext(context.Context) ByokKeyAzureOutput
}

type ByokKeyAzureArgs struct {
	// (Optional String) The Application ID created for this key-environment combination.
	ApplicationId pulumi.StringPtrInput `pulumi:"applicationId"`
	// The unique Key Object Identifier URL of an Azure Key Vault key.
	KeyIdentifier pulumi.StringInput `pulumi:"keyIdentifier"`
	// Key Vault ID containing the key.
	KeyVaultId pulumi.StringInput `pulumi:"keyVaultId"`
	// Tenant ID (uuid) hosting the Key Vault containing the key.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (ByokKeyAzureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ByokKeyAzure)(nil)).Elem()
}

func (i ByokKeyAzureArgs) ToByokKeyAzureOutput() ByokKeyAzureOutput {
	return i.ToByokKeyAzureOutputWithContext(context.Background())
}

func (i ByokKeyAzureArgs) ToByokKeyAzureOutputWithContext(ctx context.Context) ByokKeyAzureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ByokKeyAzureOutput)
}

func (i ByokKeyAzureArgs) ToOutput(ctx context.Context) pulumix.Output[ByokKeyAzure] {
	return pulumix.Output[ByokKeyAzure]{
		OutputState: i.ToByokKeyAzureOutputWithContext(ctx).OutputState,
	}
}

func (i ByokKeyAzureArgs) ToByokKeyAzurePtrOutput() ByokKeyAzurePtrOutput {
	return i.ToByokKeyAzurePtrOutputWithContext(context.Background())
}

func (i ByokKeyAzureArgs) ToByokKeyAzurePtrOutputWithContext(ctx context.Context) ByokKeyAzurePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ByokKeyAzureOutput).ToByokKeyAzurePtrOutputWithContext(ctx)
}

// ByokKeyAzurePtrInput is an input type that accepts ByokKeyAzureArgs, ByokKeyAzurePtr and ByokKeyAzurePtrOutput values.
// You can construct a concrete instance of `ByokKeyAzurePtrInput` via:
//
//	        ByokKeyAzureArgs{...}
//
//	or:
//
//	        nil
type ByokKeyAzurePtrInput interface {
	pulumi.Input

	ToByokKeyAzurePtrOutput() ByokKeyAzurePtrOutput
	ToByokKeyAzurePtrOutputWithContext(context.Context) ByokKeyAzurePtrOutput
}

type byokKeyAzurePtrType ByokKeyAzureArgs

func ByokKeyAzurePtr(v *ByokKeyAzureArgs) ByokKeyAzurePtrInput {
	return (*byokKeyAzurePtrType)(v)
}

func (*byokKeyAzurePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ByokKeyAzure)(nil)).Elem()
}

func (i *byokKeyAzurePtrType) ToByokKeyAzurePtrOutput() ByokKeyAzurePtrOutput {
	return i.ToByokKeyAzurePtrOutputWithContext(context.Background())
}

func (i *byokKeyAzurePtrType) ToByokKeyAzurePtrOutputWithContext(ctx context.Context) ByokKeyAzurePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ByokKeyAzurePtrOutput)
}

func (i *byokKeyAzurePtrType) ToOutput(ctx context.Context) pulumix.Output[*ByokKeyAzure] {
	return pulumix.Output[*ByokKeyAzure]{
		OutputState: i.ToByokKeyAzurePtrOutputWithContext(ctx).OutputState,
	}
}

type ByokKeyAzureOutput struct{ *pulumi.OutputState }

func (ByokKeyAzureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ByokKeyAzure)(nil)).Elem()
}

func (o ByokKeyAzureOutput) ToByokKeyAzureOutput() ByokKeyAzureOutput {
	return o
}

func (o ByokKeyAzureOutput) ToByokKeyAzureOutputWithContext(ctx context.Context) ByokKeyAzureOutput {
	return o
}

func (o ByokKeyAzureOutput) ToByokKeyAzurePtrOutput() ByokKeyAzurePtrOutput {
	return o.ToByokKeyAzurePtrOutputWithContext(context.Background())
}

func (o ByokKeyAzureOutput) ToByokKeyAzurePtrOutputWithContext(ctx context.Context) ByokKeyAzurePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ByokKeyAzure) *ByokKeyAzure {
		return &v
	}).(ByokKeyAzurePtrOutput)
}

func (o ByokKeyAzureOutput) ToOutput(ctx context.Context) pulumix.Output[ByokKeyAzure] {
	return pulumix.Output[ByokKeyAzure]{
		OutputState: o.OutputState,
	}
}

// (Optional String) The Application ID created for this key-environment combination.
func (o ByokKeyAzureOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ByokKeyAzure) *string { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

// The unique Key Object Identifier URL of an Azure Key Vault key.
func (o ByokKeyAzureOutput) KeyIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v ByokKeyAzure) string { return v.KeyIdentifier }).(pulumi.StringOutput)
}

// Key Vault ID containing the key.
func (o ByokKeyAzureOutput) KeyVaultId() pulumi.StringOutput {
	return o.ApplyT(func(v ByokKeyAzure) string { return v.KeyVaultId }).(pulumi.StringOutput)
}

// Tenant ID (uuid) hosting the Key Vault containing the key.
func (o ByokKeyAzureOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ByokKeyAzure) string { return v.TenantId }).(pulumi.StringOutput)
}

type ByokKeyAzurePtrOutput struct{ *pulumi.OutputState }

func (ByokKeyAzurePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ByokKeyAzure)(nil)).Elem()
}

func (o ByokKeyAzurePtrOutput) ToByokKeyAzurePtrOutput() ByokKeyAzurePtrOutput {
	return o
}

func (o ByokKeyAzurePtrOutput) ToByokKeyAzurePtrOutputWithContext(ctx context.Context) ByokKeyAzurePtrOutput {
	return o
}

func (o ByokKeyAzurePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ByokKeyAzure] {
	return pulumix.Output[*ByokKeyAzure]{
		OutputState: o.OutputState,
	}
}

func (o ByokKeyAzurePtrOutput) Elem() ByokKeyAzureOutput {
	return o.ApplyT(func(v *ByokKeyAzure) ByokKeyAzure {
		if v != nil {
			return *v
		}
		var ret ByokKeyAzure
		return ret
	}).(ByokKeyAzureOutput)
}

// (Optional String) The Application ID created for this key-environment combination.
func (o ByokKeyAzurePtrOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ByokKeyAzure) *string {
		if v == nil {
			return nil
		}
		return v.ApplicationId
	}).(pulumi.StringPtrOutput)
}

// The unique Key Object Identifier URL of an Azure Key Vault key.
func (o ByokKeyAzurePtrOutput) KeyIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ByokKeyAzure) *string {
		if v == nil {
			return nil
		}
		return &v.KeyIdentifier
	}).(pulumi.StringPtrOutput)
}

// Key Vault ID containing the key.
func (o ByokKeyAzurePtrOutput) KeyVaultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ByokKeyAzure) *string {
		if v == nil {
			return nil
		}
		return &v.KeyVaultId
	}).(pulumi.StringPtrOutput)
}

// Tenant ID (uuid) hosting the Key Vault containing the key.
func (o ByokKeyAzurePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ByokKeyAzure) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

type ClusterLinkDestinationKafkaCluster struct {
	// The bootstrap endpoint of the remote Kafka cluster, for example, `SASL_SSL://pkc-00000.us-central1.gcp.confluent.cloud:9092` or `pkc-00000.us-central1.gcp.confluent.cloud:9092`).
	BootstrapEndpoint *string                                        `pulumi:"bootstrapEndpoint"`
	Credentials       *ClusterLinkDestinationKafkaClusterCredentials `pulumi:"credentials"`
	// The ID of the remote Kafka cluster, for example, `lkc-abc123`.
	Id string `pulumi:"id"`
	// The REST endpoint of the remote Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint *string `pulumi:"restEndpoint"`
}

// ClusterLinkDestinationKafkaClusterInput is an input type that accepts ClusterLinkDestinationKafkaClusterArgs and ClusterLinkDestinationKafkaClusterOutput values.
// You can construct a concrete instance of `ClusterLinkDestinationKafkaClusterInput` via:
//
//	ClusterLinkDestinationKafkaClusterArgs{...}
type ClusterLinkDestinationKafkaClusterInput interface {
	pulumi.Input

	ToClusterLinkDestinationKafkaClusterOutput() ClusterLinkDestinationKafkaClusterOutput
	ToClusterLinkDestinationKafkaClusterOutputWithContext(context.Context) ClusterLinkDestinationKafkaClusterOutput
}

type ClusterLinkDestinationKafkaClusterArgs struct {
	// The bootstrap endpoint of the remote Kafka cluster, for example, `SASL_SSL://pkc-00000.us-central1.gcp.confluent.cloud:9092` or `pkc-00000.us-central1.gcp.confluent.cloud:9092`).
	BootstrapEndpoint pulumi.StringPtrInput                                 `pulumi:"bootstrapEndpoint"`
	Credentials       ClusterLinkDestinationKafkaClusterCredentialsPtrInput `pulumi:"credentials"`
	// The ID of the remote Kafka cluster, for example, `lkc-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
	// The REST endpoint of the remote Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint pulumi.StringPtrInput `pulumi:"restEndpoint"`
}

func (ClusterLinkDestinationKafkaClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLinkDestinationKafkaCluster)(nil)).Elem()
}

func (i ClusterLinkDestinationKafkaClusterArgs) ToClusterLinkDestinationKafkaClusterOutput() ClusterLinkDestinationKafkaClusterOutput {
	return i.ToClusterLinkDestinationKafkaClusterOutputWithContext(context.Background())
}

func (i ClusterLinkDestinationKafkaClusterArgs) ToClusterLinkDestinationKafkaClusterOutputWithContext(ctx context.Context) ClusterLinkDestinationKafkaClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLinkDestinationKafkaClusterOutput)
}

func (i ClusterLinkDestinationKafkaClusterArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterLinkDestinationKafkaCluster] {
	return pulumix.Output[ClusterLinkDestinationKafkaCluster]{
		OutputState: i.ToClusterLinkDestinationKafkaClusterOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterLinkDestinationKafkaClusterArgs) ToClusterLinkDestinationKafkaClusterPtrOutput() ClusterLinkDestinationKafkaClusterPtrOutput {
	return i.ToClusterLinkDestinationKafkaClusterPtrOutputWithContext(context.Background())
}

func (i ClusterLinkDestinationKafkaClusterArgs) ToClusterLinkDestinationKafkaClusterPtrOutputWithContext(ctx context.Context) ClusterLinkDestinationKafkaClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLinkDestinationKafkaClusterOutput).ToClusterLinkDestinationKafkaClusterPtrOutputWithContext(ctx)
}

// ClusterLinkDestinationKafkaClusterPtrInput is an input type that accepts ClusterLinkDestinationKafkaClusterArgs, ClusterLinkDestinationKafkaClusterPtr and ClusterLinkDestinationKafkaClusterPtrOutput values.
// You can construct a concrete instance of `ClusterLinkDestinationKafkaClusterPtrInput` via:
//
//	        ClusterLinkDestinationKafkaClusterArgs{...}
//
//	or:
//
//	        nil
type ClusterLinkDestinationKafkaClusterPtrInput interface {
	pulumi.Input

	ToClusterLinkDestinationKafkaClusterPtrOutput() ClusterLinkDestinationKafkaClusterPtrOutput
	ToClusterLinkDestinationKafkaClusterPtrOutputWithContext(context.Context) ClusterLinkDestinationKafkaClusterPtrOutput
}

type clusterLinkDestinationKafkaClusterPtrType ClusterLinkDestinationKafkaClusterArgs

func ClusterLinkDestinationKafkaClusterPtr(v *ClusterLinkDestinationKafkaClusterArgs) ClusterLinkDestinationKafkaClusterPtrInput {
	return (*clusterLinkDestinationKafkaClusterPtrType)(v)
}

func (*clusterLinkDestinationKafkaClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLinkDestinationKafkaCluster)(nil)).Elem()
}

func (i *clusterLinkDestinationKafkaClusterPtrType) ToClusterLinkDestinationKafkaClusterPtrOutput() ClusterLinkDestinationKafkaClusterPtrOutput {
	return i.ToClusterLinkDestinationKafkaClusterPtrOutputWithContext(context.Background())
}

func (i *clusterLinkDestinationKafkaClusterPtrType) ToClusterLinkDestinationKafkaClusterPtrOutputWithContext(ctx context.Context) ClusterLinkDestinationKafkaClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLinkDestinationKafkaClusterPtrOutput)
}

func (i *clusterLinkDestinationKafkaClusterPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterLinkDestinationKafkaCluster] {
	return pulumix.Output[*ClusterLinkDestinationKafkaCluster]{
		OutputState: i.ToClusterLinkDestinationKafkaClusterPtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterLinkDestinationKafkaClusterOutput struct{ *pulumi.OutputState }

func (ClusterLinkDestinationKafkaClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLinkDestinationKafkaCluster)(nil)).Elem()
}

func (o ClusterLinkDestinationKafkaClusterOutput) ToClusterLinkDestinationKafkaClusterOutput() ClusterLinkDestinationKafkaClusterOutput {
	return o
}

func (o ClusterLinkDestinationKafkaClusterOutput) ToClusterLinkDestinationKafkaClusterOutputWithContext(ctx context.Context) ClusterLinkDestinationKafkaClusterOutput {
	return o
}

func (o ClusterLinkDestinationKafkaClusterOutput) ToClusterLinkDestinationKafkaClusterPtrOutput() ClusterLinkDestinationKafkaClusterPtrOutput {
	return o.ToClusterLinkDestinationKafkaClusterPtrOutputWithContext(context.Background())
}

func (o ClusterLinkDestinationKafkaClusterOutput) ToClusterLinkDestinationKafkaClusterPtrOutputWithContext(ctx context.Context) ClusterLinkDestinationKafkaClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterLinkDestinationKafkaCluster) *ClusterLinkDestinationKafkaCluster {
		return &v
	}).(ClusterLinkDestinationKafkaClusterPtrOutput)
}

func (o ClusterLinkDestinationKafkaClusterOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterLinkDestinationKafkaCluster] {
	return pulumix.Output[ClusterLinkDestinationKafkaCluster]{
		OutputState: o.OutputState,
	}
}

// The bootstrap endpoint of the remote Kafka cluster, for example, `SASL_SSL://pkc-00000.us-central1.gcp.confluent.cloud:9092` or `pkc-00000.us-central1.gcp.confluent.cloud:9092`).
func (o ClusterLinkDestinationKafkaClusterOutput) BootstrapEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterLinkDestinationKafkaCluster) *string { return v.BootstrapEndpoint }).(pulumi.StringPtrOutput)
}

func (o ClusterLinkDestinationKafkaClusterOutput) Credentials() ClusterLinkDestinationKafkaClusterCredentialsPtrOutput {
	return o.ApplyT(func(v ClusterLinkDestinationKafkaCluster) *ClusterLinkDestinationKafkaClusterCredentials {
		return v.Credentials
	}).(ClusterLinkDestinationKafkaClusterCredentialsPtrOutput)
}

// The ID of the remote Kafka cluster, for example, `lkc-abc123`.
func (o ClusterLinkDestinationKafkaClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterLinkDestinationKafkaCluster) string { return v.Id }).(pulumi.StringOutput)
}

// The REST endpoint of the remote Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
func (o ClusterLinkDestinationKafkaClusterOutput) RestEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterLinkDestinationKafkaCluster) *string { return v.RestEndpoint }).(pulumi.StringPtrOutput)
}

type ClusterLinkDestinationKafkaClusterPtrOutput struct{ *pulumi.OutputState }

func (ClusterLinkDestinationKafkaClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLinkDestinationKafkaCluster)(nil)).Elem()
}

func (o ClusterLinkDestinationKafkaClusterPtrOutput) ToClusterLinkDestinationKafkaClusterPtrOutput() ClusterLinkDestinationKafkaClusterPtrOutput {
	return o
}

func (o ClusterLinkDestinationKafkaClusterPtrOutput) ToClusterLinkDestinationKafkaClusterPtrOutputWithContext(ctx context.Context) ClusterLinkDestinationKafkaClusterPtrOutput {
	return o
}

func (o ClusterLinkDestinationKafkaClusterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterLinkDestinationKafkaCluster] {
	return pulumix.Output[*ClusterLinkDestinationKafkaCluster]{
		OutputState: o.OutputState,
	}
}

func (o ClusterLinkDestinationKafkaClusterPtrOutput) Elem() ClusterLinkDestinationKafkaClusterOutput {
	return o.ApplyT(func(v *ClusterLinkDestinationKafkaCluster) ClusterLinkDestinationKafkaCluster {
		if v != nil {
			return *v
		}
		var ret ClusterLinkDestinationKafkaCluster
		return ret
	}).(ClusterLinkDestinationKafkaClusterOutput)
}

// The bootstrap endpoint of the remote Kafka cluster, for example, `SASL_SSL://pkc-00000.us-central1.gcp.confluent.cloud:9092` or `pkc-00000.us-central1.gcp.confluent.cloud:9092`).
func (o ClusterLinkDestinationKafkaClusterPtrOutput) BootstrapEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterLinkDestinationKafkaCluster) *string {
		if v == nil {
			return nil
		}
		return v.BootstrapEndpoint
	}).(pulumi.StringPtrOutput)
}

func (o ClusterLinkDestinationKafkaClusterPtrOutput) Credentials() ClusterLinkDestinationKafkaClusterCredentialsPtrOutput {
	return o.ApplyT(func(v *ClusterLinkDestinationKafkaCluster) *ClusterLinkDestinationKafkaClusterCredentials {
		if v == nil {
			return nil
		}
		return v.Credentials
	}).(ClusterLinkDestinationKafkaClusterCredentialsPtrOutput)
}

// The ID of the remote Kafka cluster, for example, `lkc-abc123`.
func (o ClusterLinkDestinationKafkaClusterPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterLinkDestinationKafkaCluster) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The REST endpoint of the remote Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
func (o ClusterLinkDestinationKafkaClusterPtrOutput) RestEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterLinkDestinationKafkaCluster) *string {
		if v == nil {
			return nil
		}
		return v.RestEndpoint
	}).(pulumi.StringPtrOutput)
}

type ClusterLinkDestinationKafkaClusterCredentials struct {
	// The Kafka API Key.
	Key string `pulumi:"key"`
	// The Kafka API Secret.
	//
	// > **Note:** The `localKafkaCluster`, `remoteKafkaCluster` configuration block and `linkMode = BIDIRECTIONAL` are in a [Preview lifecycle stage](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy).
	Secret string `pulumi:"secret"`
}

// ClusterLinkDestinationKafkaClusterCredentialsInput is an input type that accepts ClusterLinkDestinationKafkaClusterCredentialsArgs and ClusterLinkDestinationKafkaClusterCredentialsOutput values.
// You can construct a concrete instance of `ClusterLinkDestinationKafkaClusterCredentialsInput` via:
//
//	ClusterLinkDestinationKafkaClusterCredentialsArgs{...}
type ClusterLinkDestinationKafkaClusterCredentialsInput interface {
	pulumi.Input

	ToClusterLinkDestinationKafkaClusterCredentialsOutput() ClusterLinkDestinationKafkaClusterCredentialsOutput
	ToClusterLinkDestinationKafkaClusterCredentialsOutputWithContext(context.Context) ClusterLinkDestinationKafkaClusterCredentialsOutput
}

type ClusterLinkDestinationKafkaClusterCredentialsArgs struct {
	// The Kafka API Key.
	Key pulumi.StringInput `pulumi:"key"`
	// The Kafka API Secret.
	//
	// > **Note:** The `localKafkaCluster`, `remoteKafkaCluster` configuration block and `linkMode = BIDIRECTIONAL` are in a [Preview lifecycle stage](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy).
	Secret pulumi.StringInput `pulumi:"secret"`
}

func (ClusterLinkDestinationKafkaClusterCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLinkDestinationKafkaClusterCredentials)(nil)).Elem()
}

func (i ClusterLinkDestinationKafkaClusterCredentialsArgs) ToClusterLinkDestinationKafkaClusterCredentialsOutput() ClusterLinkDestinationKafkaClusterCredentialsOutput {
	return i.ToClusterLinkDestinationKafkaClusterCredentialsOutputWithContext(context.Background())
}

func (i ClusterLinkDestinationKafkaClusterCredentialsArgs) ToClusterLinkDestinationKafkaClusterCredentialsOutputWithContext(ctx context.Context) ClusterLinkDestinationKafkaClusterCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLinkDestinationKafkaClusterCredentialsOutput)
}

func (i ClusterLinkDestinationKafkaClusterCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterLinkDestinationKafkaClusterCredentials] {
	return pulumix.Output[ClusterLinkDestinationKafkaClusterCredentials]{
		OutputState: i.ToClusterLinkDestinationKafkaClusterCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterLinkDestinationKafkaClusterCredentialsArgs) ToClusterLinkDestinationKafkaClusterCredentialsPtrOutput() ClusterLinkDestinationKafkaClusterCredentialsPtrOutput {
	return i.ToClusterLinkDestinationKafkaClusterCredentialsPtrOutputWithContext(context.Background())
}

func (i ClusterLinkDestinationKafkaClusterCredentialsArgs) ToClusterLinkDestinationKafkaClusterCredentialsPtrOutputWithContext(ctx context.Context) ClusterLinkDestinationKafkaClusterCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLinkDestinationKafkaClusterCredentialsOutput).ToClusterLinkDestinationKafkaClusterCredentialsPtrOutputWithContext(ctx)
}

// ClusterLinkDestinationKafkaClusterCredentialsPtrInput is an input type that accepts ClusterLinkDestinationKafkaClusterCredentialsArgs, ClusterLinkDestinationKafkaClusterCredentialsPtr and ClusterLinkDestinationKafkaClusterCredentialsPtrOutput values.
// You can construct a concrete instance of `ClusterLinkDestinationKafkaClusterCredentialsPtrInput` via:
//
//	        ClusterLinkDestinationKafkaClusterCredentialsArgs{...}
//
//	or:
//
//	        nil
type ClusterLinkDestinationKafkaClusterCredentialsPtrInput interface {
	pulumi.Input

	ToClusterLinkDestinationKafkaClusterCredentialsPtrOutput() ClusterLinkDestinationKafkaClusterCredentialsPtrOutput
	ToClusterLinkDestinationKafkaClusterCredentialsPtrOutputWithContext(context.Context) ClusterLinkDestinationKafkaClusterCredentialsPtrOutput
}

type clusterLinkDestinationKafkaClusterCredentialsPtrType ClusterLinkDestinationKafkaClusterCredentialsArgs

func ClusterLinkDestinationKafkaClusterCredentialsPtr(v *ClusterLinkDestinationKafkaClusterCredentialsArgs) ClusterLinkDestinationKafkaClusterCredentialsPtrInput {
	return (*clusterLinkDestinationKafkaClusterCredentialsPtrType)(v)
}

func (*clusterLinkDestinationKafkaClusterCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLinkDestinationKafkaClusterCredentials)(nil)).Elem()
}

func (i *clusterLinkDestinationKafkaClusterCredentialsPtrType) ToClusterLinkDestinationKafkaClusterCredentialsPtrOutput() ClusterLinkDestinationKafkaClusterCredentialsPtrOutput {
	return i.ToClusterLinkDestinationKafkaClusterCredentialsPtrOutputWithContext(context.Background())
}

func (i *clusterLinkDestinationKafkaClusterCredentialsPtrType) ToClusterLinkDestinationKafkaClusterCredentialsPtrOutputWithContext(ctx context.Context) ClusterLinkDestinationKafkaClusterCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLinkDestinationKafkaClusterCredentialsPtrOutput)
}

func (i *clusterLinkDestinationKafkaClusterCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterLinkDestinationKafkaClusterCredentials] {
	return pulumix.Output[*ClusterLinkDestinationKafkaClusterCredentials]{
		OutputState: i.ToClusterLinkDestinationKafkaClusterCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterLinkDestinationKafkaClusterCredentialsOutput struct{ *pulumi.OutputState }

func (ClusterLinkDestinationKafkaClusterCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLinkDestinationKafkaClusterCredentials)(nil)).Elem()
}

func (o ClusterLinkDestinationKafkaClusterCredentialsOutput) ToClusterLinkDestinationKafkaClusterCredentialsOutput() ClusterLinkDestinationKafkaClusterCredentialsOutput {
	return o
}

func (o ClusterLinkDestinationKafkaClusterCredentialsOutput) ToClusterLinkDestinationKafkaClusterCredentialsOutputWithContext(ctx context.Context) ClusterLinkDestinationKafkaClusterCredentialsOutput {
	return o
}

func (o ClusterLinkDestinationKafkaClusterCredentialsOutput) ToClusterLinkDestinationKafkaClusterCredentialsPtrOutput() ClusterLinkDestinationKafkaClusterCredentialsPtrOutput {
	return o.ToClusterLinkDestinationKafkaClusterCredentialsPtrOutputWithContext(context.Background())
}

func (o ClusterLinkDestinationKafkaClusterCredentialsOutput) ToClusterLinkDestinationKafkaClusterCredentialsPtrOutputWithContext(ctx context.Context) ClusterLinkDestinationKafkaClusterCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterLinkDestinationKafkaClusterCredentials) *ClusterLinkDestinationKafkaClusterCredentials {
		return &v
	}).(ClusterLinkDestinationKafkaClusterCredentialsPtrOutput)
}

func (o ClusterLinkDestinationKafkaClusterCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterLinkDestinationKafkaClusterCredentials] {
	return pulumix.Output[ClusterLinkDestinationKafkaClusterCredentials]{
		OutputState: o.OutputState,
	}
}

// The Kafka API Key.
func (o ClusterLinkDestinationKafkaClusterCredentialsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterLinkDestinationKafkaClusterCredentials) string { return v.Key }).(pulumi.StringOutput)
}

// The Kafka API Secret.
//
// > **Note:** The `localKafkaCluster`, `remoteKafkaCluster` configuration block and `linkMode = BIDIRECTIONAL` are in a [Preview lifecycle stage](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy).
func (o ClusterLinkDestinationKafkaClusterCredentialsOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterLinkDestinationKafkaClusterCredentials) string { return v.Secret }).(pulumi.StringOutput)
}

type ClusterLinkDestinationKafkaClusterCredentialsPtrOutput struct{ *pulumi.OutputState }

func (ClusterLinkDestinationKafkaClusterCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLinkDestinationKafkaClusterCredentials)(nil)).Elem()
}

func (o ClusterLinkDestinationKafkaClusterCredentialsPtrOutput) ToClusterLinkDestinationKafkaClusterCredentialsPtrOutput() ClusterLinkDestinationKafkaClusterCredentialsPtrOutput {
	return o
}

func (o ClusterLinkDestinationKafkaClusterCredentialsPtrOutput) ToClusterLinkDestinationKafkaClusterCredentialsPtrOutputWithContext(ctx context.Context) ClusterLinkDestinationKafkaClusterCredentialsPtrOutput {
	return o
}

func (o ClusterLinkDestinationKafkaClusterCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterLinkDestinationKafkaClusterCredentials] {
	return pulumix.Output[*ClusterLinkDestinationKafkaClusterCredentials]{
		OutputState: o.OutputState,
	}
}

func (o ClusterLinkDestinationKafkaClusterCredentialsPtrOutput) Elem() ClusterLinkDestinationKafkaClusterCredentialsOutput {
	return o.ApplyT(func(v *ClusterLinkDestinationKafkaClusterCredentials) ClusterLinkDestinationKafkaClusterCredentials {
		if v != nil {
			return *v
		}
		var ret ClusterLinkDestinationKafkaClusterCredentials
		return ret
	}).(ClusterLinkDestinationKafkaClusterCredentialsOutput)
}

// The Kafka API Key.
func (o ClusterLinkDestinationKafkaClusterCredentialsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterLinkDestinationKafkaClusterCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// The Kafka API Secret.
//
// > **Note:** The `localKafkaCluster`, `remoteKafkaCluster` configuration block and `linkMode = BIDIRECTIONAL` are in a [Preview lifecycle stage](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy).
func (o ClusterLinkDestinationKafkaClusterCredentialsPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterLinkDestinationKafkaClusterCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Secret
	}).(pulumi.StringPtrOutput)
}

type ClusterLinkLocalKafkaCluster struct {
	// The bootstrap endpoint of the remote Kafka cluster, for example, `SASL_SSL://pkc-00000.us-central1.gcp.confluent.cloud:9092` or `pkc-00000.us-central1.gcp.confluent.cloud:9092`).
	BootstrapEndpoint *string                                  `pulumi:"bootstrapEndpoint"`
	Credentials       *ClusterLinkLocalKafkaClusterCredentials `pulumi:"credentials"`
	// The ID of the remote Kafka cluster, for example, `lkc-abc123`.
	Id string `pulumi:"id"`
	// The REST endpoint of the remote Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint *string `pulumi:"restEndpoint"`
}

// ClusterLinkLocalKafkaClusterInput is an input type that accepts ClusterLinkLocalKafkaClusterArgs and ClusterLinkLocalKafkaClusterOutput values.
// You can construct a concrete instance of `ClusterLinkLocalKafkaClusterInput` via:
//
//	ClusterLinkLocalKafkaClusterArgs{...}
type ClusterLinkLocalKafkaClusterInput interface {
	pulumi.Input

	ToClusterLinkLocalKafkaClusterOutput() ClusterLinkLocalKafkaClusterOutput
	ToClusterLinkLocalKafkaClusterOutputWithContext(context.Context) ClusterLinkLocalKafkaClusterOutput
}

type ClusterLinkLocalKafkaClusterArgs struct {
	// The bootstrap endpoint of the remote Kafka cluster, for example, `SASL_SSL://pkc-00000.us-central1.gcp.confluent.cloud:9092` or `pkc-00000.us-central1.gcp.confluent.cloud:9092`).
	BootstrapEndpoint pulumi.StringPtrInput                           `pulumi:"bootstrapEndpoint"`
	Credentials       ClusterLinkLocalKafkaClusterCredentialsPtrInput `pulumi:"credentials"`
	// The ID of the remote Kafka cluster, for example, `lkc-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
	// The REST endpoint of the remote Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint pulumi.StringPtrInput `pulumi:"restEndpoint"`
}

func (ClusterLinkLocalKafkaClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLinkLocalKafkaCluster)(nil)).Elem()
}

func (i ClusterLinkLocalKafkaClusterArgs) ToClusterLinkLocalKafkaClusterOutput() ClusterLinkLocalKafkaClusterOutput {
	return i.ToClusterLinkLocalKafkaClusterOutputWithContext(context.Background())
}

func (i ClusterLinkLocalKafkaClusterArgs) ToClusterLinkLocalKafkaClusterOutputWithContext(ctx context.Context) ClusterLinkLocalKafkaClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLinkLocalKafkaClusterOutput)
}

func (i ClusterLinkLocalKafkaClusterArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterLinkLocalKafkaCluster] {
	return pulumix.Output[ClusterLinkLocalKafkaCluster]{
		OutputState: i.ToClusterLinkLocalKafkaClusterOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterLinkLocalKafkaClusterArgs) ToClusterLinkLocalKafkaClusterPtrOutput() ClusterLinkLocalKafkaClusterPtrOutput {
	return i.ToClusterLinkLocalKafkaClusterPtrOutputWithContext(context.Background())
}

func (i ClusterLinkLocalKafkaClusterArgs) ToClusterLinkLocalKafkaClusterPtrOutputWithContext(ctx context.Context) ClusterLinkLocalKafkaClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLinkLocalKafkaClusterOutput).ToClusterLinkLocalKafkaClusterPtrOutputWithContext(ctx)
}

// ClusterLinkLocalKafkaClusterPtrInput is an input type that accepts ClusterLinkLocalKafkaClusterArgs, ClusterLinkLocalKafkaClusterPtr and ClusterLinkLocalKafkaClusterPtrOutput values.
// You can construct a concrete instance of `ClusterLinkLocalKafkaClusterPtrInput` via:
//
//	        ClusterLinkLocalKafkaClusterArgs{...}
//
//	or:
//
//	        nil
type ClusterLinkLocalKafkaClusterPtrInput interface {
	pulumi.Input

	ToClusterLinkLocalKafkaClusterPtrOutput() ClusterLinkLocalKafkaClusterPtrOutput
	ToClusterLinkLocalKafkaClusterPtrOutputWithContext(context.Context) ClusterLinkLocalKafkaClusterPtrOutput
}

type clusterLinkLocalKafkaClusterPtrType ClusterLinkLocalKafkaClusterArgs

func ClusterLinkLocalKafkaClusterPtr(v *ClusterLinkLocalKafkaClusterArgs) ClusterLinkLocalKafkaClusterPtrInput {
	return (*clusterLinkLocalKafkaClusterPtrType)(v)
}

func (*clusterLinkLocalKafkaClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLinkLocalKafkaCluster)(nil)).Elem()
}

func (i *clusterLinkLocalKafkaClusterPtrType) ToClusterLinkLocalKafkaClusterPtrOutput() ClusterLinkLocalKafkaClusterPtrOutput {
	return i.ToClusterLinkLocalKafkaClusterPtrOutputWithContext(context.Background())
}

func (i *clusterLinkLocalKafkaClusterPtrType) ToClusterLinkLocalKafkaClusterPtrOutputWithContext(ctx context.Context) ClusterLinkLocalKafkaClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLinkLocalKafkaClusterPtrOutput)
}

func (i *clusterLinkLocalKafkaClusterPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterLinkLocalKafkaCluster] {
	return pulumix.Output[*ClusterLinkLocalKafkaCluster]{
		OutputState: i.ToClusterLinkLocalKafkaClusterPtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterLinkLocalKafkaClusterOutput struct{ *pulumi.OutputState }

func (ClusterLinkLocalKafkaClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLinkLocalKafkaCluster)(nil)).Elem()
}

func (o ClusterLinkLocalKafkaClusterOutput) ToClusterLinkLocalKafkaClusterOutput() ClusterLinkLocalKafkaClusterOutput {
	return o
}

func (o ClusterLinkLocalKafkaClusterOutput) ToClusterLinkLocalKafkaClusterOutputWithContext(ctx context.Context) ClusterLinkLocalKafkaClusterOutput {
	return o
}

func (o ClusterLinkLocalKafkaClusterOutput) ToClusterLinkLocalKafkaClusterPtrOutput() ClusterLinkLocalKafkaClusterPtrOutput {
	return o.ToClusterLinkLocalKafkaClusterPtrOutputWithContext(context.Background())
}

func (o ClusterLinkLocalKafkaClusterOutput) ToClusterLinkLocalKafkaClusterPtrOutputWithContext(ctx context.Context) ClusterLinkLocalKafkaClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterLinkLocalKafkaCluster) *ClusterLinkLocalKafkaCluster {
		return &v
	}).(ClusterLinkLocalKafkaClusterPtrOutput)
}

func (o ClusterLinkLocalKafkaClusterOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterLinkLocalKafkaCluster] {
	return pulumix.Output[ClusterLinkLocalKafkaCluster]{
		OutputState: o.OutputState,
	}
}

// The bootstrap endpoint of the remote Kafka cluster, for example, `SASL_SSL://pkc-00000.us-central1.gcp.confluent.cloud:9092` or `pkc-00000.us-central1.gcp.confluent.cloud:9092`).
func (o ClusterLinkLocalKafkaClusterOutput) BootstrapEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterLinkLocalKafkaCluster) *string { return v.BootstrapEndpoint }).(pulumi.StringPtrOutput)
}

func (o ClusterLinkLocalKafkaClusterOutput) Credentials() ClusterLinkLocalKafkaClusterCredentialsPtrOutput {
	return o.ApplyT(func(v ClusterLinkLocalKafkaCluster) *ClusterLinkLocalKafkaClusterCredentials { return v.Credentials }).(ClusterLinkLocalKafkaClusterCredentialsPtrOutput)
}

// The ID of the remote Kafka cluster, for example, `lkc-abc123`.
func (o ClusterLinkLocalKafkaClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterLinkLocalKafkaCluster) string { return v.Id }).(pulumi.StringOutput)
}

// The REST endpoint of the remote Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
func (o ClusterLinkLocalKafkaClusterOutput) RestEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterLinkLocalKafkaCluster) *string { return v.RestEndpoint }).(pulumi.StringPtrOutput)
}

type ClusterLinkLocalKafkaClusterPtrOutput struct{ *pulumi.OutputState }

func (ClusterLinkLocalKafkaClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLinkLocalKafkaCluster)(nil)).Elem()
}

func (o ClusterLinkLocalKafkaClusterPtrOutput) ToClusterLinkLocalKafkaClusterPtrOutput() ClusterLinkLocalKafkaClusterPtrOutput {
	return o
}

func (o ClusterLinkLocalKafkaClusterPtrOutput) ToClusterLinkLocalKafkaClusterPtrOutputWithContext(ctx context.Context) ClusterLinkLocalKafkaClusterPtrOutput {
	return o
}

func (o ClusterLinkLocalKafkaClusterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterLinkLocalKafkaCluster] {
	return pulumix.Output[*ClusterLinkLocalKafkaCluster]{
		OutputState: o.OutputState,
	}
}

func (o ClusterLinkLocalKafkaClusterPtrOutput) Elem() ClusterLinkLocalKafkaClusterOutput {
	return o.ApplyT(func(v *ClusterLinkLocalKafkaCluster) ClusterLinkLocalKafkaCluster {
		if v != nil {
			return *v
		}
		var ret ClusterLinkLocalKafkaCluster
		return ret
	}).(ClusterLinkLocalKafkaClusterOutput)
}

// The bootstrap endpoint of the remote Kafka cluster, for example, `SASL_SSL://pkc-00000.us-central1.gcp.confluent.cloud:9092` or `pkc-00000.us-central1.gcp.confluent.cloud:9092`).
func (o ClusterLinkLocalKafkaClusterPtrOutput) BootstrapEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterLinkLocalKafkaCluster) *string {
		if v == nil {
			return nil
		}
		return v.BootstrapEndpoint
	}).(pulumi.StringPtrOutput)
}

func (o ClusterLinkLocalKafkaClusterPtrOutput) Credentials() ClusterLinkLocalKafkaClusterCredentialsPtrOutput {
	return o.ApplyT(func(v *ClusterLinkLocalKafkaCluster) *ClusterLinkLocalKafkaClusterCredentials {
		if v == nil {
			return nil
		}
		return v.Credentials
	}).(ClusterLinkLocalKafkaClusterCredentialsPtrOutput)
}

// The ID of the remote Kafka cluster, for example, `lkc-abc123`.
func (o ClusterLinkLocalKafkaClusterPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterLinkLocalKafkaCluster) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The REST endpoint of the remote Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
func (o ClusterLinkLocalKafkaClusterPtrOutput) RestEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterLinkLocalKafkaCluster) *string {
		if v == nil {
			return nil
		}
		return v.RestEndpoint
	}).(pulumi.StringPtrOutput)
}

type ClusterLinkLocalKafkaClusterCredentials struct {
	// The Kafka API Key.
	Key string `pulumi:"key"`
	// The Kafka API Secret.
	//
	// > **Note:** The `localKafkaCluster`, `remoteKafkaCluster` configuration block and `linkMode = BIDIRECTIONAL` are in a [Preview lifecycle stage](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy).
	Secret string `pulumi:"secret"`
}

// ClusterLinkLocalKafkaClusterCredentialsInput is an input type that accepts ClusterLinkLocalKafkaClusterCredentialsArgs and ClusterLinkLocalKafkaClusterCredentialsOutput values.
// You can construct a concrete instance of `ClusterLinkLocalKafkaClusterCredentialsInput` via:
//
//	ClusterLinkLocalKafkaClusterCredentialsArgs{...}
type ClusterLinkLocalKafkaClusterCredentialsInput interface {
	pulumi.Input

	ToClusterLinkLocalKafkaClusterCredentialsOutput() ClusterLinkLocalKafkaClusterCredentialsOutput
	ToClusterLinkLocalKafkaClusterCredentialsOutputWithContext(context.Context) ClusterLinkLocalKafkaClusterCredentialsOutput
}

type ClusterLinkLocalKafkaClusterCredentialsArgs struct {
	// The Kafka API Key.
	Key pulumi.StringInput `pulumi:"key"`
	// The Kafka API Secret.
	//
	// > **Note:** The `localKafkaCluster`, `remoteKafkaCluster` configuration block and `linkMode = BIDIRECTIONAL` are in a [Preview lifecycle stage](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy).
	Secret pulumi.StringInput `pulumi:"secret"`
}

func (ClusterLinkLocalKafkaClusterCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLinkLocalKafkaClusterCredentials)(nil)).Elem()
}

func (i ClusterLinkLocalKafkaClusterCredentialsArgs) ToClusterLinkLocalKafkaClusterCredentialsOutput() ClusterLinkLocalKafkaClusterCredentialsOutput {
	return i.ToClusterLinkLocalKafkaClusterCredentialsOutputWithContext(context.Background())
}

func (i ClusterLinkLocalKafkaClusterCredentialsArgs) ToClusterLinkLocalKafkaClusterCredentialsOutputWithContext(ctx context.Context) ClusterLinkLocalKafkaClusterCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLinkLocalKafkaClusterCredentialsOutput)
}

func (i ClusterLinkLocalKafkaClusterCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterLinkLocalKafkaClusterCredentials] {
	return pulumix.Output[ClusterLinkLocalKafkaClusterCredentials]{
		OutputState: i.ToClusterLinkLocalKafkaClusterCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterLinkLocalKafkaClusterCredentialsArgs) ToClusterLinkLocalKafkaClusterCredentialsPtrOutput() ClusterLinkLocalKafkaClusterCredentialsPtrOutput {
	return i.ToClusterLinkLocalKafkaClusterCredentialsPtrOutputWithContext(context.Background())
}

func (i ClusterLinkLocalKafkaClusterCredentialsArgs) ToClusterLinkLocalKafkaClusterCredentialsPtrOutputWithContext(ctx context.Context) ClusterLinkLocalKafkaClusterCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLinkLocalKafkaClusterCredentialsOutput).ToClusterLinkLocalKafkaClusterCredentialsPtrOutputWithContext(ctx)
}

// ClusterLinkLocalKafkaClusterCredentialsPtrInput is an input type that accepts ClusterLinkLocalKafkaClusterCredentialsArgs, ClusterLinkLocalKafkaClusterCredentialsPtr and ClusterLinkLocalKafkaClusterCredentialsPtrOutput values.
// You can construct a concrete instance of `ClusterLinkLocalKafkaClusterCredentialsPtrInput` via:
//
//	        ClusterLinkLocalKafkaClusterCredentialsArgs{...}
//
//	or:
//
//	        nil
type ClusterLinkLocalKafkaClusterCredentialsPtrInput interface {
	pulumi.Input

	ToClusterLinkLocalKafkaClusterCredentialsPtrOutput() ClusterLinkLocalKafkaClusterCredentialsPtrOutput
	ToClusterLinkLocalKafkaClusterCredentialsPtrOutputWithContext(context.Context) ClusterLinkLocalKafkaClusterCredentialsPtrOutput
}

type clusterLinkLocalKafkaClusterCredentialsPtrType ClusterLinkLocalKafkaClusterCredentialsArgs

func ClusterLinkLocalKafkaClusterCredentialsPtr(v *ClusterLinkLocalKafkaClusterCredentialsArgs) ClusterLinkLocalKafkaClusterCredentialsPtrInput {
	return (*clusterLinkLocalKafkaClusterCredentialsPtrType)(v)
}

func (*clusterLinkLocalKafkaClusterCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLinkLocalKafkaClusterCredentials)(nil)).Elem()
}

func (i *clusterLinkLocalKafkaClusterCredentialsPtrType) ToClusterLinkLocalKafkaClusterCredentialsPtrOutput() ClusterLinkLocalKafkaClusterCredentialsPtrOutput {
	return i.ToClusterLinkLocalKafkaClusterCredentialsPtrOutputWithContext(context.Background())
}

func (i *clusterLinkLocalKafkaClusterCredentialsPtrType) ToClusterLinkLocalKafkaClusterCredentialsPtrOutputWithContext(ctx context.Context) ClusterLinkLocalKafkaClusterCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLinkLocalKafkaClusterCredentialsPtrOutput)
}

func (i *clusterLinkLocalKafkaClusterCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterLinkLocalKafkaClusterCredentials] {
	return pulumix.Output[*ClusterLinkLocalKafkaClusterCredentials]{
		OutputState: i.ToClusterLinkLocalKafkaClusterCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterLinkLocalKafkaClusterCredentialsOutput struct{ *pulumi.OutputState }

func (ClusterLinkLocalKafkaClusterCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLinkLocalKafkaClusterCredentials)(nil)).Elem()
}

func (o ClusterLinkLocalKafkaClusterCredentialsOutput) ToClusterLinkLocalKafkaClusterCredentialsOutput() ClusterLinkLocalKafkaClusterCredentialsOutput {
	return o
}

func (o ClusterLinkLocalKafkaClusterCredentialsOutput) ToClusterLinkLocalKafkaClusterCredentialsOutputWithContext(ctx context.Context) ClusterLinkLocalKafkaClusterCredentialsOutput {
	return o
}

func (o ClusterLinkLocalKafkaClusterCredentialsOutput) ToClusterLinkLocalKafkaClusterCredentialsPtrOutput() ClusterLinkLocalKafkaClusterCredentialsPtrOutput {
	return o.ToClusterLinkLocalKafkaClusterCredentialsPtrOutputWithContext(context.Background())
}

func (o ClusterLinkLocalKafkaClusterCredentialsOutput) ToClusterLinkLocalKafkaClusterCredentialsPtrOutputWithContext(ctx context.Context) ClusterLinkLocalKafkaClusterCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterLinkLocalKafkaClusterCredentials) *ClusterLinkLocalKafkaClusterCredentials {
		return &v
	}).(ClusterLinkLocalKafkaClusterCredentialsPtrOutput)
}

func (o ClusterLinkLocalKafkaClusterCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterLinkLocalKafkaClusterCredentials] {
	return pulumix.Output[ClusterLinkLocalKafkaClusterCredentials]{
		OutputState: o.OutputState,
	}
}

// The Kafka API Key.
func (o ClusterLinkLocalKafkaClusterCredentialsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterLinkLocalKafkaClusterCredentials) string { return v.Key }).(pulumi.StringOutput)
}

// The Kafka API Secret.
//
// > **Note:** The `localKafkaCluster`, `remoteKafkaCluster` configuration block and `linkMode = BIDIRECTIONAL` are in a [Preview lifecycle stage](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy).
func (o ClusterLinkLocalKafkaClusterCredentialsOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterLinkLocalKafkaClusterCredentials) string { return v.Secret }).(pulumi.StringOutput)
}

type ClusterLinkLocalKafkaClusterCredentialsPtrOutput struct{ *pulumi.OutputState }

func (ClusterLinkLocalKafkaClusterCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLinkLocalKafkaClusterCredentials)(nil)).Elem()
}

func (o ClusterLinkLocalKafkaClusterCredentialsPtrOutput) ToClusterLinkLocalKafkaClusterCredentialsPtrOutput() ClusterLinkLocalKafkaClusterCredentialsPtrOutput {
	return o
}

func (o ClusterLinkLocalKafkaClusterCredentialsPtrOutput) ToClusterLinkLocalKafkaClusterCredentialsPtrOutputWithContext(ctx context.Context) ClusterLinkLocalKafkaClusterCredentialsPtrOutput {
	return o
}

func (o ClusterLinkLocalKafkaClusterCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterLinkLocalKafkaClusterCredentials] {
	return pulumix.Output[*ClusterLinkLocalKafkaClusterCredentials]{
		OutputState: o.OutputState,
	}
}

func (o ClusterLinkLocalKafkaClusterCredentialsPtrOutput) Elem() ClusterLinkLocalKafkaClusterCredentialsOutput {
	return o.ApplyT(func(v *ClusterLinkLocalKafkaClusterCredentials) ClusterLinkLocalKafkaClusterCredentials {
		if v != nil {
			return *v
		}
		var ret ClusterLinkLocalKafkaClusterCredentials
		return ret
	}).(ClusterLinkLocalKafkaClusterCredentialsOutput)
}

// The Kafka API Key.
func (o ClusterLinkLocalKafkaClusterCredentialsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterLinkLocalKafkaClusterCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// The Kafka API Secret.
//
// > **Note:** The `localKafkaCluster`, `remoteKafkaCluster` configuration block and `linkMode = BIDIRECTIONAL` are in a [Preview lifecycle stage](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy).
func (o ClusterLinkLocalKafkaClusterCredentialsPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterLinkLocalKafkaClusterCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Secret
	}).(pulumi.StringPtrOutput)
}

type ClusterLinkRemoteKafkaCluster struct {
	// The bootstrap endpoint of the remote Kafka cluster, for example, `SASL_SSL://pkc-00000.us-central1.gcp.confluent.cloud:9092` or `pkc-00000.us-central1.gcp.confluent.cloud:9092`).
	BootstrapEndpoint *string                                   `pulumi:"bootstrapEndpoint"`
	Credentials       *ClusterLinkRemoteKafkaClusterCredentials `pulumi:"credentials"`
	// The ID of the remote Kafka cluster, for example, `lkc-abc123`.
	Id string `pulumi:"id"`
	// The REST endpoint of the remote Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint *string `pulumi:"restEndpoint"`
}

// ClusterLinkRemoteKafkaClusterInput is an input type that accepts ClusterLinkRemoteKafkaClusterArgs and ClusterLinkRemoteKafkaClusterOutput values.
// You can construct a concrete instance of `ClusterLinkRemoteKafkaClusterInput` via:
//
//	ClusterLinkRemoteKafkaClusterArgs{...}
type ClusterLinkRemoteKafkaClusterInput interface {
	pulumi.Input

	ToClusterLinkRemoteKafkaClusterOutput() ClusterLinkRemoteKafkaClusterOutput
	ToClusterLinkRemoteKafkaClusterOutputWithContext(context.Context) ClusterLinkRemoteKafkaClusterOutput
}

type ClusterLinkRemoteKafkaClusterArgs struct {
	// The bootstrap endpoint of the remote Kafka cluster, for example, `SASL_SSL://pkc-00000.us-central1.gcp.confluent.cloud:9092` or `pkc-00000.us-central1.gcp.confluent.cloud:9092`).
	BootstrapEndpoint pulumi.StringPtrInput                            `pulumi:"bootstrapEndpoint"`
	Credentials       ClusterLinkRemoteKafkaClusterCredentialsPtrInput `pulumi:"credentials"`
	// The ID of the remote Kafka cluster, for example, `lkc-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
	// The REST endpoint of the remote Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint pulumi.StringPtrInput `pulumi:"restEndpoint"`
}

func (ClusterLinkRemoteKafkaClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLinkRemoteKafkaCluster)(nil)).Elem()
}

func (i ClusterLinkRemoteKafkaClusterArgs) ToClusterLinkRemoteKafkaClusterOutput() ClusterLinkRemoteKafkaClusterOutput {
	return i.ToClusterLinkRemoteKafkaClusterOutputWithContext(context.Background())
}

func (i ClusterLinkRemoteKafkaClusterArgs) ToClusterLinkRemoteKafkaClusterOutputWithContext(ctx context.Context) ClusterLinkRemoteKafkaClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLinkRemoteKafkaClusterOutput)
}

func (i ClusterLinkRemoteKafkaClusterArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterLinkRemoteKafkaCluster] {
	return pulumix.Output[ClusterLinkRemoteKafkaCluster]{
		OutputState: i.ToClusterLinkRemoteKafkaClusterOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterLinkRemoteKafkaClusterArgs) ToClusterLinkRemoteKafkaClusterPtrOutput() ClusterLinkRemoteKafkaClusterPtrOutput {
	return i.ToClusterLinkRemoteKafkaClusterPtrOutputWithContext(context.Background())
}

func (i ClusterLinkRemoteKafkaClusterArgs) ToClusterLinkRemoteKafkaClusterPtrOutputWithContext(ctx context.Context) ClusterLinkRemoteKafkaClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLinkRemoteKafkaClusterOutput).ToClusterLinkRemoteKafkaClusterPtrOutputWithContext(ctx)
}

// ClusterLinkRemoteKafkaClusterPtrInput is an input type that accepts ClusterLinkRemoteKafkaClusterArgs, ClusterLinkRemoteKafkaClusterPtr and ClusterLinkRemoteKafkaClusterPtrOutput values.
// You can construct a concrete instance of `ClusterLinkRemoteKafkaClusterPtrInput` via:
//
//	        ClusterLinkRemoteKafkaClusterArgs{...}
//
//	or:
//
//	        nil
type ClusterLinkRemoteKafkaClusterPtrInput interface {
	pulumi.Input

	ToClusterLinkRemoteKafkaClusterPtrOutput() ClusterLinkRemoteKafkaClusterPtrOutput
	ToClusterLinkRemoteKafkaClusterPtrOutputWithContext(context.Context) ClusterLinkRemoteKafkaClusterPtrOutput
}

type clusterLinkRemoteKafkaClusterPtrType ClusterLinkRemoteKafkaClusterArgs

func ClusterLinkRemoteKafkaClusterPtr(v *ClusterLinkRemoteKafkaClusterArgs) ClusterLinkRemoteKafkaClusterPtrInput {
	return (*clusterLinkRemoteKafkaClusterPtrType)(v)
}

func (*clusterLinkRemoteKafkaClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLinkRemoteKafkaCluster)(nil)).Elem()
}

func (i *clusterLinkRemoteKafkaClusterPtrType) ToClusterLinkRemoteKafkaClusterPtrOutput() ClusterLinkRemoteKafkaClusterPtrOutput {
	return i.ToClusterLinkRemoteKafkaClusterPtrOutputWithContext(context.Background())
}

func (i *clusterLinkRemoteKafkaClusterPtrType) ToClusterLinkRemoteKafkaClusterPtrOutputWithContext(ctx context.Context) ClusterLinkRemoteKafkaClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLinkRemoteKafkaClusterPtrOutput)
}

func (i *clusterLinkRemoteKafkaClusterPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterLinkRemoteKafkaCluster] {
	return pulumix.Output[*ClusterLinkRemoteKafkaCluster]{
		OutputState: i.ToClusterLinkRemoteKafkaClusterPtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterLinkRemoteKafkaClusterOutput struct{ *pulumi.OutputState }

func (ClusterLinkRemoteKafkaClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLinkRemoteKafkaCluster)(nil)).Elem()
}

func (o ClusterLinkRemoteKafkaClusterOutput) ToClusterLinkRemoteKafkaClusterOutput() ClusterLinkRemoteKafkaClusterOutput {
	return o
}

func (o ClusterLinkRemoteKafkaClusterOutput) ToClusterLinkRemoteKafkaClusterOutputWithContext(ctx context.Context) ClusterLinkRemoteKafkaClusterOutput {
	return o
}

func (o ClusterLinkRemoteKafkaClusterOutput) ToClusterLinkRemoteKafkaClusterPtrOutput() ClusterLinkRemoteKafkaClusterPtrOutput {
	return o.ToClusterLinkRemoteKafkaClusterPtrOutputWithContext(context.Background())
}

func (o ClusterLinkRemoteKafkaClusterOutput) ToClusterLinkRemoteKafkaClusterPtrOutputWithContext(ctx context.Context) ClusterLinkRemoteKafkaClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterLinkRemoteKafkaCluster) *ClusterLinkRemoteKafkaCluster {
		return &v
	}).(ClusterLinkRemoteKafkaClusterPtrOutput)
}

func (o ClusterLinkRemoteKafkaClusterOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterLinkRemoteKafkaCluster] {
	return pulumix.Output[ClusterLinkRemoteKafkaCluster]{
		OutputState: o.OutputState,
	}
}

// The bootstrap endpoint of the remote Kafka cluster, for example, `SASL_SSL://pkc-00000.us-central1.gcp.confluent.cloud:9092` or `pkc-00000.us-central1.gcp.confluent.cloud:9092`).
func (o ClusterLinkRemoteKafkaClusterOutput) BootstrapEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterLinkRemoteKafkaCluster) *string { return v.BootstrapEndpoint }).(pulumi.StringPtrOutput)
}

func (o ClusterLinkRemoteKafkaClusterOutput) Credentials() ClusterLinkRemoteKafkaClusterCredentialsPtrOutput {
	return o.ApplyT(func(v ClusterLinkRemoteKafkaCluster) *ClusterLinkRemoteKafkaClusterCredentials { return v.Credentials }).(ClusterLinkRemoteKafkaClusterCredentialsPtrOutput)
}

// The ID of the remote Kafka cluster, for example, `lkc-abc123`.
func (o ClusterLinkRemoteKafkaClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterLinkRemoteKafkaCluster) string { return v.Id }).(pulumi.StringOutput)
}

// The REST endpoint of the remote Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
func (o ClusterLinkRemoteKafkaClusterOutput) RestEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterLinkRemoteKafkaCluster) *string { return v.RestEndpoint }).(pulumi.StringPtrOutput)
}

type ClusterLinkRemoteKafkaClusterPtrOutput struct{ *pulumi.OutputState }

func (ClusterLinkRemoteKafkaClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLinkRemoteKafkaCluster)(nil)).Elem()
}

func (o ClusterLinkRemoteKafkaClusterPtrOutput) ToClusterLinkRemoteKafkaClusterPtrOutput() ClusterLinkRemoteKafkaClusterPtrOutput {
	return o
}

func (o ClusterLinkRemoteKafkaClusterPtrOutput) ToClusterLinkRemoteKafkaClusterPtrOutputWithContext(ctx context.Context) ClusterLinkRemoteKafkaClusterPtrOutput {
	return o
}

func (o ClusterLinkRemoteKafkaClusterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterLinkRemoteKafkaCluster] {
	return pulumix.Output[*ClusterLinkRemoteKafkaCluster]{
		OutputState: o.OutputState,
	}
}

func (o ClusterLinkRemoteKafkaClusterPtrOutput) Elem() ClusterLinkRemoteKafkaClusterOutput {
	return o.ApplyT(func(v *ClusterLinkRemoteKafkaCluster) ClusterLinkRemoteKafkaCluster {
		if v != nil {
			return *v
		}
		var ret ClusterLinkRemoteKafkaCluster
		return ret
	}).(ClusterLinkRemoteKafkaClusterOutput)
}

// The bootstrap endpoint of the remote Kafka cluster, for example, `SASL_SSL://pkc-00000.us-central1.gcp.confluent.cloud:9092` or `pkc-00000.us-central1.gcp.confluent.cloud:9092`).
func (o ClusterLinkRemoteKafkaClusterPtrOutput) BootstrapEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterLinkRemoteKafkaCluster) *string {
		if v == nil {
			return nil
		}
		return v.BootstrapEndpoint
	}).(pulumi.StringPtrOutput)
}

func (o ClusterLinkRemoteKafkaClusterPtrOutput) Credentials() ClusterLinkRemoteKafkaClusterCredentialsPtrOutput {
	return o.ApplyT(func(v *ClusterLinkRemoteKafkaCluster) *ClusterLinkRemoteKafkaClusterCredentials {
		if v == nil {
			return nil
		}
		return v.Credentials
	}).(ClusterLinkRemoteKafkaClusterCredentialsPtrOutput)
}

// The ID of the remote Kafka cluster, for example, `lkc-abc123`.
func (o ClusterLinkRemoteKafkaClusterPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterLinkRemoteKafkaCluster) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The REST endpoint of the remote Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
func (o ClusterLinkRemoteKafkaClusterPtrOutput) RestEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterLinkRemoteKafkaCluster) *string {
		if v == nil {
			return nil
		}
		return v.RestEndpoint
	}).(pulumi.StringPtrOutput)
}

type ClusterLinkRemoteKafkaClusterCredentials struct {
	// The Kafka API Key.
	Key string `pulumi:"key"`
	// The Kafka API Secret.
	//
	// > **Note:** The `localKafkaCluster`, `remoteKafkaCluster` configuration block and `linkMode = BIDIRECTIONAL` are in a [Preview lifecycle stage](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy).
	Secret string `pulumi:"secret"`
}

// ClusterLinkRemoteKafkaClusterCredentialsInput is an input type that accepts ClusterLinkRemoteKafkaClusterCredentialsArgs and ClusterLinkRemoteKafkaClusterCredentialsOutput values.
// You can construct a concrete instance of `ClusterLinkRemoteKafkaClusterCredentialsInput` via:
//
//	ClusterLinkRemoteKafkaClusterCredentialsArgs{...}
type ClusterLinkRemoteKafkaClusterCredentialsInput interface {
	pulumi.Input

	ToClusterLinkRemoteKafkaClusterCredentialsOutput() ClusterLinkRemoteKafkaClusterCredentialsOutput
	ToClusterLinkRemoteKafkaClusterCredentialsOutputWithContext(context.Context) ClusterLinkRemoteKafkaClusterCredentialsOutput
}

type ClusterLinkRemoteKafkaClusterCredentialsArgs struct {
	// The Kafka API Key.
	Key pulumi.StringInput `pulumi:"key"`
	// The Kafka API Secret.
	//
	// > **Note:** The `localKafkaCluster`, `remoteKafkaCluster` configuration block and `linkMode = BIDIRECTIONAL` are in a [Preview lifecycle stage](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy).
	Secret pulumi.StringInput `pulumi:"secret"`
}

func (ClusterLinkRemoteKafkaClusterCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLinkRemoteKafkaClusterCredentials)(nil)).Elem()
}

func (i ClusterLinkRemoteKafkaClusterCredentialsArgs) ToClusterLinkRemoteKafkaClusterCredentialsOutput() ClusterLinkRemoteKafkaClusterCredentialsOutput {
	return i.ToClusterLinkRemoteKafkaClusterCredentialsOutputWithContext(context.Background())
}

func (i ClusterLinkRemoteKafkaClusterCredentialsArgs) ToClusterLinkRemoteKafkaClusterCredentialsOutputWithContext(ctx context.Context) ClusterLinkRemoteKafkaClusterCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLinkRemoteKafkaClusterCredentialsOutput)
}

func (i ClusterLinkRemoteKafkaClusterCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterLinkRemoteKafkaClusterCredentials] {
	return pulumix.Output[ClusterLinkRemoteKafkaClusterCredentials]{
		OutputState: i.ToClusterLinkRemoteKafkaClusterCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterLinkRemoteKafkaClusterCredentialsArgs) ToClusterLinkRemoteKafkaClusterCredentialsPtrOutput() ClusterLinkRemoteKafkaClusterCredentialsPtrOutput {
	return i.ToClusterLinkRemoteKafkaClusterCredentialsPtrOutputWithContext(context.Background())
}

func (i ClusterLinkRemoteKafkaClusterCredentialsArgs) ToClusterLinkRemoteKafkaClusterCredentialsPtrOutputWithContext(ctx context.Context) ClusterLinkRemoteKafkaClusterCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLinkRemoteKafkaClusterCredentialsOutput).ToClusterLinkRemoteKafkaClusterCredentialsPtrOutputWithContext(ctx)
}

// ClusterLinkRemoteKafkaClusterCredentialsPtrInput is an input type that accepts ClusterLinkRemoteKafkaClusterCredentialsArgs, ClusterLinkRemoteKafkaClusterCredentialsPtr and ClusterLinkRemoteKafkaClusterCredentialsPtrOutput values.
// You can construct a concrete instance of `ClusterLinkRemoteKafkaClusterCredentialsPtrInput` via:
//
//	        ClusterLinkRemoteKafkaClusterCredentialsArgs{...}
//
//	or:
//
//	        nil
type ClusterLinkRemoteKafkaClusterCredentialsPtrInput interface {
	pulumi.Input

	ToClusterLinkRemoteKafkaClusterCredentialsPtrOutput() ClusterLinkRemoteKafkaClusterCredentialsPtrOutput
	ToClusterLinkRemoteKafkaClusterCredentialsPtrOutputWithContext(context.Context) ClusterLinkRemoteKafkaClusterCredentialsPtrOutput
}

type clusterLinkRemoteKafkaClusterCredentialsPtrType ClusterLinkRemoteKafkaClusterCredentialsArgs

func ClusterLinkRemoteKafkaClusterCredentialsPtr(v *ClusterLinkRemoteKafkaClusterCredentialsArgs) ClusterLinkRemoteKafkaClusterCredentialsPtrInput {
	return (*clusterLinkRemoteKafkaClusterCredentialsPtrType)(v)
}

func (*clusterLinkRemoteKafkaClusterCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLinkRemoteKafkaClusterCredentials)(nil)).Elem()
}

func (i *clusterLinkRemoteKafkaClusterCredentialsPtrType) ToClusterLinkRemoteKafkaClusterCredentialsPtrOutput() ClusterLinkRemoteKafkaClusterCredentialsPtrOutput {
	return i.ToClusterLinkRemoteKafkaClusterCredentialsPtrOutputWithContext(context.Background())
}

func (i *clusterLinkRemoteKafkaClusterCredentialsPtrType) ToClusterLinkRemoteKafkaClusterCredentialsPtrOutputWithContext(ctx context.Context) ClusterLinkRemoteKafkaClusterCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLinkRemoteKafkaClusterCredentialsPtrOutput)
}

func (i *clusterLinkRemoteKafkaClusterCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterLinkRemoteKafkaClusterCredentials] {
	return pulumix.Output[*ClusterLinkRemoteKafkaClusterCredentials]{
		OutputState: i.ToClusterLinkRemoteKafkaClusterCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterLinkRemoteKafkaClusterCredentialsOutput struct{ *pulumi.OutputState }

func (ClusterLinkRemoteKafkaClusterCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLinkRemoteKafkaClusterCredentials)(nil)).Elem()
}

func (o ClusterLinkRemoteKafkaClusterCredentialsOutput) ToClusterLinkRemoteKafkaClusterCredentialsOutput() ClusterLinkRemoteKafkaClusterCredentialsOutput {
	return o
}

func (o ClusterLinkRemoteKafkaClusterCredentialsOutput) ToClusterLinkRemoteKafkaClusterCredentialsOutputWithContext(ctx context.Context) ClusterLinkRemoteKafkaClusterCredentialsOutput {
	return o
}

func (o ClusterLinkRemoteKafkaClusterCredentialsOutput) ToClusterLinkRemoteKafkaClusterCredentialsPtrOutput() ClusterLinkRemoteKafkaClusterCredentialsPtrOutput {
	return o.ToClusterLinkRemoteKafkaClusterCredentialsPtrOutputWithContext(context.Background())
}

func (o ClusterLinkRemoteKafkaClusterCredentialsOutput) ToClusterLinkRemoteKafkaClusterCredentialsPtrOutputWithContext(ctx context.Context) ClusterLinkRemoteKafkaClusterCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterLinkRemoteKafkaClusterCredentials) *ClusterLinkRemoteKafkaClusterCredentials {
		return &v
	}).(ClusterLinkRemoteKafkaClusterCredentialsPtrOutput)
}

func (o ClusterLinkRemoteKafkaClusterCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterLinkRemoteKafkaClusterCredentials] {
	return pulumix.Output[ClusterLinkRemoteKafkaClusterCredentials]{
		OutputState: o.OutputState,
	}
}

// The Kafka API Key.
func (o ClusterLinkRemoteKafkaClusterCredentialsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterLinkRemoteKafkaClusterCredentials) string { return v.Key }).(pulumi.StringOutput)
}

// The Kafka API Secret.
//
// > **Note:** The `localKafkaCluster`, `remoteKafkaCluster` configuration block and `linkMode = BIDIRECTIONAL` are in a [Preview lifecycle stage](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy).
func (o ClusterLinkRemoteKafkaClusterCredentialsOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterLinkRemoteKafkaClusterCredentials) string { return v.Secret }).(pulumi.StringOutput)
}

type ClusterLinkRemoteKafkaClusterCredentialsPtrOutput struct{ *pulumi.OutputState }

func (ClusterLinkRemoteKafkaClusterCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLinkRemoteKafkaClusterCredentials)(nil)).Elem()
}

func (o ClusterLinkRemoteKafkaClusterCredentialsPtrOutput) ToClusterLinkRemoteKafkaClusterCredentialsPtrOutput() ClusterLinkRemoteKafkaClusterCredentialsPtrOutput {
	return o
}

func (o ClusterLinkRemoteKafkaClusterCredentialsPtrOutput) ToClusterLinkRemoteKafkaClusterCredentialsPtrOutputWithContext(ctx context.Context) ClusterLinkRemoteKafkaClusterCredentialsPtrOutput {
	return o
}

func (o ClusterLinkRemoteKafkaClusterCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterLinkRemoteKafkaClusterCredentials] {
	return pulumix.Output[*ClusterLinkRemoteKafkaClusterCredentials]{
		OutputState: o.OutputState,
	}
}

func (o ClusterLinkRemoteKafkaClusterCredentialsPtrOutput) Elem() ClusterLinkRemoteKafkaClusterCredentialsOutput {
	return o.ApplyT(func(v *ClusterLinkRemoteKafkaClusterCredentials) ClusterLinkRemoteKafkaClusterCredentials {
		if v != nil {
			return *v
		}
		var ret ClusterLinkRemoteKafkaClusterCredentials
		return ret
	}).(ClusterLinkRemoteKafkaClusterCredentialsOutput)
}

// The Kafka API Key.
func (o ClusterLinkRemoteKafkaClusterCredentialsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterLinkRemoteKafkaClusterCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// The Kafka API Secret.
//
// > **Note:** The `localKafkaCluster`, `remoteKafkaCluster` configuration block and `linkMode = BIDIRECTIONAL` are in a [Preview lifecycle stage](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy).
func (o ClusterLinkRemoteKafkaClusterCredentialsPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterLinkRemoteKafkaClusterCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Secret
	}).(pulumi.StringPtrOutput)
}

type ClusterLinkSourceKafkaCluster struct {
	// The bootstrap endpoint of the remote Kafka cluster, for example, `SASL_SSL://pkc-00000.us-central1.gcp.confluent.cloud:9092` or `pkc-00000.us-central1.gcp.confluent.cloud:9092`).
	BootstrapEndpoint *string                                   `pulumi:"bootstrapEndpoint"`
	Credentials       *ClusterLinkSourceKafkaClusterCredentials `pulumi:"credentials"`
	// The ID of the remote Kafka cluster, for example, `lkc-abc123`.
	Id string `pulumi:"id"`
	// The REST endpoint of the remote Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint *string `pulumi:"restEndpoint"`
}

// ClusterLinkSourceKafkaClusterInput is an input type that accepts ClusterLinkSourceKafkaClusterArgs and ClusterLinkSourceKafkaClusterOutput values.
// You can construct a concrete instance of `ClusterLinkSourceKafkaClusterInput` via:
//
//	ClusterLinkSourceKafkaClusterArgs{...}
type ClusterLinkSourceKafkaClusterInput interface {
	pulumi.Input

	ToClusterLinkSourceKafkaClusterOutput() ClusterLinkSourceKafkaClusterOutput
	ToClusterLinkSourceKafkaClusterOutputWithContext(context.Context) ClusterLinkSourceKafkaClusterOutput
}

type ClusterLinkSourceKafkaClusterArgs struct {
	// The bootstrap endpoint of the remote Kafka cluster, for example, `SASL_SSL://pkc-00000.us-central1.gcp.confluent.cloud:9092` or `pkc-00000.us-central1.gcp.confluent.cloud:9092`).
	BootstrapEndpoint pulumi.StringPtrInput                            `pulumi:"bootstrapEndpoint"`
	Credentials       ClusterLinkSourceKafkaClusterCredentialsPtrInput `pulumi:"credentials"`
	// The ID of the remote Kafka cluster, for example, `lkc-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
	// The REST endpoint of the remote Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint pulumi.StringPtrInput `pulumi:"restEndpoint"`
}

func (ClusterLinkSourceKafkaClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLinkSourceKafkaCluster)(nil)).Elem()
}

func (i ClusterLinkSourceKafkaClusterArgs) ToClusterLinkSourceKafkaClusterOutput() ClusterLinkSourceKafkaClusterOutput {
	return i.ToClusterLinkSourceKafkaClusterOutputWithContext(context.Background())
}

func (i ClusterLinkSourceKafkaClusterArgs) ToClusterLinkSourceKafkaClusterOutputWithContext(ctx context.Context) ClusterLinkSourceKafkaClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLinkSourceKafkaClusterOutput)
}

func (i ClusterLinkSourceKafkaClusterArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterLinkSourceKafkaCluster] {
	return pulumix.Output[ClusterLinkSourceKafkaCluster]{
		OutputState: i.ToClusterLinkSourceKafkaClusterOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterLinkSourceKafkaClusterArgs) ToClusterLinkSourceKafkaClusterPtrOutput() ClusterLinkSourceKafkaClusterPtrOutput {
	return i.ToClusterLinkSourceKafkaClusterPtrOutputWithContext(context.Background())
}

func (i ClusterLinkSourceKafkaClusterArgs) ToClusterLinkSourceKafkaClusterPtrOutputWithContext(ctx context.Context) ClusterLinkSourceKafkaClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLinkSourceKafkaClusterOutput).ToClusterLinkSourceKafkaClusterPtrOutputWithContext(ctx)
}

// ClusterLinkSourceKafkaClusterPtrInput is an input type that accepts ClusterLinkSourceKafkaClusterArgs, ClusterLinkSourceKafkaClusterPtr and ClusterLinkSourceKafkaClusterPtrOutput values.
// You can construct a concrete instance of `ClusterLinkSourceKafkaClusterPtrInput` via:
//
//	        ClusterLinkSourceKafkaClusterArgs{...}
//
//	or:
//
//	        nil
type ClusterLinkSourceKafkaClusterPtrInput interface {
	pulumi.Input

	ToClusterLinkSourceKafkaClusterPtrOutput() ClusterLinkSourceKafkaClusterPtrOutput
	ToClusterLinkSourceKafkaClusterPtrOutputWithContext(context.Context) ClusterLinkSourceKafkaClusterPtrOutput
}

type clusterLinkSourceKafkaClusterPtrType ClusterLinkSourceKafkaClusterArgs

func ClusterLinkSourceKafkaClusterPtr(v *ClusterLinkSourceKafkaClusterArgs) ClusterLinkSourceKafkaClusterPtrInput {
	return (*clusterLinkSourceKafkaClusterPtrType)(v)
}

func (*clusterLinkSourceKafkaClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLinkSourceKafkaCluster)(nil)).Elem()
}

func (i *clusterLinkSourceKafkaClusterPtrType) ToClusterLinkSourceKafkaClusterPtrOutput() ClusterLinkSourceKafkaClusterPtrOutput {
	return i.ToClusterLinkSourceKafkaClusterPtrOutputWithContext(context.Background())
}

func (i *clusterLinkSourceKafkaClusterPtrType) ToClusterLinkSourceKafkaClusterPtrOutputWithContext(ctx context.Context) ClusterLinkSourceKafkaClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLinkSourceKafkaClusterPtrOutput)
}

func (i *clusterLinkSourceKafkaClusterPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterLinkSourceKafkaCluster] {
	return pulumix.Output[*ClusterLinkSourceKafkaCluster]{
		OutputState: i.ToClusterLinkSourceKafkaClusterPtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterLinkSourceKafkaClusterOutput struct{ *pulumi.OutputState }

func (ClusterLinkSourceKafkaClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLinkSourceKafkaCluster)(nil)).Elem()
}

func (o ClusterLinkSourceKafkaClusterOutput) ToClusterLinkSourceKafkaClusterOutput() ClusterLinkSourceKafkaClusterOutput {
	return o
}

func (o ClusterLinkSourceKafkaClusterOutput) ToClusterLinkSourceKafkaClusterOutputWithContext(ctx context.Context) ClusterLinkSourceKafkaClusterOutput {
	return o
}

func (o ClusterLinkSourceKafkaClusterOutput) ToClusterLinkSourceKafkaClusterPtrOutput() ClusterLinkSourceKafkaClusterPtrOutput {
	return o.ToClusterLinkSourceKafkaClusterPtrOutputWithContext(context.Background())
}

func (o ClusterLinkSourceKafkaClusterOutput) ToClusterLinkSourceKafkaClusterPtrOutputWithContext(ctx context.Context) ClusterLinkSourceKafkaClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterLinkSourceKafkaCluster) *ClusterLinkSourceKafkaCluster {
		return &v
	}).(ClusterLinkSourceKafkaClusterPtrOutput)
}

func (o ClusterLinkSourceKafkaClusterOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterLinkSourceKafkaCluster] {
	return pulumix.Output[ClusterLinkSourceKafkaCluster]{
		OutputState: o.OutputState,
	}
}

// The bootstrap endpoint of the remote Kafka cluster, for example, `SASL_SSL://pkc-00000.us-central1.gcp.confluent.cloud:9092` or `pkc-00000.us-central1.gcp.confluent.cloud:9092`).
func (o ClusterLinkSourceKafkaClusterOutput) BootstrapEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterLinkSourceKafkaCluster) *string { return v.BootstrapEndpoint }).(pulumi.StringPtrOutput)
}

func (o ClusterLinkSourceKafkaClusterOutput) Credentials() ClusterLinkSourceKafkaClusterCredentialsPtrOutput {
	return o.ApplyT(func(v ClusterLinkSourceKafkaCluster) *ClusterLinkSourceKafkaClusterCredentials { return v.Credentials }).(ClusterLinkSourceKafkaClusterCredentialsPtrOutput)
}

// The ID of the remote Kafka cluster, for example, `lkc-abc123`.
func (o ClusterLinkSourceKafkaClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterLinkSourceKafkaCluster) string { return v.Id }).(pulumi.StringOutput)
}

// The REST endpoint of the remote Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
func (o ClusterLinkSourceKafkaClusterOutput) RestEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterLinkSourceKafkaCluster) *string { return v.RestEndpoint }).(pulumi.StringPtrOutput)
}

type ClusterLinkSourceKafkaClusterPtrOutput struct{ *pulumi.OutputState }

func (ClusterLinkSourceKafkaClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLinkSourceKafkaCluster)(nil)).Elem()
}

func (o ClusterLinkSourceKafkaClusterPtrOutput) ToClusterLinkSourceKafkaClusterPtrOutput() ClusterLinkSourceKafkaClusterPtrOutput {
	return o
}

func (o ClusterLinkSourceKafkaClusterPtrOutput) ToClusterLinkSourceKafkaClusterPtrOutputWithContext(ctx context.Context) ClusterLinkSourceKafkaClusterPtrOutput {
	return o
}

func (o ClusterLinkSourceKafkaClusterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterLinkSourceKafkaCluster] {
	return pulumix.Output[*ClusterLinkSourceKafkaCluster]{
		OutputState: o.OutputState,
	}
}

func (o ClusterLinkSourceKafkaClusterPtrOutput) Elem() ClusterLinkSourceKafkaClusterOutput {
	return o.ApplyT(func(v *ClusterLinkSourceKafkaCluster) ClusterLinkSourceKafkaCluster {
		if v != nil {
			return *v
		}
		var ret ClusterLinkSourceKafkaCluster
		return ret
	}).(ClusterLinkSourceKafkaClusterOutput)
}

// The bootstrap endpoint of the remote Kafka cluster, for example, `SASL_SSL://pkc-00000.us-central1.gcp.confluent.cloud:9092` or `pkc-00000.us-central1.gcp.confluent.cloud:9092`).
func (o ClusterLinkSourceKafkaClusterPtrOutput) BootstrapEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterLinkSourceKafkaCluster) *string {
		if v == nil {
			return nil
		}
		return v.BootstrapEndpoint
	}).(pulumi.StringPtrOutput)
}

func (o ClusterLinkSourceKafkaClusterPtrOutput) Credentials() ClusterLinkSourceKafkaClusterCredentialsPtrOutput {
	return o.ApplyT(func(v *ClusterLinkSourceKafkaCluster) *ClusterLinkSourceKafkaClusterCredentials {
		if v == nil {
			return nil
		}
		return v.Credentials
	}).(ClusterLinkSourceKafkaClusterCredentialsPtrOutput)
}

// The ID of the remote Kafka cluster, for example, `lkc-abc123`.
func (o ClusterLinkSourceKafkaClusterPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterLinkSourceKafkaCluster) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The REST endpoint of the remote Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
func (o ClusterLinkSourceKafkaClusterPtrOutput) RestEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterLinkSourceKafkaCluster) *string {
		if v == nil {
			return nil
		}
		return v.RestEndpoint
	}).(pulumi.StringPtrOutput)
}

type ClusterLinkSourceKafkaClusterCredentials struct {
	// The Kafka API Key.
	Key string `pulumi:"key"`
	// The Kafka API Secret.
	//
	// > **Note:** The `localKafkaCluster`, `remoteKafkaCluster` configuration block and `linkMode = BIDIRECTIONAL` are in a [Preview lifecycle stage](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy).
	Secret string `pulumi:"secret"`
}

// ClusterLinkSourceKafkaClusterCredentialsInput is an input type that accepts ClusterLinkSourceKafkaClusterCredentialsArgs and ClusterLinkSourceKafkaClusterCredentialsOutput values.
// You can construct a concrete instance of `ClusterLinkSourceKafkaClusterCredentialsInput` via:
//
//	ClusterLinkSourceKafkaClusterCredentialsArgs{...}
type ClusterLinkSourceKafkaClusterCredentialsInput interface {
	pulumi.Input

	ToClusterLinkSourceKafkaClusterCredentialsOutput() ClusterLinkSourceKafkaClusterCredentialsOutput
	ToClusterLinkSourceKafkaClusterCredentialsOutputWithContext(context.Context) ClusterLinkSourceKafkaClusterCredentialsOutput
}

type ClusterLinkSourceKafkaClusterCredentialsArgs struct {
	// The Kafka API Key.
	Key pulumi.StringInput `pulumi:"key"`
	// The Kafka API Secret.
	//
	// > **Note:** The `localKafkaCluster`, `remoteKafkaCluster` configuration block and `linkMode = BIDIRECTIONAL` are in a [Preview lifecycle stage](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy).
	Secret pulumi.StringInput `pulumi:"secret"`
}

func (ClusterLinkSourceKafkaClusterCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLinkSourceKafkaClusterCredentials)(nil)).Elem()
}

func (i ClusterLinkSourceKafkaClusterCredentialsArgs) ToClusterLinkSourceKafkaClusterCredentialsOutput() ClusterLinkSourceKafkaClusterCredentialsOutput {
	return i.ToClusterLinkSourceKafkaClusterCredentialsOutputWithContext(context.Background())
}

func (i ClusterLinkSourceKafkaClusterCredentialsArgs) ToClusterLinkSourceKafkaClusterCredentialsOutputWithContext(ctx context.Context) ClusterLinkSourceKafkaClusterCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLinkSourceKafkaClusterCredentialsOutput)
}

func (i ClusterLinkSourceKafkaClusterCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterLinkSourceKafkaClusterCredentials] {
	return pulumix.Output[ClusterLinkSourceKafkaClusterCredentials]{
		OutputState: i.ToClusterLinkSourceKafkaClusterCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterLinkSourceKafkaClusterCredentialsArgs) ToClusterLinkSourceKafkaClusterCredentialsPtrOutput() ClusterLinkSourceKafkaClusterCredentialsPtrOutput {
	return i.ToClusterLinkSourceKafkaClusterCredentialsPtrOutputWithContext(context.Background())
}

func (i ClusterLinkSourceKafkaClusterCredentialsArgs) ToClusterLinkSourceKafkaClusterCredentialsPtrOutputWithContext(ctx context.Context) ClusterLinkSourceKafkaClusterCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLinkSourceKafkaClusterCredentialsOutput).ToClusterLinkSourceKafkaClusterCredentialsPtrOutputWithContext(ctx)
}

// ClusterLinkSourceKafkaClusterCredentialsPtrInput is an input type that accepts ClusterLinkSourceKafkaClusterCredentialsArgs, ClusterLinkSourceKafkaClusterCredentialsPtr and ClusterLinkSourceKafkaClusterCredentialsPtrOutput values.
// You can construct a concrete instance of `ClusterLinkSourceKafkaClusterCredentialsPtrInput` via:
//
//	        ClusterLinkSourceKafkaClusterCredentialsArgs{...}
//
//	or:
//
//	        nil
type ClusterLinkSourceKafkaClusterCredentialsPtrInput interface {
	pulumi.Input

	ToClusterLinkSourceKafkaClusterCredentialsPtrOutput() ClusterLinkSourceKafkaClusterCredentialsPtrOutput
	ToClusterLinkSourceKafkaClusterCredentialsPtrOutputWithContext(context.Context) ClusterLinkSourceKafkaClusterCredentialsPtrOutput
}

type clusterLinkSourceKafkaClusterCredentialsPtrType ClusterLinkSourceKafkaClusterCredentialsArgs

func ClusterLinkSourceKafkaClusterCredentialsPtr(v *ClusterLinkSourceKafkaClusterCredentialsArgs) ClusterLinkSourceKafkaClusterCredentialsPtrInput {
	return (*clusterLinkSourceKafkaClusterCredentialsPtrType)(v)
}

func (*clusterLinkSourceKafkaClusterCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLinkSourceKafkaClusterCredentials)(nil)).Elem()
}

func (i *clusterLinkSourceKafkaClusterCredentialsPtrType) ToClusterLinkSourceKafkaClusterCredentialsPtrOutput() ClusterLinkSourceKafkaClusterCredentialsPtrOutput {
	return i.ToClusterLinkSourceKafkaClusterCredentialsPtrOutputWithContext(context.Background())
}

func (i *clusterLinkSourceKafkaClusterCredentialsPtrType) ToClusterLinkSourceKafkaClusterCredentialsPtrOutputWithContext(ctx context.Context) ClusterLinkSourceKafkaClusterCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLinkSourceKafkaClusterCredentialsPtrOutput)
}

func (i *clusterLinkSourceKafkaClusterCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterLinkSourceKafkaClusterCredentials] {
	return pulumix.Output[*ClusterLinkSourceKafkaClusterCredentials]{
		OutputState: i.ToClusterLinkSourceKafkaClusterCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterLinkSourceKafkaClusterCredentialsOutput struct{ *pulumi.OutputState }

func (ClusterLinkSourceKafkaClusterCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLinkSourceKafkaClusterCredentials)(nil)).Elem()
}

func (o ClusterLinkSourceKafkaClusterCredentialsOutput) ToClusterLinkSourceKafkaClusterCredentialsOutput() ClusterLinkSourceKafkaClusterCredentialsOutput {
	return o
}

func (o ClusterLinkSourceKafkaClusterCredentialsOutput) ToClusterLinkSourceKafkaClusterCredentialsOutputWithContext(ctx context.Context) ClusterLinkSourceKafkaClusterCredentialsOutput {
	return o
}

func (o ClusterLinkSourceKafkaClusterCredentialsOutput) ToClusterLinkSourceKafkaClusterCredentialsPtrOutput() ClusterLinkSourceKafkaClusterCredentialsPtrOutput {
	return o.ToClusterLinkSourceKafkaClusterCredentialsPtrOutputWithContext(context.Background())
}

func (o ClusterLinkSourceKafkaClusterCredentialsOutput) ToClusterLinkSourceKafkaClusterCredentialsPtrOutputWithContext(ctx context.Context) ClusterLinkSourceKafkaClusterCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterLinkSourceKafkaClusterCredentials) *ClusterLinkSourceKafkaClusterCredentials {
		return &v
	}).(ClusterLinkSourceKafkaClusterCredentialsPtrOutput)
}

func (o ClusterLinkSourceKafkaClusterCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterLinkSourceKafkaClusterCredentials] {
	return pulumix.Output[ClusterLinkSourceKafkaClusterCredentials]{
		OutputState: o.OutputState,
	}
}

// The Kafka API Key.
func (o ClusterLinkSourceKafkaClusterCredentialsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterLinkSourceKafkaClusterCredentials) string { return v.Key }).(pulumi.StringOutput)
}

// The Kafka API Secret.
//
// > **Note:** The `localKafkaCluster`, `remoteKafkaCluster` configuration block and `linkMode = BIDIRECTIONAL` are in a [Preview lifecycle stage](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy).
func (o ClusterLinkSourceKafkaClusterCredentialsOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterLinkSourceKafkaClusterCredentials) string { return v.Secret }).(pulumi.StringOutput)
}

type ClusterLinkSourceKafkaClusterCredentialsPtrOutput struct{ *pulumi.OutputState }

func (ClusterLinkSourceKafkaClusterCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLinkSourceKafkaClusterCredentials)(nil)).Elem()
}

func (o ClusterLinkSourceKafkaClusterCredentialsPtrOutput) ToClusterLinkSourceKafkaClusterCredentialsPtrOutput() ClusterLinkSourceKafkaClusterCredentialsPtrOutput {
	return o
}

func (o ClusterLinkSourceKafkaClusterCredentialsPtrOutput) ToClusterLinkSourceKafkaClusterCredentialsPtrOutputWithContext(ctx context.Context) ClusterLinkSourceKafkaClusterCredentialsPtrOutput {
	return o
}

func (o ClusterLinkSourceKafkaClusterCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterLinkSourceKafkaClusterCredentials] {
	return pulumix.Output[*ClusterLinkSourceKafkaClusterCredentials]{
		OutputState: o.OutputState,
	}
}

func (o ClusterLinkSourceKafkaClusterCredentialsPtrOutput) Elem() ClusterLinkSourceKafkaClusterCredentialsOutput {
	return o.ApplyT(func(v *ClusterLinkSourceKafkaClusterCredentials) ClusterLinkSourceKafkaClusterCredentials {
		if v != nil {
			return *v
		}
		var ret ClusterLinkSourceKafkaClusterCredentials
		return ret
	}).(ClusterLinkSourceKafkaClusterCredentialsOutput)
}

// The Kafka API Key.
func (o ClusterLinkSourceKafkaClusterCredentialsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterLinkSourceKafkaClusterCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// The Kafka API Secret.
//
// > **Note:** The `localKafkaCluster`, `remoteKafkaCluster` configuration block and `linkMode = BIDIRECTIONAL` are in a [Preview lifecycle stage](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy).
func (o ClusterLinkSourceKafkaClusterCredentialsPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterLinkSourceKafkaClusterCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Secret
	}).(pulumi.StringPtrOutput)
}

type ConnectorEnvironment struct {
	// The ID of the Kafka cluster that the connector belongs to, for example, `lkc-abc123`.
	Id string `pulumi:"id"`
}

// ConnectorEnvironmentInput is an input type that accepts ConnectorEnvironmentArgs and ConnectorEnvironmentOutput values.
// You can construct a concrete instance of `ConnectorEnvironmentInput` via:
//
//	ConnectorEnvironmentArgs{...}
type ConnectorEnvironmentInput interface {
	pulumi.Input

	ToConnectorEnvironmentOutput() ConnectorEnvironmentOutput
	ToConnectorEnvironmentOutputWithContext(context.Context) ConnectorEnvironmentOutput
}

type ConnectorEnvironmentArgs struct {
	// The ID of the Kafka cluster that the connector belongs to, for example, `lkc-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (ConnectorEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorEnvironment)(nil)).Elem()
}

func (i ConnectorEnvironmentArgs) ToConnectorEnvironmentOutput() ConnectorEnvironmentOutput {
	return i.ToConnectorEnvironmentOutputWithContext(context.Background())
}

func (i ConnectorEnvironmentArgs) ToConnectorEnvironmentOutputWithContext(ctx context.Context) ConnectorEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorEnvironmentOutput)
}

func (i ConnectorEnvironmentArgs) ToOutput(ctx context.Context) pulumix.Output[ConnectorEnvironment] {
	return pulumix.Output[ConnectorEnvironment]{
		OutputState: i.ToConnectorEnvironmentOutputWithContext(ctx).OutputState,
	}
}

func (i ConnectorEnvironmentArgs) ToConnectorEnvironmentPtrOutput() ConnectorEnvironmentPtrOutput {
	return i.ToConnectorEnvironmentPtrOutputWithContext(context.Background())
}

func (i ConnectorEnvironmentArgs) ToConnectorEnvironmentPtrOutputWithContext(ctx context.Context) ConnectorEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorEnvironmentOutput).ToConnectorEnvironmentPtrOutputWithContext(ctx)
}

// ConnectorEnvironmentPtrInput is an input type that accepts ConnectorEnvironmentArgs, ConnectorEnvironmentPtr and ConnectorEnvironmentPtrOutput values.
// You can construct a concrete instance of `ConnectorEnvironmentPtrInput` via:
//
//	        ConnectorEnvironmentArgs{...}
//
//	or:
//
//	        nil
type ConnectorEnvironmentPtrInput interface {
	pulumi.Input

	ToConnectorEnvironmentPtrOutput() ConnectorEnvironmentPtrOutput
	ToConnectorEnvironmentPtrOutputWithContext(context.Context) ConnectorEnvironmentPtrOutput
}

type connectorEnvironmentPtrType ConnectorEnvironmentArgs

func ConnectorEnvironmentPtr(v *ConnectorEnvironmentArgs) ConnectorEnvironmentPtrInput {
	return (*connectorEnvironmentPtrType)(v)
}

func (*connectorEnvironmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorEnvironment)(nil)).Elem()
}

func (i *connectorEnvironmentPtrType) ToConnectorEnvironmentPtrOutput() ConnectorEnvironmentPtrOutput {
	return i.ToConnectorEnvironmentPtrOutputWithContext(context.Background())
}

func (i *connectorEnvironmentPtrType) ToConnectorEnvironmentPtrOutputWithContext(ctx context.Context) ConnectorEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorEnvironmentPtrOutput)
}

func (i *connectorEnvironmentPtrType) ToOutput(ctx context.Context) pulumix.Output[*ConnectorEnvironment] {
	return pulumix.Output[*ConnectorEnvironment]{
		OutputState: i.ToConnectorEnvironmentPtrOutputWithContext(ctx).OutputState,
	}
}

type ConnectorEnvironmentOutput struct{ *pulumi.OutputState }

func (ConnectorEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorEnvironment)(nil)).Elem()
}

func (o ConnectorEnvironmentOutput) ToConnectorEnvironmentOutput() ConnectorEnvironmentOutput {
	return o
}

func (o ConnectorEnvironmentOutput) ToConnectorEnvironmentOutputWithContext(ctx context.Context) ConnectorEnvironmentOutput {
	return o
}

func (o ConnectorEnvironmentOutput) ToConnectorEnvironmentPtrOutput() ConnectorEnvironmentPtrOutput {
	return o.ToConnectorEnvironmentPtrOutputWithContext(context.Background())
}

func (o ConnectorEnvironmentOutput) ToConnectorEnvironmentPtrOutputWithContext(ctx context.Context) ConnectorEnvironmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectorEnvironment) *ConnectorEnvironment {
		return &v
	}).(ConnectorEnvironmentPtrOutput)
}

func (o ConnectorEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorEnvironment] {
	return pulumix.Output[ConnectorEnvironment]{
		OutputState: o.OutputState,
	}
}

// The ID of the Kafka cluster that the connector belongs to, for example, `lkc-abc123`.
func (o ConnectorEnvironmentOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorEnvironment) string { return v.Id }).(pulumi.StringOutput)
}

type ConnectorEnvironmentPtrOutput struct{ *pulumi.OutputState }

func (ConnectorEnvironmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorEnvironment)(nil)).Elem()
}

func (o ConnectorEnvironmentPtrOutput) ToConnectorEnvironmentPtrOutput() ConnectorEnvironmentPtrOutput {
	return o
}

func (o ConnectorEnvironmentPtrOutput) ToConnectorEnvironmentPtrOutputWithContext(ctx context.Context) ConnectorEnvironmentPtrOutput {
	return o
}

func (o ConnectorEnvironmentPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ConnectorEnvironment] {
	return pulumix.Output[*ConnectorEnvironment]{
		OutputState: o.OutputState,
	}
}

func (o ConnectorEnvironmentPtrOutput) Elem() ConnectorEnvironmentOutput {
	return o.ApplyT(func(v *ConnectorEnvironment) ConnectorEnvironment {
		if v != nil {
			return *v
		}
		var ret ConnectorEnvironment
		return ret
	}).(ConnectorEnvironmentOutput)
}

// The ID of the Kafka cluster that the connector belongs to, for example, `lkc-abc123`.
func (o ConnectorEnvironmentPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorEnvironment) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type ConnectorKafkaCluster struct {
	// The ID of the Kafka cluster that the connector belongs to, for example, `lkc-abc123`.
	Id string `pulumi:"id"`
}

// ConnectorKafkaClusterInput is an input type that accepts ConnectorKafkaClusterArgs and ConnectorKafkaClusterOutput values.
// You can construct a concrete instance of `ConnectorKafkaClusterInput` via:
//
//	ConnectorKafkaClusterArgs{...}
type ConnectorKafkaClusterInput interface {
	pulumi.Input

	ToConnectorKafkaClusterOutput() ConnectorKafkaClusterOutput
	ToConnectorKafkaClusterOutputWithContext(context.Context) ConnectorKafkaClusterOutput
}

type ConnectorKafkaClusterArgs struct {
	// The ID of the Kafka cluster that the connector belongs to, for example, `lkc-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (ConnectorKafkaClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorKafkaCluster)(nil)).Elem()
}

func (i ConnectorKafkaClusterArgs) ToConnectorKafkaClusterOutput() ConnectorKafkaClusterOutput {
	return i.ToConnectorKafkaClusterOutputWithContext(context.Background())
}

func (i ConnectorKafkaClusterArgs) ToConnectorKafkaClusterOutputWithContext(ctx context.Context) ConnectorKafkaClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorKafkaClusterOutput)
}

func (i ConnectorKafkaClusterArgs) ToOutput(ctx context.Context) pulumix.Output[ConnectorKafkaCluster] {
	return pulumix.Output[ConnectorKafkaCluster]{
		OutputState: i.ToConnectorKafkaClusterOutputWithContext(ctx).OutputState,
	}
}

func (i ConnectorKafkaClusterArgs) ToConnectorKafkaClusterPtrOutput() ConnectorKafkaClusterPtrOutput {
	return i.ToConnectorKafkaClusterPtrOutputWithContext(context.Background())
}

func (i ConnectorKafkaClusterArgs) ToConnectorKafkaClusterPtrOutputWithContext(ctx context.Context) ConnectorKafkaClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorKafkaClusterOutput).ToConnectorKafkaClusterPtrOutputWithContext(ctx)
}

// ConnectorKafkaClusterPtrInput is an input type that accepts ConnectorKafkaClusterArgs, ConnectorKafkaClusterPtr and ConnectorKafkaClusterPtrOutput values.
// You can construct a concrete instance of `ConnectorKafkaClusterPtrInput` via:
//
//	        ConnectorKafkaClusterArgs{...}
//
//	or:
//
//	        nil
type ConnectorKafkaClusterPtrInput interface {
	pulumi.Input

	ToConnectorKafkaClusterPtrOutput() ConnectorKafkaClusterPtrOutput
	ToConnectorKafkaClusterPtrOutputWithContext(context.Context) ConnectorKafkaClusterPtrOutput
}

type connectorKafkaClusterPtrType ConnectorKafkaClusterArgs

func ConnectorKafkaClusterPtr(v *ConnectorKafkaClusterArgs) ConnectorKafkaClusterPtrInput {
	return (*connectorKafkaClusterPtrType)(v)
}

func (*connectorKafkaClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorKafkaCluster)(nil)).Elem()
}

func (i *connectorKafkaClusterPtrType) ToConnectorKafkaClusterPtrOutput() ConnectorKafkaClusterPtrOutput {
	return i.ToConnectorKafkaClusterPtrOutputWithContext(context.Background())
}

func (i *connectorKafkaClusterPtrType) ToConnectorKafkaClusterPtrOutputWithContext(ctx context.Context) ConnectorKafkaClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorKafkaClusterPtrOutput)
}

func (i *connectorKafkaClusterPtrType) ToOutput(ctx context.Context) pulumix.Output[*ConnectorKafkaCluster] {
	return pulumix.Output[*ConnectorKafkaCluster]{
		OutputState: i.ToConnectorKafkaClusterPtrOutputWithContext(ctx).OutputState,
	}
}

type ConnectorKafkaClusterOutput struct{ *pulumi.OutputState }

func (ConnectorKafkaClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorKafkaCluster)(nil)).Elem()
}

func (o ConnectorKafkaClusterOutput) ToConnectorKafkaClusterOutput() ConnectorKafkaClusterOutput {
	return o
}

func (o ConnectorKafkaClusterOutput) ToConnectorKafkaClusterOutputWithContext(ctx context.Context) ConnectorKafkaClusterOutput {
	return o
}

func (o ConnectorKafkaClusterOutput) ToConnectorKafkaClusterPtrOutput() ConnectorKafkaClusterPtrOutput {
	return o.ToConnectorKafkaClusterPtrOutputWithContext(context.Background())
}

func (o ConnectorKafkaClusterOutput) ToConnectorKafkaClusterPtrOutputWithContext(ctx context.Context) ConnectorKafkaClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectorKafkaCluster) *ConnectorKafkaCluster {
		return &v
	}).(ConnectorKafkaClusterPtrOutput)
}

func (o ConnectorKafkaClusterOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorKafkaCluster] {
	return pulumix.Output[ConnectorKafkaCluster]{
		OutputState: o.OutputState,
	}
}

// The ID of the Kafka cluster that the connector belongs to, for example, `lkc-abc123`.
func (o ConnectorKafkaClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorKafkaCluster) string { return v.Id }).(pulumi.StringOutput)
}

type ConnectorKafkaClusterPtrOutput struct{ *pulumi.OutputState }

func (ConnectorKafkaClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorKafkaCluster)(nil)).Elem()
}

func (o ConnectorKafkaClusterPtrOutput) ToConnectorKafkaClusterPtrOutput() ConnectorKafkaClusterPtrOutput {
	return o
}

func (o ConnectorKafkaClusterPtrOutput) ToConnectorKafkaClusterPtrOutputWithContext(ctx context.Context) ConnectorKafkaClusterPtrOutput {
	return o
}

func (o ConnectorKafkaClusterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ConnectorKafkaCluster] {
	return pulumix.Output[*ConnectorKafkaCluster]{
		OutputState: o.OutputState,
	}
}

func (o ConnectorKafkaClusterPtrOutput) Elem() ConnectorKafkaClusterOutput {
	return o.ApplyT(func(v *ConnectorKafkaCluster) ConnectorKafkaCluster {
		if v != nil {
			return *v
		}
		var ret ConnectorKafkaCluster
		return ret
	}).(ConnectorKafkaClusterOutput)
}

// The ID of the Kafka cluster that the connector belongs to, for example, `lkc-abc123`.
func (o ConnectorKafkaClusterPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorKafkaCluster) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type IdentityPoolIdentityProvider struct {
	// The ID of the Identity Provider associated with the Identity Pool, for example, `op-abc123`.
	Id string `pulumi:"id"`
}

// IdentityPoolIdentityProviderInput is an input type that accepts IdentityPoolIdentityProviderArgs and IdentityPoolIdentityProviderOutput values.
// You can construct a concrete instance of `IdentityPoolIdentityProviderInput` via:
//
//	IdentityPoolIdentityProviderArgs{...}
type IdentityPoolIdentityProviderInput interface {
	pulumi.Input

	ToIdentityPoolIdentityProviderOutput() IdentityPoolIdentityProviderOutput
	ToIdentityPoolIdentityProviderOutputWithContext(context.Context) IdentityPoolIdentityProviderOutput
}

type IdentityPoolIdentityProviderArgs struct {
	// The ID of the Identity Provider associated with the Identity Pool, for example, `op-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (IdentityPoolIdentityProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityPoolIdentityProvider)(nil)).Elem()
}

func (i IdentityPoolIdentityProviderArgs) ToIdentityPoolIdentityProviderOutput() IdentityPoolIdentityProviderOutput {
	return i.ToIdentityPoolIdentityProviderOutputWithContext(context.Background())
}

func (i IdentityPoolIdentityProviderArgs) ToIdentityPoolIdentityProviderOutputWithContext(ctx context.Context) IdentityPoolIdentityProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityPoolIdentityProviderOutput)
}

func (i IdentityPoolIdentityProviderArgs) ToOutput(ctx context.Context) pulumix.Output[IdentityPoolIdentityProvider] {
	return pulumix.Output[IdentityPoolIdentityProvider]{
		OutputState: i.ToIdentityPoolIdentityProviderOutputWithContext(ctx).OutputState,
	}
}

func (i IdentityPoolIdentityProviderArgs) ToIdentityPoolIdentityProviderPtrOutput() IdentityPoolIdentityProviderPtrOutput {
	return i.ToIdentityPoolIdentityProviderPtrOutputWithContext(context.Background())
}

func (i IdentityPoolIdentityProviderArgs) ToIdentityPoolIdentityProviderPtrOutputWithContext(ctx context.Context) IdentityPoolIdentityProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityPoolIdentityProviderOutput).ToIdentityPoolIdentityProviderPtrOutputWithContext(ctx)
}

// IdentityPoolIdentityProviderPtrInput is an input type that accepts IdentityPoolIdentityProviderArgs, IdentityPoolIdentityProviderPtr and IdentityPoolIdentityProviderPtrOutput values.
// You can construct a concrete instance of `IdentityPoolIdentityProviderPtrInput` via:
//
//	        IdentityPoolIdentityProviderArgs{...}
//
//	or:
//
//	        nil
type IdentityPoolIdentityProviderPtrInput interface {
	pulumi.Input

	ToIdentityPoolIdentityProviderPtrOutput() IdentityPoolIdentityProviderPtrOutput
	ToIdentityPoolIdentityProviderPtrOutputWithContext(context.Context) IdentityPoolIdentityProviderPtrOutput
}

type identityPoolIdentityProviderPtrType IdentityPoolIdentityProviderArgs

func IdentityPoolIdentityProviderPtr(v *IdentityPoolIdentityProviderArgs) IdentityPoolIdentityProviderPtrInput {
	return (*identityPoolIdentityProviderPtrType)(v)
}

func (*identityPoolIdentityProviderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityPoolIdentityProvider)(nil)).Elem()
}

func (i *identityPoolIdentityProviderPtrType) ToIdentityPoolIdentityProviderPtrOutput() IdentityPoolIdentityProviderPtrOutput {
	return i.ToIdentityPoolIdentityProviderPtrOutputWithContext(context.Background())
}

func (i *identityPoolIdentityProviderPtrType) ToIdentityPoolIdentityProviderPtrOutputWithContext(ctx context.Context) IdentityPoolIdentityProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityPoolIdentityProviderPtrOutput)
}

func (i *identityPoolIdentityProviderPtrType) ToOutput(ctx context.Context) pulumix.Output[*IdentityPoolIdentityProvider] {
	return pulumix.Output[*IdentityPoolIdentityProvider]{
		OutputState: i.ToIdentityPoolIdentityProviderPtrOutputWithContext(ctx).OutputState,
	}
}

type IdentityPoolIdentityProviderOutput struct{ *pulumi.OutputState }

func (IdentityPoolIdentityProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityPoolIdentityProvider)(nil)).Elem()
}

func (o IdentityPoolIdentityProviderOutput) ToIdentityPoolIdentityProviderOutput() IdentityPoolIdentityProviderOutput {
	return o
}

func (o IdentityPoolIdentityProviderOutput) ToIdentityPoolIdentityProviderOutputWithContext(ctx context.Context) IdentityPoolIdentityProviderOutput {
	return o
}

func (o IdentityPoolIdentityProviderOutput) ToIdentityPoolIdentityProviderPtrOutput() IdentityPoolIdentityProviderPtrOutput {
	return o.ToIdentityPoolIdentityProviderPtrOutputWithContext(context.Background())
}

func (o IdentityPoolIdentityProviderOutput) ToIdentityPoolIdentityProviderPtrOutputWithContext(ctx context.Context) IdentityPoolIdentityProviderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IdentityPoolIdentityProvider) *IdentityPoolIdentityProvider {
		return &v
	}).(IdentityPoolIdentityProviderPtrOutput)
}

func (o IdentityPoolIdentityProviderOutput) ToOutput(ctx context.Context) pulumix.Output[IdentityPoolIdentityProvider] {
	return pulumix.Output[IdentityPoolIdentityProvider]{
		OutputState: o.OutputState,
	}
}

// The ID of the Identity Provider associated with the Identity Pool, for example, `op-abc123`.
func (o IdentityPoolIdentityProviderOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityPoolIdentityProvider) string { return v.Id }).(pulumi.StringOutput)
}

type IdentityPoolIdentityProviderPtrOutput struct{ *pulumi.OutputState }

func (IdentityPoolIdentityProviderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityPoolIdentityProvider)(nil)).Elem()
}

func (o IdentityPoolIdentityProviderPtrOutput) ToIdentityPoolIdentityProviderPtrOutput() IdentityPoolIdentityProviderPtrOutput {
	return o
}

func (o IdentityPoolIdentityProviderPtrOutput) ToIdentityPoolIdentityProviderPtrOutputWithContext(ctx context.Context) IdentityPoolIdentityProviderPtrOutput {
	return o
}

func (o IdentityPoolIdentityProviderPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IdentityPoolIdentityProvider] {
	return pulumix.Output[*IdentityPoolIdentityProvider]{
		OutputState: o.OutputState,
	}
}

func (o IdentityPoolIdentityProviderPtrOutput) Elem() IdentityPoolIdentityProviderOutput {
	return o.ApplyT(func(v *IdentityPoolIdentityProvider) IdentityPoolIdentityProvider {
		if v != nil {
			return *v
		}
		var ret IdentityPoolIdentityProvider
		return ret
	}).(IdentityPoolIdentityProviderOutput)
}

// The ID of the Identity Provider associated with the Identity Pool, for example, `op-abc123`.
func (o IdentityPoolIdentityProviderPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityPoolIdentityProvider) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type InvitationCreator struct {
	// (Required String) The id of invitation creator.
	Id *string `pulumi:"id"`
}

// InvitationCreatorInput is an input type that accepts InvitationCreatorArgs and InvitationCreatorOutput values.
// You can construct a concrete instance of `InvitationCreatorInput` via:
//
//	InvitationCreatorArgs{...}
type InvitationCreatorInput interface {
	pulumi.Input

	ToInvitationCreatorOutput() InvitationCreatorOutput
	ToInvitationCreatorOutputWithContext(context.Context) InvitationCreatorOutput
}

type InvitationCreatorArgs struct {
	// (Required String) The id of invitation creator.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (InvitationCreatorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InvitationCreator)(nil)).Elem()
}

func (i InvitationCreatorArgs) ToInvitationCreatorOutput() InvitationCreatorOutput {
	return i.ToInvitationCreatorOutputWithContext(context.Background())
}

func (i InvitationCreatorArgs) ToInvitationCreatorOutputWithContext(ctx context.Context) InvitationCreatorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvitationCreatorOutput)
}

func (i InvitationCreatorArgs) ToOutput(ctx context.Context) pulumix.Output[InvitationCreator] {
	return pulumix.Output[InvitationCreator]{
		OutputState: i.ToInvitationCreatorOutputWithContext(ctx).OutputState,
	}
}

// InvitationCreatorArrayInput is an input type that accepts InvitationCreatorArray and InvitationCreatorArrayOutput values.
// You can construct a concrete instance of `InvitationCreatorArrayInput` via:
//
//	InvitationCreatorArray{ InvitationCreatorArgs{...} }
type InvitationCreatorArrayInput interface {
	pulumi.Input

	ToInvitationCreatorArrayOutput() InvitationCreatorArrayOutput
	ToInvitationCreatorArrayOutputWithContext(context.Context) InvitationCreatorArrayOutput
}

type InvitationCreatorArray []InvitationCreatorInput

func (InvitationCreatorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InvitationCreator)(nil)).Elem()
}

func (i InvitationCreatorArray) ToInvitationCreatorArrayOutput() InvitationCreatorArrayOutput {
	return i.ToInvitationCreatorArrayOutputWithContext(context.Background())
}

func (i InvitationCreatorArray) ToInvitationCreatorArrayOutputWithContext(ctx context.Context) InvitationCreatorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvitationCreatorArrayOutput)
}

func (i InvitationCreatorArray) ToOutput(ctx context.Context) pulumix.Output[[]InvitationCreator] {
	return pulumix.Output[[]InvitationCreator]{
		OutputState: i.ToInvitationCreatorArrayOutputWithContext(ctx).OutputState,
	}
}

type InvitationCreatorOutput struct{ *pulumi.OutputState }

func (InvitationCreatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InvitationCreator)(nil)).Elem()
}

func (o InvitationCreatorOutput) ToInvitationCreatorOutput() InvitationCreatorOutput {
	return o
}

func (o InvitationCreatorOutput) ToInvitationCreatorOutputWithContext(ctx context.Context) InvitationCreatorOutput {
	return o
}

func (o InvitationCreatorOutput) ToOutput(ctx context.Context) pulumix.Output[InvitationCreator] {
	return pulumix.Output[InvitationCreator]{
		OutputState: o.OutputState,
	}
}

// (Required String) The id of invitation creator.
func (o InvitationCreatorOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InvitationCreator) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type InvitationCreatorArrayOutput struct{ *pulumi.OutputState }

func (InvitationCreatorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InvitationCreator)(nil)).Elem()
}

func (o InvitationCreatorArrayOutput) ToInvitationCreatorArrayOutput() InvitationCreatorArrayOutput {
	return o
}

func (o InvitationCreatorArrayOutput) ToInvitationCreatorArrayOutputWithContext(ctx context.Context) InvitationCreatorArrayOutput {
	return o
}

func (o InvitationCreatorArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InvitationCreator] {
	return pulumix.Output[[]InvitationCreator]{
		OutputState: o.OutputState,
	}
}

func (o InvitationCreatorArrayOutput) Index(i pulumi.IntInput) InvitationCreatorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InvitationCreator {
		return vs[0].([]InvitationCreator)[vs[1].(int)]
	}).(InvitationCreatorOutput)
}

type InvitationUser struct {
	// (Required String) The id of invitation creator.
	Id *string `pulumi:"id"`
}

// InvitationUserInput is an input type that accepts InvitationUserArgs and InvitationUserOutput values.
// You can construct a concrete instance of `InvitationUserInput` via:
//
//	InvitationUserArgs{...}
type InvitationUserInput interface {
	pulumi.Input

	ToInvitationUserOutput() InvitationUserOutput
	ToInvitationUserOutputWithContext(context.Context) InvitationUserOutput
}

type InvitationUserArgs struct {
	// (Required String) The id of invitation creator.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (InvitationUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InvitationUser)(nil)).Elem()
}

func (i InvitationUserArgs) ToInvitationUserOutput() InvitationUserOutput {
	return i.ToInvitationUserOutputWithContext(context.Background())
}

func (i InvitationUserArgs) ToInvitationUserOutputWithContext(ctx context.Context) InvitationUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvitationUserOutput)
}

func (i InvitationUserArgs) ToOutput(ctx context.Context) pulumix.Output[InvitationUser] {
	return pulumix.Output[InvitationUser]{
		OutputState: i.ToInvitationUserOutputWithContext(ctx).OutputState,
	}
}

// InvitationUserArrayInput is an input type that accepts InvitationUserArray and InvitationUserArrayOutput values.
// You can construct a concrete instance of `InvitationUserArrayInput` via:
//
//	InvitationUserArray{ InvitationUserArgs{...} }
type InvitationUserArrayInput interface {
	pulumi.Input

	ToInvitationUserArrayOutput() InvitationUserArrayOutput
	ToInvitationUserArrayOutputWithContext(context.Context) InvitationUserArrayOutput
}

type InvitationUserArray []InvitationUserInput

func (InvitationUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InvitationUser)(nil)).Elem()
}

func (i InvitationUserArray) ToInvitationUserArrayOutput() InvitationUserArrayOutput {
	return i.ToInvitationUserArrayOutputWithContext(context.Background())
}

func (i InvitationUserArray) ToInvitationUserArrayOutputWithContext(ctx context.Context) InvitationUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvitationUserArrayOutput)
}

func (i InvitationUserArray) ToOutput(ctx context.Context) pulumix.Output[[]InvitationUser] {
	return pulumix.Output[[]InvitationUser]{
		OutputState: i.ToInvitationUserArrayOutputWithContext(ctx).OutputState,
	}
}

type InvitationUserOutput struct{ *pulumi.OutputState }

func (InvitationUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InvitationUser)(nil)).Elem()
}

func (o InvitationUserOutput) ToInvitationUserOutput() InvitationUserOutput {
	return o
}

func (o InvitationUserOutput) ToInvitationUserOutputWithContext(ctx context.Context) InvitationUserOutput {
	return o
}

func (o InvitationUserOutput) ToOutput(ctx context.Context) pulumix.Output[InvitationUser] {
	return pulumix.Output[InvitationUser]{
		OutputState: o.OutputState,
	}
}

// (Required String) The id of invitation creator.
func (o InvitationUserOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InvitationUser) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type InvitationUserArrayOutput struct{ *pulumi.OutputState }

func (InvitationUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InvitationUser)(nil)).Elem()
}

func (o InvitationUserArrayOutput) ToInvitationUserArrayOutput() InvitationUserArrayOutput {
	return o
}

func (o InvitationUserArrayOutput) ToInvitationUserArrayOutputWithContext(ctx context.Context) InvitationUserArrayOutput {
	return o
}

func (o InvitationUserArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InvitationUser] {
	return pulumix.Output[[]InvitationUser]{
		OutputState: o.OutputState,
	}
}

func (o InvitationUserArrayOutput) Index(i pulumi.IntInput) InvitationUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InvitationUser {
		return vs[0].([]InvitationUser)[vs[1].(int)]
	}).(InvitationUserOutput)
}

type KafkaAclCredentials struct {
	// The Kafka API Key.
	Key string `pulumi:"key"`
	// The Kafka API Secret.
	Secret string `pulumi:"secret"`
}

// KafkaAclCredentialsInput is an input type that accepts KafkaAclCredentialsArgs and KafkaAclCredentialsOutput values.
// You can construct a concrete instance of `KafkaAclCredentialsInput` via:
//
//	KafkaAclCredentialsArgs{...}
type KafkaAclCredentialsInput interface {
	pulumi.Input

	ToKafkaAclCredentialsOutput() KafkaAclCredentialsOutput
	ToKafkaAclCredentialsOutputWithContext(context.Context) KafkaAclCredentialsOutput
}

type KafkaAclCredentialsArgs struct {
	// The Kafka API Key.
	Key pulumi.StringInput `pulumi:"key"`
	// The Kafka API Secret.
	Secret pulumi.StringInput `pulumi:"secret"`
}

func (KafkaAclCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaAclCredentials)(nil)).Elem()
}

func (i KafkaAclCredentialsArgs) ToKafkaAclCredentialsOutput() KafkaAclCredentialsOutput {
	return i.ToKafkaAclCredentialsOutputWithContext(context.Background())
}

func (i KafkaAclCredentialsArgs) ToKafkaAclCredentialsOutputWithContext(ctx context.Context) KafkaAclCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaAclCredentialsOutput)
}

func (i KafkaAclCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[KafkaAclCredentials] {
	return pulumix.Output[KafkaAclCredentials]{
		OutputState: i.ToKafkaAclCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i KafkaAclCredentialsArgs) ToKafkaAclCredentialsPtrOutput() KafkaAclCredentialsPtrOutput {
	return i.ToKafkaAclCredentialsPtrOutputWithContext(context.Background())
}

func (i KafkaAclCredentialsArgs) ToKafkaAclCredentialsPtrOutputWithContext(ctx context.Context) KafkaAclCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaAclCredentialsOutput).ToKafkaAclCredentialsPtrOutputWithContext(ctx)
}

// KafkaAclCredentialsPtrInput is an input type that accepts KafkaAclCredentialsArgs, KafkaAclCredentialsPtr and KafkaAclCredentialsPtrOutput values.
// You can construct a concrete instance of `KafkaAclCredentialsPtrInput` via:
//
//	        KafkaAclCredentialsArgs{...}
//
//	or:
//
//	        nil
type KafkaAclCredentialsPtrInput interface {
	pulumi.Input

	ToKafkaAclCredentialsPtrOutput() KafkaAclCredentialsPtrOutput
	ToKafkaAclCredentialsPtrOutputWithContext(context.Context) KafkaAclCredentialsPtrOutput
}

type kafkaAclCredentialsPtrType KafkaAclCredentialsArgs

func KafkaAclCredentialsPtr(v *KafkaAclCredentialsArgs) KafkaAclCredentialsPtrInput {
	return (*kafkaAclCredentialsPtrType)(v)
}

func (*kafkaAclCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaAclCredentials)(nil)).Elem()
}

func (i *kafkaAclCredentialsPtrType) ToKafkaAclCredentialsPtrOutput() KafkaAclCredentialsPtrOutput {
	return i.ToKafkaAclCredentialsPtrOutputWithContext(context.Background())
}

func (i *kafkaAclCredentialsPtrType) ToKafkaAclCredentialsPtrOutputWithContext(ctx context.Context) KafkaAclCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaAclCredentialsPtrOutput)
}

func (i *kafkaAclCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*KafkaAclCredentials] {
	return pulumix.Output[*KafkaAclCredentials]{
		OutputState: i.ToKafkaAclCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

type KafkaAclCredentialsOutput struct{ *pulumi.OutputState }

func (KafkaAclCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaAclCredentials)(nil)).Elem()
}

func (o KafkaAclCredentialsOutput) ToKafkaAclCredentialsOutput() KafkaAclCredentialsOutput {
	return o
}

func (o KafkaAclCredentialsOutput) ToKafkaAclCredentialsOutputWithContext(ctx context.Context) KafkaAclCredentialsOutput {
	return o
}

func (o KafkaAclCredentialsOutput) ToKafkaAclCredentialsPtrOutput() KafkaAclCredentialsPtrOutput {
	return o.ToKafkaAclCredentialsPtrOutputWithContext(context.Background())
}

func (o KafkaAclCredentialsOutput) ToKafkaAclCredentialsPtrOutputWithContext(ctx context.Context) KafkaAclCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaAclCredentials) *KafkaAclCredentials {
		return &v
	}).(KafkaAclCredentialsPtrOutput)
}

func (o KafkaAclCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[KafkaAclCredentials] {
	return pulumix.Output[KafkaAclCredentials]{
		OutputState: o.OutputState,
	}
}

// The Kafka API Key.
func (o KafkaAclCredentialsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaAclCredentials) string { return v.Key }).(pulumi.StringOutput)
}

// The Kafka API Secret.
func (o KafkaAclCredentialsOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaAclCredentials) string { return v.Secret }).(pulumi.StringOutput)
}

type KafkaAclCredentialsPtrOutput struct{ *pulumi.OutputState }

func (KafkaAclCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaAclCredentials)(nil)).Elem()
}

func (o KafkaAclCredentialsPtrOutput) ToKafkaAclCredentialsPtrOutput() KafkaAclCredentialsPtrOutput {
	return o
}

func (o KafkaAclCredentialsPtrOutput) ToKafkaAclCredentialsPtrOutputWithContext(ctx context.Context) KafkaAclCredentialsPtrOutput {
	return o
}

func (o KafkaAclCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*KafkaAclCredentials] {
	return pulumix.Output[*KafkaAclCredentials]{
		OutputState: o.OutputState,
	}
}

func (o KafkaAclCredentialsPtrOutput) Elem() KafkaAclCredentialsOutput {
	return o.ApplyT(func(v *KafkaAclCredentials) KafkaAclCredentials {
		if v != nil {
			return *v
		}
		var ret KafkaAclCredentials
		return ret
	}).(KafkaAclCredentialsOutput)
}

// The Kafka API Key.
func (o KafkaAclCredentialsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaAclCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// The Kafka API Secret.
func (o KafkaAclCredentialsPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaAclCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Secret
	}).(pulumi.StringPtrOutput)
}

type KafkaAclKafkaCluster struct {
	// The ID of the Kafka cluster, for example, `lkc-abc123`.
	Id string `pulumi:"id"`
}

// KafkaAclKafkaClusterInput is an input type that accepts KafkaAclKafkaClusterArgs and KafkaAclKafkaClusterOutput values.
// You can construct a concrete instance of `KafkaAclKafkaClusterInput` via:
//
//	KafkaAclKafkaClusterArgs{...}
type KafkaAclKafkaClusterInput interface {
	pulumi.Input

	ToKafkaAclKafkaClusterOutput() KafkaAclKafkaClusterOutput
	ToKafkaAclKafkaClusterOutputWithContext(context.Context) KafkaAclKafkaClusterOutput
}

type KafkaAclKafkaClusterArgs struct {
	// The ID of the Kafka cluster, for example, `lkc-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (KafkaAclKafkaClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaAclKafkaCluster)(nil)).Elem()
}

func (i KafkaAclKafkaClusterArgs) ToKafkaAclKafkaClusterOutput() KafkaAclKafkaClusterOutput {
	return i.ToKafkaAclKafkaClusterOutputWithContext(context.Background())
}

func (i KafkaAclKafkaClusterArgs) ToKafkaAclKafkaClusterOutputWithContext(ctx context.Context) KafkaAclKafkaClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaAclKafkaClusterOutput)
}

func (i KafkaAclKafkaClusterArgs) ToOutput(ctx context.Context) pulumix.Output[KafkaAclKafkaCluster] {
	return pulumix.Output[KafkaAclKafkaCluster]{
		OutputState: i.ToKafkaAclKafkaClusterOutputWithContext(ctx).OutputState,
	}
}

func (i KafkaAclKafkaClusterArgs) ToKafkaAclKafkaClusterPtrOutput() KafkaAclKafkaClusterPtrOutput {
	return i.ToKafkaAclKafkaClusterPtrOutputWithContext(context.Background())
}

func (i KafkaAclKafkaClusterArgs) ToKafkaAclKafkaClusterPtrOutputWithContext(ctx context.Context) KafkaAclKafkaClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaAclKafkaClusterOutput).ToKafkaAclKafkaClusterPtrOutputWithContext(ctx)
}

// KafkaAclKafkaClusterPtrInput is an input type that accepts KafkaAclKafkaClusterArgs, KafkaAclKafkaClusterPtr and KafkaAclKafkaClusterPtrOutput values.
// You can construct a concrete instance of `KafkaAclKafkaClusterPtrInput` via:
//
//	        KafkaAclKafkaClusterArgs{...}
//
//	or:
//
//	        nil
type KafkaAclKafkaClusterPtrInput interface {
	pulumi.Input

	ToKafkaAclKafkaClusterPtrOutput() KafkaAclKafkaClusterPtrOutput
	ToKafkaAclKafkaClusterPtrOutputWithContext(context.Context) KafkaAclKafkaClusterPtrOutput
}

type kafkaAclKafkaClusterPtrType KafkaAclKafkaClusterArgs

func KafkaAclKafkaClusterPtr(v *KafkaAclKafkaClusterArgs) KafkaAclKafkaClusterPtrInput {
	return (*kafkaAclKafkaClusterPtrType)(v)
}

func (*kafkaAclKafkaClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaAclKafkaCluster)(nil)).Elem()
}

func (i *kafkaAclKafkaClusterPtrType) ToKafkaAclKafkaClusterPtrOutput() KafkaAclKafkaClusterPtrOutput {
	return i.ToKafkaAclKafkaClusterPtrOutputWithContext(context.Background())
}

func (i *kafkaAclKafkaClusterPtrType) ToKafkaAclKafkaClusterPtrOutputWithContext(ctx context.Context) KafkaAclKafkaClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaAclKafkaClusterPtrOutput)
}

func (i *kafkaAclKafkaClusterPtrType) ToOutput(ctx context.Context) pulumix.Output[*KafkaAclKafkaCluster] {
	return pulumix.Output[*KafkaAclKafkaCluster]{
		OutputState: i.ToKafkaAclKafkaClusterPtrOutputWithContext(ctx).OutputState,
	}
}

type KafkaAclKafkaClusterOutput struct{ *pulumi.OutputState }

func (KafkaAclKafkaClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaAclKafkaCluster)(nil)).Elem()
}

func (o KafkaAclKafkaClusterOutput) ToKafkaAclKafkaClusterOutput() KafkaAclKafkaClusterOutput {
	return o
}

func (o KafkaAclKafkaClusterOutput) ToKafkaAclKafkaClusterOutputWithContext(ctx context.Context) KafkaAclKafkaClusterOutput {
	return o
}

func (o KafkaAclKafkaClusterOutput) ToKafkaAclKafkaClusterPtrOutput() KafkaAclKafkaClusterPtrOutput {
	return o.ToKafkaAclKafkaClusterPtrOutputWithContext(context.Background())
}

func (o KafkaAclKafkaClusterOutput) ToKafkaAclKafkaClusterPtrOutputWithContext(ctx context.Context) KafkaAclKafkaClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaAclKafkaCluster) *KafkaAclKafkaCluster {
		return &v
	}).(KafkaAclKafkaClusterPtrOutput)
}

func (o KafkaAclKafkaClusterOutput) ToOutput(ctx context.Context) pulumix.Output[KafkaAclKafkaCluster] {
	return pulumix.Output[KafkaAclKafkaCluster]{
		OutputState: o.OutputState,
	}
}

// The ID of the Kafka cluster, for example, `lkc-abc123`.
func (o KafkaAclKafkaClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaAclKafkaCluster) string { return v.Id }).(pulumi.StringOutput)
}

type KafkaAclKafkaClusterPtrOutput struct{ *pulumi.OutputState }

func (KafkaAclKafkaClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaAclKafkaCluster)(nil)).Elem()
}

func (o KafkaAclKafkaClusterPtrOutput) ToKafkaAclKafkaClusterPtrOutput() KafkaAclKafkaClusterPtrOutput {
	return o
}

func (o KafkaAclKafkaClusterPtrOutput) ToKafkaAclKafkaClusterPtrOutputWithContext(ctx context.Context) KafkaAclKafkaClusterPtrOutput {
	return o
}

func (o KafkaAclKafkaClusterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*KafkaAclKafkaCluster] {
	return pulumix.Output[*KafkaAclKafkaCluster]{
		OutputState: o.OutputState,
	}
}

func (o KafkaAclKafkaClusterPtrOutput) Elem() KafkaAclKafkaClusterOutput {
	return o.ApplyT(func(v *KafkaAclKafkaCluster) KafkaAclKafkaCluster {
		if v != nil {
			return *v
		}
		var ret KafkaAclKafkaCluster
		return ret
	}).(KafkaAclKafkaClusterOutput)
}

// The ID of the Kafka cluster, for example, `lkc-abc123`.
func (o KafkaAclKafkaClusterPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaAclKafkaCluster) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type KafkaClientQuotaEnvironment struct {
	// The ID of the Environment that the corresponding Kafka Cluster belongs to, for example, `env-abc123`.
	//
	// > **Note:** Each principal assigned to a quota receives the full amount of the quota, meaning the quota is not shared by the principals it is assigned. For example, if a 10 MBps ingress quota is applied to Principals 1 and 2, Principal 1 can produce at most 10 MBps, independently of Principal 2.
	//
	// > **Note:** Define a throughput maximum, but do not guarantee a throughput floor. Applications are rate-limited through the use of the Kafka throttling mechanism. Kafka asks the client to wait before sending more data and mutes the channel, which appears as latency to the client application.
	Id string `pulumi:"id"`
}

// KafkaClientQuotaEnvironmentInput is an input type that accepts KafkaClientQuotaEnvironmentArgs and KafkaClientQuotaEnvironmentOutput values.
// You can construct a concrete instance of `KafkaClientQuotaEnvironmentInput` via:
//
//	KafkaClientQuotaEnvironmentArgs{...}
type KafkaClientQuotaEnvironmentInput interface {
	pulumi.Input

	ToKafkaClientQuotaEnvironmentOutput() KafkaClientQuotaEnvironmentOutput
	ToKafkaClientQuotaEnvironmentOutputWithContext(context.Context) KafkaClientQuotaEnvironmentOutput
}

type KafkaClientQuotaEnvironmentArgs struct {
	// The ID of the Environment that the corresponding Kafka Cluster belongs to, for example, `env-abc123`.
	//
	// > **Note:** Each principal assigned to a quota receives the full amount of the quota, meaning the quota is not shared by the principals it is assigned. For example, if a 10 MBps ingress quota is applied to Principals 1 and 2, Principal 1 can produce at most 10 MBps, independently of Principal 2.
	//
	// > **Note:** Define a throughput maximum, but do not guarantee a throughput floor. Applications are rate-limited through the use of the Kafka throttling mechanism. Kafka asks the client to wait before sending more data and mutes the channel, which appears as latency to the client application.
	Id pulumi.StringInput `pulumi:"id"`
}

func (KafkaClientQuotaEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClientQuotaEnvironment)(nil)).Elem()
}

func (i KafkaClientQuotaEnvironmentArgs) ToKafkaClientQuotaEnvironmentOutput() KafkaClientQuotaEnvironmentOutput {
	return i.ToKafkaClientQuotaEnvironmentOutputWithContext(context.Background())
}

func (i KafkaClientQuotaEnvironmentArgs) ToKafkaClientQuotaEnvironmentOutputWithContext(ctx context.Context) KafkaClientQuotaEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClientQuotaEnvironmentOutput)
}

func (i KafkaClientQuotaEnvironmentArgs) ToOutput(ctx context.Context) pulumix.Output[KafkaClientQuotaEnvironment] {
	return pulumix.Output[KafkaClientQuotaEnvironment]{
		OutputState: i.ToKafkaClientQuotaEnvironmentOutputWithContext(ctx).OutputState,
	}
}

func (i KafkaClientQuotaEnvironmentArgs) ToKafkaClientQuotaEnvironmentPtrOutput() KafkaClientQuotaEnvironmentPtrOutput {
	return i.ToKafkaClientQuotaEnvironmentPtrOutputWithContext(context.Background())
}

func (i KafkaClientQuotaEnvironmentArgs) ToKafkaClientQuotaEnvironmentPtrOutputWithContext(ctx context.Context) KafkaClientQuotaEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClientQuotaEnvironmentOutput).ToKafkaClientQuotaEnvironmentPtrOutputWithContext(ctx)
}

// KafkaClientQuotaEnvironmentPtrInput is an input type that accepts KafkaClientQuotaEnvironmentArgs, KafkaClientQuotaEnvironmentPtr and KafkaClientQuotaEnvironmentPtrOutput values.
// You can construct a concrete instance of `KafkaClientQuotaEnvironmentPtrInput` via:
//
//	        KafkaClientQuotaEnvironmentArgs{...}
//
//	or:
//
//	        nil
type KafkaClientQuotaEnvironmentPtrInput interface {
	pulumi.Input

	ToKafkaClientQuotaEnvironmentPtrOutput() KafkaClientQuotaEnvironmentPtrOutput
	ToKafkaClientQuotaEnvironmentPtrOutputWithContext(context.Context) KafkaClientQuotaEnvironmentPtrOutput
}

type kafkaClientQuotaEnvironmentPtrType KafkaClientQuotaEnvironmentArgs

func KafkaClientQuotaEnvironmentPtr(v *KafkaClientQuotaEnvironmentArgs) KafkaClientQuotaEnvironmentPtrInput {
	return (*kafkaClientQuotaEnvironmentPtrType)(v)
}

func (*kafkaClientQuotaEnvironmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaClientQuotaEnvironment)(nil)).Elem()
}

func (i *kafkaClientQuotaEnvironmentPtrType) ToKafkaClientQuotaEnvironmentPtrOutput() KafkaClientQuotaEnvironmentPtrOutput {
	return i.ToKafkaClientQuotaEnvironmentPtrOutputWithContext(context.Background())
}

func (i *kafkaClientQuotaEnvironmentPtrType) ToKafkaClientQuotaEnvironmentPtrOutputWithContext(ctx context.Context) KafkaClientQuotaEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClientQuotaEnvironmentPtrOutput)
}

func (i *kafkaClientQuotaEnvironmentPtrType) ToOutput(ctx context.Context) pulumix.Output[*KafkaClientQuotaEnvironment] {
	return pulumix.Output[*KafkaClientQuotaEnvironment]{
		OutputState: i.ToKafkaClientQuotaEnvironmentPtrOutputWithContext(ctx).OutputState,
	}
}

type KafkaClientQuotaEnvironmentOutput struct{ *pulumi.OutputState }

func (KafkaClientQuotaEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClientQuotaEnvironment)(nil)).Elem()
}

func (o KafkaClientQuotaEnvironmentOutput) ToKafkaClientQuotaEnvironmentOutput() KafkaClientQuotaEnvironmentOutput {
	return o
}

func (o KafkaClientQuotaEnvironmentOutput) ToKafkaClientQuotaEnvironmentOutputWithContext(ctx context.Context) KafkaClientQuotaEnvironmentOutput {
	return o
}

func (o KafkaClientQuotaEnvironmentOutput) ToKafkaClientQuotaEnvironmentPtrOutput() KafkaClientQuotaEnvironmentPtrOutput {
	return o.ToKafkaClientQuotaEnvironmentPtrOutputWithContext(context.Background())
}

func (o KafkaClientQuotaEnvironmentOutput) ToKafkaClientQuotaEnvironmentPtrOutputWithContext(ctx context.Context) KafkaClientQuotaEnvironmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaClientQuotaEnvironment) *KafkaClientQuotaEnvironment {
		return &v
	}).(KafkaClientQuotaEnvironmentPtrOutput)
}

func (o KafkaClientQuotaEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[KafkaClientQuotaEnvironment] {
	return pulumix.Output[KafkaClientQuotaEnvironment]{
		OutputState: o.OutputState,
	}
}

// The ID of the Environment that the corresponding Kafka Cluster belongs to, for example, `env-abc123`.
//
// > **Note:** Each principal assigned to a quota receives the full amount of the quota, meaning the quota is not shared by the principals it is assigned. For example, if a 10 MBps ingress quota is applied to Principals 1 and 2, Principal 1 can produce at most 10 MBps, independently of Principal 2.
//
// > **Note:** Define a throughput maximum, but do not guarantee a throughput floor. Applications are rate-limited through the use of the Kafka throttling mechanism. Kafka asks the client to wait before sending more data and mutes the channel, which appears as latency to the client application.
func (o KafkaClientQuotaEnvironmentOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaClientQuotaEnvironment) string { return v.Id }).(pulumi.StringOutput)
}

type KafkaClientQuotaEnvironmentPtrOutput struct{ *pulumi.OutputState }

func (KafkaClientQuotaEnvironmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaClientQuotaEnvironment)(nil)).Elem()
}

func (o KafkaClientQuotaEnvironmentPtrOutput) ToKafkaClientQuotaEnvironmentPtrOutput() KafkaClientQuotaEnvironmentPtrOutput {
	return o
}

func (o KafkaClientQuotaEnvironmentPtrOutput) ToKafkaClientQuotaEnvironmentPtrOutputWithContext(ctx context.Context) KafkaClientQuotaEnvironmentPtrOutput {
	return o
}

func (o KafkaClientQuotaEnvironmentPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*KafkaClientQuotaEnvironment] {
	return pulumix.Output[*KafkaClientQuotaEnvironment]{
		OutputState: o.OutputState,
	}
}

func (o KafkaClientQuotaEnvironmentPtrOutput) Elem() KafkaClientQuotaEnvironmentOutput {
	return o.ApplyT(func(v *KafkaClientQuotaEnvironment) KafkaClientQuotaEnvironment {
		if v != nil {
			return *v
		}
		var ret KafkaClientQuotaEnvironment
		return ret
	}).(KafkaClientQuotaEnvironmentOutput)
}

// The ID of the Environment that the corresponding Kafka Cluster belongs to, for example, `env-abc123`.
//
// > **Note:** Each principal assigned to a quota receives the full amount of the quota, meaning the quota is not shared by the principals it is assigned. For example, if a 10 MBps ingress quota is applied to Principals 1 and 2, Principal 1 can produce at most 10 MBps, independently of Principal 2.
//
// > **Note:** Define a throughput maximum, but do not guarantee a throughput floor. Applications are rate-limited through the use of the Kafka throttling mechanism. Kafka asks the client to wait before sending more data and mutes the channel, which appears as latency to the client application.
func (o KafkaClientQuotaEnvironmentPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaClientQuotaEnvironment) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type KafkaClientQuotaKafkaCluster struct {
	// The ID of the Environment that the corresponding Kafka Cluster belongs to, for example, `env-abc123`.
	//
	// > **Note:** Each principal assigned to a quota receives the full amount of the quota, meaning the quota is not shared by the principals it is assigned. For example, if a 10 MBps ingress quota is applied to Principals 1 and 2, Principal 1 can produce at most 10 MBps, independently of Principal 2.
	//
	// > **Note:** Define a throughput maximum, but do not guarantee a throughput floor. Applications are rate-limited through the use of the Kafka throttling mechanism. Kafka asks the client to wait before sending more data and mutes the channel, which appears as latency to the client application.
	Id string `pulumi:"id"`
}

// KafkaClientQuotaKafkaClusterInput is an input type that accepts KafkaClientQuotaKafkaClusterArgs and KafkaClientQuotaKafkaClusterOutput values.
// You can construct a concrete instance of `KafkaClientQuotaKafkaClusterInput` via:
//
//	KafkaClientQuotaKafkaClusterArgs{...}
type KafkaClientQuotaKafkaClusterInput interface {
	pulumi.Input

	ToKafkaClientQuotaKafkaClusterOutput() KafkaClientQuotaKafkaClusterOutput
	ToKafkaClientQuotaKafkaClusterOutputWithContext(context.Context) KafkaClientQuotaKafkaClusterOutput
}

type KafkaClientQuotaKafkaClusterArgs struct {
	// The ID of the Environment that the corresponding Kafka Cluster belongs to, for example, `env-abc123`.
	//
	// > **Note:** Each principal assigned to a quota receives the full amount of the quota, meaning the quota is not shared by the principals it is assigned. For example, if a 10 MBps ingress quota is applied to Principals 1 and 2, Principal 1 can produce at most 10 MBps, independently of Principal 2.
	//
	// > **Note:** Define a throughput maximum, but do not guarantee a throughput floor. Applications are rate-limited through the use of the Kafka throttling mechanism. Kafka asks the client to wait before sending more data and mutes the channel, which appears as latency to the client application.
	Id pulumi.StringInput `pulumi:"id"`
}

func (KafkaClientQuotaKafkaClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClientQuotaKafkaCluster)(nil)).Elem()
}

func (i KafkaClientQuotaKafkaClusterArgs) ToKafkaClientQuotaKafkaClusterOutput() KafkaClientQuotaKafkaClusterOutput {
	return i.ToKafkaClientQuotaKafkaClusterOutputWithContext(context.Background())
}

func (i KafkaClientQuotaKafkaClusterArgs) ToKafkaClientQuotaKafkaClusterOutputWithContext(ctx context.Context) KafkaClientQuotaKafkaClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClientQuotaKafkaClusterOutput)
}

func (i KafkaClientQuotaKafkaClusterArgs) ToOutput(ctx context.Context) pulumix.Output[KafkaClientQuotaKafkaCluster] {
	return pulumix.Output[KafkaClientQuotaKafkaCluster]{
		OutputState: i.ToKafkaClientQuotaKafkaClusterOutputWithContext(ctx).OutputState,
	}
}

func (i KafkaClientQuotaKafkaClusterArgs) ToKafkaClientQuotaKafkaClusterPtrOutput() KafkaClientQuotaKafkaClusterPtrOutput {
	return i.ToKafkaClientQuotaKafkaClusterPtrOutputWithContext(context.Background())
}

func (i KafkaClientQuotaKafkaClusterArgs) ToKafkaClientQuotaKafkaClusterPtrOutputWithContext(ctx context.Context) KafkaClientQuotaKafkaClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClientQuotaKafkaClusterOutput).ToKafkaClientQuotaKafkaClusterPtrOutputWithContext(ctx)
}

// KafkaClientQuotaKafkaClusterPtrInput is an input type that accepts KafkaClientQuotaKafkaClusterArgs, KafkaClientQuotaKafkaClusterPtr and KafkaClientQuotaKafkaClusterPtrOutput values.
// You can construct a concrete instance of `KafkaClientQuotaKafkaClusterPtrInput` via:
//
//	        KafkaClientQuotaKafkaClusterArgs{...}
//
//	or:
//
//	        nil
type KafkaClientQuotaKafkaClusterPtrInput interface {
	pulumi.Input

	ToKafkaClientQuotaKafkaClusterPtrOutput() KafkaClientQuotaKafkaClusterPtrOutput
	ToKafkaClientQuotaKafkaClusterPtrOutputWithContext(context.Context) KafkaClientQuotaKafkaClusterPtrOutput
}

type kafkaClientQuotaKafkaClusterPtrType KafkaClientQuotaKafkaClusterArgs

func KafkaClientQuotaKafkaClusterPtr(v *KafkaClientQuotaKafkaClusterArgs) KafkaClientQuotaKafkaClusterPtrInput {
	return (*kafkaClientQuotaKafkaClusterPtrType)(v)
}

func (*kafkaClientQuotaKafkaClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaClientQuotaKafkaCluster)(nil)).Elem()
}

func (i *kafkaClientQuotaKafkaClusterPtrType) ToKafkaClientQuotaKafkaClusterPtrOutput() KafkaClientQuotaKafkaClusterPtrOutput {
	return i.ToKafkaClientQuotaKafkaClusterPtrOutputWithContext(context.Background())
}

func (i *kafkaClientQuotaKafkaClusterPtrType) ToKafkaClientQuotaKafkaClusterPtrOutputWithContext(ctx context.Context) KafkaClientQuotaKafkaClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClientQuotaKafkaClusterPtrOutput)
}

func (i *kafkaClientQuotaKafkaClusterPtrType) ToOutput(ctx context.Context) pulumix.Output[*KafkaClientQuotaKafkaCluster] {
	return pulumix.Output[*KafkaClientQuotaKafkaCluster]{
		OutputState: i.ToKafkaClientQuotaKafkaClusterPtrOutputWithContext(ctx).OutputState,
	}
}

type KafkaClientQuotaKafkaClusterOutput struct{ *pulumi.OutputState }

func (KafkaClientQuotaKafkaClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClientQuotaKafkaCluster)(nil)).Elem()
}

func (o KafkaClientQuotaKafkaClusterOutput) ToKafkaClientQuotaKafkaClusterOutput() KafkaClientQuotaKafkaClusterOutput {
	return o
}

func (o KafkaClientQuotaKafkaClusterOutput) ToKafkaClientQuotaKafkaClusterOutputWithContext(ctx context.Context) KafkaClientQuotaKafkaClusterOutput {
	return o
}

func (o KafkaClientQuotaKafkaClusterOutput) ToKafkaClientQuotaKafkaClusterPtrOutput() KafkaClientQuotaKafkaClusterPtrOutput {
	return o.ToKafkaClientQuotaKafkaClusterPtrOutputWithContext(context.Background())
}

func (o KafkaClientQuotaKafkaClusterOutput) ToKafkaClientQuotaKafkaClusterPtrOutputWithContext(ctx context.Context) KafkaClientQuotaKafkaClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaClientQuotaKafkaCluster) *KafkaClientQuotaKafkaCluster {
		return &v
	}).(KafkaClientQuotaKafkaClusterPtrOutput)
}

func (o KafkaClientQuotaKafkaClusterOutput) ToOutput(ctx context.Context) pulumix.Output[KafkaClientQuotaKafkaCluster] {
	return pulumix.Output[KafkaClientQuotaKafkaCluster]{
		OutputState: o.OutputState,
	}
}

// The ID of the Environment that the corresponding Kafka Cluster belongs to, for example, `env-abc123`.
//
// > **Note:** Each principal assigned to a quota receives the full amount of the quota, meaning the quota is not shared by the principals it is assigned. For example, if a 10 MBps ingress quota is applied to Principals 1 and 2, Principal 1 can produce at most 10 MBps, independently of Principal 2.
//
// > **Note:** Define a throughput maximum, but do not guarantee a throughput floor. Applications are rate-limited through the use of the Kafka throttling mechanism. Kafka asks the client to wait before sending more data and mutes the channel, which appears as latency to the client application.
func (o KafkaClientQuotaKafkaClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaClientQuotaKafkaCluster) string { return v.Id }).(pulumi.StringOutput)
}

type KafkaClientQuotaKafkaClusterPtrOutput struct{ *pulumi.OutputState }

func (KafkaClientQuotaKafkaClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaClientQuotaKafkaCluster)(nil)).Elem()
}

func (o KafkaClientQuotaKafkaClusterPtrOutput) ToKafkaClientQuotaKafkaClusterPtrOutput() KafkaClientQuotaKafkaClusterPtrOutput {
	return o
}

func (o KafkaClientQuotaKafkaClusterPtrOutput) ToKafkaClientQuotaKafkaClusterPtrOutputWithContext(ctx context.Context) KafkaClientQuotaKafkaClusterPtrOutput {
	return o
}

func (o KafkaClientQuotaKafkaClusterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*KafkaClientQuotaKafkaCluster] {
	return pulumix.Output[*KafkaClientQuotaKafkaCluster]{
		OutputState: o.OutputState,
	}
}

func (o KafkaClientQuotaKafkaClusterPtrOutput) Elem() KafkaClientQuotaKafkaClusterOutput {
	return o.ApplyT(func(v *KafkaClientQuotaKafkaCluster) KafkaClientQuotaKafkaCluster {
		if v != nil {
			return *v
		}
		var ret KafkaClientQuotaKafkaCluster
		return ret
	}).(KafkaClientQuotaKafkaClusterOutput)
}

// The ID of the Environment that the corresponding Kafka Cluster belongs to, for example, `env-abc123`.
//
// > **Note:** Each principal assigned to a quota receives the full amount of the quota, meaning the quota is not shared by the principals it is assigned. For example, if a 10 MBps ingress quota is applied to Principals 1 and 2, Principal 1 can produce at most 10 MBps, independently of Principal 2.
//
// > **Note:** Define a throughput maximum, but do not guarantee a throughput floor. Applications are rate-limited through the use of the Kafka throttling mechanism. Kafka asks the client to wait before sending more data and mutes the channel, which appears as latency to the client application.
func (o KafkaClientQuotaKafkaClusterPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaClientQuotaKafkaCluster) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type KafkaClientQuotaThroughput struct {
	// The egress throughput limit in bytes per second.
	EgressByteRate string `pulumi:"egressByteRate"`
	// The ingress throughput limit in bytes per second.
	IngressByteRate string `pulumi:"ingressByteRate"`
}

// KafkaClientQuotaThroughputInput is an input type that accepts KafkaClientQuotaThroughputArgs and KafkaClientQuotaThroughputOutput values.
// You can construct a concrete instance of `KafkaClientQuotaThroughputInput` via:
//
//	KafkaClientQuotaThroughputArgs{...}
type KafkaClientQuotaThroughputInput interface {
	pulumi.Input

	ToKafkaClientQuotaThroughputOutput() KafkaClientQuotaThroughputOutput
	ToKafkaClientQuotaThroughputOutputWithContext(context.Context) KafkaClientQuotaThroughputOutput
}

type KafkaClientQuotaThroughputArgs struct {
	// The egress throughput limit in bytes per second.
	EgressByteRate pulumi.StringInput `pulumi:"egressByteRate"`
	// The ingress throughput limit in bytes per second.
	IngressByteRate pulumi.StringInput `pulumi:"ingressByteRate"`
}

func (KafkaClientQuotaThroughputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClientQuotaThroughput)(nil)).Elem()
}

func (i KafkaClientQuotaThroughputArgs) ToKafkaClientQuotaThroughputOutput() KafkaClientQuotaThroughputOutput {
	return i.ToKafkaClientQuotaThroughputOutputWithContext(context.Background())
}

func (i KafkaClientQuotaThroughputArgs) ToKafkaClientQuotaThroughputOutputWithContext(ctx context.Context) KafkaClientQuotaThroughputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClientQuotaThroughputOutput)
}

func (i KafkaClientQuotaThroughputArgs) ToOutput(ctx context.Context) pulumix.Output[KafkaClientQuotaThroughput] {
	return pulumix.Output[KafkaClientQuotaThroughput]{
		OutputState: i.ToKafkaClientQuotaThroughputOutputWithContext(ctx).OutputState,
	}
}

func (i KafkaClientQuotaThroughputArgs) ToKafkaClientQuotaThroughputPtrOutput() KafkaClientQuotaThroughputPtrOutput {
	return i.ToKafkaClientQuotaThroughputPtrOutputWithContext(context.Background())
}

func (i KafkaClientQuotaThroughputArgs) ToKafkaClientQuotaThroughputPtrOutputWithContext(ctx context.Context) KafkaClientQuotaThroughputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClientQuotaThroughputOutput).ToKafkaClientQuotaThroughputPtrOutputWithContext(ctx)
}

// KafkaClientQuotaThroughputPtrInput is an input type that accepts KafkaClientQuotaThroughputArgs, KafkaClientQuotaThroughputPtr and KafkaClientQuotaThroughputPtrOutput values.
// You can construct a concrete instance of `KafkaClientQuotaThroughputPtrInput` via:
//
//	        KafkaClientQuotaThroughputArgs{...}
//
//	or:
//
//	        nil
type KafkaClientQuotaThroughputPtrInput interface {
	pulumi.Input

	ToKafkaClientQuotaThroughputPtrOutput() KafkaClientQuotaThroughputPtrOutput
	ToKafkaClientQuotaThroughputPtrOutputWithContext(context.Context) KafkaClientQuotaThroughputPtrOutput
}

type kafkaClientQuotaThroughputPtrType KafkaClientQuotaThroughputArgs

func KafkaClientQuotaThroughputPtr(v *KafkaClientQuotaThroughputArgs) KafkaClientQuotaThroughputPtrInput {
	return (*kafkaClientQuotaThroughputPtrType)(v)
}

func (*kafkaClientQuotaThroughputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaClientQuotaThroughput)(nil)).Elem()
}

func (i *kafkaClientQuotaThroughputPtrType) ToKafkaClientQuotaThroughputPtrOutput() KafkaClientQuotaThroughputPtrOutput {
	return i.ToKafkaClientQuotaThroughputPtrOutputWithContext(context.Background())
}

func (i *kafkaClientQuotaThroughputPtrType) ToKafkaClientQuotaThroughputPtrOutputWithContext(ctx context.Context) KafkaClientQuotaThroughputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClientQuotaThroughputPtrOutput)
}

func (i *kafkaClientQuotaThroughputPtrType) ToOutput(ctx context.Context) pulumix.Output[*KafkaClientQuotaThroughput] {
	return pulumix.Output[*KafkaClientQuotaThroughput]{
		OutputState: i.ToKafkaClientQuotaThroughputPtrOutputWithContext(ctx).OutputState,
	}
}

type KafkaClientQuotaThroughputOutput struct{ *pulumi.OutputState }

func (KafkaClientQuotaThroughputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClientQuotaThroughput)(nil)).Elem()
}

func (o KafkaClientQuotaThroughputOutput) ToKafkaClientQuotaThroughputOutput() KafkaClientQuotaThroughputOutput {
	return o
}

func (o KafkaClientQuotaThroughputOutput) ToKafkaClientQuotaThroughputOutputWithContext(ctx context.Context) KafkaClientQuotaThroughputOutput {
	return o
}

func (o KafkaClientQuotaThroughputOutput) ToKafkaClientQuotaThroughputPtrOutput() KafkaClientQuotaThroughputPtrOutput {
	return o.ToKafkaClientQuotaThroughputPtrOutputWithContext(context.Background())
}

func (o KafkaClientQuotaThroughputOutput) ToKafkaClientQuotaThroughputPtrOutputWithContext(ctx context.Context) KafkaClientQuotaThroughputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaClientQuotaThroughput) *KafkaClientQuotaThroughput {
		return &v
	}).(KafkaClientQuotaThroughputPtrOutput)
}

func (o KafkaClientQuotaThroughputOutput) ToOutput(ctx context.Context) pulumix.Output[KafkaClientQuotaThroughput] {
	return pulumix.Output[KafkaClientQuotaThroughput]{
		OutputState: o.OutputState,
	}
}

// The egress throughput limit in bytes per second.
func (o KafkaClientQuotaThroughputOutput) EgressByteRate() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaClientQuotaThroughput) string { return v.EgressByteRate }).(pulumi.StringOutput)
}

// The ingress throughput limit in bytes per second.
func (o KafkaClientQuotaThroughputOutput) IngressByteRate() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaClientQuotaThroughput) string { return v.IngressByteRate }).(pulumi.StringOutput)
}

type KafkaClientQuotaThroughputPtrOutput struct{ *pulumi.OutputState }

func (KafkaClientQuotaThroughputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaClientQuotaThroughput)(nil)).Elem()
}

func (o KafkaClientQuotaThroughputPtrOutput) ToKafkaClientQuotaThroughputPtrOutput() KafkaClientQuotaThroughputPtrOutput {
	return o
}

func (o KafkaClientQuotaThroughputPtrOutput) ToKafkaClientQuotaThroughputPtrOutputWithContext(ctx context.Context) KafkaClientQuotaThroughputPtrOutput {
	return o
}

func (o KafkaClientQuotaThroughputPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*KafkaClientQuotaThroughput] {
	return pulumix.Output[*KafkaClientQuotaThroughput]{
		OutputState: o.OutputState,
	}
}

func (o KafkaClientQuotaThroughputPtrOutput) Elem() KafkaClientQuotaThroughputOutput {
	return o.ApplyT(func(v *KafkaClientQuotaThroughput) KafkaClientQuotaThroughput {
		if v != nil {
			return *v
		}
		var ret KafkaClientQuotaThroughput
		return ret
	}).(KafkaClientQuotaThroughputOutput)
}

// The egress throughput limit in bytes per second.
func (o KafkaClientQuotaThroughputPtrOutput) EgressByteRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaClientQuotaThroughput) *string {
		if v == nil {
			return nil
		}
		return &v.EgressByteRate
	}).(pulumi.StringPtrOutput)
}

// The ingress throughput limit in bytes per second.
func (o KafkaClientQuotaThroughputPtrOutput) IngressByteRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaClientQuotaThroughput) *string {
		if v == nil {
			return nil
		}
		return &v.IngressByteRate
	}).(pulumi.StringPtrOutput)
}

type KafkaClusterBasic struct {
}

// KafkaClusterBasicInput is an input type that accepts KafkaClusterBasicArgs and KafkaClusterBasicOutput values.
// You can construct a concrete instance of `KafkaClusterBasicInput` via:
//
//	KafkaClusterBasicArgs{...}
type KafkaClusterBasicInput interface {
	pulumi.Input

	ToKafkaClusterBasicOutput() KafkaClusterBasicOutput
	ToKafkaClusterBasicOutputWithContext(context.Context) KafkaClusterBasicOutput
}

type KafkaClusterBasicArgs struct {
}

func (KafkaClusterBasicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClusterBasic)(nil)).Elem()
}

func (i KafkaClusterBasicArgs) ToKafkaClusterBasicOutput() KafkaClusterBasicOutput {
	return i.ToKafkaClusterBasicOutputWithContext(context.Background())
}

func (i KafkaClusterBasicArgs) ToKafkaClusterBasicOutputWithContext(ctx context.Context) KafkaClusterBasicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterBasicOutput)
}

func (i KafkaClusterBasicArgs) ToOutput(ctx context.Context) pulumix.Output[KafkaClusterBasic] {
	return pulumix.Output[KafkaClusterBasic]{
		OutputState: i.ToKafkaClusterBasicOutputWithContext(ctx).OutputState,
	}
}

func (i KafkaClusterBasicArgs) ToKafkaClusterBasicPtrOutput() KafkaClusterBasicPtrOutput {
	return i.ToKafkaClusterBasicPtrOutputWithContext(context.Background())
}

func (i KafkaClusterBasicArgs) ToKafkaClusterBasicPtrOutputWithContext(ctx context.Context) KafkaClusterBasicPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterBasicOutput).ToKafkaClusterBasicPtrOutputWithContext(ctx)
}

// KafkaClusterBasicPtrInput is an input type that accepts KafkaClusterBasicArgs, KafkaClusterBasicPtr and KafkaClusterBasicPtrOutput values.
// You can construct a concrete instance of `KafkaClusterBasicPtrInput` via:
//
//	        KafkaClusterBasicArgs{...}
//
//	or:
//
//	        nil
type KafkaClusterBasicPtrInput interface {
	pulumi.Input

	ToKafkaClusterBasicPtrOutput() KafkaClusterBasicPtrOutput
	ToKafkaClusterBasicPtrOutputWithContext(context.Context) KafkaClusterBasicPtrOutput
}

type kafkaClusterBasicPtrType KafkaClusterBasicArgs

func KafkaClusterBasicPtr(v *KafkaClusterBasicArgs) KafkaClusterBasicPtrInput {
	return (*kafkaClusterBasicPtrType)(v)
}

func (*kafkaClusterBasicPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaClusterBasic)(nil)).Elem()
}

func (i *kafkaClusterBasicPtrType) ToKafkaClusterBasicPtrOutput() KafkaClusterBasicPtrOutput {
	return i.ToKafkaClusterBasicPtrOutputWithContext(context.Background())
}

func (i *kafkaClusterBasicPtrType) ToKafkaClusterBasicPtrOutputWithContext(ctx context.Context) KafkaClusterBasicPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterBasicPtrOutput)
}

func (i *kafkaClusterBasicPtrType) ToOutput(ctx context.Context) pulumix.Output[*KafkaClusterBasic] {
	return pulumix.Output[*KafkaClusterBasic]{
		OutputState: i.ToKafkaClusterBasicPtrOutputWithContext(ctx).OutputState,
	}
}

type KafkaClusterBasicOutput struct{ *pulumi.OutputState }

func (KafkaClusterBasicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClusterBasic)(nil)).Elem()
}

func (o KafkaClusterBasicOutput) ToKafkaClusterBasicOutput() KafkaClusterBasicOutput {
	return o
}

func (o KafkaClusterBasicOutput) ToKafkaClusterBasicOutputWithContext(ctx context.Context) KafkaClusterBasicOutput {
	return o
}

func (o KafkaClusterBasicOutput) ToKafkaClusterBasicPtrOutput() KafkaClusterBasicPtrOutput {
	return o.ToKafkaClusterBasicPtrOutputWithContext(context.Background())
}

func (o KafkaClusterBasicOutput) ToKafkaClusterBasicPtrOutputWithContext(ctx context.Context) KafkaClusterBasicPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaClusterBasic) *KafkaClusterBasic {
		return &v
	}).(KafkaClusterBasicPtrOutput)
}

func (o KafkaClusterBasicOutput) ToOutput(ctx context.Context) pulumix.Output[KafkaClusterBasic] {
	return pulumix.Output[KafkaClusterBasic]{
		OutputState: o.OutputState,
	}
}

type KafkaClusterBasicPtrOutput struct{ *pulumi.OutputState }

func (KafkaClusterBasicPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaClusterBasic)(nil)).Elem()
}

func (o KafkaClusterBasicPtrOutput) ToKafkaClusterBasicPtrOutput() KafkaClusterBasicPtrOutput {
	return o
}

func (o KafkaClusterBasicPtrOutput) ToKafkaClusterBasicPtrOutputWithContext(ctx context.Context) KafkaClusterBasicPtrOutput {
	return o
}

func (o KafkaClusterBasicPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*KafkaClusterBasic] {
	return pulumix.Output[*KafkaClusterBasic]{
		OutputState: o.OutputState,
	}
}

func (o KafkaClusterBasicPtrOutput) Elem() KafkaClusterBasicOutput {
	return o.ApplyT(func(v *KafkaClusterBasic) KafkaClusterBasic {
		if v != nil {
			return *v
		}
		var ret KafkaClusterBasic
		return ret
	}).(KafkaClusterBasicOutput)
}

type KafkaClusterByokKey struct {
	// The ID of the Confluent key that is used to encrypt the data in the Kafka cluster, for example, `cck-lye5m`.
	Id string `pulumi:"id"`
}

// KafkaClusterByokKeyInput is an input type that accepts KafkaClusterByokKeyArgs and KafkaClusterByokKeyOutput values.
// You can construct a concrete instance of `KafkaClusterByokKeyInput` via:
//
//	KafkaClusterByokKeyArgs{...}
type KafkaClusterByokKeyInput interface {
	pulumi.Input

	ToKafkaClusterByokKeyOutput() KafkaClusterByokKeyOutput
	ToKafkaClusterByokKeyOutputWithContext(context.Context) KafkaClusterByokKeyOutput
}

type KafkaClusterByokKeyArgs struct {
	// The ID of the Confluent key that is used to encrypt the data in the Kafka cluster, for example, `cck-lye5m`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (KafkaClusterByokKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClusterByokKey)(nil)).Elem()
}

func (i KafkaClusterByokKeyArgs) ToKafkaClusterByokKeyOutput() KafkaClusterByokKeyOutput {
	return i.ToKafkaClusterByokKeyOutputWithContext(context.Background())
}

func (i KafkaClusterByokKeyArgs) ToKafkaClusterByokKeyOutputWithContext(ctx context.Context) KafkaClusterByokKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterByokKeyOutput)
}

func (i KafkaClusterByokKeyArgs) ToOutput(ctx context.Context) pulumix.Output[KafkaClusterByokKey] {
	return pulumix.Output[KafkaClusterByokKey]{
		OutputState: i.ToKafkaClusterByokKeyOutputWithContext(ctx).OutputState,
	}
}

func (i KafkaClusterByokKeyArgs) ToKafkaClusterByokKeyPtrOutput() KafkaClusterByokKeyPtrOutput {
	return i.ToKafkaClusterByokKeyPtrOutputWithContext(context.Background())
}

func (i KafkaClusterByokKeyArgs) ToKafkaClusterByokKeyPtrOutputWithContext(ctx context.Context) KafkaClusterByokKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterByokKeyOutput).ToKafkaClusterByokKeyPtrOutputWithContext(ctx)
}

// KafkaClusterByokKeyPtrInput is an input type that accepts KafkaClusterByokKeyArgs, KafkaClusterByokKeyPtr and KafkaClusterByokKeyPtrOutput values.
// You can construct a concrete instance of `KafkaClusterByokKeyPtrInput` via:
//
//	        KafkaClusterByokKeyArgs{...}
//
//	or:
//
//	        nil
type KafkaClusterByokKeyPtrInput interface {
	pulumi.Input

	ToKafkaClusterByokKeyPtrOutput() KafkaClusterByokKeyPtrOutput
	ToKafkaClusterByokKeyPtrOutputWithContext(context.Context) KafkaClusterByokKeyPtrOutput
}

type kafkaClusterByokKeyPtrType KafkaClusterByokKeyArgs

func KafkaClusterByokKeyPtr(v *KafkaClusterByokKeyArgs) KafkaClusterByokKeyPtrInput {
	return (*kafkaClusterByokKeyPtrType)(v)
}

func (*kafkaClusterByokKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaClusterByokKey)(nil)).Elem()
}

func (i *kafkaClusterByokKeyPtrType) ToKafkaClusterByokKeyPtrOutput() KafkaClusterByokKeyPtrOutput {
	return i.ToKafkaClusterByokKeyPtrOutputWithContext(context.Background())
}

func (i *kafkaClusterByokKeyPtrType) ToKafkaClusterByokKeyPtrOutputWithContext(ctx context.Context) KafkaClusterByokKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterByokKeyPtrOutput)
}

func (i *kafkaClusterByokKeyPtrType) ToOutput(ctx context.Context) pulumix.Output[*KafkaClusterByokKey] {
	return pulumix.Output[*KafkaClusterByokKey]{
		OutputState: i.ToKafkaClusterByokKeyPtrOutputWithContext(ctx).OutputState,
	}
}

type KafkaClusterByokKeyOutput struct{ *pulumi.OutputState }

func (KafkaClusterByokKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClusterByokKey)(nil)).Elem()
}

func (o KafkaClusterByokKeyOutput) ToKafkaClusterByokKeyOutput() KafkaClusterByokKeyOutput {
	return o
}

func (o KafkaClusterByokKeyOutput) ToKafkaClusterByokKeyOutputWithContext(ctx context.Context) KafkaClusterByokKeyOutput {
	return o
}

func (o KafkaClusterByokKeyOutput) ToKafkaClusterByokKeyPtrOutput() KafkaClusterByokKeyPtrOutput {
	return o.ToKafkaClusterByokKeyPtrOutputWithContext(context.Background())
}

func (o KafkaClusterByokKeyOutput) ToKafkaClusterByokKeyPtrOutputWithContext(ctx context.Context) KafkaClusterByokKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaClusterByokKey) *KafkaClusterByokKey {
		return &v
	}).(KafkaClusterByokKeyPtrOutput)
}

func (o KafkaClusterByokKeyOutput) ToOutput(ctx context.Context) pulumix.Output[KafkaClusterByokKey] {
	return pulumix.Output[KafkaClusterByokKey]{
		OutputState: o.OutputState,
	}
}

// The ID of the Confluent key that is used to encrypt the data in the Kafka cluster, for example, `cck-lye5m`.
func (o KafkaClusterByokKeyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaClusterByokKey) string { return v.Id }).(pulumi.StringOutput)
}

type KafkaClusterByokKeyPtrOutput struct{ *pulumi.OutputState }

func (KafkaClusterByokKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaClusterByokKey)(nil)).Elem()
}

func (o KafkaClusterByokKeyPtrOutput) ToKafkaClusterByokKeyPtrOutput() KafkaClusterByokKeyPtrOutput {
	return o
}

func (o KafkaClusterByokKeyPtrOutput) ToKafkaClusterByokKeyPtrOutputWithContext(ctx context.Context) KafkaClusterByokKeyPtrOutput {
	return o
}

func (o KafkaClusterByokKeyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*KafkaClusterByokKey] {
	return pulumix.Output[*KafkaClusterByokKey]{
		OutputState: o.OutputState,
	}
}

func (o KafkaClusterByokKeyPtrOutput) Elem() KafkaClusterByokKeyOutput {
	return o.ApplyT(func(v *KafkaClusterByokKey) KafkaClusterByokKey {
		if v != nil {
			return *v
		}
		var ret KafkaClusterByokKey
		return ret
	}).(KafkaClusterByokKeyOutput)
}

// The ID of the Confluent key that is used to encrypt the data in the Kafka cluster, for example, `cck-lye5m`.
func (o KafkaClusterByokKeyPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaClusterByokKey) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type KafkaClusterConfigCredentials struct {
	// The Kafka API Key.
	Key string `pulumi:"key"`
	// The Kafka API Secret.
	//
	// > **Note:** A Kafka API key consists of a key and a secret. Kafka API keys are required to interact with Kafka clusters in Confluent Cloud. Each Kafka API key is valid for one specific Kafka cluster.
	//
	// > **Note:** Use Option #2 to simplify the key rotation process. When using Option #1, to rotate a Kafka API key, create a new Kafka API key, update the `credentials` block in all configuration files to use the new Kafka API key, run `pulumi up -target="confluent_kafka_cluster_config.orders"`, and remove the old Kafka API key. Alternatively, in case the old Kafka API Key was deleted already, you might need to run `pulumi preview -refresh=false -target="confluent_kafka_cluster_config.orders" -out=rotate-kafka-api-key` and `pulumi up rotate-kafka-api-key` instead.
	Secret string `pulumi:"secret"`
}

// KafkaClusterConfigCredentialsInput is an input type that accepts KafkaClusterConfigCredentialsArgs and KafkaClusterConfigCredentialsOutput values.
// You can construct a concrete instance of `KafkaClusterConfigCredentialsInput` via:
//
//	KafkaClusterConfigCredentialsArgs{...}
type KafkaClusterConfigCredentialsInput interface {
	pulumi.Input

	ToKafkaClusterConfigCredentialsOutput() KafkaClusterConfigCredentialsOutput
	ToKafkaClusterConfigCredentialsOutputWithContext(context.Context) KafkaClusterConfigCredentialsOutput
}

type KafkaClusterConfigCredentialsArgs struct {
	// The Kafka API Key.
	Key pulumi.StringInput `pulumi:"key"`
	// The Kafka API Secret.
	//
	// > **Note:** A Kafka API key consists of a key and a secret. Kafka API keys are required to interact with Kafka clusters in Confluent Cloud. Each Kafka API key is valid for one specific Kafka cluster.
	//
	// > **Note:** Use Option #2 to simplify the key rotation process. When using Option #1, to rotate a Kafka API key, create a new Kafka API key, update the `credentials` block in all configuration files to use the new Kafka API key, run `pulumi up -target="confluent_kafka_cluster_config.orders"`, and remove the old Kafka API key. Alternatively, in case the old Kafka API Key was deleted already, you might need to run `pulumi preview -refresh=false -target="confluent_kafka_cluster_config.orders" -out=rotate-kafka-api-key` and `pulumi up rotate-kafka-api-key` instead.
	Secret pulumi.StringInput `pulumi:"secret"`
}

func (KafkaClusterConfigCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClusterConfigCredentials)(nil)).Elem()
}

func (i KafkaClusterConfigCredentialsArgs) ToKafkaClusterConfigCredentialsOutput() KafkaClusterConfigCredentialsOutput {
	return i.ToKafkaClusterConfigCredentialsOutputWithContext(context.Background())
}

func (i KafkaClusterConfigCredentialsArgs) ToKafkaClusterConfigCredentialsOutputWithContext(ctx context.Context) KafkaClusterConfigCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterConfigCredentialsOutput)
}

func (i KafkaClusterConfigCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[KafkaClusterConfigCredentials] {
	return pulumix.Output[KafkaClusterConfigCredentials]{
		OutputState: i.ToKafkaClusterConfigCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i KafkaClusterConfigCredentialsArgs) ToKafkaClusterConfigCredentialsPtrOutput() KafkaClusterConfigCredentialsPtrOutput {
	return i.ToKafkaClusterConfigCredentialsPtrOutputWithContext(context.Background())
}

func (i KafkaClusterConfigCredentialsArgs) ToKafkaClusterConfigCredentialsPtrOutputWithContext(ctx context.Context) KafkaClusterConfigCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterConfigCredentialsOutput).ToKafkaClusterConfigCredentialsPtrOutputWithContext(ctx)
}

// KafkaClusterConfigCredentialsPtrInput is an input type that accepts KafkaClusterConfigCredentialsArgs, KafkaClusterConfigCredentialsPtr and KafkaClusterConfigCredentialsPtrOutput values.
// You can construct a concrete instance of `KafkaClusterConfigCredentialsPtrInput` via:
//
//	        KafkaClusterConfigCredentialsArgs{...}
//
//	or:
//
//	        nil
type KafkaClusterConfigCredentialsPtrInput interface {
	pulumi.Input

	ToKafkaClusterConfigCredentialsPtrOutput() KafkaClusterConfigCredentialsPtrOutput
	ToKafkaClusterConfigCredentialsPtrOutputWithContext(context.Context) KafkaClusterConfigCredentialsPtrOutput
}

type kafkaClusterConfigCredentialsPtrType KafkaClusterConfigCredentialsArgs

func KafkaClusterConfigCredentialsPtr(v *KafkaClusterConfigCredentialsArgs) KafkaClusterConfigCredentialsPtrInput {
	return (*kafkaClusterConfigCredentialsPtrType)(v)
}

func (*kafkaClusterConfigCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaClusterConfigCredentials)(nil)).Elem()
}

func (i *kafkaClusterConfigCredentialsPtrType) ToKafkaClusterConfigCredentialsPtrOutput() KafkaClusterConfigCredentialsPtrOutput {
	return i.ToKafkaClusterConfigCredentialsPtrOutputWithContext(context.Background())
}

func (i *kafkaClusterConfigCredentialsPtrType) ToKafkaClusterConfigCredentialsPtrOutputWithContext(ctx context.Context) KafkaClusterConfigCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterConfigCredentialsPtrOutput)
}

func (i *kafkaClusterConfigCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*KafkaClusterConfigCredentials] {
	return pulumix.Output[*KafkaClusterConfigCredentials]{
		OutputState: i.ToKafkaClusterConfigCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

type KafkaClusterConfigCredentialsOutput struct{ *pulumi.OutputState }

func (KafkaClusterConfigCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClusterConfigCredentials)(nil)).Elem()
}

func (o KafkaClusterConfigCredentialsOutput) ToKafkaClusterConfigCredentialsOutput() KafkaClusterConfigCredentialsOutput {
	return o
}

func (o KafkaClusterConfigCredentialsOutput) ToKafkaClusterConfigCredentialsOutputWithContext(ctx context.Context) KafkaClusterConfigCredentialsOutput {
	return o
}

func (o KafkaClusterConfigCredentialsOutput) ToKafkaClusterConfigCredentialsPtrOutput() KafkaClusterConfigCredentialsPtrOutput {
	return o.ToKafkaClusterConfigCredentialsPtrOutputWithContext(context.Background())
}

func (o KafkaClusterConfigCredentialsOutput) ToKafkaClusterConfigCredentialsPtrOutputWithContext(ctx context.Context) KafkaClusterConfigCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaClusterConfigCredentials) *KafkaClusterConfigCredentials {
		return &v
	}).(KafkaClusterConfigCredentialsPtrOutput)
}

func (o KafkaClusterConfigCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[KafkaClusterConfigCredentials] {
	return pulumix.Output[KafkaClusterConfigCredentials]{
		OutputState: o.OutputState,
	}
}

// The Kafka API Key.
func (o KafkaClusterConfigCredentialsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaClusterConfigCredentials) string { return v.Key }).(pulumi.StringOutput)
}

// The Kafka API Secret.
//
// > **Note:** A Kafka API key consists of a key and a secret. Kafka API keys are required to interact with Kafka clusters in Confluent Cloud. Each Kafka API key is valid for one specific Kafka cluster.
//
// > **Note:** Use Option #2 to simplify the key rotation process. When using Option #1, to rotate a Kafka API key, create a new Kafka API key, update the `credentials` block in all configuration files to use the new Kafka API key, run `pulumi up -target="confluent_kafka_cluster_config.orders"`, and remove the old Kafka API key. Alternatively, in case the old Kafka API Key was deleted already, you might need to run `pulumi preview -refresh=false -target="confluent_kafka_cluster_config.orders" -out=rotate-kafka-api-key` and `pulumi up rotate-kafka-api-key` instead.
func (o KafkaClusterConfigCredentialsOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaClusterConfigCredentials) string { return v.Secret }).(pulumi.StringOutput)
}

type KafkaClusterConfigCredentialsPtrOutput struct{ *pulumi.OutputState }

func (KafkaClusterConfigCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaClusterConfigCredentials)(nil)).Elem()
}

func (o KafkaClusterConfigCredentialsPtrOutput) ToKafkaClusterConfigCredentialsPtrOutput() KafkaClusterConfigCredentialsPtrOutput {
	return o
}

func (o KafkaClusterConfigCredentialsPtrOutput) ToKafkaClusterConfigCredentialsPtrOutputWithContext(ctx context.Context) KafkaClusterConfigCredentialsPtrOutput {
	return o
}

func (o KafkaClusterConfigCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*KafkaClusterConfigCredentials] {
	return pulumix.Output[*KafkaClusterConfigCredentials]{
		OutputState: o.OutputState,
	}
}

func (o KafkaClusterConfigCredentialsPtrOutput) Elem() KafkaClusterConfigCredentialsOutput {
	return o.ApplyT(func(v *KafkaClusterConfigCredentials) KafkaClusterConfigCredentials {
		if v != nil {
			return *v
		}
		var ret KafkaClusterConfigCredentials
		return ret
	}).(KafkaClusterConfigCredentialsOutput)
}

// The Kafka API Key.
func (o KafkaClusterConfigCredentialsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaClusterConfigCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// The Kafka API Secret.
//
// > **Note:** A Kafka API key consists of a key and a secret. Kafka API keys are required to interact with Kafka clusters in Confluent Cloud. Each Kafka API key is valid for one specific Kafka cluster.
//
// > **Note:** Use Option #2 to simplify the key rotation process. When using Option #1, to rotate a Kafka API key, create a new Kafka API key, update the `credentials` block in all configuration files to use the new Kafka API key, run `pulumi up -target="confluent_kafka_cluster_config.orders"`, and remove the old Kafka API key. Alternatively, in case the old Kafka API Key was deleted already, you might need to run `pulumi preview -refresh=false -target="confluent_kafka_cluster_config.orders" -out=rotate-kafka-api-key` and `pulumi up rotate-kafka-api-key` instead.
func (o KafkaClusterConfigCredentialsPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaClusterConfigCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Secret
	}).(pulumi.StringPtrOutput)
}

type KafkaClusterConfigKafkaCluster struct {
	// The ID of the Dedicated Kafka cluster, for example, `lkc-abc123`.
	Id string `pulumi:"id"`
}

// KafkaClusterConfigKafkaClusterInput is an input type that accepts KafkaClusterConfigKafkaClusterArgs and KafkaClusterConfigKafkaClusterOutput values.
// You can construct a concrete instance of `KafkaClusterConfigKafkaClusterInput` via:
//
//	KafkaClusterConfigKafkaClusterArgs{...}
type KafkaClusterConfigKafkaClusterInput interface {
	pulumi.Input

	ToKafkaClusterConfigKafkaClusterOutput() KafkaClusterConfigKafkaClusterOutput
	ToKafkaClusterConfigKafkaClusterOutputWithContext(context.Context) KafkaClusterConfigKafkaClusterOutput
}

type KafkaClusterConfigKafkaClusterArgs struct {
	// The ID of the Dedicated Kafka cluster, for example, `lkc-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (KafkaClusterConfigKafkaClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClusterConfigKafkaCluster)(nil)).Elem()
}

func (i KafkaClusterConfigKafkaClusterArgs) ToKafkaClusterConfigKafkaClusterOutput() KafkaClusterConfigKafkaClusterOutput {
	return i.ToKafkaClusterConfigKafkaClusterOutputWithContext(context.Background())
}

func (i KafkaClusterConfigKafkaClusterArgs) ToKafkaClusterConfigKafkaClusterOutputWithContext(ctx context.Context) KafkaClusterConfigKafkaClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterConfigKafkaClusterOutput)
}

func (i KafkaClusterConfigKafkaClusterArgs) ToOutput(ctx context.Context) pulumix.Output[KafkaClusterConfigKafkaCluster] {
	return pulumix.Output[KafkaClusterConfigKafkaCluster]{
		OutputState: i.ToKafkaClusterConfigKafkaClusterOutputWithContext(ctx).OutputState,
	}
}

func (i KafkaClusterConfigKafkaClusterArgs) ToKafkaClusterConfigKafkaClusterPtrOutput() KafkaClusterConfigKafkaClusterPtrOutput {
	return i.ToKafkaClusterConfigKafkaClusterPtrOutputWithContext(context.Background())
}

func (i KafkaClusterConfigKafkaClusterArgs) ToKafkaClusterConfigKafkaClusterPtrOutputWithContext(ctx context.Context) KafkaClusterConfigKafkaClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterConfigKafkaClusterOutput).ToKafkaClusterConfigKafkaClusterPtrOutputWithContext(ctx)
}

// KafkaClusterConfigKafkaClusterPtrInput is an input type that accepts KafkaClusterConfigKafkaClusterArgs, KafkaClusterConfigKafkaClusterPtr and KafkaClusterConfigKafkaClusterPtrOutput values.
// You can construct a concrete instance of `KafkaClusterConfigKafkaClusterPtrInput` via:
//
//	        KafkaClusterConfigKafkaClusterArgs{...}
//
//	or:
//
//	        nil
type KafkaClusterConfigKafkaClusterPtrInput interface {
	pulumi.Input

	ToKafkaClusterConfigKafkaClusterPtrOutput() KafkaClusterConfigKafkaClusterPtrOutput
	ToKafkaClusterConfigKafkaClusterPtrOutputWithContext(context.Context) KafkaClusterConfigKafkaClusterPtrOutput
}

type kafkaClusterConfigKafkaClusterPtrType KafkaClusterConfigKafkaClusterArgs

func KafkaClusterConfigKafkaClusterPtr(v *KafkaClusterConfigKafkaClusterArgs) KafkaClusterConfigKafkaClusterPtrInput {
	return (*kafkaClusterConfigKafkaClusterPtrType)(v)
}

func (*kafkaClusterConfigKafkaClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaClusterConfigKafkaCluster)(nil)).Elem()
}

func (i *kafkaClusterConfigKafkaClusterPtrType) ToKafkaClusterConfigKafkaClusterPtrOutput() KafkaClusterConfigKafkaClusterPtrOutput {
	return i.ToKafkaClusterConfigKafkaClusterPtrOutputWithContext(context.Background())
}

func (i *kafkaClusterConfigKafkaClusterPtrType) ToKafkaClusterConfigKafkaClusterPtrOutputWithContext(ctx context.Context) KafkaClusterConfigKafkaClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterConfigKafkaClusterPtrOutput)
}

func (i *kafkaClusterConfigKafkaClusterPtrType) ToOutput(ctx context.Context) pulumix.Output[*KafkaClusterConfigKafkaCluster] {
	return pulumix.Output[*KafkaClusterConfigKafkaCluster]{
		OutputState: i.ToKafkaClusterConfigKafkaClusterPtrOutputWithContext(ctx).OutputState,
	}
}

type KafkaClusterConfigKafkaClusterOutput struct{ *pulumi.OutputState }

func (KafkaClusterConfigKafkaClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClusterConfigKafkaCluster)(nil)).Elem()
}

func (o KafkaClusterConfigKafkaClusterOutput) ToKafkaClusterConfigKafkaClusterOutput() KafkaClusterConfigKafkaClusterOutput {
	return o
}

func (o KafkaClusterConfigKafkaClusterOutput) ToKafkaClusterConfigKafkaClusterOutputWithContext(ctx context.Context) KafkaClusterConfigKafkaClusterOutput {
	return o
}

func (o KafkaClusterConfigKafkaClusterOutput) ToKafkaClusterConfigKafkaClusterPtrOutput() KafkaClusterConfigKafkaClusterPtrOutput {
	return o.ToKafkaClusterConfigKafkaClusterPtrOutputWithContext(context.Background())
}

func (o KafkaClusterConfigKafkaClusterOutput) ToKafkaClusterConfigKafkaClusterPtrOutputWithContext(ctx context.Context) KafkaClusterConfigKafkaClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaClusterConfigKafkaCluster) *KafkaClusterConfigKafkaCluster {
		return &v
	}).(KafkaClusterConfigKafkaClusterPtrOutput)
}

func (o KafkaClusterConfigKafkaClusterOutput) ToOutput(ctx context.Context) pulumix.Output[KafkaClusterConfigKafkaCluster] {
	return pulumix.Output[KafkaClusterConfigKafkaCluster]{
		OutputState: o.OutputState,
	}
}

// The ID of the Dedicated Kafka cluster, for example, `lkc-abc123`.
func (o KafkaClusterConfigKafkaClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaClusterConfigKafkaCluster) string { return v.Id }).(pulumi.StringOutput)
}

type KafkaClusterConfigKafkaClusterPtrOutput struct{ *pulumi.OutputState }

func (KafkaClusterConfigKafkaClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaClusterConfigKafkaCluster)(nil)).Elem()
}

func (o KafkaClusterConfigKafkaClusterPtrOutput) ToKafkaClusterConfigKafkaClusterPtrOutput() KafkaClusterConfigKafkaClusterPtrOutput {
	return o
}

func (o KafkaClusterConfigKafkaClusterPtrOutput) ToKafkaClusterConfigKafkaClusterPtrOutputWithContext(ctx context.Context) KafkaClusterConfigKafkaClusterPtrOutput {
	return o
}

func (o KafkaClusterConfigKafkaClusterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*KafkaClusterConfigKafkaCluster] {
	return pulumix.Output[*KafkaClusterConfigKafkaCluster]{
		OutputState: o.OutputState,
	}
}

func (o KafkaClusterConfigKafkaClusterPtrOutput) Elem() KafkaClusterConfigKafkaClusterOutput {
	return o.ApplyT(func(v *KafkaClusterConfigKafkaCluster) KafkaClusterConfigKafkaCluster {
		if v != nil {
			return *v
		}
		var ret KafkaClusterConfigKafkaCluster
		return ret
	}).(KafkaClusterConfigKafkaClusterOutput)
}

// The ID of the Dedicated Kafka cluster, for example, `lkc-abc123`.
func (o KafkaClusterConfigKafkaClusterPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaClusterConfigKafkaCluster) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type KafkaClusterDedicated struct {
	Cku           int     `pulumi:"cku"`
	EncryptionKey *string `pulumi:"encryptionKey"`
	// (Required List of String) The list of zones the cluster is in.
	// On AWS, zones are AWS [AZ IDs](https://docs.aws.amazon.com/ram/latest/userguide/working-with-az-ids.html), for example, `use1-az3`.
	// On GCP, zones are GCP [zones](https://cloud.google.com/compute/docs/regions-zones), for example, `us-central1-c`.
	// On Azure, zones are Confluent-chosen names (for example, `1`, `2`, `3`) since Azure does not have universal zone identifiers.
	Zones []string `pulumi:"zones"`
}

// KafkaClusterDedicatedInput is an input type that accepts KafkaClusterDedicatedArgs and KafkaClusterDedicatedOutput values.
// You can construct a concrete instance of `KafkaClusterDedicatedInput` via:
//
//	KafkaClusterDedicatedArgs{...}
type KafkaClusterDedicatedInput interface {
	pulumi.Input

	ToKafkaClusterDedicatedOutput() KafkaClusterDedicatedOutput
	ToKafkaClusterDedicatedOutputWithContext(context.Context) KafkaClusterDedicatedOutput
}

type KafkaClusterDedicatedArgs struct {
	Cku           pulumi.IntInput       `pulumi:"cku"`
	EncryptionKey pulumi.StringPtrInput `pulumi:"encryptionKey"`
	// (Required List of String) The list of zones the cluster is in.
	// On AWS, zones are AWS [AZ IDs](https://docs.aws.amazon.com/ram/latest/userguide/working-with-az-ids.html), for example, `use1-az3`.
	// On GCP, zones are GCP [zones](https://cloud.google.com/compute/docs/regions-zones), for example, `us-central1-c`.
	// On Azure, zones are Confluent-chosen names (for example, `1`, `2`, `3`) since Azure does not have universal zone identifiers.
	Zones pulumi.StringArrayInput `pulumi:"zones"`
}

func (KafkaClusterDedicatedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClusterDedicated)(nil)).Elem()
}

func (i KafkaClusterDedicatedArgs) ToKafkaClusterDedicatedOutput() KafkaClusterDedicatedOutput {
	return i.ToKafkaClusterDedicatedOutputWithContext(context.Background())
}

func (i KafkaClusterDedicatedArgs) ToKafkaClusterDedicatedOutputWithContext(ctx context.Context) KafkaClusterDedicatedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterDedicatedOutput)
}

func (i KafkaClusterDedicatedArgs) ToOutput(ctx context.Context) pulumix.Output[KafkaClusterDedicated] {
	return pulumix.Output[KafkaClusterDedicated]{
		OutputState: i.ToKafkaClusterDedicatedOutputWithContext(ctx).OutputState,
	}
}

func (i KafkaClusterDedicatedArgs) ToKafkaClusterDedicatedPtrOutput() KafkaClusterDedicatedPtrOutput {
	return i.ToKafkaClusterDedicatedPtrOutputWithContext(context.Background())
}

func (i KafkaClusterDedicatedArgs) ToKafkaClusterDedicatedPtrOutputWithContext(ctx context.Context) KafkaClusterDedicatedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterDedicatedOutput).ToKafkaClusterDedicatedPtrOutputWithContext(ctx)
}

// KafkaClusterDedicatedPtrInput is an input type that accepts KafkaClusterDedicatedArgs, KafkaClusterDedicatedPtr and KafkaClusterDedicatedPtrOutput values.
// You can construct a concrete instance of `KafkaClusterDedicatedPtrInput` via:
//
//	        KafkaClusterDedicatedArgs{...}
//
//	or:
//
//	        nil
type KafkaClusterDedicatedPtrInput interface {
	pulumi.Input

	ToKafkaClusterDedicatedPtrOutput() KafkaClusterDedicatedPtrOutput
	ToKafkaClusterDedicatedPtrOutputWithContext(context.Context) KafkaClusterDedicatedPtrOutput
}

type kafkaClusterDedicatedPtrType KafkaClusterDedicatedArgs

func KafkaClusterDedicatedPtr(v *KafkaClusterDedicatedArgs) KafkaClusterDedicatedPtrInput {
	return (*kafkaClusterDedicatedPtrType)(v)
}

func (*kafkaClusterDedicatedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaClusterDedicated)(nil)).Elem()
}

func (i *kafkaClusterDedicatedPtrType) ToKafkaClusterDedicatedPtrOutput() KafkaClusterDedicatedPtrOutput {
	return i.ToKafkaClusterDedicatedPtrOutputWithContext(context.Background())
}

func (i *kafkaClusterDedicatedPtrType) ToKafkaClusterDedicatedPtrOutputWithContext(ctx context.Context) KafkaClusterDedicatedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterDedicatedPtrOutput)
}

func (i *kafkaClusterDedicatedPtrType) ToOutput(ctx context.Context) pulumix.Output[*KafkaClusterDedicated] {
	return pulumix.Output[*KafkaClusterDedicated]{
		OutputState: i.ToKafkaClusterDedicatedPtrOutputWithContext(ctx).OutputState,
	}
}

type KafkaClusterDedicatedOutput struct{ *pulumi.OutputState }

func (KafkaClusterDedicatedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClusterDedicated)(nil)).Elem()
}

func (o KafkaClusterDedicatedOutput) ToKafkaClusterDedicatedOutput() KafkaClusterDedicatedOutput {
	return o
}

func (o KafkaClusterDedicatedOutput) ToKafkaClusterDedicatedOutputWithContext(ctx context.Context) KafkaClusterDedicatedOutput {
	return o
}

func (o KafkaClusterDedicatedOutput) ToKafkaClusterDedicatedPtrOutput() KafkaClusterDedicatedPtrOutput {
	return o.ToKafkaClusterDedicatedPtrOutputWithContext(context.Background())
}

func (o KafkaClusterDedicatedOutput) ToKafkaClusterDedicatedPtrOutputWithContext(ctx context.Context) KafkaClusterDedicatedPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaClusterDedicated) *KafkaClusterDedicated {
		return &v
	}).(KafkaClusterDedicatedPtrOutput)
}

func (o KafkaClusterDedicatedOutput) ToOutput(ctx context.Context) pulumix.Output[KafkaClusterDedicated] {
	return pulumix.Output[KafkaClusterDedicated]{
		OutputState: o.OutputState,
	}
}

func (o KafkaClusterDedicatedOutput) Cku() pulumi.IntOutput {
	return o.ApplyT(func(v KafkaClusterDedicated) int { return v.Cku }).(pulumi.IntOutput)
}

func (o KafkaClusterDedicatedOutput) EncryptionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaClusterDedicated) *string { return v.EncryptionKey }).(pulumi.StringPtrOutput)
}

// (Required List of String) The list of zones the cluster is in.
// On AWS, zones are AWS [AZ IDs](https://docs.aws.amazon.com/ram/latest/userguide/working-with-az-ids.html), for example, `use1-az3`.
// On GCP, zones are GCP [zones](https://cloud.google.com/compute/docs/regions-zones), for example, `us-central1-c`.
// On Azure, zones are Confluent-chosen names (for example, `1`, `2`, `3`) since Azure does not have universal zone identifiers.
func (o KafkaClusterDedicatedOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KafkaClusterDedicated) []string { return v.Zones }).(pulumi.StringArrayOutput)
}

type KafkaClusterDedicatedPtrOutput struct{ *pulumi.OutputState }

func (KafkaClusterDedicatedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaClusterDedicated)(nil)).Elem()
}

func (o KafkaClusterDedicatedPtrOutput) ToKafkaClusterDedicatedPtrOutput() KafkaClusterDedicatedPtrOutput {
	return o
}

func (o KafkaClusterDedicatedPtrOutput) ToKafkaClusterDedicatedPtrOutputWithContext(ctx context.Context) KafkaClusterDedicatedPtrOutput {
	return o
}

func (o KafkaClusterDedicatedPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*KafkaClusterDedicated] {
	return pulumix.Output[*KafkaClusterDedicated]{
		OutputState: o.OutputState,
	}
}

func (o KafkaClusterDedicatedPtrOutput) Elem() KafkaClusterDedicatedOutput {
	return o.ApplyT(func(v *KafkaClusterDedicated) KafkaClusterDedicated {
		if v != nil {
			return *v
		}
		var ret KafkaClusterDedicated
		return ret
	}).(KafkaClusterDedicatedOutput)
}

func (o KafkaClusterDedicatedPtrOutput) Cku() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaClusterDedicated) *int {
		if v == nil {
			return nil
		}
		return &v.Cku
	}).(pulumi.IntPtrOutput)
}

func (o KafkaClusterDedicatedPtrOutput) EncryptionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaClusterDedicated) *string {
		if v == nil {
			return nil
		}
		return v.EncryptionKey
	}).(pulumi.StringPtrOutput)
}

// (Required List of String) The list of zones the cluster is in.
// On AWS, zones are AWS [AZ IDs](https://docs.aws.amazon.com/ram/latest/userguide/working-with-az-ids.html), for example, `use1-az3`.
// On GCP, zones are GCP [zones](https://cloud.google.com/compute/docs/regions-zones), for example, `us-central1-c`.
// On Azure, zones are Confluent-chosen names (for example, `1`, `2`, `3`) since Azure does not have universal zone identifiers.
func (o KafkaClusterDedicatedPtrOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KafkaClusterDedicated) []string {
		if v == nil {
			return nil
		}
		return v.Zones
	}).(pulumi.StringArrayOutput)
}

type KafkaClusterEnterprise struct {
}

// KafkaClusterEnterpriseInput is an input type that accepts KafkaClusterEnterpriseArgs and KafkaClusterEnterpriseOutput values.
// You can construct a concrete instance of `KafkaClusterEnterpriseInput` via:
//
//	KafkaClusterEnterpriseArgs{...}
type KafkaClusterEnterpriseInput interface {
	pulumi.Input

	ToKafkaClusterEnterpriseOutput() KafkaClusterEnterpriseOutput
	ToKafkaClusterEnterpriseOutputWithContext(context.Context) KafkaClusterEnterpriseOutput
}

type KafkaClusterEnterpriseArgs struct {
}

func (KafkaClusterEnterpriseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClusterEnterprise)(nil)).Elem()
}

func (i KafkaClusterEnterpriseArgs) ToKafkaClusterEnterpriseOutput() KafkaClusterEnterpriseOutput {
	return i.ToKafkaClusterEnterpriseOutputWithContext(context.Background())
}

func (i KafkaClusterEnterpriseArgs) ToKafkaClusterEnterpriseOutputWithContext(ctx context.Context) KafkaClusterEnterpriseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterEnterpriseOutput)
}

func (i KafkaClusterEnterpriseArgs) ToOutput(ctx context.Context) pulumix.Output[KafkaClusterEnterprise] {
	return pulumix.Output[KafkaClusterEnterprise]{
		OutputState: i.ToKafkaClusterEnterpriseOutputWithContext(ctx).OutputState,
	}
}

// KafkaClusterEnterpriseArrayInput is an input type that accepts KafkaClusterEnterpriseArray and KafkaClusterEnterpriseArrayOutput values.
// You can construct a concrete instance of `KafkaClusterEnterpriseArrayInput` via:
//
//	KafkaClusterEnterpriseArray{ KafkaClusterEnterpriseArgs{...} }
type KafkaClusterEnterpriseArrayInput interface {
	pulumi.Input

	ToKafkaClusterEnterpriseArrayOutput() KafkaClusterEnterpriseArrayOutput
	ToKafkaClusterEnterpriseArrayOutputWithContext(context.Context) KafkaClusterEnterpriseArrayOutput
}

type KafkaClusterEnterpriseArray []KafkaClusterEnterpriseInput

func (KafkaClusterEnterpriseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaClusterEnterprise)(nil)).Elem()
}

func (i KafkaClusterEnterpriseArray) ToKafkaClusterEnterpriseArrayOutput() KafkaClusterEnterpriseArrayOutput {
	return i.ToKafkaClusterEnterpriseArrayOutputWithContext(context.Background())
}

func (i KafkaClusterEnterpriseArray) ToKafkaClusterEnterpriseArrayOutputWithContext(ctx context.Context) KafkaClusterEnterpriseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterEnterpriseArrayOutput)
}

func (i KafkaClusterEnterpriseArray) ToOutput(ctx context.Context) pulumix.Output[[]KafkaClusterEnterprise] {
	return pulumix.Output[[]KafkaClusterEnterprise]{
		OutputState: i.ToKafkaClusterEnterpriseArrayOutputWithContext(ctx).OutputState,
	}
}

type KafkaClusterEnterpriseOutput struct{ *pulumi.OutputState }

func (KafkaClusterEnterpriseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClusterEnterprise)(nil)).Elem()
}

func (o KafkaClusterEnterpriseOutput) ToKafkaClusterEnterpriseOutput() KafkaClusterEnterpriseOutput {
	return o
}

func (o KafkaClusterEnterpriseOutput) ToKafkaClusterEnterpriseOutputWithContext(ctx context.Context) KafkaClusterEnterpriseOutput {
	return o
}

func (o KafkaClusterEnterpriseOutput) ToOutput(ctx context.Context) pulumix.Output[KafkaClusterEnterprise] {
	return pulumix.Output[KafkaClusterEnterprise]{
		OutputState: o.OutputState,
	}
}

type KafkaClusterEnterpriseArrayOutput struct{ *pulumi.OutputState }

func (KafkaClusterEnterpriseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaClusterEnterprise)(nil)).Elem()
}

func (o KafkaClusterEnterpriseArrayOutput) ToKafkaClusterEnterpriseArrayOutput() KafkaClusterEnterpriseArrayOutput {
	return o
}

func (o KafkaClusterEnterpriseArrayOutput) ToKafkaClusterEnterpriseArrayOutputWithContext(ctx context.Context) KafkaClusterEnterpriseArrayOutput {
	return o
}

func (o KafkaClusterEnterpriseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]KafkaClusterEnterprise] {
	return pulumix.Output[[]KafkaClusterEnterprise]{
		OutputState: o.OutputState,
	}
}

func (o KafkaClusterEnterpriseArrayOutput) Index(i pulumi.IntInput) KafkaClusterEnterpriseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KafkaClusterEnterprise {
		return vs[0].([]KafkaClusterEnterprise)[vs[1].(int)]
	}).(KafkaClusterEnterpriseOutput)
}

type KafkaClusterEnvironment struct {
	// The ID of the Confluent key that is used to encrypt the data in the Kafka cluster, for example, `cck-lye5m`.
	Id string `pulumi:"id"`
}

// KafkaClusterEnvironmentInput is an input type that accepts KafkaClusterEnvironmentArgs and KafkaClusterEnvironmentOutput values.
// You can construct a concrete instance of `KafkaClusterEnvironmentInput` via:
//
//	KafkaClusterEnvironmentArgs{...}
type KafkaClusterEnvironmentInput interface {
	pulumi.Input

	ToKafkaClusterEnvironmentOutput() KafkaClusterEnvironmentOutput
	ToKafkaClusterEnvironmentOutputWithContext(context.Context) KafkaClusterEnvironmentOutput
}

type KafkaClusterEnvironmentArgs struct {
	// The ID of the Confluent key that is used to encrypt the data in the Kafka cluster, for example, `cck-lye5m`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (KafkaClusterEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClusterEnvironment)(nil)).Elem()
}

func (i KafkaClusterEnvironmentArgs) ToKafkaClusterEnvironmentOutput() KafkaClusterEnvironmentOutput {
	return i.ToKafkaClusterEnvironmentOutputWithContext(context.Background())
}

func (i KafkaClusterEnvironmentArgs) ToKafkaClusterEnvironmentOutputWithContext(ctx context.Context) KafkaClusterEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterEnvironmentOutput)
}

func (i KafkaClusterEnvironmentArgs) ToOutput(ctx context.Context) pulumix.Output[KafkaClusterEnvironment] {
	return pulumix.Output[KafkaClusterEnvironment]{
		OutputState: i.ToKafkaClusterEnvironmentOutputWithContext(ctx).OutputState,
	}
}

func (i KafkaClusterEnvironmentArgs) ToKafkaClusterEnvironmentPtrOutput() KafkaClusterEnvironmentPtrOutput {
	return i.ToKafkaClusterEnvironmentPtrOutputWithContext(context.Background())
}

func (i KafkaClusterEnvironmentArgs) ToKafkaClusterEnvironmentPtrOutputWithContext(ctx context.Context) KafkaClusterEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterEnvironmentOutput).ToKafkaClusterEnvironmentPtrOutputWithContext(ctx)
}

// KafkaClusterEnvironmentPtrInput is an input type that accepts KafkaClusterEnvironmentArgs, KafkaClusterEnvironmentPtr and KafkaClusterEnvironmentPtrOutput values.
// You can construct a concrete instance of `KafkaClusterEnvironmentPtrInput` via:
//
//	        KafkaClusterEnvironmentArgs{...}
//
//	or:
//
//	        nil
type KafkaClusterEnvironmentPtrInput interface {
	pulumi.Input

	ToKafkaClusterEnvironmentPtrOutput() KafkaClusterEnvironmentPtrOutput
	ToKafkaClusterEnvironmentPtrOutputWithContext(context.Context) KafkaClusterEnvironmentPtrOutput
}

type kafkaClusterEnvironmentPtrType KafkaClusterEnvironmentArgs

func KafkaClusterEnvironmentPtr(v *KafkaClusterEnvironmentArgs) KafkaClusterEnvironmentPtrInput {
	return (*kafkaClusterEnvironmentPtrType)(v)
}

func (*kafkaClusterEnvironmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaClusterEnvironment)(nil)).Elem()
}

func (i *kafkaClusterEnvironmentPtrType) ToKafkaClusterEnvironmentPtrOutput() KafkaClusterEnvironmentPtrOutput {
	return i.ToKafkaClusterEnvironmentPtrOutputWithContext(context.Background())
}

func (i *kafkaClusterEnvironmentPtrType) ToKafkaClusterEnvironmentPtrOutputWithContext(ctx context.Context) KafkaClusterEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterEnvironmentPtrOutput)
}

func (i *kafkaClusterEnvironmentPtrType) ToOutput(ctx context.Context) pulumix.Output[*KafkaClusterEnvironment] {
	return pulumix.Output[*KafkaClusterEnvironment]{
		OutputState: i.ToKafkaClusterEnvironmentPtrOutputWithContext(ctx).OutputState,
	}
}

type KafkaClusterEnvironmentOutput struct{ *pulumi.OutputState }

func (KafkaClusterEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClusterEnvironment)(nil)).Elem()
}

func (o KafkaClusterEnvironmentOutput) ToKafkaClusterEnvironmentOutput() KafkaClusterEnvironmentOutput {
	return o
}

func (o KafkaClusterEnvironmentOutput) ToKafkaClusterEnvironmentOutputWithContext(ctx context.Context) KafkaClusterEnvironmentOutput {
	return o
}

func (o KafkaClusterEnvironmentOutput) ToKafkaClusterEnvironmentPtrOutput() KafkaClusterEnvironmentPtrOutput {
	return o.ToKafkaClusterEnvironmentPtrOutputWithContext(context.Background())
}

func (o KafkaClusterEnvironmentOutput) ToKafkaClusterEnvironmentPtrOutputWithContext(ctx context.Context) KafkaClusterEnvironmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaClusterEnvironment) *KafkaClusterEnvironment {
		return &v
	}).(KafkaClusterEnvironmentPtrOutput)
}

func (o KafkaClusterEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[KafkaClusterEnvironment] {
	return pulumix.Output[KafkaClusterEnvironment]{
		OutputState: o.OutputState,
	}
}

// The ID of the Confluent key that is used to encrypt the data in the Kafka cluster, for example, `cck-lye5m`.
func (o KafkaClusterEnvironmentOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaClusterEnvironment) string { return v.Id }).(pulumi.StringOutput)
}

type KafkaClusterEnvironmentPtrOutput struct{ *pulumi.OutputState }

func (KafkaClusterEnvironmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaClusterEnvironment)(nil)).Elem()
}

func (o KafkaClusterEnvironmentPtrOutput) ToKafkaClusterEnvironmentPtrOutput() KafkaClusterEnvironmentPtrOutput {
	return o
}

func (o KafkaClusterEnvironmentPtrOutput) ToKafkaClusterEnvironmentPtrOutputWithContext(ctx context.Context) KafkaClusterEnvironmentPtrOutput {
	return o
}

func (o KafkaClusterEnvironmentPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*KafkaClusterEnvironment] {
	return pulumix.Output[*KafkaClusterEnvironment]{
		OutputState: o.OutputState,
	}
}

func (o KafkaClusterEnvironmentPtrOutput) Elem() KafkaClusterEnvironmentOutput {
	return o.ApplyT(func(v *KafkaClusterEnvironment) KafkaClusterEnvironment {
		if v != nil {
			return *v
		}
		var ret KafkaClusterEnvironment
		return ret
	}).(KafkaClusterEnvironmentOutput)
}

// The ID of the Confluent key that is used to encrypt the data in the Kafka cluster, for example, `cck-lye5m`.
func (o KafkaClusterEnvironmentPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaClusterEnvironment) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type KafkaClusterNetwork struct {
	// The ID of the Confluent key that is used to encrypt the data in the Kafka cluster, for example, `cck-lye5m`.
	Id string `pulumi:"id"`
}

// KafkaClusterNetworkInput is an input type that accepts KafkaClusterNetworkArgs and KafkaClusterNetworkOutput values.
// You can construct a concrete instance of `KafkaClusterNetworkInput` via:
//
//	KafkaClusterNetworkArgs{...}
type KafkaClusterNetworkInput interface {
	pulumi.Input

	ToKafkaClusterNetworkOutput() KafkaClusterNetworkOutput
	ToKafkaClusterNetworkOutputWithContext(context.Context) KafkaClusterNetworkOutput
}

type KafkaClusterNetworkArgs struct {
	// The ID of the Confluent key that is used to encrypt the data in the Kafka cluster, for example, `cck-lye5m`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (KafkaClusterNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClusterNetwork)(nil)).Elem()
}

func (i KafkaClusterNetworkArgs) ToKafkaClusterNetworkOutput() KafkaClusterNetworkOutput {
	return i.ToKafkaClusterNetworkOutputWithContext(context.Background())
}

func (i KafkaClusterNetworkArgs) ToKafkaClusterNetworkOutputWithContext(ctx context.Context) KafkaClusterNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterNetworkOutput)
}

func (i KafkaClusterNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[KafkaClusterNetwork] {
	return pulumix.Output[KafkaClusterNetwork]{
		OutputState: i.ToKafkaClusterNetworkOutputWithContext(ctx).OutputState,
	}
}

func (i KafkaClusterNetworkArgs) ToKafkaClusterNetworkPtrOutput() KafkaClusterNetworkPtrOutput {
	return i.ToKafkaClusterNetworkPtrOutputWithContext(context.Background())
}

func (i KafkaClusterNetworkArgs) ToKafkaClusterNetworkPtrOutputWithContext(ctx context.Context) KafkaClusterNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterNetworkOutput).ToKafkaClusterNetworkPtrOutputWithContext(ctx)
}

// KafkaClusterNetworkPtrInput is an input type that accepts KafkaClusterNetworkArgs, KafkaClusterNetworkPtr and KafkaClusterNetworkPtrOutput values.
// You can construct a concrete instance of `KafkaClusterNetworkPtrInput` via:
//
//	        KafkaClusterNetworkArgs{...}
//
//	or:
//
//	        nil
type KafkaClusterNetworkPtrInput interface {
	pulumi.Input

	ToKafkaClusterNetworkPtrOutput() KafkaClusterNetworkPtrOutput
	ToKafkaClusterNetworkPtrOutputWithContext(context.Context) KafkaClusterNetworkPtrOutput
}

type kafkaClusterNetworkPtrType KafkaClusterNetworkArgs

func KafkaClusterNetworkPtr(v *KafkaClusterNetworkArgs) KafkaClusterNetworkPtrInput {
	return (*kafkaClusterNetworkPtrType)(v)
}

func (*kafkaClusterNetworkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaClusterNetwork)(nil)).Elem()
}

func (i *kafkaClusterNetworkPtrType) ToKafkaClusterNetworkPtrOutput() KafkaClusterNetworkPtrOutput {
	return i.ToKafkaClusterNetworkPtrOutputWithContext(context.Background())
}

func (i *kafkaClusterNetworkPtrType) ToKafkaClusterNetworkPtrOutputWithContext(ctx context.Context) KafkaClusterNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterNetworkPtrOutput)
}

func (i *kafkaClusterNetworkPtrType) ToOutput(ctx context.Context) pulumix.Output[*KafkaClusterNetwork] {
	return pulumix.Output[*KafkaClusterNetwork]{
		OutputState: i.ToKafkaClusterNetworkPtrOutputWithContext(ctx).OutputState,
	}
}

type KafkaClusterNetworkOutput struct{ *pulumi.OutputState }

func (KafkaClusterNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClusterNetwork)(nil)).Elem()
}

func (o KafkaClusterNetworkOutput) ToKafkaClusterNetworkOutput() KafkaClusterNetworkOutput {
	return o
}

func (o KafkaClusterNetworkOutput) ToKafkaClusterNetworkOutputWithContext(ctx context.Context) KafkaClusterNetworkOutput {
	return o
}

func (o KafkaClusterNetworkOutput) ToKafkaClusterNetworkPtrOutput() KafkaClusterNetworkPtrOutput {
	return o.ToKafkaClusterNetworkPtrOutputWithContext(context.Background())
}

func (o KafkaClusterNetworkOutput) ToKafkaClusterNetworkPtrOutputWithContext(ctx context.Context) KafkaClusterNetworkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaClusterNetwork) *KafkaClusterNetwork {
		return &v
	}).(KafkaClusterNetworkPtrOutput)
}

func (o KafkaClusterNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[KafkaClusterNetwork] {
	return pulumix.Output[KafkaClusterNetwork]{
		OutputState: o.OutputState,
	}
}

// The ID of the Confluent key that is used to encrypt the data in the Kafka cluster, for example, `cck-lye5m`.
func (o KafkaClusterNetworkOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaClusterNetwork) string { return v.Id }).(pulumi.StringOutput)
}

type KafkaClusterNetworkPtrOutput struct{ *pulumi.OutputState }

func (KafkaClusterNetworkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaClusterNetwork)(nil)).Elem()
}

func (o KafkaClusterNetworkPtrOutput) ToKafkaClusterNetworkPtrOutput() KafkaClusterNetworkPtrOutput {
	return o
}

func (o KafkaClusterNetworkPtrOutput) ToKafkaClusterNetworkPtrOutputWithContext(ctx context.Context) KafkaClusterNetworkPtrOutput {
	return o
}

func (o KafkaClusterNetworkPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*KafkaClusterNetwork] {
	return pulumix.Output[*KafkaClusterNetwork]{
		OutputState: o.OutputState,
	}
}

func (o KafkaClusterNetworkPtrOutput) Elem() KafkaClusterNetworkOutput {
	return o.ApplyT(func(v *KafkaClusterNetwork) KafkaClusterNetwork {
		if v != nil {
			return *v
		}
		var ret KafkaClusterNetwork
		return ret
	}).(KafkaClusterNetworkOutput)
}

// The ID of the Confluent key that is used to encrypt the data in the Kafka cluster, for example, `cck-lye5m`.
func (o KafkaClusterNetworkPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaClusterNetwork) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type KafkaClusterStandard struct {
}

// KafkaClusterStandardInput is an input type that accepts KafkaClusterStandardArgs and KafkaClusterStandardOutput values.
// You can construct a concrete instance of `KafkaClusterStandardInput` via:
//
//	KafkaClusterStandardArgs{...}
type KafkaClusterStandardInput interface {
	pulumi.Input

	ToKafkaClusterStandardOutput() KafkaClusterStandardOutput
	ToKafkaClusterStandardOutputWithContext(context.Context) KafkaClusterStandardOutput
}

type KafkaClusterStandardArgs struct {
}

func (KafkaClusterStandardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClusterStandard)(nil)).Elem()
}

func (i KafkaClusterStandardArgs) ToKafkaClusterStandardOutput() KafkaClusterStandardOutput {
	return i.ToKafkaClusterStandardOutputWithContext(context.Background())
}

func (i KafkaClusterStandardArgs) ToKafkaClusterStandardOutputWithContext(ctx context.Context) KafkaClusterStandardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterStandardOutput)
}

func (i KafkaClusterStandardArgs) ToOutput(ctx context.Context) pulumix.Output[KafkaClusterStandard] {
	return pulumix.Output[KafkaClusterStandard]{
		OutputState: i.ToKafkaClusterStandardOutputWithContext(ctx).OutputState,
	}
}

func (i KafkaClusterStandardArgs) ToKafkaClusterStandardPtrOutput() KafkaClusterStandardPtrOutput {
	return i.ToKafkaClusterStandardPtrOutputWithContext(context.Background())
}

func (i KafkaClusterStandardArgs) ToKafkaClusterStandardPtrOutputWithContext(ctx context.Context) KafkaClusterStandardPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterStandardOutput).ToKafkaClusterStandardPtrOutputWithContext(ctx)
}

// KafkaClusterStandardPtrInput is an input type that accepts KafkaClusterStandardArgs, KafkaClusterStandardPtr and KafkaClusterStandardPtrOutput values.
// You can construct a concrete instance of `KafkaClusterStandardPtrInput` via:
//
//	        KafkaClusterStandardArgs{...}
//
//	or:
//
//	        nil
type KafkaClusterStandardPtrInput interface {
	pulumi.Input

	ToKafkaClusterStandardPtrOutput() KafkaClusterStandardPtrOutput
	ToKafkaClusterStandardPtrOutputWithContext(context.Context) KafkaClusterStandardPtrOutput
}

type kafkaClusterStandardPtrType KafkaClusterStandardArgs

func KafkaClusterStandardPtr(v *KafkaClusterStandardArgs) KafkaClusterStandardPtrInput {
	return (*kafkaClusterStandardPtrType)(v)
}

func (*kafkaClusterStandardPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaClusterStandard)(nil)).Elem()
}

func (i *kafkaClusterStandardPtrType) ToKafkaClusterStandardPtrOutput() KafkaClusterStandardPtrOutput {
	return i.ToKafkaClusterStandardPtrOutputWithContext(context.Background())
}

func (i *kafkaClusterStandardPtrType) ToKafkaClusterStandardPtrOutputWithContext(ctx context.Context) KafkaClusterStandardPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterStandardPtrOutput)
}

func (i *kafkaClusterStandardPtrType) ToOutput(ctx context.Context) pulumix.Output[*KafkaClusterStandard] {
	return pulumix.Output[*KafkaClusterStandard]{
		OutputState: i.ToKafkaClusterStandardPtrOutputWithContext(ctx).OutputState,
	}
}

type KafkaClusterStandardOutput struct{ *pulumi.OutputState }

func (KafkaClusterStandardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClusterStandard)(nil)).Elem()
}

func (o KafkaClusterStandardOutput) ToKafkaClusterStandardOutput() KafkaClusterStandardOutput {
	return o
}

func (o KafkaClusterStandardOutput) ToKafkaClusterStandardOutputWithContext(ctx context.Context) KafkaClusterStandardOutput {
	return o
}

func (o KafkaClusterStandardOutput) ToKafkaClusterStandardPtrOutput() KafkaClusterStandardPtrOutput {
	return o.ToKafkaClusterStandardPtrOutputWithContext(context.Background())
}

func (o KafkaClusterStandardOutput) ToKafkaClusterStandardPtrOutputWithContext(ctx context.Context) KafkaClusterStandardPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaClusterStandard) *KafkaClusterStandard {
		return &v
	}).(KafkaClusterStandardPtrOutput)
}

func (o KafkaClusterStandardOutput) ToOutput(ctx context.Context) pulumix.Output[KafkaClusterStandard] {
	return pulumix.Output[KafkaClusterStandard]{
		OutputState: o.OutputState,
	}
}

type KafkaClusterStandardPtrOutput struct{ *pulumi.OutputState }

func (KafkaClusterStandardPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaClusterStandard)(nil)).Elem()
}

func (o KafkaClusterStandardPtrOutput) ToKafkaClusterStandardPtrOutput() KafkaClusterStandardPtrOutput {
	return o
}

func (o KafkaClusterStandardPtrOutput) ToKafkaClusterStandardPtrOutputWithContext(ctx context.Context) KafkaClusterStandardPtrOutput {
	return o
}

func (o KafkaClusterStandardPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*KafkaClusterStandard] {
	return pulumix.Output[*KafkaClusterStandard]{
		OutputState: o.OutputState,
	}
}

func (o KafkaClusterStandardPtrOutput) Elem() KafkaClusterStandardOutput {
	return o.ApplyT(func(v *KafkaClusterStandard) KafkaClusterStandard {
		if v != nil {
			return *v
		}
		var ret KafkaClusterStandard
		return ret
	}).(KafkaClusterStandardOutput)
}

type KafkaMirrorTopicClusterLink struct {
	// The name of the cluster link to attach to the mirror topic, for example, `my-cluster-link`.
	LinkName string `pulumi:"linkName"`
}

// KafkaMirrorTopicClusterLinkInput is an input type that accepts KafkaMirrorTopicClusterLinkArgs and KafkaMirrorTopicClusterLinkOutput values.
// You can construct a concrete instance of `KafkaMirrorTopicClusterLinkInput` via:
//
//	KafkaMirrorTopicClusterLinkArgs{...}
type KafkaMirrorTopicClusterLinkInput interface {
	pulumi.Input

	ToKafkaMirrorTopicClusterLinkOutput() KafkaMirrorTopicClusterLinkOutput
	ToKafkaMirrorTopicClusterLinkOutputWithContext(context.Context) KafkaMirrorTopicClusterLinkOutput
}

type KafkaMirrorTopicClusterLinkArgs struct {
	// The name of the cluster link to attach to the mirror topic, for example, `my-cluster-link`.
	LinkName pulumi.StringInput `pulumi:"linkName"`
}

func (KafkaMirrorTopicClusterLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaMirrorTopicClusterLink)(nil)).Elem()
}

func (i KafkaMirrorTopicClusterLinkArgs) ToKafkaMirrorTopicClusterLinkOutput() KafkaMirrorTopicClusterLinkOutput {
	return i.ToKafkaMirrorTopicClusterLinkOutputWithContext(context.Background())
}

func (i KafkaMirrorTopicClusterLinkArgs) ToKafkaMirrorTopicClusterLinkOutputWithContext(ctx context.Context) KafkaMirrorTopicClusterLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaMirrorTopicClusterLinkOutput)
}

func (i KafkaMirrorTopicClusterLinkArgs) ToOutput(ctx context.Context) pulumix.Output[KafkaMirrorTopicClusterLink] {
	return pulumix.Output[KafkaMirrorTopicClusterLink]{
		OutputState: i.ToKafkaMirrorTopicClusterLinkOutputWithContext(ctx).OutputState,
	}
}

func (i KafkaMirrorTopicClusterLinkArgs) ToKafkaMirrorTopicClusterLinkPtrOutput() KafkaMirrorTopicClusterLinkPtrOutput {
	return i.ToKafkaMirrorTopicClusterLinkPtrOutputWithContext(context.Background())
}

func (i KafkaMirrorTopicClusterLinkArgs) ToKafkaMirrorTopicClusterLinkPtrOutputWithContext(ctx context.Context) KafkaMirrorTopicClusterLinkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaMirrorTopicClusterLinkOutput).ToKafkaMirrorTopicClusterLinkPtrOutputWithContext(ctx)
}

// KafkaMirrorTopicClusterLinkPtrInput is an input type that accepts KafkaMirrorTopicClusterLinkArgs, KafkaMirrorTopicClusterLinkPtr and KafkaMirrorTopicClusterLinkPtrOutput values.
// You can construct a concrete instance of `KafkaMirrorTopicClusterLinkPtrInput` via:
//
//	        KafkaMirrorTopicClusterLinkArgs{...}
//
//	or:
//
//	        nil
type KafkaMirrorTopicClusterLinkPtrInput interface {
	pulumi.Input

	ToKafkaMirrorTopicClusterLinkPtrOutput() KafkaMirrorTopicClusterLinkPtrOutput
	ToKafkaMirrorTopicClusterLinkPtrOutputWithContext(context.Context) KafkaMirrorTopicClusterLinkPtrOutput
}

type kafkaMirrorTopicClusterLinkPtrType KafkaMirrorTopicClusterLinkArgs

func KafkaMirrorTopicClusterLinkPtr(v *KafkaMirrorTopicClusterLinkArgs) KafkaMirrorTopicClusterLinkPtrInput {
	return (*kafkaMirrorTopicClusterLinkPtrType)(v)
}

func (*kafkaMirrorTopicClusterLinkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaMirrorTopicClusterLink)(nil)).Elem()
}

func (i *kafkaMirrorTopicClusterLinkPtrType) ToKafkaMirrorTopicClusterLinkPtrOutput() KafkaMirrorTopicClusterLinkPtrOutput {
	return i.ToKafkaMirrorTopicClusterLinkPtrOutputWithContext(context.Background())
}

func (i *kafkaMirrorTopicClusterLinkPtrType) ToKafkaMirrorTopicClusterLinkPtrOutputWithContext(ctx context.Context) KafkaMirrorTopicClusterLinkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaMirrorTopicClusterLinkPtrOutput)
}

func (i *kafkaMirrorTopicClusterLinkPtrType) ToOutput(ctx context.Context) pulumix.Output[*KafkaMirrorTopicClusterLink] {
	return pulumix.Output[*KafkaMirrorTopicClusterLink]{
		OutputState: i.ToKafkaMirrorTopicClusterLinkPtrOutputWithContext(ctx).OutputState,
	}
}

type KafkaMirrorTopicClusterLinkOutput struct{ *pulumi.OutputState }

func (KafkaMirrorTopicClusterLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaMirrorTopicClusterLink)(nil)).Elem()
}

func (o KafkaMirrorTopicClusterLinkOutput) ToKafkaMirrorTopicClusterLinkOutput() KafkaMirrorTopicClusterLinkOutput {
	return o
}

func (o KafkaMirrorTopicClusterLinkOutput) ToKafkaMirrorTopicClusterLinkOutputWithContext(ctx context.Context) KafkaMirrorTopicClusterLinkOutput {
	return o
}

func (o KafkaMirrorTopicClusterLinkOutput) ToKafkaMirrorTopicClusterLinkPtrOutput() KafkaMirrorTopicClusterLinkPtrOutput {
	return o.ToKafkaMirrorTopicClusterLinkPtrOutputWithContext(context.Background())
}

func (o KafkaMirrorTopicClusterLinkOutput) ToKafkaMirrorTopicClusterLinkPtrOutputWithContext(ctx context.Context) KafkaMirrorTopicClusterLinkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaMirrorTopicClusterLink) *KafkaMirrorTopicClusterLink {
		return &v
	}).(KafkaMirrorTopicClusterLinkPtrOutput)
}

func (o KafkaMirrorTopicClusterLinkOutput) ToOutput(ctx context.Context) pulumix.Output[KafkaMirrorTopicClusterLink] {
	return pulumix.Output[KafkaMirrorTopicClusterLink]{
		OutputState: o.OutputState,
	}
}

// The name of the cluster link to attach to the mirror topic, for example, `my-cluster-link`.
func (o KafkaMirrorTopicClusterLinkOutput) LinkName() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaMirrorTopicClusterLink) string { return v.LinkName }).(pulumi.StringOutput)
}

type KafkaMirrorTopicClusterLinkPtrOutput struct{ *pulumi.OutputState }

func (KafkaMirrorTopicClusterLinkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaMirrorTopicClusterLink)(nil)).Elem()
}

func (o KafkaMirrorTopicClusterLinkPtrOutput) ToKafkaMirrorTopicClusterLinkPtrOutput() KafkaMirrorTopicClusterLinkPtrOutput {
	return o
}

func (o KafkaMirrorTopicClusterLinkPtrOutput) ToKafkaMirrorTopicClusterLinkPtrOutputWithContext(ctx context.Context) KafkaMirrorTopicClusterLinkPtrOutput {
	return o
}

func (o KafkaMirrorTopicClusterLinkPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*KafkaMirrorTopicClusterLink] {
	return pulumix.Output[*KafkaMirrorTopicClusterLink]{
		OutputState: o.OutputState,
	}
}

func (o KafkaMirrorTopicClusterLinkPtrOutput) Elem() KafkaMirrorTopicClusterLinkOutput {
	return o.ApplyT(func(v *KafkaMirrorTopicClusterLink) KafkaMirrorTopicClusterLink {
		if v != nil {
			return *v
		}
		var ret KafkaMirrorTopicClusterLink
		return ret
	}).(KafkaMirrorTopicClusterLinkOutput)
}

// The name of the cluster link to attach to the mirror topic, for example, `my-cluster-link`.
func (o KafkaMirrorTopicClusterLinkPtrOutput) LinkName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaMirrorTopicClusterLink) *string {
		if v == nil {
			return nil
		}
		return &v.LinkName
	}).(pulumi.StringPtrOutput)
}

type KafkaMirrorTopicKafkaCluster struct {
	Credentials *KafkaMirrorTopicKafkaClusterCredentials `pulumi:"credentials"`
	// The ID of the destination Kafka cluster, for example, `lkc-abc123`.
	Id string `pulumi:"id"`
	// The REST endpoint of the destination Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint *string `pulumi:"restEndpoint"`
}

// KafkaMirrorTopicKafkaClusterInput is an input type that accepts KafkaMirrorTopicKafkaClusterArgs and KafkaMirrorTopicKafkaClusterOutput values.
// You can construct a concrete instance of `KafkaMirrorTopicKafkaClusterInput` via:
//
//	KafkaMirrorTopicKafkaClusterArgs{...}
type KafkaMirrorTopicKafkaClusterInput interface {
	pulumi.Input

	ToKafkaMirrorTopicKafkaClusterOutput() KafkaMirrorTopicKafkaClusterOutput
	ToKafkaMirrorTopicKafkaClusterOutputWithContext(context.Context) KafkaMirrorTopicKafkaClusterOutput
}

type KafkaMirrorTopicKafkaClusterArgs struct {
	Credentials KafkaMirrorTopicKafkaClusterCredentialsPtrInput `pulumi:"credentials"`
	// The ID of the destination Kafka cluster, for example, `lkc-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
	// The REST endpoint of the destination Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint pulumi.StringPtrInput `pulumi:"restEndpoint"`
}

func (KafkaMirrorTopicKafkaClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaMirrorTopicKafkaCluster)(nil)).Elem()
}

func (i KafkaMirrorTopicKafkaClusterArgs) ToKafkaMirrorTopicKafkaClusterOutput() KafkaMirrorTopicKafkaClusterOutput {
	return i.ToKafkaMirrorTopicKafkaClusterOutputWithContext(context.Background())
}

func (i KafkaMirrorTopicKafkaClusterArgs) ToKafkaMirrorTopicKafkaClusterOutputWithContext(ctx context.Context) KafkaMirrorTopicKafkaClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaMirrorTopicKafkaClusterOutput)
}

func (i KafkaMirrorTopicKafkaClusterArgs) ToOutput(ctx context.Context) pulumix.Output[KafkaMirrorTopicKafkaCluster] {
	return pulumix.Output[KafkaMirrorTopicKafkaCluster]{
		OutputState: i.ToKafkaMirrorTopicKafkaClusterOutputWithContext(ctx).OutputState,
	}
}

func (i KafkaMirrorTopicKafkaClusterArgs) ToKafkaMirrorTopicKafkaClusterPtrOutput() KafkaMirrorTopicKafkaClusterPtrOutput {
	return i.ToKafkaMirrorTopicKafkaClusterPtrOutputWithContext(context.Background())
}

func (i KafkaMirrorTopicKafkaClusterArgs) ToKafkaMirrorTopicKafkaClusterPtrOutputWithContext(ctx context.Context) KafkaMirrorTopicKafkaClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaMirrorTopicKafkaClusterOutput).ToKafkaMirrorTopicKafkaClusterPtrOutputWithContext(ctx)
}

// KafkaMirrorTopicKafkaClusterPtrInput is an input type that accepts KafkaMirrorTopicKafkaClusterArgs, KafkaMirrorTopicKafkaClusterPtr and KafkaMirrorTopicKafkaClusterPtrOutput values.
// You can construct a concrete instance of `KafkaMirrorTopicKafkaClusterPtrInput` via:
//
//	        KafkaMirrorTopicKafkaClusterArgs{...}
//
//	or:
//
//	        nil
type KafkaMirrorTopicKafkaClusterPtrInput interface {
	pulumi.Input

	ToKafkaMirrorTopicKafkaClusterPtrOutput() KafkaMirrorTopicKafkaClusterPtrOutput
	ToKafkaMirrorTopicKafkaClusterPtrOutputWithContext(context.Context) KafkaMirrorTopicKafkaClusterPtrOutput
}

type kafkaMirrorTopicKafkaClusterPtrType KafkaMirrorTopicKafkaClusterArgs

func KafkaMirrorTopicKafkaClusterPtr(v *KafkaMirrorTopicKafkaClusterArgs) KafkaMirrorTopicKafkaClusterPtrInput {
	return (*kafkaMirrorTopicKafkaClusterPtrType)(v)
}

func (*kafkaMirrorTopicKafkaClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaMirrorTopicKafkaCluster)(nil)).Elem()
}

func (i *kafkaMirrorTopicKafkaClusterPtrType) ToKafkaMirrorTopicKafkaClusterPtrOutput() KafkaMirrorTopicKafkaClusterPtrOutput {
	return i.ToKafkaMirrorTopicKafkaClusterPtrOutputWithContext(context.Background())
}

func (i *kafkaMirrorTopicKafkaClusterPtrType) ToKafkaMirrorTopicKafkaClusterPtrOutputWithContext(ctx context.Context) KafkaMirrorTopicKafkaClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaMirrorTopicKafkaClusterPtrOutput)
}

func (i *kafkaMirrorTopicKafkaClusterPtrType) ToOutput(ctx context.Context) pulumix.Output[*KafkaMirrorTopicKafkaCluster] {
	return pulumix.Output[*KafkaMirrorTopicKafkaCluster]{
		OutputState: i.ToKafkaMirrorTopicKafkaClusterPtrOutputWithContext(ctx).OutputState,
	}
}

type KafkaMirrorTopicKafkaClusterOutput struct{ *pulumi.OutputState }

func (KafkaMirrorTopicKafkaClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaMirrorTopicKafkaCluster)(nil)).Elem()
}

func (o KafkaMirrorTopicKafkaClusterOutput) ToKafkaMirrorTopicKafkaClusterOutput() KafkaMirrorTopicKafkaClusterOutput {
	return o
}

func (o KafkaMirrorTopicKafkaClusterOutput) ToKafkaMirrorTopicKafkaClusterOutputWithContext(ctx context.Context) KafkaMirrorTopicKafkaClusterOutput {
	return o
}

func (o KafkaMirrorTopicKafkaClusterOutput) ToKafkaMirrorTopicKafkaClusterPtrOutput() KafkaMirrorTopicKafkaClusterPtrOutput {
	return o.ToKafkaMirrorTopicKafkaClusterPtrOutputWithContext(context.Background())
}

func (o KafkaMirrorTopicKafkaClusterOutput) ToKafkaMirrorTopicKafkaClusterPtrOutputWithContext(ctx context.Context) KafkaMirrorTopicKafkaClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaMirrorTopicKafkaCluster) *KafkaMirrorTopicKafkaCluster {
		return &v
	}).(KafkaMirrorTopicKafkaClusterPtrOutput)
}

func (o KafkaMirrorTopicKafkaClusterOutput) ToOutput(ctx context.Context) pulumix.Output[KafkaMirrorTopicKafkaCluster] {
	return pulumix.Output[KafkaMirrorTopicKafkaCluster]{
		OutputState: o.OutputState,
	}
}

func (o KafkaMirrorTopicKafkaClusterOutput) Credentials() KafkaMirrorTopicKafkaClusterCredentialsPtrOutput {
	return o.ApplyT(func(v KafkaMirrorTopicKafkaCluster) *KafkaMirrorTopicKafkaClusterCredentials { return v.Credentials }).(KafkaMirrorTopicKafkaClusterCredentialsPtrOutput)
}

// The ID of the destination Kafka cluster, for example, `lkc-abc123`.
func (o KafkaMirrorTopicKafkaClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaMirrorTopicKafkaCluster) string { return v.Id }).(pulumi.StringOutput)
}

// The REST endpoint of the destination Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
func (o KafkaMirrorTopicKafkaClusterOutput) RestEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaMirrorTopicKafkaCluster) *string { return v.RestEndpoint }).(pulumi.StringPtrOutput)
}

type KafkaMirrorTopicKafkaClusterPtrOutput struct{ *pulumi.OutputState }

func (KafkaMirrorTopicKafkaClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaMirrorTopicKafkaCluster)(nil)).Elem()
}

func (o KafkaMirrorTopicKafkaClusterPtrOutput) ToKafkaMirrorTopicKafkaClusterPtrOutput() KafkaMirrorTopicKafkaClusterPtrOutput {
	return o
}

func (o KafkaMirrorTopicKafkaClusterPtrOutput) ToKafkaMirrorTopicKafkaClusterPtrOutputWithContext(ctx context.Context) KafkaMirrorTopicKafkaClusterPtrOutput {
	return o
}

func (o KafkaMirrorTopicKafkaClusterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*KafkaMirrorTopicKafkaCluster] {
	return pulumix.Output[*KafkaMirrorTopicKafkaCluster]{
		OutputState: o.OutputState,
	}
}

func (o KafkaMirrorTopicKafkaClusterPtrOutput) Elem() KafkaMirrorTopicKafkaClusterOutput {
	return o.ApplyT(func(v *KafkaMirrorTopicKafkaCluster) KafkaMirrorTopicKafkaCluster {
		if v != nil {
			return *v
		}
		var ret KafkaMirrorTopicKafkaCluster
		return ret
	}).(KafkaMirrorTopicKafkaClusterOutput)
}

func (o KafkaMirrorTopicKafkaClusterPtrOutput) Credentials() KafkaMirrorTopicKafkaClusterCredentialsPtrOutput {
	return o.ApplyT(func(v *KafkaMirrorTopicKafkaCluster) *KafkaMirrorTopicKafkaClusterCredentials {
		if v == nil {
			return nil
		}
		return v.Credentials
	}).(KafkaMirrorTopicKafkaClusterCredentialsPtrOutput)
}

// The ID of the destination Kafka cluster, for example, `lkc-abc123`.
func (o KafkaMirrorTopicKafkaClusterPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaMirrorTopicKafkaCluster) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The REST endpoint of the destination Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
func (o KafkaMirrorTopicKafkaClusterPtrOutput) RestEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaMirrorTopicKafkaCluster) *string {
		if v == nil {
			return nil
		}
		return v.RestEndpoint
	}).(pulumi.StringPtrOutput)
}

type KafkaMirrorTopicKafkaClusterCredentials struct {
	// The Kafka API Key.
	Key string `pulumi:"key"`
	// The Kafka API Secret.
	Secret string `pulumi:"secret"`
}

// KafkaMirrorTopicKafkaClusterCredentialsInput is an input type that accepts KafkaMirrorTopicKafkaClusterCredentialsArgs and KafkaMirrorTopicKafkaClusterCredentialsOutput values.
// You can construct a concrete instance of `KafkaMirrorTopicKafkaClusterCredentialsInput` via:
//
//	KafkaMirrorTopicKafkaClusterCredentialsArgs{...}
type KafkaMirrorTopicKafkaClusterCredentialsInput interface {
	pulumi.Input

	ToKafkaMirrorTopicKafkaClusterCredentialsOutput() KafkaMirrorTopicKafkaClusterCredentialsOutput
	ToKafkaMirrorTopicKafkaClusterCredentialsOutputWithContext(context.Context) KafkaMirrorTopicKafkaClusterCredentialsOutput
}

type KafkaMirrorTopicKafkaClusterCredentialsArgs struct {
	// The Kafka API Key.
	Key pulumi.StringInput `pulumi:"key"`
	// The Kafka API Secret.
	Secret pulumi.StringInput `pulumi:"secret"`
}

func (KafkaMirrorTopicKafkaClusterCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaMirrorTopicKafkaClusterCredentials)(nil)).Elem()
}

func (i KafkaMirrorTopicKafkaClusterCredentialsArgs) ToKafkaMirrorTopicKafkaClusterCredentialsOutput() KafkaMirrorTopicKafkaClusterCredentialsOutput {
	return i.ToKafkaMirrorTopicKafkaClusterCredentialsOutputWithContext(context.Background())
}

func (i KafkaMirrorTopicKafkaClusterCredentialsArgs) ToKafkaMirrorTopicKafkaClusterCredentialsOutputWithContext(ctx context.Context) KafkaMirrorTopicKafkaClusterCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaMirrorTopicKafkaClusterCredentialsOutput)
}

func (i KafkaMirrorTopicKafkaClusterCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[KafkaMirrorTopicKafkaClusterCredentials] {
	return pulumix.Output[KafkaMirrorTopicKafkaClusterCredentials]{
		OutputState: i.ToKafkaMirrorTopicKafkaClusterCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i KafkaMirrorTopicKafkaClusterCredentialsArgs) ToKafkaMirrorTopicKafkaClusterCredentialsPtrOutput() KafkaMirrorTopicKafkaClusterCredentialsPtrOutput {
	return i.ToKafkaMirrorTopicKafkaClusterCredentialsPtrOutputWithContext(context.Background())
}

func (i KafkaMirrorTopicKafkaClusterCredentialsArgs) ToKafkaMirrorTopicKafkaClusterCredentialsPtrOutputWithContext(ctx context.Context) KafkaMirrorTopicKafkaClusterCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaMirrorTopicKafkaClusterCredentialsOutput).ToKafkaMirrorTopicKafkaClusterCredentialsPtrOutputWithContext(ctx)
}

// KafkaMirrorTopicKafkaClusterCredentialsPtrInput is an input type that accepts KafkaMirrorTopicKafkaClusterCredentialsArgs, KafkaMirrorTopicKafkaClusterCredentialsPtr and KafkaMirrorTopicKafkaClusterCredentialsPtrOutput values.
// You can construct a concrete instance of `KafkaMirrorTopicKafkaClusterCredentialsPtrInput` via:
//
//	        KafkaMirrorTopicKafkaClusterCredentialsArgs{...}
//
//	or:
//
//	        nil
type KafkaMirrorTopicKafkaClusterCredentialsPtrInput interface {
	pulumi.Input

	ToKafkaMirrorTopicKafkaClusterCredentialsPtrOutput() KafkaMirrorTopicKafkaClusterCredentialsPtrOutput
	ToKafkaMirrorTopicKafkaClusterCredentialsPtrOutputWithContext(context.Context) KafkaMirrorTopicKafkaClusterCredentialsPtrOutput
}

type kafkaMirrorTopicKafkaClusterCredentialsPtrType KafkaMirrorTopicKafkaClusterCredentialsArgs

func KafkaMirrorTopicKafkaClusterCredentialsPtr(v *KafkaMirrorTopicKafkaClusterCredentialsArgs) KafkaMirrorTopicKafkaClusterCredentialsPtrInput {
	return (*kafkaMirrorTopicKafkaClusterCredentialsPtrType)(v)
}

func (*kafkaMirrorTopicKafkaClusterCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaMirrorTopicKafkaClusterCredentials)(nil)).Elem()
}

func (i *kafkaMirrorTopicKafkaClusterCredentialsPtrType) ToKafkaMirrorTopicKafkaClusterCredentialsPtrOutput() KafkaMirrorTopicKafkaClusterCredentialsPtrOutput {
	return i.ToKafkaMirrorTopicKafkaClusterCredentialsPtrOutputWithContext(context.Background())
}

func (i *kafkaMirrorTopicKafkaClusterCredentialsPtrType) ToKafkaMirrorTopicKafkaClusterCredentialsPtrOutputWithContext(ctx context.Context) KafkaMirrorTopicKafkaClusterCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaMirrorTopicKafkaClusterCredentialsPtrOutput)
}

func (i *kafkaMirrorTopicKafkaClusterCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*KafkaMirrorTopicKafkaClusterCredentials] {
	return pulumix.Output[*KafkaMirrorTopicKafkaClusterCredentials]{
		OutputState: i.ToKafkaMirrorTopicKafkaClusterCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

type KafkaMirrorTopicKafkaClusterCredentialsOutput struct{ *pulumi.OutputState }

func (KafkaMirrorTopicKafkaClusterCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaMirrorTopicKafkaClusterCredentials)(nil)).Elem()
}

func (o KafkaMirrorTopicKafkaClusterCredentialsOutput) ToKafkaMirrorTopicKafkaClusterCredentialsOutput() KafkaMirrorTopicKafkaClusterCredentialsOutput {
	return o
}

func (o KafkaMirrorTopicKafkaClusterCredentialsOutput) ToKafkaMirrorTopicKafkaClusterCredentialsOutputWithContext(ctx context.Context) KafkaMirrorTopicKafkaClusterCredentialsOutput {
	return o
}

func (o KafkaMirrorTopicKafkaClusterCredentialsOutput) ToKafkaMirrorTopicKafkaClusterCredentialsPtrOutput() KafkaMirrorTopicKafkaClusterCredentialsPtrOutput {
	return o.ToKafkaMirrorTopicKafkaClusterCredentialsPtrOutputWithContext(context.Background())
}

func (o KafkaMirrorTopicKafkaClusterCredentialsOutput) ToKafkaMirrorTopicKafkaClusterCredentialsPtrOutputWithContext(ctx context.Context) KafkaMirrorTopicKafkaClusterCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaMirrorTopicKafkaClusterCredentials) *KafkaMirrorTopicKafkaClusterCredentials {
		return &v
	}).(KafkaMirrorTopicKafkaClusterCredentialsPtrOutput)
}

func (o KafkaMirrorTopicKafkaClusterCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[KafkaMirrorTopicKafkaClusterCredentials] {
	return pulumix.Output[KafkaMirrorTopicKafkaClusterCredentials]{
		OutputState: o.OutputState,
	}
}

// The Kafka API Key.
func (o KafkaMirrorTopicKafkaClusterCredentialsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaMirrorTopicKafkaClusterCredentials) string { return v.Key }).(pulumi.StringOutput)
}

// The Kafka API Secret.
func (o KafkaMirrorTopicKafkaClusterCredentialsOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaMirrorTopicKafkaClusterCredentials) string { return v.Secret }).(pulumi.StringOutput)
}

type KafkaMirrorTopicKafkaClusterCredentialsPtrOutput struct{ *pulumi.OutputState }

func (KafkaMirrorTopicKafkaClusterCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaMirrorTopicKafkaClusterCredentials)(nil)).Elem()
}

func (o KafkaMirrorTopicKafkaClusterCredentialsPtrOutput) ToKafkaMirrorTopicKafkaClusterCredentialsPtrOutput() KafkaMirrorTopicKafkaClusterCredentialsPtrOutput {
	return o
}

func (o KafkaMirrorTopicKafkaClusterCredentialsPtrOutput) ToKafkaMirrorTopicKafkaClusterCredentialsPtrOutputWithContext(ctx context.Context) KafkaMirrorTopicKafkaClusterCredentialsPtrOutput {
	return o
}

func (o KafkaMirrorTopicKafkaClusterCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*KafkaMirrorTopicKafkaClusterCredentials] {
	return pulumix.Output[*KafkaMirrorTopicKafkaClusterCredentials]{
		OutputState: o.OutputState,
	}
}

func (o KafkaMirrorTopicKafkaClusterCredentialsPtrOutput) Elem() KafkaMirrorTopicKafkaClusterCredentialsOutput {
	return o.ApplyT(func(v *KafkaMirrorTopicKafkaClusterCredentials) KafkaMirrorTopicKafkaClusterCredentials {
		if v != nil {
			return *v
		}
		var ret KafkaMirrorTopicKafkaClusterCredentials
		return ret
	}).(KafkaMirrorTopicKafkaClusterCredentialsOutput)
}

// The Kafka API Key.
func (o KafkaMirrorTopicKafkaClusterCredentialsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaMirrorTopicKafkaClusterCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// The Kafka API Secret.
func (o KafkaMirrorTopicKafkaClusterCredentialsPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaMirrorTopicKafkaClusterCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Secret
	}).(pulumi.StringPtrOutput)
}

type KafkaMirrorTopicSourceKafkaTopic struct {
	// The name of the topic on the source cluster to be mirrored over the cluster link, for example, `orders`. A topic with the exact same name must exist on the source cluster, and no topic with this name should exist on the destination cluster.
	TopicName string `pulumi:"topicName"`
}

// KafkaMirrorTopicSourceKafkaTopicInput is an input type that accepts KafkaMirrorTopicSourceKafkaTopicArgs and KafkaMirrorTopicSourceKafkaTopicOutput values.
// You can construct a concrete instance of `KafkaMirrorTopicSourceKafkaTopicInput` via:
//
//	KafkaMirrorTopicSourceKafkaTopicArgs{...}
type KafkaMirrorTopicSourceKafkaTopicInput interface {
	pulumi.Input

	ToKafkaMirrorTopicSourceKafkaTopicOutput() KafkaMirrorTopicSourceKafkaTopicOutput
	ToKafkaMirrorTopicSourceKafkaTopicOutputWithContext(context.Context) KafkaMirrorTopicSourceKafkaTopicOutput
}

type KafkaMirrorTopicSourceKafkaTopicArgs struct {
	// The name of the topic on the source cluster to be mirrored over the cluster link, for example, `orders`. A topic with the exact same name must exist on the source cluster, and no topic with this name should exist on the destination cluster.
	TopicName pulumi.StringInput `pulumi:"topicName"`
}

func (KafkaMirrorTopicSourceKafkaTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaMirrorTopicSourceKafkaTopic)(nil)).Elem()
}

func (i KafkaMirrorTopicSourceKafkaTopicArgs) ToKafkaMirrorTopicSourceKafkaTopicOutput() KafkaMirrorTopicSourceKafkaTopicOutput {
	return i.ToKafkaMirrorTopicSourceKafkaTopicOutputWithContext(context.Background())
}

func (i KafkaMirrorTopicSourceKafkaTopicArgs) ToKafkaMirrorTopicSourceKafkaTopicOutputWithContext(ctx context.Context) KafkaMirrorTopicSourceKafkaTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaMirrorTopicSourceKafkaTopicOutput)
}

func (i KafkaMirrorTopicSourceKafkaTopicArgs) ToOutput(ctx context.Context) pulumix.Output[KafkaMirrorTopicSourceKafkaTopic] {
	return pulumix.Output[KafkaMirrorTopicSourceKafkaTopic]{
		OutputState: i.ToKafkaMirrorTopicSourceKafkaTopicOutputWithContext(ctx).OutputState,
	}
}

func (i KafkaMirrorTopicSourceKafkaTopicArgs) ToKafkaMirrorTopicSourceKafkaTopicPtrOutput() KafkaMirrorTopicSourceKafkaTopicPtrOutput {
	return i.ToKafkaMirrorTopicSourceKafkaTopicPtrOutputWithContext(context.Background())
}

func (i KafkaMirrorTopicSourceKafkaTopicArgs) ToKafkaMirrorTopicSourceKafkaTopicPtrOutputWithContext(ctx context.Context) KafkaMirrorTopicSourceKafkaTopicPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaMirrorTopicSourceKafkaTopicOutput).ToKafkaMirrorTopicSourceKafkaTopicPtrOutputWithContext(ctx)
}

// KafkaMirrorTopicSourceKafkaTopicPtrInput is an input type that accepts KafkaMirrorTopicSourceKafkaTopicArgs, KafkaMirrorTopicSourceKafkaTopicPtr and KafkaMirrorTopicSourceKafkaTopicPtrOutput values.
// You can construct a concrete instance of `KafkaMirrorTopicSourceKafkaTopicPtrInput` via:
//
//	        KafkaMirrorTopicSourceKafkaTopicArgs{...}
//
//	or:
//
//	        nil
type KafkaMirrorTopicSourceKafkaTopicPtrInput interface {
	pulumi.Input

	ToKafkaMirrorTopicSourceKafkaTopicPtrOutput() KafkaMirrorTopicSourceKafkaTopicPtrOutput
	ToKafkaMirrorTopicSourceKafkaTopicPtrOutputWithContext(context.Context) KafkaMirrorTopicSourceKafkaTopicPtrOutput
}

type kafkaMirrorTopicSourceKafkaTopicPtrType KafkaMirrorTopicSourceKafkaTopicArgs

func KafkaMirrorTopicSourceKafkaTopicPtr(v *KafkaMirrorTopicSourceKafkaTopicArgs) KafkaMirrorTopicSourceKafkaTopicPtrInput {
	return (*kafkaMirrorTopicSourceKafkaTopicPtrType)(v)
}

func (*kafkaMirrorTopicSourceKafkaTopicPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaMirrorTopicSourceKafkaTopic)(nil)).Elem()
}

func (i *kafkaMirrorTopicSourceKafkaTopicPtrType) ToKafkaMirrorTopicSourceKafkaTopicPtrOutput() KafkaMirrorTopicSourceKafkaTopicPtrOutput {
	return i.ToKafkaMirrorTopicSourceKafkaTopicPtrOutputWithContext(context.Background())
}

func (i *kafkaMirrorTopicSourceKafkaTopicPtrType) ToKafkaMirrorTopicSourceKafkaTopicPtrOutputWithContext(ctx context.Context) KafkaMirrorTopicSourceKafkaTopicPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaMirrorTopicSourceKafkaTopicPtrOutput)
}

func (i *kafkaMirrorTopicSourceKafkaTopicPtrType) ToOutput(ctx context.Context) pulumix.Output[*KafkaMirrorTopicSourceKafkaTopic] {
	return pulumix.Output[*KafkaMirrorTopicSourceKafkaTopic]{
		OutputState: i.ToKafkaMirrorTopicSourceKafkaTopicPtrOutputWithContext(ctx).OutputState,
	}
}

type KafkaMirrorTopicSourceKafkaTopicOutput struct{ *pulumi.OutputState }

func (KafkaMirrorTopicSourceKafkaTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaMirrorTopicSourceKafkaTopic)(nil)).Elem()
}

func (o KafkaMirrorTopicSourceKafkaTopicOutput) ToKafkaMirrorTopicSourceKafkaTopicOutput() KafkaMirrorTopicSourceKafkaTopicOutput {
	return o
}

func (o KafkaMirrorTopicSourceKafkaTopicOutput) ToKafkaMirrorTopicSourceKafkaTopicOutputWithContext(ctx context.Context) KafkaMirrorTopicSourceKafkaTopicOutput {
	return o
}

func (o KafkaMirrorTopicSourceKafkaTopicOutput) ToKafkaMirrorTopicSourceKafkaTopicPtrOutput() KafkaMirrorTopicSourceKafkaTopicPtrOutput {
	return o.ToKafkaMirrorTopicSourceKafkaTopicPtrOutputWithContext(context.Background())
}

func (o KafkaMirrorTopicSourceKafkaTopicOutput) ToKafkaMirrorTopicSourceKafkaTopicPtrOutputWithContext(ctx context.Context) KafkaMirrorTopicSourceKafkaTopicPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaMirrorTopicSourceKafkaTopic) *KafkaMirrorTopicSourceKafkaTopic {
		return &v
	}).(KafkaMirrorTopicSourceKafkaTopicPtrOutput)
}

func (o KafkaMirrorTopicSourceKafkaTopicOutput) ToOutput(ctx context.Context) pulumix.Output[KafkaMirrorTopicSourceKafkaTopic] {
	return pulumix.Output[KafkaMirrorTopicSourceKafkaTopic]{
		OutputState: o.OutputState,
	}
}

// The name of the topic on the source cluster to be mirrored over the cluster link, for example, `orders`. A topic with the exact same name must exist on the source cluster, and no topic with this name should exist on the destination cluster.
func (o KafkaMirrorTopicSourceKafkaTopicOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaMirrorTopicSourceKafkaTopic) string { return v.TopicName }).(pulumi.StringOutput)
}

type KafkaMirrorTopicSourceKafkaTopicPtrOutput struct{ *pulumi.OutputState }

func (KafkaMirrorTopicSourceKafkaTopicPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaMirrorTopicSourceKafkaTopic)(nil)).Elem()
}

func (o KafkaMirrorTopicSourceKafkaTopicPtrOutput) ToKafkaMirrorTopicSourceKafkaTopicPtrOutput() KafkaMirrorTopicSourceKafkaTopicPtrOutput {
	return o
}

func (o KafkaMirrorTopicSourceKafkaTopicPtrOutput) ToKafkaMirrorTopicSourceKafkaTopicPtrOutputWithContext(ctx context.Context) KafkaMirrorTopicSourceKafkaTopicPtrOutput {
	return o
}

func (o KafkaMirrorTopicSourceKafkaTopicPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*KafkaMirrorTopicSourceKafkaTopic] {
	return pulumix.Output[*KafkaMirrorTopicSourceKafkaTopic]{
		OutputState: o.OutputState,
	}
}

func (o KafkaMirrorTopicSourceKafkaTopicPtrOutput) Elem() KafkaMirrorTopicSourceKafkaTopicOutput {
	return o.ApplyT(func(v *KafkaMirrorTopicSourceKafkaTopic) KafkaMirrorTopicSourceKafkaTopic {
		if v != nil {
			return *v
		}
		var ret KafkaMirrorTopicSourceKafkaTopic
		return ret
	}).(KafkaMirrorTopicSourceKafkaTopicOutput)
}

// The name of the topic on the source cluster to be mirrored over the cluster link, for example, `orders`. A topic with the exact same name must exist on the source cluster, and no topic with this name should exist on the destination cluster.
func (o KafkaMirrorTopicSourceKafkaTopicPtrOutput) TopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaMirrorTopicSourceKafkaTopic) *string {
		if v == nil {
			return nil
		}
		return &v.TopicName
	}).(pulumi.StringPtrOutput)
}

type KafkaTopicCredentials struct {
	// The Kafka API Key.
	Key string `pulumi:"key"`
	// The Kafka API Secret.
	//
	// > **Note:** A Kafka API key consists of a key and a secret. Kafka API keys are required to interact with Kafka clusters in Confluent Cloud. Each Kafka API key is valid for one specific Kafka cluster.
	//
	// > **Note:** Use Option #2 to simplify the key rotation process. When using Option #1, to rotate a Kafka API key, create a new Kafka API key, update the `credentials` block in all configuration files to use the new Kafka API key, run `pulumi up -target="confluent_kafka_topic.orders"`, and remove the old Kafka API key. Alternatively, in case the old Kafka API Key was deleted already, you might need to run `pulumi preview -refresh=false -target="confluent_kafka_topic.orders" -out=rotate-kafka-api-key` and `pulumi up rotate-kafka-api-key` instead.
	Secret string `pulumi:"secret"`
}

// KafkaTopicCredentialsInput is an input type that accepts KafkaTopicCredentialsArgs and KafkaTopicCredentialsOutput values.
// You can construct a concrete instance of `KafkaTopicCredentialsInput` via:
//
//	KafkaTopicCredentialsArgs{...}
type KafkaTopicCredentialsInput interface {
	pulumi.Input

	ToKafkaTopicCredentialsOutput() KafkaTopicCredentialsOutput
	ToKafkaTopicCredentialsOutputWithContext(context.Context) KafkaTopicCredentialsOutput
}

type KafkaTopicCredentialsArgs struct {
	// The Kafka API Key.
	Key pulumi.StringInput `pulumi:"key"`
	// The Kafka API Secret.
	//
	// > **Note:** A Kafka API key consists of a key and a secret. Kafka API keys are required to interact with Kafka clusters in Confluent Cloud. Each Kafka API key is valid for one specific Kafka cluster.
	//
	// > **Note:** Use Option #2 to simplify the key rotation process. When using Option #1, to rotate a Kafka API key, create a new Kafka API key, update the `credentials` block in all configuration files to use the new Kafka API key, run `pulumi up -target="confluent_kafka_topic.orders"`, and remove the old Kafka API key. Alternatively, in case the old Kafka API Key was deleted already, you might need to run `pulumi preview -refresh=false -target="confluent_kafka_topic.orders" -out=rotate-kafka-api-key` and `pulumi up rotate-kafka-api-key` instead.
	Secret pulumi.StringInput `pulumi:"secret"`
}

func (KafkaTopicCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicCredentials)(nil)).Elem()
}

func (i KafkaTopicCredentialsArgs) ToKafkaTopicCredentialsOutput() KafkaTopicCredentialsOutput {
	return i.ToKafkaTopicCredentialsOutputWithContext(context.Background())
}

func (i KafkaTopicCredentialsArgs) ToKafkaTopicCredentialsOutputWithContext(ctx context.Context) KafkaTopicCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicCredentialsOutput)
}

func (i KafkaTopicCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[KafkaTopicCredentials] {
	return pulumix.Output[KafkaTopicCredentials]{
		OutputState: i.ToKafkaTopicCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i KafkaTopicCredentialsArgs) ToKafkaTopicCredentialsPtrOutput() KafkaTopicCredentialsPtrOutput {
	return i.ToKafkaTopicCredentialsPtrOutputWithContext(context.Background())
}

func (i KafkaTopicCredentialsArgs) ToKafkaTopicCredentialsPtrOutputWithContext(ctx context.Context) KafkaTopicCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicCredentialsOutput).ToKafkaTopicCredentialsPtrOutputWithContext(ctx)
}

// KafkaTopicCredentialsPtrInput is an input type that accepts KafkaTopicCredentialsArgs, KafkaTopicCredentialsPtr and KafkaTopicCredentialsPtrOutput values.
// You can construct a concrete instance of `KafkaTopicCredentialsPtrInput` via:
//
//	        KafkaTopicCredentialsArgs{...}
//
//	or:
//
//	        nil
type KafkaTopicCredentialsPtrInput interface {
	pulumi.Input

	ToKafkaTopicCredentialsPtrOutput() KafkaTopicCredentialsPtrOutput
	ToKafkaTopicCredentialsPtrOutputWithContext(context.Context) KafkaTopicCredentialsPtrOutput
}

type kafkaTopicCredentialsPtrType KafkaTopicCredentialsArgs

func KafkaTopicCredentialsPtr(v *KafkaTopicCredentialsArgs) KafkaTopicCredentialsPtrInput {
	return (*kafkaTopicCredentialsPtrType)(v)
}

func (*kafkaTopicCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopicCredentials)(nil)).Elem()
}

func (i *kafkaTopicCredentialsPtrType) ToKafkaTopicCredentialsPtrOutput() KafkaTopicCredentialsPtrOutput {
	return i.ToKafkaTopicCredentialsPtrOutputWithContext(context.Background())
}

func (i *kafkaTopicCredentialsPtrType) ToKafkaTopicCredentialsPtrOutputWithContext(ctx context.Context) KafkaTopicCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicCredentialsPtrOutput)
}

func (i *kafkaTopicCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*KafkaTopicCredentials] {
	return pulumix.Output[*KafkaTopicCredentials]{
		OutputState: i.ToKafkaTopicCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

type KafkaTopicCredentialsOutput struct{ *pulumi.OutputState }

func (KafkaTopicCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicCredentials)(nil)).Elem()
}

func (o KafkaTopicCredentialsOutput) ToKafkaTopicCredentialsOutput() KafkaTopicCredentialsOutput {
	return o
}

func (o KafkaTopicCredentialsOutput) ToKafkaTopicCredentialsOutputWithContext(ctx context.Context) KafkaTopicCredentialsOutput {
	return o
}

func (o KafkaTopicCredentialsOutput) ToKafkaTopicCredentialsPtrOutput() KafkaTopicCredentialsPtrOutput {
	return o.ToKafkaTopicCredentialsPtrOutputWithContext(context.Background())
}

func (o KafkaTopicCredentialsOutput) ToKafkaTopicCredentialsPtrOutputWithContext(ctx context.Context) KafkaTopicCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaTopicCredentials) *KafkaTopicCredentials {
		return &v
	}).(KafkaTopicCredentialsPtrOutput)
}

func (o KafkaTopicCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[KafkaTopicCredentials] {
	return pulumix.Output[KafkaTopicCredentials]{
		OutputState: o.OutputState,
	}
}

// The Kafka API Key.
func (o KafkaTopicCredentialsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaTopicCredentials) string { return v.Key }).(pulumi.StringOutput)
}

// The Kafka API Secret.
//
// > **Note:** A Kafka API key consists of a key and a secret. Kafka API keys are required to interact with Kafka clusters in Confluent Cloud. Each Kafka API key is valid for one specific Kafka cluster.
//
// > **Note:** Use Option #2 to simplify the key rotation process. When using Option #1, to rotate a Kafka API key, create a new Kafka API key, update the `credentials` block in all configuration files to use the new Kafka API key, run `pulumi up -target="confluent_kafka_topic.orders"`, and remove the old Kafka API key. Alternatively, in case the old Kafka API Key was deleted already, you might need to run `pulumi preview -refresh=false -target="confluent_kafka_topic.orders" -out=rotate-kafka-api-key` and `pulumi up rotate-kafka-api-key` instead.
func (o KafkaTopicCredentialsOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaTopicCredentials) string { return v.Secret }).(pulumi.StringOutput)
}

type KafkaTopicCredentialsPtrOutput struct{ *pulumi.OutputState }

func (KafkaTopicCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopicCredentials)(nil)).Elem()
}

func (o KafkaTopicCredentialsPtrOutput) ToKafkaTopicCredentialsPtrOutput() KafkaTopicCredentialsPtrOutput {
	return o
}

func (o KafkaTopicCredentialsPtrOutput) ToKafkaTopicCredentialsPtrOutputWithContext(ctx context.Context) KafkaTopicCredentialsPtrOutput {
	return o
}

func (o KafkaTopicCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*KafkaTopicCredentials] {
	return pulumix.Output[*KafkaTopicCredentials]{
		OutputState: o.OutputState,
	}
}

func (o KafkaTopicCredentialsPtrOutput) Elem() KafkaTopicCredentialsOutput {
	return o.ApplyT(func(v *KafkaTopicCredentials) KafkaTopicCredentials {
		if v != nil {
			return *v
		}
		var ret KafkaTopicCredentials
		return ret
	}).(KafkaTopicCredentialsOutput)
}

// The Kafka API Key.
func (o KafkaTopicCredentialsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaTopicCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// The Kafka API Secret.
//
// > **Note:** A Kafka API key consists of a key and a secret. Kafka API keys are required to interact with Kafka clusters in Confluent Cloud. Each Kafka API key is valid for one specific Kafka cluster.
//
// > **Note:** Use Option #2 to simplify the key rotation process. When using Option #1, to rotate a Kafka API key, create a new Kafka API key, update the `credentials` block in all configuration files to use the new Kafka API key, run `pulumi up -target="confluent_kafka_topic.orders"`, and remove the old Kafka API key. Alternatively, in case the old Kafka API Key was deleted already, you might need to run `pulumi preview -refresh=false -target="confluent_kafka_topic.orders" -out=rotate-kafka-api-key` and `pulumi up rotate-kafka-api-key` instead.
func (o KafkaTopicCredentialsPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaTopicCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Secret
	}).(pulumi.StringPtrOutput)
}

type KafkaTopicKafkaCluster struct {
	// The ID of the Kafka cluster, for example, `lkc-abc123`.
	Id string `pulumi:"id"`
}

// KafkaTopicKafkaClusterInput is an input type that accepts KafkaTopicKafkaClusterArgs and KafkaTopicKafkaClusterOutput values.
// You can construct a concrete instance of `KafkaTopicKafkaClusterInput` via:
//
//	KafkaTopicKafkaClusterArgs{...}
type KafkaTopicKafkaClusterInput interface {
	pulumi.Input

	ToKafkaTopicKafkaClusterOutput() KafkaTopicKafkaClusterOutput
	ToKafkaTopicKafkaClusterOutputWithContext(context.Context) KafkaTopicKafkaClusterOutput
}

type KafkaTopicKafkaClusterArgs struct {
	// The ID of the Kafka cluster, for example, `lkc-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (KafkaTopicKafkaClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicKafkaCluster)(nil)).Elem()
}

func (i KafkaTopicKafkaClusterArgs) ToKafkaTopicKafkaClusterOutput() KafkaTopicKafkaClusterOutput {
	return i.ToKafkaTopicKafkaClusterOutputWithContext(context.Background())
}

func (i KafkaTopicKafkaClusterArgs) ToKafkaTopicKafkaClusterOutputWithContext(ctx context.Context) KafkaTopicKafkaClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicKafkaClusterOutput)
}

func (i KafkaTopicKafkaClusterArgs) ToOutput(ctx context.Context) pulumix.Output[KafkaTopicKafkaCluster] {
	return pulumix.Output[KafkaTopicKafkaCluster]{
		OutputState: i.ToKafkaTopicKafkaClusterOutputWithContext(ctx).OutputState,
	}
}

func (i KafkaTopicKafkaClusterArgs) ToKafkaTopicKafkaClusterPtrOutput() KafkaTopicKafkaClusterPtrOutput {
	return i.ToKafkaTopicKafkaClusterPtrOutputWithContext(context.Background())
}

func (i KafkaTopicKafkaClusterArgs) ToKafkaTopicKafkaClusterPtrOutputWithContext(ctx context.Context) KafkaTopicKafkaClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicKafkaClusterOutput).ToKafkaTopicKafkaClusterPtrOutputWithContext(ctx)
}

// KafkaTopicKafkaClusterPtrInput is an input type that accepts KafkaTopicKafkaClusterArgs, KafkaTopicKafkaClusterPtr and KafkaTopicKafkaClusterPtrOutput values.
// You can construct a concrete instance of `KafkaTopicKafkaClusterPtrInput` via:
//
//	        KafkaTopicKafkaClusterArgs{...}
//
//	or:
//
//	        nil
type KafkaTopicKafkaClusterPtrInput interface {
	pulumi.Input

	ToKafkaTopicKafkaClusterPtrOutput() KafkaTopicKafkaClusterPtrOutput
	ToKafkaTopicKafkaClusterPtrOutputWithContext(context.Context) KafkaTopicKafkaClusterPtrOutput
}

type kafkaTopicKafkaClusterPtrType KafkaTopicKafkaClusterArgs

func KafkaTopicKafkaClusterPtr(v *KafkaTopicKafkaClusterArgs) KafkaTopicKafkaClusterPtrInput {
	return (*kafkaTopicKafkaClusterPtrType)(v)
}

func (*kafkaTopicKafkaClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopicKafkaCluster)(nil)).Elem()
}

func (i *kafkaTopicKafkaClusterPtrType) ToKafkaTopicKafkaClusterPtrOutput() KafkaTopicKafkaClusterPtrOutput {
	return i.ToKafkaTopicKafkaClusterPtrOutputWithContext(context.Background())
}

func (i *kafkaTopicKafkaClusterPtrType) ToKafkaTopicKafkaClusterPtrOutputWithContext(ctx context.Context) KafkaTopicKafkaClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicKafkaClusterPtrOutput)
}

func (i *kafkaTopicKafkaClusterPtrType) ToOutput(ctx context.Context) pulumix.Output[*KafkaTopicKafkaCluster] {
	return pulumix.Output[*KafkaTopicKafkaCluster]{
		OutputState: i.ToKafkaTopicKafkaClusterPtrOutputWithContext(ctx).OutputState,
	}
}

type KafkaTopicKafkaClusterOutput struct{ *pulumi.OutputState }

func (KafkaTopicKafkaClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicKafkaCluster)(nil)).Elem()
}

func (o KafkaTopicKafkaClusterOutput) ToKafkaTopicKafkaClusterOutput() KafkaTopicKafkaClusterOutput {
	return o
}

func (o KafkaTopicKafkaClusterOutput) ToKafkaTopicKafkaClusterOutputWithContext(ctx context.Context) KafkaTopicKafkaClusterOutput {
	return o
}

func (o KafkaTopicKafkaClusterOutput) ToKafkaTopicKafkaClusterPtrOutput() KafkaTopicKafkaClusterPtrOutput {
	return o.ToKafkaTopicKafkaClusterPtrOutputWithContext(context.Background())
}

func (o KafkaTopicKafkaClusterOutput) ToKafkaTopicKafkaClusterPtrOutputWithContext(ctx context.Context) KafkaTopicKafkaClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaTopicKafkaCluster) *KafkaTopicKafkaCluster {
		return &v
	}).(KafkaTopicKafkaClusterPtrOutput)
}

func (o KafkaTopicKafkaClusterOutput) ToOutput(ctx context.Context) pulumix.Output[KafkaTopicKafkaCluster] {
	return pulumix.Output[KafkaTopicKafkaCluster]{
		OutputState: o.OutputState,
	}
}

// The ID of the Kafka cluster, for example, `lkc-abc123`.
func (o KafkaTopicKafkaClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaTopicKafkaCluster) string { return v.Id }).(pulumi.StringOutput)
}

type KafkaTopicKafkaClusterPtrOutput struct{ *pulumi.OutputState }

func (KafkaTopicKafkaClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopicKafkaCluster)(nil)).Elem()
}

func (o KafkaTopicKafkaClusterPtrOutput) ToKafkaTopicKafkaClusterPtrOutput() KafkaTopicKafkaClusterPtrOutput {
	return o
}

func (o KafkaTopicKafkaClusterPtrOutput) ToKafkaTopicKafkaClusterPtrOutputWithContext(ctx context.Context) KafkaTopicKafkaClusterPtrOutput {
	return o
}

func (o KafkaTopicKafkaClusterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*KafkaTopicKafkaCluster] {
	return pulumix.Output[*KafkaTopicKafkaCluster]{
		OutputState: o.OutputState,
	}
}

func (o KafkaTopicKafkaClusterPtrOutput) Elem() KafkaTopicKafkaClusterOutput {
	return o.ApplyT(func(v *KafkaTopicKafkaCluster) KafkaTopicKafkaCluster {
		if v != nil {
			return *v
		}
		var ret KafkaTopicKafkaCluster
		return ret
	}).(KafkaTopicKafkaClusterOutput)
}

// The ID of the Kafka cluster, for example, `lkc-abc123`.
func (o KafkaTopicKafkaClusterPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaTopicKafkaCluster) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type KsqlClusterCredentialIdentity struct {
	// The ID of the associated service or user account, for example, `sa-abc123`.
	Id string `pulumi:"id"`
}

// KsqlClusterCredentialIdentityInput is an input type that accepts KsqlClusterCredentialIdentityArgs and KsqlClusterCredentialIdentityOutput values.
// You can construct a concrete instance of `KsqlClusterCredentialIdentityInput` via:
//
//	KsqlClusterCredentialIdentityArgs{...}
type KsqlClusterCredentialIdentityInput interface {
	pulumi.Input

	ToKsqlClusterCredentialIdentityOutput() KsqlClusterCredentialIdentityOutput
	ToKsqlClusterCredentialIdentityOutputWithContext(context.Context) KsqlClusterCredentialIdentityOutput
}

type KsqlClusterCredentialIdentityArgs struct {
	// The ID of the associated service or user account, for example, `sa-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (KsqlClusterCredentialIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KsqlClusterCredentialIdentity)(nil)).Elem()
}

func (i KsqlClusterCredentialIdentityArgs) ToKsqlClusterCredentialIdentityOutput() KsqlClusterCredentialIdentityOutput {
	return i.ToKsqlClusterCredentialIdentityOutputWithContext(context.Background())
}

func (i KsqlClusterCredentialIdentityArgs) ToKsqlClusterCredentialIdentityOutputWithContext(ctx context.Context) KsqlClusterCredentialIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KsqlClusterCredentialIdentityOutput)
}

func (i KsqlClusterCredentialIdentityArgs) ToOutput(ctx context.Context) pulumix.Output[KsqlClusterCredentialIdentity] {
	return pulumix.Output[KsqlClusterCredentialIdentity]{
		OutputState: i.ToKsqlClusterCredentialIdentityOutputWithContext(ctx).OutputState,
	}
}

func (i KsqlClusterCredentialIdentityArgs) ToKsqlClusterCredentialIdentityPtrOutput() KsqlClusterCredentialIdentityPtrOutput {
	return i.ToKsqlClusterCredentialIdentityPtrOutputWithContext(context.Background())
}

func (i KsqlClusterCredentialIdentityArgs) ToKsqlClusterCredentialIdentityPtrOutputWithContext(ctx context.Context) KsqlClusterCredentialIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KsqlClusterCredentialIdentityOutput).ToKsqlClusterCredentialIdentityPtrOutputWithContext(ctx)
}

// KsqlClusterCredentialIdentityPtrInput is an input type that accepts KsqlClusterCredentialIdentityArgs, KsqlClusterCredentialIdentityPtr and KsqlClusterCredentialIdentityPtrOutput values.
// You can construct a concrete instance of `KsqlClusterCredentialIdentityPtrInput` via:
//
//	        KsqlClusterCredentialIdentityArgs{...}
//
//	or:
//
//	        nil
type KsqlClusterCredentialIdentityPtrInput interface {
	pulumi.Input

	ToKsqlClusterCredentialIdentityPtrOutput() KsqlClusterCredentialIdentityPtrOutput
	ToKsqlClusterCredentialIdentityPtrOutputWithContext(context.Context) KsqlClusterCredentialIdentityPtrOutput
}

type ksqlClusterCredentialIdentityPtrType KsqlClusterCredentialIdentityArgs

func KsqlClusterCredentialIdentityPtr(v *KsqlClusterCredentialIdentityArgs) KsqlClusterCredentialIdentityPtrInput {
	return (*ksqlClusterCredentialIdentityPtrType)(v)
}

func (*ksqlClusterCredentialIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KsqlClusterCredentialIdentity)(nil)).Elem()
}

func (i *ksqlClusterCredentialIdentityPtrType) ToKsqlClusterCredentialIdentityPtrOutput() KsqlClusterCredentialIdentityPtrOutput {
	return i.ToKsqlClusterCredentialIdentityPtrOutputWithContext(context.Background())
}

func (i *ksqlClusterCredentialIdentityPtrType) ToKsqlClusterCredentialIdentityPtrOutputWithContext(ctx context.Context) KsqlClusterCredentialIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KsqlClusterCredentialIdentityPtrOutput)
}

func (i *ksqlClusterCredentialIdentityPtrType) ToOutput(ctx context.Context) pulumix.Output[*KsqlClusterCredentialIdentity] {
	return pulumix.Output[*KsqlClusterCredentialIdentity]{
		OutputState: i.ToKsqlClusterCredentialIdentityPtrOutputWithContext(ctx).OutputState,
	}
}

type KsqlClusterCredentialIdentityOutput struct{ *pulumi.OutputState }

func (KsqlClusterCredentialIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KsqlClusterCredentialIdentity)(nil)).Elem()
}

func (o KsqlClusterCredentialIdentityOutput) ToKsqlClusterCredentialIdentityOutput() KsqlClusterCredentialIdentityOutput {
	return o
}

func (o KsqlClusterCredentialIdentityOutput) ToKsqlClusterCredentialIdentityOutputWithContext(ctx context.Context) KsqlClusterCredentialIdentityOutput {
	return o
}

func (o KsqlClusterCredentialIdentityOutput) ToKsqlClusterCredentialIdentityPtrOutput() KsqlClusterCredentialIdentityPtrOutput {
	return o.ToKsqlClusterCredentialIdentityPtrOutputWithContext(context.Background())
}

func (o KsqlClusterCredentialIdentityOutput) ToKsqlClusterCredentialIdentityPtrOutputWithContext(ctx context.Context) KsqlClusterCredentialIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KsqlClusterCredentialIdentity) *KsqlClusterCredentialIdentity {
		return &v
	}).(KsqlClusterCredentialIdentityPtrOutput)
}

func (o KsqlClusterCredentialIdentityOutput) ToOutput(ctx context.Context) pulumix.Output[KsqlClusterCredentialIdentity] {
	return pulumix.Output[KsqlClusterCredentialIdentity]{
		OutputState: o.OutputState,
	}
}

// The ID of the associated service or user account, for example, `sa-abc123`.
func (o KsqlClusterCredentialIdentityOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v KsqlClusterCredentialIdentity) string { return v.Id }).(pulumi.StringOutput)
}

type KsqlClusterCredentialIdentityPtrOutput struct{ *pulumi.OutputState }

func (KsqlClusterCredentialIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KsqlClusterCredentialIdentity)(nil)).Elem()
}

func (o KsqlClusterCredentialIdentityPtrOutput) ToKsqlClusterCredentialIdentityPtrOutput() KsqlClusterCredentialIdentityPtrOutput {
	return o
}

func (o KsqlClusterCredentialIdentityPtrOutput) ToKsqlClusterCredentialIdentityPtrOutputWithContext(ctx context.Context) KsqlClusterCredentialIdentityPtrOutput {
	return o
}

func (o KsqlClusterCredentialIdentityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*KsqlClusterCredentialIdentity] {
	return pulumix.Output[*KsqlClusterCredentialIdentity]{
		OutputState: o.OutputState,
	}
}

func (o KsqlClusterCredentialIdentityPtrOutput) Elem() KsqlClusterCredentialIdentityOutput {
	return o.ApplyT(func(v *KsqlClusterCredentialIdentity) KsqlClusterCredentialIdentity {
		if v != nil {
			return *v
		}
		var ret KsqlClusterCredentialIdentity
		return ret
	}).(KsqlClusterCredentialIdentityOutput)
}

// The ID of the associated service or user account, for example, `sa-abc123`.
func (o KsqlClusterCredentialIdentityPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KsqlClusterCredentialIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type KsqlClusterEnvironment struct {
	// The ID of the associated service or user account, for example, `sa-abc123`.
	Id string `pulumi:"id"`
}

// KsqlClusterEnvironmentInput is an input type that accepts KsqlClusterEnvironmentArgs and KsqlClusterEnvironmentOutput values.
// You can construct a concrete instance of `KsqlClusterEnvironmentInput` via:
//
//	KsqlClusterEnvironmentArgs{...}
type KsqlClusterEnvironmentInput interface {
	pulumi.Input

	ToKsqlClusterEnvironmentOutput() KsqlClusterEnvironmentOutput
	ToKsqlClusterEnvironmentOutputWithContext(context.Context) KsqlClusterEnvironmentOutput
}

type KsqlClusterEnvironmentArgs struct {
	// The ID of the associated service or user account, for example, `sa-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (KsqlClusterEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KsqlClusterEnvironment)(nil)).Elem()
}

func (i KsqlClusterEnvironmentArgs) ToKsqlClusterEnvironmentOutput() KsqlClusterEnvironmentOutput {
	return i.ToKsqlClusterEnvironmentOutputWithContext(context.Background())
}

func (i KsqlClusterEnvironmentArgs) ToKsqlClusterEnvironmentOutputWithContext(ctx context.Context) KsqlClusterEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KsqlClusterEnvironmentOutput)
}

func (i KsqlClusterEnvironmentArgs) ToOutput(ctx context.Context) pulumix.Output[KsqlClusterEnvironment] {
	return pulumix.Output[KsqlClusterEnvironment]{
		OutputState: i.ToKsqlClusterEnvironmentOutputWithContext(ctx).OutputState,
	}
}

func (i KsqlClusterEnvironmentArgs) ToKsqlClusterEnvironmentPtrOutput() KsqlClusterEnvironmentPtrOutput {
	return i.ToKsqlClusterEnvironmentPtrOutputWithContext(context.Background())
}

func (i KsqlClusterEnvironmentArgs) ToKsqlClusterEnvironmentPtrOutputWithContext(ctx context.Context) KsqlClusterEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KsqlClusterEnvironmentOutput).ToKsqlClusterEnvironmentPtrOutputWithContext(ctx)
}

// KsqlClusterEnvironmentPtrInput is an input type that accepts KsqlClusterEnvironmentArgs, KsqlClusterEnvironmentPtr and KsqlClusterEnvironmentPtrOutput values.
// You can construct a concrete instance of `KsqlClusterEnvironmentPtrInput` via:
//
//	        KsqlClusterEnvironmentArgs{...}
//
//	or:
//
//	        nil
type KsqlClusterEnvironmentPtrInput interface {
	pulumi.Input

	ToKsqlClusterEnvironmentPtrOutput() KsqlClusterEnvironmentPtrOutput
	ToKsqlClusterEnvironmentPtrOutputWithContext(context.Context) KsqlClusterEnvironmentPtrOutput
}

type ksqlClusterEnvironmentPtrType KsqlClusterEnvironmentArgs

func KsqlClusterEnvironmentPtr(v *KsqlClusterEnvironmentArgs) KsqlClusterEnvironmentPtrInput {
	return (*ksqlClusterEnvironmentPtrType)(v)
}

func (*ksqlClusterEnvironmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KsqlClusterEnvironment)(nil)).Elem()
}

func (i *ksqlClusterEnvironmentPtrType) ToKsqlClusterEnvironmentPtrOutput() KsqlClusterEnvironmentPtrOutput {
	return i.ToKsqlClusterEnvironmentPtrOutputWithContext(context.Background())
}

func (i *ksqlClusterEnvironmentPtrType) ToKsqlClusterEnvironmentPtrOutputWithContext(ctx context.Context) KsqlClusterEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KsqlClusterEnvironmentPtrOutput)
}

func (i *ksqlClusterEnvironmentPtrType) ToOutput(ctx context.Context) pulumix.Output[*KsqlClusterEnvironment] {
	return pulumix.Output[*KsqlClusterEnvironment]{
		OutputState: i.ToKsqlClusterEnvironmentPtrOutputWithContext(ctx).OutputState,
	}
}

type KsqlClusterEnvironmentOutput struct{ *pulumi.OutputState }

func (KsqlClusterEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KsqlClusterEnvironment)(nil)).Elem()
}

func (o KsqlClusterEnvironmentOutput) ToKsqlClusterEnvironmentOutput() KsqlClusterEnvironmentOutput {
	return o
}

func (o KsqlClusterEnvironmentOutput) ToKsqlClusterEnvironmentOutputWithContext(ctx context.Context) KsqlClusterEnvironmentOutput {
	return o
}

func (o KsqlClusterEnvironmentOutput) ToKsqlClusterEnvironmentPtrOutput() KsqlClusterEnvironmentPtrOutput {
	return o.ToKsqlClusterEnvironmentPtrOutputWithContext(context.Background())
}

func (o KsqlClusterEnvironmentOutput) ToKsqlClusterEnvironmentPtrOutputWithContext(ctx context.Context) KsqlClusterEnvironmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KsqlClusterEnvironment) *KsqlClusterEnvironment {
		return &v
	}).(KsqlClusterEnvironmentPtrOutput)
}

func (o KsqlClusterEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[KsqlClusterEnvironment] {
	return pulumix.Output[KsqlClusterEnvironment]{
		OutputState: o.OutputState,
	}
}

// The ID of the associated service or user account, for example, `sa-abc123`.
func (o KsqlClusterEnvironmentOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v KsqlClusterEnvironment) string { return v.Id }).(pulumi.StringOutput)
}

type KsqlClusterEnvironmentPtrOutput struct{ *pulumi.OutputState }

func (KsqlClusterEnvironmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KsqlClusterEnvironment)(nil)).Elem()
}

func (o KsqlClusterEnvironmentPtrOutput) ToKsqlClusterEnvironmentPtrOutput() KsqlClusterEnvironmentPtrOutput {
	return o
}

func (o KsqlClusterEnvironmentPtrOutput) ToKsqlClusterEnvironmentPtrOutputWithContext(ctx context.Context) KsqlClusterEnvironmentPtrOutput {
	return o
}

func (o KsqlClusterEnvironmentPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*KsqlClusterEnvironment] {
	return pulumix.Output[*KsqlClusterEnvironment]{
		OutputState: o.OutputState,
	}
}

func (o KsqlClusterEnvironmentPtrOutput) Elem() KsqlClusterEnvironmentOutput {
	return o.ApplyT(func(v *KsqlClusterEnvironment) KsqlClusterEnvironment {
		if v != nil {
			return *v
		}
		var ret KsqlClusterEnvironment
		return ret
	}).(KsqlClusterEnvironmentOutput)
}

// The ID of the associated service or user account, for example, `sa-abc123`.
func (o KsqlClusterEnvironmentPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KsqlClusterEnvironment) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type KsqlClusterKafkaCluster struct {
	// The ID of the associated service or user account, for example, `sa-abc123`.
	Id string `pulumi:"id"`
}

// KsqlClusterKafkaClusterInput is an input type that accepts KsqlClusterKafkaClusterArgs and KsqlClusterKafkaClusterOutput values.
// You can construct a concrete instance of `KsqlClusterKafkaClusterInput` via:
//
//	KsqlClusterKafkaClusterArgs{...}
type KsqlClusterKafkaClusterInput interface {
	pulumi.Input

	ToKsqlClusterKafkaClusterOutput() KsqlClusterKafkaClusterOutput
	ToKsqlClusterKafkaClusterOutputWithContext(context.Context) KsqlClusterKafkaClusterOutput
}

type KsqlClusterKafkaClusterArgs struct {
	// The ID of the associated service or user account, for example, `sa-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (KsqlClusterKafkaClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KsqlClusterKafkaCluster)(nil)).Elem()
}

func (i KsqlClusterKafkaClusterArgs) ToKsqlClusterKafkaClusterOutput() KsqlClusterKafkaClusterOutput {
	return i.ToKsqlClusterKafkaClusterOutputWithContext(context.Background())
}

func (i KsqlClusterKafkaClusterArgs) ToKsqlClusterKafkaClusterOutputWithContext(ctx context.Context) KsqlClusterKafkaClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KsqlClusterKafkaClusterOutput)
}

func (i KsqlClusterKafkaClusterArgs) ToOutput(ctx context.Context) pulumix.Output[KsqlClusterKafkaCluster] {
	return pulumix.Output[KsqlClusterKafkaCluster]{
		OutputState: i.ToKsqlClusterKafkaClusterOutputWithContext(ctx).OutputState,
	}
}

func (i KsqlClusterKafkaClusterArgs) ToKsqlClusterKafkaClusterPtrOutput() KsqlClusterKafkaClusterPtrOutput {
	return i.ToKsqlClusterKafkaClusterPtrOutputWithContext(context.Background())
}

func (i KsqlClusterKafkaClusterArgs) ToKsqlClusterKafkaClusterPtrOutputWithContext(ctx context.Context) KsqlClusterKafkaClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KsqlClusterKafkaClusterOutput).ToKsqlClusterKafkaClusterPtrOutputWithContext(ctx)
}

// KsqlClusterKafkaClusterPtrInput is an input type that accepts KsqlClusterKafkaClusterArgs, KsqlClusterKafkaClusterPtr and KsqlClusterKafkaClusterPtrOutput values.
// You can construct a concrete instance of `KsqlClusterKafkaClusterPtrInput` via:
//
//	        KsqlClusterKafkaClusterArgs{...}
//
//	or:
//
//	        nil
type KsqlClusterKafkaClusterPtrInput interface {
	pulumi.Input

	ToKsqlClusterKafkaClusterPtrOutput() KsqlClusterKafkaClusterPtrOutput
	ToKsqlClusterKafkaClusterPtrOutputWithContext(context.Context) KsqlClusterKafkaClusterPtrOutput
}

type ksqlClusterKafkaClusterPtrType KsqlClusterKafkaClusterArgs

func KsqlClusterKafkaClusterPtr(v *KsqlClusterKafkaClusterArgs) KsqlClusterKafkaClusterPtrInput {
	return (*ksqlClusterKafkaClusterPtrType)(v)
}

func (*ksqlClusterKafkaClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KsqlClusterKafkaCluster)(nil)).Elem()
}

func (i *ksqlClusterKafkaClusterPtrType) ToKsqlClusterKafkaClusterPtrOutput() KsqlClusterKafkaClusterPtrOutput {
	return i.ToKsqlClusterKafkaClusterPtrOutputWithContext(context.Background())
}

func (i *ksqlClusterKafkaClusterPtrType) ToKsqlClusterKafkaClusterPtrOutputWithContext(ctx context.Context) KsqlClusterKafkaClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KsqlClusterKafkaClusterPtrOutput)
}

func (i *ksqlClusterKafkaClusterPtrType) ToOutput(ctx context.Context) pulumix.Output[*KsqlClusterKafkaCluster] {
	return pulumix.Output[*KsqlClusterKafkaCluster]{
		OutputState: i.ToKsqlClusterKafkaClusterPtrOutputWithContext(ctx).OutputState,
	}
}

type KsqlClusterKafkaClusterOutput struct{ *pulumi.OutputState }

func (KsqlClusterKafkaClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KsqlClusterKafkaCluster)(nil)).Elem()
}

func (o KsqlClusterKafkaClusterOutput) ToKsqlClusterKafkaClusterOutput() KsqlClusterKafkaClusterOutput {
	return o
}

func (o KsqlClusterKafkaClusterOutput) ToKsqlClusterKafkaClusterOutputWithContext(ctx context.Context) KsqlClusterKafkaClusterOutput {
	return o
}

func (o KsqlClusterKafkaClusterOutput) ToKsqlClusterKafkaClusterPtrOutput() KsqlClusterKafkaClusterPtrOutput {
	return o.ToKsqlClusterKafkaClusterPtrOutputWithContext(context.Background())
}

func (o KsqlClusterKafkaClusterOutput) ToKsqlClusterKafkaClusterPtrOutputWithContext(ctx context.Context) KsqlClusterKafkaClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KsqlClusterKafkaCluster) *KsqlClusterKafkaCluster {
		return &v
	}).(KsqlClusterKafkaClusterPtrOutput)
}

func (o KsqlClusterKafkaClusterOutput) ToOutput(ctx context.Context) pulumix.Output[KsqlClusterKafkaCluster] {
	return pulumix.Output[KsqlClusterKafkaCluster]{
		OutputState: o.OutputState,
	}
}

// The ID of the associated service or user account, for example, `sa-abc123`.
func (o KsqlClusterKafkaClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v KsqlClusterKafkaCluster) string { return v.Id }).(pulumi.StringOutput)
}

type KsqlClusterKafkaClusterPtrOutput struct{ *pulumi.OutputState }

func (KsqlClusterKafkaClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KsqlClusterKafkaCluster)(nil)).Elem()
}

func (o KsqlClusterKafkaClusterPtrOutput) ToKsqlClusterKafkaClusterPtrOutput() KsqlClusterKafkaClusterPtrOutput {
	return o
}

func (o KsqlClusterKafkaClusterPtrOutput) ToKsqlClusterKafkaClusterPtrOutputWithContext(ctx context.Context) KsqlClusterKafkaClusterPtrOutput {
	return o
}

func (o KsqlClusterKafkaClusterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*KsqlClusterKafkaCluster] {
	return pulumix.Output[*KsqlClusterKafkaCluster]{
		OutputState: o.OutputState,
	}
}

func (o KsqlClusterKafkaClusterPtrOutput) Elem() KsqlClusterKafkaClusterOutput {
	return o.ApplyT(func(v *KsqlClusterKafkaCluster) KsqlClusterKafkaCluster {
		if v != nil {
			return *v
		}
		var ret KsqlClusterKafkaCluster
		return ret
	}).(KsqlClusterKafkaClusterOutput)
}

// The ID of the associated service or user account, for example, `sa-abc123`.
func (o KsqlClusterKafkaClusterPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KsqlClusterKafkaCluster) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type NetworkAw struct {
	// (Required String) The AWS account ID associated with the Confluent Cloud VPC.
	Account *string `pulumi:"account"`
	// (Optional String) The endpoint service of the Confluent Cloud VPC (used for PrivateLink) if available.
	PrivateLinkEndpointService *string `pulumi:"privateLinkEndpointService"`
	// (Required String) The Confluent Cloud VPC ID.
	Vpc *string `pulumi:"vpc"`
}

// NetworkAwInput is an input type that accepts NetworkAwArgs and NetworkAwOutput values.
// You can construct a concrete instance of `NetworkAwInput` via:
//
//	NetworkAwArgs{...}
type NetworkAwInput interface {
	pulumi.Input

	ToNetworkAwOutput() NetworkAwOutput
	ToNetworkAwOutputWithContext(context.Context) NetworkAwOutput
}

type NetworkAwArgs struct {
	// (Required String) The AWS account ID associated with the Confluent Cloud VPC.
	Account pulumi.StringPtrInput `pulumi:"account"`
	// (Optional String) The endpoint service of the Confluent Cloud VPC (used for PrivateLink) if available.
	PrivateLinkEndpointService pulumi.StringPtrInput `pulumi:"privateLinkEndpointService"`
	// (Required String) The Confluent Cloud VPC ID.
	Vpc pulumi.StringPtrInput `pulumi:"vpc"`
}

func (NetworkAwArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAw)(nil)).Elem()
}

func (i NetworkAwArgs) ToNetworkAwOutput() NetworkAwOutput {
	return i.ToNetworkAwOutputWithContext(context.Background())
}

func (i NetworkAwArgs) ToNetworkAwOutputWithContext(ctx context.Context) NetworkAwOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAwOutput)
}

func (i NetworkAwArgs) ToOutput(ctx context.Context) pulumix.Output[NetworkAw] {
	return pulumix.Output[NetworkAw]{
		OutputState: i.ToNetworkAwOutputWithContext(ctx).OutputState,
	}
}

// NetworkAwArrayInput is an input type that accepts NetworkAwArray and NetworkAwArrayOutput values.
// You can construct a concrete instance of `NetworkAwArrayInput` via:
//
//	NetworkAwArray{ NetworkAwArgs{...} }
type NetworkAwArrayInput interface {
	pulumi.Input

	ToNetworkAwArrayOutput() NetworkAwArrayOutput
	ToNetworkAwArrayOutputWithContext(context.Context) NetworkAwArrayOutput
}

type NetworkAwArray []NetworkAwInput

func (NetworkAwArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAw)(nil)).Elem()
}

func (i NetworkAwArray) ToNetworkAwArrayOutput() NetworkAwArrayOutput {
	return i.ToNetworkAwArrayOutputWithContext(context.Background())
}

func (i NetworkAwArray) ToNetworkAwArrayOutputWithContext(ctx context.Context) NetworkAwArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAwArrayOutput)
}

func (i NetworkAwArray) ToOutput(ctx context.Context) pulumix.Output[[]NetworkAw] {
	return pulumix.Output[[]NetworkAw]{
		OutputState: i.ToNetworkAwArrayOutputWithContext(ctx).OutputState,
	}
}

type NetworkAwOutput struct{ *pulumi.OutputState }

func (NetworkAwOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAw)(nil)).Elem()
}

func (o NetworkAwOutput) ToNetworkAwOutput() NetworkAwOutput {
	return o
}

func (o NetworkAwOutput) ToNetworkAwOutputWithContext(ctx context.Context) NetworkAwOutput {
	return o
}

func (o NetworkAwOutput) ToOutput(ctx context.Context) pulumix.Output[NetworkAw] {
	return pulumix.Output[NetworkAw]{
		OutputState: o.OutputState,
	}
}

// (Required String) The AWS account ID associated with the Confluent Cloud VPC.
func (o NetworkAwOutput) Account() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAw) *string { return v.Account }).(pulumi.StringPtrOutput)
}

// (Optional String) The endpoint service of the Confluent Cloud VPC (used for PrivateLink) if available.
func (o NetworkAwOutput) PrivateLinkEndpointService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAw) *string { return v.PrivateLinkEndpointService }).(pulumi.StringPtrOutput)
}

// (Required String) The Confluent Cloud VPC ID.
func (o NetworkAwOutput) Vpc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAw) *string { return v.Vpc }).(pulumi.StringPtrOutput)
}

type NetworkAwArrayOutput struct{ *pulumi.OutputState }

func (NetworkAwArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAw)(nil)).Elem()
}

func (o NetworkAwArrayOutput) ToNetworkAwArrayOutput() NetworkAwArrayOutput {
	return o
}

func (o NetworkAwArrayOutput) ToNetworkAwArrayOutputWithContext(ctx context.Context) NetworkAwArrayOutput {
	return o
}

func (o NetworkAwArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]NetworkAw] {
	return pulumix.Output[[]NetworkAw]{
		OutputState: o.OutputState,
	}
}

func (o NetworkAwArrayOutput) Index(i pulumi.IntInput) NetworkAwOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkAw {
		return vs[0].([]NetworkAw)[vs[1].(int)]
	}).(NetworkAwOutput)
}

type NetworkAzure struct {
	// (Optional Map) The mapping of zones to Private Link Service Aliases if available. Keys are zone names, for example, `1` and values are [Azure Private Link Service Aliases](https://docs.microsoft.com/en-us/azure/private-link/private-link-service-overview#share-your-service), for example, `s-nk99e-privatelink-1.8c43dcd0-695c-1234-bc35-11fe6abb303a.centralus.azure.privatelinkservice`.
	PrivateLinkServiceAliases map[string]string `pulumi:"privateLinkServiceAliases"`
}

// NetworkAzureInput is an input type that accepts NetworkAzureArgs and NetworkAzureOutput values.
// You can construct a concrete instance of `NetworkAzureInput` via:
//
//	NetworkAzureArgs{...}
type NetworkAzureInput interface {
	pulumi.Input

	ToNetworkAzureOutput() NetworkAzureOutput
	ToNetworkAzureOutputWithContext(context.Context) NetworkAzureOutput
}

type NetworkAzureArgs struct {
	// (Optional Map) The mapping of zones to Private Link Service Aliases if available. Keys are zone names, for example, `1` and values are [Azure Private Link Service Aliases](https://docs.microsoft.com/en-us/azure/private-link/private-link-service-overview#share-your-service), for example, `s-nk99e-privatelink-1.8c43dcd0-695c-1234-bc35-11fe6abb303a.centralus.azure.privatelinkservice`.
	PrivateLinkServiceAliases pulumi.StringMapInput `pulumi:"privateLinkServiceAliases"`
}

func (NetworkAzureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAzure)(nil)).Elem()
}

func (i NetworkAzureArgs) ToNetworkAzureOutput() NetworkAzureOutput {
	return i.ToNetworkAzureOutputWithContext(context.Background())
}

func (i NetworkAzureArgs) ToNetworkAzureOutputWithContext(ctx context.Context) NetworkAzureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAzureOutput)
}

func (i NetworkAzureArgs) ToOutput(ctx context.Context) pulumix.Output[NetworkAzure] {
	return pulumix.Output[NetworkAzure]{
		OutputState: i.ToNetworkAzureOutputWithContext(ctx).OutputState,
	}
}

// NetworkAzureArrayInput is an input type that accepts NetworkAzureArray and NetworkAzureArrayOutput values.
// You can construct a concrete instance of `NetworkAzureArrayInput` via:
//
//	NetworkAzureArray{ NetworkAzureArgs{...} }
type NetworkAzureArrayInput interface {
	pulumi.Input

	ToNetworkAzureArrayOutput() NetworkAzureArrayOutput
	ToNetworkAzureArrayOutputWithContext(context.Context) NetworkAzureArrayOutput
}

type NetworkAzureArray []NetworkAzureInput

func (NetworkAzureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAzure)(nil)).Elem()
}

func (i NetworkAzureArray) ToNetworkAzureArrayOutput() NetworkAzureArrayOutput {
	return i.ToNetworkAzureArrayOutputWithContext(context.Background())
}

func (i NetworkAzureArray) ToNetworkAzureArrayOutputWithContext(ctx context.Context) NetworkAzureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAzureArrayOutput)
}

func (i NetworkAzureArray) ToOutput(ctx context.Context) pulumix.Output[[]NetworkAzure] {
	return pulumix.Output[[]NetworkAzure]{
		OutputState: i.ToNetworkAzureArrayOutputWithContext(ctx).OutputState,
	}
}

type NetworkAzureOutput struct{ *pulumi.OutputState }

func (NetworkAzureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAzure)(nil)).Elem()
}

func (o NetworkAzureOutput) ToNetworkAzureOutput() NetworkAzureOutput {
	return o
}

func (o NetworkAzureOutput) ToNetworkAzureOutputWithContext(ctx context.Context) NetworkAzureOutput {
	return o
}

func (o NetworkAzureOutput) ToOutput(ctx context.Context) pulumix.Output[NetworkAzure] {
	return pulumix.Output[NetworkAzure]{
		OutputState: o.OutputState,
	}
}

// (Optional Map) The mapping of zones to Private Link Service Aliases if available. Keys are zone names, for example, `1` and values are [Azure Private Link Service Aliases](https://docs.microsoft.com/en-us/azure/private-link/private-link-service-overview#share-your-service), for example, `s-nk99e-privatelink-1.8c43dcd0-695c-1234-bc35-11fe6abb303a.centralus.azure.privatelinkservice`.
func (o NetworkAzureOutput) PrivateLinkServiceAliases() pulumi.StringMapOutput {
	return o.ApplyT(func(v NetworkAzure) map[string]string { return v.PrivateLinkServiceAliases }).(pulumi.StringMapOutput)
}

type NetworkAzureArrayOutput struct{ *pulumi.OutputState }

func (NetworkAzureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAzure)(nil)).Elem()
}

func (o NetworkAzureArrayOutput) ToNetworkAzureArrayOutput() NetworkAzureArrayOutput {
	return o
}

func (o NetworkAzureArrayOutput) ToNetworkAzureArrayOutputWithContext(ctx context.Context) NetworkAzureArrayOutput {
	return o
}

func (o NetworkAzureArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]NetworkAzure] {
	return pulumix.Output[[]NetworkAzure]{
		OutputState: o.OutputState,
	}
}

func (o NetworkAzureArrayOutput) Index(i pulumi.IntInput) NetworkAzureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkAzure {
		return vs[0].([]NetworkAzure)[vs[1].(int)]
	}).(NetworkAzureOutput)
}

type NetworkDnsConfig struct {
	// Network DNS resolution.
	// When resolution is `CHASED_PRIVATE`, clusters in this network require both public and private DNS to resolve cluster endpoints.
	// When resolution is `PRIVATE`, clusters in this network only require private DNS to resolve cluster endpoints.
	Resolution string `pulumi:"resolution"`
}

// NetworkDnsConfigInput is an input type that accepts NetworkDnsConfigArgs and NetworkDnsConfigOutput values.
// You can construct a concrete instance of `NetworkDnsConfigInput` via:
//
//	NetworkDnsConfigArgs{...}
type NetworkDnsConfigInput interface {
	pulumi.Input

	ToNetworkDnsConfigOutput() NetworkDnsConfigOutput
	ToNetworkDnsConfigOutputWithContext(context.Context) NetworkDnsConfigOutput
}

type NetworkDnsConfigArgs struct {
	// Network DNS resolution.
	// When resolution is `CHASED_PRIVATE`, clusters in this network require both public and private DNS to resolve cluster endpoints.
	// When resolution is `PRIVATE`, clusters in this network only require private DNS to resolve cluster endpoints.
	Resolution pulumi.StringInput `pulumi:"resolution"`
}

func (NetworkDnsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkDnsConfig)(nil)).Elem()
}

func (i NetworkDnsConfigArgs) ToNetworkDnsConfigOutput() NetworkDnsConfigOutput {
	return i.ToNetworkDnsConfigOutputWithContext(context.Background())
}

func (i NetworkDnsConfigArgs) ToNetworkDnsConfigOutputWithContext(ctx context.Context) NetworkDnsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDnsConfigOutput)
}

func (i NetworkDnsConfigArgs) ToOutput(ctx context.Context) pulumix.Output[NetworkDnsConfig] {
	return pulumix.Output[NetworkDnsConfig]{
		OutputState: i.ToNetworkDnsConfigOutputWithContext(ctx).OutputState,
	}
}

func (i NetworkDnsConfigArgs) ToNetworkDnsConfigPtrOutput() NetworkDnsConfigPtrOutput {
	return i.ToNetworkDnsConfigPtrOutputWithContext(context.Background())
}

func (i NetworkDnsConfigArgs) ToNetworkDnsConfigPtrOutputWithContext(ctx context.Context) NetworkDnsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDnsConfigOutput).ToNetworkDnsConfigPtrOutputWithContext(ctx)
}

// NetworkDnsConfigPtrInput is an input type that accepts NetworkDnsConfigArgs, NetworkDnsConfigPtr and NetworkDnsConfigPtrOutput values.
// You can construct a concrete instance of `NetworkDnsConfigPtrInput` via:
//
//	        NetworkDnsConfigArgs{...}
//
//	or:
//
//	        nil
type NetworkDnsConfigPtrInput interface {
	pulumi.Input

	ToNetworkDnsConfigPtrOutput() NetworkDnsConfigPtrOutput
	ToNetworkDnsConfigPtrOutputWithContext(context.Context) NetworkDnsConfigPtrOutput
}

type networkDnsConfigPtrType NetworkDnsConfigArgs

func NetworkDnsConfigPtr(v *NetworkDnsConfigArgs) NetworkDnsConfigPtrInput {
	return (*networkDnsConfigPtrType)(v)
}

func (*networkDnsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkDnsConfig)(nil)).Elem()
}

func (i *networkDnsConfigPtrType) ToNetworkDnsConfigPtrOutput() NetworkDnsConfigPtrOutput {
	return i.ToNetworkDnsConfigPtrOutputWithContext(context.Background())
}

func (i *networkDnsConfigPtrType) ToNetworkDnsConfigPtrOutputWithContext(ctx context.Context) NetworkDnsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDnsConfigPtrOutput)
}

func (i *networkDnsConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*NetworkDnsConfig] {
	return pulumix.Output[*NetworkDnsConfig]{
		OutputState: i.ToNetworkDnsConfigPtrOutputWithContext(ctx).OutputState,
	}
}

type NetworkDnsConfigOutput struct{ *pulumi.OutputState }

func (NetworkDnsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkDnsConfig)(nil)).Elem()
}

func (o NetworkDnsConfigOutput) ToNetworkDnsConfigOutput() NetworkDnsConfigOutput {
	return o
}

func (o NetworkDnsConfigOutput) ToNetworkDnsConfigOutputWithContext(ctx context.Context) NetworkDnsConfigOutput {
	return o
}

func (o NetworkDnsConfigOutput) ToNetworkDnsConfigPtrOutput() NetworkDnsConfigPtrOutput {
	return o.ToNetworkDnsConfigPtrOutputWithContext(context.Background())
}

func (o NetworkDnsConfigOutput) ToNetworkDnsConfigPtrOutputWithContext(ctx context.Context) NetworkDnsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkDnsConfig) *NetworkDnsConfig {
		return &v
	}).(NetworkDnsConfigPtrOutput)
}

func (o NetworkDnsConfigOutput) ToOutput(ctx context.Context) pulumix.Output[NetworkDnsConfig] {
	return pulumix.Output[NetworkDnsConfig]{
		OutputState: o.OutputState,
	}
}

// Network DNS resolution.
// When resolution is `CHASED_PRIVATE`, clusters in this network require both public and private DNS to resolve cluster endpoints.
// When resolution is `PRIVATE`, clusters in this network only require private DNS to resolve cluster endpoints.
func (o NetworkDnsConfigOutput) Resolution() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkDnsConfig) string { return v.Resolution }).(pulumi.StringOutput)
}

type NetworkDnsConfigPtrOutput struct{ *pulumi.OutputState }

func (NetworkDnsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkDnsConfig)(nil)).Elem()
}

func (o NetworkDnsConfigPtrOutput) ToNetworkDnsConfigPtrOutput() NetworkDnsConfigPtrOutput {
	return o
}

func (o NetworkDnsConfigPtrOutput) ToNetworkDnsConfigPtrOutputWithContext(ctx context.Context) NetworkDnsConfigPtrOutput {
	return o
}

func (o NetworkDnsConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*NetworkDnsConfig] {
	return pulumix.Output[*NetworkDnsConfig]{
		OutputState: o.OutputState,
	}
}

func (o NetworkDnsConfigPtrOutput) Elem() NetworkDnsConfigOutput {
	return o.ApplyT(func(v *NetworkDnsConfig) NetworkDnsConfig {
		if v != nil {
			return *v
		}
		var ret NetworkDnsConfig
		return ret
	}).(NetworkDnsConfigOutput)
}

// Network DNS resolution.
// When resolution is `CHASED_PRIVATE`, clusters in this network require both public and private DNS to resolve cluster endpoints.
// When resolution is `PRIVATE`, clusters in this network only require private DNS to resolve cluster endpoints.
func (o NetworkDnsConfigPtrOutput) Resolution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDnsConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Resolution
	}).(pulumi.StringPtrOutput)
}

type NetworkEnvironment struct {
	// The ID of the Environment that the Network belongs to, for example, `env-abc123`.
	Id string `pulumi:"id"`
}

// NetworkEnvironmentInput is an input type that accepts NetworkEnvironmentArgs and NetworkEnvironmentOutput values.
// You can construct a concrete instance of `NetworkEnvironmentInput` via:
//
//	NetworkEnvironmentArgs{...}
type NetworkEnvironmentInput interface {
	pulumi.Input

	ToNetworkEnvironmentOutput() NetworkEnvironmentOutput
	ToNetworkEnvironmentOutputWithContext(context.Context) NetworkEnvironmentOutput
}

type NetworkEnvironmentArgs struct {
	// The ID of the Environment that the Network belongs to, for example, `env-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (NetworkEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkEnvironment)(nil)).Elem()
}

func (i NetworkEnvironmentArgs) ToNetworkEnvironmentOutput() NetworkEnvironmentOutput {
	return i.ToNetworkEnvironmentOutputWithContext(context.Background())
}

func (i NetworkEnvironmentArgs) ToNetworkEnvironmentOutputWithContext(ctx context.Context) NetworkEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkEnvironmentOutput)
}

func (i NetworkEnvironmentArgs) ToOutput(ctx context.Context) pulumix.Output[NetworkEnvironment] {
	return pulumix.Output[NetworkEnvironment]{
		OutputState: i.ToNetworkEnvironmentOutputWithContext(ctx).OutputState,
	}
}

func (i NetworkEnvironmentArgs) ToNetworkEnvironmentPtrOutput() NetworkEnvironmentPtrOutput {
	return i.ToNetworkEnvironmentPtrOutputWithContext(context.Background())
}

func (i NetworkEnvironmentArgs) ToNetworkEnvironmentPtrOutputWithContext(ctx context.Context) NetworkEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkEnvironmentOutput).ToNetworkEnvironmentPtrOutputWithContext(ctx)
}

// NetworkEnvironmentPtrInput is an input type that accepts NetworkEnvironmentArgs, NetworkEnvironmentPtr and NetworkEnvironmentPtrOutput values.
// You can construct a concrete instance of `NetworkEnvironmentPtrInput` via:
//
//	        NetworkEnvironmentArgs{...}
//
//	or:
//
//	        nil
type NetworkEnvironmentPtrInput interface {
	pulumi.Input

	ToNetworkEnvironmentPtrOutput() NetworkEnvironmentPtrOutput
	ToNetworkEnvironmentPtrOutputWithContext(context.Context) NetworkEnvironmentPtrOutput
}

type networkEnvironmentPtrType NetworkEnvironmentArgs

func NetworkEnvironmentPtr(v *NetworkEnvironmentArgs) NetworkEnvironmentPtrInput {
	return (*networkEnvironmentPtrType)(v)
}

func (*networkEnvironmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkEnvironment)(nil)).Elem()
}

func (i *networkEnvironmentPtrType) ToNetworkEnvironmentPtrOutput() NetworkEnvironmentPtrOutput {
	return i.ToNetworkEnvironmentPtrOutputWithContext(context.Background())
}

func (i *networkEnvironmentPtrType) ToNetworkEnvironmentPtrOutputWithContext(ctx context.Context) NetworkEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkEnvironmentPtrOutput)
}

func (i *networkEnvironmentPtrType) ToOutput(ctx context.Context) pulumix.Output[*NetworkEnvironment] {
	return pulumix.Output[*NetworkEnvironment]{
		OutputState: i.ToNetworkEnvironmentPtrOutputWithContext(ctx).OutputState,
	}
}

type NetworkEnvironmentOutput struct{ *pulumi.OutputState }

func (NetworkEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkEnvironment)(nil)).Elem()
}

func (o NetworkEnvironmentOutput) ToNetworkEnvironmentOutput() NetworkEnvironmentOutput {
	return o
}

func (o NetworkEnvironmentOutput) ToNetworkEnvironmentOutputWithContext(ctx context.Context) NetworkEnvironmentOutput {
	return o
}

func (o NetworkEnvironmentOutput) ToNetworkEnvironmentPtrOutput() NetworkEnvironmentPtrOutput {
	return o.ToNetworkEnvironmentPtrOutputWithContext(context.Background())
}

func (o NetworkEnvironmentOutput) ToNetworkEnvironmentPtrOutputWithContext(ctx context.Context) NetworkEnvironmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkEnvironment) *NetworkEnvironment {
		return &v
	}).(NetworkEnvironmentPtrOutput)
}

func (o NetworkEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[NetworkEnvironment] {
	return pulumix.Output[NetworkEnvironment]{
		OutputState: o.OutputState,
	}
}

// The ID of the Environment that the Network belongs to, for example, `env-abc123`.
func (o NetworkEnvironmentOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkEnvironment) string { return v.Id }).(pulumi.StringOutput)
}

type NetworkEnvironmentPtrOutput struct{ *pulumi.OutputState }

func (NetworkEnvironmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkEnvironment)(nil)).Elem()
}

func (o NetworkEnvironmentPtrOutput) ToNetworkEnvironmentPtrOutput() NetworkEnvironmentPtrOutput {
	return o
}

func (o NetworkEnvironmentPtrOutput) ToNetworkEnvironmentPtrOutputWithContext(ctx context.Context) NetworkEnvironmentPtrOutput {
	return o
}

func (o NetworkEnvironmentPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*NetworkEnvironment] {
	return pulumix.Output[*NetworkEnvironment]{
		OutputState: o.OutputState,
	}
}

func (o NetworkEnvironmentPtrOutput) Elem() NetworkEnvironmentOutput {
	return o.ApplyT(func(v *NetworkEnvironment) NetworkEnvironment {
		if v != nil {
			return *v
		}
		var ret NetworkEnvironment
		return ret
	}).(NetworkEnvironmentOutput)
}

// The ID of the Environment that the Network belongs to, for example, `env-abc123`.
func (o NetworkEnvironmentPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkEnvironment) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type NetworkGcp struct {
	// (Optional Map) The mapping of zones to Private Service Connect Service Attachments if available. Keys are zones and values are [GCP Private Service Connect service attachment](https://cloud.google.com/vpc/docs/configure-private-service-connect-producer#api_7).
	PrivateServiceConnectServiceAttachments map[string]string `pulumi:"privateServiceConnectServiceAttachments"`
	// (Required String) The GCP Project ID associated with the Confluent Cloud VPC.
	Project *string `pulumi:"project"`
	// (Required String) The network name of the Confluent Cloud VPC.
	VpcNetwork *string `pulumi:"vpcNetwork"`
}

// NetworkGcpInput is an input type that accepts NetworkGcpArgs and NetworkGcpOutput values.
// You can construct a concrete instance of `NetworkGcpInput` via:
//
//	NetworkGcpArgs{...}
type NetworkGcpInput interface {
	pulumi.Input

	ToNetworkGcpOutput() NetworkGcpOutput
	ToNetworkGcpOutputWithContext(context.Context) NetworkGcpOutput
}

type NetworkGcpArgs struct {
	// (Optional Map) The mapping of zones to Private Service Connect Service Attachments if available. Keys are zones and values are [GCP Private Service Connect service attachment](https://cloud.google.com/vpc/docs/configure-private-service-connect-producer#api_7).
	PrivateServiceConnectServiceAttachments pulumi.StringMapInput `pulumi:"privateServiceConnectServiceAttachments"`
	// (Required String) The GCP Project ID associated with the Confluent Cloud VPC.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// (Required String) The network name of the Confluent Cloud VPC.
	VpcNetwork pulumi.StringPtrInput `pulumi:"vpcNetwork"`
}

func (NetworkGcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkGcp)(nil)).Elem()
}

func (i NetworkGcpArgs) ToNetworkGcpOutput() NetworkGcpOutput {
	return i.ToNetworkGcpOutputWithContext(context.Background())
}

func (i NetworkGcpArgs) ToNetworkGcpOutputWithContext(ctx context.Context) NetworkGcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkGcpOutput)
}

func (i NetworkGcpArgs) ToOutput(ctx context.Context) pulumix.Output[NetworkGcp] {
	return pulumix.Output[NetworkGcp]{
		OutputState: i.ToNetworkGcpOutputWithContext(ctx).OutputState,
	}
}

// NetworkGcpArrayInput is an input type that accepts NetworkGcpArray and NetworkGcpArrayOutput values.
// You can construct a concrete instance of `NetworkGcpArrayInput` via:
//
//	NetworkGcpArray{ NetworkGcpArgs{...} }
type NetworkGcpArrayInput interface {
	pulumi.Input

	ToNetworkGcpArrayOutput() NetworkGcpArrayOutput
	ToNetworkGcpArrayOutputWithContext(context.Context) NetworkGcpArrayOutput
}

type NetworkGcpArray []NetworkGcpInput

func (NetworkGcpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkGcp)(nil)).Elem()
}

func (i NetworkGcpArray) ToNetworkGcpArrayOutput() NetworkGcpArrayOutput {
	return i.ToNetworkGcpArrayOutputWithContext(context.Background())
}

func (i NetworkGcpArray) ToNetworkGcpArrayOutputWithContext(ctx context.Context) NetworkGcpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkGcpArrayOutput)
}

func (i NetworkGcpArray) ToOutput(ctx context.Context) pulumix.Output[[]NetworkGcp] {
	return pulumix.Output[[]NetworkGcp]{
		OutputState: i.ToNetworkGcpArrayOutputWithContext(ctx).OutputState,
	}
}

type NetworkGcpOutput struct{ *pulumi.OutputState }

func (NetworkGcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkGcp)(nil)).Elem()
}

func (o NetworkGcpOutput) ToNetworkGcpOutput() NetworkGcpOutput {
	return o
}

func (o NetworkGcpOutput) ToNetworkGcpOutputWithContext(ctx context.Context) NetworkGcpOutput {
	return o
}

func (o NetworkGcpOutput) ToOutput(ctx context.Context) pulumix.Output[NetworkGcp] {
	return pulumix.Output[NetworkGcp]{
		OutputState: o.OutputState,
	}
}

// (Optional Map) The mapping of zones to Private Service Connect Service Attachments if available. Keys are zones and values are [GCP Private Service Connect service attachment](https://cloud.google.com/vpc/docs/configure-private-service-connect-producer#api_7).
func (o NetworkGcpOutput) PrivateServiceConnectServiceAttachments() pulumi.StringMapOutput {
	return o.ApplyT(func(v NetworkGcp) map[string]string { return v.PrivateServiceConnectServiceAttachments }).(pulumi.StringMapOutput)
}

// (Required String) The GCP Project ID associated with the Confluent Cloud VPC.
func (o NetworkGcpOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkGcp) *string { return v.Project }).(pulumi.StringPtrOutput)
}

// (Required String) The network name of the Confluent Cloud VPC.
func (o NetworkGcpOutput) VpcNetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkGcp) *string { return v.VpcNetwork }).(pulumi.StringPtrOutput)
}

type NetworkGcpArrayOutput struct{ *pulumi.OutputState }

func (NetworkGcpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkGcp)(nil)).Elem()
}

func (o NetworkGcpArrayOutput) ToNetworkGcpArrayOutput() NetworkGcpArrayOutput {
	return o
}

func (o NetworkGcpArrayOutput) ToNetworkGcpArrayOutputWithContext(ctx context.Context) NetworkGcpArrayOutput {
	return o
}

func (o NetworkGcpArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]NetworkGcp] {
	return pulumix.Output[[]NetworkGcp]{
		OutputState: o.OutputState,
	}
}

func (o NetworkGcpArrayOutput) Index(i pulumi.IntInput) NetworkGcpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkGcp {
		return vs[0].([]NetworkGcp)[vs[1].(int)]
	}).(NetworkGcpOutput)
}

type NetworkLinkEndpointEnvironment struct {
	// The ID of the Environment that the Network Link Endpoint belongs to, for example, `env-xyz456`.
	Id string `pulumi:"id"`
}

// NetworkLinkEndpointEnvironmentInput is an input type that accepts NetworkLinkEndpointEnvironmentArgs and NetworkLinkEndpointEnvironmentOutput values.
// You can construct a concrete instance of `NetworkLinkEndpointEnvironmentInput` via:
//
//	NetworkLinkEndpointEnvironmentArgs{...}
type NetworkLinkEndpointEnvironmentInput interface {
	pulumi.Input

	ToNetworkLinkEndpointEnvironmentOutput() NetworkLinkEndpointEnvironmentOutput
	ToNetworkLinkEndpointEnvironmentOutputWithContext(context.Context) NetworkLinkEndpointEnvironmentOutput
}

type NetworkLinkEndpointEnvironmentArgs struct {
	// The ID of the Environment that the Network Link Endpoint belongs to, for example, `env-xyz456`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (NetworkLinkEndpointEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkLinkEndpointEnvironment)(nil)).Elem()
}

func (i NetworkLinkEndpointEnvironmentArgs) ToNetworkLinkEndpointEnvironmentOutput() NetworkLinkEndpointEnvironmentOutput {
	return i.ToNetworkLinkEndpointEnvironmentOutputWithContext(context.Background())
}

func (i NetworkLinkEndpointEnvironmentArgs) ToNetworkLinkEndpointEnvironmentOutputWithContext(ctx context.Context) NetworkLinkEndpointEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkLinkEndpointEnvironmentOutput)
}

func (i NetworkLinkEndpointEnvironmentArgs) ToOutput(ctx context.Context) pulumix.Output[NetworkLinkEndpointEnvironment] {
	return pulumix.Output[NetworkLinkEndpointEnvironment]{
		OutputState: i.ToNetworkLinkEndpointEnvironmentOutputWithContext(ctx).OutputState,
	}
}

func (i NetworkLinkEndpointEnvironmentArgs) ToNetworkLinkEndpointEnvironmentPtrOutput() NetworkLinkEndpointEnvironmentPtrOutput {
	return i.ToNetworkLinkEndpointEnvironmentPtrOutputWithContext(context.Background())
}

func (i NetworkLinkEndpointEnvironmentArgs) ToNetworkLinkEndpointEnvironmentPtrOutputWithContext(ctx context.Context) NetworkLinkEndpointEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkLinkEndpointEnvironmentOutput).ToNetworkLinkEndpointEnvironmentPtrOutputWithContext(ctx)
}

// NetworkLinkEndpointEnvironmentPtrInput is an input type that accepts NetworkLinkEndpointEnvironmentArgs, NetworkLinkEndpointEnvironmentPtr and NetworkLinkEndpointEnvironmentPtrOutput values.
// You can construct a concrete instance of `NetworkLinkEndpointEnvironmentPtrInput` via:
//
//	        NetworkLinkEndpointEnvironmentArgs{...}
//
//	or:
//
//	        nil
type NetworkLinkEndpointEnvironmentPtrInput interface {
	pulumi.Input

	ToNetworkLinkEndpointEnvironmentPtrOutput() NetworkLinkEndpointEnvironmentPtrOutput
	ToNetworkLinkEndpointEnvironmentPtrOutputWithContext(context.Context) NetworkLinkEndpointEnvironmentPtrOutput
}

type networkLinkEndpointEnvironmentPtrType NetworkLinkEndpointEnvironmentArgs

func NetworkLinkEndpointEnvironmentPtr(v *NetworkLinkEndpointEnvironmentArgs) NetworkLinkEndpointEnvironmentPtrInput {
	return (*networkLinkEndpointEnvironmentPtrType)(v)
}

func (*networkLinkEndpointEnvironmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkLinkEndpointEnvironment)(nil)).Elem()
}

func (i *networkLinkEndpointEnvironmentPtrType) ToNetworkLinkEndpointEnvironmentPtrOutput() NetworkLinkEndpointEnvironmentPtrOutput {
	return i.ToNetworkLinkEndpointEnvironmentPtrOutputWithContext(context.Background())
}

func (i *networkLinkEndpointEnvironmentPtrType) ToNetworkLinkEndpointEnvironmentPtrOutputWithContext(ctx context.Context) NetworkLinkEndpointEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkLinkEndpointEnvironmentPtrOutput)
}

func (i *networkLinkEndpointEnvironmentPtrType) ToOutput(ctx context.Context) pulumix.Output[*NetworkLinkEndpointEnvironment] {
	return pulumix.Output[*NetworkLinkEndpointEnvironment]{
		OutputState: i.ToNetworkLinkEndpointEnvironmentPtrOutputWithContext(ctx).OutputState,
	}
}

type NetworkLinkEndpointEnvironmentOutput struct{ *pulumi.OutputState }

func (NetworkLinkEndpointEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkLinkEndpointEnvironment)(nil)).Elem()
}

func (o NetworkLinkEndpointEnvironmentOutput) ToNetworkLinkEndpointEnvironmentOutput() NetworkLinkEndpointEnvironmentOutput {
	return o
}

func (o NetworkLinkEndpointEnvironmentOutput) ToNetworkLinkEndpointEnvironmentOutputWithContext(ctx context.Context) NetworkLinkEndpointEnvironmentOutput {
	return o
}

func (o NetworkLinkEndpointEnvironmentOutput) ToNetworkLinkEndpointEnvironmentPtrOutput() NetworkLinkEndpointEnvironmentPtrOutput {
	return o.ToNetworkLinkEndpointEnvironmentPtrOutputWithContext(context.Background())
}

func (o NetworkLinkEndpointEnvironmentOutput) ToNetworkLinkEndpointEnvironmentPtrOutputWithContext(ctx context.Context) NetworkLinkEndpointEnvironmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkLinkEndpointEnvironment) *NetworkLinkEndpointEnvironment {
		return &v
	}).(NetworkLinkEndpointEnvironmentPtrOutput)
}

func (o NetworkLinkEndpointEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[NetworkLinkEndpointEnvironment] {
	return pulumix.Output[NetworkLinkEndpointEnvironment]{
		OutputState: o.OutputState,
	}
}

// The ID of the Environment that the Network Link Endpoint belongs to, for example, `env-xyz456`.
func (o NetworkLinkEndpointEnvironmentOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkLinkEndpointEnvironment) string { return v.Id }).(pulumi.StringOutput)
}

type NetworkLinkEndpointEnvironmentPtrOutput struct{ *pulumi.OutputState }

func (NetworkLinkEndpointEnvironmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkLinkEndpointEnvironment)(nil)).Elem()
}

func (o NetworkLinkEndpointEnvironmentPtrOutput) ToNetworkLinkEndpointEnvironmentPtrOutput() NetworkLinkEndpointEnvironmentPtrOutput {
	return o
}

func (o NetworkLinkEndpointEnvironmentPtrOutput) ToNetworkLinkEndpointEnvironmentPtrOutputWithContext(ctx context.Context) NetworkLinkEndpointEnvironmentPtrOutput {
	return o
}

func (o NetworkLinkEndpointEnvironmentPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*NetworkLinkEndpointEnvironment] {
	return pulumix.Output[*NetworkLinkEndpointEnvironment]{
		OutputState: o.OutputState,
	}
}

func (o NetworkLinkEndpointEnvironmentPtrOutput) Elem() NetworkLinkEndpointEnvironmentOutput {
	return o.ApplyT(func(v *NetworkLinkEndpointEnvironment) NetworkLinkEndpointEnvironment {
		if v != nil {
			return *v
		}
		var ret NetworkLinkEndpointEnvironment
		return ret
	}).(NetworkLinkEndpointEnvironmentOutput)
}

// The ID of the Environment that the Network Link Endpoint belongs to, for example, `env-xyz456`.
func (o NetworkLinkEndpointEnvironmentPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkLinkEndpointEnvironment) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type NetworkLinkEndpointNetwork struct {
	// The ID of the Environment that the Network Link Endpoint belongs to, for example, `env-xyz456`.
	Id string `pulumi:"id"`
}

// NetworkLinkEndpointNetworkInput is an input type that accepts NetworkLinkEndpointNetworkArgs and NetworkLinkEndpointNetworkOutput values.
// You can construct a concrete instance of `NetworkLinkEndpointNetworkInput` via:
//
//	NetworkLinkEndpointNetworkArgs{...}
type NetworkLinkEndpointNetworkInput interface {
	pulumi.Input

	ToNetworkLinkEndpointNetworkOutput() NetworkLinkEndpointNetworkOutput
	ToNetworkLinkEndpointNetworkOutputWithContext(context.Context) NetworkLinkEndpointNetworkOutput
}

type NetworkLinkEndpointNetworkArgs struct {
	// The ID of the Environment that the Network Link Endpoint belongs to, for example, `env-xyz456`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (NetworkLinkEndpointNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkLinkEndpointNetwork)(nil)).Elem()
}

func (i NetworkLinkEndpointNetworkArgs) ToNetworkLinkEndpointNetworkOutput() NetworkLinkEndpointNetworkOutput {
	return i.ToNetworkLinkEndpointNetworkOutputWithContext(context.Background())
}

func (i NetworkLinkEndpointNetworkArgs) ToNetworkLinkEndpointNetworkOutputWithContext(ctx context.Context) NetworkLinkEndpointNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkLinkEndpointNetworkOutput)
}

func (i NetworkLinkEndpointNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[NetworkLinkEndpointNetwork] {
	return pulumix.Output[NetworkLinkEndpointNetwork]{
		OutputState: i.ToNetworkLinkEndpointNetworkOutputWithContext(ctx).OutputState,
	}
}

func (i NetworkLinkEndpointNetworkArgs) ToNetworkLinkEndpointNetworkPtrOutput() NetworkLinkEndpointNetworkPtrOutput {
	return i.ToNetworkLinkEndpointNetworkPtrOutputWithContext(context.Background())
}

func (i NetworkLinkEndpointNetworkArgs) ToNetworkLinkEndpointNetworkPtrOutputWithContext(ctx context.Context) NetworkLinkEndpointNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkLinkEndpointNetworkOutput).ToNetworkLinkEndpointNetworkPtrOutputWithContext(ctx)
}

// NetworkLinkEndpointNetworkPtrInput is an input type that accepts NetworkLinkEndpointNetworkArgs, NetworkLinkEndpointNetworkPtr and NetworkLinkEndpointNetworkPtrOutput values.
// You can construct a concrete instance of `NetworkLinkEndpointNetworkPtrInput` via:
//
//	        NetworkLinkEndpointNetworkArgs{...}
//
//	or:
//
//	        nil
type NetworkLinkEndpointNetworkPtrInput interface {
	pulumi.Input

	ToNetworkLinkEndpointNetworkPtrOutput() NetworkLinkEndpointNetworkPtrOutput
	ToNetworkLinkEndpointNetworkPtrOutputWithContext(context.Context) NetworkLinkEndpointNetworkPtrOutput
}

type networkLinkEndpointNetworkPtrType NetworkLinkEndpointNetworkArgs

func NetworkLinkEndpointNetworkPtr(v *NetworkLinkEndpointNetworkArgs) NetworkLinkEndpointNetworkPtrInput {
	return (*networkLinkEndpointNetworkPtrType)(v)
}

func (*networkLinkEndpointNetworkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkLinkEndpointNetwork)(nil)).Elem()
}

func (i *networkLinkEndpointNetworkPtrType) ToNetworkLinkEndpointNetworkPtrOutput() NetworkLinkEndpointNetworkPtrOutput {
	return i.ToNetworkLinkEndpointNetworkPtrOutputWithContext(context.Background())
}

func (i *networkLinkEndpointNetworkPtrType) ToNetworkLinkEndpointNetworkPtrOutputWithContext(ctx context.Context) NetworkLinkEndpointNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkLinkEndpointNetworkPtrOutput)
}

func (i *networkLinkEndpointNetworkPtrType) ToOutput(ctx context.Context) pulumix.Output[*NetworkLinkEndpointNetwork] {
	return pulumix.Output[*NetworkLinkEndpointNetwork]{
		OutputState: i.ToNetworkLinkEndpointNetworkPtrOutputWithContext(ctx).OutputState,
	}
}

type NetworkLinkEndpointNetworkOutput struct{ *pulumi.OutputState }

func (NetworkLinkEndpointNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkLinkEndpointNetwork)(nil)).Elem()
}

func (o NetworkLinkEndpointNetworkOutput) ToNetworkLinkEndpointNetworkOutput() NetworkLinkEndpointNetworkOutput {
	return o
}

func (o NetworkLinkEndpointNetworkOutput) ToNetworkLinkEndpointNetworkOutputWithContext(ctx context.Context) NetworkLinkEndpointNetworkOutput {
	return o
}

func (o NetworkLinkEndpointNetworkOutput) ToNetworkLinkEndpointNetworkPtrOutput() NetworkLinkEndpointNetworkPtrOutput {
	return o.ToNetworkLinkEndpointNetworkPtrOutputWithContext(context.Background())
}

func (o NetworkLinkEndpointNetworkOutput) ToNetworkLinkEndpointNetworkPtrOutputWithContext(ctx context.Context) NetworkLinkEndpointNetworkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkLinkEndpointNetwork) *NetworkLinkEndpointNetwork {
		return &v
	}).(NetworkLinkEndpointNetworkPtrOutput)
}

func (o NetworkLinkEndpointNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[NetworkLinkEndpointNetwork] {
	return pulumix.Output[NetworkLinkEndpointNetwork]{
		OutputState: o.OutputState,
	}
}

// The ID of the Environment that the Network Link Endpoint belongs to, for example, `env-xyz456`.
func (o NetworkLinkEndpointNetworkOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkLinkEndpointNetwork) string { return v.Id }).(pulumi.StringOutput)
}

type NetworkLinkEndpointNetworkPtrOutput struct{ *pulumi.OutputState }

func (NetworkLinkEndpointNetworkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkLinkEndpointNetwork)(nil)).Elem()
}

func (o NetworkLinkEndpointNetworkPtrOutput) ToNetworkLinkEndpointNetworkPtrOutput() NetworkLinkEndpointNetworkPtrOutput {
	return o
}

func (o NetworkLinkEndpointNetworkPtrOutput) ToNetworkLinkEndpointNetworkPtrOutputWithContext(ctx context.Context) NetworkLinkEndpointNetworkPtrOutput {
	return o
}

func (o NetworkLinkEndpointNetworkPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*NetworkLinkEndpointNetwork] {
	return pulumix.Output[*NetworkLinkEndpointNetwork]{
		OutputState: o.OutputState,
	}
}

func (o NetworkLinkEndpointNetworkPtrOutput) Elem() NetworkLinkEndpointNetworkOutput {
	return o.ApplyT(func(v *NetworkLinkEndpointNetwork) NetworkLinkEndpointNetwork {
		if v != nil {
			return *v
		}
		var ret NetworkLinkEndpointNetwork
		return ret
	}).(NetworkLinkEndpointNetworkOutput)
}

// The ID of the Environment that the Network Link Endpoint belongs to, for example, `env-xyz456`.
func (o NetworkLinkEndpointNetworkPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkLinkEndpointNetwork) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type NetworkLinkEndpointNetworkLinkService struct {
	// The ID of the Environment that the Network Link Endpoint belongs to, for example, `env-xyz456`.
	Id string `pulumi:"id"`
}

// NetworkLinkEndpointNetworkLinkServiceInput is an input type that accepts NetworkLinkEndpointNetworkLinkServiceArgs and NetworkLinkEndpointNetworkLinkServiceOutput values.
// You can construct a concrete instance of `NetworkLinkEndpointNetworkLinkServiceInput` via:
//
//	NetworkLinkEndpointNetworkLinkServiceArgs{...}
type NetworkLinkEndpointNetworkLinkServiceInput interface {
	pulumi.Input

	ToNetworkLinkEndpointNetworkLinkServiceOutput() NetworkLinkEndpointNetworkLinkServiceOutput
	ToNetworkLinkEndpointNetworkLinkServiceOutputWithContext(context.Context) NetworkLinkEndpointNetworkLinkServiceOutput
}

type NetworkLinkEndpointNetworkLinkServiceArgs struct {
	// The ID of the Environment that the Network Link Endpoint belongs to, for example, `env-xyz456`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (NetworkLinkEndpointNetworkLinkServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkLinkEndpointNetworkLinkService)(nil)).Elem()
}

func (i NetworkLinkEndpointNetworkLinkServiceArgs) ToNetworkLinkEndpointNetworkLinkServiceOutput() NetworkLinkEndpointNetworkLinkServiceOutput {
	return i.ToNetworkLinkEndpointNetworkLinkServiceOutputWithContext(context.Background())
}

func (i NetworkLinkEndpointNetworkLinkServiceArgs) ToNetworkLinkEndpointNetworkLinkServiceOutputWithContext(ctx context.Context) NetworkLinkEndpointNetworkLinkServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkLinkEndpointNetworkLinkServiceOutput)
}

func (i NetworkLinkEndpointNetworkLinkServiceArgs) ToOutput(ctx context.Context) pulumix.Output[NetworkLinkEndpointNetworkLinkService] {
	return pulumix.Output[NetworkLinkEndpointNetworkLinkService]{
		OutputState: i.ToNetworkLinkEndpointNetworkLinkServiceOutputWithContext(ctx).OutputState,
	}
}

func (i NetworkLinkEndpointNetworkLinkServiceArgs) ToNetworkLinkEndpointNetworkLinkServicePtrOutput() NetworkLinkEndpointNetworkLinkServicePtrOutput {
	return i.ToNetworkLinkEndpointNetworkLinkServicePtrOutputWithContext(context.Background())
}

func (i NetworkLinkEndpointNetworkLinkServiceArgs) ToNetworkLinkEndpointNetworkLinkServicePtrOutputWithContext(ctx context.Context) NetworkLinkEndpointNetworkLinkServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkLinkEndpointNetworkLinkServiceOutput).ToNetworkLinkEndpointNetworkLinkServicePtrOutputWithContext(ctx)
}

// NetworkLinkEndpointNetworkLinkServicePtrInput is an input type that accepts NetworkLinkEndpointNetworkLinkServiceArgs, NetworkLinkEndpointNetworkLinkServicePtr and NetworkLinkEndpointNetworkLinkServicePtrOutput values.
// You can construct a concrete instance of `NetworkLinkEndpointNetworkLinkServicePtrInput` via:
//
//	        NetworkLinkEndpointNetworkLinkServiceArgs{...}
//
//	or:
//
//	        nil
type NetworkLinkEndpointNetworkLinkServicePtrInput interface {
	pulumi.Input

	ToNetworkLinkEndpointNetworkLinkServicePtrOutput() NetworkLinkEndpointNetworkLinkServicePtrOutput
	ToNetworkLinkEndpointNetworkLinkServicePtrOutputWithContext(context.Context) NetworkLinkEndpointNetworkLinkServicePtrOutput
}

type networkLinkEndpointNetworkLinkServicePtrType NetworkLinkEndpointNetworkLinkServiceArgs

func NetworkLinkEndpointNetworkLinkServicePtr(v *NetworkLinkEndpointNetworkLinkServiceArgs) NetworkLinkEndpointNetworkLinkServicePtrInput {
	return (*networkLinkEndpointNetworkLinkServicePtrType)(v)
}

func (*networkLinkEndpointNetworkLinkServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkLinkEndpointNetworkLinkService)(nil)).Elem()
}

func (i *networkLinkEndpointNetworkLinkServicePtrType) ToNetworkLinkEndpointNetworkLinkServicePtrOutput() NetworkLinkEndpointNetworkLinkServicePtrOutput {
	return i.ToNetworkLinkEndpointNetworkLinkServicePtrOutputWithContext(context.Background())
}

func (i *networkLinkEndpointNetworkLinkServicePtrType) ToNetworkLinkEndpointNetworkLinkServicePtrOutputWithContext(ctx context.Context) NetworkLinkEndpointNetworkLinkServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkLinkEndpointNetworkLinkServicePtrOutput)
}

func (i *networkLinkEndpointNetworkLinkServicePtrType) ToOutput(ctx context.Context) pulumix.Output[*NetworkLinkEndpointNetworkLinkService] {
	return pulumix.Output[*NetworkLinkEndpointNetworkLinkService]{
		OutputState: i.ToNetworkLinkEndpointNetworkLinkServicePtrOutputWithContext(ctx).OutputState,
	}
}

type NetworkLinkEndpointNetworkLinkServiceOutput struct{ *pulumi.OutputState }

func (NetworkLinkEndpointNetworkLinkServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkLinkEndpointNetworkLinkService)(nil)).Elem()
}

func (o NetworkLinkEndpointNetworkLinkServiceOutput) ToNetworkLinkEndpointNetworkLinkServiceOutput() NetworkLinkEndpointNetworkLinkServiceOutput {
	return o
}

func (o NetworkLinkEndpointNetworkLinkServiceOutput) ToNetworkLinkEndpointNetworkLinkServiceOutputWithContext(ctx context.Context) NetworkLinkEndpointNetworkLinkServiceOutput {
	return o
}

func (o NetworkLinkEndpointNetworkLinkServiceOutput) ToNetworkLinkEndpointNetworkLinkServicePtrOutput() NetworkLinkEndpointNetworkLinkServicePtrOutput {
	return o.ToNetworkLinkEndpointNetworkLinkServicePtrOutputWithContext(context.Background())
}

func (o NetworkLinkEndpointNetworkLinkServiceOutput) ToNetworkLinkEndpointNetworkLinkServicePtrOutputWithContext(ctx context.Context) NetworkLinkEndpointNetworkLinkServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkLinkEndpointNetworkLinkService) *NetworkLinkEndpointNetworkLinkService {
		return &v
	}).(NetworkLinkEndpointNetworkLinkServicePtrOutput)
}

func (o NetworkLinkEndpointNetworkLinkServiceOutput) ToOutput(ctx context.Context) pulumix.Output[NetworkLinkEndpointNetworkLinkService] {
	return pulumix.Output[NetworkLinkEndpointNetworkLinkService]{
		OutputState: o.OutputState,
	}
}

// The ID of the Environment that the Network Link Endpoint belongs to, for example, `env-xyz456`.
func (o NetworkLinkEndpointNetworkLinkServiceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkLinkEndpointNetworkLinkService) string { return v.Id }).(pulumi.StringOutput)
}

type NetworkLinkEndpointNetworkLinkServicePtrOutput struct{ *pulumi.OutputState }

func (NetworkLinkEndpointNetworkLinkServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkLinkEndpointNetworkLinkService)(nil)).Elem()
}

func (o NetworkLinkEndpointNetworkLinkServicePtrOutput) ToNetworkLinkEndpointNetworkLinkServicePtrOutput() NetworkLinkEndpointNetworkLinkServicePtrOutput {
	return o
}

func (o NetworkLinkEndpointNetworkLinkServicePtrOutput) ToNetworkLinkEndpointNetworkLinkServicePtrOutputWithContext(ctx context.Context) NetworkLinkEndpointNetworkLinkServicePtrOutput {
	return o
}

func (o NetworkLinkEndpointNetworkLinkServicePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*NetworkLinkEndpointNetworkLinkService] {
	return pulumix.Output[*NetworkLinkEndpointNetworkLinkService]{
		OutputState: o.OutputState,
	}
}

func (o NetworkLinkEndpointNetworkLinkServicePtrOutput) Elem() NetworkLinkEndpointNetworkLinkServiceOutput {
	return o.ApplyT(func(v *NetworkLinkEndpointNetworkLinkService) NetworkLinkEndpointNetworkLinkService {
		if v != nil {
			return *v
		}
		var ret NetworkLinkEndpointNetworkLinkService
		return ret
	}).(NetworkLinkEndpointNetworkLinkServiceOutput)
}

// The ID of the Environment that the Network Link Endpoint belongs to, for example, `env-xyz456`.
func (o NetworkLinkEndpointNetworkLinkServicePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkLinkEndpointNetworkLinkService) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type NetworkLinkServiceAccept struct {
	// List of environments ids from which connections can be accepted. All networks within the list of environment will be allowed.
	Environments []string `pulumi:"environments"`
	// List of network ids from which connections can be accepted.
	Networks []string `pulumi:"networks"`
}

// NetworkLinkServiceAcceptInput is an input type that accepts NetworkLinkServiceAcceptArgs and NetworkLinkServiceAcceptOutput values.
// You can construct a concrete instance of `NetworkLinkServiceAcceptInput` via:
//
//	NetworkLinkServiceAcceptArgs{...}
type NetworkLinkServiceAcceptInput interface {
	pulumi.Input

	ToNetworkLinkServiceAcceptOutput() NetworkLinkServiceAcceptOutput
	ToNetworkLinkServiceAcceptOutputWithContext(context.Context) NetworkLinkServiceAcceptOutput
}

type NetworkLinkServiceAcceptArgs struct {
	// List of environments ids from which connections can be accepted. All networks within the list of environment will be allowed.
	Environments pulumi.StringArrayInput `pulumi:"environments"`
	// List of network ids from which connections can be accepted.
	Networks pulumi.StringArrayInput `pulumi:"networks"`
}

func (NetworkLinkServiceAcceptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkLinkServiceAccept)(nil)).Elem()
}

func (i NetworkLinkServiceAcceptArgs) ToNetworkLinkServiceAcceptOutput() NetworkLinkServiceAcceptOutput {
	return i.ToNetworkLinkServiceAcceptOutputWithContext(context.Background())
}

func (i NetworkLinkServiceAcceptArgs) ToNetworkLinkServiceAcceptOutputWithContext(ctx context.Context) NetworkLinkServiceAcceptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkLinkServiceAcceptOutput)
}

func (i NetworkLinkServiceAcceptArgs) ToOutput(ctx context.Context) pulumix.Output[NetworkLinkServiceAccept] {
	return pulumix.Output[NetworkLinkServiceAccept]{
		OutputState: i.ToNetworkLinkServiceAcceptOutputWithContext(ctx).OutputState,
	}
}

func (i NetworkLinkServiceAcceptArgs) ToNetworkLinkServiceAcceptPtrOutput() NetworkLinkServiceAcceptPtrOutput {
	return i.ToNetworkLinkServiceAcceptPtrOutputWithContext(context.Background())
}

func (i NetworkLinkServiceAcceptArgs) ToNetworkLinkServiceAcceptPtrOutputWithContext(ctx context.Context) NetworkLinkServiceAcceptPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkLinkServiceAcceptOutput).ToNetworkLinkServiceAcceptPtrOutputWithContext(ctx)
}

// NetworkLinkServiceAcceptPtrInput is an input type that accepts NetworkLinkServiceAcceptArgs, NetworkLinkServiceAcceptPtr and NetworkLinkServiceAcceptPtrOutput values.
// You can construct a concrete instance of `NetworkLinkServiceAcceptPtrInput` via:
//
//	        NetworkLinkServiceAcceptArgs{...}
//
//	or:
//
//	        nil
type NetworkLinkServiceAcceptPtrInput interface {
	pulumi.Input

	ToNetworkLinkServiceAcceptPtrOutput() NetworkLinkServiceAcceptPtrOutput
	ToNetworkLinkServiceAcceptPtrOutputWithContext(context.Context) NetworkLinkServiceAcceptPtrOutput
}

type networkLinkServiceAcceptPtrType NetworkLinkServiceAcceptArgs

func NetworkLinkServiceAcceptPtr(v *NetworkLinkServiceAcceptArgs) NetworkLinkServiceAcceptPtrInput {
	return (*networkLinkServiceAcceptPtrType)(v)
}

func (*networkLinkServiceAcceptPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkLinkServiceAccept)(nil)).Elem()
}

func (i *networkLinkServiceAcceptPtrType) ToNetworkLinkServiceAcceptPtrOutput() NetworkLinkServiceAcceptPtrOutput {
	return i.ToNetworkLinkServiceAcceptPtrOutputWithContext(context.Background())
}

func (i *networkLinkServiceAcceptPtrType) ToNetworkLinkServiceAcceptPtrOutputWithContext(ctx context.Context) NetworkLinkServiceAcceptPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkLinkServiceAcceptPtrOutput)
}

func (i *networkLinkServiceAcceptPtrType) ToOutput(ctx context.Context) pulumix.Output[*NetworkLinkServiceAccept] {
	return pulumix.Output[*NetworkLinkServiceAccept]{
		OutputState: i.ToNetworkLinkServiceAcceptPtrOutputWithContext(ctx).OutputState,
	}
}

type NetworkLinkServiceAcceptOutput struct{ *pulumi.OutputState }

func (NetworkLinkServiceAcceptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkLinkServiceAccept)(nil)).Elem()
}

func (o NetworkLinkServiceAcceptOutput) ToNetworkLinkServiceAcceptOutput() NetworkLinkServiceAcceptOutput {
	return o
}

func (o NetworkLinkServiceAcceptOutput) ToNetworkLinkServiceAcceptOutputWithContext(ctx context.Context) NetworkLinkServiceAcceptOutput {
	return o
}

func (o NetworkLinkServiceAcceptOutput) ToNetworkLinkServiceAcceptPtrOutput() NetworkLinkServiceAcceptPtrOutput {
	return o.ToNetworkLinkServiceAcceptPtrOutputWithContext(context.Background())
}

func (o NetworkLinkServiceAcceptOutput) ToNetworkLinkServiceAcceptPtrOutputWithContext(ctx context.Context) NetworkLinkServiceAcceptPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkLinkServiceAccept) *NetworkLinkServiceAccept {
		return &v
	}).(NetworkLinkServiceAcceptPtrOutput)
}

func (o NetworkLinkServiceAcceptOutput) ToOutput(ctx context.Context) pulumix.Output[NetworkLinkServiceAccept] {
	return pulumix.Output[NetworkLinkServiceAccept]{
		OutputState: o.OutputState,
	}
}

// List of environments ids from which connections can be accepted. All networks within the list of environment will be allowed.
func (o NetworkLinkServiceAcceptOutput) Environments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkLinkServiceAccept) []string { return v.Environments }).(pulumi.StringArrayOutput)
}

// List of network ids from which connections can be accepted.
func (o NetworkLinkServiceAcceptOutput) Networks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkLinkServiceAccept) []string { return v.Networks }).(pulumi.StringArrayOutput)
}

type NetworkLinkServiceAcceptPtrOutput struct{ *pulumi.OutputState }

func (NetworkLinkServiceAcceptPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkLinkServiceAccept)(nil)).Elem()
}

func (o NetworkLinkServiceAcceptPtrOutput) ToNetworkLinkServiceAcceptPtrOutput() NetworkLinkServiceAcceptPtrOutput {
	return o
}

func (o NetworkLinkServiceAcceptPtrOutput) ToNetworkLinkServiceAcceptPtrOutputWithContext(ctx context.Context) NetworkLinkServiceAcceptPtrOutput {
	return o
}

func (o NetworkLinkServiceAcceptPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*NetworkLinkServiceAccept] {
	return pulumix.Output[*NetworkLinkServiceAccept]{
		OutputState: o.OutputState,
	}
}

func (o NetworkLinkServiceAcceptPtrOutput) Elem() NetworkLinkServiceAcceptOutput {
	return o.ApplyT(func(v *NetworkLinkServiceAccept) NetworkLinkServiceAccept {
		if v != nil {
			return *v
		}
		var ret NetworkLinkServiceAccept
		return ret
	}).(NetworkLinkServiceAcceptOutput)
}

// List of environments ids from which connections can be accepted. All networks within the list of environment will be allowed.
func (o NetworkLinkServiceAcceptPtrOutput) Environments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkLinkServiceAccept) []string {
		if v == nil {
			return nil
		}
		return v.Environments
	}).(pulumi.StringArrayOutput)
}

// List of network ids from which connections can be accepted.
func (o NetworkLinkServiceAcceptPtrOutput) Networks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkLinkServiceAccept) []string {
		if v == nil {
			return nil
		}
		return v.Networks
	}).(pulumi.StringArrayOutput)
}

type NetworkLinkServiceEnvironment struct {
	// The ID of the Network that the Network Link Service belongs to, for example, `n-abc123`.
	Id string `pulumi:"id"`
}

// NetworkLinkServiceEnvironmentInput is an input type that accepts NetworkLinkServiceEnvironmentArgs and NetworkLinkServiceEnvironmentOutput values.
// You can construct a concrete instance of `NetworkLinkServiceEnvironmentInput` via:
//
//	NetworkLinkServiceEnvironmentArgs{...}
type NetworkLinkServiceEnvironmentInput interface {
	pulumi.Input

	ToNetworkLinkServiceEnvironmentOutput() NetworkLinkServiceEnvironmentOutput
	ToNetworkLinkServiceEnvironmentOutputWithContext(context.Context) NetworkLinkServiceEnvironmentOutput
}

type NetworkLinkServiceEnvironmentArgs struct {
	// The ID of the Network that the Network Link Service belongs to, for example, `n-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (NetworkLinkServiceEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkLinkServiceEnvironment)(nil)).Elem()
}

func (i NetworkLinkServiceEnvironmentArgs) ToNetworkLinkServiceEnvironmentOutput() NetworkLinkServiceEnvironmentOutput {
	return i.ToNetworkLinkServiceEnvironmentOutputWithContext(context.Background())
}

func (i NetworkLinkServiceEnvironmentArgs) ToNetworkLinkServiceEnvironmentOutputWithContext(ctx context.Context) NetworkLinkServiceEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkLinkServiceEnvironmentOutput)
}

func (i NetworkLinkServiceEnvironmentArgs) ToOutput(ctx context.Context) pulumix.Output[NetworkLinkServiceEnvironment] {
	return pulumix.Output[NetworkLinkServiceEnvironment]{
		OutputState: i.ToNetworkLinkServiceEnvironmentOutputWithContext(ctx).OutputState,
	}
}

func (i NetworkLinkServiceEnvironmentArgs) ToNetworkLinkServiceEnvironmentPtrOutput() NetworkLinkServiceEnvironmentPtrOutput {
	return i.ToNetworkLinkServiceEnvironmentPtrOutputWithContext(context.Background())
}

func (i NetworkLinkServiceEnvironmentArgs) ToNetworkLinkServiceEnvironmentPtrOutputWithContext(ctx context.Context) NetworkLinkServiceEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkLinkServiceEnvironmentOutput).ToNetworkLinkServiceEnvironmentPtrOutputWithContext(ctx)
}

// NetworkLinkServiceEnvironmentPtrInput is an input type that accepts NetworkLinkServiceEnvironmentArgs, NetworkLinkServiceEnvironmentPtr and NetworkLinkServiceEnvironmentPtrOutput values.
// You can construct a concrete instance of `NetworkLinkServiceEnvironmentPtrInput` via:
//
//	        NetworkLinkServiceEnvironmentArgs{...}
//
//	or:
//
//	        nil
type NetworkLinkServiceEnvironmentPtrInput interface {
	pulumi.Input

	ToNetworkLinkServiceEnvironmentPtrOutput() NetworkLinkServiceEnvironmentPtrOutput
	ToNetworkLinkServiceEnvironmentPtrOutputWithContext(context.Context) NetworkLinkServiceEnvironmentPtrOutput
}

type networkLinkServiceEnvironmentPtrType NetworkLinkServiceEnvironmentArgs

func NetworkLinkServiceEnvironmentPtr(v *NetworkLinkServiceEnvironmentArgs) NetworkLinkServiceEnvironmentPtrInput {
	return (*networkLinkServiceEnvironmentPtrType)(v)
}

func (*networkLinkServiceEnvironmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkLinkServiceEnvironment)(nil)).Elem()
}

func (i *networkLinkServiceEnvironmentPtrType) ToNetworkLinkServiceEnvironmentPtrOutput() NetworkLinkServiceEnvironmentPtrOutput {
	return i.ToNetworkLinkServiceEnvironmentPtrOutputWithContext(context.Background())
}

func (i *networkLinkServiceEnvironmentPtrType) ToNetworkLinkServiceEnvironmentPtrOutputWithContext(ctx context.Context) NetworkLinkServiceEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkLinkServiceEnvironmentPtrOutput)
}

func (i *networkLinkServiceEnvironmentPtrType) ToOutput(ctx context.Context) pulumix.Output[*NetworkLinkServiceEnvironment] {
	return pulumix.Output[*NetworkLinkServiceEnvironment]{
		OutputState: i.ToNetworkLinkServiceEnvironmentPtrOutputWithContext(ctx).OutputState,
	}
}

type NetworkLinkServiceEnvironmentOutput struct{ *pulumi.OutputState }

func (NetworkLinkServiceEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkLinkServiceEnvironment)(nil)).Elem()
}

func (o NetworkLinkServiceEnvironmentOutput) ToNetworkLinkServiceEnvironmentOutput() NetworkLinkServiceEnvironmentOutput {
	return o
}

func (o NetworkLinkServiceEnvironmentOutput) ToNetworkLinkServiceEnvironmentOutputWithContext(ctx context.Context) NetworkLinkServiceEnvironmentOutput {
	return o
}

func (o NetworkLinkServiceEnvironmentOutput) ToNetworkLinkServiceEnvironmentPtrOutput() NetworkLinkServiceEnvironmentPtrOutput {
	return o.ToNetworkLinkServiceEnvironmentPtrOutputWithContext(context.Background())
}

func (o NetworkLinkServiceEnvironmentOutput) ToNetworkLinkServiceEnvironmentPtrOutputWithContext(ctx context.Context) NetworkLinkServiceEnvironmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkLinkServiceEnvironment) *NetworkLinkServiceEnvironment {
		return &v
	}).(NetworkLinkServiceEnvironmentPtrOutput)
}

func (o NetworkLinkServiceEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[NetworkLinkServiceEnvironment] {
	return pulumix.Output[NetworkLinkServiceEnvironment]{
		OutputState: o.OutputState,
	}
}

// The ID of the Network that the Network Link Service belongs to, for example, `n-abc123`.
func (o NetworkLinkServiceEnvironmentOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkLinkServiceEnvironment) string { return v.Id }).(pulumi.StringOutput)
}

type NetworkLinkServiceEnvironmentPtrOutput struct{ *pulumi.OutputState }

func (NetworkLinkServiceEnvironmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkLinkServiceEnvironment)(nil)).Elem()
}

func (o NetworkLinkServiceEnvironmentPtrOutput) ToNetworkLinkServiceEnvironmentPtrOutput() NetworkLinkServiceEnvironmentPtrOutput {
	return o
}

func (o NetworkLinkServiceEnvironmentPtrOutput) ToNetworkLinkServiceEnvironmentPtrOutputWithContext(ctx context.Context) NetworkLinkServiceEnvironmentPtrOutput {
	return o
}

func (o NetworkLinkServiceEnvironmentPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*NetworkLinkServiceEnvironment] {
	return pulumix.Output[*NetworkLinkServiceEnvironment]{
		OutputState: o.OutputState,
	}
}

func (o NetworkLinkServiceEnvironmentPtrOutput) Elem() NetworkLinkServiceEnvironmentOutput {
	return o.ApplyT(func(v *NetworkLinkServiceEnvironment) NetworkLinkServiceEnvironment {
		if v != nil {
			return *v
		}
		var ret NetworkLinkServiceEnvironment
		return ret
	}).(NetworkLinkServiceEnvironmentOutput)
}

// The ID of the Network that the Network Link Service belongs to, for example, `n-abc123`.
func (o NetworkLinkServiceEnvironmentPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkLinkServiceEnvironment) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type NetworkLinkServiceNetwork struct {
	// The ID of the Network that the Network Link Service belongs to, for example, `n-abc123`.
	Id string `pulumi:"id"`
}

// NetworkLinkServiceNetworkInput is an input type that accepts NetworkLinkServiceNetworkArgs and NetworkLinkServiceNetworkOutput values.
// You can construct a concrete instance of `NetworkLinkServiceNetworkInput` via:
//
//	NetworkLinkServiceNetworkArgs{...}
type NetworkLinkServiceNetworkInput interface {
	pulumi.Input

	ToNetworkLinkServiceNetworkOutput() NetworkLinkServiceNetworkOutput
	ToNetworkLinkServiceNetworkOutputWithContext(context.Context) NetworkLinkServiceNetworkOutput
}

type NetworkLinkServiceNetworkArgs struct {
	// The ID of the Network that the Network Link Service belongs to, for example, `n-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (NetworkLinkServiceNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkLinkServiceNetwork)(nil)).Elem()
}

func (i NetworkLinkServiceNetworkArgs) ToNetworkLinkServiceNetworkOutput() NetworkLinkServiceNetworkOutput {
	return i.ToNetworkLinkServiceNetworkOutputWithContext(context.Background())
}

func (i NetworkLinkServiceNetworkArgs) ToNetworkLinkServiceNetworkOutputWithContext(ctx context.Context) NetworkLinkServiceNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkLinkServiceNetworkOutput)
}

func (i NetworkLinkServiceNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[NetworkLinkServiceNetwork] {
	return pulumix.Output[NetworkLinkServiceNetwork]{
		OutputState: i.ToNetworkLinkServiceNetworkOutputWithContext(ctx).OutputState,
	}
}

func (i NetworkLinkServiceNetworkArgs) ToNetworkLinkServiceNetworkPtrOutput() NetworkLinkServiceNetworkPtrOutput {
	return i.ToNetworkLinkServiceNetworkPtrOutputWithContext(context.Background())
}

func (i NetworkLinkServiceNetworkArgs) ToNetworkLinkServiceNetworkPtrOutputWithContext(ctx context.Context) NetworkLinkServiceNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkLinkServiceNetworkOutput).ToNetworkLinkServiceNetworkPtrOutputWithContext(ctx)
}

// NetworkLinkServiceNetworkPtrInput is an input type that accepts NetworkLinkServiceNetworkArgs, NetworkLinkServiceNetworkPtr and NetworkLinkServiceNetworkPtrOutput values.
// You can construct a concrete instance of `NetworkLinkServiceNetworkPtrInput` via:
//
//	        NetworkLinkServiceNetworkArgs{...}
//
//	or:
//
//	        nil
type NetworkLinkServiceNetworkPtrInput interface {
	pulumi.Input

	ToNetworkLinkServiceNetworkPtrOutput() NetworkLinkServiceNetworkPtrOutput
	ToNetworkLinkServiceNetworkPtrOutputWithContext(context.Context) NetworkLinkServiceNetworkPtrOutput
}

type networkLinkServiceNetworkPtrType NetworkLinkServiceNetworkArgs

func NetworkLinkServiceNetworkPtr(v *NetworkLinkServiceNetworkArgs) NetworkLinkServiceNetworkPtrInput {
	return (*networkLinkServiceNetworkPtrType)(v)
}

func (*networkLinkServiceNetworkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkLinkServiceNetwork)(nil)).Elem()
}

func (i *networkLinkServiceNetworkPtrType) ToNetworkLinkServiceNetworkPtrOutput() NetworkLinkServiceNetworkPtrOutput {
	return i.ToNetworkLinkServiceNetworkPtrOutputWithContext(context.Background())
}

func (i *networkLinkServiceNetworkPtrType) ToNetworkLinkServiceNetworkPtrOutputWithContext(ctx context.Context) NetworkLinkServiceNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkLinkServiceNetworkPtrOutput)
}

func (i *networkLinkServiceNetworkPtrType) ToOutput(ctx context.Context) pulumix.Output[*NetworkLinkServiceNetwork] {
	return pulumix.Output[*NetworkLinkServiceNetwork]{
		OutputState: i.ToNetworkLinkServiceNetworkPtrOutputWithContext(ctx).OutputState,
	}
}

type NetworkLinkServiceNetworkOutput struct{ *pulumi.OutputState }

func (NetworkLinkServiceNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkLinkServiceNetwork)(nil)).Elem()
}

func (o NetworkLinkServiceNetworkOutput) ToNetworkLinkServiceNetworkOutput() NetworkLinkServiceNetworkOutput {
	return o
}

func (o NetworkLinkServiceNetworkOutput) ToNetworkLinkServiceNetworkOutputWithContext(ctx context.Context) NetworkLinkServiceNetworkOutput {
	return o
}

func (o NetworkLinkServiceNetworkOutput) ToNetworkLinkServiceNetworkPtrOutput() NetworkLinkServiceNetworkPtrOutput {
	return o.ToNetworkLinkServiceNetworkPtrOutputWithContext(context.Background())
}

func (o NetworkLinkServiceNetworkOutput) ToNetworkLinkServiceNetworkPtrOutputWithContext(ctx context.Context) NetworkLinkServiceNetworkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkLinkServiceNetwork) *NetworkLinkServiceNetwork {
		return &v
	}).(NetworkLinkServiceNetworkPtrOutput)
}

func (o NetworkLinkServiceNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[NetworkLinkServiceNetwork] {
	return pulumix.Output[NetworkLinkServiceNetwork]{
		OutputState: o.OutputState,
	}
}

// The ID of the Network that the Network Link Service belongs to, for example, `n-abc123`.
func (o NetworkLinkServiceNetworkOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkLinkServiceNetwork) string { return v.Id }).(pulumi.StringOutput)
}

type NetworkLinkServiceNetworkPtrOutput struct{ *pulumi.OutputState }

func (NetworkLinkServiceNetworkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkLinkServiceNetwork)(nil)).Elem()
}

func (o NetworkLinkServiceNetworkPtrOutput) ToNetworkLinkServiceNetworkPtrOutput() NetworkLinkServiceNetworkPtrOutput {
	return o
}

func (o NetworkLinkServiceNetworkPtrOutput) ToNetworkLinkServiceNetworkPtrOutputWithContext(ctx context.Context) NetworkLinkServiceNetworkPtrOutput {
	return o
}

func (o NetworkLinkServiceNetworkPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*NetworkLinkServiceNetwork] {
	return pulumix.Output[*NetworkLinkServiceNetwork]{
		OutputState: o.OutputState,
	}
}

func (o NetworkLinkServiceNetworkPtrOutput) Elem() NetworkLinkServiceNetworkOutput {
	return o.ApplyT(func(v *NetworkLinkServiceNetwork) NetworkLinkServiceNetwork {
		if v != nil {
			return *v
		}
		var ret NetworkLinkServiceNetwork
		return ret
	}).(NetworkLinkServiceNetworkOutput)
}

// The ID of the Network that the Network Link Service belongs to, for example, `n-abc123`.
func (o NetworkLinkServiceNetworkPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkLinkServiceNetwork) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type NetworkZoneInfo struct {
	// The IPv4 CIDR block to be used for the network. Must be `/27`. Required for VPC peering and AWS TransitGateway.
	//
	// > **Note:** The `zoneInfo` configuration block and `reservedCidr` are in a [Limited Availability lifecycle stage](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy), and it's available only for AWS networks with PEERING connection type.
	Cidr *string `pulumi:"cidr"`
	// Cloud provider zone ID.
	ZoneId *string `pulumi:"zoneId"`
}

// NetworkZoneInfoInput is an input type that accepts NetworkZoneInfoArgs and NetworkZoneInfoOutput values.
// You can construct a concrete instance of `NetworkZoneInfoInput` via:
//
//	NetworkZoneInfoArgs{...}
type NetworkZoneInfoInput interface {
	pulumi.Input

	ToNetworkZoneInfoOutput() NetworkZoneInfoOutput
	ToNetworkZoneInfoOutputWithContext(context.Context) NetworkZoneInfoOutput
}

type NetworkZoneInfoArgs struct {
	// The IPv4 CIDR block to be used for the network. Must be `/27`. Required for VPC peering and AWS TransitGateway.
	//
	// > **Note:** The `zoneInfo` configuration block and `reservedCidr` are in a [Limited Availability lifecycle stage](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy), and it's available only for AWS networks with PEERING connection type.
	Cidr pulumi.StringPtrInput `pulumi:"cidr"`
	// Cloud provider zone ID.
	ZoneId pulumi.StringPtrInput `pulumi:"zoneId"`
}

func (NetworkZoneInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkZoneInfo)(nil)).Elem()
}

func (i NetworkZoneInfoArgs) ToNetworkZoneInfoOutput() NetworkZoneInfoOutput {
	return i.ToNetworkZoneInfoOutputWithContext(context.Background())
}

func (i NetworkZoneInfoArgs) ToNetworkZoneInfoOutputWithContext(ctx context.Context) NetworkZoneInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkZoneInfoOutput)
}

func (i NetworkZoneInfoArgs) ToOutput(ctx context.Context) pulumix.Output[NetworkZoneInfo] {
	return pulumix.Output[NetworkZoneInfo]{
		OutputState: i.ToNetworkZoneInfoOutputWithContext(ctx).OutputState,
	}
}

// NetworkZoneInfoArrayInput is an input type that accepts NetworkZoneInfoArray and NetworkZoneInfoArrayOutput values.
// You can construct a concrete instance of `NetworkZoneInfoArrayInput` via:
//
//	NetworkZoneInfoArray{ NetworkZoneInfoArgs{...} }
type NetworkZoneInfoArrayInput interface {
	pulumi.Input

	ToNetworkZoneInfoArrayOutput() NetworkZoneInfoArrayOutput
	ToNetworkZoneInfoArrayOutputWithContext(context.Context) NetworkZoneInfoArrayOutput
}

type NetworkZoneInfoArray []NetworkZoneInfoInput

func (NetworkZoneInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkZoneInfo)(nil)).Elem()
}

func (i NetworkZoneInfoArray) ToNetworkZoneInfoArrayOutput() NetworkZoneInfoArrayOutput {
	return i.ToNetworkZoneInfoArrayOutputWithContext(context.Background())
}

func (i NetworkZoneInfoArray) ToNetworkZoneInfoArrayOutputWithContext(ctx context.Context) NetworkZoneInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkZoneInfoArrayOutput)
}

func (i NetworkZoneInfoArray) ToOutput(ctx context.Context) pulumix.Output[[]NetworkZoneInfo] {
	return pulumix.Output[[]NetworkZoneInfo]{
		OutputState: i.ToNetworkZoneInfoArrayOutputWithContext(ctx).OutputState,
	}
}

type NetworkZoneInfoOutput struct{ *pulumi.OutputState }

func (NetworkZoneInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkZoneInfo)(nil)).Elem()
}

func (o NetworkZoneInfoOutput) ToNetworkZoneInfoOutput() NetworkZoneInfoOutput {
	return o
}

func (o NetworkZoneInfoOutput) ToNetworkZoneInfoOutputWithContext(ctx context.Context) NetworkZoneInfoOutput {
	return o
}

func (o NetworkZoneInfoOutput) ToOutput(ctx context.Context) pulumix.Output[NetworkZoneInfo] {
	return pulumix.Output[NetworkZoneInfo]{
		OutputState: o.OutputState,
	}
}

// The IPv4 CIDR block to be used for the network. Must be `/27`. Required for VPC peering and AWS TransitGateway.
//
// > **Note:** The `zoneInfo` configuration block and `reservedCidr` are in a [Limited Availability lifecycle stage](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy), and it's available only for AWS networks with PEERING connection type.
func (o NetworkZoneInfoOutput) Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkZoneInfo) *string { return v.Cidr }).(pulumi.StringPtrOutput)
}

// Cloud provider zone ID.
func (o NetworkZoneInfoOutput) ZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkZoneInfo) *string { return v.ZoneId }).(pulumi.StringPtrOutput)
}

type NetworkZoneInfoArrayOutput struct{ *pulumi.OutputState }

func (NetworkZoneInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkZoneInfo)(nil)).Elem()
}

func (o NetworkZoneInfoArrayOutput) ToNetworkZoneInfoArrayOutput() NetworkZoneInfoArrayOutput {
	return o
}

func (o NetworkZoneInfoArrayOutput) ToNetworkZoneInfoArrayOutputWithContext(ctx context.Context) NetworkZoneInfoArrayOutput {
	return o
}

func (o NetworkZoneInfoArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]NetworkZoneInfo] {
	return pulumix.Output[[]NetworkZoneInfo]{
		OutputState: o.OutputState,
	}
}

func (o NetworkZoneInfoArrayOutput) Index(i pulumi.IntInput) NetworkZoneInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkZoneInfo {
		return vs[0].([]NetworkZoneInfo)[vs[1].(int)]
	}).(NetworkZoneInfoOutput)
}

type PeeringAws struct {
	// The AWS Account ID of the peer VPC owner. You can find your AWS Account ID [here](https://console.aws.amazon.com/billing/home?#/account) under **My Account** section of the AWS Management Console. Must be a **12 character string**.
	Account string `pulumi:"account"`
	// The region of the Azure peer VNet.
	CustomerRegion string `pulumi:"customerRegion"`
	// The AWS VPC CIDR blocks or subsets. This must be from the supported CIDR blocks and must not overlap with your Confluent Cloud CIDR block or any other network peering connection VPC CIDR (learn more about the requirements [here](https://docs.confluent.io/cloud/current/networking/peering/aws-peering.html#vpc-peering-on-aws)). You can find AWS VPC CIDR [here](https://console.aws.amazon.com/vpc/) under **Your VPCs > Target VPC > Details** section of the AWS Management Console.
	Routes []string `pulumi:"routes"`
	// The AWS VPC ID of the peer VPC that you're peering with Confluent Cloud. You can find your AWS VPC ID [here](https://console.aws.amazon.com/vpc/) under **Your VPCs** section of the AWS Management Console. Must start with `vpc-`.
	Vpc string `pulumi:"vpc"`
}

// PeeringAwsInput is an input type that accepts PeeringAwsArgs and PeeringAwsOutput values.
// You can construct a concrete instance of `PeeringAwsInput` via:
//
//	PeeringAwsArgs{...}
type PeeringAwsInput interface {
	pulumi.Input

	ToPeeringAwsOutput() PeeringAwsOutput
	ToPeeringAwsOutputWithContext(context.Context) PeeringAwsOutput
}

type PeeringAwsArgs struct {
	// The AWS Account ID of the peer VPC owner. You can find your AWS Account ID [here](https://console.aws.amazon.com/billing/home?#/account) under **My Account** section of the AWS Management Console. Must be a **12 character string**.
	Account pulumi.StringInput `pulumi:"account"`
	// The region of the Azure peer VNet.
	CustomerRegion pulumi.StringInput `pulumi:"customerRegion"`
	// The AWS VPC CIDR blocks or subsets. This must be from the supported CIDR blocks and must not overlap with your Confluent Cloud CIDR block or any other network peering connection VPC CIDR (learn more about the requirements [here](https://docs.confluent.io/cloud/current/networking/peering/aws-peering.html#vpc-peering-on-aws)). You can find AWS VPC CIDR [here](https://console.aws.amazon.com/vpc/) under **Your VPCs > Target VPC > Details** section of the AWS Management Console.
	Routes pulumi.StringArrayInput `pulumi:"routes"`
	// The AWS VPC ID of the peer VPC that you're peering with Confluent Cloud. You can find your AWS VPC ID [here](https://console.aws.amazon.com/vpc/) under **Your VPCs** section of the AWS Management Console. Must start with `vpc-`.
	Vpc pulumi.StringInput `pulumi:"vpc"`
}

func (PeeringAwsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringAws)(nil)).Elem()
}

func (i PeeringAwsArgs) ToPeeringAwsOutput() PeeringAwsOutput {
	return i.ToPeeringAwsOutputWithContext(context.Background())
}

func (i PeeringAwsArgs) ToPeeringAwsOutputWithContext(ctx context.Context) PeeringAwsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringAwsOutput)
}

func (i PeeringAwsArgs) ToOutput(ctx context.Context) pulumix.Output[PeeringAws] {
	return pulumix.Output[PeeringAws]{
		OutputState: i.ToPeeringAwsOutputWithContext(ctx).OutputState,
	}
}

func (i PeeringAwsArgs) ToPeeringAwsPtrOutput() PeeringAwsPtrOutput {
	return i.ToPeeringAwsPtrOutputWithContext(context.Background())
}

func (i PeeringAwsArgs) ToPeeringAwsPtrOutputWithContext(ctx context.Context) PeeringAwsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringAwsOutput).ToPeeringAwsPtrOutputWithContext(ctx)
}

// PeeringAwsPtrInput is an input type that accepts PeeringAwsArgs, PeeringAwsPtr and PeeringAwsPtrOutput values.
// You can construct a concrete instance of `PeeringAwsPtrInput` via:
//
//	        PeeringAwsArgs{...}
//
//	or:
//
//	        nil
type PeeringAwsPtrInput interface {
	pulumi.Input

	ToPeeringAwsPtrOutput() PeeringAwsPtrOutput
	ToPeeringAwsPtrOutputWithContext(context.Context) PeeringAwsPtrOutput
}

type peeringAwsPtrType PeeringAwsArgs

func PeeringAwsPtr(v *PeeringAwsArgs) PeeringAwsPtrInput {
	return (*peeringAwsPtrType)(v)
}

func (*peeringAwsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringAws)(nil)).Elem()
}

func (i *peeringAwsPtrType) ToPeeringAwsPtrOutput() PeeringAwsPtrOutput {
	return i.ToPeeringAwsPtrOutputWithContext(context.Background())
}

func (i *peeringAwsPtrType) ToPeeringAwsPtrOutputWithContext(ctx context.Context) PeeringAwsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringAwsPtrOutput)
}

func (i *peeringAwsPtrType) ToOutput(ctx context.Context) pulumix.Output[*PeeringAws] {
	return pulumix.Output[*PeeringAws]{
		OutputState: i.ToPeeringAwsPtrOutputWithContext(ctx).OutputState,
	}
}

type PeeringAwsOutput struct{ *pulumi.OutputState }

func (PeeringAwsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringAws)(nil)).Elem()
}

func (o PeeringAwsOutput) ToPeeringAwsOutput() PeeringAwsOutput {
	return o
}

func (o PeeringAwsOutput) ToPeeringAwsOutputWithContext(ctx context.Context) PeeringAwsOutput {
	return o
}

func (o PeeringAwsOutput) ToPeeringAwsPtrOutput() PeeringAwsPtrOutput {
	return o.ToPeeringAwsPtrOutputWithContext(context.Background())
}

func (o PeeringAwsOutput) ToPeeringAwsPtrOutputWithContext(ctx context.Context) PeeringAwsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PeeringAws) *PeeringAws {
		return &v
	}).(PeeringAwsPtrOutput)
}

func (o PeeringAwsOutput) ToOutput(ctx context.Context) pulumix.Output[PeeringAws] {
	return pulumix.Output[PeeringAws]{
		OutputState: o.OutputState,
	}
}

// The AWS Account ID of the peer VPC owner. You can find your AWS Account ID [here](https://console.aws.amazon.com/billing/home?#/account) under **My Account** section of the AWS Management Console. Must be a **12 character string**.
func (o PeeringAwsOutput) Account() pulumi.StringOutput {
	return o.ApplyT(func(v PeeringAws) string { return v.Account }).(pulumi.StringOutput)
}

// The region of the Azure peer VNet.
func (o PeeringAwsOutput) CustomerRegion() pulumi.StringOutput {
	return o.ApplyT(func(v PeeringAws) string { return v.CustomerRegion }).(pulumi.StringOutput)
}

// The AWS VPC CIDR blocks or subsets. This must be from the supported CIDR blocks and must not overlap with your Confluent Cloud CIDR block or any other network peering connection VPC CIDR (learn more about the requirements [here](https://docs.confluent.io/cloud/current/networking/peering/aws-peering.html#vpc-peering-on-aws)). You can find AWS VPC CIDR [here](https://console.aws.amazon.com/vpc/) under **Your VPCs > Target VPC > Details** section of the AWS Management Console.
func (o PeeringAwsOutput) Routes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PeeringAws) []string { return v.Routes }).(pulumi.StringArrayOutput)
}

// The AWS VPC ID of the peer VPC that you're peering with Confluent Cloud. You can find your AWS VPC ID [here](https://console.aws.amazon.com/vpc/) under **Your VPCs** section of the AWS Management Console. Must start with `vpc-`.
func (o PeeringAwsOutput) Vpc() pulumi.StringOutput {
	return o.ApplyT(func(v PeeringAws) string { return v.Vpc }).(pulumi.StringOutput)
}

type PeeringAwsPtrOutput struct{ *pulumi.OutputState }

func (PeeringAwsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringAws)(nil)).Elem()
}

func (o PeeringAwsPtrOutput) ToPeeringAwsPtrOutput() PeeringAwsPtrOutput {
	return o
}

func (o PeeringAwsPtrOutput) ToPeeringAwsPtrOutputWithContext(ctx context.Context) PeeringAwsPtrOutput {
	return o
}

func (o PeeringAwsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PeeringAws] {
	return pulumix.Output[*PeeringAws]{
		OutputState: o.OutputState,
	}
}

func (o PeeringAwsPtrOutput) Elem() PeeringAwsOutput {
	return o.ApplyT(func(v *PeeringAws) PeeringAws {
		if v != nil {
			return *v
		}
		var ret PeeringAws
		return ret
	}).(PeeringAwsOutput)
}

// The AWS Account ID of the peer VPC owner. You can find your AWS Account ID [here](https://console.aws.amazon.com/billing/home?#/account) under **My Account** section of the AWS Management Console. Must be a **12 character string**.
func (o PeeringAwsPtrOutput) Account() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringAws) *string {
		if v == nil {
			return nil
		}
		return &v.Account
	}).(pulumi.StringPtrOutput)
}

// The region of the Azure peer VNet.
func (o PeeringAwsPtrOutput) CustomerRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringAws) *string {
		if v == nil {
			return nil
		}
		return &v.CustomerRegion
	}).(pulumi.StringPtrOutput)
}

// The AWS VPC CIDR blocks or subsets. This must be from the supported CIDR blocks and must not overlap with your Confluent Cloud CIDR block or any other network peering connection VPC CIDR (learn more about the requirements [here](https://docs.confluent.io/cloud/current/networking/peering/aws-peering.html#vpc-peering-on-aws)). You can find AWS VPC CIDR [here](https://console.aws.amazon.com/vpc/) under **Your VPCs > Target VPC > Details** section of the AWS Management Console.
func (o PeeringAwsPtrOutput) Routes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PeeringAws) []string {
		if v == nil {
			return nil
		}
		return v.Routes
	}).(pulumi.StringArrayOutput)
}

// The AWS VPC ID of the peer VPC that you're peering with Confluent Cloud. You can find your AWS VPC ID [here](https://console.aws.amazon.com/vpc/) under **Your VPCs** section of the AWS Management Console. Must start with `vpc-`.
func (o PeeringAwsPtrOutput) Vpc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringAws) *string {
		if v == nil {
			return nil
		}
		return &v.Vpc
	}).(pulumi.StringPtrOutput)
}

type PeeringAzure struct {
	// The region of the Azure peer VNet.
	CustomerRegion string `pulumi:"customerRegion"`
	// The Tenant ID that represents an organization in Azure Active Directory. You can find your Azure Tenant ID in the [Azure Portal under Azure Active Directory](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview). Must be a valid **32 character UUID string**.
	Tenant string `pulumi:"tenant"`
	// The resource (composite) ID of the peer Virtual Network that you're peering with Confluent Cloud, in the format `/subscriptions/<Subscription ID>/resourceGroups/<Resource Group Name>/providers/Microsoft.Network/virtualNetworks/<VNet name>`. You can find Subscription ID, Resource Group Name and your VNet name under **Virtual Networks > Target VNet > Essentials** section of your [Microsoft Azure Portal](https://portal.azure.com/).
	Vnet string `pulumi:"vnet"`
}

// PeeringAzureInput is an input type that accepts PeeringAzureArgs and PeeringAzureOutput values.
// You can construct a concrete instance of `PeeringAzureInput` via:
//
//	PeeringAzureArgs{...}
type PeeringAzureInput interface {
	pulumi.Input

	ToPeeringAzureOutput() PeeringAzureOutput
	ToPeeringAzureOutputWithContext(context.Context) PeeringAzureOutput
}

type PeeringAzureArgs struct {
	// The region of the Azure peer VNet.
	CustomerRegion pulumi.StringInput `pulumi:"customerRegion"`
	// The Tenant ID that represents an organization in Azure Active Directory. You can find your Azure Tenant ID in the [Azure Portal under Azure Active Directory](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview). Must be a valid **32 character UUID string**.
	Tenant pulumi.StringInput `pulumi:"tenant"`
	// The resource (composite) ID of the peer Virtual Network that you're peering with Confluent Cloud, in the format `/subscriptions/<Subscription ID>/resourceGroups/<Resource Group Name>/providers/Microsoft.Network/virtualNetworks/<VNet name>`. You can find Subscription ID, Resource Group Name and your VNet name under **Virtual Networks > Target VNet > Essentials** section of your [Microsoft Azure Portal](https://portal.azure.com/).
	Vnet pulumi.StringInput `pulumi:"vnet"`
}

func (PeeringAzureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringAzure)(nil)).Elem()
}

func (i PeeringAzureArgs) ToPeeringAzureOutput() PeeringAzureOutput {
	return i.ToPeeringAzureOutputWithContext(context.Background())
}

func (i PeeringAzureArgs) ToPeeringAzureOutputWithContext(ctx context.Context) PeeringAzureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringAzureOutput)
}

func (i PeeringAzureArgs) ToOutput(ctx context.Context) pulumix.Output[PeeringAzure] {
	return pulumix.Output[PeeringAzure]{
		OutputState: i.ToPeeringAzureOutputWithContext(ctx).OutputState,
	}
}

func (i PeeringAzureArgs) ToPeeringAzurePtrOutput() PeeringAzurePtrOutput {
	return i.ToPeeringAzurePtrOutputWithContext(context.Background())
}

func (i PeeringAzureArgs) ToPeeringAzurePtrOutputWithContext(ctx context.Context) PeeringAzurePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringAzureOutput).ToPeeringAzurePtrOutputWithContext(ctx)
}

// PeeringAzurePtrInput is an input type that accepts PeeringAzureArgs, PeeringAzurePtr and PeeringAzurePtrOutput values.
// You can construct a concrete instance of `PeeringAzurePtrInput` via:
//
//	        PeeringAzureArgs{...}
//
//	or:
//
//	        nil
type PeeringAzurePtrInput interface {
	pulumi.Input

	ToPeeringAzurePtrOutput() PeeringAzurePtrOutput
	ToPeeringAzurePtrOutputWithContext(context.Context) PeeringAzurePtrOutput
}

type peeringAzurePtrType PeeringAzureArgs

func PeeringAzurePtr(v *PeeringAzureArgs) PeeringAzurePtrInput {
	return (*peeringAzurePtrType)(v)
}

func (*peeringAzurePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringAzure)(nil)).Elem()
}

func (i *peeringAzurePtrType) ToPeeringAzurePtrOutput() PeeringAzurePtrOutput {
	return i.ToPeeringAzurePtrOutputWithContext(context.Background())
}

func (i *peeringAzurePtrType) ToPeeringAzurePtrOutputWithContext(ctx context.Context) PeeringAzurePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringAzurePtrOutput)
}

func (i *peeringAzurePtrType) ToOutput(ctx context.Context) pulumix.Output[*PeeringAzure] {
	return pulumix.Output[*PeeringAzure]{
		OutputState: i.ToPeeringAzurePtrOutputWithContext(ctx).OutputState,
	}
}

type PeeringAzureOutput struct{ *pulumi.OutputState }

func (PeeringAzureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringAzure)(nil)).Elem()
}

func (o PeeringAzureOutput) ToPeeringAzureOutput() PeeringAzureOutput {
	return o
}

func (o PeeringAzureOutput) ToPeeringAzureOutputWithContext(ctx context.Context) PeeringAzureOutput {
	return o
}

func (o PeeringAzureOutput) ToPeeringAzurePtrOutput() PeeringAzurePtrOutput {
	return o.ToPeeringAzurePtrOutputWithContext(context.Background())
}

func (o PeeringAzureOutput) ToPeeringAzurePtrOutputWithContext(ctx context.Context) PeeringAzurePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PeeringAzure) *PeeringAzure {
		return &v
	}).(PeeringAzurePtrOutput)
}

func (o PeeringAzureOutput) ToOutput(ctx context.Context) pulumix.Output[PeeringAzure] {
	return pulumix.Output[PeeringAzure]{
		OutputState: o.OutputState,
	}
}

// The region of the Azure peer VNet.
func (o PeeringAzureOutput) CustomerRegion() pulumi.StringOutput {
	return o.ApplyT(func(v PeeringAzure) string { return v.CustomerRegion }).(pulumi.StringOutput)
}

// The Tenant ID that represents an organization in Azure Active Directory. You can find your Azure Tenant ID in the [Azure Portal under Azure Active Directory](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview). Must be a valid **32 character UUID string**.
func (o PeeringAzureOutput) Tenant() pulumi.StringOutput {
	return o.ApplyT(func(v PeeringAzure) string { return v.Tenant }).(pulumi.StringOutput)
}

// The resource (composite) ID of the peer Virtual Network that you're peering with Confluent Cloud, in the format `/subscriptions/<Subscription ID>/resourceGroups/<Resource Group Name>/providers/Microsoft.Network/virtualNetworks/<VNet name>`. You can find Subscription ID, Resource Group Name and your VNet name under **Virtual Networks > Target VNet > Essentials** section of your [Microsoft Azure Portal](https://portal.azure.com/).
func (o PeeringAzureOutput) Vnet() pulumi.StringOutput {
	return o.ApplyT(func(v PeeringAzure) string { return v.Vnet }).(pulumi.StringOutput)
}

type PeeringAzurePtrOutput struct{ *pulumi.OutputState }

func (PeeringAzurePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringAzure)(nil)).Elem()
}

func (o PeeringAzurePtrOutput) ToPeeringAzurePtrOutput() PeeringAzurePtrOutput {
	return o
}

func (o PeeringAzurePtrOutput) ToPeeringAzurePtrOutputWithContext(ctx context.Context) PeeringAzurePtrOutput {
	return o
}

func (o PeeringAzurePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PeeringAzure] {
	return pulumix.Output[*PeeringAzure]{
		OutputState: o.OutputState,
	}
}

func (o PeeringAzurePtrOutput) Elem() PeeringAzureOutput {
	return o.ApplyT(func(v *PeeringAzure) PeeringAzure {
		if v != nil {
			return *v
		}
		var ret PeeringAzure
		return ret
	}).(PeeringAzureOutput)
}

// The region of the Azure peer VNet.
func (o PeeringAzurePtrOutput) CustomerRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringAzure) *string {
		if v == nil {
			return nil
		}
		return &v.CustomerRegion
	}).(pulumi.StringPtrOutput)
}

// The Tenant ID that represents an organization in Azure Active Directory. You can find your Azure Tenant ID in the [Azure Portal under Azure Active Directory](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview). Must be a valid **32 character UUID string**.
func (o PeeringAzurePtrOutput) Tenant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringAzure) *string {
		if v == nil {
			return nil
		}
		return &v.Tenant
	}).(pulumi.StringPtrOutput)
}

// The resource (composite) ID of the peer Virtual Network that you're peering with Confluent Cloud, in the format `/subscriptions/<Subscription ID>/resourceGroups/<Resource Group Name>/providers/Microsoft.Network/virtualNetworks/<VNet name>`. You can find Subscription ID, Resource Group Name and your VNet name under **Virtual Networks > Target VNet > Essentials** section of your [Microsoft Azure Portal](https://portal.azure.com/).
func (o PeeringAzurePtrOutput) Vnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringAzure) *string {
		if v == nil {
			return nil
		}
		return &v.Vnet
	}).(pulumi.StringPtrOutput)
}

type PeeringEnvironment struct {
	// The ID of the Network that the Peering belongs to, for example, `n-abc123`.
	Id string `pulumi:"id"`
}

// PeeringEnvironmentInput is an input type that accepts PeeringEnvironmentArgs and PeeringEnvironmentOutput values.
// You can construct a concrete instance of `PeeringEnvironmentInput` via:
//
//	PeeringEnvironmentArgs{...}
type PeeringEnvironmentInput interface {
	pulumi.Input

	ToPeeringEnvironmentOutput() PeeringEnvironmentOutput
	ToPeeringEnvironmentOutputWithContext(context.Context) PeeringEnvironmentOutput
}

type PeeringEnvironmentArgs struct {
	// The ID of the Network that the Peering belongs to, for example, `n-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (PeeringEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringEnvironment)(nil)).Elem()
}

func (i PeeringEnvironmentArgs) ToPeeringEnvironmentOutput() PeeringEnvironmentOutput {
	return i.ToPeeringEnvironmentOutputWithContext(context.Background())
}

func (i PeeringEnvironmentArgs) ToPeeringEnvironmentOutputWithContext(ctx context.Context) PeeringEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringEnvironmentOutput)
}

func (i PeeringEnvironmentArgs) ToOutput(ctx context.Context) pulumix.Output[PeeringEnvironment] {
	return pulumix.Output[PeeringEnvironment]{
		OutputState: i.ToPeeringEnvironmentOutputWithContext(ctx).OutputState,
	}
}

func (i PeeringEnvironmentArgs) ToPeeringEnvironmentPtrOutput() PeeringEnvironmentPtrOutput {
	return i.ToPeeringEnvironmentPtrOutputWithContext(context.Background())
}

func (i PeeringEnvironmentArgs) ToPeeringEnvironmentPtrOutputWithContext(ctx context.Context) PeeringEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringEnvironmentOutput).ToPeeringEnvironmentPtrOutputWithContext(ctx)
}

// PeeringEnvironmentPtrInput is an input type that accepts PeeringEnvironmentArgs, PeeringEnvironmentPtr and PeeringEnvironmentPtrOutput values.
// You can construct a concrete instance of `PeeringEnvironmentPtrInput` via:
//
//	        PeeringEnvironmentArgs{...}
//
//	or:
//
//	        nil
type PeeringEnvironmentPtrInput interface {
	pulumi.Input

	ToPeeringEnvironmentPtrOutput() PeeringEnvironmentPtrOutput
	ToPeeringEnvironmentPtrOutputWithContext(context.Context) PeeringEnvironmentPtrOutput
}

type peeringEnvironmentPtrType PeeringEnvironmentArgs

func PeeringEnvironmentPtr(v *PeeringEnvironmentArgs) PeeringEnvironmentPtrInput {
	return (*peeringEnvironmentPtrType)(v)
}

func (*peeringEnvironmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringEnvironment)(nil)).Elem()
}

func (i *peeringEnvironmentPtrType) ToPeeringEnvironmentPtrOutput() PeeringEnvironmentPtrOutput {
	return i.ToPeeringEnvironmentPtrOutputWithContext(context.Background())
}

func (i *peeringEnvironmentPtrType) ToPeeringEnvironmentPtrOutputWithContext(ctx context.Context) PeeringEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringEnvironmentPtrOutput)
}

func (i *peeringEnvironmentPtrType) ToOutput(ctx context.Context) pulumix.Output[*PeeringEnvironment] {
	return pulumix.Output[*PeeringEnvironment]{
		OutputState: i.ToPeeringEnvironmentPtrOutputWithContext(ctx).OutputState,
	}
}

type PeeringEnvironmentOutput struct{ *pulumi.OutputState }

func (PeeringEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringEnvironment)(nil)).Elem()
}

func (o PeeringEnvironmentOutput) ToPeeringEnvironmentOutput() PeeringEnvironmentOutput {
	return o
}

func (o PeeringEnvironmentOutput) ToPeeringEnvironmentOutputWithContext(ctx context.Context) PeeringEnvironmentOutput {
	return o
}

func (o PeeringEnvironmentOutput) ToPeeringEnvironmentPtrOutput() PeeringEnvironmentPtrOutput {
	return o.ToPeeringEnvironmentPtrOutputWithContext(context.Background())
}

func (o PeeringEnvironmentOutput) ToPeeringEnvironmentPtrOutputWithContext(ctx context.Context) PeeringEnvironmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PeeringEnvironment) *PeeringEnvironment {
		return &v
	}).(PeeringEnvironmentPtrOutput)
}

func (o PeeringEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[PeeringEnvironment] {
	return pulumix.Output[PeeringEnvironment]{
		OutputState: o.OutputState,
	}
}

// The ID of the Network that the Peering belongs to, for example, `n-abc123`.
func (o PeeringEnvironmentOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PeeringEnvironment) string { return v.Id }).(pulumi.StringOutput)
}

type PeeringEnvironmentPtrOutput struct{ *pulumi.OutputState }

func (PeeringEnvironmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringEnvironment)(nil)).Elem()
}

func (o PeeringEnvironmentPtrOutput) ToPeeringEnvironmentPtrOutput() PeeringEnvironmentPtrOutput {
	return o
}

func (o PeeringEnvironmentPtrOutput) ToPeeringEnvironmentPtrOutputWithContext(ctx context.Context) PeeringEnvironmentPtrOutput {
	return o
}

func (o PeeringEnvironmentPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PeeringEnvironment] {
	return pulumix.Output[*PeeringEnvironment]{
		OutputState: o.OutputState,
	}
}

func (o PeeringEnvironmentPtrOutput) Elem() PeeringEnvironmentOutput {
	return o.ApplyT(func(v *PeeringEnvironment) PeeringEnvironment {
		if v != nil {
			return *v
		}
		var ret PeeringEnvironment
		return ret
	}).(PeeringEnvironmentOutput)
}

// The ID of the Network that the Peering belongs to, for example, `n-abc123`.
func (o PeeringEnvironmentPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringEnvironment) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type PeeringGcp struct {
	// The Import Custom Routes option enables connectivity to a Confluent Cloud cluster in Google Cloud from customer premise or other clouds, such as AWS and Azure, through a customer VPC that is peered with Confluent Cloud in the same region. Defaults to `false`. Learn more about considerations / limitations of the Import Custom Routes option [here](https://docs.confluent.io/cloud/current/networking/peering/gcp-peering.html#import-custom-routes).
	//
	// > **Note:** Exactly one from the `aws`, `azure`, and `gcp` configuration blocks must be specified.
	//
	// > **Note:** Learn more about VPC Peering requirements on AWS [here](https://docs.confluent.io/cloud/current/networking/peering/aws-peering.html#vpc-peering-on-aws).
	//
	// > **Note:** Learn more about VNet Peering requirements on Azure [here](https://docs.confluent.io/cloud/current/networking/peering/azure-peering.html#vnet-peering-on-az).
	//
	// > **Note:** Learn more about VPC Peering requirements on Google Cloud Platform [here](https://docs.confluent.io/cloud/current/networking/peering/gcp-peering.html#vpc-peering-on-gcp).
	ImportCustomRoutes *bool `pulumi:"importCustomRoutes"`
	// The GCP Project ID. You can find your Google Cloud Project ID under **Project ID** section of your [Google Cloud Console dashboard](https://console.cloud.google.com/home/dashboard).
	Project string `pulumi:"project"`
	// The VPC network name that you're peering to Confluent Cloud. You can find your VPC network name under **VPC Networks** section of your [Google Cloud Console](https://console.cloud.google.com/networking/networks/list).
	VpcNetwork string `pulumi:"vpcNetwork"`
}

// PeeringGcpInput is an input type that accepts PeeringGcpArgs and PeeringGcpOutput values.
// You can construct a concrete instance of `PeeringGcpInput` via:
//
//	PeeringGcpArgs{...}
type PeeringGcpInput interface {
	pulumi.Input

	ToPeeringGcpOutput() PeeringGcpOutput
	ToPeeringGcpOutputWithContext(context.Context) PeeringGcpOutput
}

type PeeringGcpArgs struct {
	// The Import Custom Routes option enables connectivity to a Confluent Cloud cluster in Google Cloud from customer premise or other clouds, such as AWS and Azure, through a customer VPC that is peered with Confluent Cloud in the same region. Defaults to `false`. Learn more about considerations / limitations of the Import Custom Routes option [here](https://docs.confluent.io/cloud/current/networking/peering/gcp-peering.html#import-custom-routes).
	//
	// > **Note:** Exactly one from the `aws`, `azure`, and `gcp` configuration blocks must be specified.
	//
	// > **Note:** Learn more about VPC Peering requirements on AWS [here](https://docs.confluent.io/cloud/current/networking/peering/aws-peering.html#vpc-peering-on-aws).
	//
	// > **Note:** Learn more about VNet Peering requirements on Azure [here](https://docs.confluent.io/cloud/current/networking/peering/azure-peering.html#vnet-peering-on-az).
	//
	// > **Note:** Learn more about VPC Peering requirements on Google Cloud Platform [here](https://docs.confluent.io/cloud/current/networking/peering/gcp-peering.html#vpc-peering-on-gcp).
	ImportCustomRoutes pulumi.BoolPtrInput `pulumi:"importCustomRoutes"`
	// The GCP Project ID. You can find your Google Cloud Project ID under **Project ID** section of your [Google Cloud Console dashboard](https://console.cloud.google.com/home/dashboard).
	Project pulumi.StringInput `pulumi:"project"`
	// The VPC network name that you're peering to Confluent Cloud. You can find your VPC network name under **VPC Networks** section of your [Google Cloud Console](https://console.cloud.google.com/networking/networks/list).
	VpcNetwork pulumi.StringInput `pulumi:"vpcNetwork"`
}

func (PeeringGcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringGcp)(nil)).Elem()
}

func (i PeeringGcpArgs) ToPeeringGcpOutput() PeeringGcpOutput {
	return i.ToPeeringGcpOutputWithContext(context.Background())
}

func (i PeeringGcpArgs) ToPeeringGcpOutputWithContext(ctx context.Context) PeeringGcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringGcpOutput)
}

func (i PeeringGcpArgs) ToOutput(ctx context.Context) pulumix.Output[PeeringGcp] {
	return pulumix.Output[PeeringGcp]{
		OutputState: i.ToPeeringGcpOutputWithContext(ctx).OutputState,
	}
}

func (i PeeringGcpArgs) ToPeeringGcpPtrOutput() PeeringGcpPtrOutput {
	return i.ToPeeringGcpPtrOutputWithContext(context.Background())
}

func (i PeeringGcpArgs) ToPeeringGcpPtrOutputWithContext(ctx context.Context) PeeringGcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringGcpOutput).ToPeeringGcpPtrOutputWithContext(ctx)
}

// PeeringGcpPtrInput is an input type that accepts PeeringGcpArgs, PeeringGcpPtr and PeeringGcpPtrOutput values.
// You can construct a concrete instance of `PeeringGcpPtrInput` via:
//
//	        PeeringGcpArgs{...}
//
//	or:
//
//	        nil
type PeeringGcpPtrInput interface {
	pulumi.Input

	ToPeeringGcpPtrOutput() PeeringGcpPtrOutput
	ToPeeringGcpPtrOutputWithContext(context.Context) PeeringGcpPtrOutput
}

type peeringGcpPtrType PeeringGcpArgs

func PeeringGcpPtr(v *PeeringGcpArgs) PeeringGcpPtrInput {
	return (*peeringGcpPtrType)(v)
}

func (*peeringGcpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringGcp)(nil)).Elem()
}

func (i *peeringGcpPtrType) ToPeeringGcpPtrOutput() PeeringGcpPtrOutput {
	return i.ToPeeringGcpPtrOutputWithContext(context.Background())
}

func (i *peeringGcpPtrType) ToPeeringGcpPtrOutputWithContext(ctx context.Context) PeeringGcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringGcpPtrOutput)
}

func (i *peeringGcpPtrType) ToOutput(ctx context.Context) pulumix.Output[*PeeringGcp] {
	return pulumix.Output[*PeeringGcp]{
		OutputState: i.ToPeeringGcpPtrOutputWithContext(ctx).OutputState,
	}
}

type PeeringGcpOutput struct{ *pulumi.OutputState }

func (PeeringGcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringGcp)(nil)).Elem()
}

func (o PeeringGcpOutput) ToPeeringGcpOutput() PeeringGcpOutput {
	return o
}

func (o PeeringGcpOutput) ToPeeringGcpOutputWithContext(ctx context.Context) PeeringGcpOutput {
	return o
}

func (o PeeringGcpOutput) ToPeeringGcpPtrOutput() PeeringGcpPtrOutput {
	return o.ToPeeringGcpPtrOutputWithContext(context.Background())
}

func (o PeeringGcpOutput) ToPeeringGcpPtrOutputWithContext(ctx context.Context) PeeringGcpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PeeringGcp) *PeeringGcp {
		return &v
	}).(PeeringGcpPtrOutput)
}

func (o PeeringGcpOutput) ToOutput(ctx context.Context) pulumix.Output[PeeringGcp] {
	return pulumix.Output[PeeringGcp]{
		OutputState: o.OutputState,
	}
}

// The Import Custom Routes option enables connectivity to a Confluent Cloud cluster in Google Cloud from customer premise or other clouds, such as AWS and Azure, through a customer VPC that is peered with Confluent Cloud in the same region. Defaults to `false`. Learn more about considerations / limitations of the Import Custom Routes option [here](https://docs.confluent.io/cloud/current/networking/peering/gcp-peering.html#import-custom-routes).
//
// > **Note:** Exactly one from the `aws`, `azure`, and `gcp` configuration blocks must be specified.
//
// > **Note:** Learn more about VPC Peering requirements on AWS [here](https://docs.confluent.io/cloud/current/networking/peering/aws-peering.html#vpc-peering-on-aws).
//
// > **Note:** Learn more about VNet Peering requirements on Azure [here](https://docs.confluent.io/cloud/current/networking/peering/azure-peering.html#vnet-peering-on-az).
//
// > **Note:** Learn more about VPC Peering requirements on Google Cloud Platform [here](https://docs.confluent.io/cloud/current/networking/peering/gcp-peering.html#vpc-peering-on-gcp).
func (o PeeringGcpOutput) ImportCustomRoutes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PeeringGcp) *bool { return v.ImportCustomRoutes }).(pulumi.BoolPtrOutput)
}

// The GCP Project ID. You can find your Google Cloud Project ID under **Project ID** section of your [Google Cloud Console dashboard](https://console.cloud.google.com/home/dashboard).
func (o PeeringGcpOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v PeeringGcp) string { return v.Project }).(pulumi.StringOutput)
}

// The VPC network name that you're peering to Confluent Cloud. You can find your VPC network name under **VPC Networks** section of your [Google Cloud Console](https://console.cloud.google.com/networking/networks/list).
func (o PeeringGcpOutput) VpcNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v PeeringGcp) string { return v.VpcNetwork }).(pulumi.StringOutput)
}

type PeeringGcpPtrOutput struct{ *pulumi.OutputState }

func (PeeringGcpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringGcp)(nil)).Elem()
}

func (o PeeringGcpPtrOutput) ToPeeringGcpPtrOutput() PeeringGcpPtrOutput {
	return o
}

func (o PeeringGcpPtrOutput) ToPeeringGcpPtrOutputWithContext(ctx context.Context) PeeringGcpPtrOutput {
	return o
}

func (o PeeringGcpPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PeeringGcp] {
	return pulumix.Output[*PeeringGcp]{
		OutputState: o.OutputState,
	}
}

func (o PeeringGcpPtrOutput) Elem() PeeringGcpOutput {
	return o.ApplyT(func(v *PeeringGcp) PeeringGcp {
		if v != nil {
			return *v
		}
		var ret PeeringGcp
		return ret
	}).(PeeringGcpOutput)
}

// The Import Custom Routes option enables connectivity to a Confluent Cloud cluster in Google Cloud from customer premise or other clouds, such as AWS and Azure, through a customer VPC that is peered with Confluent Cloud in the same region. Defaults to `false`. Learn more about considerations / limitations of the Import Custom Routes option [here](https://docs.confluent.io/cloud/current/networking/peering/gcp-peering.html#import-custom-routes).
//
// > **Note:** Exactly one from the `aws`, `azure`, and `gcp` configuration blocks must be specified.
//
// > **Note:** Learn more about VPC Peering requirements on AWS [here](https://docs.confluent.io/cloud/current/networking/peering/aws-peering.html#vpc-peering-on-aws).
//
// > **Note:** Learn more about VNet Peering requirements on Azure [here](https://docs.confluent.io/cloud/current/networking/peering/azure-peering.html#vnet-peering-on-az).
//
// > **Note:** Learn more about VPC Peering requirements on Google Cloud Platform [here](https://docs.confluent.io/cloud/current/networking/peering/gcp-peering.html#vpc-peering-on-gcp).
func (o PeeringGcpPtrOutput) ImportCustomRoutes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PeeringGcp) *bool {
		if v == nil {
			return nil
		}
		return v.ImportCustomRoutes
	}).(pulumi.BoolPtrOutput)
}

// The GCP Project ID. You can find your Google Cloud Project ID under **Project ID** section of your [Google Cloud Console dashboard](https://console.cloud.google.com/home/dashboard).
func (o PeeringGcpPtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringGcp) *string {
		if v == nil {
			return nil
		}
		return &v.Project
	}).(pulumi.StringPtrOutput)
}

// The VPC network name that you're peering to Confluent Cloud. You can find your VPC network name under **VPC Networks** section of your [Google Cloud Console](https://console.cloud.google.com/networking/networks/list).
func (o PeeringGcpPtrOutput) VpcNetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringGcp) *string {
		if v == nil {
			return nil
		}
		return &v.VpcNetwork
	}).(pulumi.StringPtrOutput)
}

type PeeringNetwork struct {
	// The ID of the Network that the Peering belongs to, for example, `n-abc123`.
	Id string `pulumi:"id"`
}

// PeeringNetworkInput is an input type that accepts PeeringNetworkArgs and PeeringNetworkOutput values.
// You can construct a concrete instance of `PeeringNetworkInput` via:
//
//	PeeringNetworkArgs{...}
type PeeringNetworkInput interface {
	pulumi.Input

	ToPeeringNetworkOutput() PeeringNetworkOutput
	ToPeeringNetworkOutputWithContext(context.Context) PeeringNetworkOutput
}

type PeeringNetworkArgs struct {
	// The ID of the Network that the Peering belongs to, for example, `n-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (PeeringNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringNetwork)(nil)).Elem()
}

func (i PeeringNetworkArgs) ToPeeringNetworkOutput() PeeringNetworkOutput {
	return i.ToPeeringNetworkOutputWithContext(context.Background())
}

func (i PeeringNetworkArgs) ToPeeringNetworkOutputWithContext(ctx context.Context) PeeringNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringNetworkOutput)
}

func (i PeeringNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[PeeringNetwork] {
	return pulumix.Output[PeeringNetwork]{
		OutputState: i.ToPeeringNetworkOutputWithContext(ctx).OutputState,
	}
}

func (i PeeringNetworkArgs) ToPeeringNetworkPtrOutput() PeeringNetworkPtrOutput {
	return i.ToPeeringNetworkPtrOutputWithContext(context.Background())
}

func (i PeeringNetworkArgs) ToPeeringNetworkPtrOutputWithContext(ctx context.Context) PeeringNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringNetworkOutput).ToPeeringNetworkPtrOutputWithContext(ctx)
}

// PeeringNetworkPtrInput is an input type that accepts PeeringNetworkArgs, PeeringNetworkPtr and PeeringNetworkPtrOutput values.
// You can construct a concrete instance of `PeeringNetworkPtrInput` via:
//
//	        PeeringNetworkArgs{...}
//
//	or:
//
//	        nil
type PeeringNetworkPtrInput interface {
	pulumi.Input

	ToPeeringNetworkPtrOutput() PeeringNetworkPtrOutput
	ToPeeringNetworkPtrOutputWithContext(context.Context) PeeringNetworkPtrOutput
}

type peeringNetworkPtrType PeeringNetworkArgs

func PeeringNetworkPtr(v *PeeringNetworkArgs) PeeringNetworkPtrInput {
	return (*peeringNetworkPtrType)(v)
}

func (*peeringNetworkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringNetwork)(nil)).Elem()
}

func (i *peeringNetworkPtrType) ToPeeringNetworkPtrOutput() PeeringNetworkPtrOutput {
	return i.ToPeeringNetworkPtrOutputWithContext(context.Background())
}

func (i *peeringNetworkPtrType) ToPeeringNetworkPtrOutputWithContext(ctx context.Context) PeeringNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringNetworkPtrOutput)
}

func (i *peeringNetworkPtrType) ToOutput(ctx context.Context) pulumix.Output[*PeeringNetwork] {
	return pulumix.Output[*PeeringNetwork]{
		OutputState: i.ToPeeringNetworkPtrOutputWithContext(ctx).OutputState,
	}
}

type PeeringNetworkOutput struct{ *pulumi.OutputState }

func (PeeringNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringNetwork)(nil)).Elem()
}

func (o PeeringNetworkOutput) ToPeeringNetworkOutput() PeeringNetworkOutput {
	return o
}

func (o PeeringNetworkOutput) ToPeeringNetworkOutputWithContext(ctx context.Context) PeeringNetworkOutput {
	return o
}

func (o PeeringNetworkOutput) ToPeeringNetworkPtrOutput() PeeringNetworkPtrOutput {
	return o.ToPeeringNetworkPtrOutputWithContext(context.Background())
}

func (o PeeringNetworkOutput) ToPeeringNetworkPtrOutputWithContext(ctx context.Context) PeeringNetworkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PeeringNetwork) *PeeringNetwork {
		return &v
	}).(PeeringNetworkPtrOutput)
}

func (o PeeringNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[PeeringNetwork] {
	return pulumix.Output[PeeringNetwork]{
		OutputState: o.OutputState,
	}
}

// The ID of the Network that the Peering belongs to, for example, `n-abc123`.
func (o PeeringNetworkOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PeeringNetwork) string { return v.Id }).(pulumi.StringOutput)
}

type PeeringNetworkPtrOutput struct{ *pulumi.OutputState }

func (PeeringNetworkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringNetwork)(nil)).Elem()
}

func (o PeeringNetworkPtrOutput) ToPeeringNetworkPtrOutput() PeeringNetworkPtrOutput {
	return o
}

func (o PeeringNetworkPtrOutput) ToPeeringNetworkPtrOutputWithContext(ctx context.Context) PeeringNetworkPtrOutput {
	return o
}

func (o PeeringNetworkPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PeeringNetwork] {
	return pulumix.Output[*PeeringNetwork]{
		OutputState: o.OutputState,
	}
}

func (o PeeringNetworkPtrOutput) Elem() PeeringNetworkOutput {
	return o.ApplyT(func(v *PeeringNetwork) PeeringNetwork {
		if v != nil {
			return *v
		}
		var ret PeeringNetwork
		return ret
	}).(PeeringNetworkOutput)
}

// The ID of the Network that the Peering belongs to, for example, `n-abc123`.
func (o PeeringNetworkPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringNetwork) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type PrivateLinkAccessAws struct {
	// The AWS account ID to enable for the Private Link Access. You can find your AWS account ID [here] (https://console.aws.amazon.com/billing/home?#/account) under **My Account** in your AWS Management Console. Must be a **12 character string**.
	Account string `pulumi:"account"`
}

// PrivateLinkAccessAwsInput is an input type that accepts PrivateLinkAccessAwsArgs and PrivateLinkAccessAwsOutput values.
// You can construct a concrete instance of `PrivateLinkAccessAwsInput` via:
//
//	PrivateLinkAccessAwsArgs{...}
type PrivateLinkAccessAwsInput interface {
	pulumi.Input

	ToPrivateLinkAccessAwsOutput() PrivateLinkAccessAwsOutput
	ToPrivateLinkAccessAwsOutputWithContext(context.Context) PrivateLinkAccessAwsOutput
}

type PrivateLinkAccessAwsArgs struct {
	// The AWS account ID to enable for the Private Link Access. You can find your AWS account ID [here] (https://console.aws.amazon.com/billing/home?#/account) under **My Account** in your AWS Management Console. Must be a **12 character string**.
	Account pulumi.StringInput `pulumi:"account"`
}

func (PrivateLinkAccessAwsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkAccessAws)(nil)).Elem()
}

func (i PrivateLinkAccessAwsArgs) ToPrivateLinkAccessAwsOutput() PrivateLinkAccessAwsOutput {
	return i.ToPrivateLinkAccessAwsOutputWithContext(context.Background())
}

func (i PrivateLinkAccessAwsArgs) ToPrivateLinkAccessAwsOutputWithContext(ctx context.Context) PrivateLinkAccessAwsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAccessAwsOutput)
}

func (i PrivateLinkAccessAwsArgs) ToOutput(ctx context.Context) pulumix.Output[PrivateLinkAccessAws] {
	return pulumix.Output[PrivateLinkAccessAws]{
		OutputState: i.ToPrivateLinkAccessAwsOutputWithContext(ctx).OutputState,
	}
}

func (i PrivateLinkAccessAwsArgs) ToPrivateLinkAccessAwsPtrOutput() PrivateLinkAccessAwsPtrOutput {
	return i.ToPrivateLinkAccessAwsPtrOutputWithContext(context.Background())
}

func (i PrivateLinkAccessAwsArgs) ToPrivateLinkAccessAwsPtrOutputWithContext(ctx context.Context) PrivateLinkAccessAwsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAccessAwsOutput).ToPrivateLinkAccessAwsPtrOutputWithContext(ctx)
}

// PrivateLinkAccessAwsPtrInput is an input type that accepts PrivateLinkAccessAwsArgs, PrivateLinkAccessAwsPtr and PrivateLinkAccessAwsPtrOutput values.
// You can construct a concrete instance of `PrivateLinkAccessAwsPtrInput` via:
//
//	        PrivateLinkAccessAwsArgs{...}
//
//	or:
//
//	        nil
type PrivateLinkAccessAwsPtrInput interface {
	pulumi.Input

	ToPrivateLinkAccessAwsPtrOutput() PrivateLinkAccessAwsPtrOutput
	ToPrivateLinkAccessAwsPtrOutputWithContext(context.Context) PrivateLinkAccessAwsPtrOutput
}

type privateLinkAccessAwsPtrType PrivateLinkAccessAwsArgs

func PrivateLinkAccessAwsPtr(v *PrivateLinkAccessAwsArgs) PrivateLinkAccessAwsPtrInput {
	return (*privateLinkAccessAwsPtrType)(v)
}

func (*privateLinkAccessAwsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkAccessAws)(nil)).Elem()
}

func (i *privateLinkAccessAwsPtrType) ToPrivateLinkAccessAwsPtrOutput() PrivateLinkAccessAwsPtrOutput {
	return i.ToPrivateLinkAccessAwsPtrOutputWithContext(context.Background())
}

func (i *privateLinkAccessAwsPtrType) ToPrivateLinkAccessAwsPtrOutputWithContext(ctx context.Context) PrivateLinkAccessAwsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAccessAwsPtrOutput)
}

func (i *privateLinkAccessAwsPtrType) ToOutput(ctx context.Context) pulumix.Output[*PrivateLinkAccessAws] {
	return pulumix.Output[*PrivateLinkAccessAws]{
		OutputState: i.ToPrivateLinkAccessAwsPtrOutputWithContext(ctx).OutputState,
	}
}

type PrivateLinkAccessAwsOutput struct{ *pulumi.OutputState }

func (PrivateLinkAccessAwsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkAccessAws)(nil)).Elem()
}

func (o PrivateLinkAccessAwsOutput) ToPrivateLinkAccessAwsOutput() PrivateLinkAccessAwsOutput {
	return o
}

func (o PrivateLinkAccessAwsOutput) ToPrivateLinkAccessAwsOutputWithContext(ctx context.Context) PrivateLinkAccessAwsOutput {
	return o
}

func (o PrivateLinkAccessAwsOutput) ToPrivateLinkAccessAwsPtrOutput() PrivateLinkAccessAwsPtrOutput {
	return o.ToPrivateLinkAccessAwsPtrOutputWithContext(context.Background())
}

func (o PrivateLinkAccessAwsOutput) ToPrivateLinkAccessAwsPtrOutputWithContext(ctx context.Context) PrivateLinkAccessAwsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateLinkAccessAws) *PrivateLinkAccessAws {
		return &v
	}).(PrivateLinkAccessAwsPtrOutput)
}

func (o PrivateLinkAccessAwsOutput) ToOutput(ctx context.Context) pulumix.Output[PrivateLinkAccessAws] {
	return pulumix.Output[PrivateLinkAccessAws]{
		OutputState: o.OutputState,
	}
}

// The AWS account ID to enable for the Private Link Access. You can find your AWS account ID [here] (https://console.aws.amazon.com/billing/home?#/account) under **My Account** in your AWS Management Console. Must be a **12 character string**.
func (o PrivateLinkAccessAwsOutput) Account() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateLinkAccessAws) string { return v.Account }).(pulumi.StringOutput)
}

type PrivateLinkAccessAwsPtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkAccessAwsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkAccessAws)(nil)).Elem()
}

func (o PrivateLinkAccessAwsPtrOutput) ToPrivateLinkAccessAwsPtrOutput() PrivateLinkAccessAwsPtrOutput {
	return o
}

func (o PrivateLinkAccessAwsPtrOutput) ToPrivateLinkAccessAwsPtrOutputWithContext(ctx context.Context) PrivateLinkAccessAwsPtrOutput {
	return o
}

func (o PrivateLinkAccessAwsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PrivateLinkAccessAws] {
	return pulumix.Output[*PrivateLinkAccessAws]{
		OutputState: o.OutputState,
	}
}

func (o PrivateLinkAccessAwsPtrOutput) Elem() PrivateLinkAccessAwsOutput {
	return o.ApplyT(func(v *PrivateLinkAccessAws) PrivateLinkAccessAws {
		if v != nil {
			return *v
		}
		var ret PrivateLinkAccessAws
		return ret
	}).(PrivateLinkAccessAwsOutput)
}

// The AWS account ID to enable for the Private Link Access. You can find your AWS account ID [here] (https://console.aws.amazon.com/billing/home?#/account) under **My Account** in your AWS Management Console. Must be a **12 character string**.
func (o PrivateLinkAccessAwsPtrOutput) Account() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkAccessAws) *string {
		if v == nil {
			return nil
		}
		return &v.Account
	}).(pulumi.StringPtrOutput)
}

type PrivateLinkAccessAzure struct {
	// The Azure subscription ID to enable for the Private Link Access. You can find your Azure subscription ID in the subscription section of your [Microsoft Azure Portal] (https://portal.azure.com/#blade/Microsoft_Azure_Billing/SubscriptionsBlade). Must be a valid **32 character UUID string**.
	Subscription string `pulumi:"subscription"`
}

// PrivateLinkAccessAzureInput is an input type that accepts PrivateLinkAccessAzureArgs and PrivateLinkAccessAzureOutput values.
// You can construct a concrete instance of `PrivateLinkAccessAzureInput` via:
//
//	PrivateLinkAccessAzureArgs{...}
type PrivateLinkAccessAzureInput interface {
	pulumi.Input

	ToPrivateLinkAccessAzureOutput() PrivateLinkAccessAzureOutput
	ToPrivateLinkAccessAzureOutputWithContext(context.Context) PrivateLinkAccessAzureOutput
}

type PrivateLinkAccessAzureArgs struct {
	// The Azure subscription ID to enable for the Private Link Access. You can find your Azure subscription ID in the subscription section of your [Microsoft Azure Portal] (https://portal.azure.com/#blade/Microsoft_Azure_Billing/SubscriptionsBlade). Must be a valid **32 character UUID string**.
	Subscription pulumi.StringInput `pulumi:"subscription"`
}

func (PrivateLinkAccessAzureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkAccessAzure)(nil)).Elem()
}

func (i PrivateLinkAccessAzureArgs) ToPrivateLinkAccessAzureOutput() PrivateLinkAccessAzureOutput {
	return i.ToPrivateLinkAccessAzureOutputWithContext(context.Background())
}

func (i PrivateLinkAccessAzureArgs) ToPrivateLinkAccessAzureOutputWithContext(ctx context.Context) PrivateLinkAccessAzureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAccessAzureOutput)
}

func (i PrivateLinkAccessAzureArgs) ToOutput(ctx context.Context) pulumix.Output[PrivateLinkAccessAzure] {
	return pulumix.Output[PrivateLinkAccessAzure]{
		OutputState: i.ToPrivateLinkAccessAzureOutputWithContext(ctx).OutputState,
	}
}

func (i PrivateLinkAccessAzureArgs) ToPrivateLinkAccessAzurePtrOutput() PrivateLinkAccessAzurePtrOutput {
	return i.ToPrivateLinkAccessAzurePtrOutputWithContext(context.Background())
}

func (i PrivateLinkAccessAzureArgs) ToPrivateLinkAccessAzurePtrOutputWithContext(ctx context.Context) PrivateLinkAccessAzurePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAccessAzureOutput).ToPrivateLinkAccessAzurePtrOutputWithContext(ctx)
}

// PrivateLinkAccessAzurePtrInput is an input type that accepts PrivateLinkAccessAzureArgs, PrivateLinkAccessAzurePtr and PrivateLinkAccessAzurePtrOutput values.
// You can construct a concrete instance of `PrivateLinkAccessAzurePtrInput` via:
//
//	        PrivateLinkAccessAzureArgs{...}
//
//	or:
//
//	        nil
type PrivateLinkAccessAzurePtrInput interface {
	pulumi.Input

	ToPrivateLinkAccessAzurePtrOutput() PrivateLinkAccessAzurePtrOutput
	ToPrivateLinkAccessAzurePtrOutputWithContext(context.Context) PrivateLinkAccessAzurePtrOutput
}

type privateLinkAccessAzurePtrType PrivateLinkAccessAzureArgs

func PrivateLinkAccessAzurePtr(v *PrivateLinkAccessAzureArgs) PrivateLinkAccessAzurePtrInput {
	return (*privateLinkAccessAzurePtrType)(v)
}

func (*privateLinkAccessAzurePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkAccessAzure)(nil)).Elem()
}

func (i *privateLinkAccessAzurePtrType) ToPrivateLinkAccessAzurePtrOutput() PrivateLinkAccessAzurePtrOutput {
	return i.ToPrivateLinkAccessAzurePtrOutputWithContext(context.Background())
}

func (i *privateLinkAccessAzurePtrType) ToPrivateLinkAccessAzurePtrOutputWithContext(ctx context.Context) PrivateLinkAccessAzurePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAccessAzurePtrOutput)
}

func (i *privateLinkAccessAzurePtrType) ToOutput(ctx context.Context) pulumix.Output[*PrivateLinkAccessAzure] {
	return pulumix.Output[*PrivateLinkAccessAzure]{
		OutputState: i.ToPrivateLinkAccessAzurePtrOutputWithContext(ctx).OutputState,
	}
}

type PrivateLinkAccessAzureOutput struct{ *pulumi.OutputState }

func (PrivateLinkAccessAzureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkAccessAzure)(nil)).Elem()
}

func (o PrivateLinkAccessAzureOutput) ToPrivateLinkAccessAzureOutput() PrivateLinkAccessAzureOutput {
	return o
}

func (o PrivateLinkAccessAzureOutput) ToPrivateLinkAccessAzureOutputWithContext(ctx context.Context) PrivateLinkAccessAzureOutput {
	return o
}

func (o PrivateLinkAccessAzureOutput) ToPrivateLinkAccessAzurePtrOutput() PrivateLinkAccessAzurePtrOutput {
	return o.ToPrivateLinkAccessAzurePtrOutputWithContext(context.Background())
}

func (o PrivateLinkAccessAzureOutput) ToPrivateLinkAccessAzurePtrOutputWithContext(ctx context.Context) PrivateLinkAccessAzurePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateLinkAccessAzure) *PrivateLinkAccessAzure {
		return &v
	}).(PrivateLinkAccessAzurePtrOutput)
}

func (o PrivateLinkAccessAzureOutput) ToOutput(ctx context.Context) pulumix.Output[PrivateLinkAccessAzure] {
	return pulumix.Output[PrivateLinkAccessAzure]{
		OutputState: o.OutputState,
	}
}

// The Azure subscription ID to enable for the Private Link Access. You can find your Azure subscription ID in the subscription section of your [Microsoft Azure Portal] (https://portal.azure.com/#blade/Microsoft_Azure_Billing/SubscriptionsBlade). Must be a valid **32 character UUID string**.
func (o PrivateLinkAccessAzureOutput) Subscription() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateLinkAccessAzure) string { return v.Subscription }).(pulumi.StringOutput)
}

type PrivateLinkAccessAzurePtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkAccessAzurePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkAccessAzure)(nil)).Elem()
}

func (o PrivateLinkAccessAzurePtrOutput) ToPrivateLinkAccessAzurePtrOutput() PrivateLinkAccessAzurePtrOutput {
	return o
}

func (o PrivateLinkAccessAzurePtrOutput) ToPrivateLinkAccessAzurePtrOutputWithContext(ctx context.Context) PrivateLinkAccessAzurePtrOutput {
	return o
}

func (o PrivateLinkAccessAzurePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PrivateLinkAccessAzure] {
	return pulumix.Output[*PrivateLinkAccessAzure]{
		OutputState: o.OutputState,
	}
}

func (o PrivateLinkAccessAzurePtrOutput) Elem() PrivateLinkAccessAzureOutput {
	return o.ApplyT(func(v *PrivateLinkAccessAzure) PrivateLinkAccessAzure {
		if v != nil {
			return *v
		}
		var ret PrivateLinkAccessAzure
		return ret
	}).(PrivateLinkAccessAzureOutput)
}

// The Azure subscription ID to enable for the Private Link Access. You can find your Azure subscription ID in the subscription section of your [Microsoft Azure Portal] (https://portal.azure.com/#blade/Microsoft_Azure_Billing/SubscriptionsBlade). Must be a valid **32 character UUID string**.
func (o PrivateLinkAccessAzurePtrOutput) Subscription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkAccessAzure) *string {
		if v == nil {
			return nil
		}
		return &v.Subscription
	}).(pulumi.StringPtrOutput)
}

type PrivateLinkAccessEnvironment struct {
	// The ID of the Network that the Private Link Access belongs to, for example, `n-abc123`.
	Id string `pulumi:"id"`
}

// PrivateLinkAccessEnvironmentInput is an input type that accepts PrivateLinkAccessEnvironmentArgs and PrivateLinkAccessEnvironmentOutput values.
// You can construct a concrete instance of `PrivateLinkAccessEnvironmentInput` via:
//
//	PrivateLinkAccessEnvironmentArgs{...}
type PrivateLinkAccessEnvironmentInput interface {
	pulumi.Input

	ToPrivateLinkAccessEnvironmentOutput() PrivateLinkAccessEnvironmentOutput
	ToPrivateLinkAccessEnvironmentOutputWithContext(context.Context) PrivateLinkAccessEnvironmentOutput
}

type PrivateLinkAccessEnvironmentArgs struct {
	// The ID of the Network that the Private Link Access belongs to, for example, `n-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (PrivateLinkAccessEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkAccessEnvironment)(nil)).Elem()
}

func (i PrivateLinkAccessEnvironmentArgs) ToPrivateLinkAccessEnvironmentOutput() PrivateLinkAccessEnvironmentOutput {
	return i.ToPrivateLinkAccessEnvironmentOutputWithContext(context.Background())
}

func (i PrivateLinkAccessEnvironmentArgs) ToPrivateLinkAccessEnvironmentOutputWithContext(ctx context.Context) PrivateLinkAccessEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAccessEnvironmentOutput)
}

func (i PrivateLinkAccessEnvironmentArgs) ToOutput(ctx context.Context) pulumix.Output[PrivateLinkAccessEnvironment] {
	return pulumix.Output[PrivateLinkAccessEnvironment]{
		OutputState: i.ToPrivateLinkAccessEnvironmentOutputWithContext(ctx).OutputState,
	}
}

func (i PrivateLinkAccessEnvironmentArgs) ToPrivateLinkAccessEnvironmentPtrOutput() PrivateLinkAccessEnvironmentPtrOutput {
	return i.ToPrivateLinkAccessEnvironmentPtrOutputWithContext(context.Background())
}

func (i PrivateLinkAccessEnvironmentArgs) ToPrivateLinkAccessEnvironmentPtrOutputWithContext(ctx context.Context) PrivateLinkAccessEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAccessEnvironmentOutput).ToPrivateLinkAccessEnvironmentPtrOutputWithContext(ctx)
}

// PrivateLinkAccessEnvironmentPtrInput is an input type that accepts PrivateLinkAccessEnvironmentArgs, PrivateLinkAccessEnvironmentPtr and PrivateLinkAccessEnvironmentPtrOutput values.
// You can construct a concrete instance of `PrivateLinkAccessEnvironmentPtrInput` via:
//
//	        PrivateLinkAccessEnvironmentArgs{...}
//
//	or:
//
//	        nil
type PrivateLinkAccessEnvironmentPtrInput interface {
	pulumi.Input

	ToPrivateLinkAccessEnvironmentPtrOutput() PrivateLinkAccessEnvironmentPtrOutput
	ToPrivateLinkAccessEnvironmentPtrOutputWithContext(context.Context) PrivateLinkAccessEnvironmentPtrOutput
}

type privateLinkAccessEnvironmentPtrType PrivateLinkAccessEnvironmentArgs

func PrivateLinkAccessEnvironmentPtr(v *PrivateLinkAccessEnvironmentArgs) PrivateLinkAccessEnvironmentPtrInput {
	return (*privateLinkAccessEnvironmentPtrType)(v)
}

func (*privateLinkAccessEnvironmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkAccessEnvironment)(nil)).Elem()
}

func (i *privateLinkAccessEnvironmentPtrType) ToPrivateLinkAccessEnvironmentPtrOutput() PrivateLinkAccessEnvironmentPtrOutput {
	return i.ToPrivateLinkAccessEnvironmentPtrOutputWithContext(context.Background())
}

func (i *privateLinkAccessEnvironmentPtrType) ToPrivateLinkAccessEnvironmentPtrOutputWithContext(ctx context.Context) PrivateLinkAccessEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAccessEnvironmentPtrOutput)
}

func (i *privateLinkAccessEnvironmentPtrType) ToOutput(ctx context.Context) pulumix.Output[*PrivateLinkAccessEnvironment] {
	return pulumix.Output[*PrivateLinkAccessEnvironment]{
		OutputState: i.ToPrivateLinkAccessEnvironmentPtrOutputWithContext(ctx).OutputState,
	}
}

type PrivateLinkAccessEnvironmentOutput struct{ *pulumi.OutputState }

func (PrivateLinkAccessEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkAccessEnvironment)(nil)).Elem()
}

func (o PrivateLinkAccessEnvironmentOutput) ToPrivateLinkAccessEnvironmentOutput() PrivateLinkAccessEnvironmentOutput {
	return o
}

func (o PrivateLinkAccessEnvironmentOutput) ToPrivateLinkAccessEnvironmentOutputWithContext(ctx context.Context) PrivateLinkAccessEnvironmentOutput {
	return o
}

func (o PrivateLinkAccessEnvironmentOutput) ToPrivateLinkAccessEnvironmentPtrOutput() PrivateLinkAccessEnvironmentPtrOutput {
	return o.ToPrivateLinkAccessEnvironmentPtrOutputWithContext(context.Background())
}

func (o PrivateLinkAccessEnvironmentOutput) ToPrivateLinkAccessEnvironmentPtrOutputWithContext(ctx context.Context) PrivateLinkAccessEnvironmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateLinkAccessEnvironment) *PrivateLinkAccessEnvironment {
		return &v
	}).(PrivateLinkAccessEnvironmentPtrOutput)
}

func (o PrivateLinkAccessEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[PrivateLinkAccessEnvironment] {
	return pulumix.Output[PrivateLinkAccessEnvironment]{
		OutputState: o.OutputState,
	}
}

// The ID of the Network that the Private Link Access belongs to, for example, `n-abc123`.
func (o PrivateLinkAccessEnvironmentOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateLinkAccessEnvironment) string { return v.Id }).(pulumi.StringOutput)
}

type PrivateLinkAccessEnvironmentPtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkAccessEnvironmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkAccessEnvironment)(nil)).Elem()
}

func (o PrivateLinkAccessEnvironmentPtrOutput) ToPrivateLinkAccessEnvironmentPtrOutput() PrivateLinkAccessEnvironmentPtrOutput {
	return o
}

func (o PrivateLinkAccessEnvironmentPtrOutput) ToPrivateLinkAccessEnvironmentPtrOutputWithContext(ctx context.Context) PrivateLinkAccessEnvironmentPtrOutput {
	return o
}

func (o PrivateLinkAccessEnvironmentPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PrivateLinkAccessEnvironment] {
	return pulumix.Output[*PrivateLinkAccessEnvironment]{
		OutputState: o.OutputState,
	}
}

func (o PrivateLinkAccessEnvironmentPtrOutput) Elem() PrivateLinkAccessEnvironmentOutput {
	return o.ApplyT(func(v *PrivateLinkAccessEnvironment) PrivateLinkAccessEnvironment {
		if v != nil {
			return *v
		}
		var ret PrivateLinkAccessEnvironment
		return ret
	}).(PrivateLinkAccessEnvironmentOutput)
}

// The ID of the Network that the Private Link Access belongs to, for example, `n-abc123`.
func (o PrivateLinkAccessEnvironmentPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkAccessEnvironment) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type PrivateLinkAccessGcp struct {
	// The GCP project ID to allow for Private Service Connect access. You can find your Google Cloud Project ID under **Project ID** section of your [Google Cloud Console dashboard](https://console.cloud.google.com/home/dashboard).
	//
	// > **Note:** Exactly one from the `aws`, `azure`, `gcp` configuration blocks must be specified.
	//
	// > **Note:** Learn more about Private Link Access limitations on AWS [here](https://docs.confluent.io/cloud/current/networking/private-links/aws-privatelink.html#limitations).
	//
	// > **Note:** Learn more about Private Link Access limitations on Azure [here](https://docs.confluent.io/cloud/current/networking/private-links/azure-privatelink.html#limitations).
	Project string `pulumi:"project"`
}

// PrivateLinkAccessGcpInput is an input type that accepts PrivateLinkAccessGcpArgs and PrivateLinkAccessGcpOutput values.
// You can construct a concrete instance of `PrivateLinkAccessGcpInput` via:
//
//	PrivateLinkAccessGcpArgs{...}
type PrivateLinkAccessGcpInput interface {
	pulumi.Input

	ToPrivateLinkAccessGcpOutput() PrivateLinkAccessGcpOutput
	ToPrivateLinkAccessGcpOutputWithContext(context.Context) PrivateLinkAccessGcpOutput
}

type PrivateLinkAccessGcpArgs struct {
	// The GCP project ID to allow for Private Service Connect access. You can find your Google Cloud Project ID under **Project ID** section of your [Google Cloud Console dashboard](https://console.cloud.google.com/home/dashboard).
	//
	// > **Note:** Exactly one from the `aws`, `azure`, `gcp` configuration blocks must be specified.
	//
	// > **Note:** Learn more about Private Link Access limitations on AWS [here](https://docs.confluent.io/cloud/current/networking/private-links/aws-privatelink.html#limitations).
	//
	// > **Note:** Learn more about Private Link Access limitations on Azure [here](https://docs.confluent.io/cloud/current/networking/private-links/azure-privatelink.html#limitations).
	Project pulumi.StringInput `pulumi:"project"`
}

func (PrivateLinkAccessGcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkAccessGcp)(nil)).Elem()
}

func (i PrivateLinkAccessGcpArgs) ToPrivateLinkAccessGcpOutput() PrivateLinkAccessGcpOutput {
	return i.ToPrivateLinkAccessGcpOutputWithContext(context.Background())
}

func (i PrivateLinkAccessGcpArgs) ToPrivateLinkAccessGcpOutputWithContext(ctx context.Context) PrivateLinkAccessGcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAccessGcpOutput)
}

func (i PrivateLinkAccessGcpArgs) ToOutput(ctx context.Context) pulumix.Output[PrivateLinkAccessGcp] {
	return pulumix.Output[PrivateLinkAccessGcp]{
		OutputState: i.ToPrivateLinkAccessGcpOutputWithContext(ctx).OutputState,
	}
}

func (i PrivateLinkAccessGcpArgs) ToPrivateLinkAccessGcpPtrOutput() PrivateLinkAccessGcpPtrOutput {
	return i.ToPrivateLinkAccessGcpPtrOutputWithContext(context.Background())
}

func (i PrivateLinkAccessGcpArgs) ToPrivateLinkAccessGcpPtrOutputWithContext(ctx context.Context) PrivateLinkAccessGcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAccessGcpOutput).ToPrivateLinkAccessGcpPtrOutputWithContext(ctx)
}

// PrivateLinkAccessGcpPtrInput is an input type that accepts PrivateLinkAccessGcpArgs, PrivateLinkAccessGcpPtr and PrivateLinkAccessGcpPtrOutput values.
// You can construct a concrete instance of `PrivateLinkAccessGcpPtrInput` via:
//
//	        PrivateLinkAccessGcpArgs{...}
//
//	or:
//
//	        nil
type PrivateLinkAccessGcpPtrInput interface {
	pulumi.Input

	ToPrivateLinkAccessGcpPtrOutput() PrivateLinkAccessGcpPtrOutput
	ToPrivateLinkAccessGcpPtrOutputWithContext(context.Context) PrivateLinkAccessGcpPtrOutput
}

type privateLinkAccessGcpPtrType PrivateLinkAccessGcpArgs

func PrivateLinkAccessGcpPtr(v *PrivateLinkAccessGcpArgs) PrivateLinkAccessGcpPtrInput {
	return (*privateLinkAccessGcpPtrType)(v)
}

func (*privateLinkAccessGcpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkAccessGcp)(nil)).Elem()
}

func (i *privateLinkAccessGcpPtrType) ToPrivateLinkAccessGcpPtrOutput() PrivateLinkAccessGcpPtrOutput {
	return i.ToPrivateLinkAccessGcpPtrOutputWithContext(context.Background())
}

func (i *privateLinkAccessGcpPtrType) ToPrivateLinkAccessGcpPtrOutputWithContext(ctx context.Context) PrivateLinkAccessGcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAccessGcpPtrOutput)
}

func (i *privateLinkAccessGcpPtrType) ToOutput(ctx context.Context) pulumix.Output[*PrivateLinkAccessGcp] {
	return pulumix.Output[*PrivateLinkAccessGcp]{
		OutputState: i.ToPrivateLinkAccessGcpPtrOutputWithContext(ctx).OutputState,
	}
}

type PrivateLinkAccessGcpOutput struct{ *pulumi.OutputState }

func (PrivateLinkAccessGcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkAccessGcp)(nil)).Elem()
}

func (o PrivateLinkAccessGcpOutput) ToPrivateLinkAccessGcpOutput() PrivateLinkAccessGcpOutput {
	return o
}

func (o PrivateLinkAccessGcpOutput) ToPrivateLinkAccessGcpOutputWithContext(ctx context.Context) PrivateLinkAccessGcpOutput {
	return o
}

func (o PrivateLinkAccessGcpOutput) ToPrivateLinkAccessGcpPtrOutput() PrivateLinkAccessGcpPtrOutput {
	return o.ToPrivateLinkAccessGcpPtrOutputWithContext(context.Background())
}

func (o PrivateLinkAccessGcpOutput) ToPrivateLinkAccessGcpPtrOutputWithContext(ctx context.Context) PrivateLinkAccessGcpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateLinkAccessGcp) *PrivateLinkAccessGcp {
		return &v
	}).(PrivateLinkAccessGcpPtrOutput)
}

func (o PrivateLinkAccessGcpOutput) ToOutput(ctx context.Context) pulumix.Output[PrivateLinkAccessGcp] {
	return pulumix.Output[PrivateLinkAccessGcp]{
		OutputState: o.OutputState,
	}
}

// The GCP project ID to allow for Private Service Connect access. You can find your Google Cloud Project ID under **Project ID** section of your [Google Cloud Console dashboard](https://console.cloud.google.com/home/dashboard).
//
// > **Note:** Exactly one from the `aws`, `azure`, `gcp` configuration blocks must be specified.
//
// > **Note:** Learn more about Private Link Access limitations on AWS [here](https://docs.confluent.io/cloud/current/networking/private-links/aws-privatelink.html#limitations).
//
// > **Note:** Learn more about Private Link Access limitations on Azure [here](https://docs.confluent.io/cloud/current/networking/private-links/azure-privatelink.html#limitations).
func (o PrivateLinkAccessGcpOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateLinkAccessGcp) string { return v.Project }).(pulumi.StringOutput)
}

type PrivateLinkAccessGcpPtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkAccessGcpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkAccessGcp)(nil)).Elem()
}

func (o PrivateLinkAccessGcpPtrOutput) ToPrivateLinkAccessGcpPtrOutput() PrivateLinkAccessGcpPtrOutput {
	return o
}

func (o PrivateLinkAccessGcpPtrOutput) ToPrivateLinkAccessGcpPtrOutputWithContext(ctx context.Context) PrivateLinkAccessGcpPtrOutput {
	return o
}

func (o PrivateLinkAccessGcpPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PrivateLinkAccessGcp] {
	return pulumix.Output[*PrivateLinkAccessGcp]{
		OutputState: o.OutputState,
	}
}

func (o PrivateLinkAccessGcpPtrOutput) Elem() PrivateLinkAccessGcpOutput {
	return o.ApplyT(func(v *PrivateLinkAccessGcp) PrivateLinkAccessGcp {
		if v != nil {
			return *v
		}
		var ret PrivateLinkAccessGcp
		return ret
	}).(PrivateLinkAccessGcpOutput)
}

// The GCP project ID to allow for Private Service Connect access. You can find your Google Cloud Project ID under **Project ID** section of your [Google Cloud Console dashboard](https://console.cloud.google.com/home/dashboard).
//
// > **Note:** Exactly one from the `aws`, `azure`, `gcp` configuration blocks must be specified.
//
// > **Note:** Learn more about Private Link Access limitations on AWS [here](https://docs.confluent.io/cloud/current/networking/private-links/aws-privatelink.html#limitations).
//
// > **Note:** Learn more about Private Link Access limitations on Azure [here](https://docs.confluent.io/cloud/current/networking/private-links/azure-privatelink.html#limitations).
func (o PrivateLinkAccessGcpPtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkAccessGcp) *string {
		if v == nil {
			return nil
		}
		return &v.Project
	}).(pulumi.StringPtrOutput)
}

type PrivateLinkAccessNetwork struct {
	// The ID of the Network that the Private Link Access belongs to, for example, `n-abc123`.
	Id string `pulumi:"id"`
}

// PrivateLinkAccessNetworkInput is an input type that accepts PrivateLinkAccessNetworkArgs and PrivateLinkAccessNetworkOutput values.
// You can construct a concrete instance of `PrivateLinkAccessNetworkInput` via:
//
//	PrivateLinkAccessNetworkArgs{...}
type PrivateLinkAccessNetworkInput interface {
	pulumi.Input

	ToPrivateLinkAccessNetworkOutput() PrivateLinkAccessNetworkOutput
	ToPrivateLinkAccessNetworkOutputWithContext(context.Context) PrivateLinkAccessNetworkOutput
}

type PrivateLinkAccessNetworkArgs struct {
	// The ID of the Network that the Private Link Access belongs to, for example, `n-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (PrivateLinkAccessNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkAccessNetwork)(nil)).Elem()
}

func (i PrivateLinkAccessNetworkArgs) ToPrivateLinkAccessNetworkOutput() PrivateLinkAccessNetworkOutput {
	return i.ToPrivateLinkAccessNetworkOutputWithContext(context.Background())
}

func (i PrivateLinkAccessNetworkArgs) ToPrivateLinkAccessNetworkOutputWithContext(ctx context.Context) PrivateLinkAccessNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAccessNetworkOutput)
}

func (i PrivateLinkAccessNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[PrivateLinkAccessNetwork] {
	return pulumix.Output[PrivateLinkAccessNetwork]{
		OutputState: i.ToPrivateLinkAccessNetworkOutputWithContext(ctx).OutputState,
	}
}

func (i PrivateLinkAccessNetworkArgs) ToPrivateLinkAccessNetworkPtrOutput() PrivateLinkAccessNetworkPtrOutput {
	return i.ToPrivateLinkAccessNetworkPtrOutputWithContext(context.Background())
}

func (i PrivateLinkAccessNetworkArgs) ToPrivateLinkAccessNetworkPtrOutputWithContext(ctx context.Context) PrivateLinkAccessNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAccessNetworkOutput).ToPrivateLinkAccessNetworkPtrOutputWithContext(ctx)
}

// PrivateLinkAccessNetworkPtrInput is an input type that accepts PrivateLinkAccessNetworkArgs, PrivateLinkAccessNetworkPtr and PrivateLinkAccessNetworkPtrOutput values.
// You can construct a concrete instance of `PrivateLinkAccessNetworkPtrInput` via:
//
//	        PrivateLinkAccessNetworkArgs{...}
//
//	or:
//
//	        nil
type PrivateLinkAccessNetworkPtrInput interface {
	pulumi.Input

	ToPrivateLinkAccessNetworkPtrOutput() PrivateLinkAccessNetworkPtrOutput
	ToPrivateLinkAccessNetworkPtrOutputWithContext(context.Context) PrivateLinkAccessNetworkPtrOutput
}

type privateLinkAccessNetworkPtrType PrivateLinkAccessNetworkArgs

func PrivateLinkAccessNetworkPtr(v *PrivateLinkAccessNetworkArgs) PrivateLinkAccessNetworkPtrInput {
	return (*privateLinkAccessNetworkPtrType)(v)
}

func (*privateLinkAccessNetworkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkAccessNetwork)(nil)).Elem()
}

func (i *privateLinkAccessNetworkPtrType) ToPrivateLinkAccessNetworkPtrOutput() PrivateLinkAccessNetworkPtrOutput {
	return i.ToPrivateLinkAccessNetworkPtrOutputWithContext(context.Background())
}

func (i *privateLinkAccessNetworkPtrType) ToPrivateLinkAccessNetworkPtrOutputWithContext(ctx context.Context) PrivateLinkAccessNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAccessNetworkPtrOutput)
}

func (i *privateLinkAccessNetworkPtrType) ToOutput(ctx context.Context) pulumix.Output[*PrivateLinkAccessNetwork] {
	return pulumix.Output[*PrivateLinkAccessNetwork]{
		OutputState: i.ToPrivateLinkAccessNetworkPtrOutputWithContext(ctx).OutputState,
	}
}

type PrivateLinkAccessNetworkOutput struct{ *pulumi.OutputState }

func (PrivateLinkAccessNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkAccessNetwork)(nil)).Elem()
}

func (o PrivateLinkAccessNetworkOutput) ToPrivateLinkAccessNetworkOutput() PrivateLinkAccessNetworkOutput {
	return o
}

func (o PrivateLinkAccessNetworkOutput) ToPrivateLinkAccessNetworkOutputWithContext(ctx context.Context) PrivateLinkAccessNetworkOutput {
	return o
}

func (o PrivateLinkAccessNetworkOutput) ToPrivateLinkAccessNetworkPtrOutput() PrivateLinkAccessNetworkPtrOutput {
	return o.ToPrivateLinkAccessNetworkPtrOutputWithContext(context.Background())
}

func (o PrivateLinkAccessNetworkOutput) ToPrivateLinkAccessNetworkPtrOutputWithContext(ctx context.Context) PrivateLinkAccessNetworkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateLinkAccessNetwork) *PrivateLinkAccessNetwork {
		return &v
	}).(PrivateLinkAccessNetworkPtrOutput)
}

func (o PrivateLinkAccessNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[PrivateLinkAccessNetwork] {
	return pulumix.Output[PrivateLinkAccessNetwork]{
		OutputState: o.OutputState,
	}
}

// The ID of the Network that the Private Link Access belongs to, for example, `n-abc123`.
func (o PrivateLinkAccessNetworkOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateLinkAccessNetwork) string { return v.Id }).(pulumi.StringOutput)
}

type PrivateLinkAccessNetworkPtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkAccessNetworkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkAccessNetwork)(nil)).Elem()
}

func (o PrivateLinkAccessNetworkPtrOutput) ToPrivateLinkAccessNetworkPtrOutput() PrivateLinkAccessNetworkPtrOutput {
	return o
}

func (o PrivateLinkAccessNetworkPtrOutput) ToPrivateLinkAccessNetworkPtrOutputWithContext(ctx context.Context) PrivateLinkAccessNetworkPtrOutput {
	return o
}

func (o PrivateLinkAccessNetworkPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PrivateLinkAccessNetwork] {
	return pulumix.Output[*PrivateLinkAccessNetwork]{
		OutputState: o.OutputState,
	}
}

func (o PrivateLinkAccessNetworkPtrOutput) Elem() PrivateLinkAccessNetworkOutput {
	return o.ApplyT(func(v *PrivateLinkAccessNetwork) PrivateLinkAccessNetwork {
		if v != nil {
			return *v
		}
		var ret PrivateLinkAccessNetwork
		return ret
	}).(PrivateLinkAccessNetworkOutput)
}

// The ID of the Network that the Private Link Access belongs to, for example, `n-abc123`.
func (o PrivateLinkAccessNetworkPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkAccessNetwork) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type PrivateLinkAttachmentAw struct {
	// (Required String) AWS VPC Endpoint Service that can be used to establish connections for all zones, for example `com.amazonaws.vpce.us-west-2.vpce-svc-0d3be37e21708ecd3`.
	VpcEndpointServiceName *string `pulumi:"vpcEndpointServiceName"`
}

// PrivateLinkAttachmentAwInput is an input type that accepts PrivateLinkAttachmentAwArgs and PrivateLinkAttachmentAwOutput values.
// You can construct a concrete instance of `PrivateLinkAttachmentAwInput` via:
//
//	PrivateLinkAttachmentAwArgs{...}
type PrivateLinkAttachmentAwInput interface {
	pulumi.Input

	ToPrivateLinkAttachmentAwOutput() PrivateLinkAttachmentAwOutput
	ToPrivateLinkAttachmentAwOutputWithContext(context.Context) PrivateLinkAttachmentAwOutput
}

type PrivateLinkAttachmentAwArgs struct {
	// (Required String) AWS VPC Endpoint Service that can be used to establish connections for all zones, for example `com.amazonaws.vpce.us-west-2.vpce-svc-0d3be37e21708ecd3`.
	VpcEndpointServiceName pulumi.StringPtrInput `pulumi:"vpcEndpointServiceName"`
}

func (PrivateLinkAttachmentAwArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkAttachmentAw)(nil)).Elem()
}

func (i PrivateLinkAttachmentAwArgs) ToPrivateLinkAttachmentAwOutput() PrivateLinkAttachmentAwOutput {
	return i.ToPrivateLinkAttachmentAwOutputWithContext(context.Background())
}

func (i PrivateLinkAttachmentAwArgs) ToPrivateLinkAttachmentAwOutputWithContext(ctx context.Context) PrivateLinkAttachmentAwOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAttachmentAwOutput)
}

func (i PrivateLinkAttachmentAwArgs) ToOutput(ctx context.Context) pulumix.Output[PrivateLinkAttachmentAw] {
	return pulumix.Output[PrivateLinkAttachmentAw]{
		OutputState: i.ToPrivateLinkAttachmentAwOutputWithContext(ctx).OutputState,
	}
}

// PrivateLinkAttachmentAwArrayInput is an input type that accepts PrivateLinkAttachmentAwArray and PrivateLinkAttachmentAwArrayOutput values.
// You can construct a concrete instance of `PrivateLinkAttachmentAwArrayInput` via:
//
//	PrivateLinkAttachmentAwArray{ PrivateLinkAttachmentAwArgs{...} }
type PrivateLinkAttachmentAwArrayInput interface {
	pulumi.Input

	ToPrivateLinkAttachmentAwArrayOutput() PrivateLinkAttachmentAwArrayOutput
	ToPrivateLinkAttachmentAwArrayOutputWithContext(context.Context) PrivateLinkAttachmentAwArrayOutput
}

type PrivateLinkAttachmentAwArray []PrivateLinkAttachmentAwInput

func (PrivateLinkAttachmentAwArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateLinkAttachmentAw)(nil)).Elem()
}

func (i PrivateLinkAttachmentAwArray) ToPrivateLinkAttachmentAwArrayOutput() PrivateLinkAttachmentAwArrayOutput {
	return i.ToPrivateLinkAttachmentAwArrayOutputWithContext(context.Background())
}

func (i PrivateLinkAttachmentAwArray) ToPrivateLinkAttachmentAwArrayOutputWithContext(ctx context.Context) PrivateLinkAttachmentAwArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAttachmentAwArrayOutput)
}

func (i PrivateLinkAttachmentAwArray) ToOutput(ctx context.Context) pulumix.Output[[]PrivateLinkAttachmentAw] {
	return pulumix.Output[[]PrivateLinkAttachmentAw]{
		OutputState: i.ToPrivateLinkAttachmentAwArrayOutputWithContext(ctx).OutputState,
	}
}

type PrivateLinkAttachmentAwOutput struct{ *pulumi.OutputState }

func (PrivateLinkAttachmentAwOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkAttachmentAw)(nil)).Elem()
}

func (o PrivateLinkAttachmentAwOutput) ToPrivateLinkAttachmentAwOutput() PrivateLinkAttachmentAwOutput {
	return o
}

func (o PrivateLinkAttachmentAwOutput) ToPrivateLinkAttachmentAwOutputWithContext(ctx context.Context) PrivateLinkAttachmentAwOutput {
	return o
}

func (o PrivateLinkAttachmentAwOutput) ToOutput(ctx context.Context) pulumix.Output[PrivateLinkAttachmentAw] {
	return pulumix.Output[PrivateLinkAttachmentAw]{
		OutputState: o.OutputState,
	}
}

// (Required String) AWS VPC Endpoint Service that can be used to establish connections for all zones, for example `com.amazonaws.vpce.us-west-2.vpce-svc-0d3be37e21708ecd3`.
func (o PrivateLinkAttachmentAwOutput) VpcEndpointServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkAttachmentAw) *string { return v.VpcEndpointServiceName }).(pulumi.StringPtrOutput)
}

type PrivateLinkAttachmentAwArrayOutput struct{ *pulumi.OutputState }

func (PrivateLinkAttachmentAwArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateLinkAttachmentAw)(nil)).Elem()
}

func (o PrivateLinkAttachmentAwArrayOutput) ToPrivateLinkAttachmentAwArrayOutput() PrivateLinkAttachmentAwArrayOutput {
	return o
}

func (o PrivateLinkAttachmentAwArrayOutput) ToPrivateLinkAttachmentAwArrayOutputWithContext(ctx context.Context) PrivateLinkAttachmentAwArrayOutput {
	return o
}

func (o PrivateLinkAttachmentAwArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PrivateLinkAttachmentAw] {
	return pulumix.Output[[]PrivateLinkAttachmentAw]{
		OutputState: o.OutputState,
	}
}

func (o PrivateLinkAttachmentAwArrayOutput) Index(i pulumi.IntInput) PrivateLinkAttachmentAwOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateLinkAttachmentAw {
		return vs[0].([]PrivateLinkAttachmentAw)[vs[1].(int)]
	}).(PrivateLinkAttachmentAwOutput)
}

type PrivateLinkAttachmentAzure struct {
	PrivateLinkServiceAlias      *string `pulumi:"privateLinkServiceAlias"`
	PrivateLinkServiceResourceId *string `pulumi:"privateLinkServiceResourceId"`
	Zone                         *string `pulumi:"zone"`
}

// PrivateLinkAttachmentAzureInput is an input type that accepts PrivateLinkAttachmentAzureArgs and PrivateLinkAttachmentAzureOutput values.
// You can construct a concrete instance of `PrivateLinkAttachmentAzureInput` via:
//
//	PrivateLinkAttachmentAzureArgs{...}
type PrivateLinkAttachmentAzureInput interface {
	pulumi.Input

	ToPrivateLinkAttachmentAzureOutput() PrivateLinkAttachmentAzureOutput
	ToPrivateLinkAttachmentAzureOutputWithContext(context.Context) PrivateLinkAttachmentAzureOutput
}

type PrivateLinkAttachmentAzureArgs struct {
	PrivateLinkServiceAlias      pulumi.StringPtrInput `pulumi:"privateLinkServiceAlias"`
	PrivateLinkServiceResourceId pulumi.StringPtrInput `pulumi:"privateLinkServiceResourceId"`
	Zone                         pulumi.StringPtrInput `pulumi:"zone"`
}

func (PrivateLinkAttachmentAzureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkAttachmentAzure)(nil)).Elem()
}

func (i PrivateLinkAttachmentAzureArgs) ToPrivateLinkAttachmentAzureOutput() PrivateLinkAttachmentAzureOutput {
	return i.ToPrivateLinkAttachmentAzureOutputWithContext(context.Background())
}

func (i PrivateLinkAttachmentAzureArgs) ToPrivateLinkAttachmentAzureOutputWithContext(ctx context.Context) PrivateLinkAttachmentAzureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAttachmentAzureOutput)
}

func (i PrivateLinkAttachmentAzureArgs) ToOutput(ctx context.Context) pulumix.Output[PrivateLinkAttachmentAzure] {
	return pulumix.Output[PrivateLinkAttachmentAzure]{
		OutputState: i.ToPrivateLinkAttachmentAzureOutputWithContext(ctx).OutputState,
	}
}

// PrivateLinkAttachmentAzureArrayInput is an input type that accepts PrivateLinkAttachmentAzureArray and PrivateLinkAttachmentAzureArrayOutput values.
// You can construct a concrete instance of `PrivateLinkAttachmentAzureArrayInput` via:
//
//	PrivateLinkAttachmentAzureArray{ PrivateLinkAttachmentAzureArgs{...} }
type PrivateLinkAttachmentAzureArrayInput interface {
	pulumi.Input

	ToPrivateLinkAttachmentAzureArrayOutput() PrivateLinkAttachmentAzureArrayOutput
	ToPrivateLinkAttachmentAzureArrayOutputWithContext(context.Context) PrivateLinkAttachmentAzureArrayOutput
}

type PrivateLinkAttachmentAzureArray []PrivateLinkAttachmentAzureInput

func (PrivateLinkAttachmentAzureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateLinkAttachmentAzure)(nil)).Elem()
}

func (i PrivateLinkAttachmentAzureArray) ToPrivateLinkAttachmentAzureArrayOutput() PrivateLinkAttachmentAzureArrayOutput {
	return i.ToPrivateLinkAttachmentAzureArrayOutputWithContext(context.Background())
}

func (i PrivateLinkAttachmentAzureArray) ToPrivateLinkAttachmentAzureArrayOutputWithContext(ctx context.Context) PrivateLinkAttachmentAzureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAttachmentAzureArrayOutput)
}

func (i PrivateLinkAttachmentAzureArray) ToOutput(ctx context.Context) pulumix.Output[[]PrivateLinkAttachmentAzure] {
	return pulumix.Output[[]PrivateLinkAttachmentAzure]{
		OutputState: i.ToPrivateLinkAttachmentAzureArrayOutputWithContext(ctx).OutputState,
	}
}

type PrivateLinkAttachmentAzureOutput struct{ *pulumi.OutputState }

func (PrivateLinkAttachmentAzureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkAttachmentAzure)(nil)).Elem()
}

func (o PrivateLinkAttachmentAzureOutput) ToPrivateLinkAttachmentAzureOutput() PrivateLinkAttachmentAzureOutput {
	return o
}

func (o PrivateLinkAttachmentAzureOutput) ToPrivateLinkAttachmentAzureOutputWithContext(ctx context.Context) PrivateLinkAttachmentAzureOutput {
	return o
}

func (o PrivateLinkAttachmentAzureOutput) ToOutput(ctx context.Context) pulumix.Output[PrivateLinkAttachmentAzure] {
	return pulumix.Output[PrivateLinkAttachmentAzure]{
		OutputState: o.OutputState,
	}
}

func (o PrivateLinkAttachmentAzureOutput) PrivateLinkServiceAlias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkAttachmentAzure) *string { return v.PrivateLinkServiceAlias }).(pulumi.StringPtrOutput)
}

func (o PrivateLinkAttachmentAzureOutput) PrivateLinkServiceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkAttachmentAzure) *string { return v.PrivateLinkServiceResourceId }).(pulumi.StringPtrOutput)
}

func (o PrivateLinkAttachmentAzureOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkAttachmentAzure) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type PrivateLinkAttachmentAzureArrayOutput struct{ *pulumi.OutputState }

func (PrivateLinkAttachmentAzureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateLinkAttachmentAzure)(nil)).Elem()
}

func (o PrivateLinkAttachmentAzureArrayOutput) ToPrivateLinkAttachmentAzureArrayOutput() PrivateLinkAttachmentAzureArrayOutput {
	return o
}

func (o PrivateLinkAttachmentAzureArrayOutput) ToPrivateLinkAttachmentAzureArrayOutputWithContext(ctx context.Context) PrivateLinkAttachmentAzureArrayOutput {
	return o
}

func (o PrivateLinkAttachmentAzureArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PrivateLinkAttachmentAzure] {
	return pulumix.Output[[]PrivateLinkAttachmentAzure]{
		OutputState: o.OutputState,
	}
}

func (o PrivateLinkAttachmentAzureArrayOutput) Index(i pulumi.IntInput) PrivateLinkAttachmentAzureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateLinkAttachmentAzure {
		return vs[0].([]PrivateLinkAttachmentAzure)[vs[1].(int)]
	}).(PrivateLinkAttachmentAzureOutput)
}

type PrivateLinkAttachmentConnectionAws struct {
	// Id of a VPC Endpoint that is connected to the VPC Endpoint service.
	VpcEndpointId string `pulumi:"vpcEndpointId"`
}

// PrivateLinkAttachmentConnectionAwsInput is an input type that accepts PrivateLinkAttachmentConnectionAwsArgs and PrivateLinkAttachmentConnectionAwsOutput values.
// You can construct a concrete instance of `PrivateLinkAttachmentConnectionAwsInput` via:
//
//	PrivateLinkAttachmentConnectionAwsArgs{...}
type PrivateLinkAttachmentConnectionAwsInput interface {
	pulumi.Input

	ToPrivateLinkAttachmentConnectionAwsOutput() PrivateLinkAttachmentConnectionAwsOutput
	ToPrivateLinkAttachmentConnectionAwsOutputWithContext(context.Context) PrivateLinkAttachmentConnectionAwsOutput
}

type PrivateLinkAttachmentConnectionAwsArgs struct {
	// Id of a VPC Endpoint that is connected to the VPC Endpoint service.
	VpcEndpointId pulumi.StringInput `pulumi:"vpcEndpointId"`
}

func (PrivateLinkAttachmentConnectionAwsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkAttachmentConnectionAws)(nil)).Elem()
}

func (i PrivateLinkAttachmentConnectionAwsArgs) ToPrivateLinkAttachmentConnectionAwsOutput() PrivateLinkAttachmentConnectionAwsOutput {
	return i.ToPrivateLinkAttachmentConnectionAwsOutputWithContext(context.Background())
}

func (i PrivateLinkAttachmentConnectionAwsArgs) ToPrivateLinkAttachmentConnectionAwsOutputWithContext(ctx context.Context) PrivateLinkAttachmentConnectionAwsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAttachmentConnectionAwsOutput)
}

func (i PrivateLinkAttachmentConnectionAwsArgs) ToOutput(ctx context.Context) pulumix.Output[PrivateLinkAttachmentConnectionAws] {
	return pulumix.Output[PrivateLinkAttachmentConnectionAws]{
		OutputState: i.ToPrivateLinkAttachmentConnectionAwsOutputWithContext(ctx).OutputState,
	}
}

func (i PrivateLinkAttachmentConnectionAwsArgs) ToPrivateLinkAttachmentConnectionAwsPtrOutput() PrivateLinkAttachmentConnectionAwsPtrOutput {
	return i.ToPrivateLinkAttachmentConnectionAwsPtrOutputWithContext(context.Background())
}

func (i PrivateLinkAttachmentConnectionAwsArgs) ToPrivateLinkAttachmentConnectionAwsPtrOutputWithContext(ctx context.Context) PrivateLinkAttachmentConnectionAwsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAttachmentConnectionAwsOutput).ToPrivateLinkAttachmentConnectionAwsPtrOutputWithContext(ctx)
}

// PrivateLinkAttachmentConnectionAwsPtrInput is an input type that accepts PrivateLinkAttachmentConnectionAwsArgs, PrivateLinkAttachmentConnectionAwsPtr and PrivateLinkAttachmentConnectionAwsPtrOutput values.
// You can construct a concrete instance of `PrivateLinkAttachmentConnectionAwsPtrInput` via:
//
//	        PrivateLinkAttachmentConnectionAwsArgs{...}
//
//	or:
//
//	        nil
type PrivateLinkAttachmentConnectionAwsPtrInput interface {
	pulumi.Input

	ToPrivateLinkAttachmentConnectionAwsPtrOutput() PrivateLinkAttachmentConnectionAwsPtrOutput
	ToPrivateLinkAttachmentConnectionAwsPtrOutputWithContext(context.Context) PrivateLinkAttachmentConnectionAwsPtrOutput
}

type privateLinkAttachmentConnectionAwsPtrType PrivateLinkAttachmentConnectionAwsArgs

func PrivateLinkAttachmentConnectionAwsPtr(v *PrivateLinkAttachmentConnectionAwsArgs) PrivateLinkAttachmentConnectionAwsPtrInput {
	return (*privateLinkAttachmentConnectionAwsPtrType)(v)
}

func (*privateLinkAttachmentConnectionAwsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkAttachmentConnectionAws)(nil)).Elem()
}

func (i *privateLinkAttachmentConnectionAwsPtrType) ToPrivateLinkAttachmentConnectionAwsPtrOutput() PrivateLinkAttachmentConnectionAwsPtrOutput {
	return i.ToPrivateLinkAttachmentConnectionAwsPtrOutputWithContext(context.Background())
}

func (i *privateLinkAttachmentConnectionAwsPtrType) ToPrivateLinkAttachmentConnectionAwsPtrOutputWithContext(ctx context.Context) PrivateLinkAttachmentConnectionAwsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAttachmentConnectionAwsPtrOutput)
}

func (i *privateLinkAttachmentConnectionAwsPtrType) ToOutput(ctx context.Context) pulumix.Output[*PrivateLinkAttachmentConnectionAws] {
	return pulumix.Output[*PrivateLinkAttachmentConnectionAws]{
		OutputState: i.ToPrivateLinkAttachmentConnectionAwsPtrOutputWithContext(ctx).OutputState,
	}
}

type PrivateLinkAttachmentConnectionAwsOutput struct{ *pulumi.OutputState }

func (PrivateLinkAttachmentConnectionAwsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkAttachmentConnectionAws)(nil)).Elem()
}

func (o PrivateLinkAttachmentConnectionAwsOutput) ToPrivateLinkAttachmentConnectionAwsOutput() PrivateLinkAttachmentConnectionAwsOutput {
	return o
}

func (o PrivateLinkAttachmentConnectionAwsOutput) ToPrivateLinkAttachmentConnectionAwsOutputWithContext(ctx context.Context) PrivateLinkAttachmentConnectionAwsOutput {
	return o
}

func (o PrivateLinkAttachmentConnectionAwsOutput) ToPrivateLinkAttachmentConnectionAwsPtrOutput() PrivateLinkAttachmentConnectionAwsPtrOutput {
	return o.ToPrivateLinkAttachmentConnectionAwsPtrOutputWithContext(context.Background())
}

func (o PrivateLinkAttachmentConnectionAwsOutput) ToPrivateLinkAttachmentConnectionAwsPtrOutputWithContext(ctx context.Context) PrivateLinkAttachmentConnectionAwsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateLinkAttachmentConnectionAws) *PrivateLinkAttachmentConnectionAws {
		return &v
	}).(PrivateLinkAttachmentConnectionAwsPtrOutput)
}

func (o PrivateLinkAttachmentConnectionAwsOutput) ToOutput(ctx context.Context) pulumix.Output[PrivateLinkAttachmentConnectionAws] {
	return pulumix.Output[PrivateLinkAttachmentConnectionAws]{
		OutputState: o.OutputState,
	}
}

// Id of a VPC Endpoint that is connected to the VPC Endpoint service.
func (o PrivateLinkAttachmentConnectionAwsOutput) VpcEndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateLinkAttachmentConnectionAws) string { return v.VpcEndpointId }).(pulumi.StringOutput)
}

type PrivateLinkAttachmentConnectionAwsPtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkAttachmentConnectionAwsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkAttachmentConnectionAws)(nil)).Elem()
}

func (o PrivateLinkAttachmentConnectionAwsPtrOutput) ToPrivateLinkAttachmentConnectionAwsPtrOutput() PrivateLinkAttachmentConnectionAwsPtrOutput {
	return o
}

func (o PrivateLinkAttachmentConnectionAwsPtrOutput) ToPrivateLinkAttachmentConnectionAwsPtrOutputWithContext(ctx context.Context) PrivateLinkAttachmentConnectionAwsPtrOutput {
	return o
}

func (o PrivateLinkAttachmentConnectionAwsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PrivateLinkAttachmentConnectionAws] {
	return pulumix.Output[*PrivateLinkAttachmentConnectionAws]{
		OutputState: o.OutputState,
	}
}

func (o PrivateLinkAttachmentConnectionAwsPtrOutput) Elem() PrivateLinkAttachmentConnectionAwsOutput {
	return o.ApplyT(func(v *PrivateLinkAttachmentConnectionAws) PrivateLinkAttachmentConnectionAws {
		if v != nil {
			return *v
		}
		var ret PrivateLinkAttachmentConnectionAws
		return ret
	}).(PrivateLinkAttachmentConnectionAwsOutput)
}

// Id of a VPC Endpoint that is connected to the VPC Endpoint service.
func (o PrivateLinkAttachmentConnectionAwsPtrOutput) VpcEndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkAttachmentConnectionAws) *string {
		if v == nil {
			return nil
		}
		return &v.VpcEndpointId
	}).(pulumi.StringPtrOutput)
}

type PrivateLinkAttachmentConnectionAzure struct {
	PrivateEndpointResourceId string `pulumi:"privateEndpointResourceId"`
}

// PrivateLinkAttachmentConnectionAzureInput is an input type that accepts PrivateLinkAttachmentConnectionAzureArgs and PrivateLinkAttachmentConnectionAzureOutput values.
// You can construct a concrete instance of `PrivateLinkAttachmentConnectionAzureInput` via:
//
//	PrivateLinkAttachmentConnectionAzureArgs{...}
type PrivateLinkAttachmentConnectionAzureInput interface {
	pulumi.Input

	ToPrivateLinkAttachmentConnectionAzureOutput() PrivateLinkAttachmentConnectionAzureOutput
	ToPrivateLinkAttachmentConnectionAzureOutputWithContext(context.Context) PrivateLinkAttachmentConnectionAzureOutput
}

type PrivateLinkAttachmentConnectionAzureArgs struct {
	PrivateEndpointResourceId pulumi.StringInput `pulumi:"privateEndpointResourceId"`
}

func (PrivateLinkAttachmentConnectionAzureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkAttachmentConnectionAzure)(nil)).Elem()
}

func (i PrivateLinkAttachmentConnectionAzureArgs) ToPrivateLinkAttachmentConnectionAzureOutput() PrivateLinkAttachmentConnectionAzureOutput {
	return i.ToPrivateLinkAttachmentConnectionAzureOutputWithContext(context.Background())
}

func (i PrivateLinkAttachmentConnectionAzureArgs) ToPrivateLinkAttachmentConnectionAzureOutputWithContext(ctx context.Context) PrivateLinkAttachmentConnectionAzureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAttachmentConnectionAzureOutput)
}

func (i PrivateLinkAttachmentConnectionAzureArgs) ToOutput(ctx context.Context) pulumix.Output[PrivateLinkAttachmentConnectionAzure] {
	return pulumix.Output[PrivateLinkAttachmentConnectionAzure]{
		OutputState: i.ToPrivateLinkAttachmentConnectionAzureOutputWithContext(ctx).OutputState,
	}
}

func (i PrivateLinkAttachmentConnectionAzureArgs) ToPrivateLinkAttachmentConnectionAzurePtrOutput() PrivateLinkAttachmentConnectionAzurePtrOutput {
	return i.ToPrivateLinkAttachmentConnectionAzurePtrOutputWithContext(context.Background())
}

func (i PrivateLinkAttachmentConnectionAzureArgs) ToPrivateLinkAttachmentConnectionAzurePtrOutputWithContext(ctx context.Context) PrivateLinkAttachmentConnectionAzurePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAttachmentConnectionAzureOutput).ToPrivateLinkAttachmentConnectionAzurePtrOutputWithContext(ctx)
}

// PrivateLinkAttachmentConnectionAzurePtrInput is an input type that accepts PrivateLinkAttachmentConnectionAzureArgs, PrivateLinkAttachmentConnectionAzurePtr and PrivateLinkAttachmentConnectionAzurePtrOutput values.
// You can construct a concrete instance of `PrivateLinkAttachmentConnectionAzurePtrInput` via:
//
//	        PrivateLinkAttachmentConnectionAzureArgs{...}
//
//	or:
//
//	        nil
type PrivateLinkAttachmentConnectionAzurePtrInput interface {
	pulumi.Input

	ToPrivateLinkAttachmentConnectionAzurePtrOutput() PrivateLinkAttachmentConnectionAzurePtrOutput
	ToPrivateLinkAttachmentConnectionAzurePtrOutputWithContext(context.Context) PrivateLinkAttachmentConnectionAzurePtrOutput
}

type privateLinkAttachmentConnectionAzurePtrType PrivateLinkAttachmentConnectionAzureArgs

func PrivateLinkAttachmentConnectionAzurePtr(v *PrivateLinkAttachmentConnectionAzureArgs) PrivateLinkAttachmentConnectionAzurePtrInput {
	return (*privateLinkAttachmentConnectionAzurePtrType)(v)
}

func (*privateLinkAttachmentConnectionAzurePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkAttachmentConnectionAzure)(nil)).Elem()
}

func (i *privateLinkAttachmentConnectionAzurePtrType) ToPrivateLinkAttachmentConnectionAzurePtrOutput() PrivateLinkAttachmentConnectionAzurePtrOutput {
	return i.ToPrivateLinkAttachmentConnectionAzurePtrOutputWithContext(context.Background())
}

func (i *privateLinkAttachmentConnectionAzurePtrType) ToPrivateLinkAttachmentConnectionAzurePtrOutputWithContext(ctx context.Context) PrivateLinkAttachmentConnectionAzurePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAttachmentConnectionAzurePtrOutput)
}

func (i *privateLinkAttachmentConnectionAzurePtrType) ToOutput(ctx context.Context) pulumix.Output[*PrivateLinkAttachmentConnectionAzure] {
	return pulumix.Output[*PrivateLinkAttachmentConnectionAzure]{
		OutputState: i.ToPrivateLinkAttachmentConnectionAzurePtrOutputWithContext(ctx).OutputState,
	}
}

type PrivateLinkAttachmentConnectionAzureOutput struct{ *pulumi.OutputState }

func (PrivateLinkAttachmentConnectionAzureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkAttachmentConnectionAzure)(nil)).Elem()
}

func (o PrivateLinkAttachmentConnectionAzureOutput) ToPrivateLinkAttachmentConnectionAzureOutput() PrivateLinkAttachmentConnectionAzureOutput {
	return o
}

func (o PrivateLinkAttachmentConnectionAzureOutput) ToPrivateLinkAttachmentConnectionAzureOutputWithContext(ctx context.Context) PrivateLinkAttachmentConnectionAzureOutput {
	return o
}

func (o PrivateLinkAttachmentConnectionAzureOutput) ToPrivateLinkAttachmentConnectionAzurePtrOutput() PrivateLinkAttachmentConnectionAzurePtrOutput {
	return o.ToPrivateLinkAttachmentConnectionAzurePtrOutputWithContext(context.Background())
}

func (o PrivateLinkAttachmentConnectionAzureOutput) ToPrivateLinkAttachmentConnectionAzurePtrOutputWithContext(ctx context.Context) PrivateLinkAttachmentConnectionAzurePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateLinkAttachmentConnectionAzure) *PrivateLinkAttachmentConnectionAzure {
		return &v
	}).(PrivateLinkAttachmentConnectionAzurePtrOutput)
}

func (o PrivateLinkAttachmentConnectionAzureOutput) ToOutput(ctx context.Context) pulumix.Output[PrivateLinkAttachmentConnectionAzure] {
	return pulumix.Output[PrivateLinkAttachmentConnectionAzure]{
		OutputState: o.OutputState,
	}
}

func (o PrivateLinkAttachmentConnectionAzureOutput) PrivateEndpointResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateLinkAttachmentConnectionAzure) string { return v.PrivateEndpointResourceId }).(pulumi.StringOutput)
}

type PrivateLinkAttachmentConnectionAzurePtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkAttachmentConnectionAzurePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkAttachmentConnectionAzure)(nil)).Elem()
}

func (o PrivateLinkAttachmentConnectionAzurePtrOutput) ToPrivateLinkAttachmentConnectionAzurePtrOutput() PrivateLinkAttachmentConnectionAzurePtrOutput {
	return o
}

func (o PrivateLinkAttachmentConnectionAzurePtrOutput) ToPrivateLinkAttachmentConnectionAzurePtrOutputWithContext(ctx context.Context) PrivateLinkAttachmentConnectionAzurePtrOutput {
	return o
}

func (o PrivateLinkAttachmentConnectionAzurePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PrivateLinkAttachmentConnectionAzure] {
	return pulumix.Output[*PrivateLinkAttachmentConnectionAzure]{
		OutputState: o.OutputState,
	}
}

func (o PrivateLinkAttachmentConnectionAzurePtrOutput) Elem() PrivateLinkAttachmentConnectionAzureOutput {
	return o.ApplyT(func(v *PrivateLinkAttachmentConnectionAzure) PrivateLinkAttachmentConnectionAzure {
		if v != nil {
			return *v
		}
		var ret PrivateLinkAttachmentConnectionAzure
		return ret
	}).(PrivateLinkAttachmentConnectionAzureOutput)
}

func (o PrivateLinkAttachmentConnectionAzurePtrOutput) PrivateEndpointResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkAttachmentConnectionAzure) *string {
		if v == nil {
			return nil
		}
		return &v.PrivateEndpointResourceId
	}).(pulumi.StringPtrOutput)
}

type PrivateLinkAttachmentConnectionEnvironment struct {
	// The unique identifier for the private link attachment.
	Id string `pulumi:"id"`
}

// PrivateLinkAttachmentConnectionEnvironmentInput is an input type that accepts PrivateLinkAttachmentConnectionEnvironmentArgs and PrivateLinkAttachmentConnectionEnvironmentOutput values.
// You can construct a concrete instance of `PrivateLinkAttachmentConnectionEnvironmentInput` via:
//
//	PrivateLinkAttachmentConnectionEnvironmentArgs{...}
type PrivateLinkAttachmentConnectionEnvironmentInput interface {
	pulumi.Input

	ToPrivateLinkAttachmentConnectionEnvironmentOutput() PrivateLinkAttachmentConnectionEnvironmentOutput
	ToPrivateLinkAttachmentConnectionEnvironmentOutputWithContext(context.Context) PrivateLinkAttachmentConnectionEnvironmentOutput
}

type PrivateLinkAttachmentConnectionEnvironmentArgs struct {
	// The unique identifier for the private link attachment.
	Id pulumi.StringInput `pulumi:"id"`
}

func (PrivateLinkAttachmentConnectionEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkAttachmentConnectionEnvironment)(nil)).Elem()
}

func (i PrivateLinkAttachmentConnectionEnvironmentArgs) ToPrivateLinkAttachmentConnectionEnvironmentOutput() PrivateLinkAttachmentConnectionEnvironmentOutput {
	return i.ToPrivateLinkAttachmentConnectionEnvironmentOutputWithContext(context.Background())
}

func (i PrivateLinkAttachmentConnectionEnvironmentArgs) ToPrivateLinkAttachmentConnectionEnvironmentOutputWithContext(ctx context.Context) PrivateLinkAttachmentConnectionEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAttachmentConnectionEnvironmentOutput)
}

func (i PrivateLinkAttachmentConnectionEnvironmentArgs) ToOutput(ctx context.Context) pulumix.Output[PrivateLinkAttachmentConnectionEnvironment] {
	return pulumix.Output[PrivateLinkAttachmentConnectionEnvironment]{
		OutputState: i.ToPrivateLinkAttachmentConnectionEnvironmentOutputWithContext(ctx).OutputState,
	}
}

func (i PrivateLinkAttachmentConnectionEnvironmentArgs) ToPrivateLinkAttachmentConnectionEnvironmentPtrOutput() PrivateLinkAttachmentConnectionEnvironmentPtrOutput {
	return i.ToPrivateLinkAttachmentConnectionEnvironmentPtrOutputWithContext(context.Background())
}

func (i PrivateLinkAttachmentConnectionEnvironmentArgs) ToPrivateLinkAttachmentConnectionEnvironmentPtrOutputWithContext(ctx context.Context) PrivateLinkAttachmentConnectionEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAttachmentConnectionEnvironmentOutput).ToPrivateLinkAttachmentConnectionEnvironmentPtrOutputWithContext(ctx)
}

// PrivateLinkAttachmentConnectionEnvironmentPtrInput is an input type that accepts PrivateLinkAttachmentConnectionEnvironmentArgs, PrivateLinkAttachmentConnectionEnvironmentPtr and PrivateLinkAttachmentConnectionEnvironmentPtrOutput values.
// You can construct a concrete instance of `PrivateLinkAttachmentConnectionEnvironmentPtrInput` via:
//
//	        PrivateLinkAttachmentConnectionEnvironmentArgs{...}
//
//	or:
//
//	        nil
type PrivateLinkAttachmentConnectionEnvironmentPtrInput interface {
	pulumi.Input

	ToPrivateLinkAttachmentConnectionEnvironmentPtrOutput() PrivateLinkAttachmentConnectionEnvironmentPtrOutput
	ToPrivateLinkAttachmentConnectionEnvironmentPtrOutputWithContext(context.Context) PrivateLinkAttachmentConnectionEnvironmentPtrOutput
}

type privateLinkAttachmentConnectionEnvironmentPtrType PrivateLinkAttachmentConnectionEnvironmentArgs

func PrivateLinkAttachmentConnectionEnvironmentPtr(v *PrivateLinkAttachmentConnectionEnvironmentArgs) PrivateLinkAttachmentConnectionEnvironmentPtrInput {
	return (*privateLinkAttachmentConnectionEnvironmentPtrType)(v)
}

func (*privateLinkAttachmentConnectionEnvironmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkAttachmentConnectionEnvironment)(nil)).Elem()
}

func (i *privateLinkAttachmentConnectionEnvironmentPtrType) ToPrivateLinkAttachmentConnectionEnvironmentPtrOutput() PrivateLinkAttachmentConnectionEnvironmentPtrOutput {
	return i.ToPrivateLinkAttachmentConnectionEnvironmentPtrOutputWithContext(context.Background())
}

func (i *privateLinkAttachmentConnectionEnvironmentPtrType) ToPrivateLinkAttachmentConnectionEnvironmentPtrOutputWithContext(ctx context.Context) PrivateLinkAttachmentConnectionEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAttachmentConnectionEnvironmentPtrOutput)
}

func (i *privateLinkAttachmentConnectionEnvironmentPtrType) ToOutput(ctx context.Context) pulumix.Output[*PrivateLinkAttachmentConnectionEnvironment] {
	return pulumix.Output[*PrivateLinkAttachmentConnectionEnvironment]{
		OutputState: i.ToPrivateLinkAttachmentConnectionEnvironmentPtrOutputWithContext(ctx).OutputState,
	}
}

type PrivateLinkAttachmentConnectionEnvironmentOutput struct{ *pulumi.OutputState }

func (PrivateLinkAttachmentConnectionEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkAttachmentConnectionEnvironment)(nil)).Elem()
}

func (o PrivateLinkAttachmentConnectionEnvironmentOutput) ToPrivateLinkAttachmentConnectionEnvironmentOutput() PrivateLinkAttachmentConnectionEnvironmentOutput {
	return o
}

func (o PrivateLinkAttachmentConnectionEnvironmentOutput) ToPrivateLinkAttachmentConnectionEnvironmentOutputWithContext(ctx context.Context) PrivateLinkAttachmentConnectionEnvironmentOutput {
	return o
}

func (o PrivateLinkAttachmentConnectionEnvironmentOutput) ToPrivateLinkAttachmentConnectionEnvironmentPtrOutput() PrivateLinkAttachmentConnectionEnvironmentPtrOutput {
	return o.ToPrivateLinkAttachmentConnectionEnvironmentPtrOutputWithContext(context.Background())
}

func (o PrivateLinkAttachmentConnectionEnvironmentOutput) ToPrivateLinkAttachmentConnectionEnvironmentPtrOutputWithContext(ctx context.Context) PrivateLinkAttachmentConnectionEnvironmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateLinkAttachmentConnectionEnvironment) *PrivateLinkAttachmentConnectionEnvironment {
		return &v
	}).(PrivateLinkAttachmentConnectionEnvironmentPtrOutput)
}

func (o PrivateLinkAttachmentConnectionEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[PrivateLinkAttachmentConnectionEnvironment] {
	return pulumix.Output[PrivateLinkAttachmentConnectionEnvironment]{
		OutputState: o.OutputState,
	}
}

// The unique identifier for the private link attachment.
func (o PrivateLinkAttachmentConnectionEnvironmentOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateLinkAttachmentConnectionEnvironment) string { return v.Id }).(pulumi.StringOutput)
}

type PrivateLinkAttachmentConnectionEnvironmentPtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkAttachmentConnectionEnvironmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkAttachmentConnectionEnvironment)(nil)).Elem()
}

func (o PrivateLinkAttachmentConnectionEnvironmentPtrOutput) ToPrivateLinkAttachmentConnectionEnvironmentPtrOutput() PrivateLinkAttachmentConnectionEnvironmentPtrOutput {
	return o
}

func (o PrivateLinkAttachmentConnectionEnvironmentPtrOutput) ToPrivateLinkAttachmentConnectionEnvironmentPtrOutputWithContext(ctx context.Context) PrivateLinkAttachmentConnectionEnvironmentPtrOutput {
	return o
}

func (o PrivateLinkAttachmentConnectionEnvironmentPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PrivateLinkAttachmentConnectionEnvironment] {
	return pulumix.Output[*PrivateLinkAttachmentConnectionEnvironment]{
		OutputState: o.OutputState,
	}
}

func (o PrivateLinkAttachmentConnectionEnvironmentPtrOutput) Elem() PrivateLinkAttachmentConnectionEnvironmentOutput {
	return o.ApplyT(func(v *PrivateLinkAttachmentConnectionEnvironment) PrivateLinkAttachmentConnectionEnvironment {
		if v != nil {
			return *v
		}
		var ret PrivateLinkAttachmentConnectionEnvironment
		return ret
	}).(PrivateLinkAttachmentConnectionEnvironmentOutput)
}

// The unique identifier for the private link attachment.
func (o PrivateLinkAttachmentConnectionEnvironmentPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkAttachmentConnectionEnvironment) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type PrivateLinkAttachmentConnectionGcp struct {
	PrivateServiceConnectConnectionId string `pulumi:"privateServiceConnectConnectionId"`
}

// PrivateLinkAttachmentConnectionGcpInput is an input type that accepts PrivateLinkAttachmentConnectionGcpArgs and PrivateLinkAttachmentConnectionGcpOutput values.
// You can construct a concrete instance of `PrivateLinkAttachmentConnectionGcpInput` via:
//
//	PrivateLinkAttachmentConnectionGcpArgs{...}
type PrivateLinkAttachmentConnectionGcpInput interface {
	pulumi.Input

	ToPrivateLinkAttachmentConnectionGcpOutput() PrivateLinkAttachmentConnectionGcpOutput
	ToPrivateLinkAttachmentConnectionGcpOutputWithContext(context.Context) PrivateLinkAttachmentConnectionGcpOutput
}

type PrivateLinkAttachmentConnectionGcpArgs struct {
	PrivateServiceConnectConnectionId pulumi.StringInput `pulumi:"privateServiceConnectConnectionId"`
}

func (PrivateLinkAttachmentConnectionGcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkAttachmentConnectionGcp)(nil)).Elem()
}

func (i PrivateLinkAttachmentConnectionGcpArgs) ToPrivateLinkAttachmentConnectionGcpOutput() PrivateLinkAttachmentConnectionGcpOutput {
	return i.ToPrivateLinkAttachmentConnectionGcpOutputWithContext(context.Background())
}

func (i PrivateLinkAttachmentConnectionGcpArgs) ToPrivateLinkAttachmentConnectionGcpOutputWithContext(ctx context.Context) PrivateLinkAttachmentConnectionGcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAttachmentConnectionGcpOutput)
}

func (i PrivateLinkAttachmentConnectionGcpArgs) ToOutput(ctx context.Context) pulumix.Output[PrivateLinkAttachmentConnectionGcp] {
	return pulumix.Output[PrivateLinkAttachmentConnectionGcp]{
		OutputState: i.ToPrivateLinkAttachmentConnectionGcpOutputWithContext(ctx).OutputState,
	}
}

func (i PrivateLinkAttachmentConnectionGcpArgs) ToPrivateLinkAttachmentConnectionGcpPtrOutput() PrivateLinkAttachmentConnectionGcpPtrOutput {
	return i.ToPrivateLinkAttachmentConnectionGcpPtrOutputWithContext(context.Background())
}

func (i PrivateLinkAttachmentConnectionGcpArgs) ToPrivateLinkAttachmentConnectionGcpPtrOutputWithContext(ctx context.Context) PrivateLinkAttachmentConnectionGcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAttachmentConnectionGcpOutput).ToPrivateLinkAttachmentConnectionGcpPtrOutputWithContext(ctx)
}

// PrivateLinkAttachmentConnectionGcpPtrInput is an input type that accepts PrivateLinkAttachmentConnectionGcpArgs, PrivateLinkAttachmentConnectionGcpPtr and PrivateLinkAttachmentConnectionGcpPtrOutput values.
// You can construct a concrete instance of `PrivateLinkAttachmentConnectionGcpPtrInput` via:
//
//	        PrivateLinkAttachmentConnectionGcpArgs{...}
//
//	or:
//
//	        nil
type PrivateLinkAttachmentConnectionGcpPtrInput interface {
	pulumi.Input

	ToPrivateLinkAttachmentConnectionGcpPtrOutput() PrivateLinkAttachmentConnectionGcpPtrOutput
	ToPrivateLinkAttachmentConnectionGcpPtrOutputWithContext(context.Context) PrivateLinkAttachmentConnectionGcpPtrOutput
}

type privateLinkAttachmentConnectionGcpPtrType PrivateLinkAttachmentConnectionGcpArgs

func PrivateLinkAttachmentConnectionGcpPtr(v *PrivateLinkAttachmentConnectionGcpArgs) PrivateLinkAttachmentConnectionGcpPtrInput {
	return (*privateLinkAttachmentConnectionGcpPtrType)(v)
}

func (*privateLinkAttachmentConnectionGcpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkAttachmentConnectionGcp)(nil)).Elem()
}

func (i *privateLinkAttachmentConnectionGcpPtrType) ToPrivateLinkAttachmentConnectionGcpPtrOutput() PrivateLinkAttachmentConnectionGcpPtrOutput {
	return i.ToPrivateLinkAttachmentConnectionGcpPtrOutputWithContext(context.Background())
}

func (i *privateLinkAttachmentConnectionGcpPtrType) ToPrivateLinkAttachmentConnectionGcpPtrOutputWithContext(ctx context.Context) PrivateLinkAttachmentConnectionGcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAttachmentConnectionGcpPtrOutput)
}

func (i *privateLinkAttachmentConnectionGcpPtrType) ToOutput(ctx context.Context) pulumix.Output[*PrivateLinkAttachmentConnectionGcp] {
	return pulumix.Output[*PrivateLinkAttachmentConnectionGcp]{
		OutputState: i.ToPrivateLinkAttachmentConnectionGcpPtrOutputWithContext(ctx).OutputState,
	}
}

type PrivateLinkAttachmentConnectionGcpOutput struct{ *pulumi.OutputState }

func (PrivateLinkAttachmentConnectionGcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkAttachmentConnectionGcp)(nil)).Elem()
}

func (o PrivateLinkAttachmentConnectionGcpOutput) ToPrivateLinkAttachmentConnectionGcpOutput() PrivateLinkAttachmentConnectionGcpOutput {
	return o
}

func (o PrivateLinkAttachmentConnectionGcpOutput) ToPrivateLinkAttachmentConnectionGcpOutputWithContext(ctx context.Context) PrivateLinkAttachmentConnectionGcpOutput {
	return o
}

func (o PrivateLinkAttachmentConnectionGcpOutput) ToPrivateLinkAttachmentConnectionGcpPtrOutput() PrivateLinkAttachmentConnectionGcpPtrOutput {
	return o.ToPrivateLinkAttachmentConnectionGcpPtrOutputWithContext(context.Background())
}

func (o PrivateLinkAttachmentConnectionGcpOutput) ToPrivateLinkAttachmentConnectionGcpPtrOutputWithContext(ctx context.Context) PrivateLinkAttachmentConnectionGcpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateLinkAttachmentConnectionGcp) *PrivateLinkAttachmentConnectionGcp {
		return &v
	}).(PrivateLinkAttachmentConnectionGcpPtrOutput)
}

func (o PrivateLinkAttachmentConnectionGcpOutput) ToOutput(ctx context.Context) pulumix.Output[PrivateLinkAttachmentConnectionGcp] {
	return pulumix.Output[PrivateLinkAttachmentConnectionGcp]{
		OutputState: o.OutputState,
	}
}

func (o PrivateLinkAttachmentConnectionGcpOutput) PrivateServiceConnectConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateLinkAttachmentConnectionGcp) string { return v.PrivateServiceConnectConnectionId }).(pulumi.StringOutput)
}

type PrivateLinkAttachmentConnectionGcpPtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkAttachmentConnectionGcpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkAttachmentConnectionGcp)(nil)).Elem()
}

func (o PrivateLinkAttachmentConnectionGcpPtrOutput) ToPrivateLinkAttachmentConnectionGcpPtrOutput() PrivateLinkAttachmentConnectionGcpPtrOutput {
	return o
}

func (o PrivateLinkAttachmentConnectionGcpPtrOutput) ToPrivateLinkAttachmentConnectionGcpPtrOutputWithContext(ctx context.Context) PrivateLinkAttachmentConnectionGcpPtrOutput {
	return o
}

func (o PrivateLinkAttachmentConnectionGcpPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PrivateLinkAttachmentConnectionGcp] {
	return pulumix.Output[*PrivateLinkAttachmentConnectionGcp]{
		OutputState: o.OutputState,
	}
}

func (o PrivateLinkAttachmentConnectionGcpPtrOutput) Elem() PrivateLinkAttachmentConnectionGcpOutput {
	return o.ApplyT(func(v *PrivateLinkAttachmentConnectionGcp) PrivateLinkAttachmentConnectionGcp {
		if v != nil {
			return *v
		}
		var ret PrivateLinkAttachmentConnectionGcp
		return ret
	}).(PrivateLinkAttachmentConnectionGcpOutput)
}

func (o PrivateLinkAttachmentConnectionGcpPtrOutput) PrivateServiceConnectConnectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkAttachmentConnectionGcp) *string {
		if v == nil {
			return nil
		}
		return &v.PrivateServiceConnectConnectionId
	}).(pulumi.StringPtrOutput)
}

type PrivateLinkAttachmentConnectionPrivateLinkAttachment struct {
	// The unique identifier for the private link attachment.
	Id string `pulumi:"id"`
}

// PrivateLinkAttachmentConnectionPrivateLinkAttachmentInput is an input type that accepts PrivateLinkAttachmentConnectionPrivateLinkAttachmentArgs and PrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput values.
// You can construct a concrete instance of `PrivateLinkAttachmentConnectionPrivateLinkAttachmentInput` via:
//
//	PrivateLinkAttachmentConnectionPrivateLinkAttachmentArgs{...}
type PrivateLinkAttachmentConnectionPrivateLinkAttachmentInput interface {
	pulumi.Input

	ToPrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput() PrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput
	ToPrivateLinkAttachmentConnectionPrivateLinkAttachmentOutputWithContext(context.Context) PrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput
}

type PrivateLinkAttachmentConnectionPrivateLinkAttachmentArgs struct {
	// The unique identifier for the private link attachment.
	Id pulumi.StringInput `pulumi:"id"`
}

func (PrivateLinkAttachmentConnectionPrivateLinkAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkAttachmentConnectionPrivateLinkAttachment)(nil)).Elem()
}

func (i PrivateLinkAttachmentConnectionPrivateLinkAttachmentArgs) ToPrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput() PrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput {
	return i.ToPrivateLinkAttachmentConnectionPrivateLinkAttachmentOutputWithContext(context.Background())
}

func (i PrivateLinkAttachmentConnectionPrivateLinkAttachmentArgs) ToPrivateLinkAttachmentConnectionPrivateLinkAttachmentOutputWithContext(ctx context.Context) PrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput)
}

func (i PrivateLinkAttachmentConnectionPrivateLinkAttachmentArgs) ToOutput(ctx context.Context) pulumix.Output[PrivateLinkAttachmentConnectionPrivateLinkAttachment] {
	return pulumix.Output[PrivateLinkAttachmentConnectionPrivateLinkAttachment]{
		OutputState: i.ToPrivateLinkAttachmentConnectionPrivateLinkAttachmentOutputWithContext(ctx).OutputState,
	}
}

func (i PrivateLinkAttachmentConnectionPrivateLinkAttachmentArgs) ToPrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrOutput() PrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrOutput {
	return i.ToPrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrOutputWithContext(context.Background())
}

func (i PrivateLinkAttachmentConnectionPrivateLinkAttachmentArgs) ToPrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrOutputWithContext(ctx context.Context) PrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput).ToPrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrOutputWithContext(ctx)
}

// PrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrInput is an input type that accepts PrivateLinkAttachmentConnectionPrivateLinkAttachmentArgs, PrivateLinkAttachmentConnectionPrivateLinkAttachmentPtr and PrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrOutput values.
// You can construct a concrete instance of `PrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrInput` via:
//
//	        PrivateLinkAttachmentConnectionPrivateLinkAttachmentArgs{...}
//
//	or:
//
//	        nil
type PrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrInput interface {
	pulumi.Input

	ToPrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrOutput() PrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrOutput
	ToPrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrOutputWithContext(context.Context) PrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrOutput
}

type privateLinkAttachmentConnectionPrivateLinkAttachmentPtrType PrivateLinkAttachmentConnectionPrivateLinkAttachmentArgs

func PrivateLinkAttachmentConnectionPrivateLinkAttachmentPtr(v *PrivateLinkAttachmentConnectionPrivateLinkAttachmentArgs) PrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrInput {
	return (*privateLinkAttachmentConnectionPrivateLinkAttachmentPtrType)(v)
}

func (*privateLinkAttachmentConnectionPrivateLinkAttachmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkAttachmentConnectionPrivateLinkAttachment)(nil)).Elem()
}

func (i *privateLinkAttachmentConnectionPrivateLinkAttachmentPtrType) ToPrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrOutput() PrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrOutput {
	return i.ToPrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrOutputWithContext(context.Background())
}

func (i *privateLinkAttachmentConnectionPrivateLinkAttachmentPtrType) ToPrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrOutputWithContext(ctx context.Context) PrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrOutput)
}

func (i *privateLinkAttachmentConnectionPrivateLinkAttachmentPtrType) ToOutput(ctx context.Context) pulumix.Output[*PrivateLinkAttachmentConnectionPrivateLinkAttachment] {
	return pulumix.Output[*PrivateLinkAttachmentConnectionPrivateLinkAttachment]{
		OutputState: i.ToPrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrOutputWithContext(ctx).OutputState,
	}
}

type PrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput struct{ *pulumi.OutputState }

func (PrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkAttachmentConnectionPrivateLinkAttachment)(nil)).Elem()
}

func (o PrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput) ToPrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput() PrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput {
	return o
}

func (o PrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput) ToPrivateLinkAttachmentConnectionPrivateLinkAttachmentOutputWithContext(ctx context.Context) PrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput {
	return o
}

func (o PrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput) ToPrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrOutput() PrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrOutput {
	return o.ToPrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrOutputWithContext(context.Background())
}

func (o PrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput) ToPrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrOutputWithContext(ctx context.Context) PrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateLinkAttachmentConnectionPrivateLinkAttachment) *PrivateLinkAttachmentConnectionPrivateLinkAttachment {
		return &v
	}).(PrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrOutput)
}

func (o PrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput) ToOutput(ctx context.Context) pulumix.Output[PrivateLinkAttachmentConnectionPrivateLinkAttachment] {
	return pulumix.Output[PrivateLinkAttachmentConnectionPrivateLinkAttachment]{
		OutputState: o.OutputState,
	}
}

// The unique identifier for the private link attachment.
func (o PrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateLinkAttachmentConnectionPrivateLinkAttachment) string { return v.Id }).(pulumi.StringOutput)
}

type PrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkAttachmentConnectionPrivateLinkAttachment)(nil)).Elem()
}

func (o PrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrOutput) ToPrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrOutput() PrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrOutput {
	return o
}

func (o PrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrOutput) ToPrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrOutputWithContext(ctx context.Context) PrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrOutput {
	return o
}

func (o PrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PrivateLinkAttachmentConnectionPrivateLinkAttachment] {
	return pulumix.Output[*PrivateLinkAttachmentConnectionPrivateLinkAttachment]{
		OutputState: o.OutputState,
	}
}

func (o PrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrOutput) Elem() PrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput {
	return o.ApplyT(func(v *PrivateLinkAttachmentConnectionPrivateLinkAttachment) PrivateLinkAttachmentConnectionPrivateLinkAttachment {
		if v != nil {
			return *v
		}
		var ret PrivateLinkAttachmentConnectionPrivateLinkAttachment
		return ret
	}).(PrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput)
}

// The unique identifier for the private link attachment.
func (o PrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkAttachmentConnectionPrivateLinkAttachment) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type PrivateLinkAttachmentEnvironment struct {
	// The ID of the Environment that the Private Link Attachment belongs to, for example `env-xyz456`.
	Id string `pulumi:"id"`
}

// PrivateLinkAttachmentEnvironmentInput is an input type that accepts PrivateLinkAttachmentEnvironmentArgs and PrivateLinkAttachmentEnvironmentOutput values.
// You can construct a concrete instance of `PrivateLinkAttachmentEnvironmentInput` via:
//
//	PrivateLinkAttachmentEnvironmentArgs{...}
type PrivateLinkAttachmentEnvironmentInput interface {
	pulumi.Input

	ToPrivateLinkAttachmentEnvironmentOutput() PrivateLinkAttachmentEnvironmentOutput
	ToPrivateLinkAttachmentEnvironmentOutputWithContext(context.Context) PrivateLinkAttachmentEnvironmentOutput
}

type PrivateLinkAttachmentEnvironmentArgs struct {
	// The ID of the Environment that the Private Link Attachment belongs to, for example `env-xyz456`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (PrivateLinkAttachmentEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkAttachmentEnvironment)(nil)).Elem()
}

func (i PrivateLinkAttachmentEnvironmentArgs) ToPrivateLinkAttachmentEnvironmentOutput() PrivateLinkAttachmentEnvironmentOutput {
	return i.ToPrivateLinkAttachmentEnvironmentOutputWithContext(context.Background())
}

func (i PrivateLinkAttachmentEnvironmentArgs) ToPrivateLinkAttachmentEnvironmentOutputWithContext(ctx context.Context) PrivateLinkAttachmentEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAttachmentEnvironmentOutput)
}

func (i PrivateLinkAttachmentEnvironmentArgs) ToOutput(ctx context.Context) pulumix.Output[PrivateLinkAttachmentEnvironment] {
	return pulumix.Output[PrivateLinkAttachmentEnvironment]{
		OutputState: i.ToPrivateLinkAttachmentEnvironmentOutputWithContext(ctx).OutputState,
	}
}

func (i PrivateLinkAttachmentEnvironmentArgs) ToPrivateLinkAttachmentEnvironmentPtrOutput() PrivateLinkAttachmentEnvironmentPtrOutput {
	return i.ToPrivateLinkAttachmentEnvironmentPtrOutputWithContext(context.Background())
}

func (i PrivateLinkAttachmentEnvironmentArgs) ToPrivateLinkAttachmentEnvironmentPtrOutputWithContext(ctx context.Context) PrivateLinkAttachmentEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAttachmentEnvironmentOutput).ToPrivateLinkAttachmentEnvironmentPtrOutputWithContext(ctx)
}

// PrivateLinkAttachmentEnvironmentPtrInput is an input type that accepts PrivateLinkAttachmentEnvironmentArgs, PrivateLinkAttachmentEnvironmentPtr and PrivateLinkAttachmentEnvironmentPtrOutput values.
// You can construct a concrete instance of `PrivateLinkAttachmentEnvironmentPtrInput` via:
//
//	        PrivateLinkAttachmentEnvironmentArgs{...}
//
//	or:
//
//	        nil
type PrivateLinkAttachmentEnvironmentPtrInput interface {
	pulumi.Input

	ToPrivateLinkAttachmentEnvironmentPtrOutput() PrivateLinkAttachmentEnvironmentPtrOutput
	ToPrivateLinkAttachmentEnvironmentPtrOutputWithContext(context.Context) PrivateLinkAttachmentEnvironmentPtrOutput
}

type privateLinkAttachmentEnvironmentPtrType PrivateLinkAttachmentEnvironmentArgs

func PrivateLinkAttachmentEnvironmentPtr(v *PrivateLinkAttachmentEnvironmentArgs) PrivateLinkAttachmentEnvironmentPtrInput {
	return (*privateLinkAttachmentEnvironmentPtrType)(v)
}

func (*privateLinkAttachmentEnvironmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkAttachmentEnvironment)(nil)).Elem()
}

func (i *privateLinkAttachmentEnvironmentPtrType) ToPrivateLinkAttachmentEnvironmentPtrOutput() PrivateLinkAttachmentEnvironmentPtrOutput {
	return i.ToPrivateLinkAttachmentEnvironmentPtrOutputWithContext(context.Background())
}

func (i *privateLinkAttachmentEnvironmentPtrType) ToPrivateLinkAttachmentEnvironmentPtrOutputWithContext(ctx context.Context) PrivateLinkAttachmentEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAttachmentEnvironmentPtrOutput)
}

func (i *privateLinkAttachmentEnvironmentPtrType) ToOutput(ctx context.Context) pulumix.Output[*PrivateLinkAttachmentEnvironment] {
	return pulumix.Output[*PrivateLinkAttachmentEnvironment]{
		OutputState: i.ToPrivateLinkAttachmentEnvironmentPtrOutputWithContext(ctx).OutputState,
	}
}

type PrivateLinkAttachmentEnvironmentOutput struct{ *pulumi.OutputState }

func (PrivateLinkAttachmentEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkAttachmentEnvironment)(nil)).Elem()
}

func (o PrivateLinkAttachmentEnvironmentOutput) ToPrivateLinkAttachmentEnvironmentOutput() PrivateLinkAttachmentEnvironmentOutput {
	return o
}

func (o PrivateLinkAttachmentEnvironmentOutput) ToPrivateLinkAttachmentEnvironmentOutputWithContext(ctx context.Context) PrivateLinkAttachmentEnvironmentOutput {
	return o
}

func (o PrivateLinkAttachmentEnvironmentOutput) ToPrivateLinkAttachmentEnvironmentPtrOutput() PrivateLinkAttachmentEnvironmentPtrOutput {
	return o.ToPrivateLinkAttachmentEnvironmentPtrOutputWithContext(context.Background())
}

func (o PrivateLinkAttachmentEnvironmentOutput) ToPrivateLinkAttachmentEnvironmentPtrOutputWithContext(ctx context.Context) PrivateLinkAttachmentEnvironmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateLinkAttachmentEnvironment) *PrivateLinkAttachmentEnvironment {
		return &v
	}).(PrivateLinkAttachmentEnvironmentPtrOutput)
}

func (o PrivateLinkAttachmentEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[PrivateLinkAttachmentEnvironment] {
	return pulumix.Output[PrivateLinkAttachmentEnvironment]{
		OutputState: o.OutputState,
	}
}

// The ID of the Environment that the Private Link Attachment belongs to, for example `env-xyz456`.
func (o PrivateLinkAttachmentEnvironmentOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateLinkAttachmentEnvironment) string { return v.Id }).(pulumi.StringOutput)
}

type PrivateLinkAttachmentEnvironmentPtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkAttachmentEnvironmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkAttachmentEnvironment)(nil)).Elem()
}

func (o PrivateLinkAttachmentEnvironmentPtrOutput) ToPrivateLinkAttachmentEnvironmentPtrOutput() PrivateLinkAttachmentEnvironmentPtrOutput {
	return o
}

func (o PrivateLinkAttachmentEnvironmentPtrOutput) ToPrivateLinkAttachmentEnvironmentPtrOutputWithContext(ctx context.Context) PrivateLinkAttachmentEnvironmentPtrOutput {
	return o
}

func (o PrivateLinkAttachmentEnvironmentPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PrivateLinkAttachmentEnvironment] {
	return pulumix.Output[*PrivateLinkAttachmentEnvironment]{
		OutputState: o.OutputState,
	}
}

func (o PrivateLinkAttachmentEnvironmentPtrOutput) Elem() PrivateLinkAttachmentEnvironmentOutput {
	return o.ApplyT(func(v *PrivateLinkAttachmentEnvironment) PrivateLinkAttachmentEnvironment {
		if v != nil {
			return *v
		}
		var ret PrivateLinkAttachmentEnvironment
		return ret
	}).(PrivateLinkAttachmentEnvironmentOutput)
}

// The ID of the Environment that the Private Link Attachment belongs to, for example `env-xyz456`.
func (o PrivateLinkAttachmentEnvironmentPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkAttachmentEnvironment) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type PrivateLinkAttachmentGcp struct {
	PrivateServiceConnectServiceAttachment *string `pulumi:"privateServiceConnectServiceAttachment"`
	Zone                                   *string `pulumi:"zone"`
}

// PrivateLinkAttachmentGcpInput is an input type that accepts PrivateLinkAttachmentGcpArgs and PrivateLinkAttachmentGcpOutput values.
// You can construct a concrete instance of `PrivateLinkAttachmentGcpInput` via:
//
//	PrivateLinkAttachmentGcpArgs{...}
type PrivateLinkAttachmentGcpInput interface {
	pulumi.Input

	ToPrivateLinkAttachmentGcpOutput() PrivateLinkAttachmentGcpOutput
	ToPrivateLinkAttachmentGcpOutputWithContext(context.Context) PrivateLinkAttachmentGcpOutput
}

type PrivateLinkAttachmentGcpArgs struct {
	PrivateServiceConnectServiceAttachment pulumi.StringPtrInput `pulumi:"privateServiceConnectServiceAttachment"`
	Zone                                   pulumi.StringPtrInput `pulumi:"zone"`
}

func (PrivateLinkAttachmentGcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkAttachmentGcp)(nil)).Elem()
}

func (i PrivateLinkAttachmentGcpArgs) ToPrivateLinkAttachmentGcpOutput() PrivateLinkAttachmentGcpOutput {
	return i.ToPrivateLinkAttachmentGcpOutputWithContext(context.Background())
}

func (i PrivateLinkAttachmentGcpArgs) ToPrivateLinkAttachmentGcpOutputWithContext(ctx context.Context) PrivateLinkAttachmentGcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAttachmentGcpOutput)
}

func (i PrivateLinkAttachmentGcpArgs) ToOutput(ctx context.Context) pulumix.Output[PrivateLinkAttachmentGcp] {
	return pulumix.Output[PrivateLinkAttachmentGcp]{
		OutputState: i.ToPrivateLinkAttachmentGcpOutputWithContext(ctx).OutputState,
	}
}

// PrivateLinkAttachmentGcpArrayInput is an input type that accepts PrivateLinkAttachmentGcpArray and PrivateLinkAttachmentGcpArrayOutput values.
// You can construct a concrete instance of `PrivateLinkAttachmentGcpArrayInput` via:
//
//	PrivateLinkAttachmentGcpArray{ PrivateLinkAttachmentGcpArgs{...} }
type PrivateLinkAttachmentGcpArrayInput interface {
	pulumi.Input

	ToPrivateLinkAttachmentGcpArrayOutput() PrivateLinkAttachmentGcpArrayOutput
	ToPrivateLinkAttachmentGcpArrayOutputWithContext(context.Context) PrivateLinkAttachmentGcpArrayOutput
}

type PrivateLinkAttachmentGcpArray []PrivateLinkAttachmentGcpInput

func (PrivateLinkAttachmentGcpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateLinkAttachmentGcp)(nil)).Elem()
}

func (i PrivateLinkAttachmentGcpArray) ToPrivateLinkAttachmentGcpArrayOutput() PrivateLinkAttachmentGcpArrayOutput {
	return i.ToPrivateLinkAttachmentGcpArrayOutputWithContext(context.Background())
}

func (i PrivateLinkAttachmentGcpArray) ToPrivateLinkAttachmentGcpArrayOutputWithContext(ctx context.Context) PrivateLinkAttachmentGcpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAttachmentGcpArrayOutput)
}

func (i PrivateLinkAttachmentGcpArray) ToOutput(ctx context.Context) pulumix.Output[[]PrivateLinkAttachmentGcp] {
	return pulumix.Output[[]PrivateLinkAttachmentGcp]{
		OutputState: i.ToPrivateLinkAttachmentGcpArrayOutputWithContext(ctx).OutputState,
	}
}

type PrivateLinkAttachmentGcpOutput struct{ *pulumi.OutputState }

func (PrivateLinkAttachmentGcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkAttachmentGcp)(nil)).Elem()
}

func (o PrivateLinkAttachmentGcpOutput) ToPrivateLinkAttachmentGcpOutput() PrivateLinkAttachmentGcpOutput {
	return o
}

func (o PrivateLinkAttachmentGcpOutput) ToPrivateLinkAttachmentGcpOutputWithContext(ctx context.Context) PrivateLinkAttachmentGcpOutput {
	return o
}

func (o PrivateLinkAttachmentGcpOutput) ToOutput(ctx context.Context) pulumix.Output[PrivateLinkAttachmentGcp] {
	return pulumix.Output[PrivateLinkAttachmentGcp]{
		OutputState: o.OutputState,
	}
}

func (o PrivateLinkAttachmentGcpOutput) PrivateServiceConnectServiceAttachment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkAttachmentGcp) *string { return v.PrivateServiceConnectServiceAttachment }).(pulumi.StringPtrOutput)
}

func (o PrivateLinkAttachmentGcpOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkAttachmentGcp) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type PrivateLinkAttachmentGcpArrayOutput struct{ *pulumi.OutputState }

func (PrivateLinkAttachmentGcpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateLinkAttachmentGcp)(nil)).Elem()
}

func (o PrivateLinkAttachmentGcpArrayOutput) ToPrivateLinkAttachmentGcpArrayOutput() PrivateLinkAttachmentGcpArrayOutput {
	return o
}

func (o PrivateLinkAttachmentGcpArrayOutput) ToPrivateLinkAttachmentGcpArrayOutputWithContext(ctx context.Context) PrivateLinkAttachmentGcpArrayOutput {
	return o
}

func (o PrivateLinkAttachmentGcpArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PrivateLinkAttachmentGcp] {
	return pulumix.Output[[]PrivateLinkAttachmentGcp]{
		OutputState: o.OutputState,
	}
}

func (o PrivateLinkAttachmentGcpArrayOutput) Index(i pulumi.IntInput) PrivateLinkAttachmentGcpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateLinkAttachmentGcp {
		return vs[0].([]PrivateLinkAttachmentGcp)[vs[1].(int)]
	}).(PrivateLinkAttachmentGcpOutput)
}

type SchemaCredentials struct {
	// The Schema Registry API Key.
	Key    string `pulumi:"key"`
	Secret string `pulumi:"secret"`
}

// SchemaCredentialsInput is an input type that accepts SchemaCredentialsArgs and SchemaCredentialsOutput values.
// You can construct a concrete instance of `SchemaCredentialsInput` via:
//
//	SchemaCredentialsArgs{...}
type SchemaCredentialsInput interface {
	pulumi.Input

	ToSchemaCredentialsOutput() SchemaCredentialsOutput
	ToSchemaCredentialsOutputWithContext(context.Context) SchemaCredentialsOutput
}

type SchemaCredentialsArgs struct {
	// The Schema Registry API Key.
	Key    pulumi.StringInput `pulumi:"key"`
	Secret pulumi.StringInput `pulumi:"secret"`
}

func (SchemaCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaCredentials)(nil)).Elem()
}

func (i SchemaCredentialsArgs) ToSchemaCredentialsOutput() SchemaCredentialsOutput {
	return i.ToSchemaCredentialsOutputWithContext(context.Background())
}

func (i SchemaCredentialsArgs) ToSchemaCredentialsOutputWithContext(ctx context.Context) SchemaCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaCredentialsOutput)
}

func (i SchemaCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[SchemaCredentials] {
	return pulumix.Output[SchemaCredentials]{
		OutputState: i.ToSchemaCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i SchemaCredentialsArgs) ToSchemaCredentialsPtrOutput() SchemaCredentialsPtrOutput {
	return i.ToSchemaCredentialsPtrOutputWithContext(context.Background())
}

func (i SchemaCredentialsArgs) ToSchemaCredentialsPtrOutputWithContext(ctx context.Context) SchemaCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaCredentialsOutput).ToSchemaCredentialsPtrOutputWithContext(ctx)
}

// SchemaCredentialsPtrInput is an input type that accepts SchemaCredentialsArgs, SchemaCredentialsPtr and SchemaCredentialsPtrOutput values.
// You can construct a concrete instance of `SchemaCredentialsPtrInput` via:
//
//	        SchemaCredentialsArgs{...}
//
//	or:
//
//	        nil
type SchemaCredentialsPtrInput interface {
	pulumi.Input

	ToSchemaCredentialsPtrOutput() SchemaCredentialsPtrOutput
	ToSchemaCredentialsPtrOutputWithContext(context.Context) SchemaCredentialsPtrOutput
}

type schemaCredentialsPtrType SchemaCredentialsArgs

func SchemaCredentialsPtr(v *SchemaCredentialsArgs) SchemaCredentialsPtrInput {
	return (*schemaCredentialsPtrType)(v)
}

func (*schemaCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaCredentials)(nil)).Elem()
}

func (i *schemaCredentialsPtrType) ToSchemaCredentialsPtrOutput() SchemaCredentialsPtrOutput {
	return i.ToSchemaCredentialsPtrOutputWithContext(context.Background())
}

func (i *schemaCredentialsPtrType) ToSchemaCredentialsPtrOutputWithContext(ctx context.Context) SchemaCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaCredentialsPtrOutput)
}

func (i *schemaCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*SchemaCredentials] {
	return pulumix.Output[*SchemaCredentials]{
		OutputState: i.ToSchemaCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

type SchemaCredentialsOutput struct{ *pulumi.OutputState }

func (SchemaCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaCredentials)(nil)).Elem()
}

func (o SchemaCredentialsOutput) ToSchemaCredentialsOutput() SchemaCredentialsOutput {
	return o
}

func (o SchemaCredentialsOutput) ToSchemaCredentialsOutputWithContext(ctx context.Context) SchemaCredentialsOutput {
	return o
}

func (o SchemaCredentialsOutput) ToSchemaCredentialsPtrOutput() SchemaCredentialsPtrOutput {
	return o.ToSchemaCredentialsPtrOutputWithContext(context.Background())
}

func (o SchemaCredentialsOutput) ToSchemaCredentialsPtrOutputWithContext(ctx context.Context) SchemaCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchemaCredentials) *SchemaCredentials {
		return &v
	}).(SchemaCredentialsPtrOutput)
}

func (o SchemaCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[SchemaCredentials] {
	return pulumix.Output[SchemaCredentials]{
		OutputState: o.OutputState,
	}
}

// The Schema Registry API Key.
func (o SchemaCredentialsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaCredentials) string { return v.Key }).(pulumi.StringOutput)
}

func (o SchemaCredentialsOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaCredentials) string { return v.Secret }).(pulumi.StringOutput)
}

type SchemaCredentialsPtrOutput struct{ *pulumi.OutputState }

func (SchemaCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaCredentials)(nil)).Elem()
}

func (o SchemaCredentialsPtrOutput) ToSchemaCredentialsPtrOutput() SchemaCredentialsPtrOutput {
	return o
}

func (o SchemaCredentialsPtrOutput) ToSchemaCredentialsPtrOutputWithContext(ctx context.Context) SchemaCredentialsPtrOutput {
	return o
}

func (o SchemaCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SchemaCredentials] {
	return pulumix.Output[*SchemaCredentials]{
		OutputState: o.OutputState,
	}
}

func (o SchemaCredentialsPtrOutput) Elem() SchemaCredentialsOutput {
	return o.ApplyT(func(v *SchemaCredentials) SchemaCredentials {
		if v != nil {
			return *v
		}
		var ret SchemaCredentials
		return ret
	}).(SchemaCredentialsOutput)
}

// The Schema Registry API Key.
func (o SchemaCredentialsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

func (o SchemaCredentialsPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Secret
	}).(pulumi.StringPtrOutput)
}

type SchemaRegistryClusterConfigCredentials struct {
	// The Schema Registry API Key.
	Key    string `pulumi:"key"`
	Secret string `pulumi:"secret"`
}

// SchemaRegistryClusterConfigCredentialsInput is an input type that accepts SchemaRegistryClusterConfigCredentialsArgs and SchemaRegistryClusterConfigCredentialsOutput values.
// You can construct a concrete instance of `SchemaRegistryClusterConfigCredentialsInput` via:
//
//	SchemaRegistryClusterConfigCredentialsArgs{...}
type SchemaRegistryClusterConfigCredentialsInput interface {
	pulumi.Input

	ToSchemaRegistryClusterConfigCredentialsOutput() SchemaRegistryClusterConfigCredentialsOutput
	ToSchemaRegistryClusterConfigCredentialsOutputWithContext(context.Context) SchemaRegistryClusterConfigCredentialsOutput
}

type SchemaRegistryClusterConfigCredentialsArgs struct {
	// The Schema Registry API Key.
	Key    pulumi.StringInput `pulumi:"key"`
	Secret pulumi.StringInput `pulumi:"secret"`
}

func (SchemaRegistryClusterConfigCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaRegistryClusterConfigCredentials)(nil)).Elem()
}

func (i SchemaRegistryClusterConfigCredentialsArgs) ToSchemaRegistryClusterConfigCredentialsOutput() SchemaRegistryClusterConfigCredentialsOutput {
	return i.ToSchemaRegistryClusterConfigCredentialsOutputWithContext(context.Background())
}

func (i SchemaRegistryClusterConfigCredentialsArgs) ToSchemaRegistryClusterConfigCredentialsOutputWithContext(ctx context.Context) SchemaRegistryClusterConfigCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryClusterConfigCredentialsOutput)
}

func (i SchemaRegistryClusterConfigCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[SchemaRegistryClusterConfigCredentials] {
	return pulumix.Output[SchemaRegistryClusterConfigCredentials]{
		OutputState: i.ToSchemaRegistryClusterConfigCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i SchemaRegistryClusterConfigCredentialsArgs) ToSchemaRegistryClusterConfigCredentialsPtrOutput() SchemaRegistryClusterConfigCredentialsPtrOutput {
	return i.ToSchemaRegistryClusterConfigCredentialsPtrOutputWithContext(context.Background())
}

func (i SchemaRegistryClusterConfigCredentialsArgs) ToSchemaRegistryClusterConfigCredentialsPtrOutputWithContext(ctx context.Context) SchemaRegistryClusterConfigCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryClusterConfigCredentialsOutput).ToSchemaRegistryClusterConfigCredentialsPtrOutputWithContext(ctx)
}

// SchemaRegistryClusterConfigCredentialsPtrInput is an input type that accepts SchemaRegistryClusterConfigCredentialsArgs, SchemaRegistryClusterConfigCredentialsPtr and SchemaRegistryClusterConfigCredentialsPtrOutput values.
// You can construct a concrete instance of `SchemaRegistryClusterConfigCredentialsPtrInput` via:
//
//	        SchemaRegistryClusterConfigCredentialsArgs{...}
//
//	or:
//
//	        nil
type SchemaRegistryClusterConfigCredentialsPtrInput interface {
	pulumi.Input

	ToSchemaRegistryClusterConfigCredentialsPtrOutput() SchemaRegistryClusterConfigCredentialsPtrOutput
	ToSchemaRegistryClusterConfigCredentialsPtrOutputWithContext(context.Context) SchemaRegistryClusterConfigCredentialsPtrOutput
}

type schemaRegistryClusterConfigCredentialsPtrType SchemaRegistryClusterConfigCredentialsArgs

func SchemaRegistryClusterConfigCredentialsPtr(v *SchemaRegistryClusterConfigCredentialsArgs) SchemaRegistryClusterConfigCredentialsPtrInput {
	return (*schemaRegistryClusterConfigCredentialsPtrType)(v)
}

func (*schemaRegistryClusterConfigCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaRegistryClusterConfigCredentials)(nil)).Elem()
}

func (i *schemaRegistryClusterConfigCredentialsPtrType) ToSchemaRegistryClusterConfigCredentialsPtrOutput() SchemaRegistryClusterConfigCredentialsPtrOutput {
	return i.ToSchemaRegistryClusterConfigCredentialsPtrOutputWithContext(context.Background())
}

func (i *schemaRegistryClusterConfigCredentialsPtrType) ToSchemaRegistryClusterConfigCredentialsPtrOutputWithContext(ctx context.Context) SchemaRegistryClusterConfigCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryClusterConfigCredentialsPtrOutput)
}

func (i *schemaRegistryClusterConfigCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*SchemaRegistryClusterConfigCredentials] {
	return pulumix.Output[*SchemaRegistryClusterConfigCredentials]{
		OutputState: i.ToSchemaRegistryClusterConfigCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

type SchemaRegistryClusterConfigCredentialsOutput struct{ *pulumi.OutputState }

func (SchemaRegistryClusterConfigCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaRegistryClusterConfigCredentials)(nil)).Elem()
}

func (o SchemaRegistryClusterConfigCredentialsOutput) ToSchemaRegistryClusterConfigCredentialsOutput() SchemaRegistryClusterConfigCredentialsOutput {
	return o
}

func (o SchemaRegistryClusterConfigCredentialsOutput) ToSchemaRegistryClusterConfigCredentialsOutputWithContext(ctx context.Context) SchemaRegistryClusterConfigCredentialsOutput {
	return o
}

func (o SchemaRegistryClusterConfigCredentialsOutput) ToSchemaRegistryClusterConfigCredentialsPtrOutput() SchemaRegistryClusterConfigCredentialsPtrOutput {
	return o.ToSchemaRegistryClusterConfigCredentialsPtrOutputWithContext(context.Background())
}

func (o SchemaRegistryClusterConfigCredentialsOutput) ToSchemaRegistryClusterConfigCredentialsPtrOutputWithContext(ctx context.Context) SchemaRegistryClusterConfigCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchemaRegistryClusterConfigCredentials) *SchemaRegistryClusterConfigCredentials {
		return &v
	}).(SchemaRegistryClusterConfigCredentialsPtrOutput)
}

func (o SchemaRegistryClusterConfigCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[SchemaRegistryClusterConfigCredentials] {
	return pulumix.Output[SchemaRegistryClusterConfigCredentials]{
		OutputState: o.OutputState,
	}
}

// The Schema Registry API Key.
func (o SchemaRegistryClusterConfigCredentialsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaRegistryClusterConfigCredentials) string { return v.Key }).(pulumi.StringOutput)
}

func (o SchemaRegistryClusterConfigCredentialsOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaRegistryClusterConfigCredentials) string { return v.Secret }).(pulumi.StringOutput)
}

type SchemaRegistryClusterConfigCredentialsPtrOutput struct{ *pulumi.OutputState }

func (SchemaRegistryClusterConfigCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaRegistryClusterConfigCredentials)(nil)).Elem()
}

func (o SchemaRegistryClusterConfigCredentialsPtrOutput) ToSchemaRegistryClusterConfigCredentialsPtrOutput() SchemaRegistryClusterConfigCredentialsPtrOutput {
	return o
}

func (o SchemaRegistryClusterConfigCredentialsPtrOutput) ToSchemaRegistryClusterConfigCredentialsPtrOutputWithContext(ctx context.Context) SchemaRegistryClusterConfigCredentialsPtrOutput {
	return o
}

func (o SchemaRegistryClusterConfigCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SchemaRegistryClusterConfigCredentials] {
	return pulumix.Output[*SchemaRegistryClusterConfigCredentials]{
		OutputState: o.OutputState,
	}
}

func (o SchemaRegistryClusterConfigCredentialsPtrOutput) Elem() SchemaRegistryClusterConfigCredentialsOutput {
	return o.ApplyT(func(v *SchemaRegistryClusterConfigCredentials) SchemaRegistryClusterConfigCredentials {
		if v != nil {
			return *v
		}
		var ret SchemaRegistryClusterConfigCredentials
		return ret
	}).(SchemaRegistryClusterConfigCredentialsOutput)
}

// The Schema Registry API Key.
func (o SchemaRegistryClusterConfigCredentialsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaRegistryClusterConfigCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

func (o SchemaRegistryClusterConfigCredentialsPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaRegistryClusterConfigCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Secret
	}).(pulumi.StringPtrOutput)
}

type SchemaRegistryClusterConfigSchemaRegistryCluster struct {
	// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
	Id string `pulumi:"id"`
}

// SchemaRegistryClusterConfigSchemaRegistryClusterInput is an input type that accepts SchemaRegistryClusterConfigSchemaRegistryClusterArgs and SchemaRegistryClusterConfigSchemaRegistryClusterOutput values.
// You can construct a concrete instance of `SchemaRegistryClusterConfigSchemaRegistryClusterInput` via:
//
//	SchemaRegistryClusterConfigSchemaRegistryClusterArgs{...}
type SchemaRegistryClusterConfigSchemaRegistryClusterInput interface {
	pulumi.Input

	ToSchemaRegistryClusterConfigSchemaRegistryClusterOutput() SchemaRegistryClusterConfigSchemaRegistryClusterOutput
	ToSchemaRegistryClusterConfigSchemaRegistryClusterOutputWithContext(context.Context) SchemaRegistryClusterConfigSchemaRegistryClusterOutput
}

type SchemaRegistryClusterConfigSchemaRegistryClusterArgs struct {
	// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (SchemaRegistryClusterConfigSchemaRegistryClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaRegistryClusterConfigSchemaRegistryCluster)(nil)).Elem()
}

func (i SchemaRegistryClusterConfigSchemaRegistryClusterArgs) ToSchemaRegistryClusterConfigSchemaRegistryClusterOutput() SchemaRegistryClusterConfigSchemaRegistryClusterOutput {
	return i.ToSchemaRegistryClusterConfigSchemaRegistryClusterOutputWithContext(context.Background())
}

func (i SchemaRegistryClusterConfigSchemaRegistryClusterArgs) ToSchemaRegistryClusterConfigSchemaRegistryClusterOutputWithContext(ctx context.Context) SchemaRegistryClusterConfigSchemaRegistryClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryClusterConfigSchemaRegistryClusterOutput)
}

func (i SchemaRegistryClusterConfigSchemaRegistryClusterArgs) ToOutput(ctx context.Context) pulumix.Output[SchemaRegistryClusterConfigSchemaRegistryCluster] {
	return pulumix.Output[SchemaRegistryClusterConfigSchemaRegistryCluster]{
		OutputState: i.ToSchemaRegistryClusterConfigSchemaRegistryClusterOutputWithContext(ctx).OutputState,
	}
}

func (i SchemaRegistryClusterConfigSchemaRegistryClusterArgs) ToSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput() SchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput {
	return i.ToSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (i SchemaRegistryClusterConfigSchemaRegistryClusterArgs) ToSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) SchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryClusterConfigSchemaRegistryClusterOutput).ToSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutputWithContext(ctx)
}

// SchemaRegistryClusterConfigSchemaRegistryClusterPtrInput is an input type that accepts SchemaRegistryClusterConfigSchemaRegistryClusterArgs, SchemaRegistryClusterConfigSchemaRegistryClusterPtr and SchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput values.
// You can construct a concrete instance of `SchemaRegistryClusterConfigSchemaRegistryClusterPtrInput` via:
//
//	        SchemaRegistryClusterConfigSchemaRegistryClusterArgs{...}
//
//	or:
//
//	        nil
type SchemaRegistryClusterConfigSchemaRegistryClusterPtrInput interface {
	pulumi.Input

	ToSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput() SchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput
	ToSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutputWithContext(context.Context) SchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput
}

type schemaRegistryClusterConfigSchemaRegistryClusterPtrType SchemaRegistryClusterConfigSchemaRegistryClusterArgs

func SchemaRegistryClusterConfigSchemaRegistryClusterPtr(v *SchemaRegistryClusterConfigSchemaRegistryClusterArgs) SchemaRegistryClusterConfigSchemaRegistryClusterPtrInput {
	return (*schemaRegistryClusterConfigSchemaRegistryClusterPtrType)(v)
}

func (*schemaRegistryClusterConfigSchemaRegistryClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaRegistryClusterConfigSchemaRegistryCluster)(nil)).Elem()
}

func (i *schemaRegistryClusterConfigSchemaRegistryClusterPtrType) ToSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput() SchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput {
	return i.ToSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (i *schemaRegistryClusterConfigSchemaRegistryClusterPtrType) ToSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) SchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput)
}

func (i *schemaRegistryClusterConfigSchemaRegistryClusterPtrType) ToOutput(ctx context.Context) pulumix.Output[*SchemaRegistryClusterConfigSchemaRegistryCluster] {
	return pulumix.Output[*SchemaRegistryClusterConfigSchemaRegistryCluster]{
		OutputState: i.ToSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutputWithContext(ctx).OutputState,
	}
}

type SchemaRegistryClusterConfigSchemaRegistryClusterOutput struct{ *pulumi.OutputState }

func (SchemaRegistryClusterConfigSchemaRegistryClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaRegistryClusterConfigSchemaRegistryCluster)(nil)).Elem()
}

func (o SchemaRegistryClusterConfigSchemaRegistryClusterOutput) ToSchemaRegistryClusterConfigSchemaRegistryClusterOutput() SchemaRegistryClusterConfigSchemaRegistryClusterOutput {
	return o
}

func (o SchemaRegistryClusterConfigSchemaRegistryClusterOutput) ToSchemaRegistryClusterConfigSchemaRegistryClusterOutputWithContext(ctx context.Context) SchemaRegistryClusterConfigSchemaRegistryClusterOutput {
	return o
}

func (o SchemaRegistryClusterConfigSchemaRegistryClusterOutput) ToSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput() SchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput {
	return o.ToSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (o SchemaRegistryClusterConfigSchemaRegistryClusterOutput) ToSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) SchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchemaRegistryClusterConfigSchemaRegistryCluster) *SchemaRegistryClusterConfigSchemaRegistryCluster {
		return &v
	}).(SchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput)
}

func (o SchemaRegistryClusterConfigSchemaRegistryClusterOutput) ToOutput(ctx context.Context) pulumix.Output[SchemaRegistryClusterConfigSchemaRegistryCluster] {
	return pulumix.Output[SchemaRegistryClusterConfigSchemaRegistryCluster]{
		OutputState: o.OutputState,
	}
}

// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
func (o SchemaRegistryClusterConfigSchemaRegistryClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaRegistryClusterConfigSchemaRegistryCluster) string { return v.Id }).(pulumi.StringOutput)
}

type SchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput struct{ *pulumi.OutputState }

func (SchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaRegistryClusterConfigSchemaRegistryCluster)(nil)).Elem()
}

func (o SchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput) ToSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput() SchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput {
	return o
}

func (o SchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput) ToSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) SchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput {
	return o
}

func (o SchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SchemaRegistryClusterConfigSchemaRegistryCluster] {
	return pulumix.Output[*SchemaRegistryClusterConfigSchemaRegistryCluster]{
		OutputState: o.OutputState,
	}
}

func (o SchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput) Elem() SchemaRegistryClusterConfigSchemaRegistryClusterOutput {
	return o.ApplyT(func(v *SchemaRegistryClusterConfigSchemaRegistryCluster) SchemaRegistryClusterConfigSchemaRegistryCluster {
		if v != nil {
			return *v
		}
		var ret SchemaRegistryClusterConfigSchemaRegistryCluster
		return ret
	}).(SchemaRegistryClusterConfigSchemaRegistryClusterOutput)
}

// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
func (o SchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaRegistryClusterConfigSchemaRegistryCluster) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type SchemaRegistryClusterEnvironment struct {
	// The ID of the Schema Registry region that the Schema Registry cluster belongs to, for example, `sgreg-1`. See [Schema Registry Regions](https://docs.confluent.io/cloud/current/stream-governance/packages.html#stream-governance-regions) to find a corresponding region ID based on desired cloud provider region and types of the billing package.
	Id string `pulumi:"id"`
}

// SchemaRegistryClusterEnvironmentInput is an input type that accepts SchemaRegistryClusterEnvironmentArgs and SchemaRegistryClusterEnvironmentOutput values.
// You can construct a concrete instance of `SchemaRegistryClusterEnvironmentInput` via:
//
//	SchemaRegistryClusterEnvironmentArgs{...}
type SchemaRegistryClusterEnvironmentInput interface {
	pulumi.Input

	ToSchemaRegistryClusterEnvironmentOutput() SchemaRegistryClusterEnvironmentOutput
	ToSchemaRegistryClusterEnvironmentOutputWithContext(context.Context) SchemaRegistryClusterEnvironmentOutput
}

type SchemaRegistryClusterEnvironmentArgs struct {
	// The ID of the Schema Registry region that the Schema Registry cluster belongs to, for example, `sgreg-1`. See [Schema Registry Regions](https://docs.confluent.io/cloud/current/stream-governance/packages.html#stream-governance-regions) to find a corresponding region ID based on desired cloud provider region and types of the billing package.
	Id pulumi.StringInput `pulumi:"id"`
}

func (SchemaRegistryClusterEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaRegistryClusterEnvironment)(nil)).Elem()
}

func (i SchemaRegistryClusterEnvironmentArgs) ToSchemaRegistryClusterEnvironmentOutput() SchemaRegistryClusterEnvironmentOutput {
	return i.ToSchemaRegistryClusterEnvironmentOutputWithContext(context.Background())
}

func (i SchemaRegistryClusterEnvironmentArgs) ToSchemaRegistryClusterEnvironmentOutputWithContext(ctx context.Context) SchemaRegistryClusterEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryClusterEnvironmentOutput)
}

func (i SchemaRegistryClusterEnvironmentArgs) ToOutput(ctx context.Context) pulumix.Output[SchemaRegistryClusterEnvironment] {
	return pulumix.Output[SchemaRegistryClusterEnvironment]{
		OutputState: i.ToSchemaRegistryClusterEnvironmentOutputWithContext(ctx).OutputState,
	}
}

func (i SchemaRegistryClusterEnvironmentArgs) ToSchemaRegistryClusterEnvironmentPtrOutput() SchemaRegistryClusterEnvironmentPtrOutput {
	return i.ToSchemaRegistryClusterEnvironmentPtrOutputWithContext(context.Background())
}

func (i SchemaRegistryClusterEnvironmentArgs) ToSchemaRegistryClusterEnvironmentPtrOutputWithContext(ctx context.Context) SchemaRegistryClusterEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryClusterEnvironmentOutput).ToSchemaRegistryClusterEnvironmentPtrOutputWithContext(ctx)
}

// SchemaRegistryClusterEnvironmentPtrInput is an input type that accepts SchemaRegistryClusterEnvironmentArgs, SchemaRegistryClusterEnvironmentPtr and SchemaRegistryClusterEnvironmentPtrOutput values.
// You can construct a concrete instance of `SchemaRegistryClusterEnvironmentPtrInput` via:
//
//	        SchemaRegistryClusterEnvironmentArgs{...}
//
//	or:
//
//	        nil
type SchemaRegistryClusterEnvironmentPtrInput interface {
	pulumi.Input

	ToSchemaRegistryClusterEnvironmentPtrOutput() SchemaRegistryClusterEnvironmentPtrOutput
	ToSchemaRegistryClusterEnvironmentPtrOutputWithContext(context.Context) SchemaRegistryClusterEnvironmentPtrOutput
}

type schemaRegistryClusterEnvironmentPtrType SchemaRegistryClusterEnvironmentArgs

func SchemaRegistryClusterEnvironmentPtr(v *SchemaRegistryClusterEnvironmentArgs) SchemaRegistryClusterEnvironmentPtrInput {
	return (*schemaRegistryClusterEnvironmentPtrType)(v)
}

func (*schemaRegistryClusterEnvironmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaRegistryClusterEnvironment)(nil)).Elem()
}

func (i *schemaRegistryClusterEnvironmentPtrType) ToSchemaRegistryClusterEnvironmentPtrOutput() SchemaRegistryClusterEnvironmentPtrOutput {
	return i.ToSchemaRegistryClusterEnvironmentPtrOutputWithContext(context.Background())
}

func (i *schemaRegistryClusterEnvironmentPtrType) ToSchemaRegistryClusterEnvironmentPtrOutputWithContext(ctx context.Context) SchemaRegistryClusterEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryClusterEnvironmentPtrOutput)
}

func (i *schemaRegistryClusterEnvironmentPtrType) ToOutput(ctx context.Context) pulumix.Output[*SchemaRegistryClusterEnvironment] {
	return pulumix.Output[*SchemaRegistryClusterEnvironment]{
		OutputState: i.ToSchemaRegistryClusterEnvironmentPtrOutputWithContext(ctx).OutputState,
	}
}

type SchemaRegistryClusterEnvironmentOutput struct{ *pulumi.OutputState }

func (SchemaRegistryClusterEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaRegistryClusterEnvironment)(nil)).Elem()
}

func (o SchemaRegistryClusterEnvironmentOutput) ToSchemaRegistryClusterEnvironmentOutput() SchemaRegistryClusterEnvironmentOutput {
	return o
}

func (o SchemaRegistryClusterEnvironmentOutput) ToSchemaRegistryClusterEnvironmentOutputWithContext(ctx context.Context) SchemaRegistryClusterEnvironmentOutput {
	return o
}

func (o SchemaRegistryClusterEnvironmentOutput) ToSchemaRegistryClusterEnvironmentPtrOutput() SchemaRegistryClusterEnvironmentPtrOutput {
	return o.ToSchemaRegistryClusterEnvironmentPtrOutputWithContext(context.Background())
}

func (o SchemaRegistryClusterEnvironmentOutput) ToSchemaRegistryClusterEnvironmentPtrOutputWithContext(ctx context.Context) SchemaRegistryClusterEnvironmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchemaRegistryClusterEnvironment) *SchemaRegistryClusterEnvironment {
		return &v
	}).(SchemaRegistryClusterEnvironmentPtrOutput)
}

func (o SchemaRegistryClusterEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[SchemaRegistryClusterEnvironment] {
	return pulumix.Output[SchemaRegistryClusterEnvironment]{
		OutputState: o.OutputState,
	}
}

// The ID of the Schema Registry region that the Schema Registry cluster belongs to, for example, `sgreg-1`. See [Schema Registry Regions](https://docs.confluent.io/cloud/current/stream-governance/packages.html#stream-governance-regions) to find a corresponding region ID based on desired cloud provider region and types of the billing package.
func (o SchemaRegistryClusterEnvironmentOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaRegistryClusterEnvironment) string { return v.Id }).(pulumi.StringOutput)
}

type SchemaRegistryClusterEnvironmentPtrOutput struct{ *pulumi.OutputState }

func (SchemaRegistryClusterEnvironmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaRegistryClusterEnvironment)(nil)).Elem()
}

func (o SchemaRegistryClusterEnvironmentPtrOutput) ToSchemaRegistryClusterEnvironmentPtrOutput() SchemaRegistryClusterEnvironmentPtrOutput {
	return o
}

func (o SchemaRegistryClusterEnvironmentPtrOutput) ToSchemaRegistryClusterEnvironmentPtrOutputWithContext(ctx context.Context) SchemaRegistryClusterEnvironmentPtrOutput {
	return o
}

func (o SchemaRegistryClusterEnvironmentPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SchemaRegistryClusterEnvironment] {
	return pulumix.Output[*SchemaRegistryClusterEnvironment]{
		OutputState: o.OutputState,
	}
}

func (o SchemaRegistryClusterEnvironmentPtrOutput) Elem() SchemaRegistryClusterEnvironmentOutput {
	return o.ApplyT(func(v *SchemaRegistryClusterEnvironment) SchemaRegistryClusterEnvironment {
		if v != nil {
			return *v
		}
		var ret SchemaRegistryClusterEnvironment
		return ret
	}).(SchemaRegistryClusterEnvironmentOutput)
}

// The ID of the Schema Registry region that the Schema Registry cluster belongs to, for example, `sgreg-1`. See [Schema Registry Regions](https://docs.confluent.io/cloud/current/stream-governance/packages.html#stream-governance-regions) to find a corresponding region ID based on desired cloud provider region and types of the billing package.
func (o SchemaRegistryClusterEnvironmentPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaRegistryClusterEnvironment) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type SchemaRegistryClusterModeCredentials struct {
	// The Schema Registry API Key.
	Key    string `pulumi:"key"`
	Secret string `pulumi:"secret"`
}

// SchemaRegistryClusterModeCredentialsInput is an input type that accepts SchemaRegistryClusterModeCredentialsArgs and SchemaRegistryClusterModeCredentialsOutput values.
// You can construct a concrete instance of `SchemaRegistryClusterModeCredentialsInput` via:
//
//	SchemaRegistryClusterModeCredentialsArgs{...}
type SchemaRegistryClusterModeCredentialsInput interface {
	pulumi.Input

	ToSchemaRegistryClusterModeCredentialsOutput() SchemaRegistryClusterModeCredentialsOutput
	ToSchemaRegistryClusterModeCredentialsOutputWithContext(context.Context) SchemaRegistryClusterModeCredentialsOutput
}

type SchemaRegistryClusterModeCredentialsArgs struct {
	// The Schema Registry API Key.
	Key    pulumi.StringInput `pulumi:"key"`
	Secret pulumi.StringInput `pulumi:"secret"`
}

func (SchemaRegistryClusterModeCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaRegistryClusterModeCredentials)(nil)).Elem()
}

func (i SchemaRegistryClusterModeCredentialsArgs) ToSchemaRegistryClusterModeCredentialsOutput() SchemaRegistryClusterModeCredentialsOutput {
	return i.ToSchemaRegistryClusterModeCredentialsOutputWithContext(context.Background())
}

func (i SchemaRegistryClusterModeCredentialsArgs) ToSchemaRegistryClusterModeCredentialsOutputWithContext(ctx context.Context) SchemaRegistryClusterModeCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryClusterModeCredentialsOutput)
}

func (i SchemaRegistryClusterModeCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[SchemaRegistryClusterModeCredentials] {
	return pulumix.Output[SchemaRegistryClusterModeCredentials]{
		OutputState: i.ToSchemaRegistryClusterModeCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i SchemaRegistryClusterModeCredentialsArgs) ToSchemaRegistryClusterModeCredentialsPtrOutput() SchemaRegistryClusterModeCredentialsPtrOutput {
	return i.ToSchemaRegistryClusterModeCredentialsPtrOutputWithContext(context.Background())
}

func (i SchemaRegistryClusterModeCredentialsArgs) ToSchemaRegistryClusterModeCredentialsPtrOutputWithContext(ctx context.Context) SchemaRegistryClusterModeCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryClusterModeCredentialsOutput).ToSchemaRegistryClusterModeCredentialsPtrOutputWithContext(ctx)
}

// SchemaRegistryClusterModeCredentialsPtrInput is an input type that accepts SchemaRegistryClusterModeCredentialsArgs, SchemaRegistryClusterModeCredentialsPtr and SchemaRegistryClusterModeCredentialsPtrOutput values.
// You can construct a concrete instance of `SchemaRegistryClusterModeCredentialsPtrInput` via:
//
//	        SchemaRegistryClusterModeCredentialsArgs{...}
//
//	or:
//
//	        nil
type SchemaRegistryClusterModeCredentialsPtrInput interface {
	pulumi.Input

	ToSchemaRegistryClusterModeCredentialsPtrOutput() SchemaRegistryClusterModeCredentialsPtrOutput
	ToSchemaRegistryClusterModeCredentialsPtrOutputWithContext(context.Context) SchemaRegistryClusterModeCredentialsPtrOutput
}

type schemaRegistryClusterModeCredentialsPtrType SchemaRegistryClusterModeCredentialsArgs

func SchemaRegistryClusterModeCredentialsPtr(v *SchemaRegistryClusterModeCredentialsArgs) SchemaRegistryClusterModeCredentialsPtrInput {
	return (*schemaRegistryClusterModeCredentialsPtrType)(v)
}

func (*schemaRegistryClusterModeCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaRegistryClusterModeCredentials)(nil)).Elem()
}

func (i *schemaRegistryClusterModeCredentialsPtrType) ToSchemaRegistryClusterModeCredentialsPtrOutput() SchemaRegistryClusterModeCredentialsPtrOutput {
	return i.ToSchemaRegistryClusterModeCredentialsPtrOutputWithContext(context.Background())
}

func (i *schemaRegistryClusterModeCredentialsPtrType) ToSchemaRegistryClusterModeCredentialsPtrOutputWithContext(ctx context.Context) SchemaRegistryClusterModeCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryClusterModeCredentialsPtrOutput)
}

func (i *schemaRegistryClusterModeCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*SchemaRegistryClusterModeCredentials] {
	return pulumix.Output[*SchemaRegistryClusterModeCredentials]{
		OutputState: i.ToSchemaRegistryClusterModeCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

type SchemaRegistryClusterModeCredentialsOutput struct{ *pulumi.OutputState }

func (SchemaRegistryClusterModeCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaRegistryClusterModeCredentials)(nil)).Elem()
}

func (o SchemaRegistryClusterModeCredentialsOutput) ToSchemaRegistryClusterModeCredentialsOutput() SchemaRegistryClusterModeCredentialsOutput {
	return o
}

func (o SchemaRegistryClusterModeCredentialsOutput) ToSchemaRegistryClusterModeCredentialsOutputWithContext(ctx context.Context) SchemaRegistryClusterModeCredentialsOutput {
	return o
}

func (o SchemaRegistryClusterModeCredentialsOutput) ToSchemaRegistryClusterModeCredentialsPtrOutput() SchemaRegistryClusterModeCredentialsPtrOutput {
	return o.ToSchemaRegistryClusterModeCredentialsPtrOutputWithContext(context.Background())
}

func (o SchemaRegistryClusterModeCredentialsOutput) ToSchemaRegistryClusterModeCredentialsPtrOutputWithContext(ctx context.Context) SchemaRegistryClusterModeCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchemaRegistryClusterModeCredentials) *SchemaRegistryClusterModeCredentials {
		return &v
	}).(SchemaRegistryClusterModeCredentialsPtrOutput)
}

func (o SchemaRegistryClusterModeCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[SchemaRegistryClusterModeCredentials] {
	return pulumix.Output[SchemaRegistryClusterModeCredentials]{
		OutputState: o.OutputState,
	}
}

// The Schema Registry API Key.
func (o SchemaRegistryClusterModeCredentialsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaRegistryClusterModeCredentials) string { return v.Key }).(pulumi.StringOutput)
}

func (o SchemaRegistryClusterModeCredentialsOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaRegistryClusterModeCredentials) string { return v.Secret }).(pulumi.StringOutput)
}

type SchemaRegistryClusterModeCredentialsPtrOutput struct{ *pulumi.OutputState }

func (SchemaRegistryClusterModeCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaRegistryClusterModeCredentials)(nil)).Elem()
}

func (o SchemaRegistryClusterModeCredentialsPtrOutput) ToSchemaRegistryClusterModeCredentialsPtrOutput() SchemaRegistryClusterModeCredentialsPtrOutput {
	return o
}

func (o SchemaRegistryClusterModeCredentialsPtrOutput) ToSchemaRegistryClusterModeCredentialsPtrOutputWithContext(ctx context.Context) SchemaRegistryClusterModeCredentialsPtrOutput {
	return o
}

func (o SchemaRegistryClusterModeCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SchemaRegistryClusterModeCredentials] {
	return pulumix.Output[*SchemaRegistryClusterModeCredentials]{
		OutputState: o.OutputState,
	}
}

func (o SchemaRegistryClusterModeCredentialsPtrOutput) Elem() SchemaRegistryClusterModeCredentialsOutput {
	return o.ApplyT(func(v *SchemaRegistryClusterModeCredentials) SchemaRegistryClusterModeCredentials {
		if v != nil {
			return *v
		}
		var ret SchemaRegistryClusterModeCredentials
		return ret
	}).(SchemaRegistryClusterModeCredentialsOutput)
}

// The Schema Registry API Key.
func (o SchemaRegistryClusterModeCredentialsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaRegistryClusterModeCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

func (o SchemaRegistryClusterModeCredentialsPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaRegistryClusterModeCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Secret
	}).(pulumi.StringPtrOutput)
}

type SchemaRegistryClusterModeSchemaRegistryCluster struct {
	// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
	Id string `pulumi:"id"`
}

// SchemaRegistryClusterModeSchemaRegistryClusterInput is an input type that accepts SchemaRegistryClusterModeSchemaRegistryClusterArgs and SchemaRegistryClusterModeSchemaRegistryClusterOutput values.
// You can construct a concrete instance of `SchemaRegistryClusterModeSchemaRegistryClusterInput` via:
//
//	SchemaRegistryClusterModeSchemaRegistryClusterArgs{...}
type SchemaRegistryClusterModeSchemaRegistryClusterInput interface {
	pulumi.Input

	ToSchemaRegistryClusterModeSchemaRegistryClusterOutput() SchemaRegistryClusterModeSchemaRegistryClusterOutput
	ToSchemaRegistryClusterModeSchemaRegistryClusterOutputWithContext(context.Context) SchemaRegistryClusterModeSchemaRegistryClusterOutput
}

type SchemaRegistryClusterModeSchemaRegistryClusterArgs struct {
	// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (SchemaRegistryClusterModeSchemaRegistryClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaRegistryClusterModeSchemaRegistryCluster)(nil)).Elem()
}

func (i SchemaRegistryClusterModeSchemaRegistryClusterArgs) ToSchemaRegistryClusterModeSchemaRegistryClusterOutput() SchemaRegistryClusterModeSchemaRegistryClusterOutput {
	return i.ToSchemaRegistryClusterModeSchemaRegistryClusterOutputWithContext(context.Background())
}

func (i SchemaRegistryClusterModeSchemaRegistryClusterArgs) ToSchemaRegistryClusterModeSchemaRegistryClusterOutputWithContext(ctx context.Context) SchemaRegistryClusterModeSchemaRegistryClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryClusterModeSchemaRegistryClusterOutput)
}

func (i SchemaRegistryClusterModeSchemaRegistryClusterArgs) ToOutput(ctx context.Context) pulumix.Output[SchemaRegistryClusterModeSchemaRegistryCluster] {
	return pulumix.Output[SchemaRegistryClusterModeSchemaRegistryCluster]{
		OutputState: i.ToSchemaRegistryClusterModeSchemaRegistryClusterOutputWithContext(ctx).OutputState,
	}
}

func (i SchemaRegistryClusterModeSchemaRegistryClusterArgs) ToSchemaRegistryClusterModeSchemaRegistryClusterPtrOutput() SchemaRegistryClusterModeSchemaRegistryClusterPtrOutput {
	return i.ToSchemaRegistryClusterModeSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (i SchemaRegistryClusterModeSchemaRegistryClusterArgs) ToSchemaRegistryClusterModeSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) SchemaRegistryClusterModeSchemaRegistryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryClusterModeSchemaRegistryClusterOutput).ToSchemaRegistryClusterModeSchemaRegistryClusterPtrOutputWithContext(ctx)
}

// SchemaRegistryClusterModeSchemaRegistryClusterPtrInput is an input type that accepts SchemaRegistryClusterModeSchemaRegistryClusterArgs, SchemaRegistryClusterModeSchemaRegistryClusterPtr and SchemaRegistryClusterModeSchemaRegistryClusterPtrOutput values.
// You can construct a concrete instance of `SchemaRegistryClusterModeSchemaRegistryClusterPtrInput` via:
//
//	        SchemaRegistryClusterModeSchemaRegistryClusterArgs{...}
//
//	or:
//
//	        nil
type SchemaRegistryClusterModeSchemaRegistryClusterPtrInput interface {
	pulumi.Input

	ToSchemaRegistryClusterModeSchemaRegistryClusterPtrOutput() SchemaRegistryClusterModeSchemaRegistryClusterPtrOutput
	ToSchemaRegistryClusterModeSchemaRegistryClusterPtrOutputWithContext(context.Context) SchemaRegistryClusterModeSchemaRegistryClusterPtrOutput
}

type schemaRegistryClusterModeSchemaRegistryClusterPtrType SchemaRegistryClusterModeSchemaRegistryClusterArgs

func SchemaRegistryClusterModeSchemaRegistryClusterPtr(v *SchemaRegistryClusterModeSchemaRegistryClusterArgs) SchemaRegistryClusterModeSchemaRegistryClusterPtrInput {
	return (*schemaRegistryClusterModeSchemaRegistryClusterPtrType)(v)
}

func (*schemaRegistryClusterModeSchemaRegistryClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaRegistryClusterModeSchemaRegistryCluster)(nil)).Elem()
}

func (i *schemaRegistryClusterModeSchemaRegistryClusterPtrType) ToSchemaRegistryClusterModeSchemaRegistryClusterPtrOutput() SchemaRegistryClusterModeSchemaRegistryClusterPtrOutput {
	return i.ToSchemaRegistryClusterModeSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (i *schemaRegistryClusterModeSchemaRegistryClusterPtrType) ToSchemaRegistryClusterModeSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) SchemaRegistryClusterModeSchemaRegistryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryClusterModeSchemaRegistryClusterPtrOutput)
}

func (i *schemaRegistryClusterModeSchemaRegistryClusterPtrType) ToOutput(ctx context.Context) pulumix.Output[*SchemaRegistryClusterModeSchemaRegistryCluster] {
	return pulumix.Output[*SchemaRegistryClusterModeSchemaRegistryCluster]{
		OutputState: i.ToSchemaRegistryClusterModeSchemaRegistryClusterPtrOutputWithContext(ctx).OutputState,
	}
}

type SchemaRegistryClusterModeSchemaRegistryClusterOutput struct{ *pulumi.OutputState }

func (SchemaRegistryClusterModeSchemaRegistryClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaRegistryClusterModeSchemaRegistryCluster)(nil)).Elem()
}

func (o SchemaRegistryClusterModeSchemaRegistryClusterOutput) ToSchemaRegistryClusterModeSchemaRegistryClusterOutput() SchemaRegistryClusterModeSchemaRegistryClusterOutput {
	return o
}

func (o SchemaRegistryClusterModeSchemaRegistryClusterOutput) ToSchemaRegistryClusterModeSchemaRegistryClusterOutputWithContext(ctx context.Context) SchemaRegistryClusterModeSchemaRegistryClusterOutput {
	return o
}

func (o SchemaRegistryClusterModeSchemaRegistryClusterOutput) ToSchemaRegistryClusterModeSchemaRegistryClusterPtrOutput() SchemaRegistryClusterModeSchemaRegistryClusterPtrOutput {
	return o.ToSchemaRegistryClusterModeSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (o SchemaRegistryClusterModeSchemaRegistryClusterOutput) ToSchemaRegistryClusterModeSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) SchemaRegistryClusterModeSchemaRegistryClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchemaRegistryClusterModeSchemaRegistryCluster) *SchemaRegistryClusterModeSchemaRegistryCluster {
		return &v
	}).(SchemaRegistryClusterModeSchemaRegistryClusterPtrOutput)
}

func (o SchemaRegistryClusterModeSchemaRegistryClusterOutput) ToOutput(ctx context.Context) pulumix.Output[SchemaRegistryClusterModeSchemaRegistryCluster] {
	return pulumix.Output[SchemaRegistryClusterModeSchemaRegistryCluster]{
		OutputState: o.OutputState,
	}
}

// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
func (o SchemaRegistryClusterModeSchemaRegistryClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaRegistryClusterModeSchemaRegistryCluster) string { return v.Id }).(pulumi.StringOutput)
}

type SchemaRegistryClusterModeSchemaRegistryClusterPtrOutput struct{ *pulumi.OutputState }

func (SchemaRegistryClusterModeSchemaRegistryClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaRegistryClusterModeSchemaRegistryCluster)(nil)).Elem()
}

func (o SchemaRegistryClusterModeSchemaRegistryClusterPtrOutput) ToSchemaRegistryClusterModeSchemaRegistryClusterPtrOutput() SchemaRegistryClusterModeSchemaRegistryClusterPtrOutput {
	return o
}

func (o SchemaRegistryClusterModeSchemaRegistryClusterPtrOutput) ToSchemaRegistryClusterModeSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) SchemaRegistryClusterModeSchemaRegistryClusterPtrOutput {
	return o
}

func (o SchemaRegistryClusterModeSchemaRegistryClusterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SchemaRegistryClusterModeSchemaRegistryCluster] {
	return pulumix.Output[*SchemaRegistryClusterModeSchemaRegistryCluster]{
		OutputState: o.OutputState,
	}
}

func (o SchemaRegistryClusterModeSchemaRegistryClusterPtrOutput) Elem() SchemaRegistryClusterModeSchemaRegistryClusterOutput {
	return o.ApplyT(func(v *SchemaRegistryClusterModeSchemaRegistryCluster) SchemaRegistryClusterModeSchemaRegistryCluster {
		if v != nil {
			return *v
		}
		var ret SchemaRegistryClusterModeSchemaRegistryCluster
		return ret
	}).(SchemaRegistryClusterModeSchemaRegistryClusterOutput)
}

// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
func (o SchemaRegistryClusterModeSchemaRegistryClusterPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaRegistryClusterModeSchemaRegistryCluster) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type SchemaRegistryClusterRegion struct {
	// The ID of the Schema Registry region that the Schema Registry cluster belongs to, for example, `sgreg-1`. See [Schema Registry Regions](https://docs.confluent.io/cloud/current/stream-governance/packages.html#stream-governance-regions) to find a corresponding region ID based on desired cloud provider region and types of the billing package.
	Id string `pulumi:"id"`
}

// SchemaRegistryClusterRegionInput is an input type that accepts SchemaRegistryClusterRegionArgs and SchemaRegistryClusterRegionOutput values.
// You can construct a concrete instance of `SchemaRegistryClusterRegionInput` via:
//
//	SchemaRegistryClusterRegionArgs{...}
type SchemaRegistryClusterRegionInput interface {
	pulumi.Input

	ToSchemaRegistryClusterRegionOutput() SchemaRegistryClusterRegionOutput
	ToSchemaRegistryClusterRegionOutputWithContext(context.Context) SchemaRegistryClusterRegionOutput
}

type SchemaRegistryClusterRegionArgs struct {
	// The ID of the Schema Registry region that the Schema Registry cluster belongs to, for example, `sgreg-1`. See [Schema Registry Regions](https://docs.confluent.io/cloud/current/stream-governance/packages.html#stream-governance-regions) to find a corresponding region ID based on desired cloud provider region and types of the billing package.
	Id pulumi.StringInput `pulumi:"id"`
}

func (SchemaRegistryClusterRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaRegistryClusterRegion)(nil)).Elem()
}

func (i SchemaRegistryClusterRegionArgs) ToSchemaRegistryClusterRegionOutput() SchemaRegistryClusterRegionOutput {
	return i.ToSchemaRegistryClusterRegionOutputWithContext(context.Background())
}

func (i SchemaRegistryClusterRegionArgs) ToSchemaRegistryClusterRegionOutputWithContext(ctx context.Context) SchemaRegistryClusterRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryClusterRegionOutput)
}

func (i SchemaRegistryClusterRegionArgs) ToOutput(ctx context.Context) pulumix.Output[SchemaRegistryClusterRegion] {
	return pulumix.Output[SchemaRegistryClusterRegion]{
		OutputState: i.ToSchemaRegistryClusterRegionOutputWithContext(ctx).OutputState,
	}
}

func (i SchemaRegistryClusterRegionArgs) ToSchemaRegistryClusterRegionPtrOutput() SchemaRegistryClusterRegionPtrOutput {
	return i.ToSchemaRegistryClusterRegionPtrOutputWithContext(context.Background())
}

func (i SchemaRegistryClusterRegionArgs) ToSchemaRegistryClusterRegionPtrOutputWithContext(ctx context.Context) SchemaRegistryClusterRegionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryClusterRegionOutput).ToSchemaRegistryClusterRegionPtrOutputWithContext(ctx)
}

// SchemaRegistryClusterRegionPtrInput is an input type that accepts SchemaRegistryClusterRegionArgs, SchemaRegistryClusterRegionPtr and SchemaRegistryClusterRegionPtrOutput values.
// You can construct a concrete instance of `SchemaRegistryClusterRegionPtrInput` via:
//
//	        SchemaRegistryClusterRegionArgs{...}
//
//	or:
//
//	        nil
type SchemaRegistryClusterRegionPtrInput interface {
	pulumi.Input

	ToSchemaRegistryClusterRegionPtrOutput() SchemaRegistryClusterRegionPtrOutput
	ToSchemaRegistryClusterRegionPtrOutputWithContext(context.Context) SchemaRegistryClusterRegionPtrOutput
}

type schemaRegistryClusterRegionPtrType SchemaRegistryClusterRegionArgs

func SchemaRegistryClusterRegionPtr(v *SchemaRegistryClusterRegionArgs) SchemaRegistryClusterRegionPtrInput {
	return (*schemaRegistryClusterRegionPtrType)(v)
}

func (*schemaRegistryClusterRegionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaRegistryClusterRegion)(nil)).Elem()
}

func (i *schemaRegistryClusterRegionPtrType) ToSchemaRegistryClusterRegionPtrOutput() SchemaRegistryClusterRegionPtrOutput {
	return i.ToSchemaRegistryClusterRegionPtrOutputWithContext(context.Background())
}

func (i *schemaRegistryClusterRegionPtrType) ToSchemaRegistryClusterRegionPtrOutputWithContext(ctx context.Context) SchemaRegistryClusterRegionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryClusterRegionPtrOutput)
}

func (i *schemaRegistryClusterRegionPtrType) ToOutput(ctx context.Context) pulumix.Output[*SchemaRegistryClusterRegion] {
	return pulumix.Output[*SchemaRegistryClusterRegion]{
		OutputState: i.ToSchemaRegistryClusterRegionPtrOutputWithContext(ctx).OutputState,
	}
}

type SchemaRegistryClusterRegionOutput struct{ *pulumi.OutputState }

func (SchemaRegistryClusterRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaRegistryClusterRegion)(nil)).Elem()
}

func (o SchemaRegistryClusterRegionOutput) ToSchemaRegistryClusterRegionOutput() SchemaRegistryClusterRegionOutput {
	return o
}

func (o SchemaRegistryClusterRegionOutput) ToSchemaRegistryClusterRegionOutputWithContext(ctx context.Context) SchemaRegistryClusterRegionOutput {
	return o
}

func (o SchemaRegistryClusterRegionOutput) ToSchemaRegistryClusterRegionPtrOutput() SchemaRegistryClusterRegionPtrOutput {
	return o.ToSchemaRegistryClusterRegionPtrOutputWithContext(context.Background())
}

func (o SchemaRegistryClusterRegionOutput) ToSchemaRegistryClusterRegionPtrOutputWithContext(ctx context.Context) SchemaRegistryClusterRegionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchemaRegistryClusterRegion) *SchemaRegistryClusterRegion {
		return &v
	}).(SchemaRegistryClusterRegionPtrOutput)
}

func (o SchemaRegistryClusterRegionOutput) ToOutput(ctx context.Context) pulumix.Output[SchemaRegistryClusterRegion] {
	return pulumix.Output[SchemaRegistryClusterRegion]{
		OutputState: o.OutputState,
	}
}

// The ID of the Schema Registry region that the Schema Registry cluster belongs to, for example, `sgreg-1`. See [Schema Registry Regions](https://docs.confluent.io/cloud/current/stream-governance/packages.html#stream-governance-regions) to find a corresponding region ID based on desired cloud provider region and types of the billing package.
func (o SchemaRegistryClusterRegionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaRegistryClusterRegion) string { return v.Id }).(pulumi.StringOutput)
}

type SchemaRegistryClusterRegionPtrOutput struct{ *pulumi.OutputState }

func (SchemaRegistryClusterRegionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaRegistryClusterRegion)(nil)).Elem()
}

func (o SchemaRegistryClusterRegionPtrOutput) ToSchemaRegistryClusterRegionPtrOutput() SchemaRegistryClusterRegionPtrOutput {
	return o
}

func (o SchemaRegistryClusterRegionPtrOutput) ToSchemaRegistryClusterRegionPtrOutputWithContext(ctx context.Context) SchemaRegistryClusterRegionPtrOutput {
	return o
}

func (o SchemaRegistryClusterRegionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SchemaRegistryClusterRegion] {
	return pulumix.Output[*SchemaRegistryClusterRegion]{
		OutputState: o.OutputState,
	}
}

func (o SchemaRegistryClusterRegionPtrOutput) Elem() SchemaRegistryClusterRegionOutput {
	return o.ApplyT(func(v *SchemaRegistryClusterRegion) SchemaRegistryClusterRegion {
		if v != nil {
			return *v
		}
		var ret SchemaRegistryClusterRegion
		return ret
	}).(SchemaRegistryClusterRegionOutput)
}

// The ID of the Schema Registry region that the Schema Registry cluster belongs to, for example, `sgreg-1`. See [Schema Registry Regions](https://docs.confluent.io/cloud/current/stream-governance/packages.html#stream-governance-regions) to find a corresponding region ID based on desired cloud provider region and types of the billing package.
func (o SchemaRegistryClusterRegionPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaRegistryClusterRegion) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type SchemaSchemaReference struct {
	// The name of the subject, representing the subject under which the referenced schema is registered.
	Name string `pulumi:"name"`
	// The name for the reference. (For Avro Schema, the reference name is the fully qualified schema name, for JSON Schema it is a URL, and for Protobuf Schema, it is the name of another Protobuf file.)
	SubjectName string `pulumi:"subjectName"`
	// The version, representing the exact version of the schema under the registered subject.
	Version int `pulumi:"version"`
}

// SchemaSchemaReferenceInput is an input type that accepts SchemaSchemaReferenceArgs and SchemaSchemaReferenceOutput values.
// You can construct a concrete instance of `SchemaSchemaReferenceInput` via:
//
//	SchemaSchemaReferenceArgs{...}
type SchemaSchemaReferenceInput interface {
	pulumi.Input

	ToSchemaSchemaReferenceOutput() SchemaSchemaReferenceOutput
	ToSchemaSchemaReferenceOutputWithContext(context.Context) SchemaSchemaReferenceOutput
}

type SchemaSchemaReferenceArgs struct {
	// The name of the subject, representing the subject under which the referenced schema is registered.
	Name pulumi.StringInput `pulumi:"name"`
	// The name for the reference. (For Avro Schema, the reference name is the fully qualified schema name, for JSON Schema it is a URL, and for Protobuf Schema, it is the name of another Protobuf file.)
	SubjectName pulumi.StringInput `pulumi:"subjectName"`
	// The version, representing the exact version of the schema under the registered subject.
	Version pulumi.IntInput `pulumi:"version"`
}

func (SchemaSchemaReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaSchemaReference)(nil)).Elem()
}

func (i SchemaSchemaReferenceArgs) ToSchemaSchemaReferenceOutput() SchemaSchemaReferenceOutput {
	return i.ToSchemaSchemaReferenceOutputWithContext(context.Background())
}

func (i SchemaSchemaReferenceArgs) ToSchemaSchemaReferenceOutputWithContext(ctx context.Context) SchemaSchemaReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaSchemaReferenceOutput)
}

func (i SchemaSchemaReferenceArgs) ToOutput(ctx context.Context) pulumix.Output[SchemaSchemaReference] {
	return pulumix.Output[SchemaSchemaReference]{
		OutputState: i.ToSchemaSchemaReferenceOutputWithContext(ctx).OutputState,
	}
}

// SchemaSchemaReferenceArrayInput is an input type that accepts SchemaSchemaReferenceArray and SchemaSchemaReferenceArrayOutput values.
// You can construct a concrete instance of `SchemaSchemaReferenceArrayInput` via:
//
//	SchemaSchemaReferenceArray{ SchemaSchemaReferenceArgs{...} }
type SchemaSchemaReferenceArrayInput interface {
	pulumi.Input

	ToSchemaSchemaReferenceArrayOutput() SchemaSchemaReferenceArrayOutput
	ToSchemaSchemaReferenceArrayOutputWithContext(context.Context) SchemaSchemaReferenceArrayOutput
}

type SchemaSchemaReferenceArray []SchemaSchemaReferenceInput

func (SchemaSchemaReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchemaSchemaReference)(nil)).Elem()
}

func (i SchemaSchemaReferenceArray) ToSchemaSchemaReferenceArrayOutput() SchemaSchemaReferenceArrayOutput {
	return i.ToSchemaSchemaReferenceArrayOutputWithContext(context.Background())
}

func (i SchemaSchemaReferenceArray) ToSchemaSchemaReferenceArrayOutputWithContext(ctx context.Context) SchemaSchemaReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaSchemaReferenceArrayOutput)
}

func (i SchemaSchemaReferenceArray) ToOutput(ctx context.Context) pulumix.Output[[]SchemaSchemaReference] {
	return pulumix.Output[[]SchemaSchemaReference]{
		OutputState: i.ToSchemaSchemaReferenceArrayOutputWithContext(ctx).OutputState,
	}
}

type SchemaSchemaReferenceOutput struct{ *pulumi.OutputState }

func (SchemaSchemaReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaSchemaReference)(nil)).Elem()
}

func (o SchemaSchemaReferenceOutput) ToSchemaSchemaReferenceOutput() SchemaSchemaReferenceOutput {
	return o
}

func (o SchemaSchemaReferenceOutput) ToSchemaSchemaReferenceOutputWithContext(ctx context.Context) SchemaSchemaReferenceOutput {
	return o
}

func (o SchemaSchemaReferenceOutput) ToOutput(ctx context.Context) pulumix.Output[SchemaSchemaReference] {
	return pulumix.Output[SchemaSchemaReference]{
		OutputState: o.OutputState,
	}
}

// The name of the subject, representing the subject under which the referenced schema is registered.
func (o SchemaSchemaReferenceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaSchemaReference) string { return v.Name }).(pulumi.StringOutput)
}

// The name for the reference. (For Avro Schema, the reference name is the fully qualified schema name, for JSON Schema it is a URL, and for Protobuf Schema, it is the name of another Protobuf file.)
func (o SchemaSchemaReferenceOutput) SubjectName() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaSchemaReference) string { return v.SubjectName }).(pulumi.StringOutput)
}

// The version, representing the exact version of the schema under the registered subject.
func (o SchemaSchemaReferenceOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v SchemaSchemaReference) int { return v.Version }).(pulumi.IntOutput)
}

type SchemaSchemaReferenceArrayOutput struct{ *pulumi.OutputState }

func (SchemaSchemaReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchemaSchemaReference)(nil)).Elem()
}

func (o SchemaSchemaReferenceArrayOutput) ToSchemaSchemaReferenceArrayOutput() SchemaSchemaReferenceArrayOutput {
	return o
}

func (o SchemaSchemaReferenceArrayOutput) ToSchemaSchemaReferenceArrayOutputWithContext(ctx context.Context) SchemaSchemaReferenceArrayOutput {
	return o
}

func (o SchemaSchemaReferenceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SchemaSchemaReference] {
	return pulumix.Output[[]SchemaSchemaReference]{
		OutputState: o.OutputState,
	}
}

func (o SchemaSchemaReferenceArrayOutput) Index(i pulumi.IntInput) SchemaSchemaReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SchemaSchemaReference {
		return vs[0].([]SchemaSchemaReference)[vs[1].(int)]
	}).(SchemaSchemaReferenceOutput)
}

type SchemaSchemaRegistryCluster struct {
	// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
	Id string `pulumi:"id"`
}

// SchemaSchemaRegistryClusterInput is an input type that accepts SchemaSchemaRegistryClusterArgs and SchemaSchemaRegistryClusterOutput values.
// You can construct a concrete instance of `SchemaSchemaRegistryClusterInput` via:
//
//	SchemaSchemaRegistryClusterArgs{...}
type SchemaSchemaRegistryClusterInput interface {
	pulumi.Input

	ToSchemaSchemaRegistryClusterOutput() SchemaSchemaRegistryClusterOutput
	ToSchemaSchemaRegistryClusterOutputWithContext(context.Context) SchemaSchemaRegistryClusterOutput
}

type SchemaSchemaRegistryClusterArgs struct {
	// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (SchemaSchemaRegistryClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaSchemaRegistryCluster)(nil)).Elem()
}

func (i SchemaSchemaRegistryClusterArgs) ToSchemaSchemaRegistryClusterOutput() SchemaSchemaRegistryClusterOutput {
	return i.ToSchemaSchemaRegistryClusterOutputWithContext(context.Background())
}

func (i SchemaSchemaRegistryClusterArgs) ToSchemaSchemaRegistryClusterOutputWithContext(ctx context.Context) SchemaSchemaRegistryClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaSchemaRegistryClusterOutput)
}

func (i SchemaSchemaRegistryClusterArgs) ToOutput(ctx context.Context) pulumix.Output[SchemaSchemaRegistryCluster] {
	return pulumix.Output[SchemaSchemaRegistryCluster]{
		OutputState: i.ToSchemaSchemaRegistryClusterOutputWithContext(ctx).OutputState,
	}
}

func (i SchemaSchemaRegistryClusterArgs) ToSchemaSchemaRegistryClusterPtrOutput() SchemaSchemaRegistryClusterPtrOutput {
	return i.ToSchemaSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (i SchemaSchemaRegistryClusterArgs) ToSchemaSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) SchemaSchemaRegistryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaSchemaRegistryClusterOutput).ToSchemaSchemaRegistryClusterPtrOutputWithContext(ctx)
}

// SchemaSchemaRegistryClusterPtrInput is an input type that accepts SchemaSchemaRegistryClusterArgs, SchemaSchemaRegistryClusterPtr and SchemaSchemaRegistryClusterPtrOutput values.
// You can construct a concrete instance of `SchemaSchemaRegistryClusterPtrInput` via:
//
//	        SchemaSchemaRegistryClusterArgs{...}
//
//	or:
//
//	        nil
type SchemaSchemaRegistryClusterPtrInput interface {
	pulumi.Input

	ToSchemaSchemaRegistryClusterPtrOutput() SchemaSchemaRegistryClusterPtrOutput
	ToSchemaSchemaRegistryClusterPtrOutputWithContext(context.Context) SchemaSchemaRegistryClusterPtrOutput
}

type schemaSchemaRegistryClusterPtrType SchemaSchemaRegistryClusterArgs

func SchemaSchemaRegistryClusterPtr(v *SchemaSchemaRegistryClusterArgs) SchemaSchemaRegistryClusterPtrInput {
	return (*schemaSchemaRegistryClusterPtrType)(v)
}

func (*schemaSchemaRegistryClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaSchemaRegistryCluster)(nil)).Elem()
}

func (i *schemaSchemaRegistryClusterPtrType) ToSchemaSchemaRegistryClusterPtrOutput() SchemaSchemaRegistryClusterPtrOutput {
	return i.ToSchemaSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (i *schemaSchemaRegistryClusterPtrType) ToSchemaSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) SchemaSchemaRegistryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaSchemaRegistryClusterPtrOutput)
}

func (i *schemaSchemaRegistryClusterPtrType) ToOutput(ctx context.Context) pulumix.Output[*SchemaSchemaRegistryCluster] {
	return pulumix.Output[*SchemaSchemaRegistryCluster]{
		OutputState: i.ToSchemaSchemaRegistryClusterPtrOutputWithContext(ctx).OutputState,
	}
}

type SchemaSchemaRegistryClusterOutput struct{ *pulumi.OutputState }

func (SchemaSchemaRegistryClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaSchemaRegistryCluster)(nil)).Elem()
}

func (o SchemaSchemaRegistryClusterOutput) ToSchemaSchemaRegistryClusterOutput() SchemaSchemaRegistryClusterOutput {
	return o
}

func (o SchemaSchemaRegistryClusterOutput) ToSchemaSchemaRegistryClusterOutputWithContext(ctx context.Context) SchemaSchemaRegistryClusterOutput {
	return o
}

func (o SchemaSchemaRegistryClusterOutput) ToSchemaSchemaRegistryClusterPtrOutput() SchemaSchemaRegistryClusterPtrOutput {
	return o.ToSchemaSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (o SchemaSchemaRegistryClusterOutput) ToSchemaSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) SchemaSchemaRegistryClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchemaSchemaRegistryCluster) *SchemaSchemaRegistryCluster {
		return &v
	}).(SchemaSchemaRegistryClusterPtrOutput)
}

func (o SchemaSchemaRegistryClusterOutput) ToOutput(ctx context.Context) pulumix.Output[SchemaSchemaRegistryCluster] {
	return pulumix.Output[SchemaSchemaRegistryCluster]{
		OutputState: o.OutputState,
	}
}

// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
func (o SchemaSchemaRegistryClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaSchemaRegistryCluster) string { return v.Id }).(pulumi.StringOutput)
}

type SchemaSchemaRegistryClusterPtrOutput struct{ *pulumi.OutputState }

func (SchemaSchemaRegistryClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaSchemaRegistryCluster)(nil)).Elem()
}

func (o SchemaSchemaRegistryClusterPtrOutput) ToSchemaSchemaRegistryClusterPtrOutput() SchemaSchemaRegistryClusterPtrOutput {
	return o
}

func (o SchemaSchemaRegistryClusterPtrOutput) ToSchemaSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) SchemaSchemaRegistryClusterPtrOutput {
	return o
}

func (o SchemaSchemaRegistryClusterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SchemaSchemaRegistryCluster] {
	return pulumix.Output[*SchemaSchemaRegistryCluster]{
		OutputState: o.OutputState,
	}
}

func (o SchemaSchemaRegistryClusterPtrOutput) Elem() SchemaSchemaRegistryClusterOutput {
	return o.ApplyT(func(v *SchemaSchemaRegistryCluster) SchemaSchemaRegistryCluster {
		if v != nil {
			return *v
		}
		var ret SchemaSchemaRegistryCluster
		return ret
	}).(SchemaSchemaRegistryClusterOutput)
}

// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
func (o SchemaSchemaRegistryClusterPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaSchemaRegistryCluster) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type SubjectConfigCredentials struct {
	// The Schema Registry API Key.
	Key    string `pulumi:"key"`
	Secret string `pulumi:"secret"`
}

// SubjectConfigCredentialsInput is an input type that accepts SubjectConfigCredentialsArgs and SubjectConfigCredentialsOutput values.
// You can construct a concrete instance of `SubjectConfigCredentialsInput` via:
//
//	SubjectConfigCredentialsArgs{...}
type SubjectConfigCredentialsInput interface {
	pulumi.Input

	ToSubjectConfigCredentialsOutput() SubjectConfigCredentialsOutput
	ToSubjectConfigCredentialsOutputWithContext(context.Context) SubjectConfigCredentialsOutput
}

type SubjectConfigCredentialsArgs struct {
	// The Schema Registry API Key.
	Key    pulumi.StringInput `pulumi:"key"`
	Secret pulumi.StringInput `pulumi:"secret"`
}

func (SubjectConfigCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectConfigCredentials)(nil)).Elem()
}

func (i SubjectConfigCredentialsArgs) ToSubjectConfigCredentialsOutput() SubjectConfigCredentialsOutput {
	return i.ToSubjectConfigCredentialsOutputWithContext(context.Background())
}

func (i SubjectConfigCredentialsArgs) ToSubjectConfigCredentialsOutputWithContext(ctx context.Context) SubjectConfigCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectConfigCredentialsOutput)
}

func (i SubjectConfigCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[SubjectConfigCredentials] {
	return pulumix.Output[SubjectConfigCredentials]{
		OutputState: i.ToSubjectConfigCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i SubjectConfigCredentialsArgs) ToSubjectConfigCredentialsPtrOutput() SubjectConfigCredentialsPtrOutput {
	return i.ToSubjectConfigCredentialsPtrOutputWithContext(context.Background())
}

func (i SubjectConfigCredentialsArgs) ToSubjectConfigCredentialsPtrOutputWithContext(ctx context.Context) SubjectConfigCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectConfigCredentialsOutput).ToSubjectConfigCredentialsPtrOutputWithContext(ctx)
}

// SubjectConfigCredentialsPtrInput is an input type that accepts SubjectConfigCredentialsArgs, SubjectConfigCredentialsPtr and SubjectConfigCredentialsPtrOutput values.
// You can construct a concrete instance of `SubjectConfigCredentialsPtrInput` via:
//
//	        SubjectConfigCredentialsArgs{...}
//
//	or:
//
//	        nil
type SubjectConfigCredentialsPtrInput interface {
	pulumi.Input

	ToSubjectConfigCredentialsPtrOutput() SubjectConfigCredentialsPtrOutput
	ToSubjectConfigCredentialsPtrOutputWithContext(context.Context) SubjectConfigCredentialsPtrOutput
}

type subjectConfigCredentialsPtrType SubjectConfigCredentialsArgs

func SubjectConfigCredentialsPtr(v *SubjectConfigCredentialsArgs) SubjectConfigCredentialsPtrInput {
	return (*subjectConfigCredentialsPtrType)(v)
}

func (*subjectConfigCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectConfigCredentials)(nil)).Elem()
}

func (i *subjectConfigCredentialsPtrType) ToSubjectConfigCredentialsPtrOutput() SubjectConfigCredentialsPtrOutput {
	return i.ToSubjectConfigCredentialsPtrOutputWithContext(context.Background())
}

func (i *subjectConfigCredentialsPtrType) ToSubjectConfigCredentialsPtrOutputWithContext(ctx context.Context) SubjectConfigCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectConfigCredentialsPtrOutput)
}

func (i *subjectConfigCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*SubjectConfigCredentials] {
	return pulumix.Output[*SubjectConfigCredentials]{
		OutputState: i.ToSubjectConfigCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

type SubjectConfigCredentialsOutput struct{ *pulumi.OutputState }

func (SubjectConfigCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectConfigCredentials)(nil)).Elem()
}

func (o SubjectConfigCredentialsOutput) ToSubjectConfigCredentialsOutput() SubjectConfigCredentialsOutput {
	return o
}

func (o SubjectConfigCredentialsOutput) ToSubjectConfigCredentialsOutputWithContext(ctx context.Context) SubjectConfigCredentialsOutput {
	return o
}

func (o SubjectConfigCredentialsOutput) ToSubjectConfigCredentialsPtrOutput() SubjectConfigCredentialsPtrOutput {
	return o.ToSubjectConfigCredentialsPtrOutputWithContext(context.Background())
}

func (o SubjectConfigCredentialsOutput) ToSubjectConfigCredentialsPtrOutputWithContext(ctx context.Context) SubjectConfigCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubjectConfigCredentials) *SubjectConfigCredentials {
		return &v
	}).(SubjectConfigCredentialsPtrOutput)
}

func (o SubjectConfigCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[SubjectConfigCredentials] {
	return pulumix.Output[SubjectConfigCredentials]{
		OutputState: o.OutputState,
	}
}

// The Schema Registry API Key.
func (o SubjectConfigCredentialsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SubjectConfigCredentials) string { return v.Key }).(pulumi.StringOutput)
}

func (o SubjectConfigCredentialsOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v SubjectConfigCredentials) string { return v.Secret }).(pulumi.StringOutput)
}

type SubjectConfigCredentialsPtrOutput struct{ *pulumi.OutputState }

func (SubjectConfigCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectConfigCredentials)(nil)).Elem()
}

func (o SubjectConfigCredentialsPtrOutput) ToSubjectConfigCredentialsPtrOutput() SubjectConfigCredentialsPtrOutput {
	return o
}

func (o SubjectConfigCredentialsPtrOutput) ToSubjectConfigCredentialsPtrOutputWithContext(ctx context.Context) SubjectConfigCredentialsPtrOutput {
	return o
}

func (o SubjectConfigCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SubjectConfigCredentials] {
	return pulumix.Output[*SubjectConfigCredentials]{
		OutputState: o.OutputState,
	}
}

func (o SubjectConfigCredentialsPtrOutput) Elem() SubjectConfigCredentialsOutput {
	return o.ApplyT(func(v *SubjectConfigCredentials) SubjectConfigCredentials {
		if v != nil {
			return *v
		}
		var ret SubjectConfigCredentials
		return ret
	}).(SubjectConfigCredentialsOutput)
}

// The Schema Registry API Key.
func (o SubjectConfigCredentialsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubjectConfigCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

func (o SubjectConfigCredentialsPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubjectConfigCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Secret
	}).(pulumi.StringPtrOutput)
}

type SubjectConfigSchemaRegistryCluster struct {
	// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
	Id string `pulumi:"id"`
}

// SubjectConfigSchemaRegistryClusterInput is an input type that accepts SubjectConfigSchemaRegistryClusterArgs and SubjectConfigSchemaRegistryClusterOutput values.
// You can construct a concrete instance of `SubjectConfigSchemaRegistryClusterInput` via:
//
//	SubjectConfigSchemaRegistryClusterArgs{...}
type SubjectConfigSchemaRegistryClusterInput interface {
	pulumi.Input

	ToSubjectConfigSchemaRegistryClusterOutput() SubjectConfigSchemaRegistryClusterOutput
	ToSubjectConfigSchemaRegistryClusterOutputWithContext(context.Context) SubjectConfigSchemaRegistryClusterOutput
}

type SubjectConfigSchemaRegistryClusterArgs struct {
	// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (SubjectConfigSchemaRegistryClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectConfigSchemaRegistryCluster)(nil)).Elem()
}

func (i SubjectConfigSchemaRegistryClusterArgs) ToSubjectConfigSchemaRegistryClusterOutput() SubjectConfigSchemaRegistryClusterOutput {
	return i.ToSubjectConfigSchemaRegistryClusterOutputWithContext(context.Background())
}

func (i SubjectConfigSchemaRegistryClusterArgs) ToSubjectConfigSchemaRegistryClusterOutputWithContext(ctx context.Context) SubjectConfigSchemaRegistryClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectConfigSchemaRegistryClusterOutput)
}

func (i SubjectConfigSchemaRegistryClusterArgs) ToOutput(ctx context.Context) pulumix.Output[SubjectConfigSchemaRegistryCluster] {
	return pulumix.Output[SubjectConfigSchemaRegistryCluster]{
		OutputState: i.ToSubjectConfigSchemaRegistryClusterOutputWithContext(ctx).OutputState,
	}
}

func (i SubjectConfigSchemaRegistryClusterArgs) ToSubjectConfigSchemaRegistryClusterPtrOutput() SubjectConfigSchemaRegistryClusterPtrOutput {
	return i.ToSubjectConfigSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (i SubjectConfigSchemaRegistryClusterArgs) ToSubjectConfigSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) SubjectConfigSchemaRegistryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectConfigSchemaRegistryClusterOutput).ToSubjectConfigSchemaRegistryClusterPtrOutputWithContext(ctx)
}

// SubjectConfigSchemaRegistryClusterPtrInput is an input type that accepts SubjectConfigSchemaRegistryClusterArgs, SubjectConfigSchemaRegistryClusterPtr and SubjectConfigSchemaRegistryClusterPtrOutput values.
// You can construct a concrete instance of `SubjectConfigSchemaRegistryClusterPtrInput` via:
//
//	        SubjectConfigSchemaRegistryClusterArgs{...}
//
//	or:
//
//	        nil
type SubjectConfigSchemaRegistryClusterPtrInput interface {
	pulumi.Input

	ToSubjectConfigSchemaRegistryClusterPtrOutput() SubjectConfigSchemaRegistryClusterPtrOutput
	ToSubjectConfigSchemaRegistryClusterPtrOutputWithContext(context.Context) SubjectConfigSchemaRegistryClusterPtrOutput
}

type subjectConfigSchemaRegistryClusterPtrType SubjectConfigSchemaRegistryClusterArgs

func SubjectConfigSchemaRegistryClusterPtr(v *SubjectConfigSchemaRegistryClusterArgs) SubjectConfigSchemaRegistryClusterPtrInput {
	return (*subjectConfigSchemaRegistryClusterPtrType)(v)
}

func (*subjectConfigSchemaRegistryClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectConfigSchemaRegistryCluster)(nil)).Elem()
}

func (i *subjectConfigSchemaRegistryClusterPtrType) ToSubjectConfigSchemaRegistryClusterPtrOutput() SubjectConfigSchemaRegistryClusterPtrOutput {
	return i.ToSubjectConfigSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (i *subjectConfigSchemaRegistryClusterPtrType) ToSubjectConfigSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) SubjectConfigSchemaRegistryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectConfigSchemaRegistryClusterPtrOutput)
}

func (i *subjectConfigSchemaRegistryClusterPtrType) ToOutput(ctx context.Context) pulumix.Output[*SubjectConfigSchemaRegistryCluster] {
	return pulumix.Output[*SubjectConfigSchemaRegistryCluster]{
		OutputState: i.ToSubjectConfigSchemaRegistryClusterPtrOutputWithContext(ctx).OutputState,
	}
}

type SubjectConfigSchemaRegistryClusterOutput struct{ *pulumi.OutputState }

func (SubjectConfigSchemaRegistryClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectConfigSchemaRegistryCluster)(nil)).Elem()
}

func (o SubjectConfigSchemaRegistryClusterOutput) ToSubjectConfigSchemaRegistryClusterOutput() SubjectConfigSchemaRegistryClusterOutput {
	return o
}

func (o SubjectConfigSchemaRegistryClusterOutput) ToSubjectConfigSchemaRegistryClusterOutputWithContext(ctx context.Context) SubjectConfigSchemaRegistryClusterOutput {
	return o
}

func (o SubjectConfigSchemaRegistryClusterOutput) ToSubjectConfigSchemaRegistryClusterPtrOutput() SubjectConfigSchemaRegistryClusterPtrOutput {
	return o.ToSubjectConfigSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (o SubjectConfigSchemaRegistryClusterOutput) ToSubjectConfigSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) SubjectConfigSchemaRegistryClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubjectConfigSchemaRegistryCluster) *SubjectConfigSchemaRegistryCluster {
		return &v
	}).(SubjectConfigSchemaRegistryClusterPtrOutput)
}

func (o SubjectConfigSchemaRegistryClusterOutput) ToOutput(ctx context.Context) pulumix.Output[SubjectConfigSchemaRegistryCluster] {
	return pulumix.Output[SubjectConfigSchemaRegistryCluster]{
		OutputState: o.OutputState,
	}
}

// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
func (o SubjectConfigSchemaRegistryClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SubjectConfigSchemaRegistryCluster) string { return v.Id }).(pulumi.StringOutput)
}

type SubjectConfigSchemaRegistryClusterPtrOutput struct{ *pulumi.OutputState }

func (SubjectConfigSchemaRegistryClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectConfigSchemaRegistryCluster)(nil)).Elem()
}

func (o SubjectConfigSchemaRegistryClusterPtrOutput) ToSubjectConfigSchemaRegistryClusterPtrOutput() SubjectConfigSchemaRegistryClusterPtrOutput {
	return o
}

func (o SubjectConfigSchemaRegistryClusterPtrOutput) ToSubjectConfigSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) SubjectConfigSchemaRegistryClusterPtrOutput {
	return o
}

func (o SubjectConfigSchemaRegistryClusterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SubjectConfigSchemaRegistryCluster] {
	return pulumix.Output[*SubjectConfigSchemaRegistryCluster]{
		OutputState: o.OutputState,
	}
}

func (o SubjectConfigSchemaRegistryClusterPtrOutput) Elem() SubjectConfigSchemaRegistryClusterOutput {
	return o.ApplyT(func(v *SubjectConfigSchemaRegistryCluster) SubjectConfigSchemaRegistryCluster {
		if v != nil {
			return *v
		}
		var ret SubjectConfigSchemaRegistryCluster
		return ret
	}).(SubjectConfigSchemaRegistryClusterOutput)
}

// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
func (o SubjectConfigSchemaRegistryClusterPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubjectConfigSchemaRegistryCluster) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type SubjectModeCredentials struct {
	// The Schema Registry API Key.
	Key    string `pulumi:"key"`
	Secret string `pulumi:"secret"`
}

// SubjectModeCredentialsInput is an input type that accepts SubjectModeCredentialsArgs and SubjectModeCredentialsOutput values.
// You can construct a concrete instance of `SubjectModeCredentialsInput` via:
//
//	SubjectModeCredentialsArgs{...}
type SubjectModeCredentialsInput interface {
	pulumi.Input

	ToSubjectModeCredentialsOutput() SubjectModeCredentialsOutput
	ToSubjectModeCredentialsOutputWithContext(context.Context) SubjectModeCredentialsOutput
}

type SubjectModeCredentialsArgs struct {
	// The Schema Registry API Key.
	Key    pulumi.StringInput `pulumi:"key"`
	Secret pulumi.StringInput `pulumi:"secret"`
}

func (SubjectModeCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectModeCredentials)(nil)).Elem()
}

func (i SubjectModeCredentialsArgs) ToSubjectModeCredentialsOutput() SubjectModeCredentialsOutput {
	return i.ToSubjectModeCredentialsOutputWithContext(context.Background())
}

func (i SubjectModeCredentialsArgs) ToSubjectModeCredentialsOutputWithContext(ctx context.Context) SubjectModeCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectModeCredentialsOutput)
}

func (i SubjectModeCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[SubjectModeCredentials] {
	return pulumix.Output[SubjectModeCredentials]{
		OutputState: i.ToSubjectModeCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i SubjectModeCredentialsArgs) ToSubjectModeCredentialsPtrOutput() SubjectModeCredentialsPtrOutput {
	return i.ToSubjectModeCredentialsPtrOutputWithContext(context.Background())
}

func (i SubjectModeCredentialsArgs) ToSubjectModeCredentialsPtrOutputWithContext(ctx context.Context) SubjectModeCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectModeCredentialsOutput).ToSubjectModeCredentialsPtrOutputWithContext(ctx)
}

// SubjectModeCredentialsPtrInput is an input type that accepts SubjectModeCredentialsArgs, SubjectModeCredentialsPtr and SubjectModeCredentialsPtrOutput values.
// You can construct a concrete instance of `SubjectModeCredentialsPtrInput` via:
//
//	        SubjectModeCredentialsArgs{...}
//
//	or:
//
//	        nil
type SubjectModeCredentialsPtrInput interface {
	pulumi.Input

	ToSubjectModeCredentialsPtrOutput() SubjectModeCredentialsPtrOutput
	ToSubjectModeCredentialsPtrOutputWithContext(context.Context) SubjectModeCredentialsPtrOutput
}

type subjectModeCredentialsPtrType SubjectModeCredentialsArgs

func SubjectModeCredentialsPtr(v *SubjectModeCredentialsArgs) SubjectModeCredentialsPtrInput {
	return (*subjectModeCredentialsPtrType)(v)
}

func (*subjectModeCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectModeCredentials)(nil)).Elem()
}

func (i *subjectModeCredentialsPtrType) ToSubjectModeCredentialsPtrOutput() SubjectModeCredentialsPtrOutput {
	return i.ToSubjectModeCredentialsPtrOutputWithContext(context.Background())
}

func (i *subjectModeCredentialsPtrType) ToSubjectModeCredentialsPtrOutputWithContext(ctx context.Context) SubjectModeCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectModeCredentialsPtrOutput)
}

func (i *subjectModeCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*SubjectModeCredentials] {
	return pulumix.Output[*SubjectModeCredentials]{
		OutputState: i.ToSubjectModeCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

type SubjectModeCredentialsOutput struct{ *pulumi.OutputState }

func (SubjectModeCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectModeCredentials)(nil)).Elem()
}

func (o SubjectModeCredentialsOutput) ToSubjectModeCredentialsOutput() SubjectModeCredentialsOutput {
	return o
}

func (o SubjectModeCredentialsOutput) ToSubjectModeCredentialsOutputWithContext(ctx context.Context) SubjectModeCredentialsOutput {
	return o
}

func (o SubjectModeCredentialsOutput) ToSubjectModeCredentialsPtrOutput() SubjectModeCredentialsPtrOutput {
	return o.ToSubjectModeCredentialsPtrOutputWithContext(context.Background())
}

func (o SubjectModeCredentialsOutput) ToSubjectModeCredentialsPtrOutputWithContext(ctx context.Context) SubjectModeCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubjectModeCredentials) *SubjectModeCredentials {
		return &v
	}).(SubjectModeCredentialsPtrOutput)
}

func (o SubjectModeCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[SubjectModeCredentials] {
	return pulumix.Output[SubjectModeCredentials]{
		OutputState: o.OutputState,
	}
}

// The Schema Registry API Key.
func (o SubjectModeCredentialsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SubjectModeCredentials) string { return v.Key }).(pulumi.StringOutput)
}

func (o SubjectModeCredentialsOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v SubjectModeCredentials) string { return v.Secret }).(pulumi.StringOutput)
}

type SubjectModeCredentialsPtrOutput struct{ *pulumi.OutputState }

func (SubjectModeCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectModeCredentials)(nil)).Elem()
}

func (o SubjectModeCredentialsPtrOutput) ToSubjectModeCredentialsPtrOutput() SubjectModeCredentialsPtrOutput {
	return o
}

func (o SubjectModeCredentialsPtrOutput) ToSubjectModeCredentialsPtrOutputWithContext(ctx context.Context) SubjectModeCredentialsPtrOutput {
	return o
}

func (o SubjectModeCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SubjectModeCredentials] {
	return pulumix.Output[*SubjectModeCredentials]{
		OutputState: o.OutputState,
	}
}

func (o SubjectModeCredentialsPtrOutput) Elem() SubjectModeCredentialsOutput {
	return o.ApplyT(func(v *SubjectModeCredentials) SubjectModeCredentials {
		if v != nil {
			return *v
		}
		var ret SubjectModeCredentials
		return ret
	}).(SubjectModeCredentialsOutput)
}

// The Schema Registry API Key.
func (o SubjectModeCredentialsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubjectModeCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

func (o SubjectModeCredentialsPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubjectModeCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Secret
	}).(pulumi.StringPtrOutput)
}

type SubjectModeSchemaRegistryCluster struct {
	// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
	Id string `pulumi:"id"`
}

// SubjectModeSchemaRegistryClusterInput is an input type that accepts SubjectModeSchemaRegistryClusterArgs and SubjectModeSchemaRegistryClusterOutput values.
// You can construct a concrete instance of `SubjectModeSchemaRegistryClusterInput` via:
//
//	SubjectModeSchemaRegistryClusterArgs{...}
type SubjectModeSchemaRegistryClusterInput interface {
	pulumi.Input

	ToSubjectModeSchemaRegistryClusterOutput() SubjectModeSchemaRegistryClusterOutput
	ToSubjectModeSchemaRegistryClusterOutputWithContext(context.Context) SubjectModeSchemaRegistryClusterOutput
}

type SubjectModeSchemaRegistryClusterArgs struct {
	// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (SubjectModeSchemaRegistryClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectModeSchemaRegistryCluster)(nil)).Elem()
}

func (i SubjectModeSchemaRegistryClusterArgs) ToSubjectModeSchemaRegistryClusterOutput() SubjectModeSchemaRegistryClusterOutput {
	return i.ToSubjectModeSchemaRegistryClusterOutputWithContext(context.Background())
}

func (i SubjectModeSchemaRegistryClusterArgs) ToSubjectModeSchemaRegistryClusterOutputWithContext(ctx context.Context) SubjectModeSchemaRegistryClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectModeSchemaRegistryClusterOutput)
}

func (i SubjectModeSchemaRegistryClusterArgs) ToOutput(ctx context.Context) pulumix.Output[SubjectModeSchemaRegistryCluster] {
	return pulumix.Output[SubjectModeSchemaRegistryCluster]{
		OutputState: i.ToSubjectModeSchemaRegistryClusterOutputWithContext(ctx).OutputState,
	}
}

func (i SubjectModeSchemaRegistryClusterArgs) ToSubjectModeSchemaRegistryClusterPtrOutput() SubjectModeSchemaRegistryClusterPtrOutput {
	return i.ToSubjectModeSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (i SubjectModeSchemaRegistryClusterArgs) ToSubjectModeSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) SubjectModeSchemaRegistryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectModeSchemaRegistryClusterOutput).ToSubjectModeSchemaRegistryClusterPtrOutputWithContext(ctx)
}

// SubjectModeSchemaRegistryClusterPtrInput is an input type that accepts SubjectModeSchemaRegistryClusterArgs, SubjectModeSchemaRegistryClusterPtr and SubjectModeSchemaRegistryClusterPtrOutput values.
// You can construct a concrete instance of `SubjectModeSchemaRegistryClusterPtrInput` via:
//
//	        SubjectModeSchemaRegistryClusterArgs{...}
//
//	or:
//
//	        nil
type SubjectModeSchemaRegistryClusterPtrInput interface {
	pulumi.Input

	ToSubjectModeSchemaRegistryClusterPtrOutput() SubjectModeSchemaRegistryClusterPtrOutput
	ToSubjectModeSchemaRegistryClusterPtrOutputWithContext(context.Context) SubjectModeSchemaRegistryClusterPtrOutput
}

type subjectModeSchemaRegistryClusterPtrType SubjectModeSchemaRegistryClusterArgs

func SubjectModeSchemaRegistryClusterPtr(v *SubjectModeSchemaRegistryClusterArgs) SubjectModeSchemaRegistryClusterPtrInput {
	return (*subjectModeSchemaRegistryClusterPtrType)(v)
}

func (*subjectModeSchemaRegistryClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectModeSchemaRegistryCluster)(nil)).Elem()
}

func (i *subjectModeSchemaRegistryClusterPtrType) ToSubjectModeSchemaRegistryClusterPtrOutput() SubjectModeSchemaRegistryClusterPtrOutput {
	return i.ToSubjectModeSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (i *subjectModeSchemaRegistryClusterPtrType) ToSubjectModeSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) SubjectModeSchemaRegistryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectModeSchemaRegistryClusterPtrOutput)
}

func (i *subjectModeSchemaRegistryClusterPtrType) ToOutput(ctx context.Context) pulumix.Output[*SubjectModeSchemaRegistryCluster] {
	return pulumix.Output[*SubjectModeSchemaRegistryCluster]{
		OutputState: i.ToSubjectModeSchemaRegistryClusterPtrOutputWithContext(ctx).OutputState,
	}
}

type SubjectModeSchemaRegistryClusterOutput struct{ *pulumi.OutputState }

func (SubjectModeSchemaRegistryClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectModeSchemaRegistryCluster)(nil)).Elem()
}

func (o SubjectModeSchemaRegistryClusterOutput) ToSubjectModeSchemaRegistryClusterOutput() SubjectModeSchemaRegistryClusterOutput {
	return o
}

func (o SubjectModeSchemaRegistryClusterOutput) ToSubjectModeSchemaRegistryClusterOutputWithContext(ctx context.Context) SubjectModeSchemaRegistryClusterOutput {
	return o
}

func (o SubjectModeSchemaRegistryClusterOutput) ToSubjectModeSchemaRegistryClusterPtrOutput() SubjectModeSchemaRegistryClusterPtrOutput {
	return o.ToSubjectModeSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (o SubjectModeSchemaRegistryClusterOutput) ToSubjectModeSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) SubjectModeSchemaRegistryClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubjectModeSchemaRegistryCluster) *SubjectModeSchemaRegistryCluster {
		return &v
	}).(SubjectModeSchemaRegistryClusterPtrOutput)
}

func (o SubjectModeSchemaRegistryClusterOutput) ToOutput(ctx context.Context) pulumix.Output[SubjectModeSchemaRegistryCluster] {
	return pulumix.Output[SubjectModeSchemaRegistryCluster]{
		OutputState: o.OutputState,
	}
}

// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
func (o SubjectModeSchemaRegistryClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SubjectModeSchemaRegistryCluster) string { return v.Id }).(pulumi.StringOutput)
}

type SubjectModeSchemaRegistryClusterPtrOutput struct{ *pulumi.OutputState }

func (SubjectModeSchemaRegistryClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectModeSchemaRegistryCluster)(nil)).Elem()
}

func (o SubjectModeSchemaRegistryClusterPtrOutput) ToSubjectModeSchemaRegistryClusterPtrOutput() SubjectModeSchemaRegistryClusterPtrOutput {
	return o
}

func (o SubjectModeSchemaRegistryClusterPtrOutput) ToSubjectModeSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) SubjectModeSchemaRegistryClusterPtrOutput {
	return o
}

func (o SubjectModeSchemaRegistryClusterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SubjectModeSchemaRegistryCluster] {
	return pulumix.Output[*SubjectModeSchemaRegistryCluster]{
		OutputState: o.OutputState,
	}
}

func (o SubjectModeSchemaRegistryClusterPtrOutput) Elem() SubjectModeSchemaRegistryClusterOutput {
	return o.ApplyT(func(v *SubjectModeSchemaRegistryCluster) SubjectModeSchemaRegistryCluster {
		if v != nil {
			return *v
		}
		var ret SubjectModeSchemaRegistryCluster
		return ret
	}).(SubjectModeSchemaRegistryClusterOutput)
}

// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
func (o SubjectModeSchemaRegistryClusterPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubjectModeSchemaRegistryCluster) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type TagBindingCredentials struct {
	// The Schema Registry API Key.
	Key string `pulumi:"key"`
	// The Schema Registry API Secret.
	Secret string `pulumi:"secret"`
}

// TagBindingCredentialsInput is an input type that accepts TagBindingCredentialsArgs and TagBindingCredentialsOutput values.
// You can construct a concrete instance of `TagBindingCredentialsInput` via:
//
//	TagBindingCredentialsArgs{...}
type TagBindingCredentialsInput interface {
	pulumi.Input

	ToTagBindingCredentialsOutput() TagBindingCredentialsOutput
	ToTagBindingCredentialsOutputWithContext(context.Context) TagBindingCredentialsOutput
}

type TagBindingCredentialsArgs struct {
	// The Schema Registry API Key.
	Key pulumi.StringInput `pulumi:"key"`
	// The Schema Registry API Secret.
	Secret pulumi.StringInput `pulumi:"secret"`
}

func (TagBindingCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TagBindingCredentials)(nil)).Elem()
}

func (i TagBindingCredentialsArgs) ToTagBindingCredentialsOutput() TagBindingCredentialsOutput {
	return i.ToTagBindingCredentialsOutputWithContext(context.Background())
}

func (i TagBindingCredentialsArgs) ToTagBindingCredentialsOutputWithContext(ctx context.Context) TagBindingCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagBindingCredentialsOutput)
}

func (i TagBindingCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[TagBindingCredentials] {
	return pulumix.Output[TagBindingCredentials]{
		OutputState: i.ToTagBindingCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i TagBindingCredentialsArgs) ToTagBindingCredentialsPtrOutput() TagBindingCredentialsPtrOutput {
	return i.ToTagBindingCredentialsPtrOutputWithContext(context.Background())
}

func (i TagBindingCredentialsArgs) ToTagBindingCredentialsPtrOutputWithContext(ctx context.Context) TagBindingCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagBindingCredentialsOutput).ToTagBindingCredentialsPtrOutputWithContext(ctx)
}

// TagBindingCredentialsPtrInput is an input type that accepts TagBindingCredentialsArgs, TagBindingCredentialsPtr and TagBindingCredentialsPtrOutput values.
// You can construct a concrete instance of `TagBindingCredentialsPtrInput` via:
//
//	        TagBindingCredentialsArgs{...}
//
//	or:
//
//	        nil
type TagBindingCredentialsPtrInput interface {
	pulumi.Input

	ToTagBindingCredentialsPtrOutput() TagBindingCredentialsPtrOutput
	ToTagBindingCredentialsPtrOutputWithContext(context.Context) TagBindingCredentialsPtrOutput
}

type tagBindingCredentialsPtrType TagBindingCredentialsArgs

func TagBindingCredentialsPtr(v *TagBindingCredentialsArgs) TagBindingCredentialsPtrInput {
	return (*tagBindingCredentialsPtrType)(v)
}

func (*tagBindingCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TagBindingCredentials)(nil)).Elem()
}

func (i *tagBindingCredentialsPtrType) ToTagBindingCredentialsPtrOutput() TagBindingCredentialsPtrOutput {
	return i.ToTagBindingCredentialsPtrOutputWithContext(context.Background())
}

func (i *tagBindingCredentialsPtrType) ToTagBindingCredentialsPtrOutputWithContext(ctx context.Context) TagBindingCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagBindingCredentialsPtrOutput)
}

func (i *tagBindingCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*TagBindingCredentials] {
	return pulumix.Output[*TagBindingCredentials]{
		OutputState: i.ToTagBindingCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

type TagBindingCredentialsOutput struct{ *pulumi.OutputState }

func (TagBindingCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TagBindingCredentials)(nil)).Elem()
}

func (o TagBindingCredentialsOutput) ToTagBindingCredentialsOutput() TagBindingCredentialsOutput {
	return o
}

func (o TagBindingCredentialsOutput) ToTagBindingCredentialsOutputWithContext(ctx context.Context) TagBindingCredentialsOutput {
	return o
}

func (o TagBindingCredentialsOutput) ToTagBindingCredentialsPtrOutput() TagBindingCredentialsPtrOutput {
	return o.ToTagBindingCredentialsPtrOutputWithContext(context.Background())
}

func (o TagBindingCredentialsOutput) ToTagBindingCredentialsPtrOutputWithContext(ctx context.Context) TagBindingCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TagBindingCredentials) *TagBindingCredentials {
		return &v
	}).(TagBindingCredentialsPtrOutput)
}

func (o TagBindingCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[TagBindingCredentials] {
	return pulumix.Output[TagBindingCredentials]{
		OutputState: o.OutputState,
	}
}

// The Schema Registry API Key.
func (o TagBindingCredentialsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v TagBindingCredentials) string { return v.Key }).(pulumi.StringOutput)
}

// The Schema Registry API Secret.
func (o TagBindingCredentialsOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v TagBindingCredentials) string { return v.Secret }).(pulumi.StringOutput)
}

type TagBindingCredentialsPtrOutput struct{ *pulumi.OutputState }

func (TagBindingCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TagBindingCredentials)(nil)).Elem()
}

func (o TagBindingCredentialsPtrOutput) ToTagBindingCredentialsPtrOutput() TagBindingCredentialsPtrOutput {
	return o
}

func (o TagBindingCredentialsPtrOutput) ToTagBindingCredentialsPtrOutputWithContext(ctx context.Context) TagBindingCredentialsPtrOutput {
	return o
}

func (o TagBindingCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TagBindingCredentials] {
	return pulumix.Output[*TagBindingCredentials]{
		OutputState: o.OutputState,
	}
}

func (o TagBindingCredentialsPtrOutput) Elem() TagBindingCredentialsOutput {
	return o.ApplyT(func(v *TagBindingCredentials) TagBindingCredentials {
		if v != nil {
			return *v
		}
		var ret TagBindingCredentials
		return ret
	}).(TagBindingCredentialsOutput)
}

// The Schema Registry API Key.
func (o TagBindingCredentialsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TagBindingCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// The Schema Registry API Secret.
func (o TagBindingCredentialsPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TagBindingCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Secret
	}).(pulumi.StringPtrOutput)
}

type TagBindingSchemaRegistryCluster struct {
	// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
	Id string `pulumi:"id"`
}

// TagBindingSchemaRegistryClusterInput is an input type that accepts TagBindingSchemaRegistryClusterArgs and TagBindingSchemaRegistryClusterOutput values.
// You can construct a concrete instance of `TagBindingSchemaRegistryClusterInput` via:
//
//	TagBindingSchemaRegistryClusterArgs{...}
type TagBindingSchemaRegistryClusterInput interface {
	pulumi.Input

	ToTagBindingSchemaRegistryClusterOutput() TagBindingSchemaRegistryClusterOutput
	ToTagBindingSchemaRegistryClusterOutputWithContext(context.Context) TagBindingSchemaRegistryClusterOutput
}

type TagBindingSchemaRegistryClusterArgs struct {
	// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (TagBindingSchemaRegistryClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TagBindingSchemaRegistryCluster)(nil)).Elem()
}

func (i TagBindingSchemaRegistryClusterArgs) ToTagBindingSchemaRegistryClusterOutput() TagBindingSchemaRegistryClusterOutput {
	return i.ToTagBindingSchemaRegistryClusterOutputWithContext(context.Background())
}

func (i TagBindingSchemaRegistryClusterArgs) ToTagBindingSchemaRegistryClusterOutputWithContext(ctx context.Context) TagBindingSchemaRegistryClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagBindingSchemaRegistryClusterOutput)
}

func (i TagBindingSchemaRegistryClusterArgs) ToOutput(ctx context.Context) pulumix.Output[TagBindingSchemaRegistryCluster] {
	return pulumix.Output[TagBindingSchemaRegistryCluster]{
		OutputState: i.ToTagBindingSchemaRegistryClusterOutputWithContext(ctx).OutputState,
	}
}

func (i TagBindingSchemaRegistryClusterArgs) ToTagBindingSchemaRegistryClusterPtrOutput() TagBindingSchemaRegistryClusterPtrOutput {
	return i.ToTagBindingSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (i TagBindingSchemaRegistryClusterArgs) ToTagBindingSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) TagBindingSchemaRegistryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagBindingSchemaRegistryClusterOutput).ToTagBindingSchemaRegistryClusterPtrOutputWithContext(ctx)
}

// TagBindingSchemaRegistryClusterPtrInput is an input type that accepts TagBindingSchemaRegistryClusterArgs, TagBindingSchemaRegistryClusterPtr and TagBindingSchemaRegistryClusterPtrOutput values.
// You can construct a concrete instance of `TagBindingSchemaRegistryClusterPtrInput` via:
//
//	        TagBindingSchemaRegistryClusterArgs{...}
//
//	or:
//
//	        nil
type TagBindingSchemaRegistryClusterPtrInput interface {
	pulumi.Input

	ToTagBindingSchemaRegistryClusterPtrOutput() TagBindingSchemaRegistryClusterPtrOutput
	ToTagBindingSchemaRegistryClusterPtrOutputWithContext(context.Context) TagBindingSchemaRegistryClusterPtrOutput
}

type tagBindingSchemaRegistryClusterPtrType TagBindingSchemaRegistryClusterArgs

func TagBindingSchemaRegistryClusterPtr(v *TagBindingSchemaRegistryClusterArgs) TagBindingSchemaRegistryClusterPtrInput {
	return (*tagBindingSchemaRegistryClusterPtrType)(v)
}

func (*tagBindingSchemaRegistryClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TagBindingSchemaRegistryCluster)(nil)).Elem()
}

func (i *tagBindingSchemaRegistryClusterPtrType) ToTagBindingSchemaRegistryClusterPtrOutput() TagBindingSchemaRegistryClusterPtrOutput {
	return i.ToTagBindingSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (i *tagBindingSchemaRegistryClusterPtrType) ToTagBindingSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) TagBindingSchemaRegistryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagBindingSchemaRegistryClusterPtrOutput)
}

func (i *tagBindingSchemaRegistryClusterPtrType) ToOutput(ctx context.Context) pulumix.Output[*TagBindingSchemaRegistryCluster] {
	return pulumix.Output[*TagBindingSchemaRegistryCluster]{
		OutputState: i.ToTagBindingSchemaRegistryClusterPtrOutputWithContext(ctx).OutputState,
	}
}

type TagBindingSchemaRegistryClusterOutput struct{ *pulumi.OutputState }

func (TagBindingSchemaRegistryClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TagBindingSchemaRegistryCluster)(nil)).Elem()
}

func (o TagBindingSchemaRegistryClusterOutput) ToTagBindingSchemaRegistryClusterOutput() TagBindingSchemaRegistryClusterOutput {
	return o
}

func (o TagBindingSchemaRegistryClusterOutput) ToTagBindingSchemaRegistryClusterOutputWithContext(ctx context.Context) TagBindingSchemaRegistryClusterOutput {
	return o
}

func (o TagBindingSchemaRegistryClusterOutput) ToTagBindingSchemaRegistryClusterPtrOutput() TagBindingSchemaRegistryClusterPtrOutput {
	return o.ToTagBindingSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (o TagBindingSchemaRegistryClusterOutput) ToTagBindingSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) TagBindingSchemaRegistryClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TagBindingSchemaRegistryCluster) *TagBindingSchemaRegistryCluster {
		return &v
	}).(TagBindingSchemaRegistryClusterPtrOutput)
}

func (o TagBindingSchemaRegistryClusterOutput) ToOutput(ctx context.Context) pulumix.Output[TagBindingSchemaRegistryCluster] {
	return pulumix.Output[TagBindingSchemaRegistryCluster]{
		OutputState: o.OutputState,
	}
}

// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
func (o TagBindingSchemaRegistryClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v TagBindingSchemaRegistryCluster) string { return v.Id }).(pulumi.StringOutput)
}

type TagBindingSchemaRegistryClusterPtrOutput struct{ *pulumi.OutputState }

func (TagBindingSchemaRegistryClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TagBindingSchemaRegistryCluster)(nil)).Elem()
}

func (o TagBindingSchemaRegistryClusterPtrOutput) ToTagBindingSchemaRegistryClusterPtrOutput() TagBindingSchemaRegistryClusterPtrOutput {
	return o
}

func (o TagBindingSchemaRegistryClusterPtrOutput) ToTagBindingSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) TagBindingSchemaRegistryClusterPtrOutput {
	return o
}

func (o TagBindingSchemaRegistryClusterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TagBindingSchemaRegistryCluster] {
	return pulumix.Output[*TagBindingSchemaRegistryCluster]{
		OutputState: o.OutputState,
	}
}

func (o TagBindingSchemaRegistryClusterPtrOutput) Elem() TagBindingSchemaRegistryClusterOutput {
	return o.ApplyT(func(v *TagBindingSchemaRegistryCluster) TagBindingSchemaRegistryCluster {
		if v != nil {
			return *v
		}
		var ret TagBindingSchemaRegistryCluster
		return ret
	}).(TagBindingSchemaRegistryClusterOutput)
}

// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
func (o TagBindingSchemaRegistryClusterPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TagBindingSchemaRegistryCluster) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type TagCredentials struct {
	// The Schema Registry API Key.
	Key string `pulumi:"key"`
	// The Schema Registry API Secret.
	Secret string `pulumi:"secret"`
}

// TagCredentialsInput is an input type that accepts TagCredentialsArgs and TagCredentialsOutput values.
// You can construct a concrete instance of `TagCredentialsInput` via:
//
//	TagCredentialsArgs{...}
type TagCredentialsInput interface {
	pulumi.Input

	ToTagCredentialsOutput() TagCredentialsOutput
	ToTagCredentialsOutputWithContext(context.Context) TagCredentialsOutput
}

type TagCredentialsArgs struct {
	// The Schema Registry API Key.
	Key pulumi.StringInput `pulumi:"key"`
	// The Schema Registry API Secret.
	Secret pulumi.StringInput `pulumi:"secret"`
}

func (TagCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TagCredentials)(nil)).Elem()
}

func (i TagCredentialsArgs) ToTagCredentialsOutput() TagCredentialsOutput {
	return i.ToTagCredentialsOutputWithContext(context.Background())
}

func (i TagCredentialsArgs) ToTagCredentialsOutputWithContext(ctx context.Context) TagCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagCredentialsOutput)
}

func (i TagCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[TagCredentials] {
	return pulumix.Output[TagCredentials]{
		OutputState: i.ToTagCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i TagCredentialsArgs) ToTagCredentialsPtrOutput() TagCredentialsPtrOutput {
	return i.ToTagCredentialsPtrOutputWithContext(context.Background())
}

func (i TagCredentialsArgs) ToTagCredentialsPtrOutputWithContext(ctx context.Context) TagCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagCredentialsOutput).ToTagCredentialsPtrOutputWithContext(ctx)
}

// TagCredentialsPtrInput is an input type that accepts TagCredentialsArgs, TagCredentialsPtr and TagCredentialsPtrOutput values.
// You can construct a concrete instance of `TagCredentialsPtrInput` via:
//
//	        TagCredentialsArgs{...}
//
//	or:
//
//	        nil
type TagCredentialsPtrInput interface {
	pulumi.Input

	ToTagCredentialsPtrOutput() TagCredentialsPtrOutput
	ToTagCredentialsPtrOutputWithContext(context.Context) TagCredentialsPtrOutput
}

type tagCredentialsPtrType TagCredentialsArgs

func TagCredentialsPtr(v *TagCredentialsArgs) TagCredentialsPtrInput {
	return (*tagCredentialsPtrType)(v)
}

func (*tagCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TagCredentials)(nil)).Elem()
}

func (i *tagCredentialsPtrType) ToTagCredentialsPtrOutput() TagCredentialsPtrOutput {
	return i.ToTagCredentialsPtrOutputWithContext(context.Background())
}

func (i *tagCredentialsPtrType) ToTagCredentialsPtrOutputWithContext(ctx context.Context) TagCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagCredentialsPtrOutput)
}

func (i *tagCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*TagCredentials] {
	return pulumix.Output[*TagCredentials]{
		OutputState: i.ToTagCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

type TagCredentialsOutput struct{ *pulumi.OutputState }

func (TagCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TagCredentials)(nil)).Elem()
}

func (o TagCredentialsOutput) ToTagCredentialsOutput() TagCredentialsOutput {
	return o
}

func (o TagCredentialsOutput) ToTagCredentialsOutputWithContext(ctx context.Context) TagCredentialsOutput {
	return o
}

func (o TagCredentialsOutput) ToTagCredentialsPtrOutput() TagCredentialsPtrOutput {
	return o.ToTagCredentialsPtrOutputWithContext(context.Background())
}

func (o TagCredentialsOutput) ToTagCredentialsPtrOutputWithContext(ctx context.Context) TagCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TagCredentials) *TagCredentials {
		return &v
	}).(TagCredentialsPtrOutput)
}

func (o TagCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[TagCredentials] {
	return pulumix.Output[TagCredentials]{
		OutputState: o.OutputState,
	}
}

// The Schema Registry API Key.
func (o TagCredentialsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v TagCredentials) string { return v.Key }).(pulumi.StringOutput)
}

// The Schema Registry API Secret.
func (o TagCredentialsOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v TagCredentials) string { return v.Secret }).(pulumi.StringOutput)
}

type TagCredentialsPtrOutput struct{ *pulumi.OutputState }

func (TagCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TagCredentials)(nil)).Elem()
}

func (o TagCredentialsPtrOutput) ToTagCredentialsPtrOutput() TagCredentialsPtrOutput {
	return o
}

func (o TagCredentialsPtrOutput) ToTagCredentialsPtrOutputWithContext(ctx context.Context) TagCredentialsPtrOutput {
	return o
}

func (o TagCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TagCredentials] {
	return pulumix.Output[*TagCredentials]{
		OutputState: o.OutputState,
	}
}

func (o TagCredentialsPtrOutput) Elem() TagCredentialsOutput {
	return o.ApplyT(func(v *TagCredentials) TagCredentials {
		if v != nil {
			return *v
		}
		var ret TagCredentials
		return ret
	}).(TagCredentialsOutput)
}

// The Schema Registry API Key.
func (o TagCredentialsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TagCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// The Schema Registry API Secret.
func (o TagCredentialsPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TagCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Secret
	}).(pulumi.StringPtrOutput)
}

type TagSchemaRegistryCluster struct {
	// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
	Id string `pulumi:"id"`
}

// TagSchemaRegistryClusterInput is an input type that accepts TagSchemaRegistryClusterArgs and TagSchemaRegistryClusterOutput values.
// You can construct a concrete instance of `TagSchemaRegistryClusterInput` via:
//
//	TagSchemaRegistryClusterArgs{...}
type TagSchemaRegistryClusterInput interface {
	pulumi.Input

	ToTagSchemaRegistryClusterOutput() TagSchemaRegistryClusterOutput
	ToTagSchemaRegistryClusterOutputWithContext(context.Context) TagSchemaRegistryClusterOutput
}

type TagSchemaRegistryClusterArgs struct {
	// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (TagSchemaRegistryClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TagSchemaRegistryCluster)(nil)).Elem()
}

func (i TagSchemaRegistryClusterArgs) ToTagSchemaRegistryClusterOutput() TagSchemaRegistryClusterOutput {
	return i.ToTagSchemaRegistryClusterOutputWithContext(context.Background())
}

func (i TagSchemaRegistryClusterArgs) ToTagSchemaRegistryClusterOutputWithContext(ctx context.Context) TagSchemaRegistryClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagSchemaRegistryClusterOutput)
}

func (i TagSchemaRegistryClusterArgs) ToOutput(ctx context.Context) pulumix.Output[TagSchemaRegistryCluster] {
	return pulumix.Output[TagSchemaRegistryCluster]{
		OutputState: i.ToTagSchemaRegistryClusterOutputWithContext(ctx).OutputState,
	}
}

func (i TagSchemaRegistryClusterArgs) ToTagSchemaRegistryClusterPtrOutput() TagSchemaRegistryClusterPtrOutput {
	return i.ToTagSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (i TagSchemaRegistryClusterArgs) ToTagSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) TagSchemaRegistryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagSchemaRegistryClusterOutput).ToTagSchemaRegistryClusterPtrOutputWithContext(ctx)
}

// TagSchemaRegistryClusterPtrInput is an input type that accepts TagSchemaRegistryClusterArgs, TagSchemaRegistryClusterPtr and TagSchemaRegistryClusterPtrOutput values.
// You can construct a concrete instance of `TagSchemaRegistryClusterPtrInput` via:
//
//	        TagSchemaRegistryClusterArgs{...}
//
//	or:
//
//	        nil
type TagSchemaRegistryClusterPtrInput interface {
	pulumi.Input

	ToTagSchemaRegistryClusterPtrOutput() TagSchemaRegistryClusterPtrOutput
	ToTagSchemaRegistryClusterPtrOutputWithContext(context.Context) TagSchemaRegistryClusterPtrOutput
}

type tagSchemaRegistryClusterPtrType TagSchemaRegistryClusterArgs

func TagSchemaRegistryClusterPtr(v *TagSchemaRegistryClusterArgs) TagSchemaRegistryClusterPtrInput {
	return (*tagSchemaRegistryClusterPtrType)(v)
}

func (*tagSchemaRegistryClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TagSchemaRegistryCluster)(nil)).Elem()
}

func (i *tagSchemaRegistryClusterPtrType) ToTagSchemaRegistryClusterPtrOutput() TagSchemaRegistryClusterPtrOutput {
	return i.ToTagSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (i *tagSchemaRegistryClusterPtrType) ToTagSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) TagSchemaRegistryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagSchemaRegistryClusterPtrOutput)
}

func (i *tagSchemaRegistryClusterPtrType) ToOutput(ctx context.Context) pulumix.Output[*TagSchemaRegistryCluster] {
	return pulumix.Output[*TagSchemaRegistryCluster]{
		OutputState: i.ToTagSchemaRegistryClusterPtrOutputWithContext(ctx).OutputState,
	}
}

type TagSchemaRegistryClusterOutput struct{ *pulumi.OutputState }

func (TagSchemaRegistryClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TagSchemaRegistryCluster)(nil)).Elem()
}

func (o TagSchemaRegistryClusterOutput) ToTagSchemaRegistryClusterOutput() TagSchemaRegistryClusterOutput {
	return o
}

func (o TagSchemaRegistryClusterOutput) ToTagSchemaRegistryClusterOutputWithContext(ctx context.Context) TagSchemaRegistryClusterOutput {
	return o
}

func (o TagSchemaRegistryClusterOutput) ToTagSchemaRegistryClusterPtrOutput() TagSchemaRegistryClusterPtrOutput {
	return o.ToTagSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (o TagSchemaRegistryClusterOutput) ToTagSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) TagSchemaRegistryClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TagSchemaRegistryCluster) *TagSchemaRegistryCluster {
		return &v
	}).(TagSchemaRegistryClusterPtrOutput)
}

func (o TagSchemaRegistryClusterOutput) ToOutput(ctx context.Context) pulumix.Output[TagSchemaRegistryCluster] {
	return pulumix.Output[TagSchemaRegistryCluster]{
		OutputState: o.OutputState,
	}
}

// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
func (o TagSchemaRegistryClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v TagSchemaRegistryCluster) string { return v.Id }).(pulumi.StringOutput)
}

type TagSchemaRegistryClusterPtrOutput struct{ *pulumi.OutputState }

func (TagSchemaRegistryClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TagSchemaRegistryCluster)(nil)).Elem()
}

func (o TagSchemaRegistryClusterPtrOutput) ToTagSchemaRegistryClusterPtrOutput() TagSchemaRegistryClusterPtrOutput {
	return o
}

func (o TagSchemaRegistryClusterPtrOutput) ToTagSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) TagSchemaRegistryClusterPtrOutput {
	return o
}

func (o TagSchemaRegistryClusterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TagSchemaRegistryCluster] {
	return pulumix.Output[*TagSchemaRegistryCluster]{
		OutputState: o.OutputState,
	}
}

func (o TagSchemaRegistryClusterPtrOutput) Elem() TagSchemaRegistryClusterOutput {
	return o.ApplyT(func(v *TagSchemaRegistryCluster) TagSchemaRegistryCluster {
		if v != nil {
			return *v
		}
		var ret TagSchemaRegistryCluster
		return ret
	}).(TagSchemaRegistryClusterOutput)
}

// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
func (o TagSchemaRegistryClusterPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TagSchemaRegistryCluster) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type TransitGatewayAttachmentAws struct {
	// The Amazon Resource Name (ARN) of the Resource Access Manager (RAM) Resource Share of the transit gateway your Confluent Cloud network attaches to.
	RamResourceShareArn string `pulumi:"ramResourceShareArn"`
	// List of destination routes for traffic from Confluent VPC to customer VPC via Transit Gateway.
	//
	// > **Note:** Learn more about Transit Gateway Attachment limitations on AWS [here](https://docs.confluent.io/cloud/current/networking/aws-transit-gateway.html#limitations).
	Routes []string `pulumi:"routes"`
	// (Required String) The ID of the AWS Transit Gateway VPC Attachment that attaches Confluent VPC to Transit Gateway.
	TransitGatewayAttachmentId *string `pulumi:"transitGatewayAttachmentId"`
	// The ID of the AWS Transit Gateway that you want Confluent CLoud to be attached to. Must start with `tgw-`.
	TransitGatewayId string `pulumi:"transitGatewayId"`
}

// TransitGatewayAttachmentAwsInput is an input type that accepts TransitGatewayAttachmentAwsArgs and TransitGatewayAttachmentAwsOutput values.
// You can construct a concrete instance of `TransitGatewayAttachmentAwsInput` via:
//
//	TransitGatewayAttachmentAwsArgs{...}
type TransitGatewayAttachmentAwsInput interface {
	pulumi.Input

	ToTransitGatewayAttachmentAwsOutput() TransitGatewayAttachmentAwsOutput
	ToTransitGatewayAttachmentAwsOutputWithContext(context.Context) TransitGatewayAttachmentAwsOutput
}

type TransitGatewayAttachmentAwsArgs struct {
	// The Amazon Resource Name (ARN) of the Resource Access Manager (RAM) Resource Share of the transit gateway your Confluent Cloud network attaches to.
	RamResourceShareArn pulumi.StringInput `pulumi:"ramResourceShareArn"`
	// List of destination routes for traffic from Confluent VPC to customer VPC via Transit Gateway.
	//
	// > **Note:** Learn more about Transit Gateway Attachment limitations on AWS [here](https://docs.confluent.io/cloud/current/networking/aws-transit-gateway.html#limitations).
	Routes pulumi.StringArrayInput `pulumi:"routes"`
	// (Required String) The ID of the AWS Transit Gateway VPC Attachment that attaches Confluent VPC to Transit Gateway.
	TransitGatewayAttachmentId pulumi.StringPtrInput `pulumi:"transitGatewayAttachmentId"`
	// The ID of the AWS Transit Gateway that you want Confluent CLoud to be attached to. Must start with `tgw-`.
	TransitGatewayId pulumi.StringInput `pulumi:"transitGatewayId"`
}

func (TransitGatewayAttachmentAwsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransitGatewayAttachmentAws)(nil)).Elem()
}

func (i TransitGatewayAttachmentAwsArgs) ToTransitGatewayAttachmentAwsOutput() TransitGatewayAttachmentAwsOutput {
	return i.ToTransitGatewayAttachmentAwsOutputWithContext(context.Background())
}

func (i TransitGatewayAttachmentAwsArgs) ToTransitGatewayAttachmentAwsOutputWithContext(ctx context.Context) TransitGatewayAttachmentAwsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransitGatewayAttachmentAwsOutput)
}

func (i TransitGatewayAttachmentAwsArgs) ToOutput(ctx context.Context) pulumix.Output[TransitGatewayAttachmentAws] {
	return pulumix.Output[TransitGatewayAttachmentAws]{
		OutputState: i.ToTransitGatewayAttachmentAwsOutputWithContext(ctx).OutputState,
	}
}

func (i TransitGatewayAttachmentAwsArgs) ToTransitGatewayAttachmentAwsPtrOutput() TransitGatewayAttachmentAwsPtrOutput {
	return i.ToTransitGatewayAttachmentAwsPtrOutputWithContext(context.Background())
}

func (i TransitGatewayAttachmentAwsArgs) ToTransitGatewayAttachmentAwsPtrOutputWithContext(ctx context.Context) TransitGatewayAttachmentAwsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransitGatewayAttachmentAwsOutput).ToTransitGatewayAttachmentAwsPtrOutputWithContext(ctx)
}

// TransitGatewayAttachmentAwsPtrInput is an input type that accepts TransitGatewayAttachmentAwsArgs, TransitGatewayAttachmentAwsPtr and TransitGatewayAttachmentAwsPtrOutput values.
// You can construct a concrete instance of `TransitGatewayAttachmentAwsPtrInput` via:
//
//	        TransitGatewayAttachmentAwsArgs{...}
//
//	or:
//
//	        nil
type TransitGatewayAttachmentAwsPtrInput interface {
	pulumi.Input

	ToTransitGatewayAttachmentAwsPtrOutput() TransitGatewayAttachmentAwsPtrOutput
	ToTransitGatewayAttachmentAwsPtrOutputWithContext(context.Context) TransitGatewayAttachmentAwsPtrOutput
}

type transitGatewayAttachmentAwsPtrType TransitGatewayAttachmentAwsArgs

func TransitGatewayAttachmentAwsPtr(v *TransitGatewayAttachmentAwsArgs) TransitGatewayAttachmentAwsPtrInput {
	return (*transitGatewayAttachmentAwsPtrType)(v)
}

func (*transitGatewayAttachmentAwsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransitGatewayAttachmentAws)(nil)).Elem()
}

func (i *transitGatewayAttachmentAwsPtrType) ToTransitGatewayAttachmentAwsPtrOutput() TransitGatewayAttachmentAwsPtrOutput {
	return i.ToTransitGatewayAttachmentAwsPtrOutputWithContext(context.Background())
}

func (i *transitGatewayAttachmentAwsPtrType) ToTransitGatewayAttachmentAwsPtrOutputWithContext(ctx context.Context) TransitGatewayAttachmentAwsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransitGatewayAttachmentAwsPtrOutput)
}

func (i *transitGatewayAttachmentAwsPtrType) ToOutput(ctx context.Context) pulumix.Output[*TransitGatewayAttachmentAws] {
	return pulumix.Output[*TransitGatewayAttachmentAws]{
		OutputState: i.ToTransitGatewayAttachmentAwsPtrOutputWithContext(ctx).OutputState,
	}
}

type TransitGatewayAttachmentAwsOutput struct{ *pulumi.OutputState }

func (TransitGatewayAttachmentAwsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransitGatewayAttachmentAws)(nil)).Elem()
}

func (o TransitGatewayAttachmentAwsOutput) ToTransitGatewayAttachmentAwsOutput() TransitGatewayAttachmentAwsOutput {
	return o
}

func (o TransitGatewayAttachmentAwsOutput) ToTransitGatewayAttachmentAwsOutputWithContext(ctx context.Context) TransitGatewayAttachmentAwsOutput {
	return o
}

func (o TransitGatewayAttachmentAwsOutput) ToTransitGatewayAttachmentAwsPtrOutput() TransitGatewayAttachmentAwsPtrOutput {
	return o.ToTransitGatewayAttachmentAwsPtrOutputWithContext(context.Background())
}

func (o TransitGatewayAttachmentAwsOutput) ToTransitGatewayAttachmentAwsPtrOutputWithContext(ctx context.Context) TransitGatewayAttachmentAwsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransitGatewayAttachmentAws) *TransitGatewayAttachmentAws {
		return &v
	}).(TransitGatewayAttachmentAwsPtrOutput)
}

func (o TransitGatewayAttachmentAwsOutput) ToOutput(ctx context.Context) pulumix.Output[TransitGatewayAttachmentAws] {
	return pulumix.Output[TransitGatewayAttachmentAws]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the Resource Access Manager (RAM) Resource Share of the transit gateway your Confluent Cloud network attaches to.
func (o TransitGatewayAttachmentAwsOutput) RamResourceShareArn() pulumi.StringOutput {
	return o.ApplyT(func(v TransitGatewayAttachmentAws) string { return v.RamResourceShareArn }).(pulumi.StringOutput)
}

// List of destination routes for traffic from Confluent VPC to customer VPC via Transit Gateway.
//
// > **Note:** Learn more about Transit Gateway Attachment limitations on AWS [here](https://docs.confluent.io/cloud/current/networking/aws-transit-gateway.html#limitations).
func (o TransitGatewayAttachmentAwsOutput) Routes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TransitGatewayAttachmentAws) []string { return v.Routes }).(pulumi.StringArrayOutput)
}

// (Required String) The ID of the AWS Transit Gateway VPC Attachment that attaches Confluent VPC to Transit Gateway.
func (o TransitGatewayAttachmentAwsOutput) TransitGatewayAttachmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransitGatewayAttachmentAws) *string { return v.TransitGatewayAttachmentId }).(pulumi.StringPtrOutput)
}

// The ID of the AWS Transit Gateway that you want Confluent CLoud to be attached to. Must start with `tgw-`.
func (o TransitGatewayAttachmentAwsOutput) TransitGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v TransitGatewayAttachmentAws) string { return v.TransitGatewayId }).(pulumi.StringOutput)
}

type TransitGatewayAttachmentAwsPtrOutput struct{ *pulumi.OutputState }

func (TransitGatewayAttachmentAwsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransitGatewayAttachmentAws)(nil)).Elem()
}

func (o TransitGatewayAttachmentAwsPtrOutput) ToTransitGatewayAttachmentAwsPtrOutput() TransitGatewayAttachmentAwsPtrOutput {
	return o
}

func (o TransitGatewayAttachmentAwsPtrOutput) ToTransitGatewayAttachmentAwsPtrOutputWithContext(ctx context.Context) TransitGatewayAttachmentAwsPtrOutput {
	return o
}

func (o TransitGatewayAttachmentAwsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TransitGatewayAttachmentAws] {
	return pulumix.Output[*TransitGatewayAttachmentAws]{
		OutputState: o.OutputState,
	}
}

func (o TransitGatewayAttachmentAwsPtrOutput) Elem() TransitGatewayAttachmentAwsOutput {
	return o.ApplyT(func(v *TransitGatewayAttachmentAws) TransitGatewayAttachmentAws {
		if v != nil {
			return *v
		}
		var ret TransitGatewayAttachmentAws
		return ret
	}).(TransitGatewayAttachmentAwsOutput)
}

// The Amazon Resource Name (ARN) of the Resource Access Manager (RAM) Resource Share of the transit gateway your Confluent Cloud network attaches to.
func (o TransitGatewayAttachmentAwsPtrOutput) RamResourceShareArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransitGatewayAttachmentAws) *string {
		if v == nil {
			return nil
		}
		return &v.RamResourceShareArn
	}).(pulumi.StringPtrOutput)
}

// List of destination routes for traffic from Confluent VPC to customer VPC via Transit Gateway.
//
// > **Note:** Learn more about Transit Gateway Attachment limitations on AWS [here](https://docs.confluent.io/cloud/current/networking/aws-transit-gateway.html#limitations).
func (o TransitGatewayAttachmentAwsPtrOutput) Routes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TransitGatewayAttachmentAws) []string {
		if v == nil {
			return nil
		}
		return v.Routes
	}).(pulumi.StringArrayOutput)
}

// (Required String) The ID of the AWS Transit Gateway VPC Attachment that attaches Confluent VPC to Transit Gateway.
func (o TransitGatewayAttachmentAwsPtrOutput) TransitGatewayAttachmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransitGatewayAttachmentAws) *string {
		if v == nil {
			return nil
		}
		return v.TransitGatewayAttachmentId
	}).(pulumi.StringPtrOutput)
}

// The ID of the AWS Transit Gateway that you want Confluent CLoud to be attached to. Must start with `tgw-`.
func (o TransitGatewayAttachmentAwsPtrOutput) TransitGatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransitGatewayAttachmentAws) *string {
		if v == nil {
			return nil
		}
		return &v.TransitGatewayId
	}).(pulumi.StringPtrOutput)
}

type TransitGatewayAttachmentEnvironment struct {
	// The ID of the Network that the Transit Gateway Attachment belongs to, for example, `n-abc123`.
	Id string `pulumi:"id"`
}

// TransitGatewayAttachmentEnvironmentInput is an input type that accepts TransitGatewayAttachmentEnvironmentArgs and TransitGatewayAttachmentEnvironmentOutput values.
// You can construct a concrete instance of `TransitGatewayAttachmentEnvironmentInput` via:
//
//	TransitGatewayAttachmentEnvironmentArgs{...}
type TransitGatewayAttachmentEnvironmentInput interface {
	pulumi.Input

	ToTransitGatewayAttachmentEnvironmentOutput() TransitGatewayAttachmentEnvironmentOutput
	ToTransitGatewayAttachmentEnvironmentOutputWithContext(context.Context) TransitGatewayAttachmentEnvironmentOutput
}

type TransitGatewayAttachmentEnvironmentArgs struct {
	// The ID of the Network that the Transit Gateway Attachment belongs to, for example, `n-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (TransitGatewayAttachmentEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransitGatewayAttachmentEnvironment)(nil)).Elem()
}

func (i TransitGatewayAttachmentEnvironmentArgs) ToTransitGatewayAttachmentEnvironmentOutput() TransitGatewayAttachmentEnvironmentOutput {
	return i.ToTransitGatewayAttachmentEnvironmentOutputWithContext(context.Background())
}

func (i TransitGatewayAttachmentEnvironmentArgs) ToTransitGatewayAttachmentEnvironmentOutputWithContext(ctx context.Context) TransitGatewayAttachmentEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransitGatewayAttachmentEnvironmentOutput)
}

func (i TransitGatewayAttachmentEnvironmentArgs) ToOutput(ctx context.Context) pulumix.Output[TransitGatewayAttachmentEnvironment] {
	return pulumix.Output[TransitGatewayAttachmentEnvironment]{
		OutputState: i.ToTransitGatewayAttachmentEnvironmentOutputWithContext(ctx).OutputState,
	}
}

func (i TransitGatewayAttachmentEnvironmentArgs) ToTransitGatewayAttachmentEnvironmentPtrOutput() TransitGatewayAttachmentEnvironmentPtrOutput {
	return i.ToTransitGatewayAttachmentEnvironmentPtrOutputWithContext(context.Background())
}

func (i TransitGatewayAttachmentEnvironmentArgs) ToTransitGatewayAttachmentEnvironmentPtrOutputWithContext(ctx context.Context) TransitGatewayAttachmentEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransitGatewayAttachmentEnvironmentOutput).ToTransitGatewayAttachmentEnvironmentPtrOutputWithContext(ctx)
}

// TransitGatewayAttachmentEnvironmentPtrInput is an input type that accepts TransitGatewayAttachmentEnvironmentArgs, TransitGatewayAttachmentEnvironmentPtr and TransitGatewayAttachmentEnvironmentPtrOutput values.
// You can construct a concrete instance of `TransitGatewayAttachmentEnvironmentPtrInput` via:
//
//	        TransitGatewayAttachmentEnvironmentArgs{...}
//
//	or:
//
//	        nil
type TransitGatewayAttachmentEnvironmentPtrInput interface {
	pulumi.Input

	ToTransitGatewayAttachmentEnvironmentPtrOutput() TransitGatewayAttachmentEnvironmentPtrOutput
	ToTransitGatewayAttachmentEnvironmentPtrOutputWithContext(context.Context) TransitGatewayAttachmentEnvironmentPtrOutput
}

type transitGatewayAttachmentEnvironmentPtrType TransitGatewayAttachmentEnvironmentArgs

func TransitGatewayAttachmentEnvironmentPtr(v *TransitGatewayAttachmentEnvironmentArgs) TransitGatewayAttachmentEnvironmentPtrInput {
	return (*transitGatewayAttachmentEnvironmentPtrType)(v)
}

func (*transitGatewayAttachmentEnvironmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransitGatewayAttachmentEnvironment)(nil)).Elem()
}

func (i *transitGatewayAttachmentEnvironmentPtrType) ToTransitGatewayAttachmentEnvironmentPtrOutput() TransitGatewayAttachmentEnvironmentPtrOutput {
	return i.ToTransitGatewayAttachmentEnvironmentPtrOutputWithContext(context.Background())
}

func (i *transitGatewayAttachmentEnvironmentPtrType) ToTransitGatewayAttachmentEnvironmentPtrOutputWithContext(ctx context.Context) TransitGatewayAttachmentEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransitGatewayAttachmentEnvironmentPtrOutput)
}

func (i *transitGatewayAttachmentEnvironmentPtrType) ToOutput(ctx context.Context) pulumix.Output[*TransitGatewayAttachmentEnvironment] {
	return pulumix.Output[*TransitGatewayAttachmentEnvironment]{
		OutputState: i.ToTransitGatewayAttachmentEnvironmentPtrOutputWithContext(ctx).OutputState,
	}
}

type TransitGatewayAttachmentEnvironmentOutput struct{ *pulumi.OutputState }

func (TransitGatewayAttachmentEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransitGatewayAttachmentEnvironment)(nil)).Elem()
}

func (o TransitGatewayAttachmentEnvironmentOutput) ToTransitGatewayAttachmentEnvironmentOutput() TransitGatewayAttachmentEnvironmentOutput {
	return o
}

func (o TransitGatewayAttachmentEnvironmentOutput) ToTransitGatewayAttachmentEnvironmentOutputWithContext(ctx context.Context) TransitGatewayAttachmentEnvironmentOutput {
	return o
}

func (o TransitGatewayAttachmentEnvironmentOutput) ToTransitGatewayAttachmentEnvironmentPtrOutput() TransitGatewayAttachmentEnvironmentPtrOutput {
	return o.ToTransitGatewayAttachmentEnvironmentPtrOutputWithContext(context.Background())
}

func (o TransitGatewayAttachmentEnvironmentOutput) ToTransitGatewayAttachmentEnvironmentPtrOutputWithContext(ctx context.Context) TransitGatewayAttachmentEnvironmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransitGatewayAttachmentEnvironment) *TransitGatewayAttachmentEnvironment {
		return &v
	}).(TransitGatewayAttachmentEnvironmentPtrOutput)
}

func (o TransitGatewayAttachmentEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[TransitGatewayAttachmentEnvironment] {
	return pulumix.Output[TransitGatewayAttachmentEnvironment]{
		OutputState: o.OutputState,
	}
}

// The ID of the Network that the Transit Gateway Attachment belongs to, for example, `n-abc123`.
func (o TransitGatewayAttachmentEnvironmentOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v TransitGatewayAttachmentEnvironment) string { return v.Id }).(pulumi.StringOutput)
}

type TransitGatewayAttachmentEnvironmentPtrOutput struct{ *pulumi.OutputState }

func (TransitGatewayAttachmentEnvironmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransitGatewayAttachmentEnvironment)(nil)).Elem()
}

func (o TransitGatewayAttachmentEnvironmentPtrOutput) ToTransitGatewayAttachmentEnvironmentPtrOutput() TransitGatewayAttachmentEnvironmentPtrOutput {
	return o
}

func (o TransitGatewayAttachmentEnvironmentPtrOutput) ToTransitGatewayAttachmentEnvironmentPtrOutputWithContext(ctx context.Context) TransitGatewayAttachmentEnvironmentPtrOutput {
	return o
}

func (o TransitGatewayAttachmentEnvironmentPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TransitGatewayAttachmentEnvironment] {
	return pulumix.Output[*TransitGatewayAttachmentEnvironment]{
		OutputState: o.OutputState,
	}
}

func (o TransitGatewayAttachmentEnvironmentPtrOutput) Elem() TransitGatewayAttachmentEnvironmentOutput {
	return o.ApplyT(func(v *TransitGatewayAttachmentEnvironment) TransitGatewayAttachmentEnvironment {
		if v != nil {
			return *v
		}
		var ret TransitGatewayAttachmentEnvironment
		return ret
	}).(TransitGatewayAttachmentEnvironmentOutput)
}

// The ID of the Network that the Transit Gateway Attachment belongs to, for example, `n-abc123`.
func (o TransitGatewayAttachmentEnvironmentPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransitGatewayAttachmentEnvironment) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type TransitGatewayAttachmentNetwork struct {
	// The ID of the Network that the Transit Gateway Attachment belongs to, for example, `n-abc123`.
	Id string `pulumi:"id"`
}

// TransitGatewayAttachmentNetworkInput is an input type that accepts TransitGatewayAttachmentNetworkArgs and TransitGatewayAttachmentNetworkOutput values.
// You can construct a concrete instance of `TransitGatewayAttachmentNetworkInput` via:
//
//	TransitGatewayAttachmentNetworkArgs{...}
type TransitGatewayAttachmentNetworkInput interface {
	pulumi.Input

	ToTransitGatewayAttachmentNetworkOutput() TransitGatewayAttachmentNetworkOutput
	ToTransitGatewayAttachmentNetworkOutputWithContext(context.Context) TransitGatewayAttachmentNetworkOutput
}

type TransitGatewayAttachmentNetworkArgs struct {
	// The ID of the Network that the Transit Gateway Attachment belongs to, for example, `n-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (TransitGatewayAttachmentNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransitGatewayAttachmentNetwork)(nil)).Elem()
}

func (i TransitGatewayAttachmentNetworkArgs) ToTransitGatewayAttachmentNetworkOutput() TransitGatewayAttachmentNetworkOutput {
	return i.ToTransitGatewayAttachmentNetworkOutputWithContext(context.Background())
}

func (i TransitGatewayAttachmentNetworkArgs) ToTransitGatewayAttachmentNetworkOutputWithContext(ctx context.Context) TransitGatewayAttachmentNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransitGatewayAttachmentNetworkOutput)
}

func (i TransitGatewayAttachmentNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[TransitGatewayAttachmentNetwork] {
	return pulumix.Output[TransitGatewayAttachmentNetwork]{
		OutputState: i.ToTransitGatewayAttachmentNetworkOutputWithContext(ctx).OutputState,
	}
}

func (i TransitGatewayAttachmentNetworkArgs) ToTransitGatewayAttachmentNetworkPtrOutput() TransitGatewayAttachmentNetworkPtrOutput {
	return i.ToTransitGatewayAttachmentNetworkPtrOutputWithContext(context.Background())
}

func (i TransitGatewayAttachmentNetworkArgs) ToTransitGatewayAttachmentNetworkPtrOutputWithContext(ctx context.Context) TransitGatewayAttachmentNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransitGatewayAttachmentNetworkOutput).ToTransitGatewayAttachmentNetworkPtrOutputWithContext(ctx)
}

// TransitGatewayAttachmentNetworkPtrInput is an input type that accepts TransitGatewayAttachmentNetworkArgs, TransitGatewayAttachmentNetworkPtr and TransitGatewayAttachmentNetworkPtrOutput values.
// You can construct a concrete instance of `TransitGatewayAttachmentNetworkPtrInput` via:
//
//	        TransitGatewayAttachmentNetworkArgs{...}
//
//	or:
//
//	        nil
type TransitGatewayAttachmentNetworkPtrInput interface {
	pulumi.Input

	ToTransitGatewayAttachmentNetworkPtrOutput() TransitGatewayAttachmentNetworkPtrOutput
	ToTransitGatewayAttachmentNetworkPtrOutputWithContext(context.Context) TransitGatewayAttachmentNetworkPtrOutput
}

type transitGatewayAttachmentNetworkPtrType TransitGatewayAttachmentNetworkArgs

func TransitGatewayAttachmentNetworkPtr(v *TransitGatewayAttachmentNetworkArgs) TransitGatewayAttachmentNetworkPtrInput {
	return (*transitGatewayAttachmentNetworkPtrType)(v)
}

func (*transitGatewayAttachmentNetworkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransitGatewayAttachmentNetwork)(nil)).Elem()
}

func (i *transitGatewayAttachmentNetworkPtrType) ToTransitGatewayAttachmentNetworkPtrOutput() TransitGatewayAttachmentNetworkPtrOutput {
	return i.ToTransitGatewayAttachmentNetworkPtrOutputWithContext(context.Background())
}

func (i *transitGatewayAttachmentNetworkPtrType) ToTransitGatewayAttachmentNetworkPtrOutputWithContext(ctx context.Context) TransitGatewayAttachmentNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransitGatewayAttachmentNetworkPtrOutput)
}

func (i *transitGatewayAttachmentNetworkPtrType) ToOutput(ctx context.Context) pulumix.Output[*TransitGatewayAttachmentNetwork] {
	return pulumix.Output[*TransitGatewayAttachmentNetwork]{
		OutputState: i.ToTransitGatewayAttachmentNetworkPtrOutputWithContext(ctx).OutputState,
	}
}

type TransitGatewayAttachmentNetworkOutput struct{ *pulumi.OutputState }

func (TransitGatewayAttachmentNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransitGatewayAttachmentNetwork)(nil)).Elem()
}

func (o TransitGatewayAttachmentNetworkOutput) ToTransitGatewayAttachmentNetworkOutput() TransitGatewayAttachmentNetworkOutput {
	return o
}

func (o TransitGatewayAttachmentNetworkOutput) ToTransitGatewayAttachmentNetworkOutputWithContext(ctx context.Context) TransitGatewayAttachmentNetworkOutput {
	return o
}

func (o TransitGatewayAttachmentNetworkOutput) ToTransitGatewayAttachmentNetworkPtrOutput() TransitGatewayAttachmentNetworkPtrOutput {
	return o.ToTransitGatewayAttachmentNetworkPtrOutputWithContext(context.Background())
}

func (o TransitGatewayAttachmentNetworkOutput) ToTransitGatewayAttachmentNetworkPtrOutputWithContext(ctx context.Context) TransitGatewayAttachmentNetworkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransitGatewayAttachmentNetwork) *TransitGatewayAttachmentNetwork {
		return &v
	}).(TransitGatewayAttachmentNetworkPtrOutput)
}

func (o TransitGatewayAttachmentNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[TransitGatewayAttachmentNetwork] {
	return pulumix.Output[TransitGatewayAttachmentNetwork]{
		OutputState: o.OutputState,
	}
}

// The ID of the Network that the Transit Gateway Attachment belongs to, for example, `n-abc123`.
func (o TransitGatewayAttachmentNetworkOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v TransitGatewayAttachmentNetwork) string { return v.Id }).(pulumi.StringOutput)
}

type TransitGatewayAttachmentNetworkPtrOutput struct{ *pulumi.OutputState }

func (TransitGatewayAttachmentNetworkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransitGatewayAttachmentNetwork)(nil)).Elem()
}

func (o TransitGatewayAttachmentNetworkPtrOutput) ToTransitGatewayAttachmentNetworkPtrOutput() TransitGatewayAttachmentNetworkPtrOutput {
	return o
}

func (o TransitGatewayAttachmentNetworkPtrOutput) ToTransitGatewayAttachmentNetworkPtrOutputWithContext(ctx context.Context) TransitGatewayAttachmentNetworkPtrOutput {
	return o
}

func (o TransitGatewayAttachmentNetworkPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TransitGatewayAttachmentNetwork] {
	return pulumix.Output[*TransitGatewayAttachmentNetwork]{
		OutputState: o.OutputState,
	}
}

func (o TransitGatewayAttachmentNetworkPtrOutput) Elem() TransitGatewayAttachmentNetworkOutput {
	return o.ApplyT(func(v *TransitGatewayAttachmentNetwork) TransitGatewayAttachmentNetwork {
		if v != nil {
			return *v
		}
		var ret TransitGatewayAttachmentNetwork
		return ret
	}).(TransitGatewayAttachmentNetworkOutput)
}

// The ID of the Network that the Transit Gateway Attachment belongs to, for example, `n-abc123`.
func (o TransitGatewayAttachmentNetworkPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransitGatewayAttachmentNetwork) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type GetBusinessMetadataAttributeDefinition struct {
	// (Optional String) The default value of this attribute.
	DefaultValue string `pulumi:"defaultValue"`
	// (Optional String) The description of this attribute.
	Description string `pulumi:"description"`
	// (Optional Boolean) An optional flag to control whether the attribute should be optional or required.
	IsOptional bool `pulumi:"isOptional"`
	// The name of the Business Metadata, for example, `PII`. The name must not be empty and consist of a letter followed by a sequence of letter, number, space, or _ characters.
	//
	// > **Note:** A Schema Registry API key consists of a key and a secret. Schema Registry API keys are required to interact with Schema Registry clusters in Confluent Cloud. Each Schema Registry API key is valid for one specific Schema Registry cluster.
	Name string `pulumi:"name"`
	// (Optional Map) Block for the attribute options:
	Options map[string]string `pulumi:"options"`
	// (Required String) The type of the attribute, it always returns `string`.
	Type string `pulumi:"type"`
}

// GetBusinessMetadataAttributeDefinitionInput is an input type that accepts GetBusinessMetadataAttributeDefinitionArgs and GetBusinessMetadataAttributeDefinitionOutput values.
// You can construct a concrete instance of `GetBusinessMetadataAttributeDefinitionInput` via:
//
//	GetBusinessMetadataAttributeDefinitionArgs{...}
type GetBusinessMetadataAttributeDefinitionInput interface {
	pulumi.Input

	ToGetBusinessMetadataAttributeDefinitionOutput() GetBusinessMetadataAttributeDefinitionOutput
	ToGetBusinessMetadataAttributeDefinitionOutputWithContext(context.Context) GetBusinessMetadataAttributeDefinitionOutput
}

type GetBusinessMetadataAttributeDefinitionArgs struct {
	// (Optional String) The default value of this attribute.
	DefaultValue pulumi.StringInput `pulumi:"defaultValue"`
	// (Optional String) The description of this attribute.
	Description pulumi.StringInput `pulumi:"description"`
	// (Optional Boolean) An optional flag to control whether the attribute should be optional or required.
	IsOptional pulumi.BoolInput `pulumi:"isOptional"`
	// The name of the Business Metadata, for example, `PII`. The name must not be empty and consist of a letter followed by a sequence of letter, number, space, or _ characters.
	//
	// > **Note:** A Schema Registry API key consists of a key and a secret. Schema Registry API keys are required to interact with Schema Registry clusters in Confluent Cloud. Each Schema Registry API key is valid for one specific Schema Registry cluster.
	Name pulumi.StringInput `pulumi:"name"`
	// (Optional Map) Block for the attribute options:
	Options pulumi.StringMapInput `pulumi:"options"`
	// (Required String) The type of the attribute, it always returns `string`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetBusinessMetadataAttributeDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBusinessMetadataAttributeDefinition)(nil)).Elem()
}

func (i GetBusinessMetadataAttributeDefinitionArgs) ToGetBusinessMetadataAttributeDefinitionOutput() GetBusinessMetadataAttributeDefinitionOutput {
	return i.ToGetBusinessMetadataAttributeDefinitionOutputWithContext(context.Background())
}

func (i GetBusinessMetadataAttributeDefinitionArgs) ToGetBusinessMetadataAttributeDefinitionOutputWithContext(ctx context.Context) GetBusinessMetadataAttributeDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBusinessMetadataAttributeDefinitionOutput)
}

func (i GetBusinessMetadataAttributeDefinitionArgs) ToOutput(ctx context.Context) pulumix.Output[GetBusinessMetadataAttributeDefinition] {
	return pulumix.Output[GetBusinessMetadataAttributeDefinition]{
		OutputState: i.ToGetBusinessMetadataAttributeDefinitionOutputWithContext(ctx).OutputState,
	}
}

// GetBusinessMetadataAttributeDefinitionArrayInput is an input type that accepts GetBusinessMetadataAttributeDefinitionArray and GetBusinessMetadataAttributeDefinitionArrayOutput values.
// You can construct a concrete instance of `GetBusinessMetadataAttributeDefinitionArrayInput` via:
//
//	GetBusinessMetadataAttributeDefinitionArray{ GetBusinessMetadataAttributeDefinitionArgs{...} }
type GetBusinessMetadataAttributeDefinitionArrayInput interface {
	pulumi.Input

	ToGetBusinessMetadataAttributeDefinitionArrayOutput() GetBusinessMetadataAttributeDefinitionArrayOutput
	ToGetBusinessMetadataAttributeDefinitionArrayOutputWithContext(context.Context) GetBusinessMetadataAttributeDefinitionArrayOutput
}

type GetBusinessMetadataAttributeDefinitionArray []GetBusinessMetadataAttributeDefinitionInput

func (GetBusinessMetadataAttributeDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBusinessMetadataAttributeDefinition)(nil)).Elem()
}

func (i GetBusinessMetadataAttributeDefinitionArray) ToGetBusinessMetadataAttributeDefinitionArrayOutput() GetBusinessMetadataAttributeDefinitionArrayOutput {
	return i.ToGetBusinessMetadataAttributeDefinitionArrayOutputWithContext(context.Background())
}

func (i GetBusinessMetadataAttributeDefinitionArray) ToGetBusinessMetadataAttributeDefinitionArrayOutputWithContext(ctx context.Context) GetBusinessMetadataAttributeDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBusinessMetadataAttributeDefinitionArrayOutput)
}

func (i GetBusinessMetadataAttributeDefinitionArray) ToOutput(ctx context.Context) pulumix.Output[[]GetBusinessMetadataAttributeDefinition] {
	return pulumix.Output[[]GetBusinessMetadataAttributeDefinition]{
		OutputState: i.ToGetBusinessMetadataAttributeDefinitionArrayOutputWithContext(ctx).OutputState,
	}
}

type GetBusinessMetadataAttributeDefinitionOutput struct{ *pulumi.OutputState }

func (GetBusinessMetadataAttributeDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBusinessMetadataAttributeDefinition)(nil)).Elem()
}

func (o GetBusinessMetadataAttributeDefinitionOutput) ToGetBusinessMetadataAttributeDefinitionOutput() GetBusinessMetadataAttributeDefinitionOutput {
	return o
}

func (o GetBusinessMetadataAttributeDefinitionOutput) ToGetBusinessMetadataAttributeDefinitionOutputWithContext(ctx context.Context) GetBusinessMetadataAttributeDefinitionOutput {
	return o
}

func (o GetBusinessMetadataAttributeDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[GetBusinessMetadataAttributeDefinition] {
	return pulumix.Output[GetBusinessMetadataAttributeDefinition]{
		OutputState: o.OutputState,
	}
}

// (Optional String) The default value of this attribute.
func (o GetBusinessMetadataAttributeDefinitionOutput) DefaultValue() pulumi.StringOutput {
	return o.ApplyT(func(v GetBusinessMetadataAttributeDefinition) string { return v.DefaultValue }).(pulumi.StringOutput)
}

// (Optional String) The description of this attribute.
func (o GetBusinessMetadataAttributeDefinitionOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetBusinessMetadataAttributeDefinition) string { return v.Description }).(pulumi.StringOutput)
}

// (Optional Boolean) An optional flag to control whether the attribute should be optional or required.
func (o GetBusinessMetadataAttributeDefinitionOutput) IsOptional() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBusinessMetadataAttributeDefinition) bool { return v.IsOptional }).(pulumi.BoolOutput)
}

// The name of the Business Metadata, for example, `PII`. The name must not be empty and consist of a letter followed by a sequence of letter, number, space, or _ characters.
//
// > **Note:** A Schema Registry API key consists of a key and a secret. Schema Registry API keys are required to interact with Schema Registry clusters in Confluent Cloud. Each Schema Registry API key is valid for one specific Schema Registry cluster.
func (o GetBusinessMetadataAttributeDefinitionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetBusinessMetadataAttributeDefinition) string { return v.Name }).(pulumi.StringOutput)
}

// (Optional Map) Block for the attribute options:
func (o GetBusinessMetadataAttributeDefinitionOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetBusinessMetadataAttributeDefinition) map[string]string { return v.Options }).(pulumi.StringMapOutput)
}

// (Required String) The type of the attribute, it always returns `string`.
func (o GetBusinessMetadataAttributeDefinitionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetBusinessMetadataAttributeDefinition) string { return v.Type }).(pulumi.StringOutput)
}

type GetBusinessMetadataAttributeDefinitionArrayOutput struct{ *pulumi.OutputState }

func (GetBusinessMetadataAttributeDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBusinessMetadataAttributeDefinition)(nil)).Elem()
}

func (o GetBusinessMetadataAttributeDefinitionArrayOutput) ToGetBusinessMetadataAttributeDefinitionArrayOutput() GetBusinessMetadataAttributeDefinitionArrayOutput {
	return o
}

func (o GetBusinessMetadataAttributeDefinitionArrayOutput) ToGetBusinessMetadataAttributeDefinitionArrayOutputWithContext(ctx context.Context) GetBusinessMetadataAttributeDefinitionArrayOutput {
	return o
}

func (o GetBusinessMetadataAttributeDefinitionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetBusinessMetadataAttributeDefinition] {
	return pulumix.Output[[]GetBusinessMetadataAttributeDefinition]{
		OutputState: o.OutputState,
	}
}

func (o GetBusinessMetadataAttributeDefinitionArrayOutput) Index(i pulumi.IntInput) GetBusinessMetadataAttributeDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBusinessMetadataAttributeDefinition {
		return vs[0].([]GetBusinessMetadataAttributeDefinition)[vs[1].(int)]
	}).(GetBusinessMetadataAttributeDefinitionOutput)
}

type GetBusinessMetadataBindingCredentials struct {
	// The Schema Registry API Key.
	Key string `pulumi:"key"`
	// The Schema Registry API Secret.
	//
	// > **Note:** A Schema Registry API key consists of a key and a secret. Schema Registry API keys are required to interact with Schema Registry clusters in Confluent Cloud. Each Schema Registry API key is valid for one specific Schema Registry cluster.
	Secret string `pulumi:"secret"`
}

// GetBusinessMetadataBindingCredentialsInput is an input type that accepts GetBusinessMetadataBindingCredentialsArgs and GetBusinessMetadataBindingCredentialsOutput values.
// You can construct a concrete instance of `GetBusinessMetadataBindingCredentialsInput` via:
//
//	GetBusinessMetadataBindingCredentialsArgs{...}
type GetBusinessMetadataBindingCredentialsInput interface {
	pulumi.Input

	ToGetBusinessMetadataBindingCredentialsOutput() GetBusinessMetadataBindingCredentialsOutput
	ToGetBusinessMetadataBindingCredentialsOutputWithContext(context.Context) GetBusinessMetadataBindingCredentialsOutput
}

type GetBusinessMetadataBindingCredentialsArgs struct {
	// The Schema Registry API Key.
	Key pulumi.StringInput `pulumi:"key"`
	// The Schema Registry API Secret.
	//
	// > **Note:** A Schema Registry API key consists of a key and a secret. Schema Registry API keys are required to interact with Schema Registry clusters in Confluent Cloud. Each Schema Registry API key is valid for one specific Schema Registry cluster.
	Secret pulumi.StringInput `pulumi:"secret"`
}

func (GetBusinessMetadataBindingCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBusinessMetadataBindingCredentials)(nil)).Elem()
}

func (i GetBusinessMetadataBindingCredentialsArgs) ToGetBusinessMetadataBindingCredentialsOutput() GetBusinessMetadataBindingCredentialsOutput {
	return i.ToGetBusinessMetadataBindingCredentialsOutputWithContext(context.Background())
}

func (i GetBusinessMetadataBindingCredentialsArgs) ToGetBusinessMetadataBindingCredentialsOutputWithContext(ctx context.Context) GetBusinessMetadataBindingCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBusinessMetadataBindingCredentialsOutput)
}

func (i GetBusinessMetadataBindingCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[GetBusinessMetadataBindingCredentials] {
	return pulumix.Output[GetBusinessMetadataBindingCredentials]{
		OutputState: i.ToGetBusinessMetadataBindingCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i GetBusinessMetadataBindingCredentialsArgs) ToGetBusinessMetadataBindingCredentialsPtrOutput() GetBusinessMetadataBindingCredentialsPtrOutput {
	return i.ToGetBusinessMetadataBindingCredentialsPtrOutputWithContext(context.Background())
}

func (i GetBusinessMetadataBindingCredentialsArgs) ToGetBusinessMetadataBindingCredentialsPtrOutputWithContext(ctx context.Context) GetBusinessMetadataBindingCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBusinessMetadataBindingCredentialsOutput).ToGetBusinessMetadataBindingCredentialsPtrOutputWithContext(ctx)
}

// GetBusinessMetadataBindingCredentialsPtrInput is an input type that accepts GetBusinessMetadataBindingCredentialsArgs, GetBusinessMetadataBindingCredentialsPtr and GetBusinessMetadataBindingCredentialsPtrOutput values.
// You can construct a concrete instance of `GetBusinessMetadataBindingCredentialsPtrInput` via:
//
//	        GetBusinessMetadataBindingCredentialsArgs{...}
//
//	or:
//
//	        nil
type GetBusinessMetadataBindingCredentialsPtrInput interface {
	pulumi.Input

	ToGetBusinessMetadataBindingCredentialsPtrOutput() GetBusinessMetadataBindingCredentialsPtrOutput
	ToGetBusinessMetadataBindingCredentialsPtrOutputWithContext(context.Context) GetBusinessMetadataBindingCredentialsPtrOutput
}

type getBusinessMetadataBindingCredentialsPtrType GetBusinessMetadataBindingCredentialsArgs

func GetBusinessMetadataBindingCredentialsPtr(v *GetBusinessMetadataBindingCredentialsArgs) GetBusinessMetadataBindingCredentialsPtrInput {
	return (*getBusinessMetadataBindingCredentialsPtrType)(v)
}

func (*getBusinessMetadataBindingCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetBusinessMetadataBindingCredentials)(nil)).Elem()
}

func (i *getBusinessMetadataBindingCredentialsPtrType) ToGetBusinessMetadataBindingCredentialsPtrOutput() GetBusinessMetadataBindingCredentialsPtrOutput {
	return i.ToGetBusinessMetadataBindingCredentialsPtrOutputWithContext(context.Background())
}

func (i *getBusinessMetadataBindingCredentialsPtrType) ToGetBusinessMetadataBindingCredentialsPtrOutputWithContext(ctx context.Context) GetBusinessMetadataBindingCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBusinessMetadataBindingCredentialsPtrOutput)
}

func (i *getBusinessMetadataBindingCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*GetBusinessMetadataBindingCredentials] {
	return pulumix.Output[*GetBusinessMetadataBindingCredentials]{
		OutputState: i.ToGetBusinessMetadataBindingCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

type GetBusinessMetadataBindingCredentialsOutput struct{ *pulumi.OutputState }

func (GetBusinessMetadataBindingCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBusinessMetadataBindingCredentials)(nil)).Elem()
}

func (o GetBusinessMetadataBindingCredentialsOutput) ToGetBusinessMetadataBindingCredentialsOutput() GetBusinessMetadataBindingCredentialsOutput {
	return o
}

func (o GetBusinessMetadataBindingCredentialsOutput) ToGetBusinessMetadataBindingCredentialsOutputWithContext(ctx context.Context) GetBusinessMetadataBindingCredentialsOutput {
	return o
}

func (o GetBusinessMetadataBindingCredentialsOutput) ToGetBusinessMetadataBindingCredentialsPtrOutput() GetBusinessMetadataBindingCredentialsPtrOutput {
	return o.ToGetBusinessMetadataBindingCredentialsPtrOutputWithContext(context.Background())
}

func (o GetBusinessMetadataBindingCredentialsOutput) ToGetBusinessMetadataBindingCredentialsPtrOutputWithContext(ctx context.Context) GetBusinessMetadataBindingCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetBusinessMetadataBindingCredentials) *GetBusinessMetadataBindingCredentials {
		return &v
	}).(GetBusinessMetadataBindingCredentialsPtrOutput)
}

func (o GetBusinessMetadataBindingCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[GetBusinessMetadataBindingCredentials] {
	return pulumix.Output[GetBusinessMetadataBindingCredentials]{
		OutputState: o.OutputState,
	}
}

// The Schema Registry API Key.
func (o GetBusinessMetadataBindingCredentialsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetBusinessMetadataBindingCredentials) string { return v.Key }).(pulumi.StringOutput)
}

// The Schema Registry API Secret.
//
// > **Note:** A Schema Registry API key consists of a key and a secret. Schema Registry API keys are required to interact with Schema Registry clusters in Confluent Cloud. Each Schema Registry API key is valid for one specific Schema Registry cluster.
func (o GetBusinessMetadataBindingCredentialsOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v GetBusinessMetadataBindingCredentials) string { return v.Secret }).(pulumi.StringOutput)
}

type GetBusinessMetadataBindingCredentialsPtrOutput struct{ *pulumi.OutputState }

func (GetBusinessMetadataBindingCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetBusinessMetadataBindingCredentials)(nil)).Elem()
}

func (o GetBusinessMetadataBindingCredentialsPtrOutput) ToGetBusinessMetadataBindingCredentialsPtrOutput() GetBusinessMetadataBindingCredentialsPtrOutput {
	return o
}

func (o GetBusinessMetadataBindingCredentialsPtrOutput) ToGetBusinessMetadataBindingCredentialsPtrOutputWithContext(ctx context.Context) GetBusinessMetadataBindingCredentialsPtrOutput {
	return o
}

func (o GetBusinessMetadataBindingCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GetBusinessMetadataBindingCredentials] {
	return pulumix.Output[*GetBusinessMetadataBindingCredentials]{
		OutputState: o.OutputState,
	}
}

func (o GetBusinessMetadataBindingCredentialsPtrOutput) Elem() GetBusinessMetadataBindingCredentialsOutput {
	return o.ApplyT(func(v *GetBusinessMetadataBindingCredentials) GetBusinessMetadataBindingCredentials {
		if v != nil {
			return *v
		}
		var ret GetBusinessMetadataBindingCredentials
		return ret
	}).(GetBusinessMetadataBindingCredentialsOutput)
}

// The Schema Registry API Key.
func (o GetBusinessMetadataBindingCredentialsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetBusinessMetadataBindingCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// The Schema Registry API Secret.
//
// > **Note:** A Schema Registry API key consists of a key and a secret. Schema Registry API keys are required to interact with Schema Registry clusters in Confluent Cloud. Each Schema Registry API key is valid for one specific Schema Registry cluster.
func (o GetBusinessMetadataBindingCredentialsPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetBusinessMetadataBindingCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Secret
	}).(pulumi.StringPtrOutput)
}

type GetBusinessMetadataBindingSchemaRegistryCluster struct {
	// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
	Id string `pulumi:"id"`
}

// GetBusinessMetadataBindingSchemaRegistryClusterInput is an input type that accepts GetBusinessMetadataBindingSchemaRegistryClusterArgs and GetBusinessMetadataBindingSchemaRegistryClusterOutput values.
// You can construct a concrete instance of `GetBusinessMetadataBindingSchemaRegistryClusterInput` via:
//
//	GetBusinessMetadataBindingSchemaRegistryClusterArgs{...}
type GetBusinessMetadataBindingSchemaRegistryClusterInput interface {
	pulumi.Input

	ToGetBusinessMetadataBindingSchemaRegistryClusterOutput() GetBusinessMetadataBindingSchemaRegistryClusterOutput
	ToGetBusinessMetadataBindingSchemaRegistryClusterOutputWithContext(context.Context) GetBusinessMetadataBindingSchemaRegistryClusterOutput
}

type GetBusinessMetadataBindingSchemaRegistryClusterArgs struct {
	// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetBusinessMetadataBindingSchemaRegistryClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBusinessMetadataBindingSchemaRegistryCluster)(nil)).Elem()
}

func (i GetBusinessMetadataBindingSchemaRegistryClusterArgs) ToGetBusinessMetadataBindingSchemaRegistryClusterOutput() GetBusinessMetadataBindingSchemaRegistryClusterOutput {
	return i.ToGetBusinessMetadataBindingSchemaRegistryClusterOutputWithContext(context.Background())
}

func (i GetBusinessMetadataBindingSchemaRegistryClusterArgs) ToGetBusinessMetadataBindingSchemaRegistryClusterOutputWithContext(ctx context.Context) GetBusinessMetadataBindingSchemaRegistryClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBusinessMetadataBindingSchemaRegistryClusterOutput)
}

func (i GetBusinessMetadataBindingSchemaRegistryClusterArgs) ToOutput(ctx context.Context) pulumix.Output[GetBusinessMetadataBindingSchemaRegistryCluster] {
	return pulumix.Output[GetBusinessMetadataBindingSchemaRegistryCluster]{
		OutputState: i.ToGetBusinessMetadataBindingSchemaRegistryClusterOutputWithContext(ctx).OutputState,
	}
}

func (i GetBusinessMetadataBindingSchemaRegistryClusterArgs) ToGetBusinessMetadataBindingSchemaRegistryClusterPtrOutput() GetBusinessMetadataBindingSchemaRegistryClusterPtrOutput {
	return i.ToGetBusinessMetadataBindingSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (i GetBusinessMetadataBindingSchemaRegistryClusterArgs) ToGetBusinessMetadataBindingSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetBusinessMetadataBindingSchemaRegistryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBusinessMetadataBindingSchemaRegistryClusterOutput).ToGetBusinessMetadataBindingSchemaRegistryClusterPtrOutputWithContext(ctx)
}

// GetBusinessMetadataBindingSchemaRegistryClusterPtrInput is an input type that accepts GetBusinessMetadataBindingSchemaRegistryClusterArgs, GetBusinessMetadataBindingSchemaRegistryClusterPtr and GetBusinessMetadataBindingSchemaRegistryClusterPtrOutput values.
// You can construct a concrete instance of `GetBusinessMetadataBindingSchemaRegistryClusterPtrInput` via:
//
//	        GetBusinessMetadataBindingSchemaRegistryClusterArgs{...}
//
//	or:
//
//	        nil
type GetBusinessMetadataBindingSchemaRegistryClusterPtrInput interface {
	pulumi.Input

	ToGetBusinessMetadataBindingSchemaRegistryClusterPtrOutput() GetBusinessMetadataBindingSchemaRegistryClusterPtrOutput
	ToGetBusinessMetadataBindingSchemaRegistryClusterPtrOutputWithContext(context.Context) GetBusinessMetadataBindingSchemaRegistryClusterPtrOutput
}

type getBusinessMetadataBindingSchemaRegistryClusterPtrType GetBusinessMetadataBindingSchemaRegistryClusterArgs

func GetBusinessMetadataBindingSchemaRegistryClusterPtr(v *GetBusinessMetadataBindingSchemaRegistryClusterArgs) GetBusinessMetadataBindingSchemaRegistryClusterPtrInput {
	return (*getBusinessMetadataBindingSchemaRegistryClusterPtrType)(v)
}

func (*getBusinessMetadataBindingSchemaRegistryClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetBusinessMetadataBindingSchemaRegistryCluster)(nil)).Elem()
}

func (i *getBusinessMetadataBindingSchemaRegistryClusterPtrType) ToGetBusinessMetadataBindingSchemaRegistryClusterPtrOutput() GetBusinessMetadataBindingSchemaRegistryClusterPtrOutput {
	return i.ToGetBusinessMetadataBindingSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (i *getBusinessMetadataBindingSchemaRegistryClusterPtrType) ToGetBusinessMetadataBindingSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetBusinessMetadataBindingSchemaRegistryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBusinessMetadataBindingSchemaRegistryClusterPtrOutput)
}

func (i *getBusinessMetadataBindingSchemaRegistryClusterPtrType) ToOutput(ctx context.Context) pulumix.Output[*GetBusinessMetadataBindingSchemaRegistryCluster] {
	return pulumix.Output[*GetBusinessMetadataBindingSchemaRegistryCluster]{
		OutputState: i.ToGetBusinessMetadataBindingSchemaRegistryClusterPtrOutputWithContext(ctx).OutputState,
	}
}

type GetBusinessMetadataBindingSchemaRegistryClusterOutput struct{ *pulumi.OutputState }

func (GetBusinessMetadataBindingSchemaRegistryClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBusinessMetadataBindingSchemaRegistryCluster)(nil)).Elem()
}

func (o GetBusinessMetadataBindingSchemaRegistryClusterOutput) ToGetBusinessMetadataBindingSchemaRegistryClusterOutput() GetBusinessMetadataBindingSchemaRegistryClusterOutput {
	return o
}

func (o GetBusinessMetadataBindingSchemaRegistryClusterOutput) ToGetBusinessMetadataBindingSchemaRegistryClusterOutputWithContext(ctx context.Context) GetBusinessMetadataBindingSchemaRegistryClusterOutput {
	return o
}

func (o GetBusinessMetadataBindingSchemaRegistryClusterOutput) ToGetBusinessMetadataBindingSchemaRegistryClusterPtrOutput() GetBusinessMetadataBindingSchemaRegistryClusterPtrOutput {
	return o.ToGetBusinessMetadataBindingSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (o GetBusinessMetadataBindingSchemaRegistryClusterOutput) ToGetBusinessMetadataBindingSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetBusinessMetadataBindingSchemaRegistryClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetBusinessMetadataBindingSchemaRegistryCluster) *GetBusinessMetadataBindingSchemaRegistryCluster {
		return &v
	}).(GetBusinessMetadataBindingSchemaRegistryClusterPtrOutput)
}

func (o GetBusinessMetadataBindingSchemaRegistryClusterOutput) ToOutput(ctx context.Context) pulumix.Output[GetBusinessMetadataBindingSchemaRegistryCluster] {
	return pulumix.Output[GetBusinessMetadataBindingSchemaRegistryCluster]{
		OutputState: o.OutputState,
	}
}

// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
func (o GetBusinessMetadataBindingSchemaRegistryClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBusinessMetadataBindingSchemaRegistryCluster) string { return v.Id }).(pulumi.StringOutput)
}

type GetBusinessMetadataBindingSchemaRegistryClusterPtrOutput struct{ *pulumi.OutputState }

func (GetBusinessMetadataBindingSchemaRegistryClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetBusinessMetadataBindingSchemaRegistryCluster)(nil)).Elem()
}

func (o GetBusinessMetadataBindingSchemaRegistryClusterPtrOutput) ToGetBusinessMetadataBindingSchemaRegistryClusterPtrOutput() GetBusinessMetadataBindingSchemaRegistryClusterPtrOutput {
	return o
}

func (o GetBusinessMetadataBindingSchemaRegistryClusterPtrOutput) ToGetBusinessMetadataBindingSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetBusinessMetadataBindingSchemaRegistryClusterPtrOutput {
	return o
}

func (o GetBusinessMetadataBindingSchemaRegistryClusterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GetBusinessMetadataBindingSchemaRegistryCluster] {
	return pulumix.Output[*GetBusinessMetadataBindingSchemaRegistryCluster]{
		OutputState: o.OutputState,
	}
}

func (o GetBusinessMetadataBindingSchemaRegistryClusterPtrOutput) Elem() GetBusinessMetadataBindingSchemaRegistryClusterOutput {
	return o.ApplyT(func(v *GetBusinessMetadataBindingSchemaRegistryCluster) GetBusinessMetadataBindingSchemaRegistryCluster {
		if v != nil {
			return *v
		}
		var ret GetBusinessMetadataBindingSchemaRegistryCluster
		return ret
	}).(GetBusinessMetadataBindingSchemaRegistryClusterOutput)
}

// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
func (o GetBusinessMetadataBindingSchemaRegistryClusterPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetBusinessMetadataBindingSchemaRegistryCluster) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type GetBusinessMetadataCredentials struct {
	// The Schema Registry API Key.
	Key string `pulumi:"key"`
	// The Schema Registry API Secret.
	Secret string `pulumi:"secret"`
}

// GetBusinessMetadataCredentialsInput is an input type that accepts GetBusinessMetadataCredentialsArgs and GetBusinessMetadataCredentialsOutput values.
// You can construct a concrete instance of `GetBusinessMetadataCredentialsInput` via:
//
//	GetBusinessMetadataCredentialsArgs{...}
type GetBusinessMetadataCredentialsInput interface {
	pulumi.Input

	ToGetBusinessMetadataCredentialsOutput() GetBusinessMetadataCredentialsOutput
	ToGetBusinessMetadataCredentialsOutputWithContext(context.Context) GetBusinessMetadataCredentialsOutput
}

type GetBusinessMetadataCredentialsArgs struct {
	// The Schema Registry API Key.
	Key pulumi.StringInput `pulumi:"key"`
	// The Schema Registry API Secret.
	Secret pulumi.StringInput `pulumi:"secret"`
}

func (GetBusinessMetadataCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBusinessMetadataCredentials)(nil)).Elem()
}

func (i GetBusinessMetadataCredentialsArgs) ToGetBusinessMetadataCredentialsOutput() GetBusinessMetadataCredentialsOutput {
	return i.ToGetBusinessMetadataCredentialsOutputWithContext(context.Background())
}

func (i GetBusinessMetadataCredentialsArgs) ToGetBusinessMetadataCredentialsOutputWithContext(ctx context.Context) GetBusinessMetadataCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBusinessMetadataCredentialsOutput)
}

func (i GetBusinessMetadataCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[GetBusinessMetadataCredentials] {
	return pulumix.Output[GetBusinessMetadataCredentials]{
		OutputState: i.ToGetBusinessMetadataCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i GetBusinessMetadataCredentialsArgs) ToGetBusinessMetadataCredentialsPtrOutput() GetBusinessMetadataCredentialsPtrOutput {
	return i.ToGetBusinessMetadataCredentialsPtrOutputWithContext(context.Background())
}

func (i GetBusinessMetadataCredentialsArgs) ToGetBusinessMetadataCredentialsPtrOutputWithContext(ctx context.Context) GetBusinessMetadataCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBusinessMetadataCredentialsOutput).ToGetBusinessMetadataCredentialsPtrOutputWithContext(ctx)
}

// GetBusinessMetadataCredentialsPtrInput is an input type that accepts GetBusinessMetadataCredentialsArgs, GetBusinessMetadataCredentialsPtr and GetBusinessMetadataCredentialsPtrOutput values.
// You can construct a concrete instance of `GetBusinessMetadataCredentialsPtrInput` via:
//
//	        GetBusinessMetadataCredentialsArgs{...}
//
//	or:
//
//	        nil
type GetBusinessMetadataCredentialsPtrInput interface {
	pulumi.Input

	ToGetBusinessMetadataCredentialsPtrOutput() GetBusinessMetadataCredentialsPtrOutput
	ToGetBusinessMetadataCredentialsPtrOutputWithContext(context.Context) GetBusinessMetadataCredentialsPtrOutput
}

type getBusinessMetadataCredentialsPtrType GetBusinessMetadataCredentialsArgs

func GetBusinessMetadataCredentialsPtr(v *GetBusinessMetadataCredentialsArgs) GetBusinessMetadataCredentialsPtrInput {
	return (*getBusinessMetadataCredentialsPtrType)(v)
}

func (*getBusinessMetadataCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetBusinessMetadataCredentials)(nil)).Elem()
}

func (i *getBusinessMetadataCredentialsPtrType) ToGetBusinessMetadataCredentialsPtrOutput() GetBusinessMetadataCredentialsPtrOutput {
	return i.ToGetBusinessMetadataCredentialsPtrOutputWithContext(context.Background())
}

func (i *getBusinessMetadataCredentialsPtrType) ToGetBusinessMetadataCredentialsPtrOutputWithContext(ctx context.Context) GetBusinessMetadataCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBusinessMetadataCredentialsPtrOutput)
}

func (i *getBusinessMetadataCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*GetBusinessMetadataCredentials] {
	return pulumix.Output[*GetBusinessMetadataCredentials]{
		OutputState: i.ToGetBusinessMetadataCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

type GetBusinessMetadataCredentialsOutput struct{ *pulumi.OutputState }

func (GetBusinessMetadataCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBusinessMetadataCredentials)(nil)).Elem()
}

func (o GetBusinessMetadataCredentialsOutput) ToGetBusinessMetadataCredentialsOutput() GetBusinessMetadataCredentialsOutput {
	return o
}

func (o GetBusinessMetadataCredentialsOutput) ToGetBusinessMetadataCredentialsOutputWithContext(ctx context.Context) GetBusinessMetadataCredentialsOutput {
	return o
}

func (o GetBusinessMetadataCredentialsOutput) ToGetBusinessMetadataCredentialsPtrOutput() GetBusinessMetadataCredentialsPtrOutput {
	return o.ToGetBusinessMetadataCredentialsPtrOutputWithContext(context.Background())
}

func (o GetBusinessMetadataCredentialsOutput) ToGetBusinessMetadataCredentialsPtrOutputWithContext(ctx context.Context) GetBusinessMetadataCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetBusinessMetadataCredentials) *GetBusinessMetadataCredentials {
		return &v
	}).(GetBusinessMetadataCredentialsPtrOutput)
}

func (o GetBusinessMetadataCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[GetBusinessMetadataCredentials] {
	return pulumix.Output[GetBusinessMetadataCredentials]{
		OutputState: o.OutputState,
	}
}

// The Schema Registry API Key.
func (o GetBusinessMetadataCredentialsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetBusinessMetadataCredentials) string { return v.Key }).(pulumi.StringOutput)
}

// The Schema Registry API Secret.
func (o GetBusinessMetadataCredentialsOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v GetBusinessMetadataCredentials) string { return v.Secret }).(pulumi.StringOutput)
}

type GetBusinessMetadataCredentialsPtrOutput struct{ *pulumi.OutputState }

func (GetBusinessMetadataCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetBusinessMetadataCredentials)(nil)).Elem()
}

func (o GetBusinessMetadataCredentialsPtrOutput) ToGetBusinessMetadataCredentialsPtrOutput() GetBusinessMetadataCredentialsPtrOutput {
	return o
}

func (o GetBusinessMetadataCredentialsPtrOutput) ToGetBusinessMetadataCredentialsPtrOutputWithContext(ctx context.Context) GetBusinessMetadataCredentialsPtrOutput {
	return o
}

func (o GetBusinessMetadataCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GetBusinessMetadataCredentials] {
	return pulumix.Output[*GetBusinessMetadataCredentials]{
		OutputState: o.OutputState,
	}
}

func (o GetBusinessMetadataCredentialsPtrOutput) Elem() GetBusinessMetadataCredentialsOutput {
	return o.ApplyT(func(v *GetBusinessMetadataCredentials) GetBusinessMetadataCredentials {
		if v != nil {
			return *v
		}
		var ret GetBusinessMetadataCredentials
		return ret
	}).(GetBusinessMetadataCredentialsOutput)
}

// The Schema Registry API Key.
func (o GetBusinessMetadataCredentialsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetBusinessMetadataCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// The Schema Registry API Secret.
func (o GetBusinessMetadataCredentialsPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetBusinessMetadataCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Secret
	}).(pulumi.StringPtrOutput)
}

type GetBusinessMetadataSchemaRegistryCluster struct {
	// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
	Id string `pulumi:"id"`
}

// GetBusinessMetadataSchemaRegistryClusterInput is an input type that accepts GetBusinessMetadataSchemaRegistryClusterArgs and GetBusinessMetadataSchemaRegistryClusterOutput values.
// You can construct a concrete instance of `GetBusinessMetadataSchemaRegistryClusterInput` via:
//
//	GetBusinessMetadataSchemaRegistryClusterArgs{...}
type GetBusinessMetadataSchemaRegistryClusterInput interface {
	pulumi.Input

	ToGetBusinessMetadataSchemaRegistryClusterOutput() GetBusinessMetadataSchemaRegistryClusterOutput
	ToGetBusinessMetadataSchemaRegistryClusterOutputWithContext(context.Context) GetBusinessMetadataSchemaRegistryClusterOutput
}

type GetBusinessMetadataSchemaRegistryClusterArgs struct {
	// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetBusinessMetadataSchemaRegistryClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBusinessMetadataSchemaRegistryCluster)(nil)).Elem()
}

func (i GetBusinessMetadataSchemaRegistryClusterArgs) ToGetBusinessMetadataSchemaRegistryClusterOutput() GetBusinessMetadataSchemaRegistryClusterOutput {
	return i.ToGetBusinessMetadataSchemaRegistryClusterOutputWithContext(context.Background())
}

func (i GetBusinessMetadataSchemaRegistryClusterArgs) ToGetBusinessMetadataSchemaRegistryClusterOutputWithContext(ctx context.Context) GetBusinessMetadataSchemaRegistryClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBusinessMetadataSchemaRegistryClusterOutput)
}

func (i GetBusinessMetadataSchemaRegistryClusterArgs) ToOutput(ctx context.Context) pulumix.Output[GetBusinessMetadataSchemaRegistryCluster] {
	return pulumix.Output[GetBusinessMetadataSchemaRegistryCluster]{
		OutputState: i.ToGetBusinessMetadataSchemaRegistryClusterOutputWithContext(ctx).OutputState,
	}
}

func (i GetBusinessMetadataSchemaRegistryClusterArgs) ToGetBusinessMetadataSchemaRegistryClusterPtrOutput() GetBusinessMetadataSchemaRegistryClusterPtrOutput {
	return i.ToGetBusinessMetadataSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (i GetBusinessMetadataSchemaRegistryClusterArgs) ToGetBusinessMetadataSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetBusinessMetadataSchemaRegistryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBusinessMetadataSchemaRegistryClusterOutput).ToGetBusinessMetadataSchemaRegistryClusterPtrOutputWithContext(ctx)
}

// GetBusinessMetadataSchemaRegistryClusterPtrInput is an input type that accepts GetBusinessMetadataSchemaRegistryClusterArgs, GetBusinessMetadataSchemaRegistryClusterPtr and GetBusinessMetadataSchemaRegistryClusterPtrOutput values.
// You can construct a concrete instance of `GetBusinessMetadataSchemaRegistryClusterPtrInput` via:
//
//	        GetBusinessMetadataSchemaRegistryClusterArgs{...}
//
//	or:
//
//	        nil
type GetBusinessMetadataSchemaRegistryClusterPtrInput interface {
	pulumi.Input

	ToGetBusinessMetadataSchemaRegistryClusterPtrOutput() GetBusinessMetadataSchemaRegistryClusterPtrOutput
	ToGetBusinessMetadataSchemaRegistryClusterPtrOutputWithContext(context.Context) GetBusinessMetadataSchemaRegistryClusterPtrOutput
}

type getBusinessMetadataSchemaRegistryClusterPtrType GetBusinessMetadataSchemaRegistryClusterArgs

func GetBusinessMetadataSchemaRegistryClusterPtr(v *GetBusinessMetadataSchemaRegistryClusterArgs) GetBusinessMetadataSchemaRegistryClusterPtrInput {
	return (*getBusinessMetadataSchemaRegistryClusterPtrType)(v)
}

func (*getBusinessMetadataSchemaRegistryClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetBusinessMetadataSchemaRegistryCluster)(nil)).Elem()
}

func (i *getBusinessMetadataSchemaRegistryClusterPtrType) ToGetBusinessMetadataSchemaRegistryClusterPtrOutput() GetBusinessMetadataSchemaRegistryClusterPtrOutput {
	return i.ToGetBusinessMetadataSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (i *getBusinessMetadataSchemaRegistryClusterPtrType) ToGetBusinessMetadataSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetBusinessMetadataSchemaRegistryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBusinessMetadataSchemaRegistryClusterPtrOutput)
}

func (i *getBusinessMetadataSchemaRegistryClusterPtrType) ToOutput(ctx context.Context) pulumix.Output[*GetBusinessMetadataSchemaRegistryCluster] {
	return pulumix.Output[*GetBusinessMetadataSchemaRegistryCluster]{
		OutputState: i.ToGetBusinessMetadataSchemaRegistryClusterPtrOutputWithContext(ctx).OutputState,
	}
}

type GetBusinessMetadataSchemaRegistryClusterOutput struct{ *pulumi.OutputState }

func (GetBusinessMetadataSchemaRegistryClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBusinessMetadataSchemaRegistryCluster)(nil)).Elem()
}

func (o GetBusinessMetadataSchemaRegistryClusterOutput) ToGetBusinessMetadataSchemaRegistryClusterOutput() GetBusinessMetadataSchemaRegistryClusterOutput {
	return o
}

func (o GetBusinessMetadataSchemaRegistryClusterOutput) ToGetBusinessMetadataSchemaRegistryClusterOutputWithContext(ctx context.Context) GetBusinessMetadataSchemaRegistryClusterOutput {
	return o
}

func (o GetBusinessMetadataSchemaRegistryClusterOutput) ToGetBusinessMetadataSchemaRegistryClusterPtrOutput() GetBusinessMetadataSchemaRegistryClusterPtrOutput {
	return o.ToGetBusinessMetadataSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (o GetBusinessMetadataSchemaRegistryClusterOutput) ToGetBusinessMetadataSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetBusinessMetadataSchemaRegistryClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetBusinessMetadataSchemaRegistryCluster) *GetBusinessMetadataSchemaRegistryCluster {
		return &v
	}).(GetBusinessMetadataSchemaRegistryClusterPtrOutput)
}

func (o GetBusinessMetadataSchemaRegistryClusterOutput) ToOutput(ctx context.Context) pulumix.Output[GetBusinessMetadataSchemaRegistryCluster] {
	return pulumix.Output[GetBusinessMetadataSchemaRegistryCluster]{
		OutputState: o.OutputState,
	}
}

// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
func (o GetBusinessMetadataSchemaRegistryClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBusinessMetadataSchemaRegistryCluster) string { return v.Id }).(pulumi.StringOutput)
}

type GetBusinessMetadataSchemaRegistryClusterPtrOutput struct{ *pulumi.OutputState }

func (GetBusinessMetadataSchemaRegistryClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetBusinessMetadataSchemaRegistryCluster)(nil)).Elem()
}

func (o GetBusinessMetadataSchemaRegistryClusterPtrOutput) ToGetBusinessMetadataSchemaRegistryClusterPtrOutput() GetBusinessMetadataSchemaRegistryClusterPtrOutput {
	return o
}

func (o GetBusinessMetadataSchemaRegistryClusterPtrOutput) ToGetBusinessMetadataSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetBusinessMetadataSchemaRegistryClusterPtrOutput {
	return o
}

func (o GetBusinessMetadataSchemaRegistryClusterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GetBusinessMetadataSchemaRegistryCluster] {
	return pulumix.Output[*GetBusinessMetadataSchemaRegistryCluster]{
		OutputState: o.OutputState,
	}
}

func (o GetBusinessMetadataSchemaRegistryClusterPtrOutput) Elem() GetBusinessMetadataSchemaRegistryClusterOutput {
	return o.ApplyT(func(v *GetBusinessMetadataSchemaRegistryCluster) GetBusinessMetadataSchemaRegistryCluster {
		if v != nil {
			return *v
		}
		var ret GetBusinessMetadataSchemaRegistryCluster
		return ret
	}).(GetBusinessMetadataSchemaRegistryClusterOutput)
}

// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
func (o GetBusinessMetadataSchemaRegistryClusterPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetBusinessMetadataSchemaRegistryCluster) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type GetByokKeyAw struct {
	// (Required String) The Amazon Resource Name (ARN) of an AWS KMS key.
	KeyArn string `pulumi:"keyArn"`
	// (Optional List of Strings) The Amazon Resource Names (ARNs) of IAM Roles created for this key-environment combination.
	Roles []string `pulumi:"roles"`
}

// GetByokKeyAwInput is an input type that accepts GetByokKeyAwArgs and GetByokKeyAwOutput values.
// You can construct a concrete instance of `GetByokKeyAwInput` via:
//
//	GetByokKeyAwArgs{...}
type GetByokKeyAwInput interface {
	pulumi.Input

	ToGetByokKeyAwOutput() GetByokKeyAwOutput
	ToGetByokKeyAwOutputWithContext(context.Context) GetByokKeyAwOutput
}

type GetByokKeyAwArgs struct {
	// (Required String) The Amazon Resource Name (ARN) of an AWS KMS key.
	KeyArn pulumi.StringInput `pulumi:"keyArn"`
	// (Optional List of Strings) The Amazon Resource Names (ARNs) of IAM Roles created for this key-environment combination.
	Roles pulumi.StringArrayInput `pulumi:"roles"`
}

func (GetByokKeyAwArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetByokKeyAw)(nil)).Elem()
}

func (i GetByokKeyAwArgs) ToGetByokKeyAwOutput() GetByokKeyAwOutput {
	return i.ToGetByokKeyAwOutputWithContext(context.Background())
}

func (i GetByokKeyAwArgs) ToGetByokKeyAwOutputWithContext(ctx context.Context) GetByokKeyAwOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetByokKeyAwOutput)
}

func (i GetByokKeyAwArgs) ToOutput(ctx context.Context) pulumix.Output[GetByokKeyAw] {
	return pulumix.Output[GetByokKeyAw]{
		OutputState: i.ToGetByokKeyAwOutputWithContext(ctx).OutputState,
	}
}

// GetByokKeyAwArrayInput is an input type that accepts GetByokKeyAwArray and GetByokKeyAwArrayOutput values.
// You can construct a concrete instance of `GetByokKeyAwArrayInput` via:
//
//	GetByokKeyAwArray{ GetByokKeyAwArgs{...} }
type GetByokKeyAwArrayInput interface {
	pulumi.Input

	ToGetByokKeyAwArrayOutput() GetByokKeyAwArrayOutput
	ToGetByokKeyAwArrayOutputWithContext(context.Context) GetByokKeyAwArrayOutput
}

type GetByokKeyAwArray []GetByokKeyAwInput

func (GetByokKeyAwArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetByokKeyAw)(nil)).Elem()
}

func (i GetByokKeyAwArray) ToGetByokKeyAwArrayOutput() GetByokKeyAwArrayOutput {
	return i.ToGetByokKeyAwArrayOutputWithContext(context.Background())
}

func (i GetByokKeyAwArray) ToGetByokKeyAwArrayOutputWithContext(ctx context.Context) GetByokKeyAwArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetByokKeyAwArrayOutput)
}

func (i GetByokKeyAwArray) ToOutput(ctx context.Context) pulumix.Output[[]GetByokKeyAw] {
	return pulumix.Output[[]GetByokKeyAw]{
		OutputState: i.ToGetByokKeyAwArrayOutputWithContext(ctx).OutputState,
	}
}

type GetByokKeyAwOutput struct{ *pulumi.OutputState }

func (GetByokKeyAwOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetByokKeyAw)(nil)).Elem()
}

func (o GetByokKeyAwOutput) ToGetByokKeyAwOutput() GetByokKeyAwOutput {
	return o
}

func (o GetByokKeyAwOutput) ToGetByokKeyAwOutputWithContext(ctx context.Context) GetByokKeyAwOutput {
	return o
}

func (o GetByokKeyAwOutput) ToOutput(ctx context.Context) pulumix.Output[GetByokKeyAw] {
	return pulumix.Output[GetByokKeyAw]{
		OutputState: o.OutputState,
	}
}

// (Required String) The Amazon Resource Name (ARN) of an AWS KMS key.
func (o GetByokKeyAwOutput) KeyArn() pulumi.StringOutput {
	return o.ApplyT(func(v GetByokKeyAw) string { return v.KeyArn }).(pulumi.StringOutput)
}

// (Optional List of Strings) The Amazon Resource Names (ARNs) of IAM Roles created for this key-environment combination.
func (o GetByokKeyAwOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetByokKeyAw) []string { return v.Roles }).(pulumi.StringArrayOutput)
}

type GetByokKeyAwArrayOutput struct{ *pulumi.OutputState }

func (GetByokKeyAwArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetByokKeyAw)(nil)).Elem()
}

func (o GetByokKeyAwArrayOutput) ToGetByokKeyAwArrayOutput() GetByokKeyAwArrayOutput {
	return o
}

func (o GetByokKeyAwArrayOutput) ToGetByokKeyAwArrayOutputWithContext(ctx context.Context) GetByokKeyAwArrayOutput {
	return o
}

func (o GetByokKeyAwArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetByokKeyAw] {
	return pulumix.Output[[]GetByokKeyAw]{
		OutputState: o.OutputState,
	}
}

func (o GetByokKeyAwArrayOutput) Index(i pulumi.IntInput) GetByokKeyAwOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetByokKeyAw {
		return vs[0].([]GetByokKeyAw)[vs[1].(int)]
	}).(GetByokKeyAwOutput)
}

type GetByokKeyAzure struct {
	// (Optional String) The Application ID created for this key-environment combination.
	ApplicationId string `pulumi:"applicationId"`
	// (Required String) The unique Key Object Identifier URL of an Azure Key Vault key.
	KeyIdentifier string `pulumi:"keyIdentifier"`
	// (Required String) Key Vault ID containing the key.
	KeyVaultId string `pulumi:"keyVaultId"`
	// (Required String) Tenant ID (uuid) hosting the Key Vault containing the key.
	TenantId string `pulumi:"tenantId"`
}

// GetByokKeyAzureInput is an input type that accepts GetByokKeyAzureArgs and GetByokKeyAzureOutput values.
// You can construct a concrete instance of `GetByokKeyAzureInput` via:
//
//	GetByokKeyAzureArgs{...}
type GetByokKeyAzureInput interface {
	pulumi.Input

	ToGetByokKeyAzureOutput() GetByokKeyAzureOutput
	ToGetByokKeyAzureOutputWithContext(context.Context) GetByokKeyAzureOutput
}

type GetByokKeyAzureArgs struct {
	// (Optional String) The Application ID created for this key-environment combination.
	ApplicationId pulumi.StringInput `pulumi:"applicationId"`
	// (Required String) The unique Key Object Identifier URL of an Azure Key Vault key.
	KeyIdentifier pulumi.StringInput `pulumi:"keyIdentifier"`
	// (Required String) Key Vault ID containing the key.
	KeyVaultId pulumi.StringInput `pulumi:"keyVaultId"`
	// (Required String) Tenant ID (uuid) hosting the Key Vault containing the key.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (GetByokKeyAzureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetByokKeyAzure)(nil)).Elem()
}

func (i GetByokKeyAzureArgs) ToGetByokKeyAzureOutput() GetByokKeyAzureOutput {
	return i.ToGetByokKeyAzureOutputWithContext(context.Background())
}

func (i GetByokKeyAzureArgs) ToGetByokKeyAzureOutputWithContext(ctx context.Context) GetByokKeyAzureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetByokKeyAzureOutput)
}

func (i GetByokKeyAzureArgs) ToOutput(ctx context.Context) pulumix.Output[GetByokKeyAzure] {
	return pulumix.Output[GetByokKeyAzure]{
		OutputState: i.ToGetByokKeyAzureOutputWithContext(ctx).OutputState,
	}
}

// GetByokKeyAzureArrayInput is an input type that accepts GetByokKeyAzureArray and GetByokKeyAzureArrayOutput values.
// You can construct a concrete instance of `GetByokKeyAzureArrayInput` via:
//
//	GetByokKeyAzureArray{ GetByokKeyAzureArgs{...} }
type GetByokKeyAzureArrayInput interface {
	pulumi.Input

	ToGetByokKeyAzureArrayOutput() GetByokKeyAzureArrayOutput
	ToGetByokKeyAzureArrayOutputWithContext(context.Context) GetByokKeyAzureArrayOutput
}

type GetByokKeyAzureArray []GetByokKeyAzureInput

func (GetByokKeyAzureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetByokKeyAzure)(nil)).Elem()
}

func (i GetByokKeyAzureArray) ToGetByokKeyAzureArrayOutput() GetByokKeyAzureArrayOutput {
	return i.ToGetByokKeyAzureArrayOutputWithContext(context.Background())
}

func (i GetByokKeyAzureArray) ToGetByokKeyAzureArrayOutputWithContext(ctx context.Context) GetByokKeyAzureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetByokKeyAzureArrayOutput)
}

func (i GetByokKeyAzureArray) ToOutput(ctx context.Context) pulumix.Output[[]GetByokKeyAzure] {
	return pulumix.Output[[]GetByokKeyAzure]{
		OutputState: i.ToGetByokKeyAzureArrayOutputWithContext(ctx).OutputState,
	}
}

type GetByokKeyAzureOutput struct{ *pulumi.OutputState }

func (GetByokKeyAzureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetByokKeyAzure)(nil)).Elem()
}

func (o GetByokKeyAzureOutput) ToGetByokKeyAzureOutput() GetByokKeyAzureOutput {
	return o
}

func (o GetByokKeyAzureOutput) ToGetByokKeyAzureOutputWithContext(ctx context.Context) GetByokKeyAzureOutput {
	return o
}

func (o GetByokKeyAzureOutput) ToOutput(ctx context.Context) pulumix.Output[GetByokKeyAzure] {
	return pulumix.Output[GetByokKeyAzure]{
		OutputState: o.OutputState,
	}
}

// (Optional String) The Application ID created for this key-environment combination.
func (o GetByokKeyAzureOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetByokKeyAzure) string { return v.ApplicationId }).(pulumi.StringOutput)
}

// (Required String) The unique Key Object Identifier URL of an Azure Key Vault key.
func (o GetByokKeyAzureOutput) KeyIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v GetByokKeyAzure) string { return v.KeyIdentifier }).(pulumi.StringOutput)
}

// (Required String) Key Vault ID containing the key.
func (o GetByokKeyAzureOutput) KeyVaultId() pulumi.StringOutput {
	return o.ApplyT(func(v GetByokKeyAzure) string { return v.KeyVaultId }).(pulumi.StringOutput)
}

// (Required String) Tenant ID (uuid) hosting the Key Vault containing the key.
func (o GetByokKeyAzureOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v GetByokKeyAzure) string { return v.TenantId }).(pulumi.StringOutput)
}

type GetByokKeyAzureArrayOutput struct{ *pulumi.OutputState }

func (GetByokKeyAzureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetByokKeyAzure)(nil)).Elem()
}

func (o GetByokKeyAzureArrayOutput) ToGetByokKeyAzureArrayOutput() GetByokKeyAzureArrayOutput {
	return o
}

func (o GetByokKeyAzureArrayOutput) ToGetByokKeyAzureArrayOutputWithContext(ctx context.Context) GetByokKeyAzureArrayOutput {
	return o
}

func (o GetByokKeyAzureArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetByokKeyAzure] {
	return pulumix.Output[[]GetByokKeyAzure]{
		OutputState: o.OutputState,
	}
}

func (o GetByokKeyAzureArrayOutput) Index(i pulumi.IntInput) GetByokKeyAzureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetByokKeyAzure {
		return vs[0].([]GetByokKeyAzure)[vs[1].(int)]
	}).(GetByokKeyAzureOutput)
}

type GetIdentityPoolIdentityProvider struct {
	// The ID of the Identity Provider associated with the Identity Pool, for example, `op-abc123`.
	//
	// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
	Id string `pulumi:"id"`
}

// GetIdentityPoolIdentityProviderInput is an input type that accepts GetIdentityPoolIdentityProviderArgs and GetIdentityPoolIdentityProviderOutput values.
// You can construct a concrete instance of `GetIdentityPoolIdentityProviderInput` via:
//
//	GetIdentityPoolIdentityProviderArgs{...}
type GetIdentityPoolIdentityProviderInput interface {
	pulumi.Input

	ToGetIdentityPoolIdentityProviderOutput() GetIdentityPoolIdentityProviderOutput
	ToGetIdentityPoolIdentityProviderOutputWithContext(context.Context) GetIdentityPoolIdentityProviderOutput
}

type GetIdentityPoolIdentityProviderArgs struct {
	// The ID of the Identity Provider associated with the Identity Pool, for example, `op-abc123`.
	//
	// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetIdentityPoolIdentityProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIdentityPoolIdentityProvider)(nil)).Elem()
}

func (i GetIdentityPoolIdentityProviderArgs) ToGetIdentityPoolIdentityProviderOutput() GetIdentityPoolIdentityProviderOutput {
	return i.ToGetIdentityPoolIdentityProviderOutputWithContext(context.Background())
}

func (i GetIdentityPoolIdentityProviderArgs) ToGetIdentityPoolIdentityProviderOutputWithContext(ctx context.Context) GetIdentityPoolIdentityProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIdentityPoolIdentityProviderOutput)
}

func (i GetIdentityPoolIdentityProviderArgs) ToOutput(ctx context.Context) pulumix.Output[GetIdentityPoolIdentityProvider] {
	return pulumix.Output[GetIdentityPoolIdentityProvider]{
		OutputState: i.ToGetIdentityPoolIdentityProviderOutputWithContext(ctx).OutputState,
	}
}

type GetIdentityPoolIdentityProviderOutput struct{ *pulumi.OutputState }

func (GetIdentityPoolIdentityProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIdentityPoolIdentityProvider)(nil)).Elem()
}

func (o GetIdentityPoolIdentityProviderOutput) ToGetIdentityPoolIdentityProviderOutput() GetIdentityPoolIdentityProviderOutput {
	return o
}

func (o GetIdentityPoolIdentityProviderOutput) ToGetIdentityPoolIdentityProviderOutputWithContext(ctx context.Context) GetIdentityPoolIdentityProviderOutput {
	return o
}

func (o GetIdentityPoolIdentityProviderOutput) ToOutput(ctx context.Context) pulumix.Output[GetIdentityPoolIdentityProvider] {
	return pulumix.Output[GetIdentityPoolIdentityProvider]{
		OutputState: o.OutputState,
	}
}

// The ID of the Identity Provider associated with the Identity Pool, for example, `op-abc123`.
//
// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
func (o GetIdentityPoolIdentityProviderOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetIdentityPoolIdentityProvider) string { return v.Id }).(pulumi.StringOutput)
}

type GetInvitationCreator struct {
	// The ID of the Invitation, for example, `i-zyw30`.
	Id string `pulumi:"id"`
}

// GetInvitationCreatorInput is an input type that accepts GetInvitationCreatorArgs and GetInvitationCreatorOutput values.
// You can construct a concrete instance of `GetInvitationCreatorInput` via:
//
//	GetInvitationCreatorArgs{...}
type GetInvitationCreatorInput interface {
	pulumi.Input

	ToGetInvitationCreatorOutput() GetInvitationCreatorOutput
	ToGetInvitationCreatorOutputWithContext(context.Context) GetInvitationCreatorOutput
}

type GetInvitationCreatorArgs struct {
	// The ID of the Invitation, for example, `i-zyw30`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetInvitationCreatorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInvitationCreator)(nil)).Elem()
}

func (i GetInvitationCreatorArgs) ToGetInvitationCreatorOutput() GetInvitationCreatorOutput {
	return i.ToGetInvitationCreatorOutputWithContext(context.Background())
}

func (i GetInvitationCreatorArgs) ToGetInvitationCreatorOutputWithContext(ctx context.Context) GetInvitationCreatorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInvitationCreatorOutput)
}

func (i GetInvitationCreatorArgs) ToOutput(ctx context.Context) pulumix.Output[GetInvitationCreator] {
	return pulumix.Output[GetInvitationCreator]{
		OutputState: i.ToGetInvitationCreatorOutputWithContext(ctx).OutputState,
	}
}

// GetInvitationCreatorArrayInput is an input type that accepts GetInvitationCreatorArray and GetInvitationCreatorArrayOutput values.
// You can construct a concrete instance of `GetInvitationCreatorArrayInput` via:
//
//	GetInvitationCreatorArray{ GetInvitationCreatorArgs{...} }
type GetInvitationCreatorArrayInput interface {
	pulumi.Input

	ToGetInvitationCreatorArrayOutput() GetInvitationCreatorArrayOutput
	ToGetInvitationCreatorArrayOutputWithContext(context.Context) GetInvitationCreatorArrayOutput
}

type GetInvitationCreatorArray []GetInvitationCreatorInput

func (GetInvitationCreatorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInvitationCreator)(nil)).Elem()
}

func (i GetInvitationCreatorArray) ToGetInvitationCreatorArrayOutput() GetInvitationCreatorArrayOutput {
	return i.ToGetInvitationCreatorArrayOutputWithContext(context.Background())
}

func (i GetInvitationCreatorArray) ToGetInvitationCreatorArrayOutputWithContext(ctx context.Context) GetInvitationCreatorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInvitationCreatorArrayOutput)
}

func (i GetInvitationCreatorArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInvitationCreator] {
	return pulumix.Output[[]GetInvitationCreator]{
		OutputState: i.ToGetInvitationCreatorArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInvitationCreatorOutput struct{ *pulumi.OutputState }

func (GetInvitationCreatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInvitationCreator)(nil)).Elem()
}

func (o GetInvitationCreatorOutput) ToGetInvitationCreatorOutput() GetInvitationCreatorOutput {
	return o
}

func (o GetInvitationCreatorOutput) ToGetInvitationCreatorOutputWithContext(ctx context.Context) GetInvitationCreatorOutput {
	return o
}

func (o GetInvitationCreatorOutput) ToOutput(ctx context.Context) pulumix.Output[GetInvitationCreator] {
	return pulumix.Output[GetInvitationCreator]{
		OutputState: o.OutputState,
	}
}

// The ID of the Invitation, for example, `i-zyw30`.
func (o GetInvitationCreatorOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvitationCreator) string { return v.Id }).(pulumi.StringOutput)
}

type GetInvitationCreatorArrayOutput struct{ *pulumi.OutputState }

func (GetInvitationCreatorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInvitationCreator)(nil)).Elem()
}

func (o GetInvitationCreatorArrayOutput) ToGetInvitationCreatorArrayOutput() GetInvitationCreatorArrayOutput {
	return o
}

func (o GetInvitationCreatorArrayOutput) ToGetInvitationCreatorArrayOutputWithContext(ctx context.Context) GetInvitationCreatorArrayOutput {
	return o
}

func (o GetInvitationCreatorArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInvitationCreator] {
	return pulumix.Output[[]GetInvitationCreator]{
		OutputState: o.OutputState,
	}
}

func (o GetInvitationCreatorArrayOutput) Index(i pulumi.IntInput) GetInvitationCreatorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInvitationCreator {
		return vs[0].([]GetInvitationCreator)[vs[1].(int)]
	}).(GetInvitationCreatorOutput)
}

type GetInvitationUser struct {
	// The ID of the Invitation, for example, `i-zyw30`.
	Id string `pulumi:"id"`
}

// GetInvitationUserInput is an input type that accepts GetInvitationUserArgs and GetInvitationUserOutput values.
// You can construct a concrete instance of `GetInvitationUserInput` via:
//
//	GetInvitationUserArgs{...}
type GetInvitationUserInput interface {
	pulumi.Input

	ToGetInvitationUserOutput() GetInvitationUserOutput
	ToGetInvitationUserOutputWithContext(context.Context) GetInvitationUserOutput
}

type GetInvitationUserArgs struct {
	// The ID of the Invitation, for example, `i-zyw30`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetInvitationUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInvitationUser)(nil)).Elem()
}

func (i GetInvitationUserArgs) ToGetInvitationUserOutput() GetInvitationUserOutput {
	return i.ToGetInvitationUserOutputWithContext(context.Background())
}

func (i GetInvitationUserArgs) ToGetInvitationUserOutputWithContext(ctx context.Context) GetInvitationUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInvitationUserOutput)
}

func (i GetInvitationUserArgs) ToOutput(ctx context.Context) pulumix.Output[GetInvitationUser] {
	return pulumix.Output[GetInvitationUser]{
		OutputState: i.ToGetInvitationUserOutputWithContext(ctx).OutputState,
	}
}

// GetInvitationUserArrayInput is an input type that accepts GetInvitationUserArray and GetInvitationUserArrayOutput values.
// You can construct a concrete instance of `GetInvitationUserArrayInput` via:
//
//	GetInvitationUserArray{ GetInvitationUserArgs{...} }
type GetInvitationUserArrayInput interface {
	pulumi.Input

	ToGetInvitationUserArrayOutput() GetInvitationUserArrayOutput
	ToGetInvitationUserArrayOutputWithContext(context.Context) GetInvitationUserArrayOutput
}

type GetInvitationUserArray []GetInvitationUserInput

func (GetInvitationUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInvitationUser)(nil)).Elem()
}

func (i GetInvitationUserArray) ToGetInvitationUserArrayOutput() GetInvitationUserArrayOutput {
	return i.ToGetInvitationUserArrayOutputWithContext(context.Background())
}

func (i GetInvitationUserArray) ToGetInvitationUserArrayOutputWithContext(ctx context.Context) GetInvitationUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInvitationUserArrayOutput)
}

func (i GetInvitationUserArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInvitationUser] {
	return pulumix.Output[[]GetInvitationUser]{
		OutputState: i.ToGetInvitationUserArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInvitationUserOutput struct{ *pulumi.OutputState }

func (GetInvitationUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInvitationUser)(nil)).Elem()
}

func (o GetInvitationUserOutput) ToGetInvitationUserOutput() GetInvitationUserOutput {
	return o
}

func (o GetInvitationUserOutput) ToGetInvitationUserOutputWithContext(ctx context.Context) GetInvitationUserOutput {
	return o
}

func (o GetInvitationUserOutput) ToOutput(ctx context.Context) pulumix.Output[GetInvitationUser] {
	return pulumix.Output[GetInvitationUser]{
		OutputState: o.OutputState,
	}
}

// The ID of the Invitation, for example, `i-zyw30`.
func (o GetInvitationUserOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvitationUser) string { return v.Id }).(pulumi.StringOutput)
}

type GetInvitationUserArrayOutput struct{ *pulumi.OutputState }

func (GetInvitationUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInvitationUser)(nil)).Elem()
}

func (o GetInvitationUserArrayOutput) ToGetInvitationUserArrayOutput() GetInvitationUserArrayOutput {
	return o
}

func (o GetInvitationUserArrayOutput) ToGetInvitationUserArrayOutputWithContext(ctx context.Context) GetInvitationUserArrayOutput {
	return o
}

func (o GetInvitationUserArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInvitationUser] {
	return pulumix.Output[[]GetInvitationUser]{
		OutputState: o.OutputState,
	}
}

func (o GetInvitationUserArrayOutput) Index(i pulumi.IntInput) GetInvitationUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInvitationUser {
		return vs[0].([]GetInvitationUser)[vs[1].(int)]
	}).(GetInvitationUserOutput)
}

type GetKafkaClientQuotaEnvironment struct {
	// The ID of the Kafka Client Quota (for example, `cq-abc123`).
	Id string `pulumi:"id"`
}

// GetKafkaClientQuotaEnvironmentInput is an input type that accepts GetKafkaClientQuotaEnvironmentArgs and GetKafkaClientQuotaEnvironmentOutput values.
// You can construct a concrete instance of `GetKafkaClientQuotaEnvironmentInput` via:
//
//	GetKafkaClientQuotaEnvironmentArgs{...}
type GetKafkaClientQuotaEnvironmentInput interface {
	pulumi.Input

	ToGetKafkaClientQuotaEnvironmentOutput() GetKafkaClientQuotaEnvironmentOutput
	ToGetKafkaClientQuotaEnvironmentOutputWithContext(context.Context) GetKafkaClientQuotaEnvironmentOutput
}

type GetKafkaClientQuotaEnvironmentArgs struct {
	// The ID of the Kafka Client Quota (for example, `cq-abc123`).
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetKafkaClientQuotaEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKafkaClientQuotaEnvironment)(nil)).Elem()
}

func (i GetKafkaClientQuotaEnvironmentArgs) ToGetKafkaClientQuotaEnvironmentOutput() GetKafkaClientQuotaEnvironmentOutput {
	return i.ToGetKafkaClientQuotaEnvironmentOutputWithContext(context.Background())
}

func (i GetKafkaClientQuotaEnvironmentArgs) ToGetKafkaClientQuotaEnvironmentOutputWithContext(ctx context.Context) GetKafkaClientQuotaEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKafkaClientQuotaEnvironmentOutput)
}

func (i GetKafkaClientQuotaEnvironmentArgs) ToOutput(ctx context.Context) pulumix.Output[GetKafkaClientQuotaEnvironment] {
	return pulumix.Output[GetKafkaClientQuotaEnvironment]{
		OutputState: i.ToGetKafkaClientQuotaEnvironmentOutputWithContext(ctx).OutputState,
	}
}

// GetKafkaClientQuotaEnvironmentArrayInput is an input type that accepts GetKafkaClientQuotaEnvironmentArray and GetKafkaClientQuotaEnvironmentArrayOutput values.
// You can construct a concrete instance of `GetKafkaClientQuotaEnvironmentArrayInput` via:
//
//	GetKafkaClientQuotaEnvironmentArray{ GetKafkaClientQuotaEnvironmentArgs{...} }
type GetKafkaClientQuotaEnvironmentArrayInput interface {
	pulumi.Input

	ToGetKafkaClientQuotaEnvironmentArrayOutput() GetKafkaClientQuotaEnvironmentArrayOutput
	ToGetKafkaClientQuotaEnvironmentArrayOutputWithContext(context.Context) GetKafkaClientQuotaEnvironmentArrayOutput
}

type GetKafkaClientQuotaEnvironmentArray []GetKafkaClientQuotaEnvironmentInput

func (GetKafkaClientQuotaEnvironmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKafkaClientQuotaEnvironment)(nil)).Elem()
}

func (i GetKafkaClientQuotaEnvironmentArray) ToGetKafkaClientQuotaEnvironmentArrayOutput() GetKafkaClientQuotaEnvironmentArrayOutput {
	return i.ToGetKafkaClientQuotaEnvironmentArrayOutputWithContext(context.Background())
}

func (i GetKafkaClientQuotaEnvironmentArray) ToGetKafkaClientQuotaEnvironmentArrayOutputWithContext(ctx context.Context) GetKafkaClientQuotaEnvironmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKafkaClientQuotaEnvironmentArrayOutput)
}

func (i GetKafkaClientQuotaEnvironmentArray) ToOutput(ctx context.Context) pulumix.Output[[]GetKafkaClientQuotaEnvironment] {
	return pulumix.Output[[]GetKafkaClientQuotaEnvironment]{
		OutputState: i.ToGetKafkaClientQuotaEnvironmentArrayOutputWithContext(ctx).OutputState,
	}
}

type GetKafkaClientQuotaEnvironmentOutput struct{ *pulumi.OutputState }

func (GetKafkaClientQuotaEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKafkaClientQuotaEnvironment)(nil)).Elem()
}

func (o GetKafkaClientQuotaEnvironmentOutput) ToGetKafkaClientQuotaEnvironmentOutput() GetKafkaClientQuotaEnvironmentOutput {
	return o
}

func (o GetKafkaClientQuotaEnvironmentOutput) ToGetKafkaClientQuotaEnvironmentOutputWithContext(ctx context.Context) GetKafkaClientQuotaEnvironmentOutput {
	return o
}

func (o GetKafkaClientQuotaEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[GetKafkaClientQuotaEnvironment] {
	return pulumix.Output[GetKafkaClientQuotaEnvironment]{
		OutputState: o.OutputState,
	}
}

// The ID of the Kafka Client Quota (for example, `cq-abc123`).
func (o GetKafkaClientQuotaEnvironmentOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetKafkaClientQuotaEnvironment) string { return v.Id }).(pulumi.StringOutput)
}

type GetKafkaClientQuotaEnvironmentArrayOutput struct{ *pulumi.OutputState }

func (GetKafkaClientQuotaEnvironmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKafkaClientQuotaEnvironment)(nil)).Elem()
}

func (o GetKafkaClientQuotaEnvironmentArrayOutput) ToGetKafkaClientQuotaEnvironmentArrayOutput() GetKafkaClientQuotaEnvironmentArrayOutput {
	return o
}

func (o GetKafkaClientQuotaEnvironmentArrayOutput) ToGetKafkaClientQuotaEnvironmentArrayOutputWithContext(ctx context.Context) GetKafkaClientQuotaEnvironmentArrayOutput {
	return o
}

func (o GetKafkaClientQuotaEnvironmentArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetKafkaClientQuotaEnvironment] {
	return pulumix.Output[[]GetKafkaClientQuotaEnvironment]{
		OutputState: o.OutputState,
	}
}

func (o GetKafkaClientQuotaEnvironmentArrayOutput) Index(i pulumi.IntInput) GetKafkaClientQuotaEnvironmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKafkaClientQuotaEnvironment {
		return vs[0].([]GetKafkaClientQuotaEnvironment)[vs[1].(int)]
	}).(GetKafkaClientQuotaEnvironmentOutput)
}

type GetKafkaClientQuotaKafkaCluster struct {
	// The ID of the Kafka Client Quota (for example, `cq-abc123`).
	Id string `pulumi:"id"`
}

// GetKafkaClientQuotaKafkaClusterInput is an input type that accepts GetKafkaClientQuotaKafkaClusterArgs and GetKafkaClientQuotaKafkaClusterOutput values.
// You can construct a concrete instance of `GetKafkaClientQuotaKafkaClusterInput` via:
//
//	GetKafkaClientQuotaKafkaClusterArgs{...}
type GetKafkaClientQuotaKafkaClusterInput interface {
	pulumi.Input

	ToGetKafkaClientQuotaKafkaClusterOutput() GetKafkaClientQuotaKafkaClusterOutput
	ToGetKafkaClientQuotaKafkaClusterOutputWithContext(context.Context) GetKafkaClientQuotaKafkaClusterOutput
}

type GetKafkaClientQuotaKafkaClusterArgs struct {
	// The ID of the Kafka Client Quota (for example, `cq-abc123`).
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetKafkaClientQuotaKafkaClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKafkaClientQuotaKafkaCluster)(nil)).Elem()
}

func (i GetKafkaClientQuotaKafkaClusterArgs) ToGetKafkaClientQuotaKafkaClusterOutput() GetKafkaClientQuotaKafkaClusterOutput {
	return i.ToGetKafkaClientQuotaKafkaClusterOutputWithContext(context.Background())
}

func (i GetKafkaClientQuotaKafkaClusterArgs) ToGetKafkaClientQuotaKafkaClusterOutputWithContext(ctx context.Context) GetKafkaClientQuotaKafkaClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKafkaClientQuotaKafkaClusterOutput)
}

func (i GetKafkaClientQuotaKafkaClusterArgs) ToOutput(ctx context.Context) pulumix.Output[GetKafkaClientQuotaKafkaCluster] {
	return pulumix.Output[GetKafkaClientQuotaKafkaCluster]{
		OutputState: i.ToGetKafkaClientQuotaKafkaClusterOutputWithContext(ctx).OutputState,
	}
}

// GetKafkaClientQuotaKafkaClusterArrayInput is an input type that accepts GetKafkaClientQuotaKafkaClusterArray and GetKafkaClientQuotaKafkaClusterArrayOutput values.
// You can construct a concrete instance of `GetKafkaClientQuotaKafkaClusterArrayInput` via:
//
//	GetKafkaClientQuotaKafkaClusterArray{ GetKafkaClientQuotaKafkaClusterArgs{...} }
type GetKafkaClientQuotaKafkaClusterArrayInput interface {
	pulumi.Input

	ToGetKafkaClientQuotaKafkaClusterArrayOutput() GetKafkaClientQuotaKafkaClusterArrayOutput
	ToGetKafkaClientQuotaKafkaClusterArrayOutputWithContext(context.Context) GetKafkaClientQuotaKafkaClusterArrayOutput
}

type GetKafkaClientQuotaKafkaClusterArray []GetKafkaClientQuotaKafkaClusterInput

func (GetKafkaClientQuotaKafkaClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKafkaClientQuotaKafkaCluster)(nil)).Elem()
}

func (i GetKafkaClientQuotaKafkaClusterArray) ToGetKafkaClientQuotaKafkaClusterArrayOutput() GetKafkaClientQuotaKafkaClusterArrayOutput {
	return i.ToGetKafkaClientQuotaKafkaClusterArrayOutputWithContext(context.Background())
}

func (i GetKafkaClientQuotaKafkaClusterArray) ToGetKafkaClientQuotaKafkaClusterArrayOutputWithContext(ctx context.Context) GetKafkaClientQuotaKafkaClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKafkaClientQuotaKafkaClusterArrayOutput)
}

func (i GetKafkaClientQuotaKafkaClusterArray) ToOutput(ctx context.Context) pulumix.Output[[]GetKafkaClientQuotaKafkaCluster] {
	return pulumix.Output[[]GetKafkaClientQuotaKafkaCluster]{
		OutputState: i.ToGetKafkaClientQuotaKafkaClusterArrayOutputWithContext(ctx).OutputState,
	}
}

type GetKafkaClientQuotaKafkaClusterOutput struct{ *pulumi.OutputState }

func (GetKafkaClientQuotaKafkaClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKafkaClientQuotaKafkaCluster)(nil)).Elem()
}

func (o GetKafkaClientQuotaKafkaClusterOutput) ToGetKafkaClientQuotaKafkaClusterOutput() GetKafkaClientQuotaKafkaClusterOutput {
	return o
}

func (o GetKafkaClientQuotaKafkaClusterOutput) ToGetKafkaClientQuotaKafkaClusterOutputWithContext(ctx context.Context) GetKafkaClientQuotaKafkaClusterOutput {
	return o
}

func (o GetKafkaClientQuotaKafkaClusterOutput) ToOutput(ctx context.Context) pulumix.Output[GetKafkaClientQuotaKafkaCluster] {
	return pulumix.Output[GetKafkaClientQuotaKafkaCluster]{
		OutputState: o.OutputState,
	}
}

// The ID of the Kafka Client Quota (for example, `cq-abc123`).
func (o GetKafkaClientQuotaKafkaClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetKafkaClientQuotaKafkaCluster) string { return v.Id }).(pulumi.StringOutput)
}

type GetKafkaClientQuotaKafkaClusterArrayOutput struct{ *pulumi.OutputState }

func (GetKafkaClientQuotaKafkaClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKafkaClientQuotaKafkaCluster)(nil)).Elem()
}

func (o GetKafkaClientQuotaKafkaClusterArrayOutput) ToGetKafkaClientQuotaKafkaClusterArrayOutput() GetKafkaClientQuotaKafkaClusterArrayOutput {
	return o
}

func (o GetKafkaClientQuotaKafkaClusterArrayOutput) ToGetKafkaClientQuotaKafkaClusterArrayOutputWithContext(ctx context.Context) GetKafkaClientQuotaKafkaClusterArrayOutput {
	return o
}

func (o GetKafkaClientQuotaKafkaClusterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetKafkaClientQuotaKafkaCluster] {
	return pulumix.Output[[]GetKafkaClientQuotaKafkaCluster]{
		OutputState: o.OutputState,
	}
}

func (o GetKafkaClientQuotaKafkaClusterArrayOutput) Index(i pulumi.IntInput) GetKafkaClientQuotaKafkaClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKafkaClientQuotaKafkaCluster {
		return vs[0].([]GetKafkaClientQuotaKafkaCluster)[vs[1].(int)]
	}).(GetKafkaClientQuotaKafkaClusterOutput)
}

type GetKafkaClientQuotaThroughput struct {
	// (Required String) The egress throughput limit in bytes per second.
	EgressByteRate string `pulumi:"egressByteRate"`
	// (Required String) The ingress throughput limit in bytes per second.
	IngressByteRate string `pulumi:"ingressByteRate"`
}

// GetKafkaClientQuotaThroughputInput is an input type that accepts GetKafkaClientQuotaThroughputArgs and GetKafkaClientQuotaThroughputOutput values.
// You can construct a concrete instance of `GetKafkaClientQuotaThroughputInput` via:
//
//	GetKafkaClientQuotaThroughputArgs{...}
type GetKafkaClientQuotaThroughputInput interface {
	pulumi.Input

	ToGetKafkaClientQuotaThroughputOutput() GetKafkaClientQuotaThroughputOutput
	ToGetKafkaClientQuotaThroughputOutputWithContext(context.Context) GetKafkaClientQuotaThroughputOutput
}

type GetKafkaClientQuotaThroughputArgs struct {
	// (Required String) The egress throughput limit in bytes per second.
	EgressByteRate pulumi.StringInput `pulumi:"egressByteRate"`
	// (Required String) The ingress throughput limit in bytes per second.
	IngressByteRate pulumi.StringInput `pulumi:"ingressByteRate"`
}

func (GetKafkaClientQuotaThroughputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKafkaClientQuotaThroughput)(nil)).Elem()
}

func (i GetKafkaClientQuotaThroughputArgs) ToGetKafkaClientQuotaThroughputOutput() GetKafkaClientQuotaThroughputOutput {
	return i.ToGetKafkaClientQuotaThroughputOutputWithContext(context.Background())
}

func (i GetKafkaClientQuotaThroughputArgs) ToGetKafkaClientQuotaThroughputOutputWithContext(ctx context.Context) GetKafkaClientQuotaThroughputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKafkaClientQuotaThroughputOutput)
}

func (i GetKafkaClientQuotaThroughputArgs) ToOutput(ctx context.Context) pulumix.Output[GetKafkaClientQuotaThroughput] {
	return pulumix.Output[GetKafkaClientQuotaThroughput]{
		OutputState: i.ToGetKafkaClientQuotaThroughputOutputWithContext(ctx).OutputState,
	}
}

// GetKafkaClientQuotaThroughputArrayInput is an input type that accepts GetKafkaClientQuotaThroughputArray and GetKafkaClientQuotaThroughputArrayOutput values.
// You can construct a concrete instance of `GetKafkaClientQuotaThroughputArrayInput` via:
//
//	GetKafkaClientQuotaThroughputArray{ GetKafkaClientQuotaThroughputArgs{...} }
type GetKafkaClientQuotaThroughputArrayInput interface {
	pulumi.Input

	ToGetKafkaClientQuotaThroughputArrayOutput() GetKafkaClientQuotaThroughputArrayOutput
	ToGetKafkaClientQuotaThroughputArrayOutputWithContext(context.Context) GetKafkaClientQuotaThroughputArrayOutput
}

type GetKafkaClientQuotaThroughputArray []GetKafkaClientQuotaThroughputInput

func (GetKafkaClientQuotaThroughputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKafkaClientQuotaThroughput)(nil)).Elem()
}

func (i GetKafkaClientQuotaThroughputArray) ToGetKafkaClientQuotaThroughputArrayOutput() GetKafkaClientQuotaThroughputArrayOutput {
	return i.ToGetKafkaClientQuotaThroughputArrayOutputWithContext(context.Background())
}

func (i GetKafkaClientQuotaThroughputArray) ToGetKafkaClientQuotaThroughputArrayOutputWithContext(ctx context.Context) GetKafkaClientQuotaThroughputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKafkaClientQuotaThroughputArrayOutput)
}

func (i GetKafkaClientQuotaThroughputArray) ToOutput(ctx context.Context) pulumix.Output[[]GetKafkaClientQuotaThroughput] {
	return pulumix.Output[[]GetKafkaClientQuotaThroughput]{
		OutputState: i.ToGetKafkaClientQuotaThroughputArrayOutputWithContext(ctx).OutputState,
	}
}

type GetKafkaClientQuotaThroughputOutput struct{ *pulumi.OutputState }

func (GetKafkaClientQuotaThroughputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKafkaClientQuotaThroughput)(nil)).Elem()
}

func (o GetKafkaClientQuotaThroughputOutput) ToGetKafkaClientQuotaThroughputOutput() GetKafkaClientQuotaThroughputOutput {
	return o
}

func (o GetKafkaClientQuotaThroughputOutput) ToGetKafkaClientQuotaThroughputOutputWithContext(ctx context.Context) GetKafkaClientQuotaThroughputOutput {
	return o
}

func (o GetKafkaClientQuotaThroughputOutput) ToOutput(ctx context.Context) pulumix.Output[GetKafkaClientQuotaThroughput] {
	return pulumix.Output[GetKafkaClientQuotaThroughput]{
		OutputState: o.OutputState,
	}
}

// (Required String) The egress throughput limit in bytes per second.
func (o GetKafkaClientQuotaThroughputOutput) EgressByteRate() pulumi.StringOutput {
	return o.ApplyT(func(v GetKafkaClientQuotaThroughput) string { return v.EgressByteRate }).(pulumi.StringOutput)
}

// (Required String) The ingress throughput limit in bytes per second.
func (o GetKafkaClientQuotaThroughputOutput) IngressByteRate() pulumi.StringOutput {
	return o.ApplyT(func(v GetKafkaClientQuotaThroughput) string { return v.IngressByteRate }).(pulumi.StringOutput)
}

type GetKafkaClientQuotaThroughputArrayOutput struct{ *pulumi.OutputState }

func (GetKafkaClientQuotaThroughputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKafkaClientQuotaThroughput)(nil)).Elem()
}

func (o GetKafkaClientQuotaThroughputArrayOutput) ToGetKafkaClientQuotaThroughputArrayOutput() GetKafkaClientQuotaThroughputArrayOutput {
	return o
}

func (o GetKafkaClientQuotaThroughputArrayOutput) ToGetKafkaClientQuotaThroughputArrayOutputWithContext(ctx context.Context) GetKafkaClientQuotaThroughputArrayOutput {
	return o
}

func (o GetKafkaClientQuotaThroughputArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetKafkaClientQuotaThroughput] {
	return pulumix.Output[[]GetKafkaClientQuotaThroughput]{
		OutputState: o.OutputState,
	}
}

func (o GetKafkaClientQuotaThroughputArrayOutput) Index(i pulumi.IntInput) GetKafkaClientQuotaThroughputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKafkaClientQuotaThroughput {
		return vs[0].([]GetKafkaClientQuotaThroughput)[vs[1].(int)]
	}).(GetKafkaClientQuotaThroughputOutput)
}

type GetKafkaClusterBasic struct {
}

// GetKafkaClusterBasicInput is an input type that accepts GetKafkaClusterBasicArgs and GetKafkaClusterBasicOutput values.
// You can construct a concrete instance of `GetKafkaClusterBasicInput` via:
//
//	GetKafkaClusterBasicArgs{...}
type GetKafkaClusterBasicInput interface {
	pulumi.Input

	ToGetKafkaClusterBasicOutput() GetKafkaClusterBasicOutput
	ToGetKafkaClusterBasicOutputWithContext(context.Context) GetKafkaClusterBasicOutput
}

type GetKafkaClusterBasicArgs struct {
}

func (GetKafkaClusterBasicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKafkaClusterBasic)(nil)).Elem()
}

func (i GetKafkaClusterBasicArgs) ToGetKafkaClusterBasicOutput() GetKafkaClusterBasicOutput {
	return i.ToGetKafkaClusterBasicOutputWithContext(context.Background())
}

func (i GetKafkaClusterBasicArgs) ToGetKafkaClusterBasicOutputWithContext(ctx context.Context) GetKafkaClusterBasicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKafkaClusterBasicOutput)
}

func (i GetKafkaClusterBasicArgs) ToOutput(ctx context.Context) pulumix.Output[GetKafkaClusterBasic] {
	return pulumix.Output[GetKafkaClusterBasic]{
		OutputState: i.ToGetKafkaClusterBasicOutputWithContext(ctx).OutputState,
	}
}

// GetKafkaClusterBasicArrayInput is an input type that accepts GetKafkaClusterBasicArray and GetKafkaClusterBasicArrayOutput values.
// You can construct a concrete instance of `GetKafkaClusterBasicArrayInput` via:
//
//	GetKafkaClusterBasicArray{ GetKafkaClusterBasicArgs{...} }
type GetKafkaClusterBasicArrayInput interface {
	pulumi.Input

	ToGetKafkaClusterBasicArrayOutput() GetKafkaClusterBasicArrayOutput
	ToGetKafkaClusterBasicArrayOutputWithContext(context.Context) GetKafkaClusterBasicArrayOutput
}

type GetKafkaClusterBasicArray []GetKafkaClusterBasicInput

func (GetKafkaClusterBasicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKafkaClusterBasic)(nil)).Elem()
}

func (i GetKafkaClusterBasicArray) ToGetKafkaClusterBasicArrayOutput() GetKafkaClusterBasicArrayOutput {
	return i.ToGetKafkaClusterBasicArrayOutputWithContext(context.Background())
}

func (i GetKafkaClusterBasicArray) ToGetKafkaClusterBasicArrayOutputWithContext(ctx context.Context) GetKafkaClusterBasicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKafkaClusterBasicArrayOutput)
}

func (i GetKafkaClusterBasicArray) ToOutput(ctx context.Context) pulumix.Output[[]GetKafkaClusterBasic] {
	return pulumix.Output[[]GetKafkaClusterBasic]{
		OutputState: i.ToGetKafkaClusterBasicArrayOutputWithContext(ctx).OutputState,
	}
}

type GetKafkaClusterBasicOutput struct{ *pulumi.OutputState }

func (GetKafkaClusterBasicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKafkaClusterBasic)(nil)).Elem()
}

func (o GetKafkaClusterBasicOutput) ToGetKafkaClusterBasicOutput() GetKafkaClusterBasicOutput {
	return o
}

func (o GetKafkaClusterBasicOutput) ToGetKafkaClusterBasicOutputWithContext(ctx context.Context) GetKafkaClusterBasicOutput {
	return o
}

func (o GetKafkaClusterBasicOutput) ToOutput(ctx context.Context) pulumix.Output[GetKafkaClusterBasic] {
	return pulumix.Output[GetKafkaClusterBasic]{
		OutputState: o.OutputState,
	}
}

type GetKafkaClusterBasicArrayOutput struct{ *pulumi.OutputState }

func (GetKafkaClusterBasicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKafkaClusterBasic)(nil)).Elem()
}

func (o GetKafkaClusterBasicArrayOutput) ToGetKafkaClusterBasicArrayOutput() GetKafkaClusterBasicArrayOutput {
	return o
}

func (o GetKafkaClusterBasicArrayOutput) ToGetKafkaClusterBasicArrayOutputWithContext(ctx context.Context) GetKafkaClusterBasicArrayOutput {
	return o
}

func (o GetKafkaClusterBasicArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetKafkaClusterBasic] {
	return pulumix.Output[[]GetKafkaClusterBasic]{
		OutputState: o.OutputState,
	}
}

func (o GetKafkaClusterBasicArrayOutput) Index(i pulumi.IntInput) GetKafkaClusterBasicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKafkaClusterBasic {
		return vs[0].([]GetKafkaClusterBasic)[vs[1].(int)]
	}).(GetKafkaClusterBasicOutput)
}

type GetKafkaClusterByokKey struct {
	// The ID of the Environment that the Kafka cluster belongs to, for example, `env-xyz456`.
	//
	// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
	Id string `pulumi:"id"`
}

// GetKafkaClusterByokKeyInput is an input type that accepts GetKafkaClusterByokKeyArgs and GetKafkaClusterByokKeyOutput values.
// You can construct a concrete instance of `GetKafkaClusterByokKeyInput` via:
//
//	GetKafkaClusterByokKeyArgs{...}
type GetKafkaClusterByokKeyInput interface {
	pulumi.Input

	ToGetKafkaClusterByokKeyOutput() GetKafkaClusterByokKeyOutput
	ToGetKafkaClusterByokKeyOutputWithContext(context.Context) GetKafkaClusterByokKeyOutput
}

type GetKafkaClusterByokKeyArgs struct {
	// The ID of the Environment that the Kafka cluster belongs to, for example, `env-xyz456`.
	//
	// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetKafkaClusterByokKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKafkaClusterByokKey)(nil)).Elem()
}

func (i GetKafkaClusterByokKeyArgs) ToGetKafkaClusterByokKeyOutput() GetKafkaClusterByokKeyOutput {
	return i.ToGetKafkaClusterByokKeyOutputWithContext(context.Background())
}

func (i GetKafkaClusterByokKeyArgs) ToGetKafkaClusterByokKeyOutputWithContext(ctx context.Context) GetKafkaClusterByokKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKafkaClusterByokKeyOutput)
}

func (i GetKafkaClusterByokKeyArgs) ToOutput(ctx context.Context) pulumix.Output[GetKafkaClusterByokKey] {
	return pulumix.Output[GetKafkaClusterByokKey]{
		OutputState: i.ToGetKafkaClusterByokKeyOutputWithContext(ctx).OutputState,
	}
}

// GetKafkaClusterByokKeyArrayInput is an input type that accepts GetKafkaClusterByokKeyArray and GetKafkaClusterByokKeyArrayOutput values.
// You can construct a concrete instance of `GetKafkaClusterByokKeyArrayInput` via:
//
//	GetKafkaClusterByokKeyArray{ GetKafkaClusterByokKeyArgs{...} }
type GetKafkaClusterByokKeyArrayInput interface {
	pulumi.Input

	ToGetKafkaClusterByokKeyArrayOutput() GetKafkaClusterByokKeyArrayOutput
	ToGetKafkaClusterByokKeyArrayOutputWithContext(context.Context) GetKafkaClusterByokKeyArrayOutput
}

type GetKafkaClusterByokKeyArray []GetKafkaClusterByokKeyInput

func (GetKafkaClusterByokKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKafkaClusterByokKey)(nil)).Elem()
}

func (i GetKafkaClusterByokKeyArray) ToGetKafkaClusterByokKeyArrayOutput() GetKafkaClusterByokKeyArrayOutput {
	return i.ToGetKafkaClusterByokKeyArrayOutputWithContext(context.Background())
}

func (i GetKafkaClusterByokKeyArray) ToGetKafkaClusterByokKeyArrayOutputWithContext(ctx context.Context) GetKafkaClusterByokKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKafkaClusterByokKeyArrayOutput)
}

func (i GetKafkaClusterByokKeyArray) ToOutput(ctx context.Context) pulumix.Output[[]GetKafkaClusterByokKey] {
	return pulumix.Output[[]GetKafkaClusterByokKey]{
		OutputState: i.ToGetKafkaClusterByokKeyArrayOutputWithContext(ctx).OutputState,
	}
}

type GetKafkaClusterByokKeyOutput struct{ *pulumi.OutputState }

func (GetKafkaClusterByokKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKafkaClusterByokKey)(nil)).Elem()
}

func (o GetKafkaClusterByokKeyOutput) ToGetKafkaClusterByokKeyOutput() GetKafkaClusterByokKeyOutput {
	return o
}

func (o GetKafkaClusterByokKeyOutput) ToGetKafkaClusterByokKeyOutputWithContext(ctx context.Context) GetKafkaClusterByokKeyOutput {
	return o
}

func (o GetKafkaClusterByokKeyOutput) ToOutput(ctx context.Context) pulumix.Output[GetKafkaClusterByokKey] {
	return pulumix.Output[GetKafkaClusterByokKey]{
		OutputState: o.OutputState,
	}
}

// The ID of the Environment that the Kafka cluster belongs to, for example, `env-xyz456`.
//
// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
func (o GetKafkaClusterByokKeyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetKafkaClusterByokKey) string { return v.Id }).(pulumi.StringOutput)
}

type GetKafkaClusterByokKeyArrayOutput struct{ *pulumi.OutputState }

func (GetKafkaClusterByokKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKafkaClusterByokKey)(nil)).Elem()
}

func (o GetKafkaClusterByokKeyArrayOutput) ToGetKafkaClusterByokKeyArrayOutput() GetKafkaClusterByokKeyArrayOutput {
	return o
}

func (o GetKafkaClusterByokKeyArrayOutput) ToGetKafkaClusterByokKeyArrayOutputWithContext(ctx context.Context) GetKafkaClusterByokKeyArrayOutput {
	return o
}

func (o GetKafkaClusterByokKeyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetKafkaClusterByokKey] {
	return pulumix.Output[[]GetKafkaClusterByokKey]{
		OutputState: o.OutputState,
	}
}

func (o GetKafkaClusterByokKeyArrayOutput) Index(i pulumi.IntInput) GetKafkaClusterByokKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKafkaClusterByokKey {
		return vs[0].([]GetKafkaClusterByokKey)[vs[1].(int)]
	}).(GetKafkaClusterByokKeyOutput)
}

type GetKafkaClusterDedicated struct {
	// (Required Number) The number of Confluent Kafka Units (CKUs) for Dedicated cluster types. The minimum number of CKUs for `SINGLE_ZONE` dedicated clusters is `1` whereas `MULTI_ZONE` dedicated clusters must have more than `2` CKUs.
	Cku           int    `pulumi:"cku"`
	EncryptionKey string `pulumi:"encryptionKey"`
	// (Required List of String) The list of zones the cluster is in.
	// On AWS, zones are AWS [AZ IDs](https://docs.aws.amazon.com/ram/latest/userguide/working-with-az-ids.html), for example, `use1-az3`.
	// On GCP, zones are GCP [zones](https://cloud.google.com/compute/docs/regions-zones), for example, `us-central1-c`.
	// On Azure, zones are Confluent-chosen names (for example, `1`, `2`, `3`) since Azure does not have universal zone identifiers.
	Zones []string `pulumi:"zones"`
}

// GetKafkaClusterDedicatedInput is an input type that accepts GetKafkaClusterDedicatedArgs and GetKafkaClusterDedicatedOutput values.
// You can construct a concrete instance of `GetKafkaClusterDedicatedInput` via:
//
//	GetKafkaClusterDedicatedArgs{...}
type GetKafkaClusterDedicatedInput interface {
	pulumi.Input

	ToGetKafkaClusterDedicatedOutput() GetKafkaClusterDedicatedOutput
	ToGetKafkaClusterDedicatedOutputWithContext(context.Context) GetKafkaClusterDedicatedOutput
}

type GetKafkaClusterDedicatedArgs struct {
	// (Required Number) The number of Confluent Kafka Units (CKUs) for Dedicated cluster types. The minimum number of CKUs for `SINGLE_ZONE` dedicated clusters is `1` whereas `MULTI_ZONE` dedicated clusters must have more than `2` CKUs.
	Cku           pulumi.IntInput    `pulumi:"cku"`
	EncryptionKey pulumi.StringInput `pulumi:"encryptionKey"`
	// (Required List of String) The list of zones the cluster is in.
	// On AWS, zones are AWS [AZ IDs](https://docs.aws.amazon.com/ram/latest/userguide/working-with-az-ids.html), for example, `use1-az3`.
	// On GCP, zones are GCP [zones](https://cloud.google.com/compute/docs/regions-zones), for example, `us-central1-c`.
	// On Azure, zones are Confluent-chosen names (for example, `1`, `2`, `3`) since Azure does not have universal zone identifiers.
	Zones pulumi.StringArrayInput `pulumi:"zones"`
}

func (GetKafkaClusterDedicatedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKafkaClusterDedicated)(nil)).Elem()
}

func (i GetKafkaClusterDedicatedArgs) ToGetKafkaClusterDedicatedOutput() GetKafkaClusterDedicatedOutput {
	return i.ToGetKafkaClusterDedicatedOutputWithContext(context.Background())
}

func (i GetKafkaClusterDedicatedArgs) ToGetKafkaClusterDedicatedOutputWithContext(ctx context.Context) GetKafkaClusterDedicatedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKafkaClusterDedicatedOutput)
}

func (i GetKafkaClusterDedicatedArgs) ToOutput(ctx context.Context) pulumix.Output[GetKafkaClusterDedicated] {
	return pulumix.Output[GetKafkaClusterDedicated]{
		OutputState: i.ToGetKafkaClusterDedicatedOutputWithContext(ctx).OutputState,
	}
}

func (i GetKafkaClusterDedicatedArgs) ToGetKafkaClusterDedicatedPtrOutput() GetKafkaClusterDedicatedPtrOutput {
	return i.ToGetKafkaClusterDedicatedPtrOutputWithContext(context.Background())
}

func (i GetKafkaClusterDedicatedArgs) ToGetKafkaClusterDedicatedPtrOutputWithContext(ctx context.Context) GetKafkaClusterDedicatedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKafkaClusterDedicatedOutput).ToGetKafkaClusterDedicatedPtrOutputWithContext(ctx)
}

// GetKafkaClusterDedicatedPtrInput is an input type that accepts GetKafkaClusterDedicatedArgs, GetKafkaClusterDedicatedPtr and GetKafkaClusterDedicatedPtrOutput values.
// You can construct a concrete instance of `GetKafkaClusterDedicatedPtrInput` via:
//
//	        GetKafkaClusterDedicatedArgs{...}
//
//	or:
//
//	        nil
type GetKafkaClusterDedicatedPtrInput interface {
	pulumi.Input

	ToGetKafkaClusterDedicatedPtrOutput() GetKafkaClusterDedicatedPtrOutput
	ToGetKafkaClusterDedicatedPtrOutputWithContext(context.Context) GetKafkaClusterDedicatedPtrOutput
}

type getKafkaClusterDedicatedPtrType GetKafkaClusterDedicatedArgs

func GetKafkaClusterDedicatedPtr(v *GetKafkaClusterDedicatedArgs) GetKafkaClusterDedicatedPtrInput {
	return (*getKafkaClusterDedicatedPtrType)(v)
}

func (*getKafkaClusterDedicatedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetKafkaClusterDedicated)(nil)).Elem()
}

func (i *getKafkaClusterDedicatedPtrType) ToGetKafkaClusterDedicatedPtrOutput() GetKafkaClusterDedicatedPtrOutput {
	return i.ToGetKafkaClusterDedicatedPtrOutputWithContext(context.Background())
}

func (i *getKafkaClusterDedicatedPtrType) ToGetKafkaClusterDedicatedPtrOutputWithContext(ctx context.Context) GetKafkaClusterDedicatedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKafkaClusterDedicatedPtrOutput)
}

func (i *getKafkaClusterDedicatedPtrType) ToOutput(ctx context.Context) pulumix.Output[*GetKafkaClusterDedicated] {
	return pulumix.Output[*GetKafkaClusterDedicated]{
		OutputState: i.ToGetKafkaClusterDedicatedPtrOutputWithContext(ctx).OutputState,
	}
}

type GetKafkaClusterDedicatedOutput struct{ *pulumi.OutputState }

func (GetKafkaClusterDedicatedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKafkaClusterDedicated)(nil)).Elem()
}

func (o GetKafkaClusterDedicatedOutput) ToGetKafkaClusterDedicatedOutput() GetKafkaClusterDedicatedOutput {
	return o
}

func (o GetKafkaClusterDedicatedOutput) ToGetKafkaClusterDedicatedOutputWithContext(ctx context.Context) GetKafkaClusterDedicatedOutput {
	return o
}

func (o GetKafkaClusterDedicatedOutput) ToGetKafkaClusterDedicatedPtrOutput() GetKafkaClusterDedicatedPtrOutput {
	return o.ToGetKafkaClusterDedicatedPtrOutputWithContext(context.Background())
}

func (o GetKafkaClusterDedicatedOutput) ToGetKafkaClusterDedicatedPtrOutputWithContext(ctx context.Context) GetKafkaClusterDedicatedPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetKafkaClusterDedicated) *GetKafkaClusterDedicated {
		return &v
	}).(GetKafkaClusterDedicatedPtrOutput)
}

func (o GetKafkaClusterDedicatedOutput) ToOutput(ctx context.Context) pulumix.Output[GetKafkaClusterDedicated] {
	return pulumix.Output[GetKafkaClusterDedicated]{
		OutputState: o.OutputState,
	}
}

// (Required Number) The number of Confluent Kafka Units (CKUs) for Dedicated cluster types. The minimum number of CKUs for `SINGLE_ZONE` dedicated clusters is `1` whereas `MULTI_ZONE` dedicated clusters must have more than `2` CKUs.
func (o GetKafkaClusterDedicatedOutput) Cku() pulumi.IntOutput {
	return o.ApplyT(func(v GetKafkaClusterDedicated) int { return v.Cku }).(pulumi.IntOutput)
}

func (o GetKafkaClusterDedicatedOutput) EncryptionKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetKafkaClusterDedicated) string { return v.EncryptionKey }).(pulumi.StringOutput)
}

// (Required List of String) The list of zones the cluster is in.
// On AWS, zones are AWS [AZ IDs](https://docs.aws.amazon.com/ram/latest/userguide/working-with-az-ids.html), for example, `use1-az3`.
// On GCP, zones are GCP [zones](https://cloud.google.com/compute/docs/regions-zones), for example, `us-central1-c`.
// On Azure, zones are Confluent-chosen names (for example, `1`, `2`, `3`) since Azure does not have universal zone identifiers.
func (o GetKafkaClusterDedicatedOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetKafkaClusterDedicated) []string { return v.Zones }).(pulumi.StringArrayOutput)
}

type GetKafkaClusterDedicatedPtrOutput struct{ *pulumi.OutputState }

func (GetKafkaClusterDedicatedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetKafkaClusterDedicated)(nil)).Elem()
}

func (o GetKafkaClusterDedicatedPtrOutput) ToGetKafkaClusterDedicatedPtrOutput() GetKafkaClusterDedicatedPtrOutput {
	return o
}

func (o GetKafkaClusterDedicatedPtrOutput) ToGetKafkaClusterDedicatedPtrOutputWithContext(ctx context.Context) GetKafkaClusterDedicatedPtrOutput {
	return o
}

func (o GetKafkaClusterDedicatedPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GetKafkaClusterDedicated] {
	return pulumix.Output[*GetKafkaClusterDedicated]{
		OutputState: o.OutputState,
	}
}

func (o GetKafkaClusterDedicatedPtrOutput) Elem() GetKafkaClusterDedicatedOutput {
	return o.ApplyT(func(v *GetKafkaClusterDedicated) GetKafkaClusterDedicated {
		if v != nil {
			return *v
		}
		var ret GetKafkaClusterDedicated
		return ret
	}).(GetKafkaClusterDedicatedOutput)
}

// (Required Number) The number of Confluent Kafka Units (CKUs) for Dedicated cluster types. The minimum number of CKUs for `SINGLE_ZONE` dedicated clusters is `1` whereas `MULTI_ZONE` dedicated clusters must have more than `2` CKUs.
func (o GetKafkaClusterDedicatedPtrOutput) Cku() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetKafkaClusterDedicated) *int {
		if v == nil {
			return nil
		}
		return &v.Cku
	}).(pulumi.IntPtrOutput)
}

func (o GetKafkaClusterDedicatedPtrOutput) EncryptionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetKafkaClusterDedicated) *string {
		if v == nil {
			return nil
		}
		return &v.EncryptionKey
	}).(pulumi.StringPtrOutput)
}

// (Required List of String) The list of zones the cluster is in.
// On AWS, zones are AWS [AZ IDs](https://docs.aws.amazon.com/ram/latest/userguide/working-with-az-ids.html), for example, `use1-az3`.
// On GCP, zones are GCP [zones](https://cloud.google.com/compute/docs/regions-zones), for example, `us-central1-c`.
// On Azure, zones are Confluent-chosen names (for example, `1`, `2`, `3`) since Azure does not have universal zone identifiers.
func (o GetKafkaClusterDedicatedPtrOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetKafkaClusterDedicated) []string {
		if v == nil {
			return nil
		}
		return v.Zones
	}).(pulumi.StringArrayOutput)
}

type GetKafkaClusterEnterprise struct {
}

// GetKafkaClusterEnterpriseInput is an input type that accepts GetKafkaClusterEnterpriseArgs and GetKafkaClusterEnterpriseOutput values.
// You can construct a concrete instance of `GetKafkaClusterEnterpriseInput` via:
//
//	GetKafkaClusterEnterpriseArgs{...}
type GetKafkaClusterEnterpriseInput interface {
	pulumi.Input

	ToGetKafkaClusterEnterpriseOutput() GetKafkaClusterEnterpriseOutput
	ToGetKafkaClusterEnterpriseOutputWithContext(context.Context) GetKafkaClusterEnterpriseOutput
}

type GetKafkaClusterEnterpriseArgs struct {
}

func (GetKafkaClusterEnterpriseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKafkaClusterEnterprise)(nil)).Elem()
}

func (i GetKafkaClusterEnterpriseArgs) ToGetKafkaClusterEnterpriseOutput() GetKafkaClusterEnterpriseOutput {
	return i.ToGetKafkaClusterEnterpriseOutputWithContext(context.Background())
}

func (i GetKafkaClusterEnterpriseArgs) ToGetKafkaClusterEnterpriseOutputWithContext(ctx context.Context) GetKafkaClusterEnterpriseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKafkaClusterEnterpriseOutput)
}

func (i GetKafkaClusterEnterpriseArgs) ToOutput(ctx context.Context) pulumix.Output[GetKafkaClusterEnterprise] {
	return pulumix.Output[GetKafkaClusterEnterprise]{
		OutputState: i.ToGetKafkaClusterEnterpriseOutputWithContext(ctx).OutputState,
	}
}

// GetKafkaClusterEnterpriseArrayInput is an input type that accepts GetKafkaClusterEnterpriseArray and GetKafkaClusterEnterpriseArrayOutput values.
// You can construct a concrete instance of `GetKafkaClusterEnterpriseArrayInput` via:
//
//	GetKafkaClusterEnterpriseArray{ GetKafkaClusterEnterpriseArgs{...} }
type GetKafkaClusterEnterpriseArrayInput interface {
	pulumi.Input

	ToGetKafkaClusterEnterpriseArrayOutput() GetKafkaClusterEnterpriseArrayOutput
	ToGetKafkaClusterEnterpriseArrayOutputWithContext(context.Context) GetKafkaClusterEnterpriseArrayOutput
}

type GetKafkaClusterEnterpriseArray []GetKafkaClusterEnterpriseInput

func (GetKafkaClusterEnterpriseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKafkaClusterEnterprise)(nil)).Elem()
}

func (i GetKafkaClusterEnterpriseArray) ToGetKafkaClusterEnterpriseArrayOutput() GetKafkaClusterEnterpriseArrayOutput {
	return i.ToGetKafkaClusterEnterpriseArrayOutputWithContext(context.Background())
}

func (i GetKafkaClusterEnterpriseArray) ToGetKafkaClusterEnterpriseArrayOutputWithContext(ctx context.Context) GetKafkaClusterEnterpriseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKafkaClusterEnterpriseArrayOutput)
}

func (i GetKafkaClusterEnterpriseArray) ToOutput(ctx context.Context) pulumix.Output[[]GetKafkaClusterEnterprise] {
	return pulumix.Output[[]GetKafkaClusterEnterprise]{
		OutputState: i.ToGetKafkaClusterEnterpriseArrayOutputWithContext(ctx).OutputState,
	}
}

type GetKafkaClusterEnterpriseOutput struct{ *pulumi.OutputState }

func (GetKafkaClusterEnterpriseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKafkaClusterEnterprise)(nil)).Elem()
}

func (o GetKafkaClusterEnterpriseOutput) ToGetKafkaClusterEnterpriseOutput() GetKafkaClusterEnterpriseOutput {
	return o
}

func (o GetKafkaClusterEnterpriseOutput) ToGetKafkaClusterEnterpriseOutputWithContext(ctx context.Context) GetKafkaClusterEnterpriseOutput {
	return o
}

func (o GetKafkaClusterEnterpriseOutput) ToOutput(ctx context.Context) pulumix.Output[GetKafkaClusterEnterprise] {
	return pulumix.Output[GetKafkaClusterEnterprise]{
		OutputState: o.OutputState,
	}
}

type GetKafkaClusterEnterpriseArrayOutput struct{ *pulumi.OutputState }

func (GetKafkaClusterEnterpriseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKafkaClusterEnterprise)(nil)).Elem()
}

func (o GetKafkaClusterEnterpriseArrayOutput) ToGetKafkaClusterEnterpriseArrayOutput() GetKafkaClusterEnterpriseArrayOutput {
	return o
}

func (o GetKafkaClusterEnterpriseArrayOutput) ToGetKafkaClusterEnterpriseArrayOutputWithContext(ctx context.Context) GetKafkaClusterEnterpriseArrayOutput {
	return o
}

func (o GetKafkaClusterEnterpriseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetKafkaClusterEnterprise] {
	return pulumix.Output[[]GetKafkaClusterEnterprise]{
		OutputState: o.OutputState,
	}
}

func (o GetKafkaClusterEnterpriseArrayOutput) Index(i pulumi.IntInput) GetKafkaClusterEnterpriseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKafkaClusterEnterprise {
		return vs[0].([]GetKafkaClusterEnterprise)[vs[1].(int)]
	}).(GetKafkaClusterEnterpriseOutput)
}

type GetKafkaClusterEnvironment struct {
	// The ID of the Environment that the Kafka cluster belongs to, for example, `env-xyz456`.
	//
	// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
	Id string `pulumi:"id"`
}

// GetKafkaClusterEnvironmentInput is an input type that accepts GetKafkaClusterEnvironmentArgs and GetKafkaClusterEnvironmentOutput values.
// You can construct a concrete instance of `GetKafkaClusterEnvironmentInput` via:
//
//	GetKafkaClusterEnvironmentArgs{...}
type GetKafkaClusterEnvironmentInput interface {
	pulumi.Input

	ToGetKafkaClusterEnvironmentOutput() GetKafkaClusterEnvironmentOutput
	ToGetKafkaClusterEnvironmentOutputWithContext(context.Context) GetKafkaClusterEnvironmentOutput
}

type GetKafkaClusterEnvironmentArgs struct {
	// The ID of the Environment that the Kafka cluster belongs to, for example, `env-xyz456`.
	//
	// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetKafkaClusterEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKafkaClusterEnvironment)(nil)).Elem()
}

func (i GetKafkaClusterEnvironmentArgs) ToGetKafkaClusterEnvironmentOutput() GetKafkaClusterEnvironmentOutput {
	return i.ToGetKafkaClusterEnvironmentOutputWithContext(context.Background())
}

func (i GetKafkaClusterEnvironmentArgs) ToGetKafkaClusterEnvironmentOutputWithContext(ctx context.Context) GetKafkaClusterEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKafkaClusterEnvironmentOutput)
}

func (i GetKafkaClusterEnvironmentArgs) ToOutput(ctx context.Context) pulumix.Output[GetKafkaClusterEnvironment] {
	return pulumix.Output[GetKafkaClusterEnvironment]{
		OutputState: i.ToGetKafkaClusterEnvironmentOutputWithContext(ctx).OutputState,
	}
}

type GetKafkaClusterEnvironmentOutput struct{ *pulumi.OutputState }

func (GetKafkaClusterEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKafkaClusterEnvironment)(nil)).Elem()
}

func (o GetKafkaClusterEnvironmentOutput) ToGetKafkaClusterEnvironmentOutput() GetKafkaClusterEnvironmentOutput {
	return o
}

func (o GetKafkaClusterEnvironmentOutput) ToGetKafkaClusterEnvironmentOutputWithContext(ctx context.Context) GetKafkaClusterEnvironmentOutput {
	return o
}

func (o GetKafkaClusterEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[GetKafkaClusterEnvironment] {
	return pulumix.Output[GetKafkaClusterEnvironment]{
		OutputState: o.OutputState,
	}
}

// The ID of the Environment that the Kafka cluster belongs to, for example, `env-xyz456`.
//
// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
func (o GetKafkaClusterEnvironmentOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetKafkaClusterEnvironment) string { return v.Id }).(pulumi.StringOutput)
}

type GetKafkaClusterNetwork struct {
	// The ID of the Environment that the Kafka cluster belongs to, for example, `env-xyz456`.
	//
	// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
	Id string `pulumi:"id"`
}

// GetKafkaClusterNetworkInput is an input type that accepts GetKafkaClusterNetworkArgs and GetKafkaClusterNetworkOutput values.
// You can construct a concrete instance of `GetKafkaClusterNetworkInput` via:
//
//	GetKafkaClusterNetworkArgs{...}
type GetKafkaClusterNetworkInput interface {
	pulumi.Input

	ToGetKafkaClusterNetworkOutput() GetKafkaClusterNetworkOutput
	ToGetKafkaClusterNetworkOutputWithContext(context.Context) GetKafkaClusterNetworkOutput
}

type GetKafkaClusterNetworkArgs struct {
	// The ID of the Environment that the Kafka cluster belongs to, for example, `env-xyz456`.
	//
	// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetKafkaClusterNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKafkaClusterNetwork)(nil)).Elem()
}

func (i GetKafkaClusterNetworkArgs) ToGetKafkaClusterNetworkOutput() GetKafkaClusterNetworkOutput {
	return i.ToGetKafkaClusterNetworkOutputWithContext(context.Background())
}

func (i GetKafkaClusterNetworkArgs) ToGetKafkaClusterNetworkOutputWithContext(ctx context.Context) GetKafkaClusterNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKafkaClusterNetworkOutput)
}

func (i GetKafkaClusterNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[GetKafkaClusterNetwork] {
	return pulumix.Output[GetKafkaClusterNetwork]{
		OutputState: i.ToGetKafkaClusterNetworkOutputWithContext(ctx).OutputState,
	}
}

// GetKafkaClusterNetworkArrayInput is an input type that accepts GetKafkaClusterNetworkArray and GetKafkaClusterNetworkArrayOutput values.
// You can construct a concrete instance of `GetKafkaClusterNetworkArrayInput` via:
//
//	GetKafkaClusterNetworkArray{ GetKafkaClusterNetworkArgs{...} }
type GetKafkaClusterNetworkArrayInput interface {
	pulumi.Input

	ToGetKafkaClusterNetworkArrayOutput() GetKafkaClusterNetworkArrayOutput
	ToGetKafkaClusterNetworkArrayOutputWithContext(context.Context) GetKafkaClusterNetworkArrayOutput
}

type GetKafkaClusterNetworkArray []GetKafkaClusterNetworkInput

func (GetKafkaClusterNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKafkaClusterNetwork)(nil)).Elem()
}

func (i GetKafkaClusterNetworkArray) ToGetKafkaClusterNetworkArrayOutput() GetKafkaClusterNetworkArrayOutput {
	return i.ToGetKafkaClusterNetworkArrayOutputWithContext(context.Background())
}

func (i GetKafkaClusterNetworkArray) ToGetKafkaClusterNetworkArrayOutputWithContext(ctx context.Context) GetKafkaClusterNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKafkaClusterNetworkArrayOutput)
}

func (i GetKafkaClusterNetworkArray) ToOutput(ctx context.Context) pulumix.Output[[]GetKafkaClusterNetwork] {
	return pulumix.Output[[]GetKafkaClusterNetwork]{
		OutputState: i.ToGetKafkaClusterNetworkArrayOutputWithContext(ctx).OutputState,
	}
}

type GetKafkaClusterNetworkOutput struct{ *pulumi.OutputState }

func (GetKafkaClusterNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKafkaClusterNetwork)(nil)).Elem()
}

func (o GetKafkaClusterNetworkOutput) ToGetKafkaClusterNetworkOutput() GetKafkaClusterNetworkOutput {
	return o
}

func (o GetKafkaClusterNetworkOutput) ToGetKafkaClusterNetworkOutputWithContext(ctx context.Context) GetKafkaClusterNetworkOutput {
	return o
}

func (o GetKafkaClusterNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[GetKafkaClusterNetwork] {
	return pulumix.Output[GetKafkaClusterNetwork]{
		OutputState: o.OutputState,
	}
}

// The ID of the Environment that the Kafka cluster belongs to, for example, `env-xyz456`.
//
// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
func (o GetKafkaClusterNetworkOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetKafkaClusterNetwork) string { return v.Id }).(pulumi.StringOutput)
}

type GetKafkaClusterNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetKafkaClusterNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKafkaClusterNetwork)(nil)).Elem()
}

func (o GetKafkaClusterNetworkArrayOutput) ToGetKafkaClusterNetworkArrayOutput() GetKafkaClusterNetworkArrayOutput {
	return o
}

func (o GetKafkaClusterNetworkArrayOutput) ToGetKafkaClusterNetworkArrayOutputWithContext(ctx context.Context) GetKafkaClusterNetworkArrayOutput {
	return o
}

func (o GetKafkaClusterNetworkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetKafkaClusterNetwork] {
	return pulumix.Output[[]GetKafkaClusterNetwork]{
		OutputState: o.OutputState,
	}
}

func (o GetKafkaClusterNetworkArrayOutput) Index(i pulumi.IntInput) GetKafkaClusterNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKafkaClusterNetwork {
		return vs[0].([]GetKafkaClusterNetwork)[vs[1].(int)]
	}).(GetKafkaClusterNetworkOutput)
}

type GetKafkaClusterStandard struct {
}

// GetKafkaClusterStandardInput is an input type that accepts GetKafkaClusterStandardArgs and GetKafkaClusterStandardOutput values.
// You can construct a concrete instance of `GetKafkaClusterStandardInput` via:
//
//	GetKafkaClusterStandardArgs{...}
type GetKafkaClusterStandardInput interface {
	pulumi.Input

	ToGetKafkaClusterStandardOutput() GetKafkaClusterStandardOutput
	ToGetKafkaClusterStandardOutputWithContext(context.Context) GetKafkaClusterStandardOutput
}

type GetKafkaClusterStandardArgs struct {
}

func (GetKafkaClusterStandardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKafkaClusterStandard)(nil)).Elem()
}

func (i GetKafkaClusterStandardArgs) ToGetKafkaClusterStandardOutput() GetKafkaClusterStandardOutput {
	return i.ToGetKafkaClusterStandardOutputWithContext(context.Background())
}

func (i GetKafkaClusterStandardArgs) ToGetKafkaClusterStandardOutputWithContext(ctx context.Context) GetKafkaClusterStandardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKafkaClusterStandardOutput)
}

func (i GetKafkaClusterStandardArgs) ToOutput(ctx context.Context) pulumix.Output[GetKafkaClusterStandard] {
	return pulumix.Output[GetKafkaClusterStandard]{
		OutputState: i.ToGetKafkaClusterStandardOutputWithContext(ctx).OutputState,
	}
}

// GetKafkaClusterStandardArrayInput is an input type that accepts GetKafkaClusterStandardArray and GetKafkaClusterStandardArrayOutput values.
// You can construct a concrete instance of `GetKafkaClusterStandardArrayInput` via:
//
//	GetKafkaClusterStandardArray{ GetKafkaClusterStandardArgs{...} }
type GetKafkaClusterStandardArrayInput interface {
	pulumi.Input

	ToGetKafkaClusterStandardArrayOutput() GetKafkaClusterStandardArrayOutput
	ToGetKafkaClusterStandardArrayOutputWithContext(context.Context) GetKafkaClusterStandardArrayOutput
}

type GetKafkaClusterStandardArray []GetKafkaClusterStandardInput

func (GetKafkaClusterStandardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKafkaClusterStandard)(nil)).Elem()
}

func (i GetKafkaClusterStandardArray) ToGetKafkaClusterStandardArrayOutput() GetKafkaClusterStandardArrayOutput {
	return i.ToGetKafkaClusterStandardArrayOutputWithContext(context.Background())
}

func (i GetKafkaClusterStandardArray) ToGetKafkaClusterStandardArrayOutputWithContext(ctx context.Context) GetKafkaClusterStandardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKafkaClusterStandardArrayOutput)
}

func (i GetKafkaClusterStandardArray) ToOutput(ctx context.Context) pulumix.Output[[]GetKafkaClusterStandard] {
	return pulumix.Output[[]GetKafkaClusterStandard]{
		OutputState: i.ToGetKafkaClusterStandardArrayOutputWithContext(ctx).OutputState,
	}
}

type GetKafkaClusterStandardOutput struct{ *pulumi.OutputState }

func (GetKafkaClusterStandardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKafkaClusterStandard)(nil)).Elem()
}

func (o GetKafkaClusterStandardOutput) ToGetKafkaClusterStandardOutput() GetKafkaClusterStandardOutput {
	return o
}

func (o GetKafkaClusterStandardOutput) ToGetKafkaClusterStandardOutputWithContext(ctx context.Context) GetKafkaClusterStandardOutput {
	return o
}

func (o GetKafkaClusterStandardOutput) ToOutput(ctx context.Context) pulumix.Output[GetKafkaClusterStandard] {
	return pulumix.Output[GetKafkaClusterStandard]{
		OutputState: o.OutputState,
	}
}

type GetKafkaClusterStandardArrayOutput struct{ *pulumi.OutputState }

func (GetKafkaClusterStandardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKafkaClusterStandard)(nil)).Elem()
}

func (o GetKafkaClusterStandardArrayOutput) ToGetKafkaClusterStandardArrayOutput() GetKafkaClusterStandardArrayOutput {
	return o
}

func (o GetKafkaClusterStandardArrayOutput) ToGetKafkaClusterStandardArrayOutputWithContext(ctx context.Context) GetKafkaClusterStandardArrayOutput {
	return o
}

func (o GetKafkaClusterStandardArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetKafkaClusterStandard] {
	return pulumix.Output[[]GetKafkaClusterStandard]{
		OutputState: o.OutputState,
	}
}

func (o GetKafkaClusterStandardArrayOutput) Index(i pulumi.IntInput) GetKafkaClusterStandardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKafkaClusterStandard {
		return vs[0].([]GetKafkaClusterStandard)[vs[1].(int)]
	}).(GetKafkaClusterStandardOutput)
}

type GetKafkaTopicCredentials struct {
	// The Kafka API Key.
	Key    string `pulumi:"key"`
	Secret string `pulumi:"secret"`
}

// GetKafkaTopicCredentialsInput is an input type that accepts GetKafkaTopicCredentialsArgs and GetKafkaTopicCredentialsOutput values.
// You can construct a concrete instance of `GetKafkaTopicCredentialsInput` via:
//
//	GetKafkaTopicCredentialsArgs{...}
type GetKafkaTopicCredentialsInput interface {
	pulumi.Input

	ToGetKafkaTopicCredentialsOutput() GetKafkaTopicCredentialsOutput
	ToGetKafkaTopicCredentialsOutputWithContext(context.Context) GetKafkaTopicCredentialsOutput
}

type GetKafkaTopicCredentialsArgs struct {
	// The Kafka API Key.
	Key    pulumi.StringInput `pulumi:"key"`
	Secret pulumi.StringInput `pulumi:"secret"`
}

func (GetKafkaTopicCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKafkaTopicCredentials)(nil)).Elem()
}

func (i GetKafkaTopicCredentialsArgs) ToGetKafkaTopicCredentialsOutput() GetKafkaTopicCredentialsOutput {
	return i.ToGetKafkaTopicCredentialsOutputWithContext(context.Background())
}

func (i GetKafkaTopicCredentialsArgs) ToGetKafkaTopicCredentialsOutputWithContext(ctx context.Context) GetKafkaTopicCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKafkaTopicCredentialsOutput)
}

func (i GetKafkaTopicCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[GetKafkaTopicCredentials] {
	return pulumix.Output[GetKafkaTopicCredentials]{
		OutputState: i.ToGetKafkaTopicCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i GetKafkaTopicCredentialsArgs) ToGetKafkaTopicCredentialsPtrOutput() GetKafkaTopicCredentialsPtrOutput {
	return i.ToGetKafkaTopicCredentialsPtrOutputWithContext(context.Background())
}

func (i GetKafkaTopicCredentialsArgs) ToGetKafkaTopicCredentialsPtrOutputWithContext(ctx context.Context) GetKafkaTopicCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKafkaTopicCredentialsOutput).ToGetKafkaTopicCredentialsPtrOutputWithContext(ctx)
}

// GetKafkaTopicCredentialsPtrInput is an input type that accepts GetKafkaTopicCredentialsArgs, GetKafkaTopicCredentialsPtr and GetKafkaTopicCredentialsPtrOutput values.
// You can construct a concrete instance of `GetKafkaTopicCredentialsPtrInput` via:
//
//	        GetKafkaTopicCredentialsArgs{...}
//
//	or:
//
//	        nil
type GetKafkaTopicCredentialsPtrInput interface {
	pulumi.Input

	ToGetKafkaTopicCredentialsPtrOutput() GetKafkaTopicCredentialsPtrOutput
	ToGetKafkaTopicCredentialsPtrOutputWithContext(context.Context) GetKafkaTopicCredentialsPtrOutput
}

type getKafkaTopicCredentialsPtrType GetKafkaTopicCredentialsArgs

func GetKafkaTopicCredentialsPtr(v *GetKafkaTopicCredentialsArgs) GetKafkaTopicCredentialsPtrInput {
	return (*getKafkaTopicCredentialsPtrType)(v)
}

func (*getKafkaTopicCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetKafkaTopicCredentials)(nil)).Elem()
}

func (i *getKafkaTopicCredentialsPtrType) ToGetKafkaTopicCredentialsPtrOutput() GetKafkaTopicCredentialsPtrOutput {
	return i.ToGetKafkaTopicCredentialsPtrOutputWithContext(context.Background())
}

func (i *getKafkaTopicCredentialsPtrType) ToGetKafkaTopicCredentialsPtrOutputWithContext(ctx context.Context) GetKafkaTopicCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKafkaTopicCredentialsPtrOutput)
}

func (i *getKafkaTopicCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*GetKafkaTopicCredentials] {
	return pulumix.Output[*GetKafkaTopicCredentials]{
		OutputState: i.ToGetKafkaTopicCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

type GetKafkaTopicCredentialsOutput struct{ *pulumi.OutputState }

func (GetKafkaTopicCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKafkaTopicCredentials)(nil)).Elem()
}

func (o GetKafkaTopicCredentialsOutput) ToGetKafkaTopicCredentialsOutput() GetKafkaTopicCredentialsOutput {
	return o
}

func (o GetKafkaTopicCredentialsOutput) ToGetKafkaTopicCredentialsOutputWithContext(ctx context.Context) GetKafkaTopicCredentialsOutput {
	return o
}

func (o GetKafkaTopicCredentialsOutput) ToGetKafkaTopicCredentialsPtrOutput() GetKafkaTopicCredentialsPtrOutput {
	return o.ToGetKafkaTopicCredentialsPtrOutputWithContext(context.Background())
}

func (o GetKafkaTopicCredentialsOutput) ToGetKafkaTopicCredentialsPtrOutputWithContext(ctx context.Context) GetKafkaTopicCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetKafkaTopicCredentials) *GetKafkaTopicCredentials {
		return &v
	}).(GetKafkaTopicCredentialsPtrOutput)
}

func (o GetKafkaTopicCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[GetKafkaTopicCredentials] {
	return pulumix.Output[GetKafkaTopicCredentials]{
		OutputState: o.OutputState,
	}
}

// The Kafka API Key.
func (o GetKafkaTopicCredentialsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetKafkaTopicCredentials) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetKafkaTopicCredentialsOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v GetKafkaTopicCredentials) string { return v.Secret }).(pulumi.StringOutput)
}

type GetKafkaTopicCredentialsPtrOutput struct{ *pulumi.OutputState }

func (GetKafkaTopicCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetKafkaTopicCredentials)(nil)).Elem()
}

func (o GetKafkaTopicCredentialsPtrOutput) ToGetKafkaTopicCredentialsPtrOutput() GetKafkaTopicCredentialsPtrOutput {
	return o
}

func (o GetKafkaTopicCredentialsPtrOutput) ToGetKafkaTopicCredentialsPtrOutputWithContext(ctx context.Context) GetKafkaTopicCredentialsPtrOutput {
	return o
}

func (o GetKafkaTopicCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GetKafkaTopicCredentials] {
	return pulumix.Output[*GetKafkaTopicCredentials]{
		OutputState: o.OutputState,
	}
}

func (o GetKafkaTopicCredentialsPtrOutput) Elem() GetKafkaTopicCredentialsOutput {
	return o.ApplyT(func(v *GetKafkaTopicCredentials) GetKafkaTopicCredentials {
		if v != nil {
			return *v
		}
		var ret GetKafkaTopicCredentials
		return ret
	}).(GetKafkaTopicCredentialsOutput)
}

// The Kafka API Key.
func (o GetKafkaTopicCredentialsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetKafkaTopicCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

func (o GetKafkaTopicCredentialsPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetKafkaTopicCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Secret
	}).(pulumi.StringPtrOutput)
}

type GetKafkaTopicKafkaCluster struct {
	// The ID of the Kafka cluster, for example, `lkc-abc123`.
	Id string `pulumi:"id"`
}

// GetKafkaTopicKafkaClusterInput is an input type that accepts GetKafkaTopicKafkaClusterArgs and GetKafkaTopicKafkaClusterOutput values.
// You can construct a concrete instance of `GetKafkaTopicKafkaClusterInput` via:
//
//	GetKafkaTopicKafkaClusterArgs{...}
type GetKafkaTopicKafkaClusterInput interface {
	pulumi.Input

	ToGetKafkaTopicKafkaClusterOutput() GetKafkaTopicKafkaClusterOutput
	ToGetKafkaTopicKafkaClusterOutputWithContext(context.Context) GetKafkaTopicKafkaClusterOutput
}

type GetKafkaTopicKafkaClusterArgs struct {
	// The ID of the Kafka cluster, for example, `lkc-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetKafkaTopicKafkaClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKafkaTopicKafkaCluster)(nil)).Elem()
}

func (i GetKafkaTopicKafkaClusterArgs) ToGetKafkaTopicKafkaClusterOutput() GetKafkaTopicKafkaClusterOutput {
	return i.ToGetKafkaTopicKafkaClusterOutputWithContext(context.Background())
}

func (i GetKafkaTopicKafkaClusterArgs) ToGetKafkaTopicKafkaClusterOutputWithContext(ctx context.Context) GetKafkaTopicKafkaClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKafkaTopicKafkaClusterOutput)
}

func (i GetKafkaTopicKafkaClusterArgs) ToOutput(ctx context.Context) pulumix.Output[GetKafkaTopicKafkaCluster] {
	return pulumix.Output[GetKafkaTopicKafkaCluster]{
		OutputState: i.ToGetKafkaTopicKafkaClusterOutputWithContext(ctx).OutputState,
	}
}

func (i GetKafkaTopicKafkaClusterArgs) ToGetKafkaTopicKafkaClusterPtrOutput() GetKafkaTopicKafkaClusterPtrOutput {
	return i.ToGetKafkaTopicKafkaClusterPtrOutputWithContext(context.Background())
}

func (i GetKafkaTopicKafkaClusterArgs) ToGetKafkaTopicKafkaClusterPtrOutputWithContext(ctx context.Context) GetKafkaTopicKafkaClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKafkaTopicKafkaClusterOutput).ToGetKafkaTopicKafkaClusterPtrOutputWithContext(ctx)
}

// GetKafkaTopicKafkaClusterPtrInput is an input type that accepts GetKafkaTopicKafkaClusterArgs, GetKafkaTopicKafkaClusterPtr and GetKafkaTopicKafkaClusterPtrOutput values.
// You can construct a concrete instance of `GetKafkaTopicKafkaClusterPtrInput` via:
//
//	        GetKafkaTopicKafkaClusterArgs{...}
//
//	or:
//
//	        nil
type GetKafkaTopicKafkaClusterPtrInput interface {
	pulumi.Input

	ToGetKafkaTopicKafkaClusterPtrOutput() GetKafkaTopicKafkaClusterPtrOutput
	ToGetKafkaTopicKafkaClusterPtrOutputWithContext(context.Context) GetKafkaTopicKafkaClusterPtrOutput
}

type getKafkaTopicKafkaClusterPtrType GetKafkaTopicKafkaClusterArgs

func GetKafkaTopicKafkaClusterPtr(v *GetKafkaTopicKafkaClusterArgs) GetKafkaTopicKafkaClusterPtrInput {
	return (*getKafkaTopicKafkaClusterPtrType)(v)
}

func (*getKafkaTopicKafkaClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetKafkaTopicKafkaCluster)(nil)).Elem()
}

func (i *getKafkaTopicKafkaClusterPtrType) ToGetKafkaTopicKafkaClusterPtrOutput() GetKafkaTopicKafkaClusterPtrOutput {
	return i.ToGetKafkaTopicKafkaClusterPtrOutputWithContext(context.Background())
}

func (i *getKafkaTopicKafkaClusterPtrType) ToGetKafkaTopicKafkaClusterPtrOutputWithContext(ctx context.Context) GetKafkaTopicKafkaClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKafkaTopicKafkaClusterPtrOutput)
}

func (i *getKafkaTopicKafkaClusterPtrType) ToOutput(ctx context.Context) pulumix.Output[*GetKafkaTopicKafkaCluster] {
	return pulumix.Output[*GetKafkaTopicKafkaCluster]{
		OutputState: i.ToGetKafkaTopicKafkaClusterPtrOutputWithContext(ctx).OutputState,
	}
}

type GetKafkaTopicKafkaClusterOutput struct{ *pulumi.OutputState }

func (GetKafkaTopicKafkaClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKafkaTopicKafkaCluster)(nil)).Elem()
}

func (o GetKafkaTopicKafkaClusterOutput) ToGetKafkaTopicKafkaClusterOutput() GetKafkaTopicKafkaClusterOutput {
	return o
}

func (o GetKafkaTopicKafkaClusterOutput) ToGetKafkaTopicKafkaClusterOutputWithContext(ctx context.Context) GetKafkaTopicKafkaClusterOutput {
	return o
}

func (o GetKafkaTopicKafkaClusterOutput) ToGetKafkaTopicKafkaClusterPtrOutput() GetKafkaTopicKafkaClusterPtrOutput {
	return o.ToGetKafkaTopicKafkaClusterPtrOutputWithContext(context.Background())
}

func (o GetKafkaTopicKafkaClusterOutput) ToGetKafkaTopicKafkaClusterPtrOutputWithContext(ctx context.Context) GetKafkaTopicKafkaClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetKafkaTopicKafkaCluster) *GetKafkaTopicKafkaCluster {
		return &v
	}).(GetKafkaTopicKafkaClusterPtrOutput)
}

func (o GetKafkaTopicKafkaClusterOutput) ToOutput(ctx context.Context) pulumix.Output[GetKafkaTopicKafkaCluster] {
	return pulumix.Output[GetKafkaTopicKafkaCluster]{
		OutputState: o.OutputState,
	}
}

// The ID of the Kafka cluster, for example, `lkc-abc123`.
func (o GetKafkaTopicKafkaClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetKafkaTopicKafkaCluster) string { return v.Id }).(pulumi.StringOutput)
}

type GetKafkaTopicKafkaClusterPtrOutput struct{ *pulumi.OutputState }

func (GetKafkaTopicKafkaClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetKafkaTopicKafkaCluster)(nil)).Elem()
}

func (o GetKafkaTopicKafkaClusterPtrOutput) ToGetKafkaTopicKafkaClusterPtrOutput() GetKafkaTopicKafkaClusterPtrOutput {
	return o
}

func (o GetKafkaTopicKafkaClusterPtrOutput) ToGetKafkaTopicKafkaClusterPtrOutputWithContext(ctx context.Context) GetKafkaTopicKafkaClusterPtrOutput {
	return o
}

func (o GetKafkaTopicKafkaClusterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GetKafkaTopicKafkaCluster] {
	return pulumix.Output[*GetKafkaTopicKafkaCluster]{
		OutputState: o.OutputState,
	}
}

func (o GetKafkaTopicKafkaClusterPtrOutput) Elem() GetKafkaTopicKafkaClusterOutput {
	return o.ApplyT(func(v *GetKafkaTopicKafkaCluster) GetKafkaTopicKafkaCluster {
		if v != nil {
			return *v
		}
		var ret GetKafkaTopicKafkaCluster
		return ret
	}).(GetKafkaTopicKafkaClusterOutput)
}

// The ID of the Kafka cluster, for example, `lkc-abc123`.
func (o GetKafkaTopicKafkaClusterPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetKafkaTopicKafkaCluster) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type GetKsqlClusterCredentialIdentity struct {
	// The ID of the Environment that the ksqlDB cluster belongs to, for example, `env-xyz456`.
	//
	// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
	Id string `pulumi:"id"`
}

// GetKsqlClusterCredentialIdentityInput is an input type that accepts GetKsqlClusterCredentialIdentityArgs and GetKsqlClusterCredentialIdentityOutput values.
// You can construct a concrete instance of `GetKsqlClusterCredentialIdentityInput` via:
//
//	GetKsqlClusterCredentialIdentityArgs{...}
type GetKsqlClusterCredentialIdentityInput interface {
	pulumi.Input

	ToGetKsqlClusterCredentialIdentityOutput() GetKsqlClusterCredentialIdentityOutput
	ToGetKsqlClusterCredentialIdentityOutputWithContext(context.Context) GetKsqlClusterCredentialIdentityOutput
}

type GetKsqlClusterCredentialIdentityArgs struct {
	// The ID of the Environment that the ksqlDB cluster belongs to, for example, `env-xyz456`.
	//
	// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetKsqlClusterCredentialIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKsqlClusterCredentialIdentity)(nil)).Elem()
}

func (i GetKsqlClusterCredentialIdentityArgs) ToGetKsqlClusterCredentialIdentityOutput() GetKsqlClusterCredentialIdentityOutput {
	return i.ToGetKsqlClusterCredentialIdentityOutputWithContext(context.Background())
}

func (i GetKsqlClusterCredentialIdentityArgs) ToGetKsqlClusterCredentialIdentityOutputWithContext(ctx context.Context) GetKsqlClusterCredentialIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKsqlClusterCredentialIdentityOutput)
}

func (i GetKsqlClusterCredentialIdentityArgs) ToOutput(ctx context.Context) pulumix.Output[GetKsqlClusterCredentialIdentity] {
	return pulumix.Output[GetKsqlClusterCredentialIdentity]{
		OutputState: i.ToGetKsqlClusterCredentialIdentityOutputWithContext(ctx).OutputState,
	}
}

// GetKsqlClusterCredentialIdentityArrayInput is an input type that accepts GetKsqlClusterCredentialIdentityArray and GetKsqlClusterCredentialIdentityArrayOutput values.
// You can construct a concrete instance of `GetKsqlClusterCredentialIdentityArrayInput` via:
//
//	GetKsqlClusterCredentialIdentityArray{ GetKsqlClusterCredentialIdentityArgs{...} }
type GetKsqlClusterCredentialIdentityArrayInput interface {
	pulumi.Input

	ToGetKsqlClusterCredentialIdentityArrayOutput() GetKsqlClusterCredentialIdentityArrayOutput
	ToGetKsqlClusterCredentialIdentityArrayOutputWithContext(context.Context) GetKsqlClusterCredentialIdentityArrayOutput
}

type GetKsqlClusterCredentialIdentityArray []GetKsqlClusterCredentialIdentityInput

func (GetKsqlClusterCredentialIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKsqlClusterCredentialIdentity)(nil)).Elem()
}

func (i GetKsqlClusterCredentialIdentityArray) ToGetKsqlClusterCredentialIdentityArrayOutput() GetKsqlClusterCredentialIdentityArrayOutput {
	return i.ToGetKsqlClusterCredentialIdentityArrayOutputWithContext(context.Background())
}

func (i GetKsqlClusterCredentialIdentityArray) ToGetKsqlClusterCredentialIdentityArrayOutputWithContext(ctx context.Context) GetKsqlClusterCredentialIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKsqlClusterCredentialIdentityArrayOutput)
}

func (i GetKsqlClusterCredentialIdentityArray) ToOutput(ctx context.Context) pulumix.Output[[]GetKsqlClusterCredentialIdentity] {
	return pulumix.Output[[]GetKsqlClusterCredentialIdentity]{
		OutputState: i.ToGetKsqlClusterCredentialIdentityArrayOutputWithContext(ctx).OutputState,
	}
}

type GetKsqlClusterCredentialIdentityOutput struct{ *pulumi.OutputState }

func (GetKsqlClusterCredentialIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKsqlClusterCredentialIdentity)(nil)).Elem()
}

func (o GetKsqlClusterCredentialIdentityOutput) ToGetKsqlClusterCredentialIdentityOutput() GetKsqlClusterCredentialIdentityOutput {
	return o
}

func (o GetKsqlClusterCredentialIdentityOutput) ToGetKsqlClusterCredentialIdentityOutputWithContext(ctx context.Context) GetKsqlClusterCredentialIdentityOutput {
	return o
}

func (o GetKsqlClusterCredentialIdentityOutput) ToOutput(ctx context.Context) pulumix.Output[GetKsqlClusterCredentialIdentity] {
	return pulumix.Output[GetKsqlClusterCredentialIdentity]{
		OutputState: o.OutputState,
	}
}

// The ID of the Environment that the ksqlDB cluster belongs to, for example, `env-xyz456`.
//
// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
func (o GetKsqlClusterCredentialIdentityOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetKsqlClusterCredentialIdentity) string { return v.Id }).(pulumi.StringOutput)
}

type GetKsqlClusterCredentialIdentityArrayOutput struct{ *pulumi.OutputState }

func (GetKsqlClusterCredentialIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKsqlClusterCredentialIdentity)(nil)).Elem()
}

func (o GetKsqlClusterCredentialIdentityArrayOutput) ToGetKsqlClusterCredentialIdentityArrayOutput() GetKsqlClusterCredentialIdentityArrayOutput {
	return o
}

func (o GetKsqlClusterCredentialIdentityArrayOutput) ToGetKsqlClusterCredentialIdentityArrayOutputWithContext(ctx context.Context) GetKsqlClusterCredentialIdentityArrayOutput {
	return o
}

func (o GetKsqlClusterCredentialIdentityArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetKsqlClusterCredentialIdentity] {
	return pulumix.Output[[]GetKsqlClusterCredentialIdentity]{
		OutputState: o.OutputState,
	}
}

func (o GetKsqlClusterCredentialIdentityArrayOutput) Index(i pulumi.IntInput) GetKsqlClusterCredentialIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKsqlClusterCredentialIdentity {
		return vs[0].([]GetKsqlClusterCredentialIdentity)[vs[1].(int)]
	}).(GetKsqlClusterCredentialIdentityOutput)
}

type GetKsqlClusterEnvironment struct {
	// The ID of the Environment that the ksqlDB cluster belongs to, for example, `env-xyz456`.
	//
	// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
	Id string `pulumi:"id"`
}

// GetKsqlClusterEnvironmentInput is an input type that accepts GetKsqlClusterEnvironmentArgs and GetKsqlClusterEnvironmentOutput values.
// You can construct a concrete instance of `GetKsqlClusterEnvironmentInput` via:
//
//	GetKsqlClusterEnvironmentArgs{...}
type GetKsqlClusterEnvironmentInput interface {
	pulumi.Input

	ToGetKsqlClusterEnvironmentOutput() GetKsqlClusterEnvironmentOutput
	ToGetKsqlClusterEnvironmentOutputWithContext(context.Context) GetKsqlClusterEnvironmentOutput
}

type GetKsqlClusterEnvironmentArgs struct {
	// The ID of the Environment that the ksqlDB cluster belongs to, for example, `env-xyz456`.
	//
	// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetKsqlClusterEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKsqlClusterEnvironment)(nil)).Elem()
}

func (i GetKsqlClusterEnvironmentArgs) ToGetKsqlClusterEnvironmentOutput() GetKsqlClusterEnvironmentOutput {
	return i.ToGetKsqlClusterEnvironmentOutputWithContext(context.Background())
}

func (i GetKsqlClusterEnvironmentArgs) ToGetKsqlClusterEnvironmentOutputWithContext(ctx context.Context) GetKsqlClusterEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKsqlClusterEnvironmentOutput)
}

func (i GetKsqlClusterEnvironmentArgs) ToOutput(ctx context.Context) pulumix.Output[GetKsqlClusterEnvironment] {
	return pulumix.Output[GetKsqlClusterEnvironment]{
		OutputState: i.ToGetKsqlClusterEnvironmentOutputWithContext(ctx).OutputState,
	}
}

type GetKsqlClusterEnvironmentOutput struct{ *pulumi.OutputState }

func (GetKsqlClusterEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKsqlClusterEnvironment)(nil)).Elem()
}

func (o GetKsqlClusterEnvironmentOutput) ToGetKsqlClusterEnvironmentOutput() GetKsqlClusterEnvironmentOutput {
	return o
}

func (o GetKsqlClusterEnvironmentOutput) ToGetKsqlClusterEnvironmentOutputWithContext(ctx context.Context) GetKsqlClusterEnvironmentOutput {
	return o
}

func (o GetKsqlClusterEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[GetKsqlClusterEnvironment] {
	return pulumix.Output[GetKsqlClusterEnvironment]{
		OutputState: o.OutputState,
	}
}

// The ID of the Environment that the ksqlDB cluster belongs to, for example, `env-xyz456`.
//
// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
func (o GetKsqlClusterEnvironmentOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetKsqlClusterEnvironment) string { return v.Id }).(pulumi.StringOutput)
}

type GetKsqlClusterKafkaCluster struct {
	// The ID of the Environment that the ksqlDB cluster belongs to, for example, `env-xyz456`.
	//
	// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
	Id string `pulumi:"id"`
}

// GetKsqlClusterKafkaClusterInput is an input type that accepts GetKsqlClusterKafkaClusterArgs and GetKsqlClusterKafkaClusterOutput values.
// You can construct a concrete instance of `GetKsqlClusterKafkaClusterInput` via:
//
//	GetKsqlClusterKafkaClusterArgs{...}
type GetKsqlClusterKafkaClusterInput interface {
	pulumi.Input

	ToGetKsqlClusterKafkaClusterOutput() GetKsqlClusterKafkaClusterOutput
	ToGetKsqlClusterKafkaClusterOutputWithContext(context.Context) GetKsqlClusterKafkaClusterOutput
}

type GetKsqlClusterKafkaClusterArgs struct {
	// The ID of the Environment that the ksqlDB cluster belongs to, for example, `env-xyz456`.
	//
	// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetKsqlClusterKafkaClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKsqlClusterKafkaCluster)(nil)).Elem()
}

func (i GetKsqlClusterKafkaClusterArgs) ToGetKsqlClusterKafkaClusterOutput() GetKsqlClusterKafkaClusterOutput {
	return i.ToGetKsqlClusterKafkaClusterOutputWithContext(context.Background())
}

func (i GetKsqlClusterKafkaClusterArgs) ToGetKsqlClusterKafkaClusterOutputWithContext(ctx context.Context) GetKsqlClusterKafkaClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKsqlClusterKafkaClusterOutput)
}

func (i GetKsqlClusterKafkaClusterArgs) ToOutput(ctx context.Context) pulumix.Output[GetKsqlClusterKafkaCluster] {
	return pulumix.Output[GetKsqlClusterKafkaCluster]{
		OutputState: i.ToGetKsqlClusterKafkaClusterOutputWithContext(ctx).OutputState,
	}
}

// GetKsqlClusterKafkaClusterArrayInput is an input type that accepts GetKsqlClusterKafkaClusterArray and GetKsqlClusterKafkaClusterArrayOutput values.
// You can construct a concrete instance of `GetKsqlClusterKafkaClusterArrayInput` via:
//
//	GetKsqlClusterKafkaClusterArray{ GetKsqlClusterKafkaClusterArgs{...} }
type GetKsqlClusterKafkaClusterArrayInput interface {
	pulumi.Input

	ToGetKsqlClusterKafkaClusterArrayOutput() GetKsqlClusterKafkaClusterArrayOutput
	ToGetKsqlClusterKafkaClusterArrayOutputWithContext(context.Context) GetKsqlClusterKafkaClusterArrayOutput
}

type GetKsqlClusterKafkaClusterArray []GetKsqlClusterKafkaClusterInput

func (GetKsqlClusterKafkaClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKsqlClusterKafkaCluster)(nil)).Elem()
}

func (i GetKsqlClusterKafkaClusterArray) ToGetKsqlClusterKafkaClusterArrayOutput() GetKsqlClusterKafkaClusterArrayOutput {
	return i.ToGetKsqlClusterKafkaClusterArrayOutputWithContext(context.Background())
}

func (i GetKsqlClusterKafkaClusterArray) ToGetKsqlClusterKafkaClusterArrayOutputWithContext(ctx context.Context) GetKsqlClusterKafkaClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKsqlClusterKafkaClusterArrayOutput)
}

func (i GetKsqlClusterKafkaClusterArray) ToOutput(ctx context.Context) pulumix.Output[[]GetKsqlClusterKafkaCluster] {
	return pulumix.Output[[]GetKsqlClusterKafkaCluster]{
		OutputState: i.ToGetKsqlClusterKafkaClusterArrayOutputWithContext(ctx).OutputState,
	}
}

type GetKsqlClusterKafkaClusterOutput struct{ *pulumi.OutputState }

func (GetKsqlClusterKafkaClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKsqlClusterKafkaCluster)(nil)).Elem()
}

func (o GetKsqlClusterKafkaClusterOutput) ToGetKsqlClusterKafkaClusterOutput() GetKsqlClusterKafkaClusterOutput {
	return o
}

func (o GetKsqlClusterKafkaClusterOutput) ToGetKsqlClusterKafkaClusterOutputWithContext(ctx context.Context) GetKsqlClusterKafkaClusterOutput {
	return o
}

func (o GetKsqlClusterKafkaClusterOutput) ToOutput(ctx context.Context) pulumix.Output[GetKsqlClusterKafkaCluster] {
	return pulumix.Output[GetKsqlClusterKafkaCluster]{
		OutputState: o.OutputState,
	}
}

// The ID of the Environment that the ksqlDB cluster belongs to, for example, `env-xyz456`.
//
// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
func (o GetKsqlClusterKafkaClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetKsqlClusterKafkaCluster) string { return v.Id }).(pulumi.StringOutput)
}

type GetKsqlClusterKafkaClusterArrayOutput struct{ *pulumi.OutputState }

func (GetKsqlClusterKafkaClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKsqlClusterKafkaCluster)(nil)).Elem()
}

func (o GetKsqlClusterKafkaClusterArrayOutput) ToGetKsqlClusterKafkaClusterArrayOutput() GetKsqlClusterKafkaClusterArrayOutput {
	return o
}

func (o GetKsqlClusterKafkaClusterArrayOutput) ToGetKsqlClusterKafkaClusterArrayOutputWithContext(ctx context.Context) GetKsqlClusterKafkaClusterArrayOutput {
	return o
}

func (o GetKsqlClusterKafkaClusterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetKsqlClusterKafkaCluster] {
	return pulumix.Output[[]GetKsqlClusterKafkaCluster]{
		OutputState: o.OutputState,
	}
}

func (o GetKsqlClusterKafkaClusterArrayOutput) Index(i pulumi.IntInput) GetKsqlClusterKafkaClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKsqlClusterKafkaCluster {
		return vs[0].([]GetKsqlClusterKafkaCluster)[vs[1].(int)]
	}).(GetKsqlClusterKafkaClusterOutput)
}

type GetNetworkAw struct {
	// (Required String) The AWS account ID associated with the Confluent Cloud VPC.
	Account string `pulumi:"account"`
	// (Optional String) The endpoint service of the Confluent Cloud VPC (used for PrivateLink) if available.
	PrivateLinkEndpointService string `pulumi:"privateLinkEndpointService"`
	// (Required String) The Confluent Cloud VPC ID.
	Vpc string `pulumi:"vpc"`
}

// GetNetworkAwInput is an input type that accepts GetNetworkAwArgs and GetNetworkAwOutput values.
// You can construct a concrete instance of `GetNetworkAwInput` via:
//
//	GetNetworkAwArgs{...}
type GetNetworkAwInput interface {
	pulumi.Input

	ToGetNetworkAwOutput() GetNetworkAwOutput
	ToGetNetworkAwOutputWithContext(context.Context) GetNetworkAwOutput
}

type GetNetworkAwArgs struct {
	// (Required String) The AWS account ID associated with the Confluent Cloud VPC.
	Account pulumi.StringInput `pulumi:"account"`
	// (Optional String) The endpoint service of the Confluent Cloud VPC (used for PrivateLink) if available.
	PrivateLinkEndpointService pulumi.StringInput `pulumi:"privateLinkEndpointService"`
	// (Required String) The Confluent Cloud VPC ID.
	Vpc pulumi.StringInput `pulumi:"vpc"`
}

func (GetNetworkAwArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkAw)(nil)).Elem()
}

func (i GetNetworkAwArgs) ToGetNetworkAwOutput() GetNetworkAwOutput {
	return i.ToGetNetworkAwOutputWithContext(context.Background())
}

func (i GetNetworkAwArgs) ToGetNetworkAwOutputWithContext(ctx context.Context) GetNetworkAwOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkAwOutput)
}

func (i GetNetworkAwArgs) ToOutput(ctx context.Context) pulumix.Output[GetNetworkAw] {
	return pulumix.Output[GetNetworkAw]{
		OutputState: i.ToGetNetworkAwOutputWithContext(ctx).OutputState,
	}
}

// GetNetworkAwArrayInput is an input type that accepts GetNetworkAwArray and GetNetworkAwArrayOutput values.
// You can construct a concrete instance of `GetNetworkAwArrayInput` via:
//
//	GetNetworkAwArray{ GetNetworkAwArgs{...} }
type GetNetworkAwArrayInput interface {
	pulumi.Input

	ToGetNetworkAwArrayOutput() GetNetworkAwArrayOutput
	ToGetNetworkAwArrayOutputWithContext(context.Context) GetNetworkAwArrayOutput
}

type GetNetworkAwArray []GetNetworkAwInput

func (GetNetworkAwArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkAw)(nil)).Elem()
}

func (i GetNetworkAwArray) ToGetNetworkAwArrayOutput() GetNetworkAwArrayOutput {
	return i.ToGetNetworkAwArrayOutputWithContext(context.Background())
}

func (i GetNetworkAwArray) ToGetNetworkAwArrayOutputWithContext(ctx context.Context) GetNetworkAwArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkAwArrayOutput)
}

func (i GetNetworkAwArray) ToOutput(ctx context.Context) pulumix.Output[[]GetNetworkAw] {
	return pulumix.Output[[]GetNetworkAw]{
		OutputState: i.ToGetNetworkAwArrayOutputWithContext(ctx).OutputState,
	}
}

type GetNetworkAwOutput struct{ *pulumi.OutputState }

func (GetNetworkAwOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkAw)(nil)).Elem()
}

func (o GetNetworkAwOutput) ToGetNetworkAwOutput() GetNetworkAwOutput {
	return o
}

func (o GetNetworkAwOutput) ToGetNetworkAwOutputWithContext(ctx context.Context) GetNetworkAwOutput {
	return o
}

func (o GetNetworkAwOutput) ToOutput(ctx context.Context) pulumix.Output[GetNetworkAw] {
	return pulumix.Output[GetNetworkAw]{
		OutputState: o.OutputState,
	}
}

// (Required String) The AWS account ID associated with the Confluent Cloud VPC.
func (o GetNetworkAwOutput) Account() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkAw) string { return v.Account }).(pulumi.StringOutput)
}

// (Optional String) The endpoint service of the Confluent Cloud VPC (used for PrivateLink) if available.
func (o GetNetworkAwOutput) PrivateLinkEndpointService() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkAw) string { return v.PrivateLinkEndpointService }).(pulumi.StringOutput)
}

// (Required String) The Confluent Cloud VPC ID.
func (o GetNetworkAwOutput) Vpc() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkAw) string { return v.Vpc }).(pulumi.StringOutput)
}

type GetNetworkAwArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkAwArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkAw)(nil)).Elem()
}

func (o GetNetworkAwArrayOutput) ToGetNetworkAwArrayOutput() GetNetworkAwArrayOutput {
	return o
}

func (o GetNetworkAwArrayOutput) ToGetNetworkAwArrayOutputWithContext(ctx context.Context) GetNetworkAwArrayOutput {
	return o
}

func (o GetNetworkAwArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetNetworkAw] {
	return pulumix.Output[[]GetNetworkAw]{
		OutputState: o.OutputState,
	}
}

func (o GetNetworkAwArrayOutput) Index(i pulumi.IntInput) GetNetworkAwOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkAw {
		return vs[0].([]GetNetworkAw)[vs[1].(int)]
	}).(GetNetworkAwOutput)
}

type GetNetworkAzure struct {
	// (Optional Map) The mapping of zones to Private Link Service Aliases if available. Keys are zones and values are [Azure Private Link Service Aliases](https://docs.microsoft.com/en-us/azure/private-link/private-link-service-overview#share-your-service).
	PrivateLinkServiceAliases map[string]string `pulumi:"privateLinkServiceAliases"`
}

// GetNetworkAzureInput is an input type that accepts GetNetworkAzureArgs and GetNetworkAzureOutput values.
// You can construct a concrete instance of `GetNetworkAzureInput` via:
//
//	GetNetworkAzureArgs{...}
type GetNetworkAzureInput interface {
	pulumi.Input

	ToGetNetworkAzureOutput() GetNetworkAzureOutput
	ToGetNetworkAzureOutputWithContext(context.Context) GetNetworkAzureOutput
}

type GetNetworkAzureArgs struct {
	// (Optional Map) The mapping of zones to Private Link Service Aliases if available. Keys are zones and values are [Azure Private Link Service Aliases](https://docs.microsoft.com/en-us/azure/private-link/private-link-service-overview#share-your-service).
	PrivateLinkServiceAliases pulumi.StringMapInput `pulumi:"privateLinkServiceAliases"`
}

func (GetNetworkAzureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkAzure)(nil)).Elem()
}

func (i GetNetworkAzureArgs) ToGetNetworkAzureOutput() GetNetworkAzureOutput {
	return i.ToGetNetworkAzureOutputWithContext(context.Background())
}

func (i GetNetworkAzureArgs) ToGetNetworkAzureOutputWithContext(ctx context.Context) GetNetworkAzureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkAzureOutput)
}

func (i GetNetworkAzureArgs) ToOutput(ctx context.Context) pulumix.Output[GetNetworkAzure] {
	return pulumix.Output[GetNetworkAzure]{
		OutputState: i.ToGetNetworkAzureOutputWithContext(ctx).OutputState,
	}
}

// GetNetworkAzureArrayInput is an input type that accepts GetNetworkAzureArray and GetNetworkAzureArrayOutput values.
// You can construct a concrete instance of `GetNetworkAzureArrayInput` via:
//
//	GetNetworkAzureArray{ GetNetworkAzureArgs{...} }
type GetNetworkAzureArrayInput interface {
	pulumi.Input

	ToGetNetworkAzureArrayOutput() GetNetworkAzureArrayOutput
	ToGetNetworkAzureArrayOutputWithContext(context.Context) GetNetworkAzureArrayOutput
}

type GetNetworkAzureArray []GetNetworkAzureInput

func (GetNetworkAzureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkAzure)(nil)).Elem()
}

func (i GetNetworkAzureArray) ToGetNetworkAzureArrayOutput() GetNetworkAzureArrayOutput {
	return i.ToGetNetworkAzureArrayOutputWithContext(context.Background())
}

func (i GetNetworkAzureArray) ToGetNetworkAzureArrayOutputWithContext(ctx context.Context) GetNetworkAzureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkAzureArrayOutput)
}

func (i GetNetworkAzureArray) ToOutput(ctx context.Context) pulumix.Output[[]GetNetworkAzure] {
	return pulumix.Output[[]GetNetworkAzure]{
		OutputState: i.ToGetNetworkAzureArrayOutputWithContext(ctx).OutputState,
	}
}

type GetNetworkAzureOutput struct{ *pulumi.OutputState }

func (GetNetworkAzureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkAzure)(nil)).Elem()
}

func (o GetNetworkAzureOutput) ToGetNetworkAzureOutput() GetNetworkAzureOutput {
	return o
}

func (o GetNetworkAzureOutput) ToGetNetworkAzureOutputWithContext(ctx context.Context) GetNetworkAzureOutput {
	return o
}

func (o GetNetworkAzureOutput) ToOutput(ctx context.Context) pulumix.Output[GetNetworkAzure] {
	return pulumix.Output[GetNetworkAzure]{
		OutputState: o.OutputState,
	}
}

// (Optional Map) The mapping of zones to Private Link Service Aliases if available. Keys are zones and values are [Azure Private Link Service Aliases](https://docs.microsoft.com/en-us/azure/private-link/private-link-service-overview#share-your-service).
func (o GetNetworkAzureOutput) PrivateLinkServiceAliases() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetNetworkAzure) map[string]string { return v.PrivateLinkServiceAliases }).(pulumi.StringMapOutput)
}

type GetNetworkAzureArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkAzureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkAzure)(nil)).Elem()
}

func (o GetNetworkAzureArrayOutput) ToGetNetworkAzureArrayOutput() GetNetworkAzureArrayOutput {
	return o
}

func (o GetNetworkAzureArrayOutput) ToGetNetworkAzureArrayOutputWithContext(ctx context.Context) GetNetworkAzureArrayOutput {
	return o
}

func (o GetNetworkAzureArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetNetworkAzure] {
	return pulumix.Output[[]GetNetworkAzure]{
		OutputState: o.OutputState,
	}
}

func (o GetNetworkAzureArrayOutput) Index(i pulumi.IntInput) GetNetworkAzureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkAzure {
		return vs[0].([]GetNetworkAzure)[vs[1].(int)]
	}).(GetNetworkAzureOutput)
}

type GetNetworkDnsConfig struct {
	// (Required String) Network DNS resolution.
	// When resolution is `CHASED_PRIVATE`, clusters in this network require both public and private DNS to resolve cluster endpoints.
	// When resolution is `PRIVATE`, clusters in this network only require private DNS to resolve cluster endpoints.
	Resolution string `pulumi:"resolution"`
}

// GetNetworkDnsConfigInput is an input type that accepts GetNetworkDnsConfigArgs and GetNetworkDnsConfigOutput values.
// You can construct a concrete instance of `GetNetworkDnsConfigInput` via:
//
//	GetNetworkDnsConfigArgs{...}
type GetNetworkDnsConfigInput interface {
	pulumi.Input

	ToGetNetworkDnsConfigOutput() GetNetworkDnsConfigOutput
	ToGetNetworkDnsConfigOutputWithContext(context.Context) GetNetworkDnsConfigOutput
}

type GetNetworkDnsConfigArgs struct {
	// (Required String) Network DNS resolution.
	// When resolution is `CHASED_PRIVATE`, clusters in this network require both public and private DNS to resolve cluster endpoints.
	// When resolution is `PRIVATE`, clusters in this network only require private DNS to resolve cluster endpoints.
	Resolution pulumi.StringInput `pulumi:"resolution"`
}

func (GetNetworkDnsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkDnsConfig)(nil)).Elem()
}

func (i GetNetworkDnsConfigArgs) ToGetNetworkDnsConfigOutput() GetNetworkDnsConfigOutput {
	return i.ToGetNetworkDnsConfigOutputWithContext(context.Background())
}

func (i GetNetworkDnsConfigArgs) ToGetNetworkDnsConfigOutputWithContext(ctx context.Context) GetNetworkDnsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkDnsConfigOutput)
}

func (i GetNetworkDnsConfigArgs) ToOutput(ctx context.Context) pulumix.Output[GetNetworkDnsConfig] {
	return pulumix.Output[GetNetworkDnsConfig]{
		OutputState: i.ToGetNetworkDnsConfigOutputWithContext(ctx).OutputState,
	}
}

// GetNetworkDnsConfigArrayInput is an input type that accepts GetNetworkDnsConfigArray and GetNetworkDnsConfigArrayOutput values.
// You can construct a concrete instance of `GetNetworkDnsConfigArrayInput` via:
//
//	GetNetworkDnsConfigArray{ GetNetworkDnsConfigArgs{...} }
type GetNetworkDnsConfigArrayInput interface {
	pulumi.Input

	ToGetNetworkDnsConfigArrayOutput() GetNetworkDnsConfigArrayOutput
	ToGetNetworkDnsConfigArrayOutputWithContext(context.Context) GetNetworkDnsConfigArrayOutput
}

type GetNetworkDnsConfigArray []GetNetworkDnsConfigInput

func (GetNetworkDnsConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkDnsConfig)(nil)).Elem()
}

func (i GetNetworkDnsConfigArray) ToGetNetworkDnsConfigArrayOutput() GetNetworkDnsConfigArrayOutput {
	return i.ToGetNetworkDnsConfigArrayOutputWithContext(context.Background())
}

func (i GetNetworkDnsConfigArray) ToGetNetworkDnsConfigArrayOutputWithContext(ctx context.Context) GetNetworkDnsConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkDnsConfigArrayOutput)
}

func (i GetNetworkDnsConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]GetNetworkDnsConfig] {
	return pulumix.Output[[]GetNetworkDnsConfig]{
		OutputState: i.ToGetNetworkDnsConfigArrayOutputWithContext(ctx).OutputState,
	}
}

type GetNetworkDnsConfigOutput struct{ *pulumi.OutputState }

func (GetNetworkDnsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkDnsConfig)(nil)).Elem()
}

func (o GetNetworkDnsConfigOutput) ToGetNetworkDnsConfigOutput() GetNetworkDnsConfigOutput {
	return o
}

func (o GetNetworkDnsConfigOutput) ToGetNetworkDnsConfigOutputWithContext(ctx context.Context) GetNetworkDnsConfigOutput {
	return o
}

func (o GetNetworkDnsConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetNetworkDnsConfig] {
	return pulumix.Output[GetNetworkDnsConfig]{
		OutputState: o.OutputState,
	}
}

// (Required String) Network DNS resolution.
// When resolution is `CHASED_PRIVATE`, clusters in this network require both public and private DNS to resolve cluster endpoints.
// When resolution is `PRIVATE`, clusters in this network only require private DNS to resolve cluster endpoints.
func (o GetNetworkDnsConfigOutput) Resolution() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDnsConfig) string { return v.Resolution }).(pulumi.StringOutput)
}

type GetNetworkDnsConfigArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkDnsConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkDnsConfig)(nil)).Elem()
}

func (o GetNetworkDnsConfigArrayOutput) ToGetNetworkDnsConfigArrayOutput() GetNetworkDnsConfigArrayOutput {
	return o
}

func (o GetNetworkDnsConfigArrayOutput) ToGetNetworkDnsConfigArrayOutputWithContext(ctx context.Context) GetNetworkDnsConfigArrayOutput {
	return o
}

func (o GetNetworkDnsConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetNetworkDnsConfig] {
	return pulumix.Output[[]GetNetworkDnsConfig]{
		OutputState: o.OutputState,
	}
}

func (o GetNetworkDnsConfigArrayOutput) Index(i pulumi.IntInput) GetNetworkDnsConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkDnsConfig {
		return vs[0].([]GetNetworkDnsConfig)[vs[1].(int)]
	}).(GetNetworkDnsConfigOutput)
}

type GetNetworkEnvironment struct {
	// The ID of the Environment that the Network belongs to, for example, `env-xyz456`.
	//
	// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
	Id string `pulumi:"id"`
}

// GetNetworkEnvironmentInput is an input type that accepts GetNetworkEnvironmentArgs and GetNetworkEnvironmentOutput values.
// You can construct a concrete instance of `GetNetworkEnvironmentInput` via:
//
//	GetNetworkEnvironmentArgs{...}
type GetNetworkEnvironmentInput interface {
	pulumi.Input

	ToGetNetworkEnvironmentOutput() GetNetworkEnvironmentOutput
	ToGetNetworkEnvironmentOutputWithContext(context.Context) GetNetworkEnvironmentOutput
}

type GetNetworkEnvironmentArgs struct {
	// The ID of the Environment that the Network belongs to, for example, `env-xyz456`.
	//
	// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetNetworkEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkEnvironment)(nil)).Elem()
}

func (i GetNetworkEnvironmentArgs) ToGetNetworkEnvironmentOutput() GetNetworkEnvironmentOutput {
	return i.ToGetNetworkEnvironmentOutputWithContext(context.Background())
}

func (i GetNetworkEnvironmentArgs) ToGetNetworkEnvironmentOutputWithContext(ctx context.Context) GetNetworkEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkEnvironmentOutput)
}

func (i GetNetworkEnvironmentArgs) ToOutput(ctx context.Context) pulumix.Output[GetNetworkEnvironment] {
	return pulumix.Output[GetNetworkEnvironment]{
		OutputState: i.ToGetNetworkEnvironmentOutputWithContext(ctx).OutputState,
	}
}

type GetNetworkEnvironmentOutput struct{ *pulumi.OutputState }

func (GetNetworkEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkEnvironment)(nil)).Elem()
}

func (o GetNetworkEnvironmentOutput) ToGetNetworkEnvironmentOutput() GetNetworkEnvironmentOutput {
	return o
}

func (o GetNetworkEnvironmentOutput) ToGetNetworkEnvironmentOutputWithContext(ctx context.Context) GetNetworkEnvironmentOutput {
	return o
}

func (o GetNetworkEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[GetNetworkEnvironment] {
	return pulumix.Output[GetNetworkEnvironment]{
		OutputState: o.OutputState,
	}
}

// The ID of the Environment that the Network belongs to, for example, `env-xyz456`.
//
// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
func (o GetNetworkEnvironmentOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkEnvironment) string { return v.Id }).(pulumi.StringOutput)
}

type GetNetworkGcp struct {
	// (Optional Map) The mapping of zones to Private Service Connect Service Attachments if available. Keys are zones and values are [GCP Private Service Connect service attachment](https://cloud.google.com/vpc/docs/configure-private-service-connect-producer#api_7).
	PrivateServiceConnectServiceAttachments map[string]string `pulumi:"privateServiceConnectServiceAttachments"`
	// (Required String) The GCP Project ID associated with the Confluent Cloud VPC.
	Project string `pulumi:"project"`
	// (Required String) The network name of the Confluent Cloud VPC.
	VpcNetwork string `pulumi:"vpcNetwork"`
}

// GetNetworkGcpInput is an input type that accepts GetNetworkGcpArgs and GetNetworkGcpOutput values.
// You can construct a concrete instance of `GetNetworkGcpInput` via:
//
//	GetNetworkGcpArgs{...}
type GetNetworkGcpInput interface {
	pulumi.Input

	ToGetNetworkGcpOutput() GetNetworkGcpOutput
	ToGetNetworkGcpOutputWithContext(context.Context) GetNetworkGcpOutput
}

type GetNetworkGcpArgs struct {
	// (Optional Map) The mapping of zones to Private Service Connect Service Attachments if available. Keys are zones and values are [GCP Private Service Connect service attachment](https://cloud.google.com/vpc/docs/configure-private-service-connect-producer#api_7).
	PrivateServiceConnectServiceAttachments pulumi.StringMapInput `pulumi:"privateServiceConnectServiceAttachments"`
	// (Required String) The GCP Project ID associated with the Confluent Cloud VPC.
	Project pulumi.StringInput `pulumi:"project"`
	// (Required String) The network name of the Confluent Cloud VPC.
	VpcNetwork pulumi.StringInput `pulumi:"vpcNetwork"`
}

func (GetNetworkGcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkGcp)(nil)).Elem()
}

func (i GetNetworkGcpArgs) ToGetNetworkGcpOutput() GetNetworkGcpOutput {
	return i.ToGetNetworkGcpOutputWithContext(context.Background())
}

func (i GetNetworkGcpArgs) ToGetNetworkGcpOutputWithContext(ctx context.Context) GetNetworkGcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkGcpOutput)
}

func (i GetNetworkGcpArgs) ToOutput(ctx context.Context) pulumix.Output[GetNetworkGcp] {
	return pulumix.Output[GetNetworkGcp]{
		OutputState: i.ToGetNetworkGcpOutputWithContext(ctx).OutputState,
	}
}

// GetNetworkGcpArrayInput is an input type that accepts GetNetworkGcpArray and GetNetworkGcpArrayOutput values.
// You can construct a concrete instance of `GetNetworkGcpArrayInput` via:
//
//	GetNetworkGcpArray{ GetNetworkGcpArgs{...} }
type GetNetworkGcpArrayInput interface {
	pulumi.Input

	ToGetNetworkGcpArrayOutput() GetNetworkGcpArrayOutput
	ToGetNetworkGcpArrayOutputWithContext(context.Context) GetNetworkGcpArrayOutput
}

type GetNetworkGcpArray []GetNetworkGcpInput

func (GetNetworkGcpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkGcp)(nil)).Elem()
}

func (i GetNetworkGcpArray) ToGetNetworkGcpArrayOutput() GetNetworkGcpArrayOutput {
	return i.ToGetNetworkGcpArrayOutputWithContext(context.Background())
}

func (i GetNetworkGcpArray) ToGetNetworkGcpArrayOutputWithContext(ctx context.Context) GetNetworkGcpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkGcpArrayOutput)
}

func (i GetNetworkGcpArray) ToOutput(ctx context.Context) pulumix.Output[[]GetNetworkGcp] {
	return pulumix.Output[[]GetNetworkGcp]{
		OutputState: i.ToGetNetworkGcpArrayOutputWithContext(ctx).OutputState,
	}
}

type GetNetworkGcpOutput struct{ *pulumi.OutputState }

func (GetNetworkGcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkGcp)(nil)).Elem()
}

func (o GetNetworkGcpOutput) ToGetNetworkGcpOutput() GetNetworkGcpOutput {
	return o
}

func (o GetNetworkGcpOutput) ToGetNetworkGcpOutputWithContext(ctx context.Context) GetNetworkGcpOutput {
	return o
}

func (o GetNetworkGcpOutput) ToOutput(ctx context.Context) pulumix.Output[GetNetworkGcp] {
	return pulumix.Output[GetNetworkGcp]{
		OutputState: o.OutputState,
	}
}

// (Optional Map) The mapping of zones to Private Service Connect Service Attachments if available. Keys are zones and values are [GCP Private Service Connect service attachment](https://cloud.google.com/vpc/docs/configure-private-service-connect-producer#api_7).
func (o GetNetworkGcpOutput) PrivateServiceConnectServiceAttachments() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetNetworkGcp) map[string]string { return v.PrivateServiceConnectServiceAttachments }).(pulumi.StringMapOutput)
}

// (Required String) The GCP Project ID associated with the Confluent Cloud VPC.
func (o GetNetworkGcpOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkGcp) string { return v.Project }).(pulumi.StringOutput)
}

// (Required String) The network name of the Confluent Cloud VPC.
func (o GetNetworkGcpOutput) VpcNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkGcp) string { return v.VpcNetwork }).(pulumi.StringOutput)
}

type GetNetworkGcpArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkGcpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkGcp)(nil)).Elem()
}

func (o GetNetworkGcpArrayOutput) ToGetNetworkGcpArrayOutput() GetNetworkGcpArrayOutput {
	return o
}

func (o GetNetworkGcpArrayOutput) ToGetNetworkGcpArrayOutputWithContext(ctx context.Context) GetNetworkGcpArrayOutput {
	return o
}

func (o GetNetworkGcpArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetNetworkGcp] {
	return pulumix.Output[[]GetNetworkGcp]{
		OutputState: o.OutputState,
	}
}

func (o GetNetworkGcpArrayOutput) Index(i pulumi.IntInput) GetNetworkGcpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkGcp {
		return vs[0].([]GetNetworkGcp)[vs[1].(int)]
	}).(GetNetworkGcpOutput)
}

type GetNetworkLinkEndpointEnvironment struct {
	// The ID of the Environment that the Network Link Endpoint belongs to, for example, `env-xyz456`.
	Id string `pulumi:"id"`
}

// GetNetworkLinkEndpointEnvironmentInput is an input type that accepts GetNetworkLinkEndpointEnvironmentArgs and GetNetworkLinkEndpointEnvironmentOutput values.
// You can construct a concrete instance of `GetNetworkLinkEndpointEnvironmentInput` via:
//
//	GetNetworkLinkEndpointEnvironmentArgs{...}
type GetNetworkLinkEndpointEnvironmentInput interface {
	pulumi.Input

	ToGetNetworkLinkEndpointEnvironmentOutput() GetNetworkLinkEndpointEnvironmentOutput
	ToGetNetworkLinkEndpointEnvironmentOutputWithContext(context.Context) GetNetworkLinkEndpointEnvironmentOutput
}

type GetNetworkLinkEndpointEnvironmentArgs struct {
	// The ID of the Environment that the Network Link Endpoint belongs to, for example, `env-xyz456`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetNetworkLinkEndpointEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkLinkEndpointEnvironment)(nil)).Elem()
}

func (i GetNetworkLinkEndpointEnvironmentArgs) ToGetNetworkLinkEndpointEnvironmentOutput() GetNetworkLinkEndpointEnvironmentOutput {
	return i.ToGetNetworkLinkEndpointEnvironmentOutputWithContext(context.Background())
}

func (i GetNetworkLinkEndpointEnvironmentArgs) ToGetNetworkLinkEndpointEnvironmentOutputWithContext(ctx context.Context) GetNetworkLinkEndpointEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkLinkEndpointEnvironmentOutput)
}

func (i GetNetworkLinkEndpointEnvironmentArgs) ToOutput(ctx context.Context) pulumix.Output[GetNetworkLinkEndpointEnvironment] {
	return pulumix.Output[GetNetworkLinkEndpointEnvironment]{
		OutputState: i.ToGetNetworkLinkEndpointEnvironmentOutputWithContext(ctx).OutputState,
	}
}

type GetNetworkLinkEndpointEnvironmentOutput struct{ *pulumi.OutputState }

func (GetNetworkLinkEndpointEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkLinkEndpointEnvironment)(nil)).Elem()
}

func (o GetNetworkLinkEndpointEnvironmentOutput) ToGetNetworkLinkEndpointEnvironmentOutput() GetNetworkLinkEndpointEnvironmentOutput {
	return o
}

func (o GetNetworkLinkEndpointEnvironmentOutput) ToGetNetworkLinkEndpointEnvironmentOutputWithContext(ctx context.Context) GetNetworkLinkEndpointEnvironmentOutput {
	return o
}

func (o GetNetworkLinkEndpointEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[GetNetworkLinkEndpointEnvironment] {
	return pulumix.Output[GetNetworkLinkEndpointEnvironment]{
		OutputState: o.OutputState,
	}
}

// The ID of the Environment that the Network Link Endpoint belongs to, for example, `env-xyz456`.
func (o GetNetworkLinkEndpointEnvironmentOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkLinkEndpointEnvironment) string { return v.Id }).(pulumi.StringOutput)
}

type GetNetworkLinkEndpointNetwork struct {
	// The ID of the Environment that the Network Link Endpoint belongs to, for example, `env-xyz456`.
	Id string `pulumi:"id"`
}

// GetNetworkLinkEndpointNetworkInput is an input type that accepts GetNetworkLinkEndpointNetworkArgs and GetNetworkLinkEndpointNetworkOutput values.
// You can construct a concrete instance of `GetNetworkLinkEndpointNetworkInput` via:
//
//	GetNetworkLinkEndpointNetworkArgs{...}
type GetNetworkLinkEndpointNetworkInput interface {
	pulumi.Input

	ToGetNetworkLinkEndpointNetworkOutput() GetNetworkLinkEndpointNetworkOutput
	ToGetNetworkLinkEndpointNetworkOutputWithContext(context.Context) GetNetworkLinkEndpointNetworkOutput
}

type GetNetworkLinkEndpointNetworkArgs struct {
	// The ID of the Environment that the Network Link Endpoint belongs to, for example, `env-xyz456`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetNetworkLinkEndpointNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkLinkEndpointNetwork)(nil)).Elem()
}

func (i GetNetworkLinkEndpointNetworkArgs) ToGetNetworkLinkEndpointNetworkOutput() GetNetworkLinkEndpointNetworkOutput {
	return i.ToGetNetworkLinkEndpointNetworkOutputWithContext(context.Background())
}

func (i GetNetworkLinkEndpointNetworkArgs) ToGetNetworkLinkEndpointNetworkOutputWithContext(ctx context.Context) GetNetworkLinkEndpointNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkLinkEndpointNetworkOutput)
}

func (i GetNetworkLinkEndpointNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[GetNetworkLinkEndpointNetwork] {
	return pulumix.Output[GetNetworkLinkEndpointNetwork]{
		OutputState: i.ToGetNetworkLinkEndpointNetworkOutputWithContext(ctx).OutputState,
	}
}

// GetNetworkLinkEndpointNetworkArrayInput is an input type that accepts GetNetworkLinkEndpointNetworkArray and GetNetworkLinkEndpointNetworkArrayOutput values.
// You can construct a concrete instance of `GetNetworkLinkEndpointNetworkArrayInput` via:
//
//	GetNetworkLinkEndpointNetworkArray{ GetNetworkLinkEndpointNetworkArgs{...} }
type GetNetworkLinkEndpointNetworkArrayInput interface {
	pulumi.Input

	ToGetNetworkLinkEndpointNetworkArrayOutput() GetNetworkLinkEndpointNetworkArrayOutput
	ToGetNetworkLinkEndpointNetworkArrayOutputWithContext(context.Context) GetNetworkLinkEndpointNetworkArrayOutput
}

type GetNetworkLinkEndpointNetworkArray []GetNetworkLinkEndpointNetworkInput

func (GetNetworkLinkEndpointNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkLinkEndpointNetwork)(nil)).Elem()
}

func (i GetNetworkLinkEndpointNetworkArray) ToGetNetworkLinkEndpointNetworkArrayOutput() GetNetworkLinkEndpointNetworkArrayOutput {
	return i.ToGetNetworkLinkEndpointNetworkArrayOutputWithContext(context.Background())
}

func (i GetNetworkLinkEndpointNetworkArray) ToGetNetworkLinkEndpointNetworkArrayOutputWithContext(ctx context.Context) GetNetworkLinkEndpointNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkLinkEndpointNetworkArrayOutput)
}

func (i GetNetworkLinkEndpointNetworkArray) ToOutput(ctx context.Context) pulumix.Output[[]GetNetworkLinkEndpointNetwork] {
	return pulumix.Output[[]GetNetworkLinkEndpointNetwork]{
		OutputState: i.ToGetNetworkLinkEndpointNetworkArrayOutputWithContext(ctx).OutputState,
	}
}

type GetNetworkLinkEndpointNetworkOutput struct{ *pulumi.OutputState }

func (GetNetworkLinkEndpointNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkLinkEndpointNetwork)(nil)).Elem()
}

func (o GetNetworkLinkEndpointNetworkOutput) ToGetNetworkLinkEndpointNetworkOutput() GetNetworkLinkEndpointNetworkOutput {
	return o
}

func (o GetNetworkLinkEndpointNetworkOutput) ToGetNetworkLinkEndpointNetworkOutputWithContext(ctx context.Context) GetNetworkLinkEndpointNetworkOutput {
	return o
}

func (o GetNetworkLinkEndpointNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[GetNetworkLinkEndpointNetwork] {
	return pulumix.Output[GetNetworkLinkEndpointNetwork]{
		OutputState: o.OutputState,
	}
}

// The ID of the Environment that the Network Link Endpoint belongs to, for example, `env-xyz456`.
func (o GetNetworkLinkEndpointNetworkOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkLinkEndpointNetwork) string { return v.Id }).(pulumi.StringOutput)
}

type GetNetworkLinkEndpointNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkLinkEndpointNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkLinkEndpointNetwork)(nil)).Elem()
}

func (o GetNetworkLinkEndpointNetworkArrayOutput) ToGetNetworkLinkEndpointNetworkArrayOutput() GetNetworkLinkEndpointNetworkArrayOutput {
	return o
}

func (o GetNetworkLinkEndpointNetworkArrayOutput) ToGetNetworkLinkEndpointNetworkArrayOutputWithContext(ctx context.Context) GetNetworkLinkEndpointNetworkArrayOutput {
	return o
}

func (o GetNetworkLinkEndpointNetworkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetNetworkLinkEndpointNetwork] {
	return pulumix.Output[[]GetNetworkLinkEndpointNetwork]{
		OutputState: o.OutputState,
	}
}

func (o GetNetworkLinkEndpointNetworkArrayOutput) Index(i pulumi.IntInput) GetNetworkLinkEndpointNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkLinkEndpointNetwork {
		return vs[0].([]GetNetworkLinkEndpointNetwork)[vs[1].(int)]
	}).(GetNetworkLinkEndpointNetworkOutput)
}

type GetNetworkLinkEndpointNetworkLinkService struct {
	// The ID of the Environment that the Network Link Endpoint belongs to, for example, `env-xyz456`.
	Id string `pulumi:"id"`
}

// GetNetworkLinkEndpointNetworkLinkServiceInput is an input type that accepts GetNetworkLinkEndpointNetworkLinkServiceArgs and GetNetworkLinkEndpointNetworkLinkServiceOutput values.
// You can construct a concrete instance of `GetNetworkLinkEndpointNetworkLinkServiceInput` via:
//
//	GetNetworkLinkEndpointNetworkLinkServiceArgs{...}
type GetNetworkLinkEndpointNetworkLinkServiceInput interface {
	pulumi.Input

	ToGetNetworkLinkEndpointNetworkLinkServiceOutput() GetNetworkLinkEndpointNetworkLinkServiceOutput
	ToGetNetworkLinkEndpointNetworkLinkServiceOutputWithContext(context.Context) GetNetworkLinkEndpointNetworkLinkServiceOutput
}

type GetNetworkLinkEndpointNetworkLinkServiceArgs struct {
	// The ID of the Environment that the Network Link Endpoint belongs to, for example, `env-xyz456`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetNetworkLinkEndpointNetworkLinkServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkLinkEndpointNetworkLinkService)(nil)).Elem()
}

func (i GetNetworkLinkEndpointNetworkLinkServiceArgs) ToGetNetworkLinkEndpointNetworkLinkServiceOutput() GetNetworkLinkEndpointNetworkLinkServiceOutput {
	return i.ToGetNetworkLinkEndpointNetworkLinkServiceOutputWithContext(context.Background())
}

func (i GetNetworkLinkEndpointNetworkLinkServiceArgs) ToGetNetworkLinkEndpointNetworkLinkServiceOutputWithContext(ctx context.Context) GetNetworkLinkEndpointNetworkLinkServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkLinkEndpointNetworkLinkServiceOutput)
}

func (i GetNetworkLinkEndpointNetworkLinkServiceArgs) ToOutput(ctx context.Context) pulumix.Output[GetNetworkLinkEndpointNetworkLinkService] {
	return pulumix.Output[GetNetworkLinkEndpointNetworkLinkService]{
		OutputState: i.ToGetNetworkLinkEndpointNetworkLinkServiceOutputWithContext(ctx).OutputState,
	}
}

// GetNetworkLinkEndpointNetworkLinkServiceArrayInput is an input type that accepts GetNetworkLinkEndpointNetworkLinkServiceArray and GetNetworkLinkEndpointNetworkLinkServiceArrayOutput values.
// You can construct a concrete instance of `GetNetworkLinkEndpointNetworkLinkServiceArrayInput` via:
//
//	GetNetworkLinkEndpointNetworkLinkServiceArray{ GetNetworkLinkEndpointNetworkLinkServiceArgs{...} }
type GetNetworkLinkEndpointNetworkLinkServiceArrayInput interface {
	pulumi.Input

	ToGetNetworkLinkEndpointNetworkLinkServiceArrayOutput() GetNetworkLinkEndpointNetworkLinkServiceArrayOutput
	ToGetNetworkLinkEndpointNetworkLinkServiceArrayOutputWithContext(context.Context) GetNetworkLinkEndpointNetworkLinkServiceArrayOutput
}

type GetNetworkLinkEndpointNetworkLinkServiceArray []GetNetworkLinkEndpointNetworkLinkServiceInput

func (GetNetworkLinkEndpointNetworkLinkServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkLinkEndpointNetworkLinkService)(nil)).Elem()
}

func (i GetNetworkLinkEndpointNetworkLinkServiceArray) ToGetNetworkLinkEndpointNetworkLinkServiceArrayOutput() GetNetworkLinkEndpointNetworkLinkServiceArrayOutput {
	return i.ToGetNetworkLinkEndpointNetworkLinkServiceArrayOutputWithContext(context.Background())
}

func (i GetNetworkLinkEndpointNetworkLinkServiceArray) ToGetNetworkLinkEndpointNetworkLinkServiceArrayOutputWithContext(ctx context.Context) GetNetworkLinkEndpointNetworkLinkServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkLinkEndpointNetworkLinkServiceArrayOutput)
}

func (i GetNetworkLinkEndpointNetworkLinkServiceArray) ToOutput(ctx context.Context) pulumix.Output[[]GetNetworkLinkEndpointNetworkLinkService] {
	return pulumix.Output[[]GetNetworkLinkEndpointNetworkLinkService]{
		OutputState: i.ToGetNetworkLinkEndpointNetworkLinkServiceArrayOutputWithContext(ctx).OutputState,
	}
}

type GetNetworkLinkEndpointNetworkLinkServiceOutput struct{ *pulumi.OutputState }

func (GetNetworkLinkEndpointNetworkLinkServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkLinkEndpointNetworkLinkService)(nil)).Elem()
}

func (o GetNetworkLinkEndpointNetworkLinkServiceOutput) ToGetNetworkLinkEndpointNetworkLinkServiceOutput() GetNetworkLinkEndpointNetworkLinkServiceOutput {
	return o
}

func (o GetNetworkLinkEndpointNetworkLinkServiceOutput) ToGetNetworkLinkEndpointNetworkLinkServiceOutputWithContext(ctx context.Context) GetNetworkLinkEndpointNetworkLinkServiceOutput {
	return o
}

func (o GetNetworkLinkEndpointNetworkLinkServiceOutput) ToOutput(ctx context.Context) pulumix.Output[GetNetworkLinkEndpointNetworkLinkService] {
	return pulumix.Output[GetNetworkLinkEndpointNetworkLinkService]{
		OutputState: o.OutputState,
	}
}

// The ID of the Environment that the Network Link Endpoint belongs to, for example, `env-xyz456`.
func (o GetNetworkLinkEndpointNetworkLinkServiceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkLinkEndpointNetworkLinkService) string { return v.Id }).(pulumi.StringOutput)
}

type GetNetworkLinkEndpointNetworkLinkServiceArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkLinkEndpointNetworkLinkServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkLinkEndpointNetworkLinkService)(nil)).Elem()
}

func (o GetNetworkLinkEndpointNetworkLinkServiceArrayOutput) ToGetNetworkLinkEndpointNetworkLinkServiceArrayOutput() GetNetworkLinkEndpointNetworkLinkServiceArrayOutput {
	return o
}

func (o GetNetworkLinkEndpointNetworkLinkServiceArrayOutput) ToGetNetworkLinkEndpointNetworkLinkServiceArrayOutputWithContext(ctx context.Context) GetNetworkLinkEndpointNetworkLinkServiceArrayOutput {
	return o
}

func (o GetNetworkLinkEndpointNetworkLinkServiceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetNetworkLinkEndpointNetworkLinkService] {
	return pulumix.Output[[]GetNetworkLinkEndpointNetworkLinkService]{
		OutputState: o.OutputState,
	}
}

func (o GetNetworkLinkEndpointNetworkLinkServiceArrayOutput) Index(i pulumi.IntInput) GetNetworkLinkEndpointNetworkLinkServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkLinkEndpointNetworkLinkService {
		return vs[0].([]GetNetworkLinkEndpointNetworkLinkService)[vs[1].(int)]
	}).(GetNetworkLinkEndpointNetworkLinkServiceOutput)
}

type GetNetworkLinkServiceAccept struct {
	// (Optional List of Strings) List of environments ids from which connections can be accepted. All networks within the list of environment will be allowed.
	Environments []string `pulumi:"environments"`
	// (Optional List of Strings) List of network ids from which connections can be accepted.
	Networks []string `pulumi:"networks"`
}

// GetNetworkLinkServiceAcceptInput is an input type that accepts GetNetworkLinkServiceAcceptArgs and GetNetworkLinkServiceAcceptOutput values.
// You can construct a concrete instance of `GetNetworkLinkServiceAcceptInput` via:
//
//	GetNetworkLinkServiceAcceptArgs{...}
type GetNetworkLinkServiceAcceptInput interface {
	pulumi.Input

	ToGetNetworkLinkServiceAcceptOutput() GetNetworkLinkServiceAcceptOutput
	ToGetNetworkLinkServiceAcceptOutputWithContext(context.Context) GetNetworkLinkServiceAcceptOutput
}

type GetNetworkLinkServiceAcceptArgs struct {
	// (Optional List of Strings) List of environments ids from which connections can be accepted. All networks within the list of environment will be allowed.
	Environments pulumi.StringArrayInput `pulumi:"environments"`
	// (Optional List of Strings) List of network ids from which connections can be accepted.
	Networks pulumi.StringArrayInput `pulumi:"networks"`
}

func (GetNetworkLinkServiceAcceptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkLinkServiceAccept)(nil)).Elem()
}

func (i GetNetworkLinkServiceAcceptArgs) ToGetNetworkLinkServiceAcceptOutput() GetNetworkLinkServiceAcceptOutput {
	return i.ToGetNetworkLinkServiceAcceptOutputWithContext(context.Background())
}

func (i GetNetworkLinkServiceAcceptArgs) ToGetNetworkLinkServiceAcceptOutputWithContext(ctx context.Context) GetNetworkLinkServiceAcceptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkLinkServiceAcceptOutput)
}

func (i GetNetworkLinkServiceAcceptArgs) ToOutput(ctx context.Context) pulumix.Output[GetNetworkLinkServiceAccept] {
	return pulumix.Output[GetNetworkLinkServiceAccept]{
		OutputState: i.ToGetNetworkLinkServiceAcceptOutputWithContext(ctx).OutputState,
	}
}

func (i GetNetworkLinkServiceAcceptArgs) ToGetNetworkLinkServiceAcceptPtrOutput() GetNetworkLinkServiceAcceptPtrOutput {
	return i.ToGetNetworkLinkServiceAcceptPtrOutputWithContext(context.Background())
}

func (i GetNetworkLinkServiceAcceptArgs) ToGetNetworkLinkServiceAcceptPtrOutputWithContext(ctx context.Context) GetNetworkLinkServiceAcceptPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkLinkServiceAcceptOutput).ToGetNetworkLinkServiceAcceptPtrOutputWithContext(ctx)
}

// GetNetworkLinkServiceAcceptPtrInput is an input type that accepts GetNetworkLinkServiceAcceptArgs, GetNetworkLinkServiceAcceptPtr and GetNetworkLinkServiceAcceptPtrOutput values.
// You can construct a concrete instance of `GetNetworkLinkServiceAcceptPtrInput` via:
//
//	        GetNetworkLinkServiceAcceptArgs{...}
//
//	or:
//
//	        nil
type GetNetworkLinkServiceAcceptPtrInput interface {
	pulumi.Input

	ToGetNetworkLinkServiceAcceptPtrOutput() GetNetworkLinkServiceAcceptPtrOutput
	ToGetNetworkLinkServiceAcceptPtrOutputWithContext(context.Context) GetNetworkLinkServiceAcceptPtrOutput
}

type getNetworkLinkServiceAcceptPtrType GetNetworkLinkServiceAcceptArgs

func GetNetworkLinkServiceAcceptPtr(v *GetNetworkLinkServiceAcceptArgs) GetNetworkLinkServiceAcceptPtrInput {
	return (*getNetworkLinkServiceAcceptPtrType)(v)
}

func (*getNetworkLinkServiceAcceptPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetNetworkLinkServiceAccept)(nil)).Elem()
}

func (i *getNetworkLinkServiceAcceptPtrType) ToGetNetworkLinkServiceAcceptPtrOutput() GetNetworkLinkServiceAcceptPtrOutput {
	return i.ToGetNetworkLinkServiceAcceptPtrOutputWithContext(context.Background())
}

func (i *getNetworkLinkServiceAcceptPtrType) ToGetNetworkLinkServiceAcceptPtrOutputWithContext(ctx context.Context) GetNetworkLinkServiceAcceptPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkLinkServiceAcceptPtrOutput)
}

func (i *getNetworkLinkServiceAcceptPtrType) ToOutput(ctx context.Context) pulumix.Output[*GetNetworkLinkServiceAccept] {
	return pulumix.Output[*GetNetworkLinkServiceAccept]{
		OutputState: i.ToGetNetworkLinkServiceAcceptPtrOutputWithContext(ctx).OutputState,
	}
}

type GetNetworkLinkServiceAcceptOutput struct{ *pulumi.OutputState }

func (GetNetworkLinkServiceAcceptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkLinkServiceAccept)(nil)).Elem()
}

func (o GetNetworkLinkServiceAcceptOutput) ToGetNetworkLinkServiceAcceptOutput() GetNetworkLinkServiceAcceptOutput {
	return o
}

func (o GetNetworkLinkServiceAcceptOutput) ToGetNetworkLinkServiceAcceptOutputWithContext(ctx context.Context) GetNetworkLinkServiceAcceptOutput {
	return o
}

func (o GetNetworkLinkServiceAcceptOutput) ToGetNetworkLinkServiceAcceptPtrOutput() GetNetworkLinkServiceAcceptPtrOutput {
	return o.ToGetNetworkLinkServiceAcceptPtrOutputWithContext(context.Background())
}

func (o GetNetworkLinkServiceAcceptOutput) ToGetNetworkLinkServiceAcceptPtrOutputWithContext(ctx context.Context) GetNetworkLinkServiceAcceptPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetNetworkLinkServiceAccept) *GetNetworkLinkServiceAccept {
		return &v
	}).(GetNetworkLinkServiceAcceptPtrOutput)
}

func (o GetNetworkLinkServiceAcceptOutput) ToOutput(ctx context.Context) pulumix.Output[GetNetworkLinkServiceAccept] {
	return pulumix.Output[GetNetworkLinkServiceAccept]{
		OutputState: o.OutputState,
	}
}

// (Optional List of Strings) List of environments ids from which connections can be accepted. All networks within the list of environment will be allowed.
func (o GetNetworkLinkServiceAcceptOutput) Environments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNetworkLinkServiceAccept) []string { return v.Environments }).(pulumi.StringArrayOutput)
}

// (Optional List of Strings) List of network ids from which connections can be accepted.
func (o GetNetworkLinkServiceAcceptOutput) Networks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNetworkLinkServiceAccept) []string { return v.Networks }).(pulumi.StringArrayOutput)
}

type GetNetworkLinkServiceAcceptPtrOutput struct{ *pulumi.OutputState }

func (GetNetworkLinkServiceAcceptPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetNetworkLinkServiceAccept)(nil)).Elem()
}

func (o GetNetworkLinkServiceAcceptPtrOutput) ToGetNetworkLinkServiceAcceptPtrOutput() GetNetworkLinkServiceAcceptPtrOutput {
	return o
}

func (o GetNetworkLinkServiceAcceptPtrOutput) ToGetNetworkLinkServiceAcceptPtrOutputWithContext(ctx context.Context) GetNetworkLinkServiceAcceptPtrOutput {
	return o
}

func (o GetNetworkLinkServiceAcceptPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GetNetworkLinkServiceAccept] {
	return pulumix.Output[*GetNetworkLinkServiceAccept]{
		OutputState: o.OutputState,
	}
}

func (o GetNetworkLinkServiceAcceptPtrOutput) Elem() GetNetworkLinkServiceAcceptOutput {
	return o.ApplyT(func(v *GetNetworkLinkServiceAccept) GetNetworkLinkServiceAccept {
		if v != nil {
			return *v
		}
		var ret GetNetworkLinkServiceAccept
		return ret
	}).(GetNetworkLinkServiceAcceptOutput)
}

// (Optional List of Strings) List of environments ids from which connections can be accepted. All networks within the list of environment will be allowed.
func (o GetNetworkLinkServiceAcceptPtrOutput) Environments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetNetworkLinkServiceAccept) []string {
		if v == nil {
			return nil
		}
		return v.Environments
	}).(pulumi.StringArrayOutput)
}

// (Optional List of Strings) List of network ids from which connections can be accepted.
func (o GetNetworkLinkServiceAcceptPtrOutput) Networks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetNetworkLinkServiceAccept) []string {
		if v == nil {
			return nil
		}
		return v.Networks
	}).(pulumi.StringArrayOutput)
}

type GetNetworkLinkServiceEnvironment struct {
	// The ID of the Environment that the Network Link Service belongs to, for example, `env-1234`.
	Id string `pulumi:"id"`
}

// GetNetworkLinkServiceEnvironmentInput is an input type that accepts GetNetworkLinkServiceEnvironmentArgs and GetNetworkLinkServiceEnvironmentOutput values.
// You can construct a concrete instance of `GetNetworkLinkServiceEnvironmentInput` via:
//
//	GetNetworkLinkServiceEnvironmentArgs{...}
type GetNetworkLinkServiceEnvironmentInput interface {
	pulumi.Input

	ToGetNetworkLinkServiceEnvironmentOutput() GetNetworkLinkServiceEnvironmentOutput
	ToGetNetworkLinkServiceEnvironmentOutputWithContext(context.Context) GetNetworkLinkServiceEnvironmentOutput
}

type GetNetworkLinkServiceEnvironmentArgs struct {
	// The ID of the Environment that the Network Link Service belongs to, for example, `env-1234`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetNetworkLinkServiceEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkLinkServiceEnvironment)(nil)).Elem()
}

func (i GetNetworkLinkServiceEnvironmentArgs) ToGetNetworkLinkServiceEnvironmentOutput() GetNetworkLinkServiceEnvironmentOutput {
	return i.ToGetNetworkLinkServiceEnvironmentOutputWithContext(context.Background())
}

func (i GetNetworkLinkServiceEnvironmentArgs) ToGetNetworkLinkServiceEnvironmentOutputWithContext(ctx context.Context) GetNetworkLinkServiceEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkLinkServiceEnvironmentOutput)
}

func (i GetNetworkLinkServiceEnvironmentArgs) ToOutput(ctx context.Context) pulumix.Output[GetNetworkLinkServiceEnvironment] {
	return pulumix.Output[GetNetworkLinkServiceEnvironment]{
		OutputState: i.ToGetNetworkLinkServiceEnvironmentOutputWithContext(ctx).OutputState,
	}
}

type GetNetworkLinkServiceEnvironmentOutput struct{ *pulumi.OutputState }

func (GetNetworkLinkServiceEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkLinkServiceEnvironment)(nil)).Elem()
}

func (o GetNetworkLinkServiceEnvironmentOutput) ToGetNetworkLinkServiceEnvironmentOutput() GetNetworkLinkServiceEnvironmentOutput {
	return o
}

func (o GetNetworkLinkServiceEnvironmentOutput) ToGetNetworkLinkServiceEnvironmentOutputWithContext(ctx context.Context) GetNetworkLinkServiceEnvironmentOutput {
	return o
}

func (o GetNetworkLinkServiceEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[GetNetworkLinkServiceEnvironment] {
	return pulumix.Output[GetNetworkLinkServiceEnvironment]{
		OutputState: o.OutputState,
	}
}

// The ID of the Environment that the Network Link Service belongs to, for example, `env-1234`.
func (o GetNetworkLinkServiceEnvironmentOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkLinkServiceEnvironment) string { return v.Id }).(pulumi.StringOutput)
}

type GetNetworkLinkServiceNetwork struct {
	// The ID of the Environment that the Network Link Service belongs to, for example, `env-1234`.
	Id string `pulumi:"id"`
}

// GetNetworkLinkServiceNetworkInput is an input type that accepts GetNetworkLinkServiceNetworkArgs and GetNetworkLinkServiceNetworkOutput values.
// You can construct a concrete instance of `GetNetworkLinkServiceNetworkInput` via:
//
//	GetNetworkLinkServiceNetworkArgs{...}
type GetNetworkLinkServiceNetworkInput interface {
	pulumi.Input

	ToGetNetworkLinkServiceNetworkOutput() GetNetworkLinkServiceNetworkOutput
	ToGetNetworkLinkServiceNetworkOutputWithContext(context.Context) GetNetworkLinkServiceNetworkOutput
}

type GetNetworkLinkServiceNetworkArgs struct {
	// The ID of the Environment that the Network Link Service belongs to, for example, `env-1234`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetNetworkLinkServiceNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkLinkServiceNetwork)(nil)).Elem()
}

func (i GetNetworkLinkServiceNetworkArgs) ToGetNetworkLinkServiceNetworkOutput() GetNetworkLinkServiceNetworkOutput {
	return i.ToGetNetworkLinkServiceNetworkOutputWithContext(context.Background())
}

func (i GetNetworkLinkServiceNetworkArgs) ToGetNetworkLinkServiceNetworkOutputWithContext(ctx context.Context) GetNetworkLinkServiceNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkLinkServiceNetworkOutput)
}

func (i GetNetworkLinkServiceNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[GetNetworkLinkServiceNetwork] {
	return pulumix.Output[GetNetworkLinkServiceNetwork]{
		OutputState: i.ToGetNetworkLinkServiceNetworkOutputWithContext(ctx).OutputState,
	}
}

// GetNetworkLinkServiceNetworkArrayInput is an input type that accepts GetNetworkLinkServiceNetworkArray and GetNetworkLinkServiceNetworkArrayOutput values.
// You can construct a concrete instance of `GetNetworkLinkServiceNetworkArrayInput` via:
//
//	GetNetworkLinkServiceNetworkArray{ GetNetworkLinkServiceNetworkArgs{...} }
type GetNetworkLinkServiceNetworkArrayInput interface {
	pulumi.Input

	ToGetNetworkLinkServiceNetworkArrayOutput() GetNetworkLinkServiceNetworkArrayOutput
	ToGetNetworkLinkServiceNetworkArrayOutputWithContext(context.Context) GetNetworkLinkServiceNetworkArrayOutput
}

type GetNetworkLinkServiceNetworkArray []GetNetworkLinkServiceNetworkInput

func (GetNetworkLinkServiceNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkLinkServiceNetwork)(nil)).Elem()
}

func (i GetNetworkLinkServiceNetworkArray) ToGetNetworkLinkServiceNetworkArrayOutput() GetNetworkLinkServiceNetworkArrayOutput {
	return i.ToGetNetworkLinkServiceNetworkArrayOutputWithContext(context.Background())
}

func (i GetNetworkLinkServiceNetworkArray) ToGetNetworkLinkServiceNetworkArrayOutputWithContext(ctx context.Context) GetNetworkLinkServiceNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkLinkServiceNetworkArrayOutput)
}

func (i GetNetworkLinkServiceNetworkArray) ToOutput(ctx context.Context) pulumix.Output[[]GetNetworkLinkServiceNetwork] {
	return pulumix.Output[[]GetNetworkLinkServiceNetwork]{
		OutputState: i.ToGetNetworkLinkServiceNetworkArrayOutputWithContext(ctx).OutputState,
	}
}

type GetNetworkLinkServiceNetworkOutput struct{ *pulumi.OutputState }

func (GetNetworkLinkServiceNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkLinkServiceNetwork)(nil)).Elem()
}

func (o GetNetworkLinkServiceNetworkOutput) ToGetNetworkLinkServiceNetworkOutput() GetNetworkLinkServiceNetworkOutput {
	return o
}

func (o GetNetworkLinkServiceNetworkOutput) ToGetNetworkLinkServiceNetworkOutputWithContext(ctx context.Context) GetNetworkLinkServiceNetworkOutput {
	return o
}

func (o GetNetworkLinkServiceNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[GetNetworkLinkServiceNetwork] {
	return pulumix.Output[GetNetworkLinkServiceNetwork]{
		OutputState: o.OutputState,
	}
}

// The ID of the Environment that the Network Link Service belongs to, for example, `env-1234`.
func (o GetNetworkLinkServiceNetworkOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkLinkServiceNetwork) string { return v.Id }).(pulumi.StringOutput)
}

type GetNetworkLinkServiceNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkLinkServiceNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkLinkServiceNetwork)(nil)).Elem()
}

func (o GetNetworkLinkServiceNetworkArrayOutput) ToGetNetworkLinkServiceNetworkArrayOutput() GetNetworkLinkServiceNetworkArrayOutput {
	return o
}

func (o GetNetworkLinkServiceNetworkArrayOutput) ToGetNetworkLinkServiceNetworkArrayOutputWithContext(ctx context.Context) GetNetworkLinkServiceNetworkArrayOutput {
	return o
}

func (o GetNetworkLinkServiceNetworkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetNetworkLinkServiceNetwork] {
	return pulumix.Output[[]GetNetworkLinkServiceNetwork]{
		OutputState: o.OutputState,
	}
}

func (o GetNetworkLinkServiceNetworkArrayOutput) Index(i pulumi.IntInput) GetNetworkLinkServiceNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkLinkServiceNetwork {
		return vs[0].([]GetNetworkLinkServiceNetwork)[vs[1].(int)]
	}).(GetNetworkLinkServiceNetworkOutput)
}

type GetNetworkZoneInfo struct {
	// (Required String) The IPv4 CIDR block to be used for the network. Must be `/27`. Required for VPC peering and AWS TransitGateway.
	Cidr string `pulumi:"cidr"`
	// (Required String) Cloud provider zone ID.
	ZoneId string `pulumi:"zoneId"`
}

// GetNetworkZoneInfoInput is an input type that accepts GetNetworkZoneInfoArgs and GetNetworkZoneInfoOutput values.
// You can construct a concrete instance of `GetNetworkZoneInfoInput` via:
//
//	GetNetworkZoneInfoArgs{...}
type GetNetworkZoneInfoInput interface {
	pulumi.Input

	ToGetNetworkZoneInfoOutput() GetNetworkZoneInfoOutput
	ToGetNetworkZoneInfoOutputWithContext(context.Context) GetNetworkZoneInfoOutput
}

type GetNetworkZoneInfoArgs struct {
	// (Required String) The IPv4 CIDR block to be used for the network. Must be `/27`. Required for VPC peering and AWS TransitGateway.
	Cidr pulumi.StringInput `pulumi:"cidr"`
	// (Required String) Cloud provider zone ID.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (GetNetworkZoneInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkZoneInfo)(nil)).Elem()
}

func (i GetNetworkZoneInfoArgs) ToGetNetworkZoneInfoOutput() GetNetworkZoneInfoOutput {
	return i.ToGetNetworkZoneInfoOutputWithContext(context.Background())
}

func (i GetNetworkZoneInfoArgs) ToGetNetworkZoneInfoOutputWithContext(ctx context.Context) GetNetworkZoneInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkZoneInfoOutput)
}

func (i GetNetworkZoneInfoArgs) ToOutput(ctx context.Context) pulumix.Output[GetNetworkZoneInfo] {
	return pulumix.Output[GetNetworkZoneInfo]{
		OutputState: i.ToGetNetworkZoneInfoOutputWithContext(ctx).OutputState,
	}
}

// GetNetworkZoneInfoArrayInput is an input type that accepts GetNetworkZoneInfoArray and GetNetworkZoneInfoArrayOutput values.
// You can construct a concrete instance of `GetNetworkZoneInfoArrayInput` via:
//
//	GetNetworkZoneInfoArray{ GetNetworkZoneInfoArgs{...} }
type GetNetworkZoneInfoArrayInput interface {
	pulumi.Input

	ToGetNetworkZoneInfoArrayOutput() GetNetworkZoneInfoArrayOutput
	ToGetNetworkZoneInfoArrayOutputWithContext(context.Context) GetNetworkZoneInfoArrayOutput
}

type GetNetworkZoneInfoArray []GetNetworkZoneInfoInput

func (GetNetworkZoneInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkZoneInfo)(nil)).Elem()
}

func (i GetNetworkZoneInfoArray) ToGetNetworkZoneInfoArrayOutput() GetNetworkZoneInfoArrayOutput {
	return i.ToGetNetworkZoneInfoArrayOutputWithContext(context.Background())
}

func (i GetNetworkZoneInfoArray) ToGetNetworkZoneInfoArrayOutputWithContext(ctx context.Context) GetNetworkZoneInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkZoneInfoArrayOutput)
}

func (i GetNetworkZoneInfoArray) ToOutput(ctx context.Context) pulumix.Output[[]GetNetworkZoneInfo] {
	return pulumix.Output[[]GetNetworkZoneInfo]{
		OutputState: i.ToGetNetworkZoneInfoArrayOutputWithContext(ctx).OutputState,
	}
}

type GetNetworkZoneInfoOutput struct{ *pulumi.OutputState }

func (GetNetworkZoneInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkZoneInfo)(nil)).Elem()
}

func (o GetNetworkZoneInfoOutput) ToGetNetworkZoneInfoOutput() GetNetworkZoneInfoOutput {
	return o
}

func (o GetNetworkZoneInfoOutput) ToGetNetworkZoneInfoOutputWithContext(ctx context.Context) GetNetworkZoneInfoOutput {
	return o
}

func (o GetNetworkZoneInfoOutput) ToOutput(ctx context.Context) pulumix.Output[GetNetworkZoneInfo] {
	return pulumix.Output[GetNetworkZoneInfo]{
		OutputState: o.OutputState,
	}
}

// (Required String) The IPv4 CIDR block to be used for the network. Must be `/27`. Required for VPC peering and AWS TransitGateway.
func (o GetNetworkZoneInfoOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkZoneInfo) string { return v.Cidr }).(pulumi.StringOutput)
}

// (Required String) Cloud provider zone ID.
func (o GetNetworkZoneInfoOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkZoneInfo) string { return v.ZoneId }).(pulumi.StringOutput)
}

type GetNetworkZoneInfoArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkZoneInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkZoneInfo)(nil)).Elem()
}

func (o GetNetworkZoneInfoArrayOutput) ToGetNetworkZoneInfoArrayOutput() GetNetworkZoneInfoArrayOutput {
	return o
}

func (o GetNetworkZoneInfoArrayOutput) ToGetNetworkZoneInfoArrayOutputWithContext(ctx context.Context) GetNetworkZoneInfoArrayOutput {
	return o
}

func (o GetNetworkZoneInfoArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetNetworkZoneInfo] {
	return pulumix.Output[[]GetNetworkZoneInfo]{
		OutputState: o.OutputState,
	}
}

func (o GetNetworkZoneInfoArrayOutput) Index(i pulumi.IntInput) GetNetworkZoneInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkZoneInfo {
		return vs[0].([]GetNetworkZoneInfo)[vs[1].(int)]
	}).(GetNetworkZoneInfoOutput)
}

type GetPeeringAw struct {
	// (Required String) The AWS Account ID of the peer VPC owner. You can find your AWS Account ID [here](https://console.aws.amazon.com/billing/home?#/account) under **My Account** section of the AWS Management Console. Must be a **12 character string**.
	Account string `pulumi:"account"`
	// (Required String) The region of the Azure peer VNet.
	CustomerRegion string `pulumi:"customerRegion"`
	// (Required String) The AWS VPC CIDR blocks or subsets. This must be from the supported CIDR blocks and must not overlap with your Confluent Cloud CIDR block or any other network peering connection VPC CIDR (learn more about the requirements [here](https://docs.confluent.io/cloud/current/networking/peering/aws-peering.html#vpc-peering-on-aws)). You can find AWS VPC CIDR [here](https://console.aws.amazon.com/vpc/) under **Your VPCs > Target VPC > Details** section of the AWS Management Console.
	Routes []string `pulumi:"routes"`
	// (Required String) The AWS VPC ID of the peer VPC that you're peering with Confluent Cloud. You can find your AWS VPC ID [here](https://console.aws.amazon.com/vpc/) under **Your VPCs** section of the AWS Management Console. Must start with `vpc-`.
	Vpc string `pulumi:"vpc"`
}

// GetPeeringAwInput is an input type that accepts GetPeeringAwArgs and GetPeeringAwOutput values.
// You can construct a concrete instance of `GetPeeringAwInput` via:
//
//	GetPeeringAwArgs{...}
type GetPeeringAwInput interface {
	pulumi.Input

	ToGetPeeringAwOutput() GetPeeringAwOutput
	ToGetPeeringAwOutputWithContext(context.Context) GetPeeringAwOutput
}

type GetPeeringAwArgs struct {
	// (Required String) The AWS Account ID of the peer VPC owner. You can find your AWS Account ID [here](https://console.aws.amazon.com/billing/home?#/account) under **My Account** section of the AWS Management Console. Must be a **12 character string**.
	Account pulumi.StringInput `pulumi:"account"`
	// (Required String) The region of the Azure peer VNet.
	CustomerRegion pulumi.StringInput `pulumi:"customerRegion"`
	// (Required String) The AWS VPC CIDR blocks or subsets. This must be from the supported CIDR blocks and must not overlap with your Confluent Cloud CIDR block or any other network peering connection VPC CIDR (learn more about the requirements [here](https://docs.confluent.io/cloud/current/networking/peering/aws-peering.html#vpc-peering-on-aws)). You can find AWS VPC CIDR [here](https://console.aws.amazon.com/vpc/) under **Your VPCs > Target VPC > Details** section of the AWS Management Console.
	Routes pulumi.StringArrayInput `pulumi:"routes"`
	// (Required String) The AWS VPC ID of the peer VPC that you're peering with Confluent Cloud. You can find your AWS VPC ID [here](https://console.aws.amazon.com/vpc/) under **Your VPCs** section of the AWS Management Console. Must start with `vpc-`.
	Vpc pulumi.StringInput `pulumi:"vpc"`
}

func (GetPeeringAwArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPeeringAw)(nil)).Elem()
}

func (i GetPeeringAwArgs) ToGetPeeringAwOutput() GetPeeringAwOutput {
	return i.ToGetPeeringAwOutputWithContext(context.Background())
}

func (i GetPeeringAwArgs) ToGetPeeringAwOutputWithContext(ctx context.Context) GetPeeringAwOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPeeringAwOutput)
}

func (i GetPeeringAwArgs) ToOutput(ctx context.Context) pulumix.Output[GetPeeringAw] {
	return pulumix.Output[GetPeeringAw]{
		OutputState: i.ToGetPeeringAwOutputWithContext(ctx).OutputState,
	}
}

// GetPeeringAwArrayInput is an input type that accepts GetPeeringAwArray and GetPeeringAwArrayOutput values.
// You can construct a concrete instance of `GetPeeringAwArrayInput` via:
//
//	GetPeeringAwArray{ GetPeeringAwArgs{...} }
type GetPeeringAwArrayInput interface {
	pulumi.Input

	ToGetPeeringAwArrayOutput() GetPeeringAwArrayOutput
	ToGetPeeringAwArrayOutputWithContext(context.Context) GetPeeringAwArrayOutput
}

type GetPeeringAwArray []GetPeeringAwInput

func (GetPeeringAwArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPeeringAw)(nil)).Elem()
}

func (i GetPeeringAwArray) ToGetPeeringAwArrayOutput() GetPeeringAwArrayOutput {
	return i.ToGetPeeringAwArrayOutputWithContext(context.Background())
}

func (i GetPeeringAwArray) ToGetPeeringAwArrayOutputWithContext(ctx context.Context) GetPeeringAwArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPeeringAwArrayOutput)
}

func (i GetPeeringAwArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPeeringAw] {
	return pulumix.Output[[]GetPeeringAw]{
		OutputState: i.ToGetPeeringAwArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPeeringAwOutput struct{ *pulumi.OutputState }

func (GetPeeringAwOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPeeringAw)(nil)).Elem()
}

func (o GetPeeringAwOutput) ToGetPeeringAwOutput() GetPeeringAwOutput {
	return o
}

func (o GetPeeringAwOutput) ToGetPeeringAwOutputWithContext(ctx context.Context) GetPeeringAwOutput {
	return o
}

func (o GetPeeringAwOutput) ToOutput(ctx context.Context) pulumix.Output[GetPeeringAw] {
	return pulumix.Output[GetPeeringAw]{
		OutputState: o.OutputState,
	}
}

// (Required String) The AWS Account ID of the peer VPC owner. You can find your AWS Account ID [here](https://console.aws.amazon.com/billing/home?#/account) under **My Account** section of the AWS Management Console. Must be a **12 character string**.
func (o GetPeeringAwOutput) Account() pulumi.StringOutput {
	return o.ApplyT(func(v GetPeeringAw) string { return v.Account }).(pulumi.StringOutput)
}

// (Required String) The region of the Azure peer VNet.
func (o GetPeeringAwOutput) CustomerRegion() pulumi.StringOutput {
	return o.ApplyT(func(v GetPeeringAw) string { return v.CustomerRegion }).(pulumi.StringOutput)
}

// (Required String) The AWS VPC CIDR blocks or subsets. This must be from the supported CIDR blocks and must not overlap with your Confluent Cloud CIDR block or any other network peering connection VPC CIDR (learn more about the requirements [here](https://docs.confluent.io/cloud/current/networking/peering/aws-peering.html#vpc-peering-on-aws)). You can find AWS VPC CIDR [here](https://console.aws.amazon.com/vpc/) under **Your VPCs > Target VPC > Details** section of the AWS Management Console.
func (o GetPeeringAwOutput) Routes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPeeringAw) []string { return v.Routes }).(pulumi.StringArrayOutput)
}

// (Required String) The AWS VPC ID of the peer VPC that you're peering with Confluent Cloud. You can find your AWS VPC ID [here](https://console.aws.amazon.com/vpc/) under **Your VPCs** section of the AWS Management Console. Must start with `vpc-`.
func (o GetPeeringAwOutput) Vpc() pulumi.StringOutput {
	return o.ApplyT(func(v GetPeeringAw) string { return v.Vpc }).(pulumi.StringOutput)
}

type GetPeeringAwArrayOutput struct{ *pulumi.OutputState }

func (GetPeeringAwArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPeeringAw)(nil)).Elem()
}

func (o GetPeeringAwArrayOutput) ToGetPeeringAwArrayOutput() GetPeeringAwArrayOutput {
	return o
}

func (o GetPeeringAwArrayOutput) ToGetPeeringAwArrayOutputWithContext(ctx context.Context) GetPeeringAwArrayOutput {
	return o
}

func (o GetPeeringAwArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPeeringAw] {
	return pulumix.Output[[]GetPeeringAw]{
		OutputState: o.OutputState,
	}
}

func (o GetPeeringAwArrayOutput) Index(i pulumi.IntInput) GetPeeringAwOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPeeringAw {
		return vs[0].([]GetPeeringAw)[vs[1].(int)]
	}).(GetPeeringAwOutput)
}

type GetPeeringAzure struct {
	// (Required String) The region of the Azure peer VNet.
	CustomerRegion string `pulumi:"customerRegion"`
	// (Required String) The Tenant ID that represents an organization in Azure Active Directory. You can find your Azure Tenant ID in the [Azure Portal under Azure Active Directory](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview). Must be a valid **32 character UUID string**.
	Tenant string `pulumi:"tenant"`
	// (Required String) The resource (composite) ID of the peer Virtual Network that you're peering with Confluent Cloud, in the format `/subscriptions/<Subscription ID>/resourceGroups/<Resource Group Name>/providers/Microsoft.Network/virtualNetworks/<VNet name>`. You can find Subscription ID, Resource Group Name and your VNet name under **Virtual Networks > Target VNet > Essentials** section of your [Microsoft Azure Portal](https://portal.azure.com/).
	Vnet string `pulumi:"vnet"`
}

// GetPeeringAzureInput is an input type that accepts GetPeeringAzureArgs and GetPeeringAzureOutput values.
// You can construct a concrete instance of `GetPeeringAzureInput` via:
//
//	GetPeeringAzureArgs{...}
type GetPeeringAzureInput interface {
	pulumi.Input

	ToGetPeeringAzureOutput() GetPeeringAzureOutput
	ToGetPeeringAzureOutputWithContext(context.Context) GetPeeringAzureOutput
}

type GetPeeringAzureArgs struct {
	// (Required String) The region of the Azure peer VNet.
	CustomerRegion pulumi.StringInput `pulumi:"customerRegion"`
	// (Required String) The Tenant ID that represents an organization in Azure Active Directory. You can find your Azure Tenant ID in the [Azure Portal under Azure Active Directory](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview). Must be a valid **32 character UUID string**.
	Tenant pulumi.StringInput `pulumi:"tenant"`
	// (Required String) The resource (composite) ID of the peer Virtual Network that you're peering with Confluent Cloud, in the format `/subscriptions/<Subscription ID>/resourceGroups/<Resource Group Name>/providers/Microsoft.Network/virtualNetworks/<VNet name>`. You can find Subscription ID, Resource Group Name and your VNet name under **Virtual Networks > Target VNet > Essentials** section of your [Microsoft Azure Portal](https://portal.azure.com/).
	Vnet pulumi.StringInput `pulumi:"vnet"`
}

func (GetPeeringAzureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPeeringAzure)(nil)).Elem()
}

func (i GetPeeringAzureArgs) ToGetPeeringAzureOutput() GetPeeringAzureOutput {
	return i.ToGetPeeringAzureOutputWithContext(context.Background())
}

func (i GetPeeringAzureArgs) ToGetPeeringAzureOutputWithContext(ctx context.Context) GetPeeringAzureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPeeringAzureOutput)
}

func (i GetPeeringAzureArgs) ToOutput(ctx context.Context) pulumix.Output[GetPeeringAzure] {
	return pulumix.Output[GetPeeringAzure]{
		OutputState: i.ToGetPeeringAzureOutputWithContext(ctx).OutputState,
	}
}

// GetPeeringAzureArrayInput is an input type that accepts GetPeeringAzureArray and GetPeeringAzureArrayOutput values.
// You can construct a concrete instance of `GetPeeringAzureArrayInput` via:
//
//	GetPeeringAzureArray{ GetPeeringAzureArgs{...} }
type GetPeeringAzureArrayInput interface {
	pulumi.Input

	ToGetPeeringAzureArrayOutput() GetPeeringAzureArrayOutput
	ToGetPeeringAzureArrayOutputWithContext(context.Context) GetPeeringAzureArrayOutput
}

type GetPeeringAzureArray []GetPeeringAzureInput

func (GetPeeringAzureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPeeringAzure)(nil)).Elem()
}

func (i GetPeeringAzureArray) ToGetPeeringAzureArrayOutput() GetPeeringAzureArrayOutput {
	return i.ToGetPeeringAzureArrayOutputWithContext(context.Background())
}

func (i GetPeeringAzureArray) ToGetPeeringAzureArrayOutputWithContext(ctx context.Context) GetPeeringAzureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPeeringAzureArrayOutput)
}

func (i GetPeeringAzureArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPeeringAzure] {
	return pulumix.Output[[]GetPeeringAzure]{
		OutputState: i.ToGetPeeringAzureArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPeeringAzureOutput struct{ *pulumi.OutputState }

func (GetPeeringAzureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPeeringAzure)(nil)).Elem()
}

func (o GetPeeringAzureOutput) ToGetPeeringAzureOutput() GetPeeringAzureOutput {
	return o
}

func (o GetPeeringAzureOutput) ToGetPeeringAzureOutputWithContext(ctx context.Context) GetPeeringAzureOutput {
	return o
}

func (o GetPeeringAzureOutput) ToOutput(ctx context.Context) pulumix.Output[GetPeeringAzure] {
	return pulumix.Output[GetPeeringAzure]{
		OutputState: o.OutputState,
	}
}

// (Required String) The region of the Azure peer VNet.
func (o GetPeeringAzureOutput) CustomerRegion() pulumi.StringOutput {
	return o.ApplyT(func(v GetPeeringAzure) string { return v.CustomerRegion }).(pulumi.StringOutput)
}

// (Required String) The Tenant ID that represents an organization in Azure Active Directory. You can find your Azure Tenant ID in the [Azure Portal under Azure Active Directory](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview). Must be a valid **32 character UUID string**.
func (o GetPeeringAzureOutput) Tenant() pulumi.StringOutput {
	return o.ApplyT(func(v GetPeeringAzure) string { return v.Tenant }).(pulumi.StringOutput)
}

// (Required String) The resource (composite) ID of the peer Virtual Network that you're peering with Confluent Cloud, in the format `/subscriptions/<Subscription ID>/resourceGroups/<Resource Group Name>/providers/Microsoft.Network/virtualNetworks/<VNet name>`. You can find Subscription ID, Resource Group Name and your VNet name under **Virtual Networks > Target VNet > Essentials** section of your [Microsoft Azure Portal](https://portal.azure.com/).
func (o GetPeeringAzureOutput) Vnet() pulumi.StringOutput {
	return o.ApplyT(func(v GetPeeringAzure) string { return v.Vnet }).(pulumi.StringOutput)
}

type GetPeeringAzureArrayOutput struct{ *pulumi.OutputState }

func (GetPeeringAzureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPeeringAzure)(nil)).Elem()
}

func (o GetPeeringAzureArrayOutput) ToGetPeeringAzureArrayOutput() GetPeeringAzureArrayOutput {
	return o
}

func (o GetPeeringAzureArrayOutput) ToGetPeeringAzureArrayOutputWithContext(ctx context.Context) GetPeeringAzureArrayOutput {
	return o
}

func (o GetPeeringAzureArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPeeringAzure] {
	return pulumix.Output[[]GetPeeringAzure]{
		OutputState: o.OutputState,
	}
}

func (o GetPeeringAzureArrayOutput) Index(i pulumi.IntInput) GetPeeringAzureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPeeringAzure {
		return vs[0].([]GetPeeringAzure)[vs[1].(int)]
	}).(GetPeeringAzureOutput)
}

type GetPeeringEnvironment struct {
	// The ID of the Environment that the Peering belongs to, for example, `env-xyz456`.
	//
	// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
	Id string `pulumi:"id"`
}

// GetPeeringEnvironmentInput is an input type that accepts GetPeeringEnvironmentArgs and GetPeeringEnvironmentOutput values.
// You can construct a concrete instance of `GetPeeringEnvironmentInput` via:
//
//	GetPeeringEnvironmentArgs{...}
type GetPeeringEnvironmentInput interface {
	pulumi.Input

	ToGetPeeringEnvironmentOutput() GetPeeringEnvironmentOutput
	ToGetPeeringEnvironmentOutputWithContext(context.Context) GetPeeringEnvironmentOutput
}

type GetPeeringEnvironmentArgs struct {
	// The ID of the Environment that the Peering belongs to, for example, `env-xyz456`.
	//
	// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetPeeringEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPeeringEnvironment)(nil)).Elem()
}

func (i GetPeeringEnvironmentArgs) ToGetPeeringEnvironmentOutput() GetPeeringEnvironmentOutput {
	return i.ToGetPeeringEnvironmentOutputWithContext(context.Background())
}

func (i GetPeeringEnvironmentArgs) ToGetPeeringEnvironmentOutputWithContext(ctx context.Context) GetPeeringEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPeeringEnvironmentOutput)
}

func (i GetPeeringEnvironmentArgs) ToOutput(ctx context.Context) pulumix.Output[GetPeeringEnvironment] {
	return pulumix.Output[GetPeeringEnvironment]{
		OutputState: i.ToGetPeeringEnvironmentOutputWithContext(ctx).OutputState,
	}
}

type GetPeeringEnvironmentOutput struct{ *pulumi.OutputState }

func (GetPeeringEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPeeringEnvironment)(nil)).Elem()
}

func (o GetPeeringEnvironmentOutput) ToGetPeeringEnvironmentOutput() GetPeeringEnvironmentOutput {
	return o
}

func (o GetPeeringEnvironmentOutput) ToGetPeeringEnvironmentOutputWithContext(ctx context.Context) GetPeeringEnvironmentOutput {
	return o
}

func (o GetPeeringEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[GetPeeringEnvironment] {
	return pulumix.Output[GetPeeringEnvironment]{
		OutputState: o.OutputState,
	}
}

// The ID of the Environment that the Peering belongs to, for example, `env-xyz456`.
//
// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
func (o GetPeeringEnvironmentOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPeeringEnvironment) string { return v.Id }).(pulumi.StringOutput)
}

type GetPeeringGcp struct {
	// (Optional Boolean) The Import Custom Routes option enables connectivity to a Confluent Cloud cluster in Google Cloud from customer premise or other clouds, such as AWS and Azure, through a customer VPC that is peered with Confluent Cloud in the same region. Defaults to `false`. Learn more about considerations / limitations of the Import Custom Routes option [here](https://docs.confluent.io/cloud/current/networking/peering/gcp-peering.html#import-custom-routes).
	ImportCustomRoutes bool `pulumi:"importCustomRoutes"`
	// (Required String) The GCP Project ID. You can find your Google Cloud Project ID under **Project ID** section of your [Google Cloud Console dashboard](https://console.cloud.google.com/home/dashboard).
	Project string `pulumi:"project"`
	// (Required String) The VPC network name that you're peering to Confluent Cloud. You can find your VPC network name under **VPC Networks** section of your [Google Cloud Console](https://console.cloud.google.com/networking/networks/list).
	VpcNetwork string `pulumi:"vpcNetwork"`
}

// GetPeeringGcpInput is an input type that accepts GetPeeringGcpArgs and GetPeeringGcpOutput values.
// You can construct a concrete instance of `GetPeeringGcpInput` via:
//
//	GetPeeringGcpArgs{...}
type GetPeeringGcpInput interface {
	pulumi.Input

	ToGetPeeringGcpOutput() GetPeeringGcpOutput
	ToGetPeeringGcpOutputWithContext(context.Context) GetPeeringGcpOutput
}

type GetPeeringGcpArgs struct {
	// (Optional Boolean) The Import Custom Routes option enables connectivity to a Confluent Cloud cluster in Google Cloud from customer premise or other clouds, such as AWS and Azure, through a customer VPC that is peered with Confluent Cloud in the same region. Defaults to `false`. Learn more about considerations / limitations of the Import Custom Routes option [here](https://docs.confluent.io/cloud/current/networking/peering/gcp-peering.html#import-custom-routes).
	ImportCustomRoutes pulumi.BoolInput `pulumi:"importCustomRoutes"`
	// (Required String) The GCP Project ID. You can find your Google Cloud Project ID under **Project ID** section of your [Google Cloud Console dashboard](https://console.cloud.google.com/home/dashboard).
	Project pulumi.StringInput `pulumi:"project"`
	// (Required String) The VPC network name that you're peering to Confluent Cloud. You can find your VPC network name under **VPC Networks** section of your [Google Cloud Console](https://console.cloud.google.com/networking/networks/list).
	VpcNetwork pulumi.StringInput `pulumi:"vpcNetwork"`
}

func (GetPeeringGcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPeeringGcp)(nil)).Elem()
}

func (i GetPeeringGcpArgs) ToGetPeeringGcpOutput() GetPeeringGcpOutput {
	return i.ToGetPeeringGcpOutputWithContext(context.Background())
}

func (i GetPeeringGcpArgs) ToGetPeeringGcpOutputWithContext(ctx context.Context) GetPeeringGcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPeeringGcpOutput)
}

func (i GetPeeringGcpArgs) ToOutput(ctx context.Context) pulumix.Output[GetPeeringGcp] {
	return pulumix.Output[GetPeeringGcp]{
		OutputState: i.ToGetPeeringGcpOutputWithContext(ctx).OutputState,
	}
}

// GetPeeringGcpArrayInput is an input type that accepts GetPeeringGcpArray and GetPeeringGcpArrayOutput values.
// You can construct a concrete instance of `GetPeeringGcpArrayInput` via:
//
//	GetPeeringGcpArray{ GetPeeringGcpArgs{...} }
type GetPeeringGcpArrayInput interface {
	pulumi.Input

	ToGetPeeringGcpArrayOutput() GetPeeringGcpArrayOutput
	ToGetPeeringGcpArrayOutputWithContext(context.Context) GetPeeringGcpArrayOutput
}

type GetPeeringGcpArray []GetPeeringGcpInput

func (GetPeeringGcpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPeeringGcp)(nil)).Elem()
}

func (i GetPeeringGcpArray) ToGetPeeringGcpArrayOutput() GetPeeringGcpArrayOutput {
	return i.ToGetPeeringGcpArrayOutputWithContext(context.Background())
}

func (i GetPeeringGcpArray) ToGetPeeringGcpArrayOutputWithContext(ctx context.Context) GetPeeringGcpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPeeringGcpArrayOutput)
}

func (i GetPeeringGcpArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPeeringGcp] {
	return pulumix.Output[[]GetPeeringGcp]{
		OutputState: i.ToGetPeeringGcpArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPeeringGcpOutput struct{ *pulumi.OutputState }

func (GetPeeringGcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPeeringGcp)(nil)).Elem()
}

func (o GetPeeringGcpOutput) ToGetPeeringGcpOutput() GetPeeringGcpOutput {
	return o
}

func (o GetPeeringGcpOutput) ToGetPeeringGcpOutputWithContext(ctx context.Context) GetPeeringGcpOutput {
	return o
}

func (o GetPeeringGcpOutput) ToOutput(ctx context.Context) pulumix.Output[GetPeeringGcp] {
	return pulumix.Output[GetPeeringGcp]{
		OutputState: o.OutputState,
	}
}

// (Optional Boolean) The Import Custom Routes option enables connectivity to a Confluent Cloud cluster in Google Cloud from customer premise or other clouds, such as AWS and Azure, through a customer VPC that is peered with Confluent Cloud in the same region. Defaults to `false`. Learn more about considerations / limitations of the Import Custom Routes option [here](https://docs.confluent.io/cloud/current/networking/peering/gcp-peering.html#import-custom-routes).
func (o GetPeeringGcpOutput) ImportCustomRoutes() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPeeringGcp) bool { return v.ImportCustomRoutes }).(pulumi.BoolOutput)
}

// (Required String) The GCP Project ID. You can find your Google Cloud Project ID under **Project ID** section of your [Google Cloud Console dashboard](https://console.cloud.google.com/home/dashboard).
func (o GetPeeringGcpOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetPeeringGcp) string { return v.Project }).(pulumi.StringOutput)
}

// (Required String) The VPC network name that you're peering to Confluent Cloud. You can find your VPC network name under **VPC Networks** section of your [Google Cloud Console](https://console.cloud.google.com/networking/networks/list).
func (o GetPeeringGcpOutput) VpcNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v GetPeeringGcp) string { return v.VpcNetwork }).(pulumi.StringOutput)
}

type GetPeeringGcpArrayOutput struct{ *pulumi.OutputState }

func (GetPeeringGcpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPeeringGcp)(nil)).Elem()
}

func (o GetPeeringGcpArrayOutput) ToGetPeeringGcpArrayOutput() GetPeeringGcpArrayOutput {
	return o
}

func (o GetPeeringGcpArrayOutput) ToGetPeeringGcpArrayOutputWithContext(ctx context.Context) GetPeeringGcpArrayOutput {
	return o
}

func (o GetPeeringGcpArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPeeringGcp] {
	return pulumix.Output[[]GetPeeringGcp]{
		OutputState: o.OutputState,
	}
}

func (o GetPeeringGcpArrayOutput) Index(i pulumi.IntInput) GetPeeringGcpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPeeringGcp {
		return vs[0].([]GetPeeringGcp)[vs[1].(int)]
	}).(GetPeeringGcpOutput)
}

type GetPeeringNetwork struct {
	// The ID of the Environment that the Peering belongs to, for example, `env-xyz456`.
	//
	// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
	Id string `pulumi:"id"`
}

// GetPeeringNetworkInput is an input type that accepts GetPeeringNetworkArgs and GetPeeringNetworkOutput values.
// You can construct a concrete instance of `GetPeeringNetworkInput` via:
//
//	GetPeeringNetworkArgs{...}
type GetPeeringNetworkInput interface {
	pulumi.Input

	ToGetPeeringNetworkOutput() GetPeeringNetworkOutput
	ToGetPeeringNetworkOutputWithContext(context.Context) GetPeeringNetworkOutput
}

type GetPeeringNetworkArgs struct {
	// The ID of the Environment that the Peering belongs to, for example, `env-xyz456`.
	//
	// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetPeeringNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPeeringNetwork)(nil)).Elem()
}

func (i GetPeeringNetworkArgs) ToGetPeeringNetworkOutput() GetPeeringNetworkOutput {
	return i.ToGetPeeringNetworkOutputWithContext(context.Background())
}

func (i GetPeeringNetworkArgs) ToGetPeeringNetworkOutputWithContext(ctx context.Context) GetPeeringNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPeeringNetworkOutput)
}

func (i GetPeeringNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[GetPeeringNetwork] {
	return pulumix.Output[GetPeeringNetwork]{
		OutputState: i.ToGetPeeringNetworkOutputWithContext(ctx).OutputState,
	}
}

// GetPeeringNetworkArrayInput is an input type that accepts GetPeeringNetworkArray and GetPeeringNetworkArrayOutput values.
// You can construct a concrete instance of `GetPeeringNetworkArrayInput` via:
//
//	GetPeeringNetworkArray{ GetPeeringNetworkArgs{...} }
type GetPeeringNetworkArrayInput interface {
	pulumi.Input

	ToGetPeeringNetworkArrayOutput() GetPeeringNetworkArrayOutput
	ToGetPeeringNetworkArrayOutputWithContext(context.Context) GetPeeringNetworkArrayOutput
}

type GetPeeringNetworkArray []GetPeeringNetworkInput

func (GetPeeringNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPeeringNetwork)(nil)).Elem()
}

func (i GetPeeringNetworkArray) ToGetPeeringNetworkArrayOutput() GetPeeringNetworkArrayOutput {
	return i.ToGetPeeringNetworkArrayOutputWithContext(context.Background())
}

func (i GetPeeringNetworkArray) ToGetPeeringNetworkArrayOutputWithContext(ctx context.Context) GetPeeringNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPeeringNetworkArrayOutput)
}

func (i GetPeeringNetworkArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPeeringNetwork] {
	return pulumix.Output[[]GetPeeringNetwork]{
		OutputState: i.ToGetPeeringNetworkArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPeeringNetworkOutput struct{ *pulumi.OutputState }

func (GetPeeringNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPeeringNetwork)(nil)).Elem()
}

func (o GetPeeringNetworkOutput) ToGetPeeringNetworkOutput() GetPeeringNetworkOutput {
	return o
}

func (o GetPeeringNetworkOutput) ToGetPeeringNetworkOutputWithContext(ctx context.Context) GetPeeringNetworkOutput {
	return o
}

func (o GetPeeringNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[GetPeeringNetwork] {
	return pulumix.Output[GetPeeringNetwork]{
		OutputState: o.OutputState,
	}
}

// The ID of the Environment that the Peering belongs to, for example, `env-xyz456`.
//
// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
func (o GetPeeringNetworkOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPeeringNetwork) string { return v.Id }).(pulumi.StringOutput)
}

type GetPeeringNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetPeeringNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPeeringNetwork)(nil)).Elem()
}

func (o GetPeeringNetworkArrayOutput) ToGetPeeringNetworkArrayOutput() GetPeeringNetworkArrayOutput {
	return o
}

func (o GetPeeringNetworkArrayOutput) ToGetPeeringNetworkArrayOutputWithContext(ctx context.Context) GetPeeringNetworkArrayOutput {
	return o
}

func (o GetPeeringNetworkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPeeringNetwork] {
	return pulumix.Output[[]GetPeeringNetwork]{
		OutputState: o.OutputState,
	}
}

func (o GetPeeringNetworkArrayOutput) Index(i pulumi.IntInput) GetPeeringNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPeeringNetwork {
		return vs[0].([]GetPeeringNetwork)[vs[1].(int)]
	}).(GetPeeringNetworkOutput)
}

type GetPrivateLinkAccessAw struct {
	// (Required String) The AWS account ID to enable for the Private Link Access. You can find your AWS account ID [here](https://console.aws.amazon.com/billing/home?#/account) under **My Account** in your AWS Management Console. Must be a **12 character string**.
	Account string `pulumi:"account"`
}

// GetPrivateLinkAccessAwInput is an input type that accepts GetPrivateLinkAccessAwArgs and GetPrivateLinkAccessAwOutput values.
// You can construct a concrete instance of `GetPrivateLinkAccessAwInput` via:
//
//	GetPrivateLinkAccessAwArgs{...}
type GetPrivateLinkAccessAwInput interface {
	pulumi.Input

	ToGetPrivateLinkAccessAwOutput() GetPrivateLinkAccessAwOutput
	ToGetPrivateLinkAccessAwOutputWithContext(context.Context) GetPrivateLinkAccessAwOutput
}

type GetPrivateLinkAccessAwArgs struct {
	// (Required String) The AWS account ID to enable for the Private Link Access. You can find your AWS account ID [here](https://console.aws.amazon.com/billing/home?#/account) under **My Account** in your AWS Management Console. Must be a **12 character string**.
	Account pulumi.StringInput `pulumi:"account"`
}

func (GetPrivateLinkAccessAwArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateLinkAccessAw)(nil)).Elem()
}

func (i GetPrivateLinkAccessAwArgs) ToGetPrivateLinkAccessAwOutput() GetPrivateLinkAccessAwOutput {
	return i.ToGetPrivateLinkAccessAwOutputWithContext(context.Background())
}

func (i GetPrivateLinkAccessAwArgs) ToGetPrivateLinkAccessAwOutputWithContext(ctx context.Context) GetPrivateLinkAccessAwOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateLinkAccessAwOutput)
}

func (i GetPrivateLinkAccessAwArgs) ToOutput(ctx context.Context) pulumix.Output[GetPrivateLinkAccessAw] {
	return pulumix.Output[GetPrivateLinkAccessAw]{
		OutputState: i.ToGetPrivateLinkAccessAwOutputWithContext(ctx).OutputState,
	}
}

// GetPrivateLinkAccessAwArrayInput is an input type that accepts GetPrivateLinkAccessAwArray and GetPrivateLinkAccessAwArrayOutput values.
// You can construct a concrete instance of `GetPrivateLinkAccessAwArrayInput` via:
//
//	GetPrivateLinkAccessAwArray{ GetPrivateLinkAccessAwArgs{...} }
type GetPrivateLinkAccessAwArrayInput interface {
	pulumi.Input

	ToGetPrivateLinkAccessAwArrayOutput() GetPrivateLinkAccessAwArrayOutput
	ToGetPrivateLinkAccessAwArrayOutputWithContext(context.Context) GetPrivateLinkAccessAwArrayOutput
}

type GetPrivateLinkAccessAwArray []GetPrivateLinkAccessAwInput

func (GetPrivateLinkAccessAwArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivateLinkAccessAw)(nil)).Elem()
}

func (i GetPrivateLinkAccessAwArray) ToGetPrivateLinkAccessAwArrayOutput() GetPrivateLinkAccessAwArrayOutput {
	return i.ToGetPrivateLinkAccessAwArrayOutputWithContext(context.Background())
}

func (i GetPrivateLinkAccessAwArray) ToGetPrivateLinkAccessAwArrayOutputWithContext(ctx context.Context) GetPrivateLinkAccessAwArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateLinkAccessAwArrayOutput)
}

func (i GetPrivateLinkAccessAwArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPrivateLinkAccessAw] {
	return pulumix.Output[[]GetPrivateLinkAccessAw]{
		OutputState: i.ToGetPrivateLinkAccessAwArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPrivateLinkAccessAwOutput struct{ *pulumi.OutputState }

func (GetPrivateLinkAccessAwOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateLinkAccessAw)(nil)).Elem()
}

func (o GetPrivateLinkAccessAwOutput) ToGetPrivateLinkAccessAwOutput() GetPrivateLinkAccessAwOutput {
	return o
}

func (o GetPrivateLinkAccessAwOutput) ToGetPrivateLinkAccessAwOutputWithContext(ctx context.Context) GetPrivateLinkAccessAwOutput {
	return o
}

func (o GetPrivateLinkAccessAwOutput) ToOutput(ctx context.Context) pulumix.Output[GetPrivateLinkAccessAw] {
	return pulumix.Output[GetPrivateLinkAccessAw]{
		OutputState: o.OutputState,
	}
}

// (Required String) The AWS account ID to enable for the Private Link Access. You can find your AWS account ID [here](https://console.aws.amazon.com/billing/home?#/account) under **My Account** in your AWS Management Console. Must be a **12 character string**.
func (o GetPrivateLinkAccessAwOutput) Account() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateLinkAccessAw) string { return v.Account }).(pulumi.StringOutput)
}

type GetPrivateLinkAccessAwArrayOutput struct{ *pulumi.OutputState }

func (GetPrivateLinkAccessAwArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivateLinkAccessAw)(nil)).Elem()
}

func (o GetPrivateLinkAccessAwArrayOutput) ToGetPrivateLinkAccessAwArrayOutput() GetPrivateLinkAccessAwArrayOutput {
	return o
}

func (o GetPrivateLinkAccessAwArrayOutput) ToGetPrivateLinkAccessAwArrayOutputWithContext(ctx context.Context) GetPrivateLinkAccessAwArrayOutput {
	return o
}

func (o GetPrivateLinkAccessAwArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPrivateLinkAccessAw] {
	return pulumix.Output[[]GetPrivateLinkAccessAw]{
		OutputState: o.OutputState,
	}
}

func (o GetPrivateLinkAccessAwArrayOutput) Index(i pulumi.IntInput) GetPrivateLinkAccessAwOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPrivateLinkAccessAw {
		return vs[0].([]GetPrivateLinkAccessAw)[vs[1].(int)]
	}).(GetPrivateLinkAccessAwOutput)
}

type GetPrivateLinkAccessAzure struct {
	// (Required String) The Azure subscription ID to enable for the Private Link Access. You can find your Azure subscription ID in the subscription section of your [Microsoft Azure Portal](https://portal.azure.com/#blade/Microsoft_Azure_Billing/SubscriptionsBlade). Must be a valid **32 character UUID string**.
	Subscription string `pulumi:"subscription"`
}

// GetPrivateLinkAccessAzureInput is an input type that accepts GetPrivateLinkAccessAzureArgs and GetPrivateLinkAccessAzureOutput values.
// You can construct a concrete instance of `GetPrivateLinkAccessAzureInput` via:
//
//	GetPrivateLinkAccessAzureArgs{...}
type GetPrivateLinkAccessAzureInput interface {
	pulumi.Input

	ToGetPrivateLinkAccessAzureOutput() GetPrivateLinkAccessAzureOutput
	ToGetPrivateLinkAccessAzureOutputWithContext(context.Context) GetPrivateLinkAccessAzureOutput
}

type GetPrivateLinkAccessAzureArgs struct {
	// (Required String) The Azure subscription ID to enable for the Private Link Access. You can find your Azure subscription ID in the subscription section of your [Microsoft Azure Portal](https://portal.azure.com/#blade/Microsoft_Azure_Billing/SubscriptionsBlade). Must be a valid **32 character UUID string**.
	Subscription pulumi.StringInput `pulumi:"subscription"`
}

func (GetPrivateLinkAccessAzureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateLinkAccessAzure)(nil)).Elem()
}

func (i GetPrivateLinkAccessAzureArgs) ToGetPrivateLinkAccessAzureOutput() GetPrivateLinkAccessAzureOutput {
	return i.ToGetPrivateLinkAccessAzureOutputWithContext(context.Background())
}

func (i GetPrivateLinkAccessAzureArgs) ToGetPrivateLinkAccessAzureOutputWithContext(ctx context.Context) GetPrivateLinkAccessAzureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateLinkAccessAzureOutput)
}

func (i GetPrivateLinkAccessAzureArgs) ToOutput(ctx context.Context) pulumix.Output[GetPrivateLinkAccessAzure] {
	return pulumix.Output[GetPrivateLinkAccessAzure]{
		OutputState: i.ToGetPrivateLinkAccessAzureOutputWithContext(ctx).OutputState,
	}
}

// GetPrivateLinkAccessAzureArrayInput is an input type that accepts GetPrivateLinkAccessAzureArray and GetPrivateLinkAccessAzureArrayOutput values.
// You can construct a concrete instance of `GetPrivateLinkAccessAzureArrayInput` via:
//
//	GetPrivateLinkAccessAzureArray{ GetPrivateLinkAccessAzureArgs{...} }
type GetPrivateLinkAccessAzureArrayInput interface {
	pulumi.Input

	ToGetPrivateLinkAccessAzureArrayOutput() GetPrivateLinkAccessAzureArrayOutput
	ToGetPrivateLinkAccessAzureArrayOutputWithContext(context.Context) GetPrivateLinkAccessAzureArrayOutput
}

type GetPrivateLinkAccessAzureArray []GetPrivateLinkAccessAzureInput

func (GetPrivateLinkAccessAzureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivateLinkAccessAzure)(nil)).Elem()
}

func (i GetPrivateLinkAccessAzureArray) ToGetPrivateLinkAccessAzureArrayOutput() GetPrivateLinkAccessAzureArrayOutput {
	return i.ToGetPrivateLinkAccessAzureArrayOutputWithContext(context.Background())
}

func (i GetPrivateLinkAccessAzureArray) ToGetPrivateLinkAccessAzureArrayOutputWithContext(ctx context.Context) GetPrivateLinkAccessAzureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateLinkAccessAzureArrayOutput)
}

func (i GetPrivateLinkAccessAzureArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPrivateLinkAccessAzure] {
	return pulumix.Output[[]GetPrivateLinkAccessAzure]{
		OutputState: i.ToGetPrivateLinkAccessAzureArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPrivateLinkAccessAzureOutput struct{ *pulumi.OutputState }

func (GetPrivateLinkAccessAzureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateLinkAccessAzure)(nil)).Elem()
}

func (o GetPrivateLinkAccessAzureOutput) ToGetPrivateLinkAccessAzureOutput() GetPrivateLinkAccessAzureOutput {
	return o
}

func (o GetPrivateLinkAccessAzureOutput) ToGetPrivateLinkAccessAzureOutputWithContext(ctx context.Context) GetPrivateLinkAccessAzureOutput {
	return o
}

func (o GetPrivateLinkAccessAzureOutput) ToOutput(ctx context.Context) pulumix.Output[GetPrivateLinkAccessAzure] {
	return pulumix.Output[GetPrivateLinkAccessAzure]{
		OutputState: o.OutputState,
	}
}

// (Required String) The Azure subscription ID to enable for the Private Link Access. You can find your Azure subscription ID in the subscription section of your [Microsoft Azure Portal](https://portal.azure.com/#blade/Microsoft_Azure_Billing/SubscriptionsBlade). Must be a valid **32 character UUID string**.
func (o GetPrivateLinkAccessAzureOutput) Subscription() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateLinkAccessAzure) string { return v.Subscription }).(pulumi.StringOutput)
}

type GetPrivateLinkAccessAzureArrayOutput struct{ *pulumi.OutputState }

func (GetPrivateLinkAccessAzureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivateLinkAccessAzure)(nil)).Elem()
}

func (o GetPrivateLinkAccessAzureArrayOutput) ToGetPrivateLinkAccessAzureArrayOutput() GetPrivateLinkAccessAzureArrayOutput {
	return o
}

func (o GetPrivateLinkAccessAzureArrayOutput) ToGetPrivateLinkAccessAzureArrayOutputWithContext(ctx context.Context) GetPrivateLinkAccessAzureArrayOutput {
	return o
}

func (o GetPrivateLinkAccessAzureArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPrivateLinkAccessAzure] {
	return pulumix.Output[[]GetPrivateLinkAccessAzure]{
		OutputState: o.OutputState,
	}
}

func (o GetPrivateLinkAccessAzureArrayOutput) Index(i pulumi.IntInput) GetPrivateLinkAccessAzureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPrivateLinkAccessAzure {
		return vs[0].([]GetPrivateLinkAccessAzure)[vs[1].(int)]
	}).(GetPrivateLinkAccessAzureOutput)
}

type GetPrivateLinkAccessEnvironment struct {
	// The ID of the Environment that the Private Link Access belongs to, for example, `env-xyz456`.
	//
	// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
	Id string `pulumi:"id"`
}

// GetPrivateLinkAccessEnvironmentInput is an input type that accepts GetPrivateLinkAccessEnvironmentArgs and GetPrivateLinkAccessEnvironmentOutput values.
// You can construct a concrete instance of `GetPrivateLinkAccessEnvironmentInput` via:
//
//	GetPrivateLinkAccessEnvironmentArgs{...}
type GetPrivateLinkAccessEnvironmentInput interface {
	pulumi.Input

	ToGetPrivateLinkAccessEnvironmentOutput() GetPrivateLinkAccessEnvironmentOutput
	ToGetPrivateLinkAccessEnvironmentOutputWithContext(context.Context) GetPrivateLinkAccessEnvironmentOutput
}

type GetPrivateLinkAccessEnvironmentArgs struct {
	// The ID of the Environment that the Private Link Access belongs to, for example, `env-xyz456`.
	//
	// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetPrivateLinkAccessEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateLinkAccessEnvironment)(nil)).Elem()
}

func (i GetPrivateLinkAccessEnvironmentArgs) ToGetPrivateLinkAccessEnvironmentOutput() GetPrivateLinkAccessEnvironmentOutput {
	return i.ToGetPrivateLinkAccessEnvironmentOutputWithContext(context.Background())
}

func (i GetPrivateLinkAccessEnvironmentArgs) ToGetPrivateLinkAccessEnvironmentOutputWithContext(ctx context.Context) GetPrivateLinkAccessEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateLinkAccessEnvironmentOutput)
}

func (i GetPrivateLinkAccessEnvironmentArgs) ToOutput(ctx context.Context) pulumix.Output[GetPrivateLinkAccessEnvironment] {
	return pulumix.Output[GetPrivateLinkAccessEnvironment]{
		OutputState: i.ToGetPrivateLinkAccessEnvironmentOutputWithContext(ctx).OutputState,
	}
}

type GetPrivateLinkAccessEnvironmentOutput struct{ *pulumi.OutputState }

func (GetPrivateLinkAccessEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateLinkAccessEnvironment)(nil)).Elem()
}

func (o GetPrivateLinkAccessEnvironmentOutput) ToGetPrivateLinkAccessEnvironmentOutput() GetPrivateLinkAccessEnvironmentOutput {
	return o
}

func (o GetPrivateLinkAccessEnvironmentOutput) ToGetPrivateLinkAccessEnvironmentOutputWithContext(ctx context.Context) GetPrivateLinkAccessEnvironmentOutput {
	return o
}

func (o GetPrivateLinkAccessEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[GetPrivateLinkAccessEnvironment] {
	return pulumix.Output[GetPrivateLinkAccessEnvironment]{
		OutputState: o.OutputState,
	}
}

// The ID of the Environment that the Private Link Access belongs to, for example, `env-xyz456`.
//
// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
func (o GetPrivateLinkAccessEnvironmentOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateLinkAccessEnvironment) string { return v.Id }).(pulumi.StringOutput)
}

type GetPrivateLinkAccessGcp struct {
	// (Required String) The GCP project ID to allow for Private Service Connect access. You can find your Google Cloud Project ID under **Project ID** section of your [Google Cloud Console dashboard](https://console.cloud.google.com/home/dashboard).
	Project string `pulumi:"project"`
}

// GetPrivateLinkAccessGcpInput is an input type that accepts GetPrivateLinkAccessGcpArgs and GetPrivateLinkAccessGcpOutput values.
// You can construct a concrete instance of `GetPrivateLinkAccessGcpInput` via:
//
//	GetPrivateLinkAccessGcpArgs{...}
type GetPrivateLinkAccessGcpInput interface {
	pulumi.Input

	ToGetPrivateLinkAccessGcpOutput() GetPrivateLinkAccessGcpOutput
	ToGetPrivateLinkAccessGcpOutputWithContext(context.Context) GetPrivateLinkAccessGcpOutput
}

type GetPrivateLinkAccessGcpArgs struct {
	// (Required String) The GCP project ID to allow for Private Service Connect access. You can find your Google Cloud Project ID under **Project ID** section of your [Google Cloud Console dashboard](https://console.cloud.google.com/home/dashboard).
	Project pulumi.StringInput `pulumi:"project"`
}

func (GetPrivateLinkAccessGcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateLinkAccessGcp)(nil)).Elem()
}

func (i GetPrivateLinkAccessGcpArgs) ToGetPrivateLinkAccessGcpOutput() GetPrivateLinkAccessGcpOutput {
	return i.ToGetPrivateLinkAccessGcpOutputWithContext(context.Background())
}

func (i GetPrivateLinkAccessGcpArgs) ToGetPrivateLinkAccessGcpOutputWithContext(ctx context.Context) GetPrivateLinkAccessGcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateLinkAccessGcpOutput)
}

func (i GetPrivateLinkAccessGcpArgs) ToOutput(ctx context.Context) pulumix.Output[GetPrivateLinkAccessGcp] {
	return pulumix.Output[GetPrivateLinkAccessGcp]{
		OutputState: i.ToGetPrivateLinkAccessGcpOutputWithContext(ctx).OutputState,
	}
}

// GetPrivateLinkAccessGcpArrayInput is an input type that accepts GetPrivateLinkAccessGcpArray and GetPrivateLinkAccessGcpArrayOutput values.
// You can construct a concrete instance of `GetPrivateLinkAccessGcpArrayInput` via:
//
//	GetPrivateLinkAccessGcpArray{ GetPrivateLinkAccessGcpArgs{...} }
type GetPrivateLinkAccessGcpArrayInput interface {
	pulumi.Input

	ToGetPrivateLinkAccessGcpArrayOutput() GetPrivateLinkAccessGcpArrayOutput
	ToGetPrivateLinkAccessGcpArrayOutputWithContext(context.Context) GetPrivateLinkAccessGcpArrayOutput
}

type GetPrivateLinkAccessGcpArray []GetPrivateLinkAccessGcpInput

func (GetPrivateLinkAccessGcpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivateLinkAccessGcp)(nil)).Elem()
}

func (i GetPrivateLinkAccessGcpArray) ToGetPrivateLinkAccessGcpArrayOutput() GetPrivateLinkAccessGcpArrayOutput {
	return i.ToGetPrivateLinkAccessGcpArrayOutputWithContext(context.Background())
}

func (i GetPrivateLinkAccessGcpArray) ToGetPrivateLinkAccessGcpArrayOutputWithContext(ctx context.Context) GetPrivateLinkAccessGcpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateLinkAccessGcpArrayOutput)
}

func (i GetPrivateLinkAccessGcpArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPrivateLinkAccessGcp] {
	return pulumix.Output[[]GetPrivateLinkAccessGcp]{
		OutputState: i.ToGetPrivateLinkAccessGcpArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPrivateLinkAccessGcpOutput struct{ *pulumi.OutputState }

func (GetPrivateLinkAccessGcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateLinkAccessGcp)(nil)).Elem()
}

func (o GetPrivateLinkAccessGcpOutput) ToGetPrivateLinkAccessGcpOutput() GetPrivateLinkAccessGcpOutput {
	return o
}

func (o GetPrivateLinkAccessGcpOutput) ToGetPrivateLinkAccessGcpOutputWithContext(ctx context.Context) GetPrivateLinkAccessGcpOutput {
	return o
}

func (o GetPrivateLinkAccessGcpOutput) ToOutput(ctx context.Context) pulumix.Output[GetPrivateLinkAccessGcp] {
	return pulumix.Output[GetPrivateLinkAccessGcp]{
		OutputState: o.OutputState,
	}
}

// (Required String) The GCP project ID to allow for Private Service Connect access. You can find your Google Cloud Project ID under **Project ID** section of your [Google Cloud Console dashboard](https://console.cloud.google.com/home/dashboard).
func (o GetPrivateLinkAccessGcpOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateLinkAccessGcp) string { return v.Project }).(pulumi.StringOutput)
}

type GetPrivateLinkAccessGcpArrayOutput struct{ *pulumi.OutputState }

func (GetPrivateLinkAccessGcpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivateLinkAccessGcp)(nil)).Elem()
}

func (o GetPrivateLinkAccessGcpArrayOutput) ToGetPrivateLinkAccessGcpArrayOutput() GetPrivateLinkAccessGcpArrayOutput {
	return o
}

func (o GetPrivateLinkAccessGcpArrayOutput) ToGetPrivateLinkAccessGcpArrayOutputWithContext(ctx context.Context) GetPrivateLinkAccessGcpArrayOutput {
	return o
}

func (o GetPrivateLinkAccessGcpArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPrivateLinkAccessGcp] {
	return pulumix.Output[[]GetPrivateLinkAccessGcp]{
		OutputState: o.OutputState,
	}
}

func (o GetPrivateLinkAccessGcpArrayOutput) Index(i pulumi.IntInput) GetPrivateLinkAccessGcpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPrivateLinkAccessGcp {
		return vs[0].([]GetPrivateLinkAccessGcp)[vs[1].(int)]
	}).(GetPrivateLinkAccessGcpOutput)
}

type GetPrivateLinkAccessNetwork struct {
	// The ID of the Environment that the Private Link Access belongs to, for example, `env-xyz456`.
	//
	// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
	Id string `pulumi:"id"`
}

// GetPrivateLinkAccessNetworkInput is an input type that accepts GetPrivateLinkAccessNetworkArgs and GetPrivateLinkAccessNetworkOutput values.
// You can construct a concrete instance of `GetPrivateLinkAccessNetworkInput` via:
//
//	GetPrivateLinkAccessNetworkArgs{...}
type GetPrivateLinkAccessNetworkInput interface {
	pulumi.Input

	ToGetPrivateLinkAccessNetworkOutput() GetPrivateLinkAccessNetworkOutput
	ToGetPrivateLinkAccessNetworkOutputWithContext(context.Context) GetPrivateLinkAccessNetworkOutput
}

type GetPrivateLinkAccessNetworkArgs struct {
	// The ID of the Environment that the Private Link Access belongs to, for example, `env-xyz456`.
	//
	// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetPrivateLinkAccessNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateLinkAccessNetwork)(nil)).Elem()
}

func (i GetPrivateLinkAccessNetworkArgs) ToGetPrivateLinkAccessNetworkOutput() GetPrivateLinkAccessNetworkOutput {
	return i.ToGetPrivateLinkAccessNetworkOutputWithContext(context.Background())
}

func (i GetPrivateLinkAccessNetworkArgs) ToGetPrivateLinkAccessNetworkOutputWithContext(ctx context.Context) GetPrivateLinkAccessNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateLinkAccessNetworkOutput)
}

func (i GetPrivateLinkAccessNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[GetPrivateLinkAccessNetwork] {
	return pulumix.Output[GetPrivateLinkAccessNetwork]{
		OutputState: i.ToGetPrivateLinkAccessNetworkOutputWithContext(ctx).OutputState,
	}
}

// GetPrivateLinkAccessNetworkArrayInput is an input type that accepts GetPrivateLinkAccessNetworkArray and GetPrivateLinkAccessNetworkArrayOutput values.
// You can construct a concrete instance of `GetPrivateLinkAccessNetworkArrayInput` via:
//
//	GetPrivateLinkAccessNetworkArray{ GetPrivateLinkAccessNetworkArgs{...} }
type GetPrivateLinkAccessNetworkArrayInput interface {
	pulumi.Input

	ToGetPrivateLinkAccessNetworkArrayOutput() GetPrivateLinkAccessNetworkArrayOutput
	ToGetPrivateLinkAccessNetworkArrayOutputWithContext(context.Context) GetPrivateLinkAccessNetworkArrayOutput
}

type GetPrivateLinkAccessNetworkArray []GetPrivateLinkAccessNetworkInput

func (GetPrivateLinkAccessNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivateLinkAccessNetwork)(nil)).Elem()
}

func (i GetPrivateLinkAccessNetworkArray) ToGetPrivateLinkAccessNetworkArrayOutput() GetPrivateLinkAccessNetworkArrayOutput {
	return i.ToGetPrivateLinkAccessNetworkArrayOutputWithContext(context.Background())
}

func (i GetPrivateLinkAccessNetworkArray) ToGetPrivateLinkAccessNetworkArrayOutputWithContext(ctx context.Context) GetPrivateLinkAccessNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateLinkAccessNetworkArrayOutput)
}

func (i GetPrivateLinkAccessNetworkArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPrivateLinkAccessNetwork] {
	return pulumix.Output[[]GetPrivateLinkAccessNetwork]{
		OutputState: i.ToGetPrivateLinkAccessNetworkArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPrivateLinkAccessNetworkOutput struct{ *pulumi.OutputState }

func (GetPrivateLinkAccessNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateLinkAccessNetwork)(nil)).Elem()
}

func (o GetPrivateLinkAccessNetworkOutput) ToGetPrivateLinkAccessNetworkOutput() GetPrivateLinkAccessNetworkOutput {
	return o
}

func (o GetPrivateLinkAccessNetworkOutput) ToGetPrivateLinkAccessNetworkOutputWithContext(ctx context.Context) GetPrivateLinkAccessNetworkOutput {
	return o
}

func (o GetPrivateLinkAccessNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[GetPrivateLinkAccessNetwork] {
	return pulumix.Output[GetPrivateLinkAccessNetwork]{
		OutputState: o.OutputState,
	}
}

// The ID of the Environment that the Private Link Access belongs to, for example, `env-xyz456`.
//
// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
func (o GetPrivateLinkAccessNetworkOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateLinkAccessNetwork) string { return v.Id }).(pulumi.StringOutput)
}

type GetPrivateLinkAccessNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetPrivateLinkAccessNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivateLinkAccessNetwork)(nil)).Elem()
}

func (o GetPrivateLinkAccessNetworkArrayOutput) ToGetPrivateLinkAccessNetworkArrayOutput() GetPrivateLinkAccessNetworkArrayOutput {
	return o
}

func (o GetPrivateLinkAccessNetworkArrayOutput) ToGetPrivateLinkAccessNetworkArrayOutputWithContext(ctx context.Context) GetPrivateLinkAccessNetworkArrayOutput {
	return o
}

func (o GetPrivateLinkAccessNetworkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPrivateLinkAccessNetwork] {
	return pulumix.Output[[]GetPrivateLinkAccessNetwork]{
		OutputState: o.OutputState,
	}
}

func (o GetPrivateLinkAccessNetworkArrayOutput) Index(i pulumi.IntInput) GetPrivateLinkAccessNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPrivateLinkAccessNetwork {
		return vs[0].([]GetPrivateLinkAccessNetwork)[vs[1].(int)]
	}).(GetPrivateLinkAccessNetworkOutput)
}

type GetPrivateLinkAttachmentAw struct {
	// (Required String) AWS VPC Endpoint Service that can be used to establish connections for all zones, for example `com.amazonaws.vpce.us-west-2.vpce-svc-0d3be37e21708ecd3`.
	VpcEndpointServiceName string `pulumi:"vpcEndpointServiceName"`
}

// GetPrivateLinkAttachmentAwInput is an input type that accepts GetPrivateLinkAttachmentAwArgs and GetPrivateLinkAttachmentAwOutput values.
// You can construct a concrete instance of `GetPrivateLinkAttachmentAwInput` via:
//
//	GetPrivateLinkAttachmentAwArgs{...}
type GetPrivateLinkAttachmentAwInput interface {
	pulumi.Input

	ToGetPrivateLinkAttachmentAwOutput() GetPrivateLinkAttachmentAwOutput
	ToGetPrivateLinkAttachmentAwOutputWithContext(context.Context) GetPrivateLinkAttachmentAwOutput
}

type GetPrivateLinkAttachmentAwArgs struct {
	// (Required String) AWS VPC Endpoint Service that can be used to establish connections for all zones, for example `com.amazonaws.vpce.us-west-2.vpce-svc-0d3be37e21708ecd3`.
	VpcEndpointServiceName pulumi.StringInput `pulumi:"vpcEndpointServiceName"`
}

func (GetPrivateLinkAttachmentAwArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateLinkAttachmentAw)(nil)).Elem()
}

func (i GetPrivateLinkAttachmentAwArgs) ToGetPrivateLinkAttachmentAwOutput() GetPrivateLinkAttachmentAwOutput {
	return i.ToGetPrivateLinkAttachmentAwOutputWithContext(context.Background())
}

func (i GetPrivateLinkAttachmentAwArgs) ToGetPrivateLinkAttachmentAwOutputWithContext(ctx context.Context) GetPrivateLinkAttachmentAwOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateLinkAttachmentAwOutput)
}

func (i GetPrivateLinkAttachmentAwArgs) ToOutput(ctx context.Context) pulumix.Output[GetPrivateLinkAttachmentAw] {
	return pulumix.Output[GetPrivateLinkAttachmentAw]{
		OutputState: i.ToGetPrivateLinkAttachmentAwOutputWithContext(ctx).OutputState,
	}
}

// GetPrivateLinkAttachmentAwArrayInput is an input type that accepts GetPrivateLinkAttachmentAwArray and GetPrivateLinkAttachmentAwArrayOutput values.
// You can construct a concrete instance of `GetPrivateLinkAttachmentAwArrayInput` via:
//
//	GetPrivateLinkAttachmentAwArray{ GetPrivateLinkAttachmentAwArgs{...} }
type GetPrivateLinkAttachmentAwArrayInput interface {
	pulumi.Input

	ToGetPrivateLinkAttachmentAwArrayOutput() GetPrivateLinkAttachmentAwArrayOutput
	ToGetPrivateLinkAttachmentAwArrayOutputWithContext(context.Context) GetPrivateLinkAttachmentAwArrayOutput
}

type GetPrivateLinkAttachmentAwArray []GetPrivateLinkAttachmentAwInput

func (GetPrivateLinkAttachmentAwArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivateLinkAttachmentAw)(nil)).Elem()
}

func (i GetPrivateLinkAttachmentAwArray) ToGetPrivateLinkAttachmentAwArrayOutput() GetPrivateLinkAttachmentAwArrayOutput {
	return i.ToGetPrivateLinkAttachmentAwArrayOutputWithContext(context.Background())
}

func (i GetPrivateLinkAttachmentAwArray) ToGetPrivateLinkAttachmentAwArrayOutputWithContext(ctx context.Context) GetPrivateLinkAttachmentAwArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateLinkAttachmentAwArrayOutput)
}

func (i GetPrivateLinkAttachmentAwArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPrivateLinkAttachmentAw] {
	return pulumix.Output[[]GetPrivateLinkAttachmentAw]{
		OutputState: i.ToGetPrivateLinkAttachmentAwArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPrivateLinkAttachmentAwOutput struct{ *pulumi.OutputState }

func (GetPrivateLinkAttachmentAwOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateLinkAttachmentAw)(nil)).Elem()
}

func (o GetPrivateLinkAttachmentAwOutput) ToGetPrivateLinkAttachmentAwOutput() GetPrivateLinkAttachmentAwOutput {
	return o
}

func (o GetPrivateLinkAttachmentAwOutput) ToGetPrivateLinkAttachmentAwOutputWithContext(ctx context.Context) GetPrivateLinkAttachmentAwOutput {
	return o
}

func (o GetPrivateLinkAttachmentAwOutput) ToOutput(ctx context.Context) pulumix.Output[GetPrivateLinkAttachmentAw] {
	return pulumix.Output[GetPrivateLinkAttachmentAw]{
		OutputState: o.OutputState,
	}
}

// (Required String) AWS VPC Endpoint Service that can be used to establish connections for all zones, for example `com.amazonaws.vpce.us-west-2.vpce-svc-0d3be37e21708ecd3`.
func (o GetPrivateLinkAttachmentAwOutput) VpcEndpointServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateLinkAttachmentAw) string { return v.VpcEndpointServiceName }).(pulumi.StringOutput)
}

type GetPrivateLinkAttachmentAwArrayOutput struct{ *pulumi.OutputState }

func (GetPrivateLinkAttachmentAwArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivateLinkAttachmentAw)(nil)).Elem()
}

func (o GetPrivateLinkAttachmentAwArrayOutput) ToGetPrivateLinkAttachmentAwArrayOutput() GetPrivateLinkAttachmentAwArrayOutput {
	return o
}

func (o GetPrivateLinkAttachmentAwArrayOutput) ToGetPrivateLinkAttachmentAwArrayOutputWithContext(ctx context.Context) GetPrivateLinkAttachmentAwArrayOutput {
	return o
}

func (o GetPrivateLinkAttachmentAwArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPrivateLinkAttachmentAw] {
	return pulumix.Output[[]GetPrivateLinkAttachmentAw]{
		OutputState: o.OutputState,
	}
}

func (o GetPrivateLinkAttachmentAwArrayOutput) Index(i pulumi.IntInput) GetPrivateLinkAttachmentAwOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPrivateLinkAttachmentAw {
		return vs[0].([]GetPrivateLinkAttachmentAw)[vs[1].(int)]
	}).(GetPrivateLinkAttachmentAwOutput)
}

type GetPrivateLinkAttachmentAzure struct {
	PrivateLinkServiceAlias      string `pulumi:"privateLinkServiceAlias"`
	PrivateLinkServiceResourceId string `pulumi:"privateLinkServiceResourceId"`
	Zone                         string `pulumi:"zone"`
}

// GetPrivateLinkAttachmentAzureInput is an input type that accepts GetPrivateLinkAttachmentAzureArgs and GetPrivateLinkAttachmentAzureOutput values.
// You can construct a concrete instance of `GetPrivateLinkAttachmentAzureInput` via:
//
//	GetPrivateLinkAttachmentAzureArgs{...}
type GetPrivateLinkAttachmentAzureInput interface {
	pulumi.Input

	ToGetPrivateLinkAttachmentAzureOutput() GetPrivateLinkAttachmentAzureOutput
	ToGetPrivateLinkAttachmentAzureOutputWithContext(context.Context) GetPrivateLinkAttachmentAzureOutput
}

type GetPrivateLinkAttachmentAzureArgs struct {
	PrivateLinkServiceAlias      pulumi.StringInput `pulumi:"privateLinkServiceAlias"`
	PrivateLinkServiceResourceId pulumi.StringInput `pulumi:"privateLinkServiceResourceId"`
	Zone                         pulumi.StringInput `pulumi:"zone"`
}

func (GetPrivateLinkAttachmentAzureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateLinkAttachmentAzure)(nil)).Elem()
}

func (i GetPrivateLinkAttachmentAzureArgs) ToGetPrivateLinkAttachmentAzureOutput() GetPrivateLinkAttachmentAzureOutput {
	return i.ToGetPrivateLinkAttachmentAzureOutputWithContext(context.Background())
}

func (i GetPrivateLinkAttachmentAzureArgs) ToGetPrivateLinkAttachmentAzureOutputWithContext(ctx context.Context) GetPrivateLinkAttachmentAzureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateLinkAttachmentAzureOutput)
}

func (i GetPrivateLinkAttachmentAzureArgs) ToOutput(ctx context.Context) pulumix.Output[GetPrivateLinkAttachmentAzure] {
	return pulumix.Output[GetPrivateLinkAttachmentAzure]{
		OutputState: i.ToGetPrivateLinkAttachmentAzureOutputWithContext(ctx).OutputState,
	}
}

// GetPrivateLinkAttachmentAzureArrayInput is an input type that accepts GetPrivateLinkAttachmentAzureArray and GetPrivateLinkAttachmentAzureArrayOutput values.
// You can construct a concrete instance of `GetPrivateLinkAttachmentAzureArrayInput` via:
//
//	GetPrivateLinkAttachmentAzureArray{ GetPrivateLinkAttachmentAzureArgs{...} }
type GetPrivateLinkAttachmentAzureArrayInput interface {
	pulumi.Input

	ToGetPrivateLinkAttachmentAzureArrayOutput() GetPrivateLinkAttachmentAzureArrayOutput
	ToGetPrivateLinkAttachmentAzureArrayOutputWithContext(context.Context) GetPrivateLinkAttachmentAzureArrayOutput
}

type GetPrivateLinkAttachmentAzureArray []GetPrivateLinkAttachmentAzureInput

func (GetPrivateLinkAttachmentAzureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivateLinkAttachmentAzure)(nil)).Elem()
}

func (i GetPrivateLinkAttachmentAzureArray) ToGetPrivateLinkAttachmentAzureArrayOutput() GetPrivateLinkAttachmentAzureArrayOutput {
	return i.ToGetPrivateLinkAttachmentAzureArrayOutputWithContext(context.Background())
}

func (i GetPrivateLinkAttachmentAzureArray) ToGetPrivateLinkAttachmentAzureArrayOutputWithContext(ctx context.Context) GetPrivateLinkAttachmentAzureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateLinkAttachmentAzureArrayOutput)
}

func (i GetPrivateLinkAttachmentAzureArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPrivateLinkAttachmentAzure] {
	return pulumix.Output[[]GetPrivateLinkAttachmentAzure]{
		OutputState: i.ToGetPrivateLinkAttachmentAzureArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPrivateLinkAttachmentAzureOutput struct{ *pulumi.OutputState }

func (GetPrivateLinkAttachmentAzureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateLinkAttachmentAzure)(nil)).Elem()
}

func (o GetPrivateLinkAttachmentAzureOutput) ToGetPrivateLinkAttachmentAzureOutput() GetPrivateLinkAttachmentAzureOutput {
	return o
}

func (o GetPrivateLinkAttachmentAzureOutput) ToGetPrivateLinkAttachmentAzureOutputWithContext(ctx context.Context) GetPrivateLinkAttachmentAzureOutput {
	return o
}

func (o GetPrivateLinkAttachmentAzureOutput) ToOutput(ctx context.Context) pulumix.Output[GetPrivateLinkAttachmentAzure] {
	return pulumix.Output[GetPrivateLinkAttachmentAzure]{
		OutputState: o.OutputState,
	}
}

func (o GetPrivateLinkAttachmentAzureOutput) PrivateLinkServiceAlias() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateLinkAttachmentAzure) string { return v.PrivateLinkServiceAlias }).(pulumi.StringOutput)
}

func (o GetPrivateLinkAttachmentAzureOutput) PrivateLinkServiceResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateLinkAttachmentAzure) string { return v.PrivateLinkServiceResourceId }).(pulumi.StringOutput)
}

func (o GetPrivateLinkAttachmentAzureOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateLinkAttachmentAzure) string { return v.Zone }).(pulumi.StringOutput)
}

type GetPrivateLinkAttachmentAzureArrayOutput struct{ *pulumi.OutputState }

func (GetPrivateLinkAttachmentAzureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivateLinkAttachmentAzure)(nil)).Elem()
}

func (o GetPrivateLinkAttachmentAzureArrayOutput) ToGetPrivateLinkAttachmentAzureArrayOutput() GetPrivateLinkAttachmentAzureArrayOutput {
	return o
}

func (o GetPrivateLinkAttachmentAzureArrayOutput) ToGetPrivateLinkAttachmentAzureArrayOutputWithContext(ctx context.Context) GetPrivateLinkAttachmentAzureArrayOutput {
	return o
}

func (o GetPrivateLinkAttachmentAzureArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPrivateLinkAttachmentAzure] {
	return pulumix.Output[[]GetPrivateLinkAttachmentAzure]{
		OutputState: o.OutputState,
	}
}

func (o GetPrivateLinkAttachmentAzureArrayOutput) Index(i pulumi.IntInput) GetPrivateLinkAttachmentAzureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPrivateLinkAttachmentAzure {
		return vs[0].([]GetPrivateLinkAttachmentAzure)[vs[1].(int)]
	}).(GetPrivateLinkAttachmentAzureOutput)
}

type GetPrivateLinkAttachmentConnectionAw struct {
	// (Required String) Id of a VPC Endpoint that is connected to the VPC Endpoint service.
	VpcEndpointId string `pulumi:"vpcEndpointId"`
}

// GetPrivateLinkAttachmentConnectionAwInput is an input type that accepts GetPrivateLinkAttachmentConnectionAwArgs and GetPrivateLinkAttachmentConnectionAwOutput values.
// You can construct a concrete instance of `GetPrivateLinkAttachmentConnectionAwInput` via:
//
//	GetPrivateLinkAttachmentConnectionAwArgs{...}
type GetPrivateLinkAttachmentConnectionAwInput interface {
	pulumi.Input

	ToGetPrivateLinkAttachmentConnectionAwOutput() GetPrivateLinkAttachmentConnectionAwOutput
	ToGetPrivateLinkAttachmentConnectionAwOutputWithContext(context.Context) GetPrivateLinkAttachmentConnectionAwOutput
}

type GetPrivateLinkAttachmentConnectionAwArgs struct {
	// (Required String) Id of a VPC Endpoint that is connected to the VPC Endpoint service.
	VpcEndpointId pulumi.StringInput `pulumi:"vpcEndpointId"`
}

func (GetPrivateLinkAttachmentConnectionAwArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateLinkAttachmentConnectionAw)(nil)).Elem()
}

func (i GetPrivateLinkAttachmentConnectionAwArgs) ToGetPrivateLinkAttachmentConnectionAwOutput() GetPrivateLinkAttachmentConnectionAwOutput {
	return i.ToGetPrivateLinkAttachmentConnectionAwOutputWithContext(context.Background())
}

func (i GetPrivateLinkAttachmentConnectionAwArgs) ToGetPrivateLinkAttachmentConnectionAwOutputWithContext(ctx context.Context) GetPrivateLinkAttachmentConnectionAwOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateLinkAttachmentConnectionAwOutput)
}

func (i GetPrivateLinkAttachmentConnectionAwArgs) ToOutput(ctx context.Context) pulumix.Output[GetPrivateLinkAttachmentConnectionAw] {
	return pulumix.Output[GetPrivateLinkAttachmentConnectionAw]{
		OutputState: i.ToGetPrivateLinkAttachmentConnectionAwOutputWithContext(ctx).OutputState,
	}
}

// GetPrivateLinkAttachmentConnectionAwArrayInput is an input type that accepts GetPrivateLinkAttachmentConnectionAwArray and GetPrivateLinkAttachmentConnectionAwArrayOutput values.
// You can construct a concrete instance of `GetPrivateLinkAttachmentConnectionAwArrayInput` via:
//
//	GetPrivateLinkAttachmentConnectionAwArray{ GetPrivateLinkAttachmentConnectionAwArgs{...} }
type GetPrivateLinkAttachmentConnectionAwArrayInput interface {
	pulumi.Input

	ToGetPrivateLinkAttachmentConnectionAwArrayOutput() GetPrivateLinkAttachmentConnectionAwArrayOutput
	ToGetPrivateLinkAttachmentConnectionAwArrayOutputWithContext(context.Context) GetPrivateLinkAttachmentConnectionAwArrayOutput
}

type GetPrivateLinkAttachmentConnectionAwArray []GetPrivateLinkAttachmentConnectionAwInput

func (GetPrivateLinkAttachmentConnectionAwArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivateLinkAttachmentConnectionAw)(nil)).Elem()
}

func (i GetPrivateLinkAttachmentConnectionAwArray) ToGetPrivateLinkAttachmentConnectionAwArrayOutput() GetPrivateLinkAttachmentConnectionAwArrayOutput {
	return i.ToGetPrivateLinkAttachmentConnectionAwArrayOutputWithContext(context.Background())
}

func (i GetPrivateLinkAttachmentConnectionAwArray) ToGetPrivateLinkAttachmentConnectionAwArrayOutputWithContext(ctx context.Context) GetPrivateLinkAttachmentConnectionAwArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateLinkAttachmentConnectionAwArrayOutput)
}

func (i GetPrivateLinkAttachmentConnectionAwArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPrivateLinkAttachmentConnectionAw] {
	return pulumix.Output[[]GetPrivateLinkAttachmentConnectionAw]{
		OutputState: i.ToGetPrivateLinkAttachmentConnectionAwArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPrivateLinkAttachmentConnectionAwOutput struct{ *pulumi.OutputState }

func (GetPrivateLinkAttachmentConnectionAwOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateLinkAttachmentConnectionAw)(nil)).Elem()
}

func (o GetPrivateLinkAttachmentConnectionAwOutput) ToGetPrivateLinkAttachmentConnectionAwOutput() GetPrivateLinkAttachmentConnectionAwOutput {
	return o
}

func (o GetPrivateLinkAttachmentConnectionAwOutput) ToGetPrivateLinkAttachmentConnectionAwOutputWithContext(ctx context.Context) GetPrivateLinkAttachmentConnectionAwOutput {
	return o
}

func (o GetPrivateLinkAttachmentConnectionAwOutput) ToOutput(ctx context.Context) pulumix.Output[GetPrivateLinkAttachmentConnectionAw] {
	return pulumix.Output[GetPrivateLinkAttachmentConnectionAw]{
		OutputState: o.OutputState,
	}
}

// (Required String) Id of a VPC Endpoint that is connected to the VPC Endpoint service.
func (o GetPrivateLinkAttachmentConnectionAwOutput) VpcEndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateLinkAttachmentConnectionAw) string { return v.VpcEndpointId }).(pulumi.StringOutput)
}

type GetPrivateLinkAttachmentConnectionAwArrayOutput struct{ *pulumi.OutputState }

func (GetPrivateLinkAttachmentConnectionAwArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivateLinkAttachmentConnectionAw)(nil)).Elem()
}

func (o GetPrivateLinkAttachmentConnectionAwArrayOutput) ToGetPrivateLinkAttachmentConnectionAwArrayOutput() GetPrivateLinkAttachmentConnectionAwArrayOutput {
	return o
}

func (o GetPrivateLinkAttachmentConnectionAwArrayOutput) ToGetPrivateLinkAttachmentConnectionAwArrayOutputWithContext(ctx context.Context) GetPrivateLinkAttachmentConnectionAwArrayOutput {
	return o
}

func (o GetPrivateLinkAttachmentConnectionAwArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPrivateLinkAttachmentConnectionAw] {
	return pulumix.Output[[]GetPrivateLinkAttachmentConnectionAw]{
		OutputState: o.OutputState,
	}
}

func (o GetPrivateLinkAttachmentConnectionAwArrayOutput) Index(i pulumi.IntInput) GetPrivateLinkAttachmentConnectionAwOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPrivateLinkAttachmentConnectionAw {
		return vs[0].([]GetPrivateLinkAttachmentConnectionAw)[vs[1].(int)]
	}).(GetPrivateLinkAttachmentConnectionAwOutput)
}

type GetPrivateLinkAttachmentConnectionAzure struct {
	PrivateEndpointResourceId string `pulumi:"privateEndpointResourceId"`
}

// GetPrivateLinkAttachmentConnectionAzureInput is an input type that accepts GetPrivateLinkAttachmentConnectionAzureArgs and GetPrivateLinkAttachmentConnectionAzureOutput values.
// You can construct a concrete instance of `GetPrivateLinkAttachmentConnectionAzureInput` via:
//
//	GetPrivateLinkAttachmentConnectionAzureArgs{...}
type GetPrivateLinkAttachmentConnectionAzureInput interface {
	pulumi.Input

	ToGetPrivateLinkAttachmentConnectionAzureOutput() GetPrivateLinkAttachmentConnectionAzureOutput
	ToGetPrivateLinkAttachmentConnectionAzureOutputWithContext(context.Context) GetPrivateLinkAttachmentConnectionAzureOutput
}

type GetPrivateLinkAttachmentConnectionAzureArgs struct {
	PrivateEndpointResourceId pulumi.StringInput `pulumi:"privateEndpointResourceId"`
}

func (GetPrivateLinkAttachmentConnectionAzureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateLinkAttachmentConnectionAzure)(nil)).Elem()
}

func (i GetPrivateLinkAttachmentConnectionAzureArgs) ToGetPrivateLinkAttachmentConnectionAzureOutput() GetPrivateLinkAttachmentConnectionAzureOutput {
	return i.ToGetPrivateLinkAttachmentConnectionAzureOutputWithContext(context.Background())
}

func (i GetPrivateLinkAttachmentConnectionAzureArgs) ToGetPrivateLinkAttachmentConnectionAzureOutputWithContext(ctx context.Context) GetPrivateLinkAttachmentConnectionAzureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateLinkAttachmentConnectionAzureOutput)
}

func (i GetPrivateLinkAttachmentConnectionAzureArgs) ToOutput(ctx context.Context) pulumix.Output[GetPrivateLinkAttachmentConnectionAzure] {
	return pulumix.Output[GetPrivateLinkAttachmentConnectionAzure]{
		OutputState: i.ToGetPrivateLinkAttachmentConnectionAzureOutputWithContext(ctx).OutputState,
	}
}

// GetPrivateLinkAttachmentConnectionAzureArrayInput is an input type that accepts GetPrivateLinkAttachmentConnectionAzureArray and GetPrivateLinkAttachmentConnectionAzureArrayOutput values.
// You can construct a concrete instance of `GetPrivateLinkAttachmentConnectionAzureArrayInput` via:
//
//	GetPrivateLinkAttachmentConnectionAzureArray{ GetPrivateLinkAttachmentConnectionAzureArgs{...} }
type GetPrivateLinkAttachmentConnectionAzureArrayInput interface {
	pulumi.Input

	ToGetPrivateLinkAttachmentConnectionAzureArrayOutput() GetPrivateLinkAttachmentConnectionAzureArrayOutput
	ToGetPrivateLinkAttachmentConnectionAzureArrayOutputWithContext(context.Context) GetPrivateLinkAttachmentConnectionAzureArrayOutput
}

type GetPrivateLinkAttachmentConnectionAzureArray []GetPrivateLinkAttachmentConnectionAzureInput

func (GetPrivateLinkAttachmentConnectionAzureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivateLinkAttachmentConnectionAzure)(nil)).Elem()
}

func (i GetPrivateLinkAttachmentConnectionAzureArray) ToGetPrivateLinkAttachmentConnectionAzureArrayOutput() GetPrivateLinkAttachmentConnectionAzureArrayOutput {
	return i.ToGetPrivateLinkAttachmentConnectionAzureArrayOutputWithContext(context.Background())
}

func (i GetPrivateLinkAttachmentConnectionAzureArray) ToGetPrivateLinkAttachmentConnectionAzureArrayOutputWithContext(ctx context.Context) GetPrivateLinkAttachmentConnectionAzureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateLinkAttachmentConnectionAzureArrayOutput)
}

func (i GetPrivateLinkAttachmentConnectionAzureArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPrivateLinkAttachmentConnectionAzure] {
	return pulumix.Output[[]GetPrivateLinkAttachmentConnectionAzure]{
		OutputState: i.ToGetPrivateLinkAttachmentConnectionAzureArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPrivateLinkAttachmentConnectionAzureOutput struct{ *pulumi.OutputState }

func (GetPrivateLinkAttachmentConnectionAzureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateLinkAttachmentConnectionAzure)(nil)).Elem()
}

func (o GetPrivateLinkAttachmentConnectionAzureOutput) ToGetPrivateLinkAttachmentConnectionAzureOutput() GetPrivateLinkAttachmentConnectionAzureOutput {
	return o
}

func (o GetPrivateLinkAttachmentConnectionAzureOutput) ToGetPrivateLinkAttachmentConnectionAzureOutputWithContext(ctx context.Context) GetPrivateLinkAttachmentConnectionAzureOutput {
	return o
}

func (o GetPrivateLinkAttachmentConnectionAzureOutput) ToOutput(ctx context.Context) pulumix.Output[GetPrivateLinkAttachmentConnectionAzure] {
	return pulumix.Output[GetPrivateLinkAttachmentConnectionAzure]{
		OutputState: o.OutputState,
	}
}

func (o GetPrivateLinkAttachmentConnectionAzureOutput) PrivateEndpointResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateLinkAttachmentConnectionAzure) string { return v.PrivateEndpointResourceId }).(pulumi.StringOutput)
}

type GetPrivateLinkAttachmentConnectionAzureArrayOutput struct{ *pulumi.OutputState }

func (GetPrivateLinkAttachmentConnectionAzureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivateLinkAttachmentConnectionAzure)(nil)).Elem()
}

func (o GetPrivateLinkAttachmentConnectionAzureArrayOutput) ToGetPrivateLinkAttachmentConnectionAzureArrayOutput() GetPrivateLinkAttachmentConnectionAzureArrayOutput {
	return o
}

func (o GetPrivateLinkAttachmentConnectionAzureArrayOutput) ToGetPrivateLinkAttachmentConnectionAzureArrayOutputWithContext(ctx context.Context) GetPrivateLinkAttachmentConnectionAzureArrayOutput {
	return o
}

func (o GetPrivateLinkAttachmentConnectionAzureArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPrivateLinkAttachmentConnectionAzure] {
	return pulumix.Output[[]GetPrivateLinkAttachmentConnectionAzure]{
		OutputState: o.OutputState,
	}
}

func (o GetPrivateLinkAttachmentConnectionAzureArrayOutput) Index(i pulumi.IntInput) GetPrivateLinkAttachmentConnectionAzureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPrivateLinkAttachmentConnectionAzure {
		return vs[0].([]GetPrivateLinkAttachmentConnectionAzure)[vs[1].(int)]
	}).(GetPrivateLinkAttachmentConnectionAzureOutput)
}

type GetPrivateLinkAttachmentConnectionEnvironment struct {
	// The ID of the Environment that the Private Link Attachment Connection belongs to, for example `env-xyz456`.
	Id string `pulumi:"id"`
}

// GetPrivateLinkAttachmentConnectionEnvironmentInput is an input type that accepts GetPrivateLinkAttachmentConnectionEnvironmentArgs and GetPrivateLinkAttachmentConnectionEnvironmentOutput values.
// You can construct a concrete instance of `GetPrivateLinkAttachmentConnectionEnvironmentInput` via:
//
//	GetPrivateLinkAttachmentConnectionEnvironmentArgs{...}
type GetPrivateLinkAttachmentConnectionEnvironmentInput interface {
	pulumi.Input

	ToGetPrivateLinkAttachmentConnectionEnvironmentOutput() GetPrivateLinkAttachmentConnectionEnvironmentOutput
	ToGetPrivateLinkAttachmentConnectionEnvironmentOutputWithContext(context.Context) GetPrivateLinkAttachmentConnectionEnvironmentOutput
}

type GetPrivateLinkAttachmentConnectionEnvironmentArgs struct {
	// The ID of the Environment that the Private Link Attachment Connection belongs to, for example `env-xyz456`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetPrivateLinkAttachmentConnectionEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateLinkAttachmentConnectionEnvironment)(nil)).Elem()
}

func (i GetPrivateLinkAttachmentConnectionEnvironmentArgs) ToGetPrivateLinkAttachmentConnectionEnvironmentOutput() GetPrivateLinkAttachmentConnectionEnvironmentOutput {
	return i.ToGetPrivateLinkAttachmentConnectionEnvironmentOutputWithContext(context.Background())
}

func (i GetPrivateLinkAttachmentConnectionEnvironmentArgs) ToGetPrivateLinkAttachmentConnectionEnvironmentOutputWithContext(ctx context.Context) GetPrivateLinkAttachmentConnectionEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateLinkAttachmentConnectionEnvironmentOutput)
}

func (i GetPrivateLinkAttachmentConnectionEnvironmentArgs) ToOutput(ctx context.Context) pulumix.Output[GetPrivateLinkAttachmentConnectionEnvironment] {
	return pulumix.Output[GetPrivateLinkAttachmentConnectionEnvironment]{
		OutputState: i.ToGetPrivateLinkAttachmentConnectionEnvironmentOutputWithContext(ctx).OutputState,
	}
}

type GetPrivateLinkAttachmentConnectionEnvironmentOutput struct{ *pulumi.OutputState }

func (GetPrivateLinkAttachmentConnectionEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateLinkAttachmentConnectionEnvironment)(nil)).Elem()
}

func (o GetPrivateLinkAttachmentConnectionEnvironmentOutput) ToGetPrivateLinkAttachmentConnectionEnvironmentOutput() GetPrivateLinkAttachmentConnectionEnvironmentOutput {
	return o
}

func (o GetPrivateLinkAttachmentConnectionEnvironmentOutput) ToGetPrivateLinkAttachmentConnectionEnvironmentOutputWithContext(ctx context.Context) GetPrivateLinkAttachmentConnectionEnvironmentOutput {
	return o
}

func (o GetPrivateLinkAttachmentConnectionEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[GetPrivateLinkAttachmentConnectionEnvironment] {
	return pulumix.Output[GetPrivateLinkAttachmentConnectionEnvironment]{
		OutputState: o.OutputState,
	}
}

// The ID of the Environment that the Private Link Attachment Connection belongs to, for example `env-xyz456`.
func (o GetPrivateLinkAttachmentConnectionEnvironmentOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateLinkAttachmentConnectionEnvironment) string { return v.Id }).(pulumi.StringOutput)
}

type GetPrivateLinkAttachmentConnectionGcp struct {
	PrivateServiceConnectConnectionId string `pulumi:"privateServiceConnectConnectionId"`
}

// GetPrivateLinkAttachmentConnectionGcpInput is an input type that accepts GetPrivateLinkAttachmentConnectionGcpArgs and GetPrivateLinkAttachmentConnectionGcpOutput values.
// You can construct a concrete instance of `GetPrivateLinkAttachmentConnectionGcpInput` via:
//
//	GetPrivateLinkAttachmentConnectionGcpArgs{...}
type GetPrivateLinkAttachmentConnectionGcpInput interface {
	pulumi.Input

	ToGetPrivateLinkAttachmentConnectionGcpOutput() GetPrivateLinkAttachmentConnectionGcpOutput
	ToGetPrivateLinkAttachmentConnectionGcpOutputWithContext(context.Context) GetPrivateLinkAttachmentConnectionGcpOutput
}

type GetPrivateLinkAttachmentConnectionGcpArgs struct {
	PrivateServiceConnectConnectionId pulumi.StringInput `pulumi:"privateServiceConnectConnectionId"`
}

func (GetPrivateLinkAttachmentConnectionGcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateLinkAttachmentConnectionGcp)(nil)).Elem()
}

func (i GetPrivateLinkAttachmentConnectionGcpArgs) ToGetPrivateLinkAttachmentConnectionGcpOutput() GetPrivateLinkAttachmentConnectionGcpOutput {
	return i.ToGetPrivateLinkAttachmentConnectionGcpOutputWithContext(context.Background())
}

func (i GetPrivateLinkAttachmentConnectionGcpArgs) ToGetPrivateLinkAttachmentConnectionGcpOutputWithContext(ctx context.Context) GetPrivateLinkAttachmentConnectionGcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateLinkAttachmentConnectionGcpOutput)
}

func (i GetPrivateLinkAttachmentConnectionGcpArgs) ToOutput(ctx context.Context) pulumix.Output[GetPrivateLinkAttachmentConnectionGcp] {
	return pulumix.Output[GetPrivateLinkAttachmentConnectionGcp]{
		OutputState: i.ToGetPrivateLinkAttachmentConnectionGcpOutputWithContext(ctx).OutputState,
	}
}

// GetPrivateLinkAttachmentConnectionGcpArrayInput is an input type that accepts GetPrivateLinkAttachmentConnectionGcpArray and GetPrivateLinkAttachmentConnectionGcpArrayOutput values.
// You can construct a concrete instance of `GetPrivateLinkAttachmentConnectionGcpArrayInput` via:
//
//	GetPrivateLinkAttachmentConnectionGcpArray{ GetPrivateLinkAttachmentConnectionGcpArgs{...} }
type GetPrivateLinkAttachmentConnectionGcpArrayInput interface {
	pulumi.Input

	ToGetPrivateLinkAttachmentConnectionGcpArrayOutput() GetPrivateLinkAttachmentConnectionGcpArrayOutput
	ToGetPrivateLinkAttachmentConnectionGcpArrayOutputWithContext(context.Context) GetPrivateLinkAttachmentConnectionGcpArrayOutput
}

type GetPrivateLinkAttachmentConnectionGcpArray []GetPrivateLinkAttachmentConnectionGcpInput

func (GetPrivateLinkAttachmentConnectionGcpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivateLinkAttachmentConnectionGcp)(nil)).Elem()
}

func (i GetPrivateLinkAttachmentConnectionGcpArray) ToGetPrivateLinkAttachmentConnectionGcpArrayOutput() GetPrivateLinkAttachmentConnectionGcpArrayOutput {
	return i.ToGetPrivateLinkAttachmentConnectionGcpArrayOutputWithContext(context.Background())
}

func (i GetPrivateLinkAttachmentConnectionGcpArray) ToGetPrivateLinkAttachmentConnectionGcpArrayOutputWithContext(ctx context.Context) GetPrivateLinkAttachmentConnectionGcpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateLinkAttachmentConnectionGcpArrayOutput)
}

func (i GetPrivateLinkAttachmentConnectionGcpArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPrivateLinkAttachmentConnectionGcp] {
	return pulumix.Output[[]GetPrivateLinkAttachmentConnectionGcp]{
		OutputState: i.ToGetPrivateLinkAttachmentConnectionGcpArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPrivateLinkAttachmentConnectionGcpOutput struct{ *pulumi.OutputState }

func (GetPrivateLinkAttachmentConnectionGcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateLinkAttachmentConnectionGcp)(nil)).Elem()
}

func (o GetPrivateLinkAttachmentConnectionGcpOutput) ToGetPrivateLinkAttachmentConnectionGcpOutput() GetPrivateLinkAttachmentConnectionGcpOutput {
	return o
}

func (o GetPrivateLinkAttachmentConnectionGcpOutput) ToGetPrivateLinkAttachmentConnectionGcpOutputWithContext(ctx context.Context) GetPrivateLinkAttachmentConnectionGcpOutput {
	return o
}

func (o GetPrivateLinkAttachmentConnectionGcpOutput) ToOutput(ctx context.Context) pulumix.Output[GetPrivateLinkAttachmentConnectionGcp] {
	return pulumix.Output[GetPrivateLinkAttachmentConnectionGcp]{
		OutputState: o.OutputState,
	}
}

func (o GetPrivateLinkAttachmentConnectionGcpOutput) PrivateServiceConnectConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateLinkAttachmentConnectionGcp) string { return v.PrivateServiceConnectConnectionId }).(pulumi.StringOutput)
}

type GetPrivateLinkAttachmentConnectionGcpArrayOutput struct{ *pulumi.OutputState }

func (GetPrivateLinkAttachmentConnectionGcpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivateLinkAttachmentConnectionGcp)(nil)).Elem()
}

func (o GetPrivateLinkAttachmentConnectionGcpArrayOutput) ToGetPrivateLinkAttachmentConnectionGcpArrayOutput() GetPrivateLinkAttachmentConnectionGcpArrayOutput {
	return o
}

func (o GetPrivateLinkAttachmentConnectionGcpArrayOutput) ToGetPrivateLinkAttachmentConnectionGcpArrayOutputWithContext(ctx context.Context) GetPrivateLinkAttachmentConnectionGcpArrayOutput {
	return o
}

func (o GetPrivateLinkAttachmentConnectionGcpArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPrivateLinkAttachmentConnectionGcp] {
	return pulumix.Output[[]GetPrivateLinkAttachmentConnectionGcp]{
		OutputState: o.OutputState,
	}
}

func (o GetPrivateLinkAttachmentConnectionGcpArrayOutput) Index(i pulumi.IntInput) GetPrivateLinkAttachmentConnectionGcpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPrivateLinkAttachmentConnectionGcp {
		return vs[0].([]GetPrivateLinkAttachmentConnectionGcp)[vs[1].(int)]
	}).(GetPrivateLinkAttachmentConnectionGcpOutput)
}

type GetPrivateLinkAttachmentConnectionPrivateLinkAttachment struct {
	// The ID of the Environment that the Private Link Attachment Connection belongs to, for example `env-xyz456`.
	Id string `pulumi:"id"`
}

// GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentInput is an input type that accepts GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArgs and GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput values.
// You can construct a concrete instance of `GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentInput` via:
//
//	GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArgs{...}
type GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentInput interface {
	pulumi.Input

	ToGetPrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput() GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput
	ToGetPrivateLinkAttachmentConnectionPrivateLinkAttachmentOutputWithContext(context.Context) GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput
}

type GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArgs struct {
	// The ID of the Environment that the Private Link Attachment Connection belongs to, for example `env-xyz456`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateLinkAttachmentConnectionPrivateLinkAttachment)(nil)).Elem()
}

func (i GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArgs) ToGetPrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput() GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput {
	return i.ToGetPrivateLinkAttachmentConnectionPrivateLinkAttachmentOutputWithContext(context.Background())
}

func (i GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArgs) ToGetPrivateLinkAttachmentConnectionPrivateLinkAttachmentOutputWithContext(ctx context.Context) GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput)
}

func (i GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArgs) ToOutput(ctx context.Context) pulumix.Output[GetPrivateLinkAttachmentConnectionPrivateLinkAttachment] {
	return pulumix.Output[GetPrivateLinkAttachmentConnectionPrivateLinkAttachment]{
		OutputState: i.ToGetPrivateLinkAttachmentConnectionPrivateLinkAttachmentOutputWithContext(ctx).OutputState,
	}
}

// GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArrayInput is an input type that accepts GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArray and GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArrayOutput values.
// You can construct a concrete instance of `GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArrayInput` via:
//
//	GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArray{ GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArgs{...} }
type GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArrayInput interface {
	pulumi.Input

	ToGetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArrayOutput() GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArrayOutput
	ToGetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArrayOutputWithContext(context.Context) GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArrayOutput
}

type GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArray []GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentInput

func (GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivateLinkAttachmentConnectionPrivateLinkAttachment)(nil)).Elem()
}

func (i GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArray) ToGetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArrayOutput() GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArrayOutput {
	return i.ToGetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArrayOutputWithContext(context.Background())
}

func (i GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArray) ToGetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArrayOutputWithContext(ctx context.Context) GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArrayOutput)
}

func (i GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPrivateLinkAttachmentConnectionPrivateLinkAttachment] {
	return pulumix.Output[[]GetPrivateLinkAttachmentConnectionPrivateLinkAttachment]{
		OutputState: i.ToGetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput struct{ *pulumi.OutputState }

func (GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateLinkAttachmentConnectionPrivateLinkAttachment)(nil)).Elem()
}

func (o GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput) ToGetPrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput() GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput {
	return o
}

func (o GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput) ToGetPrivateLinkAttachmentConnectionPrivateLinkAttachmentOutputWithContext(ctx context.Context) GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput {
	return o
}

func (o GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput) ToOutput(ctx context.Context) pulumix.Output[GetPrivateLinkAttachmentConnectionPrivateLinkAttachment] {
	return pulumix.Output[GetPrivateLinkAttachmentConnectionPrivateLinkAttachment]{
		OutputState: o.OutputState,
	}
}

// The ID of the Environment that the Private Link Attachment Connection belongs to, for example `env-xyz456`.
func (o GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateLinkAttachmentConnectionPrivateLinkAttachment) string { return v.Id }).(pulumi.StringOutput)
}

type GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArrayOutput struct{ *pulumi.OutputState }

func (GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivateLinkAttachmentConnectionPrivateLinkAttachment)(nil)).Elem()
}

func (o GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArrayOutput) ToGetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArrayOutput() GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArrayOutput {
	return o
}

func (o GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArrayOutput) ToGetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArrayOutputWithContext(ctx context.Context) GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArrayOutput {
	return o
}

func (o GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPrivateLinkAttachmentConnectionPrivateLinkAttachment] {
	return pulumix.Output[[]GetPrivateLinkAttachmentConnectionPrivateLinkAttachment]{
		OutputState: o.OutputState,
	}
}

func (o GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArrayOutput) Index(i pulumi.IntInput) GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPrivateLinkAttachmentConnectionPrivateLinkAttachment {
		return vs[0].([]GetPrivateLinkAttachmentConnectionPrivateLinkAttachment)[vs[1].(int)]
	}).(GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput)
}

type GetPrivateLinkAttachmentEnvironment struct {
	// The ID of the Environment that the Private Link Attachment belongs to, for example `env-xyz456`.
	Id string `pulumi:"id"`
}

// GetPrivateLinkAttachmentEnvironmentInput is an input type that accepts GetPrivateLinkAttachmentEnvironmentArgs and GetPrivateLinkAttachmentEnvironmentOutput values.
// You can construct a concrete instance of `GetPrivateLinkAttachmentEnvironmentInput` via:
//
//	GetPrivateLinkAttachmentEnvironmentArgs{...}
type GetPrivateLinkAttachmentEnvironmentInput interface {
	pulumi.Input

	ToGetPrivateLinkAttachmentEnvironmentOutput() GetPrivateLinkAttachmentEnvironmentOutput
	ToGetPrivateLinkAttachmentEnvironmentOutputWithContext(context.Context) GetPrivateLinkAttachmentEnvironmentOutput
}

type GetPrivateLinkAttachmentEnvironmentArgs struct {
	// The ID of the Environment that the Private Link Attachment belongs to, for example `env-xyz456`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetPrivateLinkAttachmentEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateLinkAttachmentEnvironment)(nil)).Elem()
}

func (i GetPrivateLinkAttachmentEnvironmentArgs) ToGetPrivateLinkAttachmentEnvironmentOutput() GetPrivateLinkAttachmentEnvironmentOutput {
	return i.ToGetPrivateLinkAttachmentEnvironmentOutputWithContext(context.Background())
}

func (i GetPrivateLinkAttachmentEnvironmentArgs) ToGetPrivateLinkAttachmentEnvironmentOutputWithContext(ctx context.Context) GetPrivateLinkAttachmentEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateLinkAttachmentEnvironmentOutput)
}

func (i GetPrivateLinkAttachmentEnvironmentArgs) ToOutput(ctx context.Context) pulumix.Output[GetPrivateLinkAttachmentEnvironment] {
	return pulumix.Output[GetPrivateLinkAttachmentEnvironment]{
		OutputState: i.ToGetPrivateLinkAttachmentEnvironmentOutputWithContext(ctx).OutputState,
	}
}

type GetPrivateLinkAttachmentEnvironmentOutput struct{ *pulumi.OutputState }

func (GetPrivateLinkAttachmentEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateLinkAttachmentEnvironment)(nil)).Elem()
}

func (o GetPrivateLinkAttachmentEnvironmentOutput) ToGetPrivateLinkAttachmentEnvironmentOutput() GetPrivateLinkAttachmentEnvironmentOutput {
	return o
}

func (o GetPrivateLinkAttachmentEnvironmentOutput) ToGetPrivateLinkAttachmentEnvironmentOutputWithContext(ctx context.Context) GetPrivateLinkAttachmentEnvironmentOutput {
	return o
}

func (o GetPrivateLinkAttachmentEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[GetPrivateLinkAttachmentEnvironment] {
	return pulumix.Output[GetPrivateLinkAttachmentEnvironment]{
		OutputState: o.OutputState,
	}
}

// The ID of the Environment that the Private Link Attachment belongs to, for example `env-xyz456`.
func (o GetPrivateLinkAttachmentEnvironmentOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateLinkAttachmentEnvironment) string { return v.Id }).(pulumi.StringOutput)
}

type GetPrivateLinkAttachmentGcp struct {
	PrivateServiceConnectServiceAttachment string `pulumi:"privateServiceConnectServiceAttachment"`
	Zone                                   string `pulumi:"zone"`
}

// GetPrivateLinkAttachmentGcpInput is an input type that accepts GetPrivateLinkAttachmentGcpArgs and GetPrivateLinkAttachmentGcpOutput values.
// You can construct a concrete instance of `GetPrivateLinkAttachmentGcpInput` via:
//
//	GetPrivateLinkAttachmentGcpArgs{...}
type GetPrivateLinkAttachmentGcpInput interface {
	pulumi.Input

	ToGetPrivateLinkAttachmentGcpOutput() GetPrivateLinkAttachmentGcpOutput
	ToGetPrivateLinkAttachmentGcpOutputWithContext(context.Context) GetPrivateLinkAttachmentGcpOutput
}

type GetPrivateLinkAttachmentGcpArgs struct {
	PrivateServiceConnectServiceAttachment pulumi.StringInput `pulumi:"privateServiceConnectServiceAttachment"`
	Zone                                   pulumi.StringInput `pulumi:"zone"`
}

func (GetPrivateLinkAttachmentGcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateLinkAttachmentGcp)(nil)).Elem()
}

func (i GetPrivateLinkAttachmentGcpArgs) ToGetPrivateLinkAttachmentGcpOutput() GetPrivateLinkAttachmentGcpOutput {
	return i.ToGetPrivateLinkAttachmentGcpOutputWithContext(context.Background())
}

func (i GetPrivateLinkAttachmentGcpArgs) ToGetPrivateLinkAttachmentGcpOutputWithContext(ctx context.Context) GetPrivateLinkAttachmentGcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateLinkAttachmentGcpOutput)
}

func (i GetPrivateLinkAttachmentGcpArgs) ToOutput(ctx context.Context) pulumix.Output[GetPrivateLinkAttachmentGcp] {
	return pulumix.Output[GetPrivateLinkAttachmentGcp]{
		OutputState: i.ToGetPrivateLinkAttachmentGcpOutputWithContext(ctx).OutputState,
	}
}

// GetPrivateLinkAttachmentGcpArrayInput is an input type that accepts GetPrivateLinkAttachmentGcpArray and GetPrivateLinkAttachmentGcpArrayOutput values.
// You can construct a concrete instance of `GetPrivateLinkAttachmentGcpArrayInput` via:
//
//	GetPrivateLinkAttachmentGcpArray{ GetPrivateLinkAttachmentGcpArgs{...} }
type GetPrivateLinkAttachmentGcpArrayInput interface {
	pulumi.Input

	ToGetPrivateLinkAttachmentGcpArrayOutput() GetPrivateLinkAttachmentGcpArrayOutput
	ToGetPrivateLinkAttachmentGcpArrayOutputWithContext(context.Context) GetPrivateLinkAttachmentGcpArrayOutput
}

type GetPrivateLinkAttachmentGcpArray []GetPrivateLinkAttachmentGcpInput

func (GetPrivateLinkAttachmentGcpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivateLinkAttachmentGcp)(nil)).Elem()
}

func (i GetPrivateLinkAttachmentGcpArray) ToGetPrivateLinkAttachmentGcpArrayOutput() GetPrivateLinkAttachmentGcpArrayOutput {
	return i.ToGetPrivateLinkAttachmentGcpArrayOutputWithContext(context.Background())
}

func (i GetPrivateLinkAttachmentGcpArray) ToGetPrivateLinkAttachmentGcpArrayOutputWithContext(ctx context.Context) GetPrivateLinkAttachmentGcpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateLinkAttachmentGcpArrayOutput)
}

func (i GetPrivateLinkAttachmentGcpArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPrivateLinkAttachmentGcp] {
	return pulumix.Output[[]GetPrivateLinkAttachmentGcp]{
		OutputState: i.ToGetPrivateLinkAttachmentGcpArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPrivateLinkAttachmentGcpOutput struct{ *pulumi.OutputState }

func (GetPrivateLinkAttachmentGcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateLinkAttachmentGcp)(nil)).Elem()
}

func (o GetPrivateLinkAttachmentGcpOutput) ToGetPrivateLinkAttachmentGcpOutput() GetPrivateLinkAttachmentGcpOutput {
	return o
}

func (o GetPrivateLinkAttachmentGcpOutput) ToGetPrivateLinkAttachmentGcpOutputWithContext(ctx context.Context) GetPrivateLinkAttachmentGcpOutput {
	return o
}

func (o GetPrivateLinkAttachmentGcpOutput) ToOutput(ctx context.Context) pulumix.Output[GetPrivateLinkAttachmentGcp] {
	return pulumix.Output[GetPrivateLinkAttachmentGcp]{
		OutputState: o.OutputState,
	}
}

func (o GetPrivateLinkAttachmentGcpOutput) PrivateServiceConnectServiceAttachment() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateLinkAttachmentGcp) string { return v.PrivateServiceConnectServiceAttachment }).(pulumi.StringOutput)
}

func (o GetPrivateLinkAttachmentGcpOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateLinkAttachmentGcp) string { return v.Zone }).(pulumi.StringOutput)
}

type GetPrivateLinkAttachmentGcpArrayOutput struct{ *pulumi.OutputState }

func (GetPrivateLinkAttachmentGcpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivateLinkAttachmentGcp)(nil)).Elem()
}

func (o GetPrivateLinkAttachmentGcpArrayOutput) ToGetPrivateLinkAttachmentGcpArrayOutput() GetPrivateLinkAttachmentGcpArrayOutput {
	return o
}

func (o GetPrivateLinkAttachmentGcpArrayOutput) ToGetPrivateLinkAttachmentGcpArrayOutputWithContext(ctx context.Context) GetPrivateLinkAttachmentGcpArrayOutput {
	return o
}

func (o GetPrivateLinkAttachmentGcpArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPrivateLinkAttachmentGcp] {
	return pulumix.Output[[]GetPrivateLinkAttachmentGcp]{
		OutputState: o.OutputState,
	}
}

func (o GetPrivateLinkAttachmentGcpArrayOutput) Index(i pulumi.IntInput) GetPrivateLinkAttachmentGcpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPrivateLinkAttachmentGcp {
		return vs[0].([]GetPrivateLinkAttachmentGcp)[vs[1].(int)]
	}).(GetPrivateLinkAttachmentGcpOutput)
}

type GetSchemaCredentials struct {
	// The Schema Registry API Key.
	Key string `pulumi:"key"`
	// The Schema Registry API Secret.
	Secret string `pulumi:"secret"`
}

// GetSchemaCredentialsInput is an input type that accepts GetSchemaCredentialsArgs and GetSchemaCredentialsOutput values.
// You can construct a concrete instance of `GetSchemaCredentialsInput` via:
//
//	GetSchemaCredentialsArgs{...}
type GetSchemaCredentialsInput interface {
	pulumi.Input

	ToGetSchemaCredentialsOutput() GetSchemaCredentialsOutput
	ToGetSchemaCredentialsOutputWithContext(context.Context) GetSchemaCredentialsOutput
}

type GetSchemaCredentialsArgs struct {
	// The Schema Registry API Key.
	Key pulumi.StringInput `pulumi:"key"`
	// The Schema Registry API Secret.
	Secret pulumi.StringInput `pulumi:"secret"`
}

func (GetSchemaCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemaCredentials)(nil)).Elem()
}

func (i GetSchemaCredentialsArgs) ToGetSchemaCredentialsOutput() GetSchemaCredentialsOutput {
	return i.ToGetSchemaCredentialsOutputWithContext(context.Background())
}

func (i GetSchemaCredentialsArgs) ToGetSchemaCredentialsOutputWithContext(ctx context.Context) GetSchemaCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemaCredentialsOutput)
}

func (i GetSchemaCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[GetSchemaCredentials] {
	return pulumix.Output[GetSchemaCredentials]{
		OutputState: i.ToGetSchemaCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i GetSchemaCredentialsArgs) ToGetSchemaCredentialsPtrOutput() GetSchemaCredentialsPtrOutput {
	return i.ToGetSchemaCredentialsPtrOutputWithContext(context.Background())
}

func (i GetSchemaCredentialsArgs) ToGetSchemaCredentialsPtrOutputWithContext(ctx context.Context) GetSchemaCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemaCredentialsOutput).ToGetSchemaCredentialsPtrOutputWithContext(ctx)
}

// GetSchemaCredentialsPtrInput is an input type that accepts GetSchemaCredentialsArgs, GetSchemaCredentialsPtr and GetSchemaCredentialsPtrOutput values.
// You can construct a concrete instance of `GetSchemaCredentialsPtrInput` via:
//
//	        GetSchemaCredentialsArgs{...}
//
//	or:
//
//	        nil
type GetSchemaCredentialsPtrInput interface {
	pulumi.Input

	ToGetSchemaCredentialsPtrOutput() GetSchemaCredentialsPtrOutput
	ToGetSchemaCredentialsPtrOutputWithContext(context.Context) GetSchemaCredentialsPtrOutput
}

type getSchemaCredentialsPtrType GetSchemaCredentialsArgs

func GetSchemaCredentialsPtr(v *GetSchemaCredentialsArgs) GetSchemaCredentialsPtrInput {
	return (*getSchemaCredentialsPtrType)(v)
}

func (*getSchemaCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSchemaCredentials)(nil)).Elem()
}

func (i *getSchemaCredentialsPtrType) ToGetSchemaCredentialsPtrOutput() GetSchemaCredentialsPtrOutput {
	return i.ToGetSchemaCredentialsPtrOutputWithContext(context.Background())
}

func (i *getSchemaCredentialsPtrType) ToGetSchemaCredentialsPtrOutputWithContext(ctx context.Context) GetSchemaCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemaCredentialsPtrOutput)
}

func (i *getSchemaCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*GetSchemaCredentials] {
	return pulumix.Output[*GetSchemaCredentials]{
		OutputState: i.ToGetSchemaCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

type GetSchemaCredentialsOutput struct{ *pulumi.OutputState }

func (GetSchemaCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemaCredentials)(nil)).Elem()
}

func (o GetSchemaCredentialsOutput) ToGetSchemaCredentialsOutput() GetSchemaCredentialsOutput {
	return o
}

func (o GetSchemaCredentialsOutput) ToGetSchemaCredentialsOutputWithContext(ctx context.Context) GetSchemaCredentialsOutput {
	return o
}

func (o GetSchemaCredentialsOutput) ToGetSchemaCredentialsPtrOutput() GetSchemaCredentialsPtrOutput {
	return o.ToGetSchemaCredentialsPtrOutputWithContext(context.Background())
}

func (o GetSchemaCredentialsOutput) ToGetSchemaCredentialsPtrOutputWithContext(ctx context.Context) GetSchemaCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetSchemaCredentials) *GetSchemaCredentials {
		return &v
	}).(GetSchemaCredentialsPtrOutput)
}

func (o GetSchemaCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[GetSchemaCredentials] {
	return pulumix.Output[GetSchemaCredentials]{
		OutputState: o.OutputState,
	}
}

// The Schema Registry API Key.
func (o GetSchemaCredentialsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemaCredentials) string { return v.Key }).(pulumi.StringOutput)
}

// The Schema Registry API Secret.
func (o GetSchemaCredentialsOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemaCredentials) string { return v.Secret }).(pulumi.StringOutput)
}

type GetSchemaCredentialsPtrOutput struct{ *pulumi.OutputState }

func (GetSchemaCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSchemaCredentials)(nil)).Elem()
}

func (o GetSchemaCredentialsPtrOutput) ToGetSchemaCredentialsPtrOutput() GetSchemaCredentialsPtrOutput {
	return o
}

func (o GetSchemaCredentialsPtrOutput) ToGetSchemaCredentialsPtrOutputWithContext(ctx context.Context) GetSchemaCredentialsPtrOutput {
	return o
}

func (o GetSchemaCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GetSchemaCredentials] {
	return pulumix.Output[*GetSchemaCredentials]{
		OutputState: o.OutputState,
	}
}

func (o GetSchemaCredentialsPtrOutput) Elem() GetSchemaCredentialsOutput {
	return o.ApplyT(func(v *GetSchemaCredentials) GetSchemaCredentials {
		if v != nil {
			return *v
		}
		var ret GetSchemaCredentials
		return ret
	}).(GetSchemaCredentialsOutput)
}

// The Schema Registry API Key.
func (o GetSchemaCredentialsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetSchemaCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// The Schema Registry API Secret.
func (o GetSchemaCredentialsPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetSchemaCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Secret
	}).(pulumi.StringPtrOutput)
}

type GetSchemaRegistryClusterConfigCredentials struct {
	// The Schema Registry API Key.
	Key string `pulumi:"key"`
	// The Schema Registry API Secret.
	Secret string `pulumi:"secret"`
}

// GetSchemaRegistryClusterConfigCredentialsInput is an input type that accepts GetSchemaRegistryClusterConfigCredentialsArgs and GetSchemaRegistryClusterConfigCredentialsOutput values.
// You can construct a concrete instance of `GetSchemaRegistryClusterConfigCredentialsInput` via:
//
//	GetSchemaRegistryClusterConfigCredentialsArgs{...}
type GetSchemaRegistryClusterConfigCredentialsInput interface {
	pulumi.Input

	ToGetSchemaRegistryClusterConfigCredentialsOutput() GetSchemaRegistryClusterConfigCredentialsOutput
	ToGetSchemaRegistryClusterConfigCredentialsOutputWithContext(context.Context) GetSchemaRegistryClusterConfigCredentialsOutput
}

type GetSchemaRegistryClusterConfigCredentialsArgs struct {
	// The Schema Registry API Key.
	Key pulumi.StringInput `pulumi:"key"`
	// The Schema Registry API Secret.
	Secret pulumi.StringInput `pulumi:"secret"`
}

func (GetSchemaRegistryClusterConfigCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemaRegistryClusterConfigCredentials)(nil)).Elem()
}

func (i GetSchemaRegistryClusterConfigCredentialsArgs) ToGetSchemaRegistryClusterConfigCredentialsOutput() GetSchemaRegistryClusterConfigCredentialsOutput {
	return i.ToGetSchemaRegistryClusterConfigCredentialsOutputWithContext(context.Background())
}

func (i GetSchemaRegistryClusterConfigCredentialsArgs) ToGetSchemaRegistryClusterConfigCredentialsOutputWithContext(ctx context.Context) GetSchemaRegistryClusterConfigCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemaRegistryClusterConfigCredentialsOutput)
}

func (i GetSchemaRegistryClusterConfigCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[GetSchemaRegistryClusterConfigCredentials] {
	return pulumix.Output[GetSchemaRegistryClusterConfigCredentials]{
		OutputState: i.ToGetSchemaRegistryClusterConfigCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i GetSchemaRegistryClusterConfigCredentialsArgs) ToGetSchemaRegistryClusterConfigCredentialsPtrOutput() GetSchemaRegistryClusterConfigCredentialsPtrOutput {
	return i.ToGetSchemaRegistryClusterConfigCredentialsPtrOutputWithContext(context.Background())
}

func (i GetSchemaRegistryClusterConfigCredentialsArgs) ToGetSchemaRegistryClusterConfigCredentialsPtrOutputWithContext(ctx context.Context) GetSchemaRegistryClusterConfigCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemaRegistryClusterConfigCredentialsOutput).ToGetSchemaRegistryClusterConfigCredentialsPtrOutputWithContext(ctx)
}

// GetSchemaRegistryClusterConfigCredentialsPtrInput is an input type that accepts GetSchemaRegistryClusterConfigCredentialsArgs, GetSchemaRegistryClusterConfigCredentialsPtr and GetSchemaRegistryClusterConfigCredentialsPtrOutput values.
// You can construct a concrete instance of `GetSchemaRegistryClusterConfigCredentialsPtrInput` via:
//
//	        GetSchemaRegistryClusterConfigCredentialsArgs{...}
//
//	or:
//
//	        nil
type GetSchemaRegistryClusterConfigCredentialsPtrInput interface {
	pulumi.Input

	ToGetSchemaRegistryClusterConfigCredentialsPtrOutput() GetSchemaRegistryClusterConfigCredentialsPtrOutput
	ToGetSchemaRegistryClusterConfigCredentialsPtrOutputWithContext(context.Context) GetSchemaRegistryClusterConfigCredentialsPtrOutput
}

type getSchemaRegistryClusterConfigCredentialsPtrType GetSchemaRegistryClusterConfigCredentialsArgs

func GetSchemaRegistryClusterConfigCredentialsPtr(v *GetSchemaRegistryClusterConfigCredentialsArgs) GetSchemaRegistryClusterConfigCredentialsPtrInput {
	return (*getSchemaRegistryClusterConfigCredentialsPtrType)(v)
}

func (*getSchemaRegistryClusterConfigCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSchemaRegistryClusterConfigCredentials)(nil)).Elem()
}

func (i *getSchemaRegistryClusterConfigCredentialsPtrType) ToGetSchemaRegistryClusterConfigCredentialsPtrOutput() GetSchemaRegistryClusterConfigCredentialsPtrOutput {
	return i.ToGetSchemaRegistryClusterConfigCredentialsPtrOutputWithContext(context.Background())
}

func (i *getSchemaRegistryClusterConfigCredentialsPtrType) ToGetSchemaRegistryClusterConfigCredentialsPtrOutputWithContext(ctx context.Context) GetSchemaRegistryClusterConfigCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemaRegistryClusterConfigCredentialsPtrOutput)
}

func (i *getSchemaRegistryClusterConfigCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*GetSchemaRegistryClusterConfigCredentials] {
	return pulumix.Output[*GetSchemaRegistryClusterConfigCredentials]{
		OutputState: i.ToGetSchemaRegistryClusterConfigCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

type GetSchemaRegistryClusterConfigCredentialsOutput struct{ *pulumi.OutputState }

func (GetSchemaRegistryClusterConfigCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemaRegistryClusterConfigCredentials)(nil)).Elem()
}

func (o GetSchemaRegistryClusterConfigCredentialsOutput) ToGetSchemaRegistryClusterConfigCredentialsOutput() GetSchemaRegistryClusterConfigCredentialsOutput {
	return o
}

func (o GetSchemaRegistryClusterConfigCredentialsOutput) ToGetSchemaRegistryClusterConfigCredentialsOutputWithContext(ctx context.Context) GetSchemaRegistryClusterConfigCredentialsOutput {
	return o
}

func (o GetSchemaRegistryClusterConfigCredentialsOutput) ToGetSchemaRegistryClusterConfigCredentialsPtrOutput() GetSchemaRegistryClusterConfigCredentialsPtrOutput {
	return o.ToGetSchemaRegistryClusterConfigCredentialsPtrOutputWithContext(context.Background())
}

func (o GetSchemaRegistryClusterConfigCredentialsOutput) ToGetSchemaRegistryClusterConfigCredentialsPtrOutputWithContext(ctx context.Context) GetSchemaRegistryClusterConfigCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetSchemaRegistryClusterConfigCredentials) *GetSchemaRegistryClusterConfigCredentials {
		return &v
	}).(GetSchemaRegistryClusterConfigCredentialsPtrOutput)
}

func (o GetSchemaRegistryClusterConfigCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[GetSchemaRegistryClusterConfigCredentials] {
	return pulumix.Output[GetSchemaRegistryClusterConfigCredentials]{
		OutputState: o.OutputState,
	}
}

// The Schema Registry API Key.
func (o GetSchemaRegistryClusterConfigCredentialsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemaRegistryClusterConfigCredentials) string { return v.Key }).(pulumi.StringOutput)
}

// The Schema Registry API Secret.
func (o GetSchemaRegistryClusterConfigCredentialsOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemaRegistryClusterConfigCredentials) string { return v.Secret }).(pulumi.StringOutput)
}

type GetSchemaRegistryClusterConfigCredentialsPtrOutput struct{ *pulumi.OutputState }

func (GetSchemaRegistryClusterConfigCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSchemaRegistryClusterConfigCredentials)(nil)).Elem()
}

func (o GetSchemaRegistryClusterConfigCredentialsPtrOutput) ToGetSchemaRegistryClusterConfigCredentialsPtrOutput() GetSchemaRegistryClusterConfigCredentialsPtrOutput {
	return o
}

func (o GetSchemaRegistryClusterConfigCredentialsPtrOutput) ToGetSchemaRegistryClusterConfigCredentialsPtrOutputWithContext(ctx context.Context) GetSchemaRegistryClusterConfigCredentialsPtrOutput {
	return o
}

func (o GetSchemaRegistryClusterConfigCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GetSchemaRegistryClusterConfigCredentials] {
	return pulumix.Output[*GetSchemaRegistryClusterConfigCredentials]{
		OutputState: o.OutputState,
	}
}

func (o GetSchemaRegistryClusterConfigCredentialsPtrOutput) Elem() GetSchemaRegistryClusterConfigCredentialsOutput {
	return o.ApplyT(func(v *GetSchemaRegistryClusterConfigCredentials) GetSchemaRegistryClusterConfigCredentials {
		if v != nil {
			return *v
		}
		var ret GetSchemaRegistryClusterConfigCredentials
		return ret
	}).(GetSchemaRegistryClusterConfigCredentialsOutput)
}

// The Schema Registry API Key.
func (o GetSchemaRegistryClusterConfigCredentialsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetSchemaRegistryClusterConfigCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// The Schema Registry API Secret.
func (o GetSchemaRegistryClusterConfigCredentialsPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetSchemaRegistryClusterConfigCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Secret
	}).(pulumi.StringPtrOutput)
}

type GetSchemaRegistryClusterConfigSchemaRegistryCluster struct {
	// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
	Id string `pulumi:"id"`
}

// GetSchemaRegistryClusterConfigSchemaRegistryClusterInput is an input type that accepts GetSchemaRegistryClusterConfigSchemaRegistryClusterArgs and GetSchemaRegistryClusterConfigSchemaRegistryClusterOutput values.
// You can construct a concrete instance of `GetSchemaRegistryClusterConfigSchemaRegistryClusterInput` via:
//
//	GetSchemaRegistryClusterConfigSchemaRegistryClusterArgs{...}
type GetSchemaRegistryClusterConfigSchemaRegistryClusterInput interface {
	pulumi.Input

	ToGetSchemaRegistryClusterConfigSchemaRegistryClusterOutput() GetSchemaRegistryClusterConfigSchemaRegistryClusterOutput
	ToGetSchemaRegistryClusterConfigSchemaRegistryClusterOutputWithContext(context.Context) GetSchemaRegistryClusterConfigSchemaRegistryClusterOutput
}

type GetSchemaRegistryClusterConfigSchemaRegistryClusterArgs struct {
	// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetSchemaRegistryClusterConfigSchemaRegistryClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemaRegistryClusterConfigSchemaRegistryCluster)(nil)).Elem()
}

func (i GetSchemaRegistryClusterConfigSchemaRegistryClusterArgs) ToGetSchemaRegistryClusterConfigSchemaRegistryClusterOutput() GetSchemaRegistryClusterConfigSchemaRegistryClusterOutput {
	return i.ToGetSchemaRegistryClusterConfigSchemaRegistryClusterOutputWithContext(context.Background())
}

func (i GetSchemaRegistryClusterConfigSchemaRegistryClusterArgs) ToGetSchemaRegistryClusterConfigSchemaRegistryClusterOutputWithContext(ctx context.Context) GetSchemaRegistryClusterConfigSchemaRegistryClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemaRegistryClusterConfigSchemaRegistryClusterOutput)
}

func (i GetSchemaRegistryClusterConfigSchemaRegistryClusterArgs) ToOutput(ctx context.Context) pulumix.Output[GetSchemaRegistryClusterConfigSchemaRegistryCluster] {
	return pulumix.Output[GetSchemaRegistryClusterConfigSchemaRegistryCluster]{
		OutputState: i.ToGetSchemaRegistryClusterConfigSchemaRegistryClusterOutputWithContext(ctx).OutputState,
	}
}

func (i GetSchemaRegistryClusterConfigSchemaRegistryClusterArgs) ToGetSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput() GetSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput {
	return i.ToGetSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (i GetSchemaRegistryClusterConfigSchemaRegistryClusterArgs) ToGetSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemaRegistryClusterConfigSchemaRegistryClusterOutput).ToGetSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutputWithContext(ctx)
}

// GetSchemaRegistryClusterConfigSchemaRegistryClusterPtrInput is an input type that accepts GetSchemaRegistryClusterConfigSchemaRegistryClusterArgs, GetSchemaRegistryClusterConfigSchemaRegistryClusterPtr and GetSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput values.
// You can construct a concrete instance of `GetSchemaRegistryClusterConfigSchemaRegistryClusterPtrInput` via:
//
//	        GetSchemaRegistryClusterConfigSchemaRegistryClusterArgs{...}
//
//	or:
//
//	        nil
type GetSchemaRegistryClusterConfigSchemaRegistryClusterPtrInput interface {
	pulumi.Input

	ToGetSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput() GetSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput
	ToGetSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutputWithContext(context.Context) GetSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput
}

type getSchemaRegistryClusterConfigSchemaRegistryClusterPtrType GetSchemaRegistryClusterConfigSchemaRegistryClusterArgs

func GetSchemaRegistryClusterConfigSchemaRegistryClusterPtr(v *GetSchemaRegistryClusterConfigSchemaRegistryClusterArgs) GetSchemaRegistryClusterConfigSchemaRegistryClusterPtrInput {
	return (*getSchemaRegistryClusterConfigSchemaRegistryClusterPtrType)(v)
}

func (*getSchemaRegistryClusterConfigSchemaRegistryClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSchemaRegistryClusterConfigSchemaRegistryCluster)(nil)).Elem()
}

func (i *getSchemaRegistryClusterConfigSchemaRegistryClusterPtrType) ToGetSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput() GetSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput {
	return i.ToGetSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (i *getSchemaRegistryClusterConfigSchemaRegistryClusterPtrType) ToGetSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput)
}

func (i *getSchemaRegistryClusterConfigSchemaRegistryClusterPtrType) ToOutput(ctx context.Context) pulumix.Output[*GetSchemaRegistryClusterConfigSchemaRegistryCluster] {
	return pulumix.Output[*GetSchemaRegistryClusterConfigSchemaRegistryCluster]{
		OutputState: i.ToGetSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutputWithContext(ctx).OutputState,
	}
}

type GetSchemaRegistryClusterConfigSchemaRegistryClusterOutput struct{ *pulumi.OutputState }

func (GetSchemaRegistryClusterConfigSchemaRegistryClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemaRegistryClusterConfigSchemaRegistryCluster)(nil)).Elem()
}

func (o GetSchemaRegistryClusterConfigSchemaRegistryClusterOutput) ToGetSchemaRegistryClusterConfigSchemaRegistryClusterOutput() GetSchemaRegistryClusterConfigSchemaRegistryClusterOutput {
	return o
}

func (o GetSchemaRegistryClusterConfigSchemaRegistryClusterOutput) ToGetSchemaRegistryClusterConfigSchemaRegistryClusterOutputWithContext(ctx context.Context) GetSchemaRegistryClusterConfigSchemaRegistryClusterOutput {
	return o
}

func (o GetSchemaRegistryClusterConfigSchemaRegistryClusterOutput) ToGetSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput() GetSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput {
	return o.ToGetSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (o GetSchemaRegistryClusterConfigSchemaRegistryClusterOutput) ToGetSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetSchemaRegistryClusterConfigSchemaRegistryCluster) *GetSchemaRegistryClusterConfigSchemaRegistryCluster {
		return &v
	}).(GetSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput)
}

func (o GetSchemaRegistryClusterConfigSchemaRegistryClusterOutput) ToOutput(ctx context.Context) pulumix.Output[GetSchemaRegistryClusterConfigSchemaRegistryCluster] {
	return pulumix.Output[GetSchemaRegistryClusterConfigSchemaRegistryCluster]{
		OutputState: o.OutputState,
	}
}

// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
func (o GetSchemaRegistryClusterConfigSchemaRegistryClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemaRegistryClusterConfigSchemaRegistryCluster) string { return v.Id }).(pulumi.StringOutput)
}

type GetSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput struct{ *pulumi.OutputState }

func (GetSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSchemaRegistryClusterConfigSchemaRegistryCluster)(nil)).Elem()
}

func (o GetSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput) ToGetSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput() GetSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput {
	return o
}

func (o GetSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput) ToGetSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput {
	return o
}

func (o GetSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GetSchemaRegistryClusterConfigSchemaRegistryCluster] {
	return pulumix.Output[*GetSchemaRegistryClusterConfigSchemaRegistryCluster]{
		OutputState: o.OutputState,
	}
}

func (o GetSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput) Elem() GetSchemaRegistryClusterConfigSchemaRegistryClusterOutput {
	return o.ApplyT(func(v *GetSchemaRegistryClusterConfigSchemaRegistryCluster) GetSchemaRegistryClusterConfigSchemaRegistryCluster {
		if v != nil {
			return *v
		}
		var ret GetSchemaRegistryClusterConfigSchemaRegistryCluster
		return ret
	}).(GetSchemaRegistryClusterConfigSchemaRegistryClusterOutput)
}

// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
func (o GetSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetSchemaRegistryClusterConfigSchemaRegistryCluster) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type GetSchemaRegistryClusterEnvironment struct {
	// The ID of the Environment that the Schema Registry cluster belongs to, for example, `env-xyz456`.
	//
	// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
	Id string `pulumi:"id"`
}

// GetSchemaRegistryClusterEnvironmentInput is an input type that accepts GetSchemaRegistryClusterEnvironmentArgs and GetSchemaRegistryClusterEnvironmentOutput values.
// You can construct a concrete instance of `GetSchemaRegistryClusterEnvironmentInput` via:
//
//	GetSchemaRegistryClusterEnvironmentArgs{...}
type GetSchemaRegistryClusterEnvironmentInput interface {
	pulumi.Input

	ToGetSchemaRegistryClusterEnvironmentOutput() GetSchemaRegistryClusterEnvironmentOutput
	ToGetSchemaRegistryClusterEnvironmentOutputWithContext(context.Context) GetSchemaRegistryClusterEnvironmentOutput
}

type GetSchemaRegistryClusterEnvironmentArgs struct {
	// The ID of the Environment that the Schema Registry cluster belongs to, for example, `env-xyz456`.
	//
	// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetSchemaRegistryClusterEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemaRegistryClusterEnvironment)(nil)).Elem()
}

func (i GetSchemaRegistryClusterEnvironmentArgs) ToGetSchemaRegistryClusterEnvironmentOutput() GetSchemaRegistryClusterEnvironmentOutput {
	return i.ToGetSchemaRegistryClusterEnvironmentOutputWithContext(context.Background())
}

func (i GetSchemaRegistryClusterEnvironmentArgs) ToGetSchemaRegistryClusterEnvironmentOutputWithContext(ctx context.Context) GetSchemaRegistryClusterEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemaRegistryClusterEnvironmentOutput)
}

func (i GetSchemaRegistryClusterEnvironmentArgs) ToOutput(ctx context.Context) pulumix.Output[GetSchemaRegistryClusterEnvironment] {
	return pulumix.Output[GetSchemaRegistryClusterEnvironment]{
		OutputState: i.ToGetSchemaRegistryClusterEnvironmentOutputWithContext(ctx).OutputState,
	}
}

type GetSchemaRegistryClusterEnvironmentOutput struct{ *pulumi.OutputState }

func (GetSchemaRegistryClusterEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemaRegistryClusterEnvironment)(nil)).Elem()
}

func (o GetSchemaRegistryClusterEnvironmentOutput) ToGetSchemaRegistryClusterEnvironmentOutput() GetSchemaRegistryClusterEnvironmentOutput {
	return o
}

func (o GetSchemaRegistryClusterEnvironmentOutput) ToGetSchemaRegistryClusterEnvironmentOutputWithContext(ctx context.Context) GetSchemaRegistryClusterEnvironmentOutput {
	return o
}

func (o GetSchemaRegistryClusterEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[GetSchemaRegistryClusterEnvironment] {
	return pulumix.Output[GetSchemaRegistryClusterEnvironment]{
		OutputState: o.OutputState,
	}
}

// The ID of the Environment that the Schema Registry cluster belongs to, for example, `env-xyz456`.
//
// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
func (o GetSchemaRegistryClusterEnvironmentOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemaRegistryClusterEnvironment) string { return v.Id }).(pulumi.StringOutput)
}

type GetSchemaRegistryClusterModeCredentials struct {
	// The Schema Registry API Key.
	Key string `pulumi:"key"`
	// The Schema Registry API Secret.
	//
	// > **Note:** A Schema Registry API key consists of a key and a secret. Schema Registry API keys are required to interact with Schema Registry clusters in Confluent Cloud. Each Schema Registry API key is valid for one specific Schema Registry cluster.
	Secret string `pulumi:"secret"`
}

// GetSchemaRegistryClusterModeCredentialsInput is an input type that accepts GetSchemaRegistryClusterModeCredentialsArgs and GetSchemaRegistryClusterModeCredentialsOutput values.
// You can construct a concrete instance of `GetSchemaRegistryClusterModeCredentialsInput` via:
//
//	GetSchemaRegistryClusterModeCredentialsArgs{...}
type GetSchemaRegistryClusterModeCredentialsInput interface {
	pulumi.Input

	ToGetSchemaRegistryClusterModeCredentialsOutput() GetSchemaRegistryClusterModeCredentialsOutput
	ToGetSchemaRegistryClusterModeCredentialsOutputWithContext(context.Context) GetSchemaRegistryClusterModeCredentialsOutput
}

type GetSchemaRegistryClusterModeCredentialsArgs struct {
	// The Schema Registry API Key.
	Key pulumi.StringInput `pulumi:"key"`
	// The Schema Registry API Secret.
	//
	// > **Note:** A Schema Registry API key consists of a key and a secret. Schema Registry API keys are required to interact with Schema Registry clusters in Confluent Cloud. Each Schema Registry API key is valid for one specific Schema Registry cluster.
	Secret pulumi.StringInput `pulumi:"secret"`
}

func (GetSchemaRegistryClusterModeCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemaRegistryClusterModeCredentials)(nil)).Elem()
}

func (i GetSchemaRegistryClusterModeCredentialsArgs) ToGetSchemaRegistryClusterModeCredentialsOutput() GetSchemaRegistryClusterModeCredentialsOutput {
	return i.ToGetSchemaRegistryClusterModeCredentialsOutputWithContext(context.Background())
}

func (i GetSchemaRegistryClusterModeCredentialsArgs) ToGetSchemaRegistryClusterModeCredentialsOutputWithContext(ctx context.Context) GetSchemaRegistryClusterModeCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemaRegistryClusterModeCredentialsOutput)
}

func (i GetSchemaRegistryClusterModeCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[GetSchemaRegistryClusterModeCredentials] {
	return pulumix.Output[GetSchemaRegistryClusterModeCredentials]{
		OutputState: i.ToGetSchemaRegistryClusterModeCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i GetSchemaRegistryClusterModeCredentialsArgs) ToGetSchemaRegistryClusterModeCredentialsPtrOutput() GetSchemaRegistryClusterModeCredentialsPtrOutput {
	return i.ToGetSchemaRegistryClusterModeCredentialsPtrOutputWithContext(context.Background())
}

func (i GetSchemaRegistryClusterModeCredentialsArgs) ToGetSchemaRegistryClusterModeCredentialsPtrOutputWithContext(ctx context.Context) GetSchemaRegistryClusterModeCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemaRegistryClusterModeCredentialsOutput).ToGetSchemaRegistryClusterModeCredentialsPtrOutputWithContext(ctx)
}

// GetSchemaRegistryClusterModeCredentialsPtrInput is an input type that accepts GetSchemaRegistryClusterModeCredentialsArgs, GetSchemaRegistryClusterModeCredentialsPtr and GetSchemaRegistryClusterModeCredentialsPtrOutput values.
// You can construct a concrete instance of `GetSchemaRegistryClusterModeCredentialsPtrInput` via:
//
//	        GetSchemaRegistryClusterModeCredentialsArgs{...}
//
//	or:
//
//	        nil
type GetSchemaRegistryClusterModeCredentialsPtrInput interface {
	pulumi.Input

	ToGetSchemaRegistryClusterModeCredentialsPtrOutput() GetSchemaRegistryClusterModeCredentialsPtrOutput
	ToGetSchemaRegistryClusterModeCredentialsPtrOutputWithContext(context.Context) GetSchemaRegistryClusterModeCredentialsPtrOutput
}

type getSchemaRegistryClusterModeCredentialsPtrType GetSchemaRegistryClusterModeCredentialsArgs

func GetSchemaRegistryClusterModeCredentialsPtr(v *GetSchemaRegistryClusterModeCredentialsArgs) GetSchemaRegistryClusterModeCredentialsPtrInput {
	return (*getSchemaRegistryClusterModeCredentialsPtrType)(v)
}

func (*getSchemaRegistryClusterModeCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSchemaRegistryClusterModeCredentials)(nil)).Elem()
}

func (i *getSchemaRegistryClusterModeCredentialsPtrType) ToGetSchemaRegistryClusterModeCredentialsPtrOutput() GetSchemaRegistryClusterModeCredentialsPtrOutput {
	return i.ToGetSchemaRegistryClusterModeCredentialsPtrOutputWithContext(context.Background())
}

func (i *getSchemaRegistryClusterModeCredentialsPtrType) ToGetSchemaRegistryClusterModeCredentialsPtrOutputWithContext(ctx context.Context) GetSchemaRegistryClusterModeCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemaRegistryClusterModeCredentialsPtrOutput)
}

func (i *getSchemaRegistryClusterModeCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*GetSchemaRegistryClusterModeCredentials] {
	return pulumix.Output[*GetSchemaRegistryClusterModeCredentials]{
		OutputState: i.ToGetSchemaRegistryClusterModeCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

type GetSchemaRegistryClusterModeCredentialsOutput struct{ *pulumi.OutputState }

func (GetSchemaRegistryClusterModeCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemaRegistryClusterModeCredentials)(nil)).Elem()
}

func (o GetSchemaRegistryClusterModeCredentialsOutput) ToGetSchemaRegistryClusterModeCredentialsOutput() GetSchemaRegistryClusterModeCredentialsOutput {
	return o
}

func (o GetSchemaRegistryClusterModeCredentialsOutput) ToGetSchemaRegistryClusterModeCredentialsOutputWithContext(ctx context.Context) GetSchemaRegistryClusterModeCredentialsOutput {
	return o
}

func (o GetSchemaRegistryClusterModeCredentialsOutput) ToGetSchemaRegistryClusterModeCredentialsPtrOutput() GetSchemaRegistryClusterModeCredentialsPtrOutput {
	return o.ToGetSchemaRegistryClusterModeCredentialsPtrOutputWithContext(context.Background())
}

func (o GetSchemaRegistryClusterModeCredentialsOutput) ToGetSchemaRegistryClusterModeCredentialsPtrOutputWithContext(ctx context.Context) GetSchemaRegistryClusterModeCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetSchemaRegistryClusterModeCredentials) *GetSchemaRegistryClusterModeCredentials {
		return &v
	}).(GetSchemaRegistryClusterModeCredentialsPtrOutput)
}

func (o GetSchemaRegistryClusterModeCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[GetSchemaRegistryClusterModeCredentials] {
	return pulumix.Output[GetSchemaRegistryClusterModeCredentials]{
		OutputState: o.OutputState,
	}
}

// The Schema Registry API Key.
func (o GetSchemaRegistryClusterModeCredentialsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemaRegistryClusterModeCredentials) string { return v.Key }).(pulumi.StringOutput)
}

// The Schema Registry API Secret.
//
// > **Note:** A Schema Registry API key consists of a key and a secret. Schema Registry API keys are required to interact with Schema Registry clusters in Confluent Cloud. Each Schema Registry API key is valid for one specific Schema Registry cluster.
func (o GetSchemaRegistryClusterModeCredentialsOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemaRegistryClusterModeCredentials) string { return v.Secret }).(pulumi.StringOutput)
}

type GetSchemaRegistryClusterModeCredentialsPtrOutput struct{ *pulumi.OutputState }

func (GetSchemaRegistryClusterModeCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSchemaRegistryClusterModeCredentials)(nil)).Elem()
}

func (o GetSchemaRegistryClusterModeCredentialsPtrOutput) ToGetSchemaRegistryClusterModeCredentialsPtrOutput() GetSchemaRegistryClusterModeCredentialsPtrOutput {
	return o
}

func (o GetSchemaRegistryClusterModeCredentialsPtrOutput) ToGetSchemaRegistryClusterModeCredentialsPtrOutputWithContext(ctx context.Context) GetSchemaRegistryClusterModeCredentialsPtrOutput {
	return o
}

func (o GetSchemaRegistryClusterModeCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GetSchemaRegistryClusterModeCredentials] {
	return pulumix.Output[*GetSchemaRegistryClusterModeCredentials]{
		OutputState: o.OutputState,
	}
}

func (o GetSchemaRegistryClusterModeCredentialsPtrOutput) Elem() GetSchemaRegistryClusterModeCredentialsOutput {
	return o.ApplyT(func(v *GetSchemaRegistryClusterModeCredentials) GetSchemaRegistryClusterModeCredentials {
		if v != nil {
			return *v
		}
		var ret GetSchemaRegistryClusterModeCredentials
		return ret
	}).(GetSchemaRegistryClusterModeCredentialsOutput)
}

// The Schema Registry API Key.
func (o GetSchemaRegistryClusterModeCredentialsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetSchemaRegistryClusterModeCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// The Schema Registry API Secret.
//
// > **Note:** A Schema Registry API key consists of a key and a secret. Schema Registry API keys are required to interact with Schema Registry clusters in Confluent Cloud. Each Schema Registry API key is valid for one specific Schema Registry cluster.
func (o GetSchemaRegistryClusterModeCredentialsPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetSchemaRegistryClusterModeCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Secret
	}).(pulumi.StringPtrOutput)
}

type GetSchemaRegistryClusterModeSchemaRegistryCluster struct {
	// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
	Id string `pulumi:"id"`
}

// GetSchemaRegistryClusterModeSchemaRegistryClusterInput is an input type that accepts GetSchemaRegistryClusterModeSchemaRegistryClusterArgs and GetSchemaRegistryClusterModeSchemaRegistryClusterOutput values.
// You can construct a concrete instance of `GetSchemaRegistryClusterModeSchemaRegistryClusterInput` via:
//
//	GetSchemaRegistryClusterModeSchemaRegistryClusterArgs{...}
type GetSchemaRegistryClusterModeSchemaRegistryClusterInput interface {
	pulumi.Input

	ToGetSchemaRegistryClusterModeSchemaRegistryClusterOutput() GetSchemaRegistryClusterModeSchemaRegistryClusterOutput
	ToGetSchemaRegistryClusterModeSchemaRegistryClusterOutputWithContext(context.Context) GetSchemaRegistryClusterModeSchemaRegistryClusterOutput
}

type GetSchemaRegistryClusterModeSchemaRegistryClusterArgs struct {
	// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetSchemaRegistryClusterModeSchemaRegistryClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemaRegistryClusterModeSchemaRegistryCluster)(nil)).Elem()
}

func (i GetSchemaRegistryClusterModeSchemaRegistryClusterArgs) ToGetSchemaRegistryClusterModeSchemaRegistryClusterOutput() GetSchemaRegistryClusterModeSchemaRegistryClusterOutput {
	return i.ToGetSchemaRegistryClusterModeSchemaRegistryClusterOutputWithContext(context.Background())
}

func (i GetSchemaRegistryClusterModeSchemaRegistryClusterArgs) ToGetSchemaRegistryClusterModeSchemaRegistryClusterOutputWithContext(ctx context.Context) GetSchemaRegistryClusterModeSchemaRegistryClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemaRegistryClusterModeSchemaRegistryClusterOutput)
}

func (i GetSchemaRegistryClusterModeSchemaRegistryClusterArgs) ToOutput(ctx context.Context) pulumix.Output[GetSchemaRegistryClusterModeSchemaRegistryCluster] {
	return pulumix.Output[GetSchemaRegistryClusterModeSchemaRegistryCluster]{
		OutputState: i.ToGetSchemaRegistryClusterModeSchemaRegistryClusterOutputWithContext(ctx).OutputState,
	}
}

func (i GetSchemaRegistryClusterModeSchemaRegistryClusterArgs) ToGetSchemaRegistryClusterModeSchemaRegistryClusterPtrOutput() GetSchemaRegistryClusterModeSchemaRegistryClusterPtrOutput {
	return i.ToGetSchemaRegistryClusterModeSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (i GetSchemaRegistryClusterModeSchemaRegistryClusterArgs) ToGetSchemaRegistryClusterModeSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetSchemaRegistryClusterModeSchemaRegistryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemaRegistryClusterModeSchemaRegistryClusterOutput).ToGetSchemaRegistryClusterModeSchemaRegistryClusterPtrOutputWithContext(ctx)
}

// GetSchemaRegistryClusterModeSchemaRegistryClusterPtrInput is an input type that accepts GetSchemaRegistryClusterModeSchemaRegistryClusterArgs, GetSchemaRegistryClusterModeSchemaRegistryClusterPtr and GetSchemaRegistryClusterModeSchemaRegistryClusterPtrOutput values.
// You can construct a concrete instance of `GetSchemaRegistryClusterModeSchemaRegistryClusterPtrInput` via:
//
//	        GetSchemaRegistryClusterModeSchemaRegistryClusterArgs{...}
//
//	or:
//
//	        nil
type GetSchemaRegistryClusterModeSchemaRegistryClusterPtrInput interface {
	pulumi.Input

	ToGetSchemaRegistryClusterModeSchemaRegistryClusterPtrOutput() GetSchemaRegistryClusterModeSchemaRegistryClusterPtrOutput
	ToGetSchemaRegistryClusterModeSchemaRegistryClusterPtrOutputWithContext(context.Context) GetSchemaRegistryClusterModeSchemaRegistryClusterPtrOutput
}

type getSchemaRegistryClusterModeSchemaRegistryClusterPtrType GetSchemaRegistryClusterModeSchemaRegistryClusterArgs

func GetSchemaRegistryClusterModeSchemaRegistryClusterPtr(v *GetSchemaRegistryClusterModeSchemaRegistryClusterArgs) GetSchemaRegistryClusterModeSchemaRegistryClusterPtrInput {
	return (*getSchemaRegistryClusterModeSchemaRegistryClusterPtrType)(v)
}

func (*getSchemaRegistryClusterModeSchemaRegistryClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSchemaRegistryClusterModeSchemaRegistryCluster)(nil)).Elem()
}

func (i *getSchemaRegistryClusterModeSchemaRegistryClusterPtrType) ToGetSchemaRegistryClusterModeSchemaRegistryClusterPtrOutput() GetSchemaRegistryClusterModeSchemaRegistryClusterPtrOutput {
	return i.ToGetSchemaRegistryClusterModeSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (i *getSchemaRegistryClusterModeSchemaRegistryClusterPtrType) ToGetSchemaRegistryClusterModeSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetSchemaRegistryClusterModeSchemaRegistryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemaRegistryClusterModeSchemaRegistryClusterPtrOutput)
}

func (i *getSchemaRegistryClusterModeSchemaRegistryClusterPtrType) ToOutput(ctx context.Context) pulumix.Output[*GetSchemaRegistryClusterModeSchemaRegistryCluster] {
	return pulumix.Output[*GetSchemaRegistryClusterModeSchemaRegistryCluster]{
		OutputState: i.ToGetSchemaRegistryClusterModeSchemaRegistryClusterPtrOutputWithContext(ctx).OutputState,
	}
}

type GetSchemaRegistryClusterModeSchemaRegistryClusterOutput struct{ *pulumi.OutputState }

func (GetSchemaRegistryClusterModeSchemaRegistryClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemaRegistryClusterModeSchemaRegistryCluster)(nil)).Elem()
}

func (o GetSchemaRegistryClusterModeSchemaRegistryClusterOutput) ToGetSchemaRegistryClusterModeSchemaRegistryClusterOutput() GetSchemaRegistryClusterModeSchemaRegistryClusterOutput {
	return o
}

func (o GetSchemaRegistryClusterModeSchemaRegistryClusterOutput) ToGetSchemaRegistryClusterModeSchemaRegistryClusterOutputWithContext(ctx context.Context) GetSchemaRegistryClusterModeSchemaRegistryClusterOutput {
	return o
}

func (o GetSchemaRegistryClusterModeSchemaRegistryClusterOutput) ToGetSchemaRegistryClusterModeSchemaRegistryClusterPtrOutput() GetSchemaRegistryClusterModeSchemaRegistryClusterPtrOutput {
	return o.ToGetSchemaRegistryClusterModeSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (o GetSchemaRegistryClusterModeSchemaRegistryClusterOutput) ToGetSchemaRegistryClusterModeSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetSchemaRegistryClusterModeSchemaRegistryClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetSchemaRegistryClusterModeSchemaRegistryCluster) *GetSchemaRegistryClusterModeSchemaRegistryCluster {
		return &v
	}).(GetSchemaRegistryClusterModeSchemaRegistryClusterPtrOutput)
}

func (o GetSchemaRegistryClusterModeSchemaRegistryClusterOutput) ToOutput(ctx context.Context) pulumix.Output[GetSchemaRegistryClusterModeSchemaRegistryCluster] {
	return pulumix.Output[GetSchemaRegistryClusterModeSchemaRegistryCluster]{
		OutputState: o.OutputState,
	}
}

// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
func (o GetSchemaRegistryClusterModeSchemaRegistryClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemaRegistryClusterModeSchemaRegistryCluster) string { return v.Id }).(pulumi.StringOutput)
}

type GetSchemaRegistryClusterModeSchemaRegistryClusterPtrOutput struct{ *pulumi.OutputState }

func (GetSchemaRegistryClusterModeSchemaRegistryClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSchemaRegistryClusterModeSchemaRegistryCluster)(nil)).Elem()
}

func (o GetSchemaRegistryClusterModeSchemaRegistryClusterPtrOutput) ToGetSchemaRegistryClusterModeSchemaRegistryClusterPtrOutput() GetSchemaRegistryClusterModeSchemaRegistryClusterPtrOutput {
	return o
}

func (o GetSchemaRegistryClusterModeSchemaRegistryClusterPtrOutput) ToGetSchemaRegistryClusterModeSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetSchemaRegistryClusterModeSchemaRegistryClusterPtrOutput {
	return o
}

func (o GetSchemaRegistryClusterModeSchemaRegistryClusterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GetSchemaRegistryClusterModeSchemaRegistryCluster] {
	return pulumix.Output[*GetSchemaRegistryClusterModeSchemaRegistryCluster]{
		OutputState: o.OutputState,
	}
}

func (o GetSchemaRegistryClusterModeSchemaRegistryClusterPtrOutput) Elem() GetSchemaRegistryClusterModeSchemaRegistryClusterOutput {
	return o.ApplyT(func(v *GetSchemaRegistryClusterModeSchemaRegistryCluster) GetSchemaRegistryClusterModeSchemaRegistryCluster {
		if v != nil {
			return *v
		}
		var ret GetSchemaRegistryClusterModeSchemaRegistryCluster
		return ret
	}).(GetSchemaRegistryClusterModeSchemaRegistryClusterOutput)
}

// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
func (o GetSchemaRegistryClusterModeSchemaRegistryClusterPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetSchemaRegistryClusterModeSchemaRegistryCluster) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type GetSchemaRegistryClusterRegion struct {
	// The ID of the Environment that the Schema Registry cluster belongs to, for example, `env-xyz456`.
	//
	// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
	Id string `pulumi:"id"`
}

// GetSchemaRegistryClusterRegionInput is an input type that accepts GetSchemaRegistryClusterRegionArgs and GetSchemaRegistryClusterRegionOutput values.
// You can construct a concrete instance of `GetSchemaRegistryClusterRegionInput` via:
//
//	GetSchemaRegistryClusterRegionArgs{...}
type GetSchemaRegistryClusterRegionInput interface {
	pulumi.Input

	ToGetSchemaRegistryClusterRegionOutput() GetSchemaRegistryClusterRegionOutput
	ToGetSchemaRegistryClusterRegionOutputWithContext(context.Context) GetSchemaRegistryClusterRegionOutput
}

type GetSchemaRegistryClusterRegionArgs struct {
	// The ID of the Environment that the Schema Registry cluster belongs to, for example, `env-xyz456`.
	//
	// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetSchemaRegistryClusterRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemaRegistryClusterRegion)(nil)).Elem()
}

func (i GetSchemaRegistryClusterRegionArgs) ToGetSchemaRegistryClusterRegionOutput() GetSchemaRegistryClusterRegionOutput {
	return i.ToGetSchemaRegistryClusterRegionOutputWithContext(context.Background())
}

func (i GetSchemaRegistryClusterRegionArgs) ToGetSchemaRegistryClusterRegionOutputWithContext(ctx context.Context) GetSchemaRegistryClusterRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemaRegistryClusterRegionOutput)
}

func (i GetSchemaRegistryClusterRegionArgs) ToOutput(ctx context.Context) pulumix.Output[GetSchemaRegistryClusterRegion] {
	return pulumix.Output[GetSchemaRegistryClusterRegion]{
		OutputState: i.ToGetSchemaRegistryClusterRegionOutputWithContext(ctx).OutputState,
	}
}

// GetSchemaRegistryClusterRegionArrayInput is an input type that accepts GetSchemaRegistryClusterRegionArray and GetSchemaRegistryClusterRegionArrayOutput values.
// You can construct a concrete instance of `GetSchemaRegistryClusterRegionArrayInput` via:
//
//	GetSchemaRegistryClusterRegionArray{ GetSchemaRegistryClusterRegionArgs{...} }
type GetSchemaRegistryClusterRegionArrayInput interface {
	pulumi.Input

	ToGetSchemaRegistryClusterRegionArrayOutput() GetSchemaRegistryClusterRegionArrayOutput
	ToGetSchemaRegistryClusterRegionArrayOutputWithContext(context.Context) GetSchemaRegistryClusterRegionArrayOutput
}

type GetSchemaRegistryClusterRegionArray []GetSchemaRegistryClusterRegionInput

func (GetSchemaRegistryClusterRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSchemaRegistryClusterRegion)(nil)).Elem()
}

func (i GetSchemaRegistryClusterRegionArray) ToGetSchemaRegistryClusterRegionArrayOutput() GetSchemaRegistryClusterRegionArrayOutput {
	return i.ToGetSchemaRegistryClusterRegionArrayOutputWithContext(context.Background())
}

func (i GetSchemaRegistryClusterRegionArray) ToGetSchemaRegistryClusterRegionArrayOutputWithContext(ctx context.Context) GetSchemaRegistryClusterRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemaRegistryClusterRegionArrayOutput)
}

func (i GetSchemaRegistryClusterRegionArray) ToOutput(ctx context.Context) pulumix.Output[[]GetSchemaRegistryClusterRegion] {
	return pulumix.Output[[]GetSchemaRegistryClusterRegion]{
		OutputState: i.ToGetSchemaRegistryClusterRegionArrayOutputWithContext(ctx).OutputState,
	}
}

type GetSchemaRegistryClusterRegionOutput struct{ *pulumi.OutputState }

func (GetSchemaRegistryClusterRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemaRegistryClusterRegion)(nil)).Elem()
}

func (o GetSchemaRegistryClusterRegionOutput) ToGetSchemaRegistryClusterRegionOutput() GetSchemaRegistryClusterRegionOutput {
	return o
}

func (o GetSchemaRegistryClusterRegionOutput) ToGetSchemaRegistryClusterRegionOutputWithContext(ctx context.Context) GetSchemaRegistryClusterRegionOutput {
	return o
}

func (o GetSchemaRegistryClusterRegionOutput) ToOutput(ctx context.Context) pulumix.Output[GetSchemaRegistryClusterRegion] {
	return pulumix.Output[GetSchemaRegistryClusterRegion]{
		OutputState: o.OutputState,
	}
}

// The ID of the Environment that the Schema Registry cluster belongs to, for example, `env-xyz456`.
//
// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
func (o GetSchemaRegistryClusterRegionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemaRegistryClusterRegion) string { return v.Id }).(pulumi.StringOutput)
}

type GetSchemaRegistryClusterRegionArrayOutput struct{ *pulumi.OutputState }

func (GetSchemaRegistryClusterRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSchemaRegistryClusterRegion)(nil)).Elem()
}

func (o GetSchemaRegistryClusterRegionArrayOutput) ToGetSchemaRegistryClusterRegionArrayOutput() GetSchemaRegistryClusterRegionArrayOutput {
	return o
}

func (o GetSchemaRegistryClusterRegionArrayOutput) ToGetSchemaRegistryClusterRegionArrayOutputWithContext(ctx context.Context) GetSchemaRegistryClusterRegionArrayOutput {
	return o
}

func (o GetSchemaRegistryClusterRegionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetSchemaRegistryClusterRegion] {
	return pulumix.Output[[]GetSchemaRegistryClusterRegion]{
		OutputState: o.OutputState,
	}
}

func (o GetSchemaRegistryClusterRegionArrayOutput) Index(i pulumi.IntInput) GetSchemaRegistryClusterRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSchemaRegistryClusterRegion {
		return vs[0].([]GetSchemaRegistryClusterRegion)[vs[1].(int)]
	}).(GetSchemaRegistryClusterRegionOutput)
}

type GetSchemaRegistryClustersCluster struct {
	// (Required String) An API Version of the schema version of the Schema Registry cluster, for example, `stream-governance/v2`.
	ApiVersion string `pulumi:"apiVersion"`
	// (Required String) The name of the Schema Registry cluster, for example, `Stream Governance Package`.
	DisplayName string `pulumi:"displayName"`
	// (Required Object) exports the following attributes:
	Environment GetSchemaRegistryClustersClusterEnvironment `pulumi:"environment"`
	// (Required String) The ID of the Schema Registry region that the Schema Registry cluster belongs to, for example, `sgreg-1`. See Schema Registry Regions.
	Id string `pulumi:"id"`
	// (Required String) A kind of the Schema Registry cluster, for example, `Cluster`.
	Kind string `pulumi:"kind"`
	// (Required String) The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.
	Package string `pulumi:"package"`
	// (Required Configuration Block) supports the following:
	Regions []GetSchemaRegistryClustersClusterRegion `pulumi:"regions"`
	// (Required String) The Confluent Resource Name of the Schema Registry cluster, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/schema-registry=lsrc-abc123`.
	ResourceName string `pulumi:"resourceName"`
	// (Required String) The HTTP endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-west-2.aws.confluent.cloud`.
	RestEndpoint string `pulumi:"restEndpoint"`
}

// GetSchemaRegistryClustersClusterInput is an input type that accepts GetSchemaRegistryClustersClusterArgs and GetSchemaRegistryClustersClusterOutput values.
// You can construct a concrete instance of `GetSchemaRegistryClustersClusterInput` via:
//
//	GetSchemaRegistryClustersClusterArgs{...}
type GetSchemaRegistryClustersClusterInput interface {
	pulumi.Input

	ToGetSchemaRegistryClustersClusterOutput() GetSchemaRegistryClustersClusterOutput
	ToGetSchemaRegistryClustersClusterOutputWithContext(context.Context) GetSchemaRegistryClustersClusterOutput
}

type GetSchemaRegistryClustersClusterArgs struct {
	// (Required String) An API Version of the schema version of the Schema Registry cluster, for example, `stream-governance/v2`.
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`
	// (Required String) The name of the Schema Registry cluster, for example, `Stream Governance Package`.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// (Required Object) exports the following attributes:
	Environment GetSchemaRegistryClustersClusterEnvironmentInput `pulumi:"environment"`
	// (Required String) The ID of the Schema Registry region that the Schema Registry cluster belongs to, for example, `sgreg-1`. See Schema Registry Regions.
	Id pulumi.StringInput `pulumi:"id"`
	// (Required String) A kind of the Schema Registry cluster, for example, `Cluster`.
	Kind pulumi.StringInput `pulumi:"kind"`
	// (Required String) The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.
	Package pulumi.StringInput `pulumi:"package"`
	// (Required Configuration Block) supports the following:
	Regions GetSchemaRegistryClustersClusterRegionArrayInput `pulumi:"regions"`
	// (Required String) The Confluent Resource Name of the Schema Registry cluster, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/schema-registry=lsrc-abc123`.
	ResourceName pulumi.StringInput `pulumi:"resourceName"`
	// (Required String) The HTTP endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-west-2.aws.confluent.cloud`.
	RestEndpoint pulumi.StringInput `pulumi:"restEndpoint"`
}

func (GetSchemaRegistryClustersClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemaRegistryClustersCluster)(nil)).Elem()
}

func (i GetSchemaRegistryClustersClusterArgs) ToGetSchemaRegistryClustersClusterOutput() GetSchemaRegistryClustersClusterOutput {
	return i.ToGetSchemaRegistryClustersClusterOutputWithContext(context.Background())
}

func (i GetSchemaRegistryClustersClusterArgs) ToGetSchemaRegistryClustersClusterOutputWithContext(ctx context.Context) GetSchemaRegistryClustersClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemaRegistryClustersClusterOutput)
}

func (i GetSchemaRegistryClustersClusterArgs) ToOutput(ctx context.Context) pulumix.Output[GetSchemaRegistryClustersCluster] {
	return pulumix.Output[GetSchemaRegistryClustersCluster]{
		OutputState: i.ToGetSchemaRegistryClustersClusterOutputWithContext(ctx).OutputState,
	}
}

// GetSchemaRegistryClustersClusterArrayInput is an input type that accepts GetSchemaRegistryClustersClusterArray and GetSchemaRegistryClustersClusterArrayOutput values.
// You can construct a concrete instance of `GetSchemaRegistryClustersClusterArrayInput` via:
//
//	GetSchemaRegistryClustersClusterArray{ GetSchemaRegistryClustersClusterArgs{...} }
type GetSchemaRegistryClustersClusterArrayInput interface {
	pulumi.Input

	ToGetSchemaRegistryClustersClusterArrayOutput() GetSchemaRegistryClustersClusterArrayOutput
	ToGetSchemaRegistryClustersClusterArrayOutputWithContext(context.Context) GetSchemaRegistryClustersClusterArrayOutput
}

type GetSchemaRegistryClustersClusterArray []GetSchemaRegistryClustersClusterInput

func (GetSchemaRegistryClustersClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSchemaRegistryClustersCluster)(nil)).Elem()
}

func (i GetSchemaRegistryClustersClusterArray) ToGetSchemaRegistryClustersClusterArrayOutput() GetSchemaRegistryClustersClusterArrayOutput {
	return i.ToGetSchemaRegistryClustersClusterArrayOutputWithContext(context.Background())
}

func (i GetSchemaRegistryClustersClusterArray) ToGetSchemaRegistryClustersClusterArrayOutputWithContext(ctx context.Context) GetSchemaRegistryClustersClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemaRegistryClustersClusterArrayOutput)
}

func (i GetSchemaRegistryClustersClusterArray) ToOutput(ctx context.Context) pulumix.Output[[]GetSchemaRegistryClustersCluster] {
	return pulumix.Output[[]GetSchemaRegistryClustersCluster]{
		OutputState: i.ToGetSchemaRegistryClustersClusterArrayOutputWithContext(ctx).OutputState,
	}
}

type GetSchemaRegistryClustersClusterOutput struct{ *pulumi.OutputState }

func (GetSchemaRegistryClustersClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemaRegistryClustersCluster)(nil)).Elem()
}

func (o GetSchemaRegistryClustersClusterOutput) ToGetSchemaRegistryClustersClusterOutput() GetSchemaRegistryClustersClusterOutput {
	return o
}

func (o GetSchemaRegistryClustersClusterOutput) ToGetSchemaRegistryClustersClusterOutputWithContext(ctx context.Context) GetSchemaRegistryClustersClusterOutput {
	return o
}

func (o GetSchemaRegistryClustersClusterOutput) ToOutput(ctx context.Context) pulumix.Output[GetSchemaRegistryClustersCluster] {
	return pulumix.Output[GetSchemaRegistryClustersCluster]{
		OutputState: o.OutputState,
	}
}

// (Required String) An API Version of the schema version of the Schema Registry cluster, for example, `stream-governance/v2`.
func (o GetSchemaRegistryClustersClusterOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemaRegistryClustersCluster) string { return v.ApiVersion }).(pulumi.StringOutput)
}

// (Required String) The name of the Schema Registry cluster, for example, `Stream Governance Package`.
func (o GetSchemaRegistryClustersClusterOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemaRegistryClustersCluster) string { return v.DisplayName }).(pulumi.StringOutput)
}

// (Required Object) exports the following attributes:
func (o GetSchemaRegistryClustersClusterOutput) Environment() GetSchemaRegistryClustersClusterEnvironmentOutput {
	return o.ApplyT(func(v GetSchemaRegistryClustersCluster) GetSchemaRegistryClustersClusterEnvironment {
		return v.Environment
	}).(GetSchemaRegistryClustersClusterEnvironmentOutput)
}

// (Required String) The ID of the Schema Registry region that the Schema Registry cluster belongs to, for example, `sgreg-1`. See Schema Registry Regions.
func (o GetSchemaRegistryClustersClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemaRegistryClustersCluster) string { return v.Id }).(pulumi.StringOutput)
}

// (Required String) A kind of the Schema Registry cluster, for example, `Cluster`.
func (o GetSchemaRegistryClustersClusterOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemaRegistryClustersCluster) string { return v.Kind }).(pulumi.StringOutput)
}

// (Required String) The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.
func (o GetSchemaRegistryClustersClusterOutput) Package() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemaRegistryClustersCluster) string { return v.Package }).(pulumi.StringOutput)
}

// (Required Configuration Block) supports the following:
func (o GetSchemaRegistryClustersClusterOutput) Regions() GetSchemaRegistryClustersClusterRegionArrayOutput {
	return o.ApplyT(func(v GetSchemaRegistryClustersCluster) []GetSchemaRegistryClustersClusterRegion { return v.Regions }).(GetSchemaRegistryClustersClusterRegionArrayOutput)
}

// (Required String) The Confluent Resource Name of the Schema Registry cluster, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/schema-registry=lsrc-abc123`.
func (o GetSchemaRegistryClustersClusterOutput) ResourceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemaRegistryClustersCluster) string { return v.ResourceName }).(pulumi.StringOutput)
}

// (Required String) The HTTP endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-west-2.aws.confluent.cloud`.
func (o GetSchemaRegistryClustersClusterOutput) RestEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemaRegistryClustersCluster) string { return v.RestEndpoint }).(pulumi.StringOutput)
}

type GetSchemaRegistryClustersClusterArrayOutput struct{ *pulumi.OutputState }

func (GetSchemaRegistryClustersClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSchemaRegistryClustersCluster)(nil)).Elem()
}

func (o GetSchemaRegistryClustersClusterArrayOutput) ToGetSchemaRegistryClustersClusterArrayOutput() GetSchemaRegistryClustersClusterArrayOutput {
	return o
}

func (o GetSchemaRegistryClustersClusterArrayOutput) ToGetSchemaRegistryClustersClusterArrayOutputWithContext(ctx context.Context) GetSchemaRegistryClustersClusterArrayOutput {
	return o
}

func (o GetSchemaRegistryClustersClusterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetSchemaRegistryClustersCluster] {
	return pulumix.Output[[]GetSchemaRegistryClustersCluster]{
		OutputState: o.OutputState,
	}
}

func (o GetSchemaRegistryClustersClusterArrayOutput) Index(i pulumi.IntInput) GetSchemaRegistryClustersClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSchemaRegistryClustersCluster {
		return vs[0].([]GetSchemaRegistryClustersCluster)[vs[1].(int)]
	}).(GetSchemaRegistryClustersClusterOutput)
}

type GetSchemaRegistryClustersClusterEnvironment struct {
	// (Required String) The ID of the Schema Registry region that the Schema Registry cluster belongs to, for example, `sgreg-1`. See Schema Registry Regions.
	Id string `pulumi:"id"`
}

// GetSchemaRegistryClustersClusterEnvironmentInput is an input type that accepts GetSchemaRegistryClustersClusterEnvironmentArgs and GetSchemaRegistryClustersClusterEnvironmentOutput values.
// You can construct a concrete instance of `GetSchemaRegistryClustersClusterEnvironmentInput` via:
//
//	GetSchemaRegistryClustersClusterEnvironmentArgs{...}
type GetSchemaRegistryClustersClusterEnvironmentInput interface {
	pulumi.Input

	ToGetSchemaRegistryClustersClusterEnvironmentOutput() GetSchemaRegistryClustersClusterEnvironmentOutput
	ToGetSchemaRegistryClustersClusterEnvironmentOutputWithContext(context.Context) GetSchemaRegistryClustersClusterEnvironmentOutput
}

type GetSchemaRegistryClustersClusterEnvironmentArgs struct {
	// (Required String) The ID of the Schema Registry region that the Schema Registry cluster belongs to, for example, `sgreg-1`. See Schema Registry Regions.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetSchemaRegistryClustersClusterEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemaRegistryClustersClusterEnvironment)(nil)).Elem()
}

func (i GetSchemaRegistryClustersClusterEnvironmentArgs) ToGetSchemaRegistryClustersClusterEnvironmentOutput() GetSchemaRegistryClustersClusterEnvironmentOutput {
	return i.ToGetSchemaRegistryClustersClusterEnvironmentOutputWithContext(context.Background())
}

func (i GetSchemaRegistryClustersClusterEnvironmentArgs) ToGetSchemaRegistryClustersClusterEnvironmentOutputWithContext(ctx context.Context) GetSchemaRegistryClustersClusterEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemaRegistryClustersClusterEnvironmentOutput)
}

func (i GetSchemaRegistryClustersClusterEnvironmentArgs) ToOutput(ctx context.Context) pulumix.Output[GetSchemaRegistryClustersClusterEnvironment] {
	return pulumix.Output[GetSchemaRegistryClustersClusterEnvironment]{
		OutputState: i.ToGetSchemaRegistryClustersClusterEnvironmentOutputWithContext(ctx).OutputState,
	}
}

type GetSchemaRegistryClustersClusterEnvironmentOutput struct{ *pulumi.OutputState }

func (GetSchemaRegistryClustersClusterEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemaRegistryClustersClusterEnvironment)(nil)).Elem()
}

func (o GetSchemaRegistryClustersClusterEnvironmentOutput) ToGetSchemaRegistryClustersClusterEnvironmentOutput() GetSchemaRegistryClustersClusterEnvironmentOutput {
	return o
}

func (o GetSchemaRegistryClustersClusterEnvironmentOutput) ToGetSchemaRegistryClustersClusterEnvironmentOutputWithContext(ctx context.Context) GetSchemaRegistryClustersClusterEnvironmentOutput {
	return o
}

func (o GetSchemaRegistryClustersClusterEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[GetSchemaRegistryClustersClusterEnvironment] {
	return pulumix.Output[GetSchemaRegistryClustersClusterEnvironment]{
		OutputState: o.OutputState,
	}
}

// (Required String) The ID of the Schema Registry region that the Schema Registry cluster belongs to, for example, `sgreg-1`. See Schema Registry Regions.
func (o GetSchemaRegistryClustersClusterEnvironmentOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemaRegistryClustersClusterEnvironment) string { return v.Id }).(pulumi.StringOutput)
}

type GetSchemaRegistryClustersClusterRegion struct {
	// (Required String) The ID of the Schema Registry region that the Schema Registry cluster belongs to, for example, `sgreg-1`. See Schema Registry Regions.
	Id string `pulumi:"id"`
}

// GetSchemaRegistryClustersClusterRegionInput is an input type that accepts GetSchemaRegistryClustersClusterRegionArgs and GetSchemaRegistryClustersClusterRegionOutput values.
// You can construct a concrete instance of `GetSchemaRegistryClustersClusterRegionInput` via:
//
//	GetSchemaRegistryClustersClusterRegionArgs{...}
type GetSchemaRegistryClustersClusterRegionInput interface {
	pulumi.Input

	ToGetSchemaRegistryClustersClusterRegionOutput() GetSchemaRegistryClustersClusterRegionOutput
	ToGetSchemaRegistryClustersClusterRegionOutputWithContext(context.Context) GetSchemaRegistryClustersClusterRegionOutput
}

type GetSchemaRegistryClustersClusterRegionArgs struct {
	// (Required String) The ID of the Schema Registry region that the Schema Registry cluster belongs to, for example, `sgreg-1`. See Schema Registry Regions.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetSchemaRegistryClustersClusterRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemaRegistryClustersClusterRegion)(nil)).Elem()
}

func (i GetSchemaRegistryClustersClusterRegionArgs) ToGetSchemaRegistryClustersClusterRegionOutput() GetSchemaRegistryClustersClusterRegionOutput {
	return i.ToGetSchemaRegistryClustersClusterRegionOutputWithContext(context.Background())
}

func (i GetSchemaRegistryClustersClusterRegionArgs) ToGetSchemaRegistryClustersClusterRegionOutputWithContext(ctx context.Context) GetSchemaRegistryClustersClusterRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemaRegistryClustersClusterRegionOutput)
}

func (i GetSchemaRegistryClustersClusterRegionArgs) ToOutput(ctx context.Context) pulumix.Output[GetSchemaRegistryClustersClusterRegion] {
	return pulumix.Output[GetSchemaRegistryClustersClusterRegion]{
		OutputState: i.ToGetSchemaRegistryClustersClusterRegionOutputWithContext(ctx).OutputState,
	}
}

// GetSchemaRegistryClustersClusterRegionArrayInput is an input type that accepts GetSchemaRegistryClustersClusterRegionArray and GetSchemaRegistryClustersClusterRegionArrayOutput values.
// You can construct a concrete instance of `GetSchemaRegistryClustersClusterRegionArrayInput` via:
//
//	GetSchemaRegistryClustersClusterRegionArray{ GetSchemaRegistryClustersClusterRegionArgs{...} }
type GetSchemaRegistryClustersClusterRegionArrayInput interface {
	pulumi.Input

	ToGetSchemaRegistryClustersClusterRegionArrayOutput() GetSchemaRegistryClustersClusterRegionArrayOutput
	ToGetSchemaRegistryClustersClusterRegionArrayOutputWithContext(context.Context) GetSchemaRegistryClustersClusterRegionArrayOutput
}

type GetSchemaRegistryClustersClusterRegionArray []GetSchemaRegistryClustersClusterRegionInput

func (GetSchemaRegistryClustersClusterRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSchemaRegistryClustersClusterRegion)(nil)).Elem()
}

func (i GetSchemaRegistryClustersClusterRegionArray) ToGetSchemaRegistryClustersClusterRegionArrayOutput() GetSchemaRegistryClustersClusterRegionArrayOutput {
	return i.ToGetSchemaRegistryClustersClusterRegionArrayOutputWithContext(context.Background())
}

func (i GetSchemaRegistryClustersClusterRegionArray) ToGetSchemaRegistryClustersClusterRegionArrayOutputWithContext(ctx context.Context) GetSchemaRegistryClustersClusterRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemaRegistryClustersClusterRegionArrayOutput)
}

func (i GetSchemaRegistryClustersClusterRegionArray) ToOutput(ctx context.Context) pulumix.Output[[]GetSchemaRegistryClustersClusterRegion] {
	return pulumix.Output[[]GetSchemaRegistryClustersClusterRegion]{
		OutputState: i.ToGetSchemaRegistryClustersClusterRegionArrayOutputWithContext(ctx).OutputState,
	}
}

type GetSchemaRegistryClustersClusterRegionOutput struct{ *pulumi.OutputState }

func (GetSchemaRegistryClustersClusterRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemaRegistryClustersClusterRegion)(nil)).Elem()
}

func (o GetSchemaRegistryClustersClusterRegionOutput) ToGetSchemaRegistryClustersClusterRegionOutput() GetSchemaRegistryClustersClusterRegionOutput {
	return o
}

func (o GetSchemaRegistryClustersClusterRegionOutput) ToGetSchemaRegistryClustersClusterRegionOutputWithContext(ctx context.Context) GetSchemaRegistryClustersClusterRegionOutput {
	return o
}

func (o GetSchemaRegistryClustersClusterRegionOutput) ToOutput(ctx context.Context) pulumix.Output[GetSchemaRegistryClustersClusterRegion] {
	return pulumix.Output[GetSchemaRegistryClustersClusterRegion]{
		OutputState: o.OutputState,
	}
}

// (Required String) The ID of the Schema Registry region that the Schema Registry cluster belongs to, for example, `sgreg-1`. See Schema Registry Regions.
func (o GetSchemaRegistryClustersClusterRegionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemaRegistryClustersClusterRegion) string { return v.Id }).(pulumi.StringOutput)
}

type GetSchemaRegistryClustersClusterRegionArrayOutput struct{ *pulumi.OutputState }

func (GetSchemaRegistryClustersClusterRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSchemaRegistryClustersClusterRegion)(nil)).Elem()
}

func (o GetSchemaRegistryClustersClusterRegionArrayOutput) ToGetSchemaRegistryClustersClusterRegionArrayOutput() GetSchemaRegistryClustersClusterRegionArrayOutput {
	return o
}

func (o GetSchemaRegistryClustersClusterRegionArrayOutput) ToGetSchemaRegistryClustersClusterRegionArrayOutputWithContext(ctx context.Context) GetSchemaRegistryClustersClusterRegionArrayOutput {
	return o
}

func (o GetSchemaRegistryClustersClusterRegionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetSchemaRegistryClustersClusterRegion] {
	return pulumix.Output[[]GetSchemaRegistryClustersClusterRegion]{
		OutputState: o.OutputState,
	}
}

func (o GetSchemaRegistryClustersClusterRegionArrayOutput) Index(i pulumi.IntInput) GetSchemaRegistryClustersClusterRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSchemaRegistryClustersClusterRegion {
		return vs[0].([]GetSchemaRegistryClustersClusterRegion)[vs[1].(int)]
	}).(GetSchemaRegistryClustersClusterRegionOutput)
}

type GetSchemaSchemaReference struct {
	// (Required String) The name of the subject, representing the subject under which the referenced schema is registered.
	Name string `pulumi:"name"`
	// The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`. Schemas evolve safely, following a compatibility mode defined, under a subject name.
	SubjectName string `pulumi:"subjectName"`
	// (Required Integer) The version of the Schema, for example, `4`.
	Version int `pulumi:"version"`
}

// GetSchemaSchemaReferenceInput is an input type that accepts GetSchemaSchemaReferenceArgs and GetSchemaSchemaReferenceOutput values.
// You can construct a concrete instance of `GetSchemaSchemaReferenceInput` via:
//
//	GetSchemaSchemaReferenceArgs{...}
type GetSchemaSchemaReferenceInput interface {
	pulumi.Input

	ToGetSchemaSchemaReferenceOutput() GetSchemaSchemaReferenceOutput
	ToGetSchemaSchemaReferenceOutputWithContext(context.Context) GetSchemaSchemaReferenceOutput
}

type GetSchemaSchemaReferenceArgs struct {
	// (Required String) The name of the subject, representing the subject under which the referenced schema is registered.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`. Schemas evolve safely, following a compatibility mode defined, under a subject name.
	SubjectName pulumi.StringInput `pulumi:"subjectName"`
	// (Required Integer) The version of the Schema, for example, `4`.
	Version pulumi.IntInput `pulumi:"version"`
}

func (GetSchemaSchemaReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemaSchemaReference)(nil)).Elem()
}

func (i GetSchemaSchemaReferenceArgs) ToGetSchemaSchemaReferenceOutput() GetSchemaSchemaReferenceOutput {
	return i.ToGetSchemaSchemaReferenceOutputWithContext(context.Background())
}

func (i GetSchemaSchemaReferenceArgs) ToGetSchemaSchemaReferenceOutputWithContext(ctx context.Context) GetSchemaSchemaReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemaSchemaReferenceOutput)
}

func (i GetSchemaSchemaReferenceArgs) ToOutput(ctx context.Context) pulumix.Output[GetSchemaSchemaReference] {
	return pulumix.Output[GetSchemaSchemaReference]{
		OutputState: i.ToGetSchemaSchemaReferenceOutputWithContext(ctx).OutputState,
	}
}

// GetSchemaSchemaReferenceArrayInput is an input type that accepts GetSchemaSchemaReferenceArray and GetSchemaSchemaReferenceArrayOutput values.
// You can construct a concrete instance of `GetSchemaSchemaReferenceArrayInput` via:
//
//	GetSchemaSchemaReferenceArray{ GetSchemaSchemaReferenceArgs{...} }
type GetSchemaSchemaReferenceArrayInput interface {
	pulumi.Input

	ToGetSchemaSchemaReferenceArrayOutput() GetSchemaSchemaReferenceArrayOutput
	ToGetSchemaSchemaReferenceArrayOutputWithContext(context.Context) GetSchemaSchemaReferenceArrayOutput
}

type GetSchemaSchemaReferenceArray []GetSchemaSchemaReferenceInput

func (GetSchemaSchemaReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSchemaSchemaReference)(nil)).Elem()
}

func (i GetSchemaSchemaReferenceArray) ToGetSchemaSchemaReferenceArrayOutput() GetSchemaSchemaReferenceArrayOutput {
	return i.ToGetSchemaSchemaReferenceArrayOutputWithContext(context.Background())
}

func (i GetSchemaSchemaReferenceArray) ToGetSchemaSchemaReferenceArrayOutputWithContext(ctx context.Context) GetSchemaSchemaReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemaSchemaReferenceArrayOutput)
}

func (i GetSchemaSchemaReferenceArray) ToOutput(ctx context.Context) pulumix.Output[[]GetSchemaSchemaReference] {
	return pulumix.Output[[]GetSchemaSchemaReference]{
		OutputState: i.ToGetSchemaSchemaReferenceArrayOutputWithContext(ctx).OutputState,
	}
}

type GetSchemaSchemaReferenceOutput struct{ *pulumi.OutputState }

func (GetSchemaSchemaReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemaSchemaReference)(nil)).Elem()
}

func (o GetSchemaSchemaReferenceOutput) ToGetSchemaSchemaReferenceOutput() GetSchemaSchemaReferenceOutput {
	return o
}

func (o GetSchemaSchemaReferenceOutput) ToGetSchemaSchemaReferenceOutputWithContext(ctx context.Context) GetSchemaSchemaReferenceOutput {
	return o
}

func (o GetSchemaSchemaReferenceOutput) ToOutput(ctx context.Context) pulumix.Output[GetSchemaSchemaReference] {
	return pulumix.Output[GetSchemaSchemaReference]{
		OutputState: o.OutputState,
	}
}

// (Required String) The name of the subject, representing the subject under which the referenced schema is registered.
func (o GetSchemaSchemaReferenceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemaSchemaReference) string { return v.Name }).(pulumi.StringOutput)
}

// The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`. Schemas evolve safely, following a compatibility mode defined, under a subject name.
func (o GetSchemaSchemaReferenceOutput) SubjectName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemaSchemaReference) string { return v.SubjectName }).(pulumi.StringOutput)
}

// (Required Integer) The version of the Schema, for example, `4`.
func (o GetSchemaSchemaReferenceOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v GetSchemaSchemaReference) int { return v.Version }).(pulumi.IntOutput)
}

type GetSchemaSchemaReferenceArrayOutput struct{ *pulumi.OutputState }

func (GetSchemaSchemaReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSchemaSchemaReference)(nil)).Elem()
}

func (o GetSchemaSchemaReferenceArrayOutput) ToGetSchemaSchemaReferenceArrayOutput() GetSchemaSchemaReferenceArrayOutput {
	return o
}

func (o GetSchemaSchemaReferenceArrayOutput) ToGetSchemaSchemaReferenceArrayOutputWithContext(ctx context.Context) GetSchemaSchemaReferenceArrayOutput {
	return o
}

func (o GetSchemaSchemaReferenceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetSchemaSchemaReference] {
	return pulumix.Output[[]GetSchemaSchemaReference]{
		OutputState: o.OutputState,
	}
}

func (o GetSchemaSchemaReferenceArrayOutput) Index(i pulumi.IntInput) GetSchemaSchemaReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSchemaSchemaReference {
		return vs[0].([]GetSchemaSchemaReference)[vs[1].(int)]
	}).(GetSchemaSchemaReferenceOutput)
}

type GetSchemaSchemaRegistryCluster struct {
	// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
	Id string `pulumi:"id"`
}

// GetSchemaSchemaRegistryClusterInput is an input type that accepts GetSchemaSchemaRegistryClusterArgs and GetSchemaSchemaRegistryClusterOutput values.
// You can construct a concrete instance of `GetSchemaSchemaRegistryClusterInput` via:
//
//	GetSchemaSchemaRegistryClusterArgs{...}
type GetSchemaSchemaRegistryClusterInput interface {
	pulumi.Input

	ToGetSchemaSchemaRegistryClusterOutput() GetSchemaSchemaRegistryClusterOutput
	ToGetSchemaSchemaRegistryClusterOutputWithContext(context.Context) GetSchemaSchemaRegistryClusterOutput
}

type GetSchemaSchemaRegistryClusterArgs struct {
	// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetSchemaSchemaRegistryClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemaSchemaRegistryCluster)(nil)).Elem()
}

func (i GetSchemaSchemaRegistryClusterArgs) ToGetSchemaSchemaRegistryClusterOutput() GetSchemaSchemaRegistryClusterOutput {
	return i.ToGetSchemaSchemaRegistryClusterOutputWithContext(context.Background())
}

func (i GetSchemaSchemaRegistryClusterArgs) ToGetSchemaSchemaRegistryClusterOutputWithContext(ctx context.Context) GetSchemaSchemaRegistryClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemaSchemaRegistryClusterOutput)
}

func (i GetSchemaSchemaRegistryClusterArgs) ToOutput(ctx context.Context) pulumix.Output[GetSchemaSchemaRegistryCluster] {
	return pulumix.Output[GetSchemaSchemaRegistryCluster]{
		OutputState: i.ToGetSchemaSchemaRegistryClusterOutputWithContext(ctx).OutputState,
	}
}

func (i GetSchemaSchemaRegistryClusterArgs) ToGetSchemaSchemaRegistryClusterPtrOutput() GetSchemaSchemaRegistryClusterPtrOutput {
	return i.ToGetSchemaSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (i GetSchemaSchemaRegistryClusterArgs) ToGetSchemaSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetSchemaSchemaRegistryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemaSchemaRegistryClusterOutput).ToGetSchemaSchemaRegistryClusterPtrOutputWithContext(ctx)
}

// GetSchemaSchemaRegistryClusterPtrInput is an input type that accepts GetSchemaSchemaRegistryClusterArgs, GetSchemaSchemaRegistryClusterPtr and GetSchemaSchemaRegistryClusterPtrOutput values.
// You can construct a concrete instance of `GetSchemaSchemaRegistryClusterPtrInput` via:
//
//	        GetSchemaSchemaRegistryClusterArgs{...}
//
//	or:
//
//	        nil
type GetSchemaSchemaRegistryClusterPtrInput interface {
	pulumi.Input

	ToGetSchemaSchemaRegistryClusterPtrOutput() GetSchemaSchemaRegistryClusterPtrOutput
	ToGetSchemaSchemaRegistryClusterPtrOutputWithContext(context.Context) GetSchemaSchemaRegistryClusterPtrOutput
}

type getSchemaSchemaRegistryClusterPtrType GetSchemaSchemaRegistryClusterArgs

func GetSchemaSchemaRegistryClusterPtr(v *GetSchemaSchemaRegistryClusterArgs) GetSchemaSchemaRegistryClusterPtrInput {
	return (*getSchemaSchemaRegistryClusterPtrType)(v)
}

func (*getSchemaSchemaRegistryClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSchemaSchemaRegistryCluster)(nil)).Elem()
}

func (i *getSchemaSchemaRegistryClusterPtrType) ToGetSchemaSchemaRegistryClusterPtrOutput() GetSchemaSchemaRegistryClusterPtrOutput {
	return i.ToGetSchemaSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (i *getSchemaSchemaRegistryClusterPtrType) ToGetSchemaSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetSchemaSchemaRegistryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemaSchemaRegistryClusterPtrOutput)
}

func (i *getSchemaSchemaRegistryClusterPtrType) ToOutput(ctx context.Context) pulumix.Output[*GetSchemaSchemaRegistryCluster] {
	return pulumix.Output[*GetSchemaSchemaRegistryCluster]{
		OutputState: i.ToGetSchemaSchemaRegistryClusterPtrOutputWithContext(ctx).OutputState,
	}
}

type GetSchemaSchemaRegistryClusterOutput struct{ *pulumi.OutputState }

func (GetSchemaSchemaRegistryClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemaSchemaRegistryCluster)(nil)).Elem()
}

func (o GetSchemaSchemaRegistryClusterOutput) ToGetSchemaSchemaRegistryClusterOutput() GetSchemaSchemaRegistryClusterOutput {
	return o
}

func (o GetSchemaSchemaRegistryClusterOutput) ToGetSchemaSchemaRegistryClusterOutputWithContext(ctx context.Context) GetSchemaSchemaRegistryClusterOutput {
	return o
}

func (o GetSchemaSchemaRegistryClusterOutput) ToGetSchemaSchemaRegistryClusterPtrOutput() GetSchemaSchemaRegistryClusterPtrOutput {
	return o.ToGetSchemaSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (o GetSchemaSchemaRegistryClusterOutput) ToGetSchemaSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetSchemaSchemaRegistryClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetSchemaSchemaRegistryCluster) *GetSchemaSchemaRegistryCluster {
		return &v
	}).(GetSchemaSchemaRegistryClusterPtrOutput)
}

func (o GetSchemaSchemaRegistryClusterOutput) ToOutput(ctx context.Context) pulumix.Output[GetSchemaSchemaRegistryCluster] {
	return pulumix.Output[GetSchemaSchemaRegistryCluster]{
		OutputState: o.OutputState,
	}
}

// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
func (o GetSchemaSchemaRegistryClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemaSchemaRegistryCluster) string { return v.Id }).(pulumi.StringOutput)
}

type GetSchemaSchemaRegistryClusterPtrOutput struct{ *pulumi.OutputState }

func (GetSchemaSchemaRegistryClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSchemaSchemaRegistryCluster)(nil)).Elem()
}

func (o GetSchemaSchemaRegistryClusterPtrOutput) ToGetSchemaSchemaRegistryClusterPtrOutput() GetSchemaSchemaRegistryClusterPtrOutput {
	return o
}

func (o GetSchemaSchemaRegistryClusterPtrOutput) ToGetSchemaSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetSchemaSchemaRegistryClusterPtrOutput {
	return o
}

func (o GetSchemaSchemaRegistryClusterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GetSchemaSchemaRegistryCluster] {
	return pulumix.Output[*GetSchemaSchemaRegistryCluster]{
		OutputState: o.OutputState,
	}
}

func (o GetSchemaSchemaRegistryClusterPtrOutput) Elem() GetSchemaSchemaRegistryClusterOutput {
	return o.ApplyT(func(v *GetSchemaSchemaRegistryCluster) GetSchemaSchemaRegistryCluster {
		if v != nil {
			return *v
		}
		var ret GetSchemaSchemaRegistryCluster
		return ret
	}).(GetSchemaSchemaRegistryClusterOutput)
}

// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
func (o GetSchemaSchemaRegistryClusterPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetSchemaSchemaRegistryCluster) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type GetSchemasCredentials struct {
	// The Schema Registry API Key.
	Key string `pulumi:"key"`
	// The Schema Registry API Secret.
	Secret string `pulumi:"secret"`
}

// GetSchemasCredentialsInput is an input type that accepts GetSchemasCredentialsArgs and GetSchemasCredentialsOutput values.
// You can construct a concrete instance of `GetSchemasCredentialsInput` via:
//
//	GetSchemasCredentialsArgs{...}
type GetSchemasCredentialsInput interface {
	pulumi.Input

	ToGetSchemasCredentialsOutput() GetSchemasCredentialsOutput
	ToGetSchemasCredentialsOutputWithContext(context.Context) GetSchemasCredentialsOutput
}

type GetSchemasCredentialsArgs struct {
	// The Schema Registry API Key.
	Key pulumi.StringInput `pulumi:"key"`
	// The Schema Registry API Secret.
	Secret pulumi.StringInput `pulumi:"secret"`
}

func (GetSchemasCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemasCredentials)(nil)).Elem()
}

func (i GetSchemasCredentialsArgs) ToGetSchemasCredentialsOutput() GetSchemasCredentialsOutput {
	return i.ToGetSchemasCredentialsOutputWithContext(context.Background())
}

func (i GetSchemasCredentialsArgs) ToGetSchemasCredentialsOutputWithContext(ctx context.Context) GetSchemasCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemasCredentialsOutput)
}

func (i GetSchemasCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[GetSchemasCredentials] {
	return pulumix.Output[GetSchemasCredentials]{
		OutputState: i.ToGetSchemasCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i GetSchemasCredentialsArgs) ToGetSchemasCredentialsPtrOutput() GetSchemasCredentialsPtrOutput {
	return i.ToGetSchemasCredentialsPtrOutputWithContext(context.Background())
}

func (i GetSchemasCredentialsArgs) ToGetSchemasCredentialsPtrOutputWithContext(ctx context.Context) GetSchemasCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemasCredentialsOutput).ToGetSchemasCredentialsPtrOutputWithContext(ctx)
}

// GetSchemasCredentialsPtrInput is an input type that accepts GetSchemasCredentialsArgs, GetSchemasCredentialsPtr and GetSchemasCredentialsPtrOutput values.
// You can construct a concrete instance of `GetSchemasCredentialsPtrInput` via:
//
//	        GetSchemasCredentialsArgs{...}
//
//	or:
//
//	        nil
type GetSchemasCredentialsPtrInput interface {
	pulumi.Input

	ToGetSchemasCredentialsPtrOutput() GetSchemasCredentialsPtrOutput
	ToGetSchemasCredentialsPtrOutputWithContext(context.Context) GetSchemasCredentialsPtrOutput
}

type getSchemasCredentialsPtrType GetSchemasCredentialsArgs

func GetSchemasCredentialsPtr(v *GetSchemasCredentialsArgs) GetSchemasCredentialsPtrInput {
	return (*getSchemasCredentialsPtrType)(v)
}

func (*getSchemasCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSchemasCredentials)(nil)).Elem()
}

func (i *getSchemasCredentialsPtrType) ToGetSchemasCredentialsPtrOutput() GetSchemasCredentialsPtrOutput {
	return i.ToGetSchemasCredentialsPtrOutputWithContext(context.Background())
}

func (i *getSchemasCredentialsPtrType) ToGetSchemasCredentialsPtrOutputWithContext(ctx context.Context) GetSchemasCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemasCredentialsPtrOutput)
}

func (i *getSchemasCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*GetSchemasCredentials] {
	return pulumix.Output[*GetSchemasCredentials]{
		OutputState: i.ToGetSchemasCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

type GetSchemasCredentialsOutput struct{ *pulumi.OutputState }

func (GetSchemasCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemasCredentials)(nil)).Elem()
}

func (o GetSchemasCredentialsOutput) ToGetSchemasCredentialsOutput() GetSchemasCredentialsOutput {
	return o
}

func (o GetSchemasCredentialsOutput) ToGetSchemasCredentialsOutputWithContext(ctx context.Context) GetSchemasCredentialsOutput {
	return o
}

func (o GetSchemasCredentialsOutput) ToGetSchemasCredentialsPtrOutput() GetSchemasCredentialsPtrOutput {
	return o.ToGetSchemasCredentialsPtrOutputWithContext(context.Background())
}

func (o GetSchemasCredentialsOutput) ToGetSchemasCredentialsPtrOutputWithContext(ctx context.Context) GetSchemasCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetSchemasCredentials) *GetSchemasCredentials {
		return &v
	}).(GetSchemasCredentialsPtrOutput)
}

func (o GetSchemasCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[GetSchemasCredentials] {
	return pulumix.Output[GetSchemasCredentials]{
		OutputState: o.OutputState,
	}
}

// The Schema Registry API Key.
func (o GetSchemasCredentialsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemasCredentials) string { return v.Key }).(pulumi.StringOutput)
}

// The Schema Registry API Secret.
func (o GetSchemasCredentialsOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemasCredentials) string { return v.Secret }).(pulumi.StringOutput)
}

type GetSchemasCredentialsPtrOutput struct{ *pulumi.OutputState }

func (GetSchemasCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSchemasCredentials)(nil)).Elem()
}

func (o GetSchemasCredentialsPtrOutput) ToGetSchemasCredentialsPtrOutput() GetSchemasCredentialsPtrOutput {
	return o
}

func (o GetSchemasCredentialsPtrOutput) ToGetSchemasCredentialsPtrOutputWithContext(ctx context.Context) GetSchemasCredentialsPtrOutput {
	return o
}

func (o GetSchemasCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GetSchemasCredentials] {
	return pulumix.Output[*GetSchemasCredentials]{
		OutputState: o.OutputState,
	}
}

func (o GetSchemasCredentialsPtrOutput) Elem() GetSchemasCredentialsOutput {
	return o.ApplyT(func(v *GetSchemasCredentials) GetSchemasCredentials {
		if v != nil {
			return *v
		}
		var ret GetSchemasCredentials
		return ret
	}).(GetSchemasCredentialsOutput)
}

// The Schema Registry API Key.
func (o GetSchemasCredentialsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetSchemasCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// The Schema Registry API Secret.
func (o GetSchemasCredentialsPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetSchemasCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Secret
	}).(pulumi.StringPtrOutput)
}

type GetSchemasFilter struct {
	// The boolean flag to control whether to return soft deleted schemas. Defaults to `false`.
	Deleted *bool `pulumi:"deleted"`
	// The boolean flag to control whether to return latest schema versions only for each matching subject. Defaults to `false`.
	LatestOnly *bool `pulumi:"latestOnly"`
	// The prefix of the subjects (in other words, the namespaces), representing the subjects under which the schemas are registered.
	SubjectPrefix *string `pulumi:"subjectPrefix"`
}

// GetSchemasFilterInput is an input type that accepts GetSchemasFilterArgs and GetSchemasFilterOutput values.
// You can construct a concrete instance of `GetSchemasFilterInput` via:
//
//	GetSchemasFilterArgs{...}
type GetSchemasFilterInput interface {
	pulumi.Input

	ToGetSchemasFilterOutput() GetSchemasFilterOutput
	ToGetSchemasFilterOutputWithContext(context.Context) GetSchemasFilterOutput
}

type GetSchemasFilterArgs struct {
	// The boolean flag to control whether to return soft deleted schemas. Defaults to `false`.
	Deleted pulumi.BoolPtrInput `pulumi:"deleted"`
	// The boolean flag to control whether to return latest schema versions only for each matching subject. Defaults to `false`.
	LatestOnly pulumi.BoolPtrInput `pulumi:"latestOnly"`
	// The prefix of the subjects (in other words, the namespaces), representing the subjects under which the schemas are registered.
	SubjectPrefix pulumi.StringPtrInput `pulumi:"subjectPrefix"`
}

func (GetSchemasFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemasFilter)(nil)).Elem()
}

func (i GetSchemasFilterArgs) ToGetSchemasFilterOutput() GetSchemasFilterOutput {
	return i.ToGetSchemasFilterOutputWithContext(context.Background())
}

func (i GetSchemasFilterArgs) ToGetSchemasFilterOutputWithContext(ctx context.Context) GetSchemasFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemasFilterOutput)
}

func (i GetSchemasFilterArgs) ToOutput(ctx context.Context) pulumix.Output[GetSchemasFilter] {
	return pulumix.Output[GetSchemasFilter]{
		OutputState: i.ToGetSchemasFilterOutputWithContext(ctx).OutputState,
	}
}

func (i GetSchemasFilterArgs) ToGetSchemasFilterPtrOutput() GetSchemasFilterPtrOutput {
	return i.ToGetSchemasFilterPtrOutputWithContext(context.Background())
}

func (i GetSchemasFilterArgs) ToGetSchemasFilterPtrOutputWithContext(ctx context.Context) GetSchemasFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemasFilterOutput).ToGetSchemasFilterPtrOutputWithContext(ctx)
}

// GetSchemasFilterPtrInput is an input type that accepts GetSchemasFilterArgs, GetSchemasFilterPtr and GetSchemasFilterPtrOutput values.
// You can construct a concrete instance of `GetSchemasFilterPtrInput` via:
//
//	        GetSchemasFilterArgs{...}
//
//	or:
//
//	        nil
type GetSchemasFilterPtrInput interface {
	pulumi.Input

	ToGetSchemasFilterPtrOutput() GetSchemasFilterPtrOutput
	ToGetSchemasFilterPtrOutputWithContext(context.Context) GetSchemasFilterPtrOutput
}

type getSchemasFilterPtrType GetSchemasFilterArgs

func GetSchemasFilterPtr(v *GetSchemasFilterArgs) GetSchemasFilterPtrInput {
	return (*getSchemasFilterPtrType)(v)
}

func (*getSchemasFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSchemasFilter)(nil)).Elem()
}

func (i *getSchemasFilterPtrType) ToGetSchemasFilterPtrOutput() GetSchemasFilterPtrOutput {
	return i.ToGetSchemasFilterPtrOutputWithContext(context.Background())
}

func (i *getSchemasFilterPtrType) ToGetSchemasFilterPtrOutputWithContext(ctx context.Context) GetSchemasFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemasFilterPtrOutput)
}

func (i *getSchemasFilterPtrType) ToOutput(ctx context.Context) pulumix.Output[*GetSchemasFilter] {
	return pulumix.Output[*GetSchemasFilter]{
		OutputState: i.ToGetSchemasFilterPtrOutputWithContext(ctx).OutputState,
	}
}

type GetSchemasFilterOutput struct{ *pulumi.OutputState }

func (GetSchemasFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemasFilter)(nil)).Elem()
}

func (o GetSchemasFilterOutput) ToGetSchemasFilterOutput() GetSchemasFilterOutput {
	return o
}

func (o GetSchemasFilterOutput) ToGetSchemasFilterOutputWithContext(ctx context.Context) GetSchemasFilterOutput {
	return o
}

func (o GetSchemasFilterOutput) ToGetSchemasFilterPtrOutput() GetSchemasFilterPtrOutput {
	return o.ToGetSchemasFilterPtrOutputWithContext(context.Background())
}

func (o GetSchemasFilterOutput) ToGetSchemasFilterPtrOutputWithContext(ctx context.Context) GetSchemasFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetSchemasFilter) *GetSchemasFilter {
		return &v
	}).(GetSchemasFilterPtrOutput)
}

func (o GetSchemasFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetSchemasFilter] {
	return pulumix.Output[GetSchemasFilter]{
		OutputState: o.OutputState,
	}
}

// The boolean flag to control whether to return soft deleted schemas. Defaults to `false`.
func (o GetSchemasFilterOutput) Deleted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSchemasFilter) *bool { return v.Deleted }).(pulumi.BoolPtrOutput)
}

// The boolean flag to control whether to return latest schema versions only for each matching subject. Defaults to `false`.
func (o GetSchemasFilterOutput) LatestOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSchemasFilter) *bool { return v.LatestOnly }).(pulumi.BoolPtrOutput)
}

// The prefix of the subjects (in other words, the namespaces), representing the subjects under which the schemas are registered.
func (o GetSchemasFilterOutput) SubjectPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSchemasFilter) *string { return v.SubjectPrefix }).(pulumi.StringPtrOutput)
}

type GetSchemasFilterPtrOutput struct{ *pulumi.OutputState }

func (GetSchemasFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSchemasFilter)(nil)).Elem()
}

func (o GetSchemasFilterPtrOutput) ToGetSchemasFilterPtrOutput() GetSchemasFilterPtrOutput {
	return o
}

func (o GetSchemasFilterPtrOutput) ToGetSchemasFilterPtrOutputWithContext(ctx context.Context) GetSchemasFilterPtrOutput {
	return o
}

func (o GetSchemasFilterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GetSchemasFilter] {
	return pulumix.Output[*GetSchemasFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetSchemasFilterPtrOutput) Elem() GetSchemasFilterOutput {
	return o.ApplyT(func(v *GetSchemasFilter) GetSchemasFilter {
		if v != nil {
			return *v
		}
		var ret GetSchemasFilter
		return ret
	}).(GetSchemasFilterOutput)
}

// The boolean flag to control whether to return soft deleted schemas. Defaults to `false`.
func (o GetSchemasFilterPtrOutput) Deleted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GetSchemasFilter) *bool {
		if v == nil {
			return nil
		}
		return v.Deleted
	}).(pulumi.BoolPtrOutput)
}

// The boolean flag to control whether to return latest schema versions only for each matching subject. Defaults to `false`.
func (o GetSchemasFilterPtrOutput) LatestOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GetSchemasFilter) *bool {
		if v == nil {
			return nil
		}
		return v.LatestOnly
	}).(pulumi.BoolPtrOutput)
}

// The prefix of the subjects (in other words, the namespaces), representing the subjects under which the schemas are registered.
func (o GetSchemasFilterPtrOutput) SubjectPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetSchemasFilter) *string {
		if v == nil {
			return nil
		}
		return v.SubjectPrefix
	}).(pulumi.StringPtrOutput)
}

type GetSchemasSchema struct {
	// (Required String) The format of the schema. Accepted values are: `AVRO`, `PROTOBUF`, and `JSON`.
	Format string `pulumi:"format"`
	// (Required String) The schema string.
	Schema string `pulumi:"schema"`
	// (Required String) The ID of the Schema, for example: `lsrc-abc123/test-subject/100003`.
	SchemaIdentifier int `pulumi:"schemaIdentifier"`
	// (Optional List) The list of referenced schemas (see [Schema References](https://docs.confluent.io/platform/current/schema-registry/serdes-develop/index.html#schema-references) for more details):
	SchemaReferences []GetSchemasSchemaSchemaReference `pulumi:"schemaReferences"`
	// (Required String) The name for the reference. (For Avro Schema, the reference name is the fully qualified schema name, for JSON Schema it is a URL, and for Protobuf Schema, it is the name of another Protobuf file.)
	SubjectName string `pulumi:"subjectName"`
	// (Required Integer) The version of the Schema, for example, `4`.
	Version int `pulumi:"version"`
}

// GetSchemasSchemaInput is an input type that accepts GetSchemasSchemaArgs and GetSchemasSchemaOutput values.
// You can construct a concrete instance of `GetSchemasSchemaInput` via:
//
//	GetSchemasSchemaArgs{...}
type GetSchemasSchemaInput interface {
	pulumi.Input

	ToGetSchemasSchemaOutput() GetSchemasSchemaOutput
	ToGetSchemasSchemaOutputWithContext(context.Context) GetSchemasSchemaOutput
}

type GetSchemasSchemaArgs struct {
	// (Required String) The format of the schema. Accepted values are: `AVRO`, `PROTOBUF`, and `JSON`.
	Format pulumi.StringInput `pulumi:"format"`
	// (Required String) The schema string.
	Schema pulumi.StringInput `pulumi:"schema"`
	// (Required String) The ID of the Schema, for example: `lsrc-abc123/test-subject/100003`.
	SchemaIdentifier pulumi.IntInput `pulumi:"schemaIdentifier"`
	// (Optional List) The list of referenced schemas (see [Schema References](https://docs.confluent.io/platform/current/schema-registry/serdes-develop/index.html#schema-references) for more details):
	SchemaReferences GetSchemasSchemaSchemaReferenceArrayInput `pulumi:"schemaReferences"`
	// (Required String) The name for the reference. (For Avro Schema, the reference name is the fully qualified schema name, for JSON Schema it is a URL, and for Protobuf Schema, it is the name of another Protobuf file.)
	SubjectName pulumi.StringInput `pulumi:"subjectName"`
	// (Required Integer) The version of the Schema, for example, `4`.
	Version pulumi.IntInput `pulumi:"version"`
}

func (GetSchemasSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemasSchema)(nil)).Elem()
}

func (i GetSchemasSchemaArgs) ToGetSchemasSchemaOutput() GetSchemasSchemaOutput {
	return i.ToGetSchemasSchemaOutputWithContext(context.Background())
}

func (i GetSchemasSchemaArgs) ToGetSchemasSchemaOutputWithContext(ctx context.Context) GetSchemasSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemasSchemaOutput)
}

func (i GetSchemasSchemaArgs) ToOutput(ctx context.Context) pulumix.Output[GetSchemasSchema] {
	return pulumix.Output[GetSchemasSchema]{
		OutputState: i.ToGetSchemasSchemaOutputWithContext(ctx).OutputState,
	}
}

// GetSchemasSchemaArrayInput is an input type that accepts GetSchemasSchemaArray and GetSchemasSchemaArrayOutput values.
// You can construct a concrete instance of `GetSchemasSchemaArrayInput` via:
//
//	GetSchemasSchemaArray{ GetSchemasSchemaArgs{...} }
type GetSchemasSchemaArrayInput interface {
	pulumi.Input

	ToGetSchemasSchemaArrayOutput() GetSchemasSchemaArrayOutput
	ToGetSchemasSchemaArrayOutputWithContext(context.Context) GetSchemasSchemaArrayOutput
}

type GetSchemasSchemaArray []GetSchemasSchemaInput

func (GetSchemasSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSchemasSchema)(nil)).Elem()
}

func (i GetSchemasSchemaArray) ToGetSchemasSchemaArrayOutput() GetSchemasSchemaArrayOutput {
	return i.ToGetSchemasSchemaArrayOutputWithContext(context.Background())
}

func (i GetSchemasSchemaArray) ToGetSchemasSchemaArrayOutputWithContext(ctx context.Context) GetSchemasSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemasSchemaArrayOutput)
}

func (i GetSchemasSchemaArray) ToOutput(ctx context.Context) pulumix.Output[[]GetSchemasSchema] {
	return pulumix.Output[[]GetSchemasSchema]{
		OutputState: i.ToGetSchemasSchemaArrayOutputWithContext(ctx).OutputState,
	}
}

type GetSchemasSchemaOutput struct{ *pulumi.OutputState }

func (GetSchemasSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemasSchema)(nil)).Elem()
}

func (o GetSchemasSchemaOutput) ToGetSchemasSchemaOutput() GetSchemasSchemaOutput {
	return o
}

func (o GetSchemasSchemaOutput) ToGetSchemasSchemaOutputWithContext(ctx context.Context) GetSchemasSchemaOutput {
	return o
}

func (o GetSchemasSchemaOutput) ToOutput(ctx context.Context) pulumix.Output[GetSchemasSchema] {
	return pulumix.Output[GetSchemasSchema]{
		OutputState: o.OutputState,
	}
}

// (Required String) The format of the schema. Accepted values are: `AVRO`, `PROTOBUF`, and `JSON`.
func (o GetSchemasSchemaOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemasSchema) string { return v.Format }).(pulumi.StringOutput)
}

// (Required String) The schema string.
func (o GetSchemasSchemaOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemasSchema) string { return v.Schema }).(pulumi.StringOutput)
}

// (Required String) The ID of the Schema, for example: `lsrc-abc123/test-subject/100003`.
func (o GetSchemasSchemaOutput) SchemaIdentifier() pulumi.IntOutput {
	return o.ApplyT(func(v GetSchemasSchema) int { return v.SchemaIdentifier }).(pulumi.IntOutput)
}

// (Optional List) The list of referenced schemas (see [Schema References](https://docs.confluent.io/platform/current/schema-registry/serdes-develop/index.html#schema-references) for more details):
func (o GetSchemasSchemaOutput) SchemaReferences() GetSchemasSchemaSchemaReferenceArrayOutput {
	return o.ApplyT(func(v GetSchemasSchema) []GetSchemasSchemaSchemaReference { return v.SchemaReferences }).(GetSchemasSchemaSchemaReferenceArrayOutput)
}

// (Required String) The name for the reference. (For Avro Schema, the reference name is the fully qualified schema name, for JSON Schema it is a URL, and for Protobuf Schema, it is the name of another Protobuf file.)
func (o GetSchemasSchemaOutput) SubjectName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemasSchema) string { return v.SubjectName }).(pulumi.StringOutput)
}

// (Required Integer) The version of the Schema, for example, `4`.
func (o GetSchemasSchemaOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v GetSchemasSchema) int { return v.Version }).(pulumi.IntOutput)
}

type GetSchemasSchemaArrayOutput struct{ *pulumi.OutputState }

func (GetSchemasSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSchemasSchema)(nil)).Elem()
}

func (o GetSchemasSchemaArrayOutput) ToGetSchemasSchemaArrayOutput() GetSchemasSchemaArrayOutput {
	return o
}

func (o GetSchemasSchemaArrayOutput) ToGetSchemasSchemaArrayOutputWithContext(ctx context.Context) GetSchemasSchemaArrayOutput {
	return o
}

func (o GetSchemasSchemaArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetSchemasSchema] {
	return pulumix.Output[[]GetSchemasSchema]{
		OutputState: o.OutputState,
	}
}

func (o GetSchemasSchemaArrayOutput) Index(i pulumi.IntInput) GetSchemasSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSchemasSchema {
		return vs[0].([]GetSchemasSchema)[vs[1].(int)]
	}).(GetSchemasSchemaOutput)
}

type GetSchemasSchemaRegistryCluster struct {
	// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
	Id string `pulumi:"id"`
}

// GetSchemasSchemaRegistryClusterInput is an input type that accepts GetSchemasSchemaRegistryClusterArgs and GetSchemasSchemaRegistryClusterOutput values.
// You can construct a concrete instance of `GetSchemasSchemaRegistryClusterInput` via:
//
//	GetSchemasSchemaRegistryClusterArgs{...}
type GetSchemasSchemaRegistryClusterInput interface {
	pulumi.Input

	ToGetSchemasSchemaRegistryClusterOutput() GetSchemasSchemaRegistryClusterOutput
	ToGetSchemasSchemaRegistryClusterOutputWithContext(context.Context) GetSchemasSchemaRegistryClusterOutput
}

type GetSchemasSchemaRegistryClusterArgs struct {
	// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetSchemasSchemaRegistryClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemasSchemaRegistryCluster)(nil)).Elem()
}

func (i GetSchemasSchemaRegistryClusterArgs) ToGetSchemasSchemaRegistryClusterOutput() GetSchemasSchemaRegistryClusterOutput {
	return i.ToGetSchemasSchemaRegistryClusterOutputWithContext(context.Background())
}

func (i GetSchemasSchemaRegistryClusterArgs) ToGetSchemasSchemaRegistryClusterOutputWithContext(ctx context.Context) GetSchemasSchemaRegistryClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemasSchemaRegistryClusterOutput)
}

func (i GetSchemasSchemaRegistryClusterArgs) ToOutput(ctx context.Context) pulumix.Output[GetSchemasSchemaRegistryCluster] {
	return pulumix.Output[GetSchemasSchemaRegistryCluster]{
		OutputState: i.ToGetSchemasSchemaRegistryClusterOutputWithContext(ctx).OutputState,
	}
}

func (i GetSchemasSchemaRegistryClusterArgs) ToGetSchemasSchemaRegistryClusterPtrOutput() GetSchemasSchemaRegistryClusterPtrOutput {
	return i.ToGetSchemasSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (i GetSchemasSchemaRegistryClusterArgs) ToGetSchemasSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetSchemasSchemaRegistryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemasSchemaRegistryClusterOutput).ToGetSchemasSchemaRegistryClusterPtrOutputWithContext(ctx)
}

// GetSchemasSchemaRegistryClusterPtrInput is an input type that accepts GetSchemasSchemaRegistryClusterArgs, GetSchemasSchemaRegistryClusterPtr and GetSchemasSchemaRegistryClusterPtrOutput values.
// You can construct a concrete instance of `GetSchemasSchemaRegistryClusterPtrInput` via:
//
//	        GetSchemasSchemaRegistryClusterArgs{...}
//
//	or:
//
//	        nil
type GetSchemasSchemaRegistryClusterPtrInput interface {
	pulumi.Input

	ToGetSchemasSchemaRegistryClusterPtrOutput() GetSchemasSchemaRegistryClusterPtrOutput
	ToGetSchemasSchemaRegistryClusterPtrOutputWithContext(context.Context) GetSchemasSchemaRegistryClusterPtrOutput
}

type getSchemasSchemaRegistryClusterPtrType GetSchemasSchemaRegistryClusterArgs

func GetSchemasSchemaRegistryClusterPtr(v *GetSchemasSchemaRegistryClusterArgs) GetSchemasSchemaRegistryClusterPtrInput {
	return (*getSchemasSchemaRegistryClusterPtrType)(v)
}

func (*getSchemasSchemaRegistryClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSchemasSchemaRegistryCluster)(nil)).Elem()
}

func (i *getSchemasSchemaRegistryClusterPtrType) ToGetSchemasSchemaRegistryClusterPtrOutput() GetSchemasSchemaRegistryClusterPtrOutput {
	return i.ToGetSchemasSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (i *getSchemasSchemaRegistryClusterPtrType) ToGetSchemasSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetSchemasSchemaRegistryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemasSchemaRegistryClusterPtrOutput)
}

func (i *getSchemasSchemaRegistryClusterPtrType) ToOutput(ctx context.Context) pulumix.Output[*GetSchemasSchemaRegistryCluster] {
	return pulumix.Output[*GetSchemasSchemaRegistryCluster]{
		OutputState: i.ToGetSchemasSchemaRegistryClusterPtrOutputWithContext(ctx).OutputState,
	}
}

type GetSchemasSchemaRegistryClusterOutput struct{ *pulumi.OutputState }

func (GetSchemasSchemaRegistryClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemasSchemaRegistryCluster)(nil)).Elem()
}

func (o GetSchemasSchemaRegistryClusterOutput) ToGetSchemasSchemaRegistryClusterOutput() GetSchemasSchemaRegistryClusterOutput {
	return o
}

func (o GetSchemasSchemaRegistryClusterOutput) ToGetSchemasSchemaRegistryClusterOutputWithContext(ctx context.Context) GetSchemasSchemaRegistryClusterOutput {
	return o
}

func (o GetSchemasSchemaRegistryClusterOutput) ToGetSchemasSchemaRegistryClusterPtrOutput() GetSchemasSchemaRegistryClusterPtrOutput {
	return o.ToGetSchemasSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (o GetSchemasSchemaRegistryClusterOutput) ToGetSchemasSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetSchemasSchemaRegistryClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetSchemasSchemaRegistryCluster) *GetSchemasSchemaRegistryCluster {
		return &v
	}).(GetSchemasSchemaRegistryClusterPtrOutput)
}

func (o GetSchemasSchemaRegistryClusterOutput) ToOutput(ctx context.Context) pulumix.Output[GetSchemasSchemaRegistryCluster] {
	return pulumix.Output[GetSchemasSchemaRegistryCluster]{
		OutputState: o.OutputState,
	}
}

// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
func (o GetSchemasSchemaRegistryClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemasSchemaRegistryCluster) string { return v.Id }).(pulumi.StringOutput)
}

type GetSchemasSchemaRegistryClusterPtrOutput struct{ *pulumi.OutputState }

func (GetSchemasSchemaRegistryClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSchemasSchemaRegistryCluster)(nil)).Elem()
}

func (o GetSchemasSchemaRegistryClusterPtrOutput) ToGetSchemasSchemaRegistryClusterPtrOutput() GetSchemasSchemaRegistryClusterPtrOutput {
	return o
}

func (o GetSchemasSchemaRegistryClusterPtrOutput) ToGetSchemasSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetSchemasSchemaRegistryClusterPtrOutput {
	return o
}

func (o GetSchemasSchemaRegistryClusterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GetSchemasSchemaRegistryCluster] {
	return pulumix.Output[*GetSchemasSchemaRegistryCluster]{
		OutputState: o.OutputState,
	}
}

func (o GetSchemasSchemaRegistryClusterPtrOutput) Elem() GetSchemasSchemaRegistryClusterOutput {
	return o.ApplyT(func(v *GetSchemasSchemaRegistryCluster) GetSchemasSchemaRegistryCluster {
		if v != nil {
			return *v
		}
		var ret GetSchemasSchemaRegistryCluster
		return ret
	}).(GetSchemasSchemaRegistryClusterOutput)
}

// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
func (o GetSchemasSchemaRegistryClusterPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetSchemasSchemaRegistryCluster) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type GetSchemasSchemaSchemaReference struct {
	// (Required String) The name of the subject, representing the subject under which the referenced schema is registered.
	Name string `pulumi:"name"`
	// (Required String) The name for the reference. (For Avro Schema, the reference name is the fully qualified schema name, for JSON Schema it is a URL, and for Protobuf Schema, it is the name of another Protobuf file.)
	SubjectName string `pulumi:"subjectName"`
	// (Required Integer) The version of the Schema, for example, `4`.
	Version int `pulumi:"version"`
}

// GetSchemasSchemaSchemaReferenceInput is an input type that accepts GetSchemasSchemaSchemaReferenceArgs and GetSchemasSchemaSchemaReferenceOutput values.
// You can construct a concrete instance of `GetSchemasSchemaSchemaReferenceInput` via:
//
//	GetSchemasSchemaSchemaReferenceArgs{...}
type GetSchemasSchemaSchemaReferenceInput interface {
	pulumi.Input

	ToGetSchemasSchemaSchemaReferenceOutput() GetSchemasSchemaSchemaReferenceOutput
	ToGetSchemasSchemaSchemaReferenceOutputWithContext(context.Context) GetSchemasSchemaSchemaReferenceOutput
}

type GetSchemasSchemaSchemaReferenceArgs struct {
	// (Required String) The name of the subject, representing the subject under which the referenced schema is registered.
	Name pulumi.StringInput `pulumi:"name"`
	// (Required String) The name for the reference. (For Avro Schema, the reference name is the fully qualified schema name, for JSON Schema it is a URL, and for Protobuf Schema, it is the name of another Protobuf file.)
	SubjectName pulumi.StringInput `pulumi:"subjectName"`
	// (Required Integer) The version of the Schema, for example, `4`.
	Version pulumi.IntInput `pulumi:"version"`
}

func (GetSchemasSchemaSchemaReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemasSchemaSchemaReference)(nil)).Elem()
}

func (i GetSchemasSchemaSchemaReferenceArgs) ToGetSchemasSchemaSchemaReferenceOutput() GetSchemasSchemaSchemaReferenceOutput {
	return i.ToGetSchemasSchemaSchemaReferenceOutputWithContext(context.Background())
}

func (i GetSchemasSchemaSchemaReferenceArgs) ToGetSchemasSchemaSchemaReferenceOutputWithContext(ctx context.Context) GetSchemasSchemaSchemaReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemasSchemaSchemaReferenceOutput)
}

func (i GetSchemasSchemaSchemaReferenceArgs) ToOutput(ctx context.Context) pulumix.Output[GetSchemasSchemaSchemaReference] {
	return pulumix.Output[GetSchemasSchemaSchemaReference]{
		OutputState: i.ToGetSchemasSchemaSchemaReferenceOutputWithContext(ctx).OutputState,
	}
}

// GetSchemasSchemaSchemaReferenceArrayInput is an input type that accepts GetSchemasSchemaSchemaReferenceArray and GetSchemasSchemaSchemaReferenceArrayOutput values.
// You can construct a concrete instance of `GetSchemasSchemaSchemaReferenceArrayInput` via:
//
//	GetSchemasSchemaSchemaReferenceArray{ GetSchemasSchemaSchemaReferenceArgs{...} }
type GetSchemasSchemaSchemaReferenceArrayInput interface {
	pulumi.Input

	ToGetSchemasSchemaSchemaReferenceArrayOutput() GetSchemasSchemaSchemaReferenceArrayOutput
	ToGetSchemasSchemaSchemaReferenceArrayOutputWithContext(context.Context) GetSchemasSchemaSchemaReferenceArrayOutput
}

type GetSchemasSchemaSchemaReferenceArray []GetSchemasSchemaSchemaReferenceInput

func (GetSchemasSchemaSchemaReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSchemasSchemaSchemaReference)(nil)).Elem()
}

func (i GetSchemasSchemaSchemaReferenceArray) ToGetSchemasSchemaSchemaReferenceArrayOutput() GetSchemasSchemaSchemaReferenceArrayOutput {
	return i.ToGetSchemasSchemaSchemaReferenceArrayOutputWithContext(context.Background())
}

func (i GetSchemasSchemaSchemaReferenceArray) ToGetSchemasSchemaSchemaReferenceArrayOutputWithContext(ctx context.Context) GetSchemasSchemaSchemaReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemasSchemaSchemaReferenceArrayOutput)
}

func (i GetSchemasSchemaSchemaReferenceArray) ToOutput(ctx context.Context) pulumix.Output[[]GetSchemasSchemaSchemaReference] {
	return pulumix.Output[[]GetSchemasSchemaSchemaReference]{
		OutputState: i.ToGetSchemasSchemaSchemaReferenceArrayOutputWithContext(ctx).OutputState,
	}
}

type GetSchemasSchemaSchemaReferenceOutput struct{ *pulumi.OutputState }

func (GetSchemasSchemaSchemaReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemasSchemaSchemaReference)(nil)).Elem()
}

func (o GetSchemasSchemaSchemaReferenceOutput) ToGetSchemasSchemaSchemaReferenceOutput() GetSchemasSchemaSchemaReferenceOutput {
	return o
}

func (o GetSchemasSchemaSchemaReferenceOutput) ToGetSchemasSchemaSchemaReferenceOutputWithContext(ctx context.Context) GetSchemasSchemaSchemaReferenceOutput {
	return o
}

func (o GetSchemasSchemaSchemaReferenceOutput) ToOutput(ctx context.Context) pulumix.Output[GetSchemasSchemaSchemaReference] {
	return pulumix.Output[GetSchemasSchemaSchemaReference]{
		OutputState: o.OutputState,
	}
}

// (Required String) The name of the subject, representing the subject under which the referenced schema is registered.
func (o GetSchemasSchemaSchemaReferenceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemasSchemaSchemaReference) string { return v.Name }).(pulumi.StringOutput)
}

// (Required String) The name for the reference. (For Avro Schema, the reference name is the fully qualified schema name, for JSON Schema it is a URL, and for Protobuf Schema, it is the name of another Protobuf file.)
func (o GetSchemasSchemaSchemaReferenceOutput) SubjectName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemasSchemaSchemaReference) string { return v.SubjectName }).(pulumi.StringOutput)
}

// (Required Integer) The version of the Schema, for example, `4`.
func (o GetSchemasSchemaSchemaReferenceOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v GetSchemasSchemaSchemaReference) int { return v.Version }).(pulumi.IntOutput)
}

type GetSchemasSchemaSchemaReferenceArrayOutput struct{ *pulumi.OutputState }

func (GetSchemasSchemaSchemaReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSchemasSchemaSchemaReference)(nil)).Elem()
}

func (o GetSchemasSchemaSchemaReferenceArrayOutput) ToGetSchemasSchemaSchemaReferenceArrayOutput() GetSchemasSchemaSchemaReferenceArrayOutput {
	return o
}

func (o GetSchemasSchemaSchemaReferenceArrayOutput) ToGetSchemasSchemaSchemaReferenceArrayOutputWithContext(ctx context.Context) GetSchemasSchemaSchemaReferenceArrayOutput {
	return o
}

func (o GetSchemasSchemaSchemaReferenceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetSchemasSchemaSchemaReference] {
	return pulumix.Output[[]GetSchemasSchemaSchemaReference]{
		OutputState: o.OutputState,
	}
}

func (o GetSchemasSchemaSchemaReferenceArrayOutput) Index(i pulumi.IntInput) GetSchemasSchemaSchemaReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSchemasSchemaSchemaReference {
		return vs[0].([]GetSchemasSchemaSchemaReference)[vs[1].(int)]
	}).(GetSchemasSchemaSchemaReferenceOutput)
}

type GetSubjectConfigCredentials struct {
	// The Schema Registry API Key.
	Key string `pulumi:"key"`
	// The Schema Registry API Secret.
	Secret string `pulumi:"secret"`
}

// GetSubjectConfigCredentialsInput is an input type that accepts GetSubjectConfigCredentialsArgs and GetSubjectConfigCredentialsOutput values.
// You can construct a concrete instance of `GetSubjectConfigCredentialsInput` via:
//
//	GetSubjectConfigCredentialsArgs{...}
type GetSubjectConfigCredentialsInput interface {
	pulumi.Input

	ToGetSubjectConfigCredentialsOutput() GetSubjectConfigCredentialsOutput
	ToGetSubjectConfigCredentialsOutputWithContext(context.Context) GetSubjectConfigCredentialsOutput
}

type GetSubjectConfigCredentialsArgs struct {
	// The Schema Registry API Key.
	Key pulumi.StringInput `pulumi:"key"`
	// The Schema Registry API Secret.
	Secret pulumi.StringInput `pulumi:"secret"`
}

func (GetSubjectConfigCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubjectConfigCredentials)(nil)).Elem()
}

func (i GetSubjectConfigCredentialsArgs) ToGetSubjectConfigCredentialsOutput() GetSubjectConfigCredentialsOutput {
	return i.ToGetSubjectConfigCredentialsOutputWithContext(context.Background())
}

func (i GetSubjectConfigCredentialsArgs) ToGetSubjectConfigCredentialsOutputWithContext(ctx context.Context) GetSubjectConfigCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubjectConfigCredentialsOutput)
}

func (i GetSubjectConfigCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[GetSubjectConfigCredentials] {
	return pulumix.Output[GetSubjectConfigCredentials]{
		OutputState: i.ToGetSubjectConfigCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i GetSubjectConfigCredentialsArgs) ToGetSubjectConfigCredentialsPtrOutput() GetSubjectConfigCredentialsPtrOutput {
	return i.ToGetSubjectConfigCredentialsPtrOutputWithContext(context.Background())
}

func (i GetSubjectConfigCredentialsArgs) ToGetSubjectConfigCredentialsPtrOutputWithContext(ctx context.Context) GetSubjectConfigCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubjectConfigCredentialsOutput).ToGetSubjectConfigCredentialsPtrOutputWithContext(ctx)
}

// GetSubjectConfigCredentialsPtrInput is an input type that accepts GetSubjectConfigCredentialsArgs, GetSubjectConfigCredentialsPtr and GetSubjectConfigCredentialsPtrOutput values.
// You can construct a concrete instance of `GetSubjectConfigCredentialsPtrInput` via:
//
//	        GetSubjectConfigCredentialsArgs{...}
//
//	or:
//
//	        nil
type GetSubjectConfigCredentialsPtrInput interface {
	pulumi.Input

	ToGetSubjectConfigCredentialsPtrOutput() GetSubjectConfigCredentialsPtrOutput
	ToGetSubjectConfigCredentialsPtrOutputWithContext(context.Context) GetSubjectConfigCredentialsPtrOutput
}

type getSubjectConfigCredentialsPtrType GetSubjectConfigCredentialsArgs

func GetSubjectConfigCredentialsPtr(v *GetSubjectConfigCredentialsArgs) GetSubjectConfigCredentialsPtrInput {
	return (*getSubjectConfigCredentialsPtrType)(v)
}

func (*getSubjectConfigCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSubjectConfigCredentials)(nil)).Elem()
}

func (i *getSubjectConfigCredentialsPtrType) ToGetSubjectConfigCredentialsPtrOutput() GetSubjectConfigCredentialsPtrOutput {
	return i.ToGetSubjectConfigCredentialsPtrOutputWithContext(context.Background())
}

func (i *getSubjectConfigCredentialsPtrType) ToGetSubjectConfigCredentialsPtrOutputWithContext(ctx context.Context) GetSubjectConfigCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubjectConfigCredentialsPtrOutput)
}

func (i *getSubjectConfigCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*GetSubjectConfigCredentials] {
	return pulumix.Output[*GetSubjectConfigCredentials]{
		OutputState: i.ToGetSubjectConfigCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

type GetSubjectConfigCredentialsOutput struct{ *pulumi.OutputState }

func (GetSubjectConfigCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubjectConfigCredentials)(nil)).Elem()
}

func (o GetSubjectConfigCredentialsOutput) ToGetSubjectConfigCredentialsOutput() GetSubjectConfigCredentialsOutput {
	return o
}

func (o GetSubjectConfigCredentialsOutput) ToGetSubjectConfigCredentialsOutputWithContext(ctx context.Context) GetSubjectConfigCredentialsOutput {
	return o
}

func (o GetSubjectConfigCredentialsOutput) ToGetSubjectConfigCredentialsPtrOutput() GetSubjectConfigCredentialsPtrOutput {
	return o.ToGetSubjectConfigCredentialsPtrOutputWithContext(context.Background())
}

func (o GetSubjectConfigCredentialsOutput) ToGetSubjectConfigCredentialsPtrOutputWithContext(ctx context.Context) GetSubjectConfigCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetSubjectConfigCredentials) *GetSubjectConfigCredentials {
		return &v
	}).(GetSubjectConfigCredentialsPtrOutput)
}

func (o GetSubjectConfigCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[GetSubjectConfigCredentials] {
	return pulumix.Output[GetSubjectConfigCredentials]{
		OutputState: o.OutputState,
	}
}

// The Schema Registry API Key.
func (o GetSubjectConfigCredentialsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubjectConfigCredentials) string { return v.Key }).(pulumi.StringOutput)
}

// The Schema Registry API Secret.
func (o GetSubjectConfigCredentialsOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubjectConfigCredentials) string { return v.Secret }).(pulumi.StringOutput)
}

type GetSubjectConfigCredentialsPtrOutput struct{ *pulumi.OutputState }

func (GetSubjectConfigCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSubjectConfigCredentials)(nil)).Elem()
}

func (o GetSubjectConfigCredentialsPtrOutput) ToGetSubjectConfigCredentialsPtrOutput() GetSubjectConfigCredentialsPtrOutput {
	return o
}

func (o GetSubjectConfigCredentialsPtrOutput) ToGetSubjectConfigCredentialsPtrOutputWithContext(ctx context.Context) GetSubjectConfigCredentialsPtrOutput {
	return o
}

func (o GetSubjectConfigCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GetSubjectConfigCredentials] {
	return pulumix.Output[*GetSubjectConfigCredentials]{
		OutputState: o.OutputState,
	}
}

func (o GetSubjectConfigCredentialsPtrOutput) Elem() GetSubjectConfigCredentialsOutput {
	return o.ApplyT(func(v *GetSubjectConfigCredentials) GetSubjectConfigCredentials {
		if v != nil {
			return *v
		}
		var ret GetSubjectConfigCredentials
		return ret
	}).(GetSubjectConfigCredentialsOutput)
}

// The Schema Registry API Key.
func (o GetSubjectConfigCredentialsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetSubjectConfigCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// The Schema Registry API Secret.
func (o GetSubjectConfigCredentialsPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetSubjectConfigCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Secret
	}).(pulumi.StringPtrOutput)
}

type GetSubjectConfigSchemaRegistryCluster struct {
	// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
	Id string `pulumi:"id"`
}

// GetSubjectConfigSchemaRegistryClusterInput is an input type that accepts GetSubjectConfigSchemaRegistryClusterArgs and GetSubjectConfigSchemaRegistryClusterOutput values.
// You can construct a concrete instance of `GetSubjectConfigSchemaRegistryClusterInput` via:
//
//	GetSubjectConfigSchemaRegistryClusterArgs{...}
type GetSubjectConfigSchemaRegistryClusterInput interface {
	pulumi.Input

	ToGetSubjectConfigSchemaRegistryClusterOutput() GetSubjectConfigSchemaRegistryClusterOutput
	ToGetSubjectConfigSchemaRegistryClusterOutputWithContext(context.Context) GetSubjectConfigSchemaRegistryClusterOutput
}

type GetSubjectConfigSchemaRegistryClusterArgs struct {
	// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetSubjectConfigSchemaRegistryClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubjectConfigSchemaRegistryCluster)(nil)).Elem()
}

func (i GetSubjectConfigSchemaRegistryClusterArgs) ToGetSubjectConfigSchemaRegistryClusterOutput() GetSubjectConfigSchemaRegistryClusterOutput {
	return i.ToGetSubjectConfigSchemaRegistryClusterOutputWithContext(context.Background())
}

func (i GetSubjectConfigSchemaRegistryClusterArgs) ToGetSubjectConfigSchemaRegistryClusterOutputWithContext(ctx context.Context) GetSubjectConfigSchemaRegistryClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubjectConfigSchemaRegistryClusterOutput)
}

func (i GetSubjectConfigSchemaRegistryClusterArgs) ToOutput(ctx context.Context) pulumix.Output[GetSubjectConfigSchemaRegistryCluster] {
	return pulumix.Output[GetSubjectConfigSchemaRegistryCluster]{
		OutputState: i.ToGetSubjectConfigSchemaRegistryClusterOutputWithContext(ctx).OutputState,
	}
}

func (i GetSubjectConfigSchemaRegistryClusterArgs) ToGetSubjectConfigSchemaRegistryClusterPtrOutput() GetSubjectConfigSchemaRegistryClusterPtrOutput {
	return i.ToGetSubjectConfigSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (i GetSubjectConfigSchemaRegistryClusterArgs) ToGetSubjectConfigSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetSubjectConfigSchemaRegistryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubjectConfigSchemaRegistryClusterOutput).ToGetSubjectConfigSchemaRegistryClusterPtrOutputWithContext(ctx)
}

// GetSubjectConfigSchemaRegistryClusterPtrInput is an input type that accepts GetSubjectConfigSchemaRegistryClusterArgs, GetSubjectConfigSchemaRegistryClusterPtr and GetSubjectConfigSchemaRegistryClusterPtrOutput values.
// You can construct a concrete instance of `GetSubjectConfigSchemaRegistryClusterPtrInput` via:
//
//	        GetSubjectConfigSchemaRegistryClusterArgs{...}
//
//	or:
//
//	        nil
type GetSubjectConfigSchemaRegistryClusterPtrInput interface {
	pulumi.Input

	ToGetSubjectConfigSchemaRegistryClusterPtrOutput() GetSubjectConfigSchemaRegistryClusterPtrOutput
	ToGetSubjectConfigSchemaRegistryClusterPtrOutputWithContext(context.Context) GetSubjectConfigSchemaRegistryClusterPtrOutput
}

type getSubjectConfigSchemaRegistryClusterPtrType GetSubjectConfigSchemaRegistryClusterArgs

func GetSubjectConfigSchemaRegistryClusterPtr(v *GetSubjectConfigSchemaRegistryClusterArgs) GetSubjectConfigSchemaRegistryClusterPtrInput {
	return (*getSubjectConfigSchemaRegistryClusterPtrType)(v)
}

func (*getSubjectConfigSchemaRegistryClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSubjectConfigSchemaRegistryCluster)(nil)).Elem()
}

func (i *getSubjectConfigSchemaRegistryClusterPtrType) ToGetSubjectConfigSchemaRegistryClusterPtrOutput() GetSubjectConfigSchemaRegistryClusterPtrOutput {
	return i.ToGetSubjectConfigSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (i *getSubjectConfigSchemaRegistryClusterPtrType) ToGetSubjectConfigSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetSubjectConfigSchemaRegistryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubjectConfigSchemaRegistryClusterPtrOutput)
}

func (i *getSubjectConfigSchemaRegistryClusterPtrType) ToOutput(ctx context.Context) pulumix.Output[*GetSubjectConfigSchemaRegistryCluster] {
	return pulumix.Output[*GetSubjectConfigSchemaRegistryCluster]{
		OutputState: i.ToGetSubjectConfigSchemaRegistryClusterPtrOutputWithContext(ctx).OutputState,
	}
}

type GetSubjectConfigSchemaRegistryClusterOutput struct{ *pulumi.OutputState }

func (GetSubjectConfigSchemaRegistryClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubjectConfigSchemaRegistryCluster)(nil)).Elem()
}

func (o GetSubjectConfigSchemaRegistryClusterOutput) ToGetSubjectConfigSchemaRegistryClusterOutput() GetSubjectConfigSchemaRegistryClusterOutput {
	return o
}

func (o GetSubjectConfigSchemaRegistryClusterOutput) ToGetSubjectConfigSchemaRegistryClusterOutputWithContext(ctx context.Context) GetSubjectConfigSchemaRegistryClusterOutput {
	return o
}

func (o GetSubjectConfigSchemaRegistryClusterOutput) ToGetSubjectConfigSchemaRegistryClusterPtrOutput() GetSubjectConfigSchemaRegistryClusterPtrOutput {
	return o.ToGetSubjectConfigSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (o GetSubjectConfigSchemaRegistryClusterOutput) ToGetSubjectConfigSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetSubjectConfigSchemaRegistryClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetSubjectConfigSchemaRegistryCluster) *GetSubjectConfigSchemaRegistryCluster {
		return &v
	}).(GetSubjectConfigSchemaRegistryClusterPtrOutput)
}

func (o GetSubjectConfigSchemaRegistryClusterOutput) ToOutput(ctx context.Context) pulumix.Output[GetSubjectConfigSchemaRegistryCluster] {
	return pulumix.Output[GetSubjectConfigSchemaRegistryCluster]{
		OutputState: o.OutputState,
	}
}

// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
func (o GetSubjectConfigSchemaRegistryClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubjectConfigSchemaRegistryCluster) string { return v.Id }).(pulumi.StringOutput)
}

type GetSubjectConfigSchemaRegistryClusterPtrOutput struct{ *pulumi.OutputState }

func (GetSubjectConfigSchemaRegistryClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSubjectConfigSchemaRegistryCluster)(nil)).Elem()
}

func (o GetSubjectConfigSchemaRegistryClusterPtrOutput) ToGetSubjectConfigSchemaRegistryClusterPtrOutput() GetSubjectConfigSchemaRegistryClusterPtrOutput {
	return o
}

func (o GetSubjectConfigSchemaRegistryClusterPtrOutput) ToGetSubjectConfigSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetSubjectConfigSchemaRegistryClusterPtrOutput {
	return o
}

func (o GetSubjectConfigSchemaRegistryClusterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GetSubjectConfigSchemaRegistryCluster] {
	return pulumix.Output[*GetSubjectConfigSchemaRegistryCluster]{
		OutputState: o.OutputState,
	}
}

func (o GetSubjectConfigSchemaRegistryClusterPtrOutput) Elem() GetSubjectConfigSchemaRegistryClusterOutput {
	return o.ApplyT(func(v *GetSubjectConfigSchemaRegistryCluster) GetSubjectConfigSchemaRegistryCluster {
		if v != nil {
			return *v
		}
		var ret GetSubjectConfigSchemaRegistryCluster
		return ret
	}).(GetSubjectConfigSchemaRegistryClusterOutput)
}

// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
func (o GetSubjectConfigSchemaRegistryClusterPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetSubjectConfigSchemaRegistryCluster) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type GetSubjectModeCredentials struct {
	// The Schema Registry API Key.
	Key string `pulumi:"key"`
	// The Schema Registry API Secret.
	Secret string `pulumi:"secret"`
}

// GetSubjectModeCredentialsInput is an input type that accepts GetSubjectModeCredentialsArgs and GetSubjectModeCredentialsOutput values.
// You can construct a concrete instance of `GetSubjectModeCredentialsInput` via:
//
//	GetSubjectModeCredentialsArgs{...}
type GetSubjectModeCredentialsInput interface {
	pulumi.Input

	ToGetSubjectModeCredentialsOutput() GetSubjectModeCredentialsOutput
	ToGetSubjectModeCredentialsOutputWithContext(context.Context) GetSubjectModeCredentialsOutput
}

type GetSubjectModeCredentialsArgs struct {
	// The Schema Registry API Key.
	Key pulumi.StringInput `pulumi:"key"`
	// The Schema Registry API Secret.
	Secret pulumi.StringInput `pulumi:"secret"`
}

func (GetSubjectModeCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubjectModeCredentials)(nil)).Elem()
}

func (i GetSubjectModeCredentialsArgs) ToGetSubjectModeCredentialsOutput() GetSubjectModeCredentialsOutput {
	return i.ToGetSubjectModeCredentialsOutputWithContext(context.Background())
}

func (i GetSubjectModeCredentialsArgs) ToGetSubjectModeCredentialsOutputWithContext(ctx context.Context) GetSubjectModeCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubjectModeCredentialsOutput)
}

func (i GetSubjectModeCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[GetSubjectModeCredentials] {
	return pulumix.Output[GetSubjectModeCredentials]{
		OutputState: i.ToGetSubjectModeCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i GetSubjectModeCredentialsArgs) ToGetSubjectModeCredentialsPtrOutput() GetSubjectModeCredentialsPtrOutput {
	return i.ToGetSubjectModeCredentialsPtrOutputWithContext(context.Background())
}

func (i GetSubjectModeCredentialsArgs) ToGetSubjectModeCredentialsPtrOutputWithContext(ctx context.Context) GetSubjectModeCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubjectModeCredentialsOutput).ToGetSubjectModeCredentialsPtrOutputWithContext(ctx)
}

// GetSubjectModeCredentialsPtrInput is an input type that accepts GetSubjectModeCredentialsArgs, GetSubjectModeCredentialsPtr and GetSubjectModeCredentialsPtrOutput values.
// You can construct a concrete instance of `GetSubjectModeCredentialsPtrInput` via:
//
//	        GetSubjectModeCredentialsArgs{...}
//
//	or:
//
//	        nil
type GetSubjectModeCredentialsPtrInput interface {
	pulumi.Input

	ToGetSubjectModeCredentialsPtrOutput() GetSubjectModeCredentialsPtrOutput
	ToGetSubjectModeCredentialsPtrOutputWithContext(context.Context) GetSubjectModeCredentialsPtrOutput
}

type getSubjectModeCredentialsPtrType GetSubjectModeCredentialsArgs

func GetSubjectModeCredentialsPtr(v *GetSubjectModeCredentialsArgs) GetSubjectModeCredentialsPtrInput {
	return (*getSubjectModeCredentialsPtrType)(v)
}

func (*getSubjectModeCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSubjectModeCredentials)(nil)).Elem()
}

func (i *getSubjectModeCredentialsPtrType) ToGetSubjectModeCredentialsPtrOutput() GetSubjectModeCredentialsPtrOutput {
	return i.ToGetSubjectModeCredentialsPtrOutputWithContext(context.Background())
}

func (i *getSubjectModeCredentialsPtrType) ToGetSubjectModeCredentialsPtrOutputWithContext(ctx context.Context) GetSubjectModeCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubjectModeCredentialsPtrOutput)
}

func (i *getSubjectModeCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*GetSubjectModeCredentials] {
	return pulumix.Output[*GetSubjectModeCredentials]{
		OutputState: i.ToGetSubjectModeCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

type GetSubjectModeCredentialsOutput struct{ *pulumi.OutputState }

func (GetSubjectModeCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubjectModeCredentials)(nil)).Elem()
}

func (o GetSubjectModeCredentialsOutput) ToGetSubjectModeCredentialsOutput() GetSubjectModeCredentialsOutput {
	return o
}

func (o GetSubjectModeCredentialsOutput) ToGetSubjectModeCredentialsOutputWithContext(ctx context.Context) GetSubjectModeCredentialsOutput {
	return o
}

func (o GetSubjectModeCredentialsOutput) ToGetSubjectModeCredentialsPtrOutput() GetSubjectModeCredentialsPtrOutput {
	return o.ToGetSubjectModeCredentialsPtrOutputWithContext(context.Background())
}

func (o GetSubjectModeCredentialsOutput) ToGetSubjectModeCredentialsPtrOutputWithContext(ctx context.Context) GetSubjectModeCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetSubjectModeCredentials) *GetSubjectModeCredentials {
		return &v
	}).(GetSubjectModeCredentialsPtrOutput)
}

func (o GetSubjectModeCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[GetSubjectModeCredentials] {
	return pulumix.Output[GetSubjectModeCredentials]{
		OutputState: o.OutputState,
	}
}

// The Schema Registry API Key.
func (o GetSubjectModeCredentialsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubjectModeCredentials) string { return v.Key }).(pulumi.StringOutput)
}

// The Schema Registry API Secret.
func (o GetSubjectModeCredentialsOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubjectModeCredentials) string { return v.Secret }).(pulumi.StringOutput)
}

type GetSubjectModeCredentialsPtrOutput struct{ *pulumi.OutputState }

func (GetSubjectModeCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSubjectModeCredentials)(nil)).Elem()
}

func (o GetSubjectModeCredentialsPtrOutput) ToGetSubjectModeCredentialsPtrOutput() GetSubjectModeCredentialsPtrOutput {
	return o
}

func (o GetSubjectModeCredentialsPtrOutput) ToGetSubjectModeCredentialsPtrOutputWithContext(ctx context.Context) GetSubjectModeCredentialsPtrOutput {
	return o
}

func (o GetSubjectModeCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GetSubjectModeCredentials] {
	return pulumix.Output[*GetSubjectModeCredentials]{
		OutputState: o.OutputState,
	}
}

func (o GetSubjectModeCredentialsPtrOutput) Elem() GetSubjectModeCredentialsOutput {
	return o.ApplyT(func(v *GetSubjectModeCredentials) GetSubjectModeCredentials {
		if v != nil {
			return *v
		}
		var ret GetSubjectModeCredentials
		return ret
	}).(GetSubjectModeCredentialsOutput)
}

// The Schema Registry API Key.
func (o GetSubjectModeCredentialsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetSubjectModeCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// The Schema Registry API Secret.
func (o GetSubjectModeCredentialsPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetSubjectModeCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Secret
	}).(pulumi.StringPtrOutput)
}

type GetSubjectModeSchemaRegistryCluster struct {
	// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
	Id string `pulumi:"id"`
}

// GetSubjectModeSchemaRegistryClusterInput is an input type that accepts GetSubjectModeSchemaRegistryClusterArgs and GetSubjectModeSchemaRegistryClusterOutput values.
// You can construct a concrete instance of `GetSubjectModeSchemaRegistryClusterInput` via:
//
//	GetSubjectModeSchemaRegistryClusterArgs{...}
type GetSubjectModeSchemaRegistryClusterInput interface {
	pulumi.Input

	ToGetSubjectModeSchemaRegistryClusterOutput() GetSubjectModeSchemaRegistryClusterOutput
	ToGetSubjectModeSchemaRegistryClusterOutputWithContext(context.Context) GetSubjectModeSchemaRegistryClusterOutput
}

type GetSubjectModeSchemaRegistryClusterArgs struct {
	// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetSubjectModeSchemaRegistryClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubjectModeSchemaRegistryCluster)(nil)).Elem()
}

func (i GetSubjectModeSchemaRegistryClusterArgs) ToGetSubjectModeSchemaRegistryClusterOutput() GetSubjectModeSchemaRegistryClusterOutput {
	return i.ToGetSubjectModeSchemaRegistryClusterOutputWithContext(context.Background())
}

func (i GetSubjectModeSchemaRegistryClusterArgs) ToGetSubjectModeSchemaRegistryClusterOutputWithContext(ctx context.Context) GetSubjectModeSchemaRegistryClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubjectModeSchemaRegistryClusterOutput)
}

func (i GetSubjectModeSchemaRegistryClusterArgs) ToOutput(ctx context.Context) pulumix.Output[GetSubjectModeSchemaRegistryCluster] {
	return pulumix.Output[GetSubjectModeSchemaRegistryCluster]{
		OutputState: i.ToGetSubjectModeSchemaRegistryClusterOutputWithContext(ctx).OutputState,
	}
}

func (i GetSubjectModeSchemaRegistryClusterArgs) ToGetSubjectModeSchemaRegistryClusterPtrOutput() GetSubjectModeSchemaRegistryClusterPtrOutput {
	return i.ToGetSubjectModeSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (i GetSubjectModeSchemaRegistryClusterArgs) ToGetSubjectModeSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetSubjectModeSchemaRegistryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubjectModeSchemaRegistryClusterOutput).ToGetSubjectModeSchemaRegistryClusterPtrOutputWithContext(ctx)
}

// GetSubjectModeSchemaRegistryClusterPtrInput is an input type that accepts GetSubjectModeSchemaRegistryClusterArgs, GetSubjectModeSchemaRegistryClusterPtr and GetSubjectModeSchemaRegistryClusterPtrOutput values.
// You can construct a concrete instance of `GetSubjectModeSchemaRegistryClusterPtrInput` via:
//
//	        GetSubjectModeSchemaRegistryClusterArgs{...}
//
//	or:
//
//	        nil
type GetSubjectModeSchemaRegistryClusterPtrInput interface {
	pulumi.Input

	ToGetSubjectModeSchemaRegistryClusterPtrOutput() GetSubjectModeSchemaRegistryClusterPtrOutput
	ToGetSubjectModeSchemaRegistryClusterPtrOutputWithContext(context.Context) GetSubjectModeSchemaRegistryClusterPtrOutput
}

type getSubjectModeSchemaRegistryClusterPtrType GetSubjectModeSchemaRegistryClusterArgs

func GetSubjectModeSchemaRegistryClusterPtr(v *GetSubjectModeSchemaRegistryClusterArgs) GetSubjectModeSchemaRegistryClusterPtrInput {
	return (*getSubjectModeSchemaRegistryClusterPtrType)(v)
}

func (*getSubjectModeSchemaRegistryClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSubjectModeSchemaRegistryCluster)(nil)).Elem()
}

func (i *getSubjectModeSchemaRegistryClusterPtrType) ToGetSubjectModeSchemaRegistryClusterPtrOutput() GetSubjectModeSchemaRegistryClusterPtrOutput {
	return i.ToGetSubjectModeSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (i *getSubjectModeSchemaRegistryClusterPtrType) ToGetSubjectModeSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetSubjectModeSchemaRegistryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubjectModeSchemaRegistryClusterPtrOutput)
}

func (i *getSubjectModeSchemaRegistryClusterPtrType) ToOutput(ctx context.Context) pulumix.Output[*GetSubjectModeSchemaRegistryCluster] {
	return pulumix.Output[*GetSubjectModeSchemaRegistryCluster]{
		OutputState: i.ToGetSubjectModeSchemaRegistryClusterPtrOutputWithContext(ctx).OutputState,
	}
}

type GetSubjectModeSchemaRegistryClusterOutput struct{ *pulumi.OutputState }

func (GetSubjectModeSchemaRegistryClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubjectModeSchemaRegistryCluster)(nil)).Elem()
}

func (o GetSubjectModeSchemaRegistryClusterOutput) ToGetSubjectModeSchemaRegistryClusterOutput() GetSubjectModeSchemaRegistryClusterOutput {
	return o
}

func (o GetSubjectModeSchemaRegistryClusterOutput) ToGetSubjectModeSchemaRegistryClusterOutputWithContext(ctx context.Context) GetSubjectModeSchemaRegistryClusterOutput {
	return o
}

func (o GetSubjectModeSchemaRegistryClusterOutput) ToGetSubjectModeSchemaRegistryClusterPtrOutput() GetSubjectModeSchemaRegistryClusterPtrOutput {
	return o.ToGetSubjectModeSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (o GetSubjectModeSchemaRegistryClusterOutput) ToGetSubjectModeSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetSubjectModeSchemaRegistryClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetSubjectModeSchemaRegistryCluster) *GetSubjectModeSchemaRegistryCluster {
		return &v
	}).(GetSubjectModeSchemaRegistryClusterPtrOutput)
}

func (o GetSubjectModeSchemaRegistryClusterOutput) ToOutput(ctx context.Context) pulumix.Output[GetSubjectModeSchemaRegistryCluster] {
	return pulumix.Output[GetSubjectModeSchemaRegistryCluster]{
		OutputState: o.OutputState,
	}
}

// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
func (o GetSubjectModeSchemaRegistryClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubjectModeSchemaRegistryCluster) string { return v.Id }).(pulumi.StringOutput)
}

type GetSubjectModeSchemaRegistryClusterPtrOutput struct{ *pulumi.OutputState }

func (GetSubjectModeSchemaRegistryClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSubjectModeSchemaRegistryCluster)(nil)).Elem()
}

func (o GetSubjectModeSchemaRegistryClusterPtrOutput) ToGetSubjectModeSchemaRegistryClusterPtrOutput() GetSubjectModeSchemaRegistryClusterPtrOutput {
	return o
}

func (o GetSubjectModeSchemaRegistryClusterPtrOutput) ToGetSubjectModeSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetSubjectModeSchemaRegistryClusterPtrOutput {
	return o
}

func (o GetSubjectModeSchemaRegistryClusterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GetSubjectModeSchemaRegistryCluster] {
	return pulumix.Output[*GetSubjectModeSchemaRegistryCluster]{
		OutputState: o.OutputState,
	}
}

func (o GetSubjectModeSchemaRegistryClusterPtrOutput) Elem() GetSubjectModeSchemaRegistryClusterOutput {
	return o.ApplyT(func(v *GetSubjectModeSchemaRegistryCluster) GetSubjectModeSchemaRegistryCluster {
		if v != nil {
			return *v
		}
		var ret GetSubjectModeSchemaRegistryCluster
		return ret
	}).(GetSubjectModeSchemaRegistryClusterOutput)
}

// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
func (o GetSubjectModeSchemaRegistryClusterPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetSubjectModeSchemaRegistryCluster) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type GetTagBindingCredentials struct {
	// The Schema Registry API Key.
	Key string `pulumi:"key"`
	// The Schema Registry API Secret.
	Secret string `pulumi:"secret"`
}

// GetTagBindingCredentialsInput is an input type that accepts GetTagBindingCredentialsArgs and GetTagBindingCredentialsOutput values.
// You can construct a concrete instance of `GetTagBindingCredentialsInput` via:
//
//	GetTagBindingCredentialsArgs{...}
type GetTagBindingCredentialsInput interface {
	pulumi.Input

	ToGetTagBindingCredentialsOutput() GetTagBindingCredentialsOutput
	ToGetTagBindingCredentialsOutputWithContext(context.Context) GetTagBindingCredentialsOutput
}

type GetTagBindingCredentialsArgs struct {
	// The Schema Registry API Key.
	Key pulumi.StringInput `pulumi:"key"`
	// The Schema Registry API Secret.
	Secret pulumi.StringInput `pulumi:"secret"`
}

func (GetTagBindingCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagBindingCredentials)(nil)).Elem()
}

func (i GetTagBindingCredentialsArgs) ToGetTagBindingCredentialsOutput() GetTagBindingCredentialsOutput {
	return i.ToGetTagBindingCredentialsOutputWithContext(context.Background())
}

func (i GetTagBindingCredentialsArgs) ToGetTagBindingCredentialsOutputWithContext(ctx context.Context) GetTagBindingCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagBindingCredentialsOutput)
}

func (i GetTagBindingCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[GetTagBindingCredentials] {
	return pulumix.Output[GetTagBindingCredentials]{
		OutputState: i.ToGetTagBindingCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i GetTagBindingCredentialsArgs) ToGetTagBindingCredentialsPtrOutput() GetTagBindingCredentialsPtrOutput {
	return i.ToGetTagBindingCredentialsPtrOutputWithContext(context.Background())
}

func (i GetTagBindingCredentialsArgs) ToGetTagBindingCredentialsPtrOutputWithContext(ctx context.Context) GetTagBindingCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagBindingCredentialsOutput).ToGetTagBindingCredentialsPtrOutputWithContext(ctx)
}

// GetTagBindingCredentialsPtrInput is an input type that accepts GetTagBindingCredentialsArgs, GetTagBindingCredentialsPtr and GetTagBindingCredentialsPtrOutput values.
// You can construct a concrete instance of `GetTagBindingCredentialsPtrInput` via:
//
//	        GetTagBindingCredentialsArgs{...}
//
//	or:
//
//	        nil
type GetTagBindingCredentialsPtrInput interface {
	pulumi.Input

	ToGetTagBindingCredentialsPtrOutput() GetTagBindingCredentialsPtrOutput
	ToGetTagBindingCredentialsPtrOutputWithContext(context.Context) GetTagBindingCredentialsPtrOutput
}

type getTagBindingCredentialsPtrType GetTagBindingCredentialsArgs

func GetTagBindingCredentialsPtr(v *GetTagBindingCredentialsArgs) GetTagBindingCredentialsPtrInput {
	return (*getTagBindingCredentialsPtrType)(v)
}

func (*getTagBindingCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTagBindingCredentials)(nil)).Elem()
}

func (i *getTagBindingCredentialsPtrType) ToGetTagBindingCredentialsPtrOutput() GetTagBindingCredentialsPtrOutput {
	return i.ToGetTagBindingCredentialsPtrOutputWithContext(context.Background())
}

func (i *getTagBindingCredentialsPtrType) ToGetTagBindingCredentialsPtrOutputWithContext(ctx context.Context) GetTagBindingCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagBindingCredentialsPtrOutput)
}

func (i *getTagBindingCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*GetTagBindingCredentials] {
	return pulumix.Output[*GetTagBindingCredentials]{
		OutputState: i.ToGetTagBindingCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

type GetTagBindingCredentialsOutput struct{ *pulumi.OutputState }

func (GetTagBindingCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagBindingCredentials)(nil)).Elem()
}

func (o GetTagBindingCredentialsOutput) ToGetTagBindingCredentialsOutput() GetTagBindingCredentialsOutput {
	return o
}

func (o GetTagBindingCredentialsOutput) ToGetTagBindingCredentialsOutputWithContext(ctx context.Context) GetTagBindingCredentialsOutput {
	return o
}

func (o GetTagBindingCredentialsOutput) ToGetTagBindingCredentialsPtrOutput() GetTagBindingCredentialsPtrOutput {
	return o.ToGetTagBindingCredentialsPtrOutputWithContext(context.Background())
}

func (o GetTagBindingCredentialsOutput) ToGetTagBindingCredentialsPtrOutputWithContext(ctx context.Context) GetTagBindingCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetTagBindingCredentials) *GetTagBindingCredentials {
		return &v
	}).(GetTagBindingCredentialsPtrOutput)
}

func (o GetTagBindingCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[GetTagBindingCredentials] {
	return pulumix.Output[GetTagBindingCredentials]{
		OutputState: o.OutputState,
	}
}

// The Schema Registry API Key.
func (o GetTagBindingCredentialsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetTagBindingCredentials) string { return v.Key }).(pulumi.StringOutput)
}

// The Schema Registry API Secret.
func (o GetTagBindingCredentialsOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v GetTagBindingCredentials) string { return v.Secret }).(pulumi.StringOutput)
}

type GetTagBindingCredentialsPtrOutput struct{ *pulumi.OutputState }

func (GetTagBindingCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTagBindingCredentials)(nil)).Elem()
}

func (o GetTagBindingCredentialsPtrOutput) ToGetTagBindingCredentialsPtrOutput() GetTagBindingCredentialsPtrOutput {
	return o
}

func (o GetTagBindingCredentialsPtrOutput) ToGetTagBindingCredentialsPtrOutputWithContext(ctx context.Context) GetTagBindingCredentialsPtrOutput {
	return o
}

func (o GetTagBindingCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GetTagBindingCredentials] {
	return pulumix.Output[*GetTagBindingCredentials]{
		OutputState: o.OutputState,
	}
}

func (o GetTagBindingCredentialsPtrOutput) Elem() GetTagBindingCredentialsOutput {
	return o.ApplyT(func(v *GetTagBindingCredentials) GetTagBindingCredentials {
		if v != nil {
			return *v
		}
		var ret GetTagBindingCredentials
		return ret
	}).(GetTagBindingCredentialsOutput)
}

// The Schema Registry API Key.
func (o GetTagBindingCredentialsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetTagBindingCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// The Schema Registry API Secret.
func (o GetTagBindingCredentialsPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetTagBindingCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Secret
	}).(pulumi.StringPtrOutput)
}

type GetTagBindingSchemaRegistryCluster struct {
	// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
	Id string `pulumi:"id"`
}

// GetTagBindingSchemaRegistryClusterInput is an input type that accepts GetTagBindingSchemaRegistryClusterArgs and GetTagBindingSchemaRegistryClusterOutput values.
// You can construct a concrete instance of `GetTagBindingSchemaRegistryClusterInput` via:
//
//	GetTagBindingSchemaRegistryClusterArgs{...}
type GetTagBindingSchemaRegistryClusterInput interface {
	pulumi.Input

	ToGetTagBindingSchemaRegistryClusterOutput() GetTagBindingSchemaRegistryClusterOutput
	ToGetTagBindingSchemaRegistryClusterOutputWithContext(context.Context) GetTagBindingSchemaRegistryClusterOutput
}

type GetTagBindingSchemaRegistryClusterArgs struct {
	// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetTagBindingSchemaRegistryClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagBindingSchemaRegistryCluster)(nil)).Elem()
}

func (i GetTagBindingSchemaRegistryClusterArgs) ToGetTagBindingSchemaRegistryClusterOutput() GetTagBindingSchemaRegistryClusterOutput {
	return i.ToGetTagBindingSchemaRegistryClusterOutputWithContext(context.Background())
}

func (i GetTagBindingSchemaRegistryClusterArgs) ToGetTagBindingSchemaRegistryClusterOutputWithContext(ctx context.Context) GetTagBindingSchemaRegistryClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagBindingSchemaRegistryClusterOutput)
}

func (i GetTagBindingSchemaRegistryClusterArgs) ToOutput(ctx context.Context) pulumix.Output[GetTagBindingSchemaRegistryCluster] {
	return pulumix.Output[GetTagBindingSchemaRegistryCluster]{
		OutputState: i.ToGetTagBindingSchemaRegistryClusterOutputWithContext(ctx).OutputState,
	}
}

func (i GetTagBindingSchemaRegistryClusterArgs) ToGetTagBindingSchemaRegistryClusterPtrOutput() GetTagBindingSchemaRegistryClusterPtrOutput {
	return i.ToGetTagBindingSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (i GetTagBindingSchemaRegistryClusterArgs) ToGetTagBindingSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetTagBindingSchemaRegistryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagBindingSchemaRegistryClusterOutput).ToGetTagBindingSchemaRegistryClusterPtrOutputWithContext(ctx)
}

// GetTagBindingSchemaRegistryClusterPtrInput is an input type that accepts GetTagBindingSchemaRegistryClusterArgs, GetTagBindingSchemaRegistryClusterPtr and GetTagBindingSchemaRegistryClusterPtrOutput values.
// You can construct a concrete instance of `GetTagBindingSchemaRegistryClusterPtrInput` via:
//
//	        GetTagBindingSchemaRegistryClusterArgs{...}
//
//	or:
//
//	        nil
type GetTagBindingSchemaRegistryClusterPtrInput interface {
	pulumi.Input

	ToGetTagBindingSchemaRegistryClusterPtrOutput() GetTagBindingSchemaRegistryClusterPtrOutput
	ToGetTagBindingSchemaRegistryClusterPtrOutputWithContext(context.Context) GetTagBindingSchemaRegistryClusterPtrOutput
}

type getTagBindingSchemaRegistryClusterPtrType GetTagBindingSchemaRegistryClusterArgs

func GetTagBindingSchemaRegistryClusterPtr(v *GetTagBindingSchemaRegistryClusterArgs) GetTagBindingSchemaRegistryClusterPtrInput {
	return (*getTagBindingSchemaRegistryClusterPtrType)(v)
}

func (*getTagBindingSchemaRegistryClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTagBindingSchemaRegistryCluster)(nil)).Elem()
}

func (i *getTagBindingSchemaRegistryClusterPtrType) ToGetTagBindingSchemaRegistryClusterPtrOutput() GetTagBindingSchemaRegistryClusterPtrOutput {
	return i.ToGetTagBindingSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (i *getTagBindingSchemaRegistryClusterPtrType) ToGetTagBindingSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetTagBindingSchemaRegistryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagBindingSchemaRegistryClusterPtrOutput)
}

func (i *getTagBindingSchemaRegistryClusterPtrType) ToOutput(ctx context.Context) pulumix.Output[*GetTagBindingSchemaRegistryCluster] {
	return pulumix.Output[*GetTagBindingSchemaRegistryCluster]{
		OutputState: i.ToGetTagBindingSchemaRegistryClusterPtrOutputWithContext(ctx).OutputState,
	}
}

type GetTagBindingSchemaRegistryClusterOutput struct{ *pulumi.OutputState }

func (GetTagBindingSchemaRegistryClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagBindingSchemaRegistryCluster)(nil)).Elem()
}

func (o GetTagBindingSchemaRegistryClusterOutput) ToGetTagBindingSchemaRegistryClusterOutput() GetTagBindingSchemaRegistryClusterOutput {
	return o
}

func (o GetTagBindingSchemaRegistryClusterOutput) ToGetTagBindingSchemaRegistryClusterOutputWithContext(ctx context.Context) GetTagBindingSchemaRegistryClusterOutput {
	return o
}

func (o GetTagBindingSchemaRegistryClusterOutput) ToGetTagBindingSchemaRegistryClusterPtrOutput() GetTagBindingSchemaRegistryClusterPtrOutput {
	return o.ToGetTagBindingSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (o GetTagBindingSchemaRegistryClusterOutput) ToGetTagBindingSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetTagBindingSchemaRegistryClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetTagBindingSchemaRegistryCluster) *GetTagBindingSchemaRegistryCluster {
		return &v
	}).(GetTagBindingSchemaRegistryClusterPtrOutput)
}

func (o GetTagBindingSchemaRegistryClusterOutput) ToOutput(ctx context.Context) pulumix.Output[GetTagBindingSchemaRegistryCluster] {
	return pulumix.Output[GetTagBindingSchemaRegistryCluster]{
		OutputState: o.OutputState,
	}
}

// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
func (o GetTagBindingSchemaRegistryClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTagBindingSchemaRegistryCluster) string { return v.Id }).(pulumi.StringOutput)
}

type GetTagBindingSchemaRegistryClusterPtrOutput struct{ *pulumi.OutputState }

func (GetTagBindingSchemaRegistryClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTagBindingSchemaRegistryCluster)(nil)).Elem()
}

func (o GetTagBindingSchemaRegistryClusterPtrOutput) ToGetTagBindingSchemaRegistryClusterPtrOutput() GetTagBindingSchemaRegistryClusterPtrOutput {
	return o
}

func (o GetTagBindingSchemaRegistryClusterPtrOutput) ToGetTagBindingSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetTagBindingSchemaRegistryClusterPtrOutput {
	return o
}

func (o GetTagBindingSchemaRegistryClusterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GetTagBindingSchemaRegistryCluster] {
	return pulumix.Output[*GetTagBindingSchemaRegistryCluster]{
		OutputState: o.OutputState,
	}
}

func (o GetTagBindingSchemaRegistryClusterPtrOutput) Elem() GetTagBindingSchemaRegistryClusterOutput {
	return o.ApplyT(func(v *GetTagBindingSchemaRegistryCluster) GetTagBindingSchemaRegistryCluster {
		if v != nil {
			return *v
		}
		var ret GetTagBindingSchemaRegistryCluster
		return ret
	}).(GetTagBindingSchemaRegistryClusterOutput)
}

// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
func (o GetTagBindingSchemaRegistryClusterPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetTagBindingSchemaRegistryCluster) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type GetTagCredentials struct {
	// The Schema Registry API Key.
	Key string `pulumi:"key"`
	// The Schema Registry API Secret.
	Secret string `pulumi:"secret"`
}

// GetTagCredentialsInput is an input type that accepts GetTagCredentialsArgs and GetTagCredentialsOutput values.
// You can construct a concrete instance of `GetTagCredentialsInput` via:
//
//	GetTagCredentialsArgs{...}
type GetTagCredentialsInput interface {
	pulumi.Input

	ToGetTagCredentialsOutput() GetTagCredentialsOutput
	ToGetTagCredentialsOutputWithContext(context.Context) GetTagCredentialsOutput
}

type GetTagCredentialsArgs struct {
	// The Schema Registry API Key.
	Key pulumi.StringInput `pulumi:"key"`
	// The Schema Registry API Secret.
	Secret pulumi.StringInput `pulumi:"secret"`
}

func (GetTagCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagCredentials)(nil)).Elem()
}

func (i GetTagCredentialsArgs) ToGetTagCredentialsOutput() GetTagCredentialsOutput {
	return i.ToGetTagCredentialsOutputWithContext(context.Background())
}

func (i GetTagCredentialsArgs) ToGetTagCredentialsOutputWithContext(ctx context.Context) GetTagCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagCredentialsOutput)
}

func (i GetTagCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[GetTagCredentials] {
	return pulumix.Output[GetTagCredentials]{
		OutputState: i.ToGetTagCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i GetTagCredentialsArgs) ToGetTagCredentialsPtrOutput() GetTagCredentialsPtrOutput {
	return i.ToGetTagCredentialsPtrOutputWithContext(context.Background())
}

func (i GetTagCredentialsArgs) ToGetTagCredentialsPtrOutputWithContext(ctx context.Context) GetTagCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagCredentialsOutput).ToGetTagCredentialsPtrOutputWithContext(ctx)
}

// GetTagCredentialsPtrInput is an input type that accepts GetTagCredentialsArgs, GetTagCredentialsPtr and GetTagCredentialsPtrOutput values.
// You can construct a concrete instance of `GetTagCredentialsPtrInput` via:
//
//	        GetTagCredentialsArgs{...}
//
//	or:
//
//	        nil
type GetTagCredentialsPtrInput interface {
	pulumi.Input

	ToGetTagCredentialsPtrOutput() GetTagCredentialsPtrOutput
	ToGetTagCredentialsPtrOutputWithContext(context.Context) GetTagCredentialsPtrOutput
}

type getTagCredentialsPtrType GetTagCredentialsArgs

func GetTagCredentialsPtr(v *GetTagCredentialsArgs) GetTagCredentialsPtrInput {
	return (*getTagCredentialsPtrType)(v)
}

func (*getTagCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTagCredentials)(nil)).Elem()
}

func (i *getTagCredentialsPtrType) ToGetTagCredentialsPtrOutput() GetTagCredentialsPtrOutput {
	return i.ToGetTagCredentialsPtrOutputWithContext(context.Background())
}

func (i *getTagCredentialsPtrType) ToGetTagCredentialsPtrOutputWithContext(ctx context.Context) GetTagCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagCredentialsPtrOutput)
}

func (i *getTagCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*GetTagCredentials] {
	return pulumix.Output[*GetTagCredentials]{
		OutputState: i.ToGetTagCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

type GetTagCredentialsOutput struct{ *pulumi.OutputState }

func (GetTagCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagCredentials)(nil)).Elem()
}

func (o GetTagCredentialsOutput) ToGetTagCredentialsOutput() GetTagCredentialsOutput {
	return o
}

func (o GetTagCredentialsOutput) ToGetTagCredentialsOutputWithContext(ctx context.Context) GetTagCredentialsOutput {
	return o
}

func (o GetTagCredentialsOutput) ToGetTagCredentialsPtrOutput() GetTagCredentialsPtrOutput {
	return o.ToGetTagCredentialsPtrOutputWithContext(context.Background())
}

func (o GetTagCredentialsOutput) ToGetTagCredentialsPtrOutputWithContext(ctx context.Context) GetTagCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetTagCredentials) *GetTagCredentials {
		return &v
	}).(GetTagCredentialsPtrOutput)
}

func (o GetTagCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[GetTagCredentials] {
	return pulumix.Output[GetTagCredentials]{
		OutputState: o.OutputState,
	}
}

// The Schema Registry API Key.
func (o GetTagCredentialsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetTagCredentials) string { return v.Key }).(pulumi.StringOutput)
}

// The Schema Registry API Secret.
func (o GetTagCredentialsOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v GetTagCredentials) string { return v.Secret }).(pulumi.StringOutput)
}

type GetTagCredentialsPtrOutput struct{ *pulumi.OutputState }

func (GetTagCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTagCredentials)(nil)).Elem()
}

func (o GetTagCredentialsPtrOutput) ToGetTagCredentialsPtrOutput() GetTagCredentialsPtrOutput {
	return o
}

func (o GetTagCredentialsPtrOutput) ToGetTagCredentialsPtrOutputWithContext(ctx context.Context) GetTagCredentialsPtrOutput {
	return o
}

func (o GetTagCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GetTagCredentials] {
	return pulumix.Output[*GetTagCredentials]{
		OutputState: o.OutputState,
	}
}

func (o GetTagCredentialsPtrOutput) Elem() GetTagCredentialsOutput {
	return o.ApplyT(func(v *GetTagCredentials) GetTagCredentials {
		if v != nil {
			return *v
		}
		var ret GetTagCredentials
		return ret
	}).(GetTagCredentialsOutput)
}

// The Schema Registry API Key.
func (o GetTagCredentialsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetTagCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// The Schema Registry API Secret.
func (o GetTagCredentialsPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetTagCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Secret
	}).(pulumi.StringPtrOutput)
}

type GetTagSchemaRegistryCluster struct {
	// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
	Id string `pulumi:"id"`
}

// GetTagSchemaRegistryClusterInput is an input type that accepts GetTagSchemaRegistryClusterArgs and GetTagSchemaRegistryClusterOutput values.
// You can construct a concrete instance of `GetTagSchemaRegistryClusterInput` via:
//
//	GetTagSchemaRegistryClusterArgs{...}
type GetTagSchemaRegistryClusterInput interface {
	pulumi.Input

	ToGetTagSchemaRegistryClusterOutput() GetTagSchemaRegistryClusterOutput
	ToGetTagSchemaRegistryClusterOutputWithContext(context.Context) GetTagSchemaRegistryClusterOutput
}

type GetTagSchemaRegistryClusterArgs struct {
	// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetTagSchemaRegistryClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagSchemaRegistryCluster)(nil)).Elem()
}

func (i GetTagSchemaRegistryClusterArgs) ToGetTagSchemaRegistryClusterOutput() GetTagSchemaRegistryClusterOutput {
	return i.ToGetTagSchemaRegistryClusterOutputWithContext(context.Background())
}

func (i GetTagSchemaRegistryClusterArgs) ToGetTagSchemaRegistryClusterOutputWithContext(ctx context.Context) GetTagSchemaRegistryClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagSchemaRegistryClusterOutput)
}

func (i GetTagSchemaRegistryClusterArgs) ToOutput(ctx context.Context) pulumix.Output[GetTagSchemaRegistryCluster] {
	return pulumix.Output[GetTagSchemaRegistryCluster]{
		OutputState: i.ToGetTagSchemaRegistryClusterOutputWithContext(ctx).OutputState,
	}
}

func (i GetTagSchemaRegistryClusterArgs) ToGetTagSchemaRegistryClusterPtrOutput() GetTagSchemaRegistryClusterPtrOutput {
	return i.ToGetTagSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (i GetTagSchemaRegistryClusterArgs) ToGetTagSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetTagSchemaRegistryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagSchemaRegistryClusterOutput).ToGetTagSchemaRegistryClusterPtrOutputWithContext(ctx)
}

// GetTagSchemaRegistryClusterPtrInput is an input type that accepts GetTagSchemaRegistryClusterArgs, GetTagSchemaRegistryClusterPtr and GetTagSchemaRegistryClusterPtrOutput values.
// You can construct a concrete instance of `GetTagSchemaRegistryClusterPtrInput` via:
//
//	        GetTagSchemaRegistryClusterArgs{...}
//
//	or:
//
//	        nil
type GetTagSchemaRegistryClusterPtrInput interface {
	pulumi.Input

	ToGetTagSchemaRegistryClusterPtrOutput() GetTagSchemaRegistryClusterPtrOutput
	ToGetTagSchemaRegistryClusterPtrOutputWithContext(context.Context) GetTagSchemaRegistryClusterPtrOutput
}

type getTagSchemaRegistryClusterPtrType GetTagSchemaRegistryClusterArgs

func GetTagSchemaRegistryClusterPtr(v *GetTagSchemaRegistryClusterArgs) GetTagSchemaRegistryClusterPtrInput {
	return (*getTagSchemaRegistryClusterPtrType)(v)
}

func (*getTagSchemaRegistryClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTagSchemaRegistryCluster)(nil)).Elem()
}

func (i *getTagSchemaRegistryClusterPtrType) ToGetTagSchemaRegistryClusterPtrOutput() GetTagSchemaRegistryClusterPtrOutput {
	return i.ToGetTagSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (i *getTagSchemaRegistryClusterPtrType) ToGetTagSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetTagSchemaRegistryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagSchemaRegistryClusterPtrOutput)
}

func (i *getTagSchemaRegistryClusterPtrType) ToOutput(ctx context.Context) pulumix.Output[*GetTagSchemaRegistryCluster] {
	return pulumix.Output[*GetTagSchemaRegistryCluster]{
		OutputState: i.ToGetTagSchemaRegistryClusterPtrOutputWithContext(ctx).OutputState,
	}
}

type GetTagSchemaRegistryClusterOutput struct{ *pulumi.OutputState }

func (GetTagSchemaRegistryClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagSchemaRegistryCluster)(nil)).Elem()
}

func (o GetTagSchemaRegistryClusterOutput) ToGetTagSchemaRegistryClusterOutput() GetTagSchemaRegistryClusterOutput {
	return o
}

func (o GetTagSchemaRegistryClusterOutput) ToGetTagSchemaRegistryClusterOutputWithContext(ctx context.Context) GetTagSchemaRegistryClusterOutput {
	return o
}

func (o GetTagSchemaRegistryClusterOutput) ToGetTagSchemaRegistryClusterPtrOutput() GetTagSchemaRegistryClusterPtrOutput {
	return o.ToGetTagSchemaRegistryClusterPtrOutputWithContext(context.Background())
}

func (o GetTagSchemaRegistryClusterOutput) ToGetTagSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetTagSchemaRegistryClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetTagSchemaRegistryCluster) *GetTagSchemaRegistryCluster {
		return &v
	}).(GetTagSchemaRegistryClusterPtrOutput)
}

func (o GetTagSchemaRegistryClusterOutput) ToOutput(ctx context.Context) pulumix.Output[GetTagSchemaRegistryCluster] {
	return pulumix.Output[GetTagSchemaRegistryCluster]{
		OutputState: o.OutputState,
	}
}

// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
func (o GetTagSchemaRegistryClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTagSchemaRegistryCluster) string { return v.Id }).(pulumi.StringOutput)
}

type GetTagSchemaRegistryClusterPtrOutput struct{ *pulumi.OutputState }

func (GetTagSchemaRegistryClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTagSchemaRegistryCluster)(nil)).Elem()
}

func (o GetTagSchemaRegistryClusterPtrOutput) ToGetTagSchemaRegistryClusterPtrOutput() GetTagSchemaRegistryClusterPtrOutput {
	return o
}

func (o GetTagSchemaRegistryClusterPtrOutput) ToGetTagSchemaRegistryClusterPtrOutputWithContext(ctx context.Context) GetTagSchemaRegistryClusterPtrOutput {
	return o
}

func (o GetTagSchemaRegistryClusterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GetTagSchemaRegistryCluster] {
	return pulumix.Output[*GetTagSchemaRegistryCluster]{
		OutputState: o.OutputState,
	}
}

func (o GetTagSchemaRegistryClusterPtrOutput) Elem() GetTagSchemaRegistryClusterOutput {
	return o.ApplyT(func(v *GetTagSchemaRegistryCluster) GetTagSchemaRegistryCluster {
		if v != nil {
			return *v
		}
		var ret GetTagSchemaRegistryCluster
		return ret
	}).(GetTagSchemaRegistryClusterOutput)
}

// The ID of the Schema Registry cluster, for example, `lsrc-abc123`.
func (o GetTagSchemaRegistryClusterPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetTagSchemaRegistryCluster) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type GetTransitGatewayAttachmentAw struct {
	// (Required String) The Amazon Resource Name (ARN) of the Resource Access Manager (RAM) Resource Share of the transit gateway your Confluent Cloud network attaches to.
	RamResourceShareArn string `pulumi:"ramResourceShareArn"`
	// (Required List of String) List of destination routes for traffic from Confluent VPC to customer VPC via Transit Gateway.
	Routes []string `pulumi:"routes"`
	// (Required String) The ID of the AWS Transit Gateway VPC Attachment that attaches Confluent VPC to Transit Gateway.
	TransitGatewayAttachmentId string `pulumi:"transitGatewayAttachmentId"`
	// (Required String) The ID of the AWS Transit Gateway that you want Confluent CLoud to be attached to. Must start with `tgw-`.
	TransitGatewayId string `pulumi:"transitGatewayId"`
}

// GetTransitGatewayAttachmentAwInput is an input type that accepts GetTransitGatewayAttachmentAwArgs and GetTransitGatewayAttachmentAwOutput values.
// You can construct a concrete instance of `GetTransitGatewayAttachmentAwInput` via:
//
//	GetTransitGatewayAttachmentAwArgs{...}
type GetTransitGatewayAttachmentAwInput interface {
	pulumi.Input

	ToGetTransitGatewayAttachmentAwOutput() GetTransitGatewayAttachmentAwOutput
	ToGetTransitGatewayAttachmentAwOutputWithContext(context.Context) GetTransitGatewayAttachmentAwOutput
}

type GetTransitGatewayAttachmentAwArgs struct {
	// (Required String) The Amazon Resource Name (ARN) of the Resource Access Manager (RAM) Resource Share of the transit gateway your Confluent Cloud network attaches to.
	RamResourceShareArn pulumi.StringInput `pulumi:"ramResourceShareArn"`
	// (Required List of String) List of destination routes for traffic from Confluent VPC to customer VPC via Transit Gateway.
	Routes pulumi.StringArrayInput `pulumi:"routes"`
	// (Required String) The ID of the AWS Transit Gateway VPC Attachment that attaches Confluent VPC to Transit Gateway.
	TransitGatewayAttachmentId pulumi.StringInput `pulumi:"transitGatewayAttachmentId"`
	// (Required String) The ID of the AWS Transit Gateway that you want Confluent CLoud to be attached to. Must start with `tgw-`.
	TransitGatewayId pulumi.StringInput `pulumi:"transitGatewayId"`
}

func (GetTransitGatewayAttachmentAwArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTransitGatewayAttachmentAw)(nil)).Elem()
}

func (i GetTransitGatewayAttachmentAwArgs) ToGetTransitGatewayAttachmentAwOutput() GetTransitGatewayAttachmentAwOutput {
	return i.ToGetTransitGatewayAttachmentAwOutputWithContext(context.Background())
}

func (i GetTransitGatewayAttachmentAwArgs) ToGetTransitGatewayAttachmentAwOutputWithContext(ctx context.Context) GetTransitGatewayAttachmentAwOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTransitGatewayAttachmentAwOutput)
}

func (i GetTransitGatewayAttachmentAwArgs) ToOutput(ctx context.Context) pulumix.Output[GetTransitGatewayAttachmentAw] {
	return pulumix.Output[GetTransitGatewayAttachmentAw]{
		OutputState: i.ToGetTransitGatewayAttachmentAwOutputWithContext(ctx).OutputState,
	}
}

// GetTransitGatewayAttachmentAwArrayInput is an input type that accepts GetTransitGatewayAttachmentAwArray and GetTransitGatewayAttachmentAwArrayOutput values.
// You can construct a concrete instance of `GetTransitGatewayAttachmentAwArrayInput` via:
//
//	GetTransitGatewayAttachmentAwArray{ GetTransitGatewayAttachmentAwArgs{...} }
type GetTransitGatewayAttachmentAwArrayInput interface {
	pulumi.Input

	ToGetTransitGatewayAttachmentAwArrayOutput() GetTransitGatewayAttachmentAwArrayOutput
	ToGetTransitGatewayAttachmentAwArrayOutputWithContext(context.Context) GetTransitGatewayAttachmentAwArrayOutput
}

type GetTransitGatewayAttachmentAwArray []GetTransitGatewayAttachmentAwInput

func (GetTransitGatewayAttachmentAwArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTransitGatewayAttachmentAw)(nil)).Elem()
}

func (i GetTransitGatewayAttachmentAwArray) ToGetTransitGatewayAttachmentAwArrayOutput() GetTransitGatewayAttachmentAwArrayOutput {
	return i.ToGetTransitGatewayAttachmentAwArrayOutputWithContext(context.Background())
}

func (i GetTransitGatewayAttachmentAwArray) ToGetTransitGatewayAttachmentAwArrayOutputWithContext(ctx context.Context) GetTransitGatewayAttachmentAwArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTransitGatewayAttachmentAwArrayOutput)
}

func (i GetTransitGatewayAttachmentAwArray) ToOutput(ctx context.Context) pulumix.Output[[]GetTransitGatewayAttachmentAw] {
	return pulumix.Output[[]GetTransitGatewayAttachmentAw]{
		OutputState: i.ToGetTransitGatewayAttachmentAwArrayOutputWithContext(ctx).OutputState,
	}
}

type GetTransitGatewayAttachmentAwOutput struct{ *pulumi.OutputState }

func (GetTransitGatewayAttachmentAwOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTransitGatewayAttachmentAw)(nil)).Elem()
}

func (o GetTransitGatewayAttachmentAwOutput) ToGetTransitGatewayAttachmentAwOutput() GetTransitGatewayAttachmentAwOutput {
	return o
}

func (o GetTransitGatewayAttachmentAwOutput) ToGetTransitGatewayAttachmentAwOutputWithContext(ctx context.Context) GetTransitGatewayAttachmentAwOutput {
	return o
}

func (o GetTransitGatewayAttachmentAwOutput) ToOutput(ctx context.Context) pulumix.Output[GetTransitGatewayAttachmentAw] {
	return pulumix.Output[GetTransitGatewayAttachmentAw]{
		OutputState: o.OutputState,
	}
}

// (Required String) The Amazon Resource Name (ARN) of the Resource Access Manager (RAM) Resource Share of the transit gateway your Confluent Cloud network attaches to.
func (o GetTransitGatewayAttachmentAwOutput) RamResourceShareArn() pulumi.StringOutput {
	return o.ApplyT(func(v GetTransitGatewayAttachmentAw) string { return v.RamResourceShareArn }).(pulumi.StringOutput)
}

// (Required List of String) List of destination routes for traffic from Confluent VPC to customer VPC via Transit Gateway.
func (o GetTransitGatewayAttachmentAwOutput) Routes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTransitGatewayAttachmentAw) []string { return v.Routes }).(pulumi.StringArrayOutput)
}

// (Required String) The ID of the AWS Transit Gateway VPC Attachment that attaches Confluent VPC to Transit Gateway.
func (o GetTransitGatewayAttachmentAwOutput) TransitGatewayAttachmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetTransitGatewayAttachmentAw) string { return v.TransitGatewayAttachmentId }).(pulumi.StringOutput)
}

// (Required String) The ID of the AWS Transit Gateway that you want Confluent CLoud to be attached to. Must start with `tgw-`.
func (o GetTransitGatewayAttachmentAwOutput) TransitGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v GetTransitGatewayAttachmentAw) string { return v.TransitGatewayId }).(pulumi.StringOutput)
}

type GetTransitGatewayAttachmentAwArrayOutput struct{ *pulumi.OutputState }

func (GetTransitGatewayAttachmentAwArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTransitGatewayAttachmentAw)(nil)).Elem()
}

func (o GetTransitGatewayAttachmentAwArrayOutput) ToGetTransitGatewayAttachmentAwArrayOutput() GetTransitGatewayAttachmentAwArrayOutput {
	return o
}

func (o GetTransitGatewayAttachmentAwArrayOutput) ToGetTransitGatewayAttachmentAwArrayOutputWithContext(ctx context.Context) GetTransitGatewayAttachmentAwArrayOutput {
	return o
}

func (o GetTransitGatewayAttachmentAwArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetTransitGatewayAttachmentAw] {
	return pulumix.Output[[]GetTransitGatewayAttachmentAw]{
		OutputState: o.OutputState,
	}
}

func (o GetTransitGatewayAttachmentAwArrayOutput) Index(i pulumi.IntInput) GetTransitGatewayAttachmentAwOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTransitGatewayAttachmentAw {
		return vs[0].([]GetTransitGatewayAttachmentAw)[vs[1].(int)]
	}).(GetTransitGatewayAttachmentAwOutput)
}

type GetTransitGatewayAttachmentEnvironment struct {
	// The ID of the Environment that the Transit Gateway Attachment belongs to, for example, `env-xyz456`.
	//
	// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
	Id string `pulumi:"id"`
}

// GetTransitGatewayAttachmentEnvironmentInput is an input type that accepts GetTransitGatewayAttachmentEnvironmentArgs and GetTransitGatewayAttachmentEnvironmentOutput values.
// You can construct a concrete instance of `GetTransitGatewayAttachmentEnvironmentInput` via:
//
//	GetTransitGatewayAttachmentEnvironmentArgs{...}
type GetTransitGatewayAttachmentEnvironmentInput interface {
	pulumi.Input

	ToGetTransitGatewayAttachmentEnvironmentOutput() GetTransitGatewayAttachmentEnvironmentOutput
	ToGetTransitGatewayAttachmentEnvironmentOutputWithContext(context.Context) GetTransitGatewayAttachmentEnvironmentOutput
}

type GetTransitGatewayAttachmentEnvironmentArgs struct {
	// The ID of the Environment that the Transit Gateway Attachment belongs to, for example, `env-xyz456`.
	//
	// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetTransitGatewayAttachmentEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTransitGatewayAttachmentEnvironment)(nil)).Elem()
}

func (i GetTransitGatewayAttachmentEnvironmentArgs) ToGetTransitGatewayAttachmentEnvironmentOutput() GetTransitGatewayAttachmentEnvironmentOutput {
	return i.ToGetTransitGatewayAttachmentEnvironmentOutputWithContext(context.Background())
}

func (i GetTransitGatewayAttachmentEnvironmentArgs) ToGetTransitGatewayAttachmentEnvironmentOutputWithContext(ctx context.Context) GetTransitGatewayAttachmentEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTransitGatewayAttachmentEnvironmentOutput)
}

func (i GetTransitGatewayAttachmentEnvironmentArgs) ToOutput(ctx context.Context) pulumix.Output[GetTransitGatewayAttachmentEnvironment] {
	return pulumix.Output[GetTransitGatewayAttachmentEnvironment]{
		OutputState: i.ToGetTransitGatewayAttachmentEnvironmentOutputWithContext(ctx).OutputState,
	}
}

type GetTransitGatewayAttachmentEnvironmentOutput struct{ *pulumi.OutputState }

func (GetTransitGatewayAttachmentEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTransitGatewayAttachmentEnvironment)(nil)).Elem()
}

func (o GetTransitGatewayAttachmentEnvironmentOutput) ToGetTransitGatewayAttachmentEnvironmentOutput() GetTransitGatewayAttachmentEnvironmentOutput {
	return o
}

func (o GetTransitGatewayAttachmentEnvironmentOutput) ToGetTransitGatewayAttachmentEnvironmentOutputWithContext(ctx context.Context) GetTransitGatewayAttachmentEnvironmentOutput {
	return o
}

func (o GetTransitGatewayAttachmentEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[GetTransitGatewayAttachmentEnvironment] {
	return pulumix.Output[GetTransitGatewayAttachmentEnvironment]{
		OutputState: o.OutputState,
	}
}

// The ID of the Environment that the Transit Gateway Attachment belongs to, for example, `env-xyz456`.
//
// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
func (o GetTransitGatewayAttachmentEnvironmentOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTransitGatewayAttachmentEnvironment) string { return v.Id }).(pulumi.StringOutput)
}

type GetTransitGatewayAttachmentNetwork struct {
	// The ID of the Environment that the Transit Gateway Attachment belongs to, for example, `env-xyz456`.
	//
	// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
	Id string `pulumi:"id"`
}

// GetTransitGatewayAttachmentNetworkInput is an input type that accepts GetTransitGatewayAttachmentNetworkArgs and GetTransitGatewayAttachmentNetworkOutput values.
// You can construct a concrete instance of `GetTransitGatewayAttachmentNetworkInput` via:
//
//	GetTransitGatewayAttachmentNetworkArgs{...}
type GetTransitGatewayAttachmentNetworkInput interface {
	pulumi.Input

	ToGetTransitGatewayAttachmentNetworkOutput() GetTransitGatewayAttachmentNetworkOutput
	ToGetTransitGatewayAttachmentNetworkOutputWithContext(context.Context) GetTransitGatewayAttachmentNetworkOutput
}

type GetTransitGatewayAttachmentNetworkArgs struct {
	// The ID of the Environment that the Transit Gateway Attachment belongs to, for example, `env-xyz456`.
	//
	// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetTransitGatewayAttachmentNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTransitGatewayAttachmentNetwork)(nil)).Elem()
}

func (i GetTransitGatewayAttachmentNetworkArgs) ToGetTransitGatewayAttachmentNetworkOutput() GetTransitGatewayAttachmentNetworkOutput {
	return i.ToGetTransitGatewayAttachmentNetworkOutputWithContext(context.Background())
}

func (i GetTransitGatewayAttachmentNetworkArgs) ToGetTransitGatewayAttachmentNetworkOutputWithContext(ctx context.Context) GetTransitGatewayAttachmentNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTransitGatewayAttachmentNetworkOutput)
}

func (i GetTransitGatewayAttachmentNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[GetTransitGatewayAttachmentNetwork] {
	return pulumix.Output[GetTransitGatewayAttachmentNetwork]{
		OutputState: i.ToGetTransitGatewayAttachmentNetworkOutputWithContext(ctx).OutputState,
	}
}

// GetTransitGatewayAttachmentNetworkArrayInput is an input type that accepts GetTransitGatewayAttachmentNetworkArray and GetTransitGatewayAttachmentNetworkArrayOutput values.
// You can construct a concrete instance of `GetTransitGatewayAttachmentNetworkArrayInput` via:
//
//	GetTransitGatewayAttachmentNetworkArray{ GetTransitGatewayAttachmentNetworkArgs{...} }
type GetTransitGatewayAttachmentNetworkArrayInput interface {
	pulumi.Input

	ToGetTransitGatewayAttachmentNetworkArrayOutput() GetTransitGatewayAttachmentNetworkArrayOutput
	ToGetTransitGatewayAttachmentNetworkArrayOutputWithContext(context.Context) GetTransitGatewayAttachmentNetworkArrayOutput
}

type GetTransitGatewayAttachmentNetworkArray []GetTransitGatewayAttachmentNetworkInput

func (GetTransitGatewayAttachmentNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTransitGatewayAttachmentNetwork)(nil)).Elem()
}

func (i GetTransitGatewayAttachmentNetworkArray) ToGetTransitGatewayAttachmentNetworkArrayOutput() GetTransitGatewayAttachmentNetworkArrayOutput {
	return i.ToGetTransitGatewayAttachmentNetworkArrayOutputWithContext(context.Background())
}

func (i GetTransitGatewayAttachmentNetworkArray) ToGetTransitGatewayAttachmentNetworkArrayOutputWithContext(ctx context.Context) GetTransitGatewayAttachmentNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTransitGatewayAttachmentNetworkArrayOutput)
}

func (i GetTransitGatewayAttachmentNetworkArray) ToOutput(ctx context.Context) pulumix.Output[[]GetTransitGatewayAttachmentNetwork] {
	return pulumix.Output[[]GetTransitGatewayAttachmentNetwork]{
		OutputState: i.ToGetTransitGatewayAttachmentNetworkArrayOutputWithContext(ctx).OutputState,
	}
}

type GetTransitGatewayAttachmentNetworkOutput struct{ *pulumi.OutputState }

func (GetTransitGatewayAttachmentNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTransitGatewayAttachmentNetwork)(nil)).Elem()
}

func (o GetTransitGatewayAttachmentNetworkOutput) ToGetTransitGatewayAttachmentNetworkOutput() GetTransitGatewayAttachmentNetworkOutput {
	return o
}

func (o GetTransitGatewayAttachmentNetworkOutput) ToGetTransitGatewayAttachmentNetworkOutputWithContext(ctx context.Context) GetTransitGatewayAttachmentNetworkOutput {
	return o
}

func (o GetTransitGatewayAttachmentNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[GetTransitGatewayAttachmentNetwork] {
	return pulumix.Output[GetTransitGatewayAttachmentNetwork]{
		OutputState: o.OutputState,
	}
}

// The ID of the Environment that the Transit Gateway Attachment belongs to, for example, `env-xyz456`.
//
// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
func (o GetTransitGatewayAttachmentNetworkOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTransitGatewayAttachmentNetwork) string { return v.Id }).(pulumi.StringOutput)
}

type GetTransitGatewayAttachmentNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetTransitGatewayAttachmentNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTransitGatewayAttachmentNetwork)(nil)).Elem()
}

func (o GetTransitGatewayAttachmentNetworkArrayOutput) ToGetTransitGatewayAttachmentNetworkArrayOutput() GetTransitGatewayAttachmentNetworkArrayOutput {
	return o
}

func (o GetTransitGatewayAttachmentNetworkArrayOutput) ToGetTransitGatewayAttachmentNetworkArrayOutputWithContext(ctx context.Context) GetTransitGatewayAttachmentNetworkArrayOutput {
	return o
}

func (o GetTransitGatewayAttachmentNetworkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetTransitGatewayAttachmentNetwork] {
	return pulumix.Output[[]GetTransitGatewayAttachmentNetwork]{
		OutputState: o.OutputState,
	}
}

func (o GetTransitGatewayAttachmentNetworkArrayOutput) Index(i pulumi.IntInput) GetTransitGatewayAttachmentNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTransitGatewayAttachmentNetwork {
		return vs[0].([]GetTransitGatewayAttachmentNetwork)[vs[1].(int)]
	}).(GetTransitGatewayAttachmentNetworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApiKeyManagedResourceInput)(nil)).Elem(), ApiKeyManagedResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiKeyManagedResourcePtrInput)(nil)).Elem(), ApiKeyManagedResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiKeyManagedResourceEnvironmentInput)(nil)).Elem(), ApiKeyManagedResourceEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiKeyManagedResourceEnvironmentPtrInput)(nil)).Elem(), ApiKeyManagedResourceEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiKeyOwnerInput)(nil)).Elem(), ApiKeyOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiKeyOwnerPtrInput)(nil)).Elem(), ApiKeyOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BusinessMetadataAttributeDefinitionInput)(nil)).Elem(), BusinessMetadataAttributeDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BusinessMetadataAttributeDefinitionArrayInput)(nil)).Elem(), BusinessMetadataAttributeDefinitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BusinessMetadataBindingCredentialsInput)(nil)).Elem(), BusinessMetadataBindingCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BusinessMetadataBindingCredentialsPtrInput)(nil)).Elem(), BusinessMetadataBindingCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BusinessMetadataBindingSchemaRegistryClusterInput)(nil)).Elem(), BusinessMetadataBindingSchemaRegistryClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BusinessMetadataBindingSchemaRegistryClusterPtrInput)(nil)).Elem(), BusinessMetadataBindingSchemaRegistryClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BusinessMetadataCredentialsInput)(nil)).Elem(), BusinessMetadataCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BusinessMetadataCredentialsPtrInput)(nil)).Elem(), BusinessMetadataCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BusinessMetadataSchemaRegistryClusterInput)(nil)).Elem(), BusinessMetadataSchemaRegistryClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BusinessMetadataSchemaRegistryClusterPtrInput)(nil)).Elem(), BusinessMetadataSchemaRegistryClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ByokKeyAwsInput)(nil)).Elem(), ByokKeyAwsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ByokKeyAwsPtrInput)(nil)).Elem(), ByokKeyAwsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ByokKeyAzureInput)(nil)).Elem(), ByokKeyAzureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ByokKeyAzurePtrInput)(nil)).Elem(), ByokKeyAzureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterLinkDestinationKafkaClusterInput)(nil)).Elem(), ClusterLinkDestinationKafkaClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterLinkDestinationKafkaClusterPtrInput)(nil)).Elem(), ClusterLinkDestinationKafkaClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterLinkDestinationKafkaClusterCredentialsInput)(nil)).Elem(), ClusterLinkDestinationKafkaClusterCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterLinkDestinationKafkaClusterCredentialsPtrInput)(nil)).Elem(), ClusterLinkDestinationKafkaClusterCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterLinkLocalKafkaClusterInput)(nil)).Elem(), ClusterLinkLocalKafkaClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterLinkLocalKafkaClusterPtrInput)(nil)).Elem(), ClusterLinkLocalKafkaClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterLinkLocalKafkaClusterCredentialsInput)(nil)).Elem(), ClusterLinkLocalKafkaClusterCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterLinkLocalKafkaClusterCredentialsPtrInput)(nil)).Elem(), ClusterLinkLocalKafkaClusterCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterLinkRemoteKafkaClusterInput)(nil)).Elem(), ClusterLinkRemoteKafkaClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterLinkRemoteKafkaClusterPtrInput)(nil)).Elem(), ClusterLinkRemoteKafkaClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterLinkRemoteKafkaClusterCredentialsInput)(nil)).Elem(), ClusterLinkRemoteKafkaClusterCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterLinkRemoteKafkaClusterCredentialsPtrInput)(nil)).Elem(), ClusterLinkRemoteKafkaClusterCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterLinkSourceKafkaClusterInput)(nil)).Elem(), ClusterLinkSourceKafkaClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterLinkSourceKafkaClusterPtrInput)(nil)).Elem(), ClusterLinkSourceKafkaClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterLinkSourceKafkaClusterCredentialsInput)(nil)).Elem(), ClusterLinkSourceKafkaClusterCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterLinkSourceKafkaClusterCredentialsPtrInput)(nil)).Elem(), ClusterLinkSourceKafkaClusterCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorEnvironmentInput)(nil)).Elem(), ConnectorEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorEnvironmentPtrInput)(nil)).Elem(), ConnectorEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorKafkaClusterInput)(nil)).Elem(), ConnectorKafkaClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorKafkaClusterPtrInput)(nil)).Elem(), ConnectorKafkaClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityPoolIdentityProviderInput)(nil)).Elem(), IdentityPoolIdentityProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityPoolIdentityProviderPtrInput)(nil)).Elem(), IdentityPoolIdentityProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvitationCreatorInput)(nil)).Elem(), InvitationCreatorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvitationCreatorArrayInput)(nil)).Elem(), InvitationCreatorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvitationUserInput)(nil)).Elem(), InvitationUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvitationUserArrayInput)(nil)).Elem(), InvitationUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaAclCredentialsInput)(nil)).Elem(), KafkaAclCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaAclCredentialsPtrInput)(nil)).Elem(), KafkaAclCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaAclKafkaClusterInput)(nil)).Elem(), KafkaAclKafkaClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaAclKafkaClusterPtrInput)(nil)).Elem(), KafkaAclKafkaClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaClientQuotaEnvironmentInput)(nil)).Elem(), KafkaClientQuotaEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaClientQuotaEnvironmentPtrInput)(nil)).Elem(), KafkaClientQuotaEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaClientQuotaKafkaClusterInput)(nil)).Elem(), KafkaClientQuotaKafkaClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaClientQuotaKafkaClusterPtrInput)(nil)).Elem(), KafkaClientQuotaKafkaClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaClientQuotaThroughputInput)(nil)).Elem(), KafkaClientQuotaThroughputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaClientQuotaThroughputPtrInput)(nil)).Elem(), KafkaClientQuotaThroughputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaClusterBasicInput)(nil)).Elem(), KafkaClusterBasicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaClusterBasicPtrInput)(nil)).Elem(), KafkaClusterBasicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaClusterByokKeyInput)(nil)).Elem(), KafkaClusterByokKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaClusterByokKeyPtrInput)(nil)).Elem(), KafkaClusterByokKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaClusterConfigCredentialsInput)(nil)).Elem(), KafkaClusterConfigCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaClusterConfigCredentialsPtrInput)(nil)).Elem(), KafkaClusterConfigCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaClusterConfigKafkaClusterInput)(nil)).Elem(), KafkaClusterConfigKafkaClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaClusterConfigKafkaClusterPtrInput)(nil)).Elem(), KafkaClusterConfigKafkaClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaClusterDedicatedInput)(nil)).Elem(), KafkaClusterDedicatedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaClusterDedicatedPtrInput)(nil)).Elem(), KafkaClusterDedicatedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaClusterEnterpriseInput)(nil)).Elem(), KafkaClusterEnterpriseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaClusterEnterpriseArrayInput)(nil)).Elem(), KafkaClusterEnterpriseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaClusterEnvironmentInput)(nil)).Elem(), KafkaClusterEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaClusterEnvironmentPtrInput)(nil)).Elem(), KafkaClusterEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaClusterNetworkInput)(nil)).Elem(), KafkaClusterNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaClusterNetworkPtrInput)(nil)).Elem(), KafkaClusterNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaClusterStandardInput)(nil)).Elem(), KafkaClusterStandardArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaClusterStandardPtrInput)(nil)).Elem(), KafkaClusterStandardArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaMirrorTopicClusterLinkInput)(nil)).Elem(), KafkaMirrorTopicClusterLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaMirrorTopicClusterLinkPtrInput)(nil)).Elem(), KafkaMirrorTopicClusterLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaMirrorTopicKafkaClusterInput)(nil)).Elem(), KafkaMirrorTopicKafkaClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaMirrorTopicKafkaClusterPtrInput)(nil)).Elem(), KafkaMirrorTopicKafkaClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaMirrorTopicKafkaClusterCredentialsInput)(nil)).Elem(), KafkaMirrorTopicKafkaClusterCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaMirrorTopicKafkaClusterCredentialsPtrInput)(nil)).Elem(), KafkaMirrorTopicKafkaClusterCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaMirrorTopicSourceKafkaTopicInput)(nil)).Elem(), KafkaMirrorTopicSourceKafkaTopicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaMirrorTopicSourceKafkaTopicPtrInput)(nil)).Elem(), KafkaMirrorTopicSourceKafkaTopicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicCredentialsInput)(nil)).Elem(), KafkaTopicCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicCredentialsPtrInput)(nil)).Elem(), KafkaTopicCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicKafkaClusterInput)(nil)).Elem(), KafkaTopicKafkaClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicKafkaClusterPtrInput)(nil)).Elem(), KafkaTopicKafkaClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KsqlClusterCredentialIdentityInput)(nil)).Elem(), KsqlClusterCredentialIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KsqlClusterCredentialIdentityPtrInput)(nil)).Elem(), KsqlClusterCredentialIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KsqlClusterEnvironmentInput)(nil)).Elem(), KsqlClusterEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KsqlClusterEnvironmentPtrInput)(nil)).Elem(), KsqlClusterEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KsqlClusterKafkaClusterInput)(nil)).Elem(), KsqlClusterKafkaClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KsqlClusterKafkaClusterPtrInput)(nil)).Elem(), KsqlClusterKafkaClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAwInput)(nil)).Elem(), NetworkAwArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAwArrayInput)(nil)).Elem(), NetworkAwArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAzureInput)(nil)).Elem(), NetworkAzureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAzureArrayInput)(nil)).Elem(), NetworkAzureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkDnsConfigInput)(nil)).Elem(), NetworkDnsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkDnsConfigPtrInput)(nil)).Elem(), NetworkDnsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkEnvironmentInput)(nil)).Elem(), NetworkEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkEnvironmentPtrInput)(nil)).Elem(), NetworkEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkGcpInput)(nil)).Elem(), NetworkGcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkGcpArrayInput)(nil)).Elem(), NetworkGcpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkLinkEndpointEnvironmentInput)(nil)).Elem(), NetworkLinkEndpointEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkLinkEndpointEnvironmentPtrInput)(nil)).Elem(), NetworkLinkEndpointEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkLinkEndpointNetworkInput)(nil)).Elem(), NetworkLinkEndpointNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkLinkEndpointNetworkPtrInput)(nil)).Elem(), NetworkLinkEndpointNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkLinkEndpointNetworkLinkServiceInput)(nil)).Elem(), NetworkLinkEndpointNetworkLinkServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkLinkEndpointNetworkLinkServicePtrInput)(nil)).Elem(), NetworkLinkEndpointNetworkLinkServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkLinkServiceAcceptInput)(nil)).Elem(), NetworkLinkServiceAcceptArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkLinkServiceAcceptPtrInput)(nil)).Elem(), NetworkLinkServiceAcceptArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkLinkServiceEnvironmentInput)(nil)).Elem(), NetworkLinkServiceEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkLinkServiceEnvironmentPtrInput)(nil)).Elem(), NetworkLinkServiceEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkLinkServiceNetworkInput)(nil)).Elem(), NetworkLinkServiceNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkLinkServiceNetworkPtrInput)(nil)).Elem(), NetworkLinkServiceNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkZoneInfoInput)(nil)).Elem(), NetworkZoneInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkZoneInfoArrayInput)(nil)).Elem(), NetworkZoneInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PeeringAwsInput)(nil)).Elem(), PeeringAwsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PeeringAwsPtrInput)(nil)).Elem(), PeeringAwsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PeeringAzureInput)(nil)).Elem(), PeeringAzureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PeeringAzurePtrInput)(nil)).Elem(), PeeringAzureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PeeringEnvironmentInput)(nil)).Elem(), PeeringEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PeeringEnvironmentPtrInput)(nil)).Elem(), PeeringEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PeeringGcpInput)(nil)).Elem(), PeeringGcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PeeringGcpPtrInput)(nil)).Elem(), PeeringGcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PeeringNetworkInput)(nil)).Elem(), PeeringNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PeeringNetworkPtrInput)(nil)).Elem(), PeeringNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateLinkAccessAwsInput)(nil)).Elem(), PrivateLinkAccessAwsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateLinkAccessAwsPtrInput)(nil)).Elem(), PrivateLinkAccessAwsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateLinkAccessAzureInput)(nil)).Elem(), PrivateLinkAccessAzureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateLinkAccessAzurePtrInput)(nil)).Elem(), PrivateLinkAccessAzureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateLinkAccessEnvironmentInput)(nil)).Elem(), PrivateLinkAccessEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateLinkAccessEnvironmentPtrInput)(nil)).Elem(), PrivateLinkAccessEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateLinkAccessGcpInput)(nil)).Elem(), PrivateLinkAccessGcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateLinkAccessGcpPtrInput)(nil)).Elem(), PrivateLinkAccessGcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateLinkAccessNetworkInput)(nil)).Elem(), PrivateLinkAccessNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateLinkAccessNetworkPtrInput)(nil)).Elem(), PrivateLinkAccessNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateLinkAttachmentAwInput)(nil)).Elem(), PrivateLinkAttachmentAwArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateLinkAttachmentAwArrayInput)(nil)).Elem(), PrivateLinkAttachmentAwArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateLinkAttachmentAzureInput)(nil)).Elem(), PrivateLinkAttachmentAzureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateLinkAttachmentAzureArrayInput)(nil)).Elem(), PrivateLinkAttachmentAzureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateLinkAttachmentConnectionAwsInput)(nil)).Elem(), PrivateLinkAttachmentConnectionAwsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateLinkAttachmentConnectionAwsPtrInput)(nil)).Elem(), PrivateLinkAttachmentConnectionAwsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateLinkAttachmentConnectionAzureInput)(nil)).Elem(), PrivateLinkAttachmentConnectionAzureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateLinkAttachmentConnectionAzurePtrInput)(nil)).Elem(), PrivateLinkAttachmentConnectionAzureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateLinkAttachmentConnectionEnvironmentInput)(nil)).Elem(), PrivateLinkAttachmentConnectionEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateLinkAttachmentConnectionEnvironmentPtrInput)(nil)).Elem(), PrivateLinkAttachmentConnectionEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateLinkAttachmentConnectionGcpInput)(nil)).Elem(), PrivateLinkAttachmentConnectionGcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateLinkAttachmentConnectionGcpPtrInput)(nil)).Elem(), PrivateLinkAttachmentConnectionGcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateLinkAttachmentConnectionPrivateLinkAttachmentInput)(nil)).Elem(), PrivateLinkAttachmentConnectionPrivateLinkAttachmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrInput)(nil)).Elem(), PrivateLinkAttachmentConnectionPrivateLinkAttachmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateLinkAttachmentEnvironmentInput)(nil)).Elem(), PrivateLinkAttachmentEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateLinkAttachmentEnvironmentPtrInput)(nil)).Elem(), PrivateLinkAttachmentEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateLinkAttachmentGcpInput)(nil)).Elem(), PrivateLinkAttachmentGcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateLinkAttachmentGcpArrayInput)(nil)).Elem(), PrivateLinkAttachmentGcpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaCredentialsInput)(nil)).Elem(), SchemaCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaCredentialsPtrInput)(nil)).Elem(), SchemaCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaRegistryClusterConfigCredentialsInput)(nil)).Elem(), SchemaRegistryClusterConfigCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaRegistryClusterConfigCredentialsPtrInput)(nil)).Elem(), SchemaRegistryClusterConfigCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaRegistryClusterConfigSchemaRegistryClusterInput)(nil)).Elem(), SchemaRegistryClusterConfigSchemaRegistryClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaRegistryClusterConfigSchemaRegistryClusterPtrInput)(nil)).Elem(), SchemaRegistryClusterConfigSchemaRegistryClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaRegistryClusterEnvironmentInput)(nil)).Elem(), SchemaRegistryClusterEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaRegistryClusterEnvironmentPtrInput)(nil)).Elem(), SchemaRegistryClusterEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaRegistryClusterModeCredentialsInput)(nil)).Elem(), SchemaRegistryClusterModeCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaRegistryClusterModeCredentialsPtrInput)(nil)).Elem(), SchemaRegistryClusterModeCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaRegistryClusterModeSchemaRegistryClusterInput)(nil)).Elem(), SchemaRegistryClusterModeSchemaRegistryClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaRegistryClusterModeSchemaRegistryClusterPtrInput)(nil)).Elem(), SchemaRegistryClusterModeSchemaRegistryClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaRegistryClusterRegionInput)(nil)).Elem(), SchemaRegistryClusterRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaRegistryClusterRegionPtrInput)(nil)).Elem(), SchemaRegistryClusterRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaSchemaReferenceInput)(nil)).Elem(), SchemaSchemaReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaSchemaReferenceArrayInput)(nil)).Elem(), SchemaSchemaReferenceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaSchemaRegistryClusterInput)(nil)).Elem(), SchemaSchemaRegistryClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaSchemaRegistryClusterPtrInput)(nil)).Elem(), SchemaSchemaRegistryClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubjectConfigCredentialsInput)(nil)).Elem(), SubjectConfigCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubjectConfigCredentialsPtrInput)(nil)).Elem(), SubjectConfigCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubjectConfigSchemaRegistryClusterInput)(nil)).Elem(), SubjectConfigSchemaRegistryClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubjectConfigSchemaRegistryClusterPtrInput)(nil)).Elem(), SubjectConfigSchemaRegistryClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubjectModeCredentialsInput)(nil)).Elem(), SubjectModeCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubjectModeCredentialsPtrInput)(nil)).Elem(), SubjectModeCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubjectModeSchemaRegistryClusterInput)(nil)).Elem(), SubjectModeSchemaRegistryClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubjectModeSchemaRegistryClusterPtrInput)(nil)).Elem(), SubjectModeSchemaRegistryClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagBindingCredentialsInput)(nil)).Elem(), TagBindingCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagBindingCredentialsPtrInput)(nil)).Elem(), TagBindingCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagBindingSchemaRegistryClusterInput)(nil)).Elem(), TagBindingSchemaRegistryClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagBindingSchemaRegistryClusterPtrInput)(nil)).Elem(), TagBindingSchemaRegistryClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagCredentialsInput)(nil)).Elem(), TagCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagCredentialsPtrInput)(nil)).Elem(), TagCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagSchemaRegistryClusterInput)(nil)).Elem(), TagSchemaRegistryClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagSchemaRegistryClusterPtrInput)(nil)).Elem(), TagSchemaRegistryClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransitGatewayAttachmentAwsInput)(nil)).Elem(), TransitGatewayAttachmentAwsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransitGatewayAttachmentAwsPtrInput)(nil)).Elem(), TransitGatewayAttachmentAwsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransitGatewayAttachmentEnvironmentInput)(nil)).Elem(), TransitGatewayAttachmentEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransitGatewayAttachmentEnvironmentPtrInput)(nil)).Elem(), TransitGatewayAttachmentEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransitGatewayAttachmentNetworkInput)(nil)).Elem(), TransitGatewayAttachmentNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransitGatewayAttachmentNetworkPtrInput)(nil)).Elem(), TransitGatewayAttachmentNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBusinessMetadataAttributeDefinitionInput)(nil)).Elem(), GetBusinessMetadataAttributeDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBusinessMetadataAttributeDefinitionArrayInput)(nil)).Elem(), GetBusinessMetadataAttributeDefinitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBusinessMetadataBindingCredentialsInput)(nil)).Elem(), GetBusinessMetadataBindingCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBusinessMetadataBindingCredentialsPtrInput)(nil)).Elem(), GetBusinessMetadataBindingCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBusinessMetadataBindingSchemaRegistryClusterInput)(nil)).Elem(), GetBusinessMetadataBindingSchemaRegistryClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBusinessMetadataBindingSchemaRegistryClusterPtrInput)(nil)).Elem(), GetBusinessMetadataBindingSchemaRegistryClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBusinessMetadataCredentialsInput)(nil)).Elem(), GetBusinessMetadataCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBusinessMetadataCredentialsPtrInput)(nil)).Elem(), GetBusinessMetadataCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBusinessMetadataSchemaRegistryClusterInput)(nil)).Elem(), GetBusinessMetadataSchemaRegistryClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBusinessMetadataSchemaRegistryClusterPtrInput)(nil)).Elem(), GetBusinessMetadataSchemaRegistryClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetByokKeyAwInput)(nil)).Elem(), GetByokKeyAwArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetByokKeyAwArrayInput)(nil)).Elem(), GetByokKeyAwArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetByokKeyAzureInput)(nil)).Elem(), GetByokKeyAzureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetByokKeyAzureArrayInput)(nil)).Elem(), GetByokKeyAzureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIdentityPoolIdentityProviderInput)(nil)).Elem(), GetIdentityPoolIdentityProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInvitationCreatorInput)(nil)).Elem(), GetInvitationCreatorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInvitationCreatorArrayInput)(nil)).Elem(), GetInvitationCreatorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInvitationUserInput)(nil)).Elem(), GetInvitationUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInvitationUserArrayInput)(nil)).Elem(), GetInvitationUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKafkaClientQuotaEnvironmentInput)(nil)).Elem(), GetKafkaClientQuotaEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKafkaClientQuotaEnvironmentArrayInput)(nil)).Elem(), GetKafkaClientQuotaEnvironmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKafkaClientQuotaKafkaClusterInput)(nil)).Elem(), GetKafkaClientQuotaKafkaClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKafkaClientQuotaKafkaClusterArrayInput)(nil)).Elem(), GetKafkaClientQuotaKafkaClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKafkaClientQuotaThroughputInput)(nil)).Elem(), GetKafkaClientQuotaThroughputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKafkaClientQuotaThroughputArrayInput)(nil)).Elem(), GetKafkaClientQuotaThroughputArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKafkaClusterBasicInput)(nil)).Elem(), GetKafkaClusterBasicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKafkaClusterBasicArrayInput)(nil)).Elem(), GetKafkaClusterBasicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKafkaClusterByokKeyInput)(nil)).Elem(), GetKafkaClusterByokKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKafkaClusterByokKeyArrayInput)(nil)).Elem(), GetKafkaClusterByokKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKafkaClusterDedicatedInput)(nil)).Elem(), GetKafkaClusterDedicatedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKafkaClusterDedicatedPtrInput)(nil)).Elem(), GetKafkaClusterDedicatedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKafkaClusterEnterpriseInput)(nil)).Elem(), GetKafkaClusterEnterpriseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKafkaClusterEnterpriseArrayInput)(nil)).Elem(), GetKafkaClusterEnterpriseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKafkaClusterEnvironmentInput)(nil)).Elem(), GetKafkaClusterEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKafkaClusterNetworkInput)(nil)).Elem(), GetKafkaClusterNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKafkaClusterNetworkArrayInput)(nil)).Elem(), GetKafkaClusterNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKafkaClusterStandardInput)(nil)).Elem(), GetKafkaClusterStandardArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKafkaClusterStandardArrayInput)(nil)).Elem(), GetKafkaClusterStandardArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKafkaTopicCredentialsInput)(nil)).Elem(), GetKafkaTopicCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKafkaTopicCredentialsPtrInput)(nil)).Elem(), GetKafkaTopicCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKafkaTopicKafkaClusterInput)(nil)).Elem(), GetKafkaTopicKafkaClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKafkaTopicKafkaClusterPtrInput)(nil)).Elem(), GetKafkaTopicKafkaClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKsqlClusterCredentialIdentityInput)(nil)).Elem(), GetKsqlClusterCredentialIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKsqlClusterCredentialIdentityArrayInput)(nil)).Elem(), GetKsqlClusterCredentialIdentityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKsqlClusterEnvironmentInput)(nil)).Elem(), GetKsqlClusterEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKsqlClusterKafkaClusterInput)(nil)).Elem(), GetKsqlClusterKafkaClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKsqlClusterKafkaClusterArrayInput)(nil)).Elem(), GetKsqlClusterKafkaClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkAwInput)(nil)).Elem(), GetNetworkAwArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkAwArrayInput)(nil)).Elem(), GetNetworkAwArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkAzureInput)(nil)).Elem(), GetNetworkAzureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkAzureArrayInput)(nil)).Elem(), GetNetworkAzureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkDnsConfigInput)(nil)).Elem(), GetNetworkDnsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkDnsConfigArrayInput)(nil)).Elem(), GetNetworkDnsConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkEnvironmentInput)(nil)).Elem(), GetNetworkEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkGcpInput)(nil)).Elem(), GetNetworkGcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkGcpArrayInput)(nil)).Elem(), GetNetworkGcpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkLinkEndpointEnvironmentInput)(nil)).Elem(), GetNetworkLinkEndpointEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkLinkEndpointNetworkInput)(nil)).Elem(), GetNetworkLinkEndpointNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkLinkEndpointNetworkArrayInput)(nil)).Elem(), GetNetworkLinkEndpointNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkLinkEndpointNetworkLinkServiceInput)(nil)).Elem(), GetNetworkLinkEndpointNetworkLinkServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkLinkEndpointNetworkLinkServiceArrayInput)(nil)).Elem(), GetNetworkLinkEndpointNetworkLinkServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkLinkServiceAcceptInput)(nil)).Elem(), GetNetworkLinkServiceAcceptArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkLinkServiceAcceptPtrInput)(nil)).Elem(), GetNetworkLinkServiceAcceptArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkLinkServiceEnvironmentInput)(nil)).Elem(), GetNetworkLinkServiceEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkLinkServiceNetworkInput)(nil)).Elem(), GetNetworkLinkServiceNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkLinkServiceNetworkArrayInput)(nil)).Elem(), GetNetworkLinkServiceNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkZoneInfoInput)(nil)).Elem(), GetNetworkZoneInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkZoneInfoArrayInput)(nil)).Elem(), GetNetworkZoneInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPeeringAwInput)(nil)).Elem(), GetPeeringAwArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPeeringAwArrayInput)(nil)).Elem(), GetPeeringAwArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPeeringAzureInput)(nil)).Elem(), GetPeeringAzureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPeeringAzureArrayInput)(nil)).Elem(), GetPeeringAzureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPeeringEnvironmentInput)(nil)).Elem(), GetPeeringEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPeeringGcpInput)(nil)).Elem(), GetPeeringGcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPeeringGcpArrayInput)(nil)).Elem(), GetPeeringGcpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPeeringNetworkInput)(nil)).Elem(), GetPeeringNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPeeringNetworkArrayInput)(nil)).Elem(), GetPeeringNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateLinkAccessAwInput)(nil)).Elem(), GetPrivateLinkAccessAwArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateLinkAccessAwArrayInput)(nil)).Elem(), GetPrivateLinkAccessAwArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateLinkAccessAzureInput)(nil)).Elem(), GetPrivateLinkAccessAzureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateLinkAccessAzureArrayInput)(nil)).Elem(), GetPrivateLinkAccessAzureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateLinkAccessEnvironmentInput)(nil)).Elem(), GetPrivateLinkAccessEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateLinkAccessGcpInput)(nil)).Elem(), GetPrivateLinkAccessGcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateLinkAccessGcpArrayInput)(nil)).Elem(), GetPrivateLinkAccessGcpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateLinkAccessNetworkInput)(nil)).Elem(), GetPrivateLinkAccessNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateLinkAccessNetworkArrayInput)(nil)).Elem(), GetPrivateLinkAccessNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateLinkAttachmentAwInput)(nil)).Elem(), GetPrivateLinkAttachmentAwArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateLinkAttachmentAwArrayInput)(nil)).Elem(), GetPrivateLinkAttachmentAwArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateLinkAttachmentAzureInput)(nil)).Elem(), GetPrivateLinkAttachmentAzureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateLinkAttachmentAzureArrayInput)(nil)).Elem(), GetPrivateLinkAttachmentAzureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateLinkAttachmentConnectionAwInput)(nil)).Elem(), GetPrivateLinkAttachmentConnectionAwArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateLinkAttachmentConnectionAwArrayInput)(nil)).Elem(), GetPrivateLinkAttachmentConnectionAwArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateLinkAttachmentConnectionAzureInput)(nil)).Elem(), GetPrivateLinkAttachmentConnectionAzureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateLinkAttachmentConnectionAzureArrayInput)(nil)).Elem(), GetPrivateLinkAttachmentConnectionAzureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateLinkAttachmentConnectionEnvironmentInput)(nil)).Elem(), GetPrivateLinkAttachmentConnectionEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateLinkAttachmentConnectionGcpInput)(nil)).Elem(), GetPrivateLinkAttachmentConnectionGcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateLinkAttachmentConnectionGcpArrayInput)(nil)).Elem(), GetPrivateLinkAttachmentConnectionGcpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentInput)(nil)).Elem(), GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArrayInput)(nil)).Elem(), GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateLinkAttachmentEnvironmentInput)(nil)).Elem(), GetPrivateLinkAttachmentEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateLinkAttachmentGcpInput)(nil)).Elem(), GetPrivateLinkAttachmentGcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateLinkAttachmentGcpArrayInput)(nil)).Elem(), GetPrivateLinkAttachmentGcpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemaCredentialsInput)(nil)).Elem(), GetSchemaCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemaCredentialsPtrInput)(nil)).Elem(), GetSchemaCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemaRegistryClusterConfigCredentialsInput)(nil)).Elem(), GetSchemaRegistryClusterConfigCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemaRegistryClusterConfigCredentialsPtrInput)(nil)).Elem(), GetSchemaRegistryClusterConfigCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemaRegistryClusterConfigSchemaRegistryClusterInput)(nil)).Elem(), GetSchemaRegistryClusterConfigSchemaRegistryClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemaRegistryClusterConfigSchemaRegistryClusterPtrInput)(nil)).Elem(), GetSchemaRegistryClusterConfigSchemaRegistryClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemaRegistryClusterEnvironmentInput)(nil)).Elem(), GetSchemaRegistryClusterEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemaRegistryClusterModeCredentialsInput)(nil)).Elem(), GetSchemaRegistryClusterModeCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemaRegistryClusterModeCredentialsPtrInput)(nil)).Elem(), GetSchemaRegistryClusterModeCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemaRegistryClusterModeSchemaRegistryClusterInput)(nil)).Elem(), GetSchemaRegistryClusterModeSchemaRegistryClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemaRegistryClusterModeSchemaRegistryClusterPtrInput)(nil)).Elem(), GetSchemaRegistryClusterModeSchemaRegistryClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemaRegistryClusterRegionInput)(nil)).Elem(), GetSchemaRegistryClusterRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemaRegistryClusterRegionArrayInput)(nil)).Elem(), GetSchemaRegistryClusterRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemaRegistryClustersClusterInput)(nil)).Elem(), GetSchemaRegistryClustersClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemaRegistryClustersClusterArrayInput)(nil)).Elem(), GetSchemaRegistryClustersClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemaRegistryClustersClusterEnvironmentInput)(nil)).Elem(), GetSchemaRegistryClustersClusterEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemaRegistryClustersClusterRegionInput)(nil)).Elem(), GetSchemaRegistryClustersClusterRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemaRegistryClustersClusterRegionArrayInput)(nil)).Elem(), GetSchemaRegistryClustersClusterRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemaSchemaReferenceInput)(nil)).Elem(), GetSchemaSchemaReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemaSchemaReferenceArrayInput)(nil)).Elem(), GetSchemaSchemaReferenceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemaSchemaRegistryClusterInput)(nil)).Elem(), GetSchemaSchemaRegistryClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemaSchemaRegistryClusterPtrInput)(nil)).Elem(), GetSchemaSchemaRegistryClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemasCredentialsInput)(nil)).Elem(), GetSchemasCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemasCredentialsPtrInput)(nil)).Elem(), GetSchemasCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemasFilterInput)(nil)).Elem(), GetSchemasFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemasFilterPtrInput)(nil)).Elem(), GetSchemasFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemasSchemaInput)(nil)).Elem(), GetSchemasSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemasSchemaArrayInput)(nil)).Elem(), GetSchemasSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemasSchemaRegistryClusterInput)(nil)).Elem(), GetSchemasSchemaRegistryClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemasSchemaRegistryClusterPtrInput)(nil)).Elem(), GetSchemasSchemaRegistryClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemasSchemaSchemaReferenceInput)(nil)).Elem(), GetSchemasSchemaSchemaReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemasSchemaSchemaReferenceArrayInput)(nil)).Elem(), GetSchemasSchemaSchemaReferenceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubjectConfigCredentialsInput)(nil)).Elem(), GetSubjectConfigCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubjectConfigCredentialsPtrInput)(nil)).Elem(), GetSubjectConfigCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubjectConfigSchemaRegistryClusterInput)(nil)).Elem(), GetSubjectConfigSchemaRegistryClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubjectConfigSchemaRegistryClusterPtrInput)(nil)).Elem(), GetSubjectConfigSchemaRegistryClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubjectModeCredentialsInput)(nil)).Elem(), GetSubjectModeCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubjectModeCredentialsPtrInput)(nil)).Elem(), GetSubjectModeCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubjectModeSchemaRegistryClusterInput)(nil)).Elem(), GetSubjectModeSchemaRegistryClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubjectModeSchemaRegistryClusterPtrInput)(nil)).Elem(), GetSubjectModeSchemaRegistryClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagBindingCredentialsInput)(nil)).Elem(), GetTagBindingCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagBindingCredentialsPtrInput)(nil)).Elem(), GetTagBindingCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagBindingSchemaRegistryClusterInput)(nil)).Elem(), GetTagBindingSchemaRegistryClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagBindingSchemaRegistryClusterPtrInput)(nil)).Elem(), GetTagBindingSchemaRegistryClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagCredentialsInput)(nil)).Elem(), GetTagCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagCredentialsPtrInput)(nil)).Elem(), GetTagCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagSchemaRegistryClusterInput)(nil)).Elem(), GetTagSchemaRegistryClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagSchemaRegistryClusterPtrInput)(nil)).Elem(), GetTagSchemaRegistryClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTransitGatewayAttachmentAwInput)(nil)).Elem(), GetTransitGatewayAttachmentAwArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTransitGatewayAttachmentAwArrayInput)(nil)).Elem(), GetTransitGatewayAttachmentAwArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTransitGatewayAttachmentEnvironmentInput)(nil)).Elem(), GetTransitGatewayAttachmentEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTransitGatewayAttachmentNetworkInput)(nil)).Elem(), GetTransitGatewayAttachmentNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTransitGatewayAttachmentNetworkArrayInput)(nil)).Elem(), GetTransitGatewayAttachmentNetworkArray{})
	pulumi.RegisterOutputType(ApiKeyManagedResourceOutput{})
	pulumi.RegisterOutputType(ApiKeyManagedResourcePtrOutput{})
	pulumi.RegisterOutputType(ApiKeyManagedResourceEnvironmentOutput{})
	pulumi.RegisterOutputType(ApiKeyManagedResourceEnvironmentPtrOutput{})
	pulumi.RegisterOutputType(ApiKeyOwnerOutput{})
	pulumi.RegisterOutputType(ApiKeyOwnerPtrOutput{})
	pulumi.RegisterOutputType(BusinessMetadataAttributeDefinitionOutput{})
	pulumi.RegisterOutputType(BusinessMetadataAttributeDefinitionArrayOutput{})
	pulumi.RegisterOutputType(BusinessMetadataBindingCredentialsOutput{})
	pulumi.RegisterOutputType(BusinessMetadataBindingCredentialsPtrOutput{})
	pulumi.RegisterOutputType(BusinessMetadataBindingSchemaRegistryClusterOutput{})
	pulumi.RegisterOutputType(BusinessMetadataBindingSchemaRegistryClusterPtrOutput{})
	pulumi.RegisterOutputType(BusinessMetadataCredentialsOutput{})
	pulumi.RegisterOutputType(BusinessMetadataCredentialsPtrOutput{})
	pulumi.RegisterOutputType(BusinessMetadataSchemaRegistryClusterOutput{})
	pulumi.RegisterOutputType(BusinessMetadataSchemaRegistryClusterPtrOutput{})
	pulumi.RegisterOutputType(ByokKeyAwsOutput{})
	pulumi.RegisterOutputType(ByokKeyAwsPtrOutput{})
	pulumi.RegisterOutputType(ByokKeyAzureOutput{})
	pulumi.RegisterOutputType(ByokKeyAzurePtrOutput{})
	pulumi.RegisterOutputType(ClusterLinkDestinationKafkaClusterOutput{})
	pulumi.RegisterOutputType(ClusterLinkDestinationKafkaClusterPtrOutput{})
	pulumi.RegisterOutputType(ClusterLinkDestinationKafkaClusterCredentialsOutput{})
	pulumi.RegisterOutputType(ClusterLinkDestinationKafkaClusterCredentialsPtrOutput{})
	pulumi.RegisterOutputType(ClusterLinkLocalKafkaClusterOutput{})
	pulumi.RegisterOutputType(ClusterLinkLocalKafkaClusterPtrOutput{})
	pulumi.RegisterOutputType(ClusterLinkLocalKafkaClusterCredentialsOutput{})
	pulumi.RegisterOutputType(ClusterLinkLocalKafkaClusterCredentialsPtrOutput{})
	pulumi.RegisterOutputType(ClusterLinkRemoteKafkaClusterOutput{})
	pulumi.RegisterOutputType(ClusterLinkRemoteKafkaClusterPtrOutput{})
	pulumi.RegisterOutputType(ClusterLinkRemoteKafkaClusterCredentialsOutput{})
	pulumi.RegisterOutputType(ClusterLinkRemoteKafkaClusterCredentialsPtrOutput{})
	pulumi.RegisterOutputType(ClusterLinkSourceKafkaClusterOutput{})
	pulumi.RegisterOutputType(ClusterLinkSourceKafkaClusterPtrOutput{})
	pulumi.RegisterOutputType(ClusterLinkSourceKafkaClusterCredentialsOutput{})
	pulumi.RegisterOutputType(ClusterLinkSourceKafkaClusterCredentialsPtrOutput{})
	pulumi.RegisterOutputType(ConnectorEnvironmentOutput{})
	pulumi.RegisterOutputType(ConnectorEnvironmentPtrOutput{})
	pulumi.RegisterOutputType(ConnectorKafkaClusterOutput{})
	pulumi.RegisterOutputType(ConnectorKafkaClusterPtrOutput{})
	pulumi.RegisterOutputType(IdentityPoolIdentityProviderOutput{})
	pulumi.RegisterOutputType(IdentityPoolIdentityProviderPtrOutput{})
	pulumi.RegisterOutputType(InvitationCreatorOutput{})
	pulumi.RegisterOutputType(InvitationCreatorArrayOutput{})
	pulumi.RegisterOutputType(InvitationUserOutput{})
	pulumi.RegisterOutputType(InvitationUserArrayOutput{})
	pulumi.RegisterOutputType(KafkaAclCredentialsOutput{})
	pulumi.RegisterOutputType(KafkaAclCredentialsPtrOutput{})
	pulumi.RegisterOutputType(KafkaAclKafkaClusterOutput{})
	pulumi.RegisterOutputType(KafkaAclKafkaClusterPtrOutput{})
	pulumi.RegisterOutputType(KafkaClientQuotaEnvironmentOutput{})
	pulumi.RegisterOutputType(KafkaClientQuotaEnvironmentPtrOutput{})
	pulumi.RegisterOutputType(KafkaClientQuotaKafkaClusterOutput{})
	pulumi.RegisterOutputType(KafkaClientQuotaKafkaClusterPtrOutput{})
	pulumi.RegisterOutputType(KafkaClientQuotaThroughputOutput{})
	pulumi.RegisterOutputType(KafkaClientQuotaThroughputPtrOutput{})
	pulumi.RegisterOutputType(KafkaClusterBasicOutput{})
	pulumi.RegisterOutputType(KafkaClusterBasicPtrOutput{})
	pulumi.RegisterOutputType(KafkaClusterByokKeyOutput{})
	pulumi.RegisterOutputType(KafkaClusterByokKeyPtrOutput{})
	pulumi.RegisterOutputType(KafkaClusterConfigCredentialsOutput{})
	pulumi.RegisterOutputType(KafkaClusterConfigCredentialsPtrOutput{})
	pulumi.RegisterOutputType(KafkaClusterConfigKafkaClusterOutput{})
	pulumi.RegisterOutputType(KafkaClusterConfigKafkaClusterPtrOutput{})
	pulumi.RegisterOutputType(KafkaClusterDedicatedOutput{})
	pulumi.RegisterOutputType(KafkaClusterDedicatedPtrOutput{})
	pulumi.RegisterOutputType(KafkaClusterEnterpriseOutput{})
	pulumi.RegisterOutputType(KafkaClusterEnterpriseArrayOutput{})
	pulumi.RegisterOutputType(KafkaClusterEnvironmentOutput{})
	pulumi.RegisterOutputType(KafkaClusterEnvironmentPtrOutput{})
	pulumi.RegisterOutputType(KafkaClusterNetworkOutput{})
	pulumi.RegisterOutputType(KafkaClusterNetworkPtrOutput{})
	pulumi.RegisterOutputType(KafkaClusterStandardOutput{})
	pulumi.RegisterOutputType(KafkaClusterStandardPtrOutput{})
	pulumi.RegisterOutputType(KafkaMirrorTopicClusterLinkOutput{})
	pulumi.RegisterOutputType(KafkaMirrorTopicClusterLinkPtrOutput{})
	pulumi.RegisterOutputType(KafkaMirrorTopicKafkaClusterOutput{})
	pulumi.RegisterOutputType(KafkaMirrorTopicKafkaClusterPtrOutput{})
	pulumi.RegisterOutputType(KafkaMirrorTopicKafkaClusterCredentialsOutput{})
	pulumi.RegisterOutputType(KafkaMirrorTopicKafkaClusterCredentialsPtrOutput{})
	pulumi.RegisterOutputType(KafkaMirrorTopicSourceKafkaTopicOutput{})
	pulumi.RegisterOutputType(KafkaMirrorTopicSourceKafkaTopicPtrOutput{})
	pulumi.RegisterOutputType(KafkaTopicCredentialsOutput{})
	pulumi.RegisterOutputType(KafkaTopicCredentialsPtrOutput{})
	pulumi.RegisterOutputType(KafkaTopicKafkaClusterOutput{})
	pulumi.RegisterOutputType(KafkaTopicKafkaClusterPtrOutput{})
	pulumi.RegisterOutputType(KsqlClusterCredentialIdentityOutput{})
	pulumi.RegisterOutputType(KsqlClusterCredentialIdentityPtrOutput{})
	pulumi.RegisterOutputType(KsqlClusterEnvironmentOutput{})
	pulumi.RegisterOutputType(KsqlClusterEnvironmentPtrOutput{})
	pulumi.RegisterOutputType(KsqlClusterKafkaClusterOutput{})
	pulumi.RegisterOutputType(KsqlClusterKafkaClusterPtrOutput{})
	pulumi.RegisterOutputType(NetworkAwOutput{})
	pulumi.RegisterOutputType(NetworkAwArrayOutput{})
	pulumi.RegisterOutputType(NetworkAzureOutput{})
	pulumi.RegisterOutputType(NetworkAzureArrayOutput{})
	pulumi.RegisterOutputType(NetworkDnsConfigOutput{})
	pulumi.RegisterOutputType(NetworkDnsConfigPtrOutput{})
	pulumi.RegisterOutputType(NetworkEnvironmentOutput{})
	pulumi.RegisterOutputType(NetworkEnvironmentPtrOutput{})
	pulumi.RegisterOutputType(NetworkGcpOutput{})
	pulumi.RegisterOutputType(NetworkGcpArrayOutput{})
	pulumi.RegisterOutputType(NetworkLinkEndpointEnvironmentOutput{})
	pulumi.RegisterOutputType(NetworkLinkEndpointEnvironmentPtrOutput{})
	pulumi.RegisterOutputType(NetworkLinkEndpointNetworkOutput{})
	pulumi.RegisterOutputType(NetworkLinkEndpointNetworkPtrOutput{})
	pulumi.RegisterOutputType(NetworkLinkEndpointNetworkLinkServiceOutput{})
	pulumi.RegisterOutputType(NetworkLinkEndpointNetworkLinkServicePtrOutput{})
	pulumi.RegisterOutputType(NetworkLinkServiceAcceptOutput{})
	pulumi.RegisterOutputType(NetworkLinkServiceAcceptPtrOutput{})
	pulumi.RegisterOutputType(NetworkLinkServiceEnvironmentOutput{})
	pulumi.RegisterOutputType(NetworkLinkServiceEnvironmentPtrOutput{})
	pulumi.RegisterOutputType(NetworkLinkServiceNetworkOutput{})
	pulumi.RegisterOutputType(NetworkLinkServiceNetworkPtrOutput{})
	pulumi.RegisterOutputType(NetworkZoneInfoOutput{})
	pulumi.RegisterOutputType(NetworkZoneInfoArrayOutput{})
	pulumi.RegisterOutputType(PeeringAwsOutput{})
	pulumi.RegisterOutputType(PeeringAwsPtrOutput{})
	pulumi.RegisterOutputType(PeeringAzureOutput{})
	pulumi.RegisterOutputType(PeeringAzurePtrOutput{})
	pulumi.RegisterOutputType(PeeringEnvironmentOutput{})
	pulumi.RegisterOutputType(PeeringEnvironmentPtrOutput{})
	pulumi.RegisterOutputType(PeeringGcpOutput{})
	pulumi.RegisterOutputType(PeeringGcpPtrOutput{})
	pulumi.RegisterOutputType(PeeringNetworkOutput{})
	pulumi.RegisterOutputType(PeeringNetworkPtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkAccessAwsOutput{})
	pulumi.RegisterOutputType(PrivateLinkAccessAwsPtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkAccessAzureOutput{})
	pulumi.RegisterOutputType(PrivateLinkAccessAzurePtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkAccessEnvironmentOutput{})
	pulumi.RegisterOutputType(PrivateLinkAccessEnvironmentPtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkAccessGcpOutput{})
	pulumi.RegisterOutputType(PrivateLinkAccessGcpPtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkAccessNetworkOutput{})
	pulumi.RegisterOutputType(PrivateLinkAccessNetworkPtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkAttachmentAwOutput{})
	pulumi.RegisterOutputType(PrivateLinkAttachmentAwArrayOutput{})
	pulumi.RegisterOutputType(PrivateLinkAttachmentAzureOutput{})
	pulumi.RegisterOutputType(PrivateLinkAttachmentAzureArrayOutput{})
	pulumi.RegisterOutputType(PrivateLinkAttachmentConnectionAwsOutput{})
	pulumi.RegisterOutputType(PrivateLinkAttachmentConnectionAwsPtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkAttachmentConnectionAzureOutput{})
	pulumi.RegisterOutputType(PrivateLinkAttachmentConnectionAzurePtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkAttachmentConnectionEnvironmentOutput{})
	pulumi.RegisterOutputType(PrivateLinkAttachmentConnectionEnvironmentPtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkAttachmentConnectionGcpOutput{})
	pulumi.RegisterOutputType(PrivateLinkAttachmentConnectionGcpPtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput{})
	pulumi.RegisterOutputType(PrivateLinkAttachmentConnectionPrivateLinkAttachmentPtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkAttachmentEnvironmentOutput{})
	pulumi.RegisterOutputType(PrivateLinkAttachmentEnvironmentPtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkAttachmentGcpOutput{})
	pulumi.RegisterOutputType(PrivateLinkAttachmentGcpArrayOutput{})
	pulumi.RegisterOutputType(SchemaCredentialsOutput{})
	pulumi.RegisterOutputType(SchemaCredentialsPtrOutput{})
	pulumi.RegisterOutputType(SchemaRegistryClusterConfigCredentialsOutput{})
	pulumi.RegisterOutputType(SchemaRegistryClusterConfigCredentialsPtrOutput{})
	pulumi.RegisterOutputType(SchemaRegistryClusterConfigSchemaRegistryClusterOutput{})
	pulumi.RegisterOutputType(SchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput{})
	pulumi.RegisterOutputType(SchemaRegistryClusterEnvironmentOutput{})
	pulumi.RegisterOutputType(SchemaRegistryClusterEnvironmentPtrOutput{})
	pulumi.RegisterOutputType(SchemaRegistryClusterModeCredentialsOutput{})
	pulumi.RegisterOutputType(SchemaRegistryClusterModeCredentialsPtrOutput{})
	pulumi.RegisterOutputType(SchemaRegistryClusterModeSchemaRegistryClusterOutput{})
	pulumi.RegisterOutputType(SchemaRegistryClusterModeSchemaRegistryClusterPtrOutput{})
	pulumi.RegisterOutputType(SchemaRegistryClusterRegionOutput{})
	pulumi.RegisterOutputType(SchemaRegistryClusterRegionPtrOutput{})
	pulumi.RegisterOutputType(SchemaSchemaReferenceOutput{})
	pulumi.RegisterOutputType(SchemaSchemaReferenceArrayOutput{})
	pulumi.RegisterOutputType(SchemaSchemaRegistryClusterOutput{})
	pulumi.RegisterOutputType(SchemaSchemaRegistryClusterPtrOutput{})
	pulumi.RegisterOutputType(SubjectConfigCredentialsOutput{})
	pulumi.RegisterOutputType(SubjectConfigCredentialsPtrOutput{})
	pulumi.RegisterOutputType(SubjectConfigSchemaRegistryClusterOutput{})
	pulumi.RegisterOutputType(SubjectConfigSchemaRegistryClusterPtrOutput{})
	pulumi.RegisterOutputType(SubjectModeCredentialsOutput{})
	pulumi.RegisterOutputType(SubjectModeCredentialsPtrOutput{})
	pulumi.RegisterOutputType(SubjectModeSchemaRegistryClusterOutput{})
	pulumi.RegisterOutputType(SubjectModeSchemaRegistryClusterPtrOutput{})
	pulumi.RegisterOutputType(TagBindingCredentialsOutput{})
	pulumi.RegisterOutputType(TagBindingCredentialsPtrOutput{})
	pulumi.RegisterOutputType(TagBindingSchemaRegistryClusterOutput{})
	pulumi.RegisterOutputType(TagBindingSchemaRegistryClusterPtrOutput{})
	pulumi.RegisterOutputType(TagCredentialsOutput{})
	pulumi.RegisterOutputType(TagCredentialsPtrOutput{})
	pulumi.RegisterOutputType(TagSchemaRegistryClusterOutput{})
	pulumi.RegisterOutputType(TagSchemaRegistryClusterPtrOutput{})
	pulumi.RegisterOutputType(TransitGatewayAttachmentAwsOutput{})
	pulumi.RegisterOutputType(TransitGatewayAttachmentAwsPtrOutput{})
	pulumi.RegisterOutputType(TransitGatewayAttachmentEnvironmentOutput{})
	pulumi.RegisterOutputType(TransitGatewayAttachmentEnvironmentPtrOutput{})
	pulumi.RegisterOutputType(TransitGatewayAttachmentNetworkOutput{})
	pulumi.RegisterOutputType(TransitGatewayAttachmentNetworkPtrOutput{})
	pulumi.RegisterOutputType(GetBusinessMetadataAttributeDefinitionOutput{})
	pulumi.RegisterOutputType(GetBusinessMetadataAttributeDefinitionArrayOutput{})
	pulumi.RegisterOutputType(GetBusinessMetadataBindingCredentialsOutput{})
	pulumi.RegisterOutputType(GetBusinessMetadataBindingCredentialsPtrOutput{})
	pulumi.RegisterOutputType(GetBusinessMetadataBindingSchemaRegistryClusterOutput{})
	pulumi.RegisterOutputType(GetBusinessMetadataBindingSchemaRegistryClusterPtrOutput{})
	pulumi.RegisterOutputType(GetBusinessMetadataCredentialsOutput{})
	pulumi.RegisterOutputType(GetBusinessMetadataCredentialsPtrOutput{})
	pulumi.RegisterOutputType(GetBusinessMetadataSchemaRegistryClusterOutput{})
	pulumi.RegisterOutputType(GetBusinessMetadataSchemaRegistryClusterPtrOutput{})
	pulumi.RegisterOutputType(GetByokKeyAwOutput{})
	pulumi.RegisterOutputType(GetByokKeyAwArrayOutput{})
	pulumi.RegisterOutputType(GetByokKeyAzureOutput{})
	pulumi.RegisterOutputType(GetByokKeyAzureArrayOutput{})
	pulumi.RegisterOutputType(GetIdentityPoolIdentityProviderOutput{})
	pulumi.RegisterOutputType(GetInvitationCreatorOutput{})
	pulumi.RegisterOutputType(GetInvitationCreatorArrayOutput{})
	pulumi.RegisterOutputType(GetInvitationUserOutput{})
	pulumi.RegisterOutputType(GetInvitationUserArrayOutput{})
	pulumi.RegisterOutputType(GetKafkaClientQuotaEnvironmentOutput{})
	pulumi.RegisterOutputType(GetKafkaClientQuotaEnvironmentArrayOutput{})
	pulumi.RegisterOutputType(GetKafkaClientQuotaKafkaClusterOutput{})
	pulumi.RegisterOutputType(GetKafkaClientQuotaKafkaClusterArrayOutput{})
	pulumi.RegisterOutputType(GetKafkaClientQuotaThroughputOutput{})
	pulumi.RegisterOutputType(GetKafkaClientQuotaThroughputArrayOutput{})
	pulumi.RegisterOutputType(GetKafkaClusterBasicOutput{})
	pulumi.RegisterOutputType(GetKafkaClusterBasicArrayOutput{})
	pulumi.RegisterOutputType(GetKafkaClusterByokKeyOutput{})
	pulumi.RegisterOutputType(GetKafkaClusterByokKeyArrayOutput{})
	pulumi.RegisterOutputType(GetKafkaClusterDedicatedOutput{})
	pulumi.RegisterOutputType(GetKafkaClusterDedicatedPtrOutput{})
	pulumi.RegisterOutputType(GetKafkaClusterEnterpriseOutput{})
	pulumi.RegisterOutputType(GetKafkaClusterEnterpriseArrayOutput{})
	pulumi.RegisterOutputType(GetKafkaClusterEnvironmentOutput{})
	pulumi.RegisterOutputType(GetKafkaClusterNetworkOutput{})
	pulumi.RegisterOutputType(GetKafkaClusterNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetKafkaClusterStandardOutput{})
	pulumi.RegisterOutputType(GetKafkaClusterStandardArrayOutput{})
	pulumi.RegisterOutputType(GetKafkaTopicCredentialsOutput{})
	pulumi.RegisterOutputType(GetKafkaTopicCredentialsPtrOutput{})
	pulumi.RegisterOutputType(GetKafkaTopicKafkaClusterOutput{})
	pulumi.RegisterOutputType(GetKafkaTopicKafkaClusterPtrOutput{})
	pulumi.RegisterOutputType(GetKsqlClusterCredentialIdentityOutput{})
	pulumi.RegisterOutputType(GetKsqlClusterCredentialIdentityArrayOutput{})
	pulumi.RegisterOutputType(GetKsqlClusterEnvironmentOutput{})
	pulumi.RegisterOutputType(GetKsqlClusterKafkaClusterOutput{})
	pulumi.RegisterOutputType(GetKsqlClusterKafkaClusterArrayOutput{})
	pulumi.RegisterOutputType(GetNetworkAwOutput{})
	pulumi.RegisterOutputType(GetNetworkAwArrayOutput{})
	pulumi.RegisterOutputType(GetNetworkAzureOutput{})
	pulumi.RegisterOutputType(GetNetworkAzureArrayOutput{})
	pulumi.RegisterOutputType(GetNetworkDnsConfigOutput{})
	pulumi.RegisterOutputType(GetNetworkDnsConfigArrayOutput{})
	pulumi.RegisterOutputType(GetNetworkEnvironmentOutput{})
	pulumi.RegisterOutputType(GetNetworkGcpOutput{})
	pulumi.RegisterOutputType(GetNetworkGcpArrayOutput{})
	pulumi.RegisterOutputType(GetNetworkLinkEndpointEnvironmentOutput{})
	pulumi.RegisterOutputType(GetNetworkLinkEndpointNetworkOutput{})
	pulumi.RegisterOutputType(GetNetworkLinkEndpointNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetNetworkLinkEndpointNetworkLinkServiceOutput{})
	pulumi.RegisterOutputType(GetNetworkLinkEndpointNetworkLinkServiceArrayOutput{})
	pulumi.RegisterOutputType(GetNetworkLinkServiceAcceptOutput{})
	pulumi.RegisterOutputType(GetNetworkLinkServiceAcceptPtrOutput{})
	pulumi.RegisterOutputType(GetNetworkLinkServiceEnvironmentOutput{})
	pulumi.RegisterOutputType(GetNetworkLinkServiceNetworkOutput{})
	pulumi.RegisterOutputType(GetNetworkLinkServiceNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetNetworkZoneInfoOutput{})
	pulumi.RegisterOutputType(GetNetworkZoneInfoArrayOutput{})
	pulumi.RegisterOutputType(GetPeeringAwOutput{})
	pulumi.RegisterOutputType(GetPeeringAwArrayOutput{})
	pulumi.RegisterOutputType(GetPeeringAzureOutput{})
	pulumi.RegisterOutputType(GetPeeringAzureArrayOutput{})
	pulumi.RegisterOutputType(GetPeeringEnvironmentOutput{})
	pulumi.RegisterOutputType(GetPeeringGcpOutput{})
	pulumi.RegisterOutputType(GetPeeringGcpArrayOutput{})
	pulumi.RegisterOutputType(GetPeeringNetworkOutput{})
	pulumi.RegisterOutputType(GetPeeringNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetPrivateLinkAccessAwOutput{})
	pulumi.RegisterOutputType(GetPrivateLinkAccessAwArrayOutput{})
	pulumi.RegisterOutputType(GetPrivateLinkAccessAzureOutput{})
	pulumi.RegisterOutputType(GetPrivateLinkAccessAzureArrayOutput{})
	pulumi.RegisterOutputType(GetPrivateLinkAccessEnvironmentOutput{})
	pulumi.RegisterOutputType(GetPrivateLinkAccessGcpOutput{})
	pulumi.RegisterOutputType(GetPrivateLinkAccessGcpArrayOutput{})
	pulumi.RegisterOutputType(GetPrivateLinkAccessNetworkOutput{})
	pulumi.RegisterOutputType(GetPrivateLinkAccessNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetPrivateLinkAttachmentAwOutput{})
	pulumi.RegisterOutputType(GetPrivateLinkAttachmentAwArrayOutput{})
	pulumi.RegisterOutputType(GetPrivateLinkAttachmentAzureOutput{})
	pulumi.RegisterOutputType(GetPrivateLinkAttachmentAzureArrayOutput{})
	pulumi.RegisterOutputType(GetPrivateLinkAttachmentConnectionAwOutput{})
	pulumi.RegisterOutputType(GetPrivateLinkAttachmentConnectionAwArrayOutput{})
	pulumi.RegisterOutputType(GetPrivateLinkAttachmentConnectionAzureOutput{})
	pulumi.RegisterOutputType(GetPrivateLinkAttachmentConnectionAzureArrayOutput{})
	pulumi.RegisterOutputType(GetPrivateLinkAttachmentConnectionEnvironmentOutput{})
	pulumi.RegisterOutputType(GetPrivateLinkAttachmentConnectionGcpOutput{})
	pulumi.RegisterOutputType(GetPrivateLinkAttachmentConnectionGcpArrayOutput{})
	pulumi.RegisterOutputType(GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentOutput{})
	pulumi.RegisterOutputType(GetPrivateLinkAttachmentConnectionPrivateLinkAttachmentArrayOutput{})
	pulumi.RegisterOutputType(GetPrivateLinkAttachmentEnvironmentOutput{})
	pulumi.RegisterOutputType(GetPrivateLinkAttachmentGcpOutput{})
	pulumi.RegisterOutputType(GetPrivateLinkAttachmentGcpArrayOutput{})
	pulumi.RegisterOutputType(GetSchemaCredentialsOutput{})
	pulumi.RegisterOutputType(GetSchemaCredentialsPtrOutput{})
	pulumi.RegisterOutputType(GetSchemaRegistryClusterConfigCredentialsOutput{})
	pulumi.RegisterOutputType(GetSchemaRegistryClusterConfigCredentialsPtrOutput{})
	pulumi.RegisterOutputType(GetSchemaRegistryClusterConfigSchemaRegistryClusterOutput{})
	pulumi.RegisterOutputType(GetSchemaRegistryClusterConfigSchemaRegistryClusterPtrOutput{})
	pulumi.RegisterOutputType(GetSchemaRegistryClusterEnvironmentOutput{})
	pulumi.RegisterOutputType(GetSchemaRegistryClusterModeCredentialsOutput{})
	pulumi.RegisterOutputType(GetSchemaRegistryClusterModeCredentialsPtrOutput{})
	pulumi.RegisterOutputType(GetSchemaRegistryClusterModeSchemaRegistryClusterOutput{})
	pulumi.RegisterOutputType(GetSchemaRegistryClusterModeSchemaRegistryClusterPtrOutput{})
	pulumi.RegisterOutputType(GetSchemaRegistryClusterRegionOutput{})
	pulumi.RegisterOutputType(GetSchemaRegistryClusterRegionArrayOutput{})
	pulumi.RegisterOutputType(GetSchemaRegistryClustersClusterOutput{})
	pulumi.RegisterOutputType(GetSchemaRegistryClustersClusterArrayOutput{})
	pulumi.RegisterOutputType(GetSchemaRegistryClustersClusterEnvironmentOutput{})
	pulumi.RegisterOutputType(GetSchemaRegistryClustersClusterRegionOutput{})
	pulumi.RegisterOutputType(GetSchemaRegistryClustersClusterRegionArrayOutput{})
	pulumi.RegisterOutputType(GetSchemaSchemaReferenceOutput{})
	pulumi.RegisterOutputType(GetSchemaSchemaReferenceArrayOutput{})
	pulumi.RegisterOutputType(GetSchemaSchemaRegistryClusterOutput{})
	pulumi.RegisterOutputType(GetSchemaSchemaRegistryClusterPtrOutput{})
	pulumi.RegisterOutputType(GetSchemasCredentialsOutput{})
	pulumi.RegisterOutputType(GetSchemasCredentialsPtrOutput{})
	pulumi.RegisterOutputType(GetSchemasFilterOutput{})
	pulumi.RegisterOutputType(GetSchemasFilterPtrOutput{})
	pulumi.RegisterOutputType(GetSchemasSchemaOutput{})
	pulumi.RegisterOutputType(GetSchemasSchemaArrayOutput{})
	pulumi.RegisterOutputType(GetSchemasSchemaRegistryClusterOutput{})
	pulumi.RegisterOutputType(GetSchemasSchemaRegistryClusterPtrOutput{})
	pulumi.RegisterOutputType(GetSchemasSchemaSchemaReferenceOutput{})
	pulumi.RegisterOutputType(GetSchemasSchemaSchemaReferenceArrayOutput{})
	pulumi.RegisterOutputType(GetSubjectConfigCredentialsOutput{})
	pulumi.RegisterOutputType(GetSubjectConfigCredentialsPtrOutput{})
	pulumi.RegisterOutputType(GetSubjectConfigSchemaRegistryClusterOutput{})
	pulumi.RegisterOutputType(GetSubjectConfigSchemaRegistryClusterPtrOutput{})
	pulumi.RegisterOutputType(GetSubjectModeCredentialsOutput{})
	pulumi.RegisterOutputType(GetSubjectModeCredentialsPtrOutput{})
	pulumi.RegisterOutputType(GetSubjectModeSchemaRegistryClusterOutput{})
	pulumi.RegisterOutputType(GetSubjectModeSchemaRegistryClusterPtrOutput{})
	pulumi.RegisterOutputType(GetTagBindingCredentialsOutput{})
	pulumi.RegisterOutputType(GetTagBindingCredentialsPtrOutput{})
	pulumi.RegisterOutputType(GetTagBindingSchemaRegistryClusterOutput{})
	pulumi.RegisterOutputType(GetTagBindingSchemaRegistryClusterPtrOutput{})
	pulumi.RegisterOutputType(GetTagCredentialsOutput{})
	pulumi.RegisterOutputType(GetTagCredentialsPtrOutput{})
	pulumi.RegisterOutputType(GetTagSchemaRegistryClusterOutput{})
	pulumi.RegisterOutputType(GetTagSchemaRegistryClusterPtrOutput{})
	pulumi.RegisterOutputType(GetTransitGatewayAttachmentAwOutput{})
	pulumi.RegisterOutputType(GetTransitGatewayAttachmentAwArrayOutput{})
	pulumi.RegisterOutputType(GetTransitGatewayAttachmentEnvironmentOutput{})
	pulumi.RegisterOutputType(GetTransitGatewayAttachmentNetworkOutput{})
	pulumi.RegisterOutputType(GetTransitGatewayAttachmentNetworkArrayOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// [![Open Preview](https://img.shields.io/badge/Lifecycle%20Stage-Open%20Preview-%2300afba)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
//
// > **Note:** `SchemaRegistryCluster` resource is available in **Open Preview** for early adopters. Open Preview features are introduced to gather customer feedback. This feature should be used only for evaluation and non-production testing purposes or to provide feedback to Confluent, particularly as it becomes more widely available in follow-on editions.\
// **Open Preview** features are intended for evaluation use in development and testing environments only, and not for production use. The warranty, SLA, and Support Services provisions of your agreement with Confluent do not apply to Open Preview features. Open Preview features are considered to be a Proof of Concept as defined in the Confluent Cloud Terms of Service. Confluent may discontinue providing preview releases of the Open Preview features at any time in Confluentâ€™s sole discretion.
//
// `SchemaRegistryCluster` describes a Schema Registry cluster data source.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleUsingIdSchemaRegistryCluster, err := confluentcloud.LookupSchemaRegistryCluster(ctx, &GetSchemaRegistryClusterArgs{
//				Id: pulumi.StringRef("lsrc-abc123"),
//				Environment: GetSchemaRegistryClusterEnvironment{
//					Id: "env-xyz456",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("exampleUsingId", exampleUsingIdSchemaRegistryCluster)
//			exampleUsingNameSchemaRegistryCluster, err := confluentcloud.LookupSchemaRegistryCluster(ctx, &GetSchemaRegistryClusterArgs{
//				DisplayName: pulumi.StringRef("Stream Governance Package"),
//				Environment: GetSchemaRegistryClusterEnvironment{
//					Id: "env-xyz456",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("exampleUsingName", exampleUsingNameSchemaRegistryCluster)
//			return nil
//		})
//	}
//
// ```
func LookupSchemaRegistryCluster(ctx *pulumi.Context, args *LookupSchemaRegistryClusterArgs, opts ...pulumi.InvokeOption) (*LookupSchemaRegistryClusterResult, error) {
	var rv LookupSchemaRegistryClusterResult
	err := ctx.Invoke("confluentcloud:index/getSchemaRegistryCluster:getSchemaRegistryCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSchemaRegistryCluster.
type LookupSchemaRegistryClusterArgs struct {
	// The name for the Schema Registry cluster.
	DisplayName *string                             `pulumi:"displayName"`
	Environment GetSchemaRegistryClusterEnvironment `pulumi:"environment"`
	// The ID of the Environment that the Schema Registry cluster belongs to, for example, `env-xyz456`.
	Id *string `pulumi:"id"`
}

// A collection of values returned by getSchemaRegistryCluster.
type LookupSchemaRegistryClusterResult struct {
	// (Required String) An API Version of the schema version of the Schema Registry cluster, for example, `stream-governance/v2`.
	ApiVersion string `pulumi:"apiVersion"`
	// (Required String) The name of the Schema Registry cluster, for example, `Stream Governance Package`.
	DisplayName string                              `pulumi:"displayName"`
	Environment GetSchemaRegistryClusterEnvironment `pulumi:"environment"`
	Id          string                              `pulumi:"id"`
	// (Required String) A kind of the Schema Registry cluster, for example, `Cluster`.
	Kind string `pulumi:"kind"`
	// (Required String) The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.
	// - `region` (Required Configuration Block) supports the following:
	Package string                           `pulumi:"package"`
	Regions []GetSchemaRegistryClusterRegion `pulumi:"regions"`
	// (Required String) The Confluent Resource Name of the Schema Registry cluster, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/schema-registry=lsrc-abc123`.
	ResourceName string `pulumi:"resourceName"`
	// (Required String) The HTTP endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-west-2.aws.confluent.cloud`.
	RestEndpoint string `pulumi:"restEndpoint"`
}

func LookupSchemaRegistryClusterOutput(ctx *pulumi.Context, args LookupSchemaRegistryClusterOutputArgs, opts ...pulumi.InvokeOption) LookupSchemaRegistryClusterResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSchemaRegistryClusterResult, error) {
			args := v.(LookupSchemaRegistryClusterArgs)
			r, err := LookupSchemaRegistryCluster(ctx, &args, opts...)
			var s LookupSchemaRegistryClusterResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSchemaRegistryClusterResultOutput)
}

// A collection of arguments for invoking getSchemaRegistryCluster.
type LookupSchemaRegistryClusterOutputArgs struct {
	// The name for the Schema Registry cluster.
	DisplayName pulumi.StringPtrInput                    `pulumi:"displayName"`
	Environment GetSchemaRegistryClusterEnvironmentInput `pulumi:"environment"`
	// The ID of the Environment that the Schema Registry cluster belongs to, for example, `env-xyz456`.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (LookupSchemaRegistryClusterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSchemaRegistryClusterArgs)(nil)).Elem()
}

// A collection of values returned by getSchemaRegistryCluster.
type LookupSchemaRegistryClusterResultOutput struct{ *pulumi.OutputState }

func (LookupSchemaRegistryClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSchemaRegistryClusterResult)(nil)).Elem()
}

func (o LookupSchemaRegistryClusterResultOutput) ToLookupSchemaRegistryClusterResultOutput() LookupSchemaRegistryClusterResultOutput {
	return o
}

func (o LookupSchemaRegistryClusterResultOutput) ToLookupSchemaRegistryClusterResultOutputWithContext(ctx context.Context) LookupSchemaRegistryClusterResultOutput {
	return o
}

// (Required String) An API Version of the schema version of the Schema Registry cluster, for example, `stream-governance/v2`.
func (o LookupSchemaRegistryClusterResultOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaRegistryClusterResult) string { return v.ApiVersion }).(pulumi.StringOutput)
}

// (Required String) The name of the Schema Registry cluster, for example, `Stream Governance Package`.
func (o LookupSchemaRegistryClusterResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaRegistryClusterResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

func (o LookupSchemaRegistryClusterResultOutput) Environment() GetSchemaRegistryClusterEnvironmentOutput {
	return o.ApplyT(func(v LookupSchemaRegistryClusterResult) GetSchemaRegistryClusterEnvironment { return v.Environment }).(GetSchemaRegistryClusterEnvironmentOutput)
}

func (o LookupSchemaRegistryClusterResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaRegistryClusterResult) string { return v.Id }).(pulumi.StringOutput)
}

// (Required String) A kind of the Schema Registry cluster, for example, `Cluster`.
func (o LookupSchemaRegistryClusterResultOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaRegistryClusterResult) string { return v.Kind }).(pulumi.StringOutput)
}

// (Required String) The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.
// - `region` (Required Configuration Block) supports the following:
func (o LookupSchemaRegistryClusterResultOutput) Package() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaRegistryClusterResult) string { return v.Package }).(pulumi.StringOutput)
}

func (o LookupSchemaRegistryClusterResultOutput) Regions() GetSchemaRegistryClusterRegionArrayOutput {
	return o.ApplyT(func(v LookupSchemaRegistryClusterResult) []GetSchemaRegistryClusterRegion { return v.Regions }).(GetSchemaRegistryClusterRegionArrayOutput)
}

// (Required String) The Confluent Resource Name of the Schema Registry cluster, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/schema-registry=lsrc-abc123`.
func (o LookupSchemaRegistryClusterResultOutput) ResourceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaRegistryClusterResult) string { return v.ResourceName }).(pulumi.StringOutput)
}

// (Required String) The HTTP endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-west-2.aws.confluent.cloud`.
func (o LookupSchemaRegistryClusterResultOutput) RestEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaRegistryClusterResult) string { return v.RestEndpoint }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSchemaRegistryClusterResultOutput{})
}

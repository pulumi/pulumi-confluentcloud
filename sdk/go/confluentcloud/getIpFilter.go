// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
//
// `IpFilter` describes an IP Filter data source.
//
// > **Note:** See [IP Filtering on Confluent Cloud](https://docs.confluent.io/cloud/current/security/access-control/ip-filtering/overview.html) for more details about the IP Filtering feature, its prerequisites, and its limitations.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := confluentcloud.LookupIpFilter(ctx, &confluentcloud.LookupIpFilterArgs{
//				Id: "ipf-abc123",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("example", example)
//			return nil
//		})
//	}
//
// ```
func LookupIpFilter(ctx *pulumi.Context, args *LookupIpFilterArgs, opts ...pulumi.InvokeOption) (*LookupIpFilterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupIpFilterResult
	err := ctx.Invoke("confluentcloud:index/getIpFilter:getIpFilter", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIpFilter.
type LookupIpFilterArgs struct {
	// The ID of the IP Group (e.g., `ipf-abc123`).
	Id string `pulumi:"id"`
}

// A collection of values returned by getIpFilter.
type LookupIpFilterResult struct {
	// (Required String) A human-readable name for an IP Filter. Can contain any unicode letter or number, the ASCII space character, or any of the following special characters: `[`, `]`, `|`, `&`, `+`, `-`, `_`, `/`, `.`, `,`.
	FilterName string `pulumi:"filterName"`
	Id         string `pulumi:"id"`
	// (Required List of Strings) A list of IP Groups.
	IpGroups []string `pulumi:"ipGroups"`
	// (Required List of Strings) Scope of resources covered by this IP Filter. Resource group must be set to 'multiple' in order to use this property. During update operations, note that the operation groups passed in will replace the list of existing operation groups (passing in an empty list will remove all operation groups) from the filter (in line with the behavior for `ipGroups` attribute).
	OperationGroups []string `pulumi:"operationGroups"`
	// (Required String) Scope of resources covered by this IP Filter. Available resource groups include `"management"` and `"multiple"`.
	ResourceGroup string `pulumi:"resourceGroup"`
	// (Required String) A CRN that specifies the scope of the IP Filter, specifically the organization or environment. Without specifying this property, the IP Filter would apply to the whole organization. For example, `"crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa"` or `data.confluent_organization.resource_name`.
	ResourceScope string `pulumi:"resourceScope"`
}

func LookupIpFilterOutput(ctx *pulumi.Context, args LookupIpFilterOutputArgs, opts ...pulumi.InvokeOption) LookupIpFilterResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupIpFilterResultOutput, error) {
			args := v.(LookupIpFilterArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("confluentcloud:index/getIpFilter:getIpFilter", args, LookupIpFilterResultOutput{}, options).(LookupIpFilterResultOutput), nil
		}).(LookupIpFilterResultOutput)
}

// A collection of arguments for invoking getIpFilter.
type LookupIpFilterOutputArgs struct {
	// The ID of the IP Group (e.g., `ipf-abc123`).
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupIpFilterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIpFilterArgs)(nil)).Elem()
}

// A collection of values returned by getIpFilter.
type LookupIpFilterResultOutput struct{ *pulumi.OutputState }

func (LookupIpFilterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIpFilterResult)(nil)).Elem()
}

func (o LookupIpFilterResultOutput) ToLookupIpFilterResultOutput() LookupIpFilterResultOutput {
	return o
}

func (o LookupIpFilterResultOutput) ToLookupIpFilterResultOutputWithContext(ctx context.Context) LookupIpFilterResultOutput {
	return o
}

// (Required String) A human-readable name for an IP Filter. Can contain any unicode letter or number, the ASCII space character, or any of the following special characters: `[`, `]`, `|`, `&`, `+`, `-`, `_`, `/`, `.`, `,`.
func (o LookupIpFilterResultOutput) FilterName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpFilterResult) string { return v.FilterName }).(pulumi.StringOutput)
}

func (o LookupIpFilterResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpFilterResult) string { return v.Id }).(pulumi.StringOutput)
}

// (Required List of Strings) A list of IP Groups.
func (o LookupIpFilterResultOutput) IpGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupIpFilterResult) []string { return v.IpGroups }).(pulumi.StringArrayOutput)
}

// (Required List of Strings) Scope of resources covered by this IP Filter. Resource group must be set to 'multiple' in order to use this property. During update operations, note that the operation groups passed in will replace the list of existing operation groups (passing in an empty list will remove all operation groups) from the filter (in line with the behavior for `ipGroups` attribute).
func (o LookupIpFilterResultOutput) OperationGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupIpFilterResult) []string { return v.OperationGroups }).(pulumi.StringArrayOutput)
}

// (Required String) Scope of resources covered by this IP Filter. Available resource groups include `"management"` and `"multiple"`.
func (o LookupIpFilterResultOutput) ResourceGroup() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpFilterResult) string { return v.ResourceGroup }).(pulumi.StringOutput)
}

// (Required String) A CRN that specifies the scope of the IP Filter, specifically the organization or environment. Without specifying this property, the IP Filter would apply to the whole organization. For example, `"crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa"` or `data.confluent_organization.resource_name`.
func (o LookupIpFilterResultOutput) ResourceScope() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpFilterResult) string { return v.ResourceScope }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIpFilterResultOutput{})
}

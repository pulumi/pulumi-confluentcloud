// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupSubjectConfig(ctx *pulumi.Context, args *LookupSubjectConfigArgs, opts ...pulumi.InvokeOption) (*LookupSubjectConfigResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSubjectConfigResult
	err := ctx.Invoke("confluentcloud:index/getSubjectConfig:getSubjectConfig", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSubjectConfig.
type LookupSubjectConfigArgs struct {
	Credentials *GetSubjectConfigCredentials `pulumi:"credentials"`
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          *string                                `pulumi:"restEndpoint"`
	SchemaRegistryCluster *GetSubjectConfigSchemaRegistryCluster `pulumi:"schemaRegistryCluster"`
	// The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`.
	SubjectName string `pulumi:"subjectName"`
}

// A collection of values returned by getSubjectConfig.
type LookupSubjectConfigResult struct {
	// (Required String) The Compatibility Level of the specified subject. Accepted values are: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`, `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, and `NONE`. See the [Compatibility Types](https://docs.confluent.io/platform/current/schema-registry/avro.html#compatibility-types) for more details.
	CompatibilityLevel string                       `pulumi:"compatibilityLevel"`
	Credentials        *GetSubjectConfigCredentials `pulumi:"credentials"`
	// The provider-assigned unique ID for this managed resource.
	Id                    string                                 `pulumi:"id"`
	RestEndpoint          *string                                `pulumi:"restEndpoint"`
	SchemaRegistryCluster *GetSubjectConfigSchemaRegistryCluster `pulumi:"schemaRegistryCluster"`
	SubjectName           string                                 `pulumi:"subjectName"`
}

func LookupSubjectConfigOutput(ctx *pulumi.Context, args LookupSubjectConfigOutputArgs, opts ...pulumi.InvokeOption) LookupSubjectConfigResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSubjectConfigResultOutput, error) {
			args := v.(LookupSubjectConfigArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupSubjectConfigResult
			secret, err := ctx.InvokePackageRaw("confluentcloud:index/getSubjectConfig:getSubjectConfig", args, &rv, "", opts...)
			if err != nil {
				return LookupSubjectConfigResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupSubjectConfigResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupSubjectConfigResultOutput), nil
			}
			return output, nil
		}).(LookupSubjectConfigResultOutput)
}

// A collection of arguments for invoking getSubjectConfig.
type LookupSubjectConfigOutputArgs struct {
	Credentials GetSubjectConfigCredentialsPtrInput `pulumi:"credentials"`
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          pulumi.StringPtrInput                         `pulumi:"restEndpoint"`
	SchemaRegistryCluster GetSubjectConfigSchemaRegistryClusterPtrInput `pulumi:"schemaRegistryCluster"`
	// The name of the subject (in other words, the namespace), representing the subject under which the schema will be registered, for example, `test-subject`.
	SubjectName pulumi.StringInput `pulumi:"subjectName"`
}

func (LookupSubjectConfigOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubjectConfigArgs)(nil)).Elem()
}

// A collection of values returned by getSubjectConfig.
type LookupSubjectConfigResultOutput struct{ *pulumi.OutputState }

func (LookupSubjectConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubjectConfigResult)(nil)).Elem()
}

func (o LookupSubjectConfigResultOutput) ToLookupSubjectConfigResultOutput() LookupSubjectConfigResultOutput {
	return o
}

func (o LookupSubjectConfigResultOutput) ToLookupSubjectConfigResultOutputWithContext(ctx context.Context) LookupSubjectConfigResultOutput {
	return o
}

// (Required String) The Compatibility Level of the specified subject. Accepted values are: `BACKWARD`, `BACKWARD_TRANSITIVE`, `FORWARD`, `FORWARD_TRANSITIVE`, `FULL`, `FULL_TRANSITIVE`, and `NONE`. See the [Compatibility Types](https://docs.confluent.io/platform/current/schema-registry/avro.html#compatibility-types) for more details.
func (o LookupSubjectConfigResultOutput) CompatibilityLevel() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubjectConfigResult) string { return v.CompatibilityLevel }).(pulumi.StringOutput)
}

func (o LookupSubjectConfigResultOutput) Credentials() GetSubjectConfigCredentialsPtrOutput {
	return o.ApplyT(func(v LookupSubjectConfigResult) *GetSubjectConfigCredentials { return v.Credentials }).(GetSubjectConfigCredentialsPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSubjectConfigResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubjectConfigResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupSubjectConfigResultOutput) RestEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSubjectConfigResult) *string { return v.RestEndpoint }).(pulumi.StringPtrOutput)
}

func (o LookupSubjectConfigResultOutput) SchemaRegistryCluster() GetSubjectConfigSchemaRegistryClusterPtrOutput {
	return o.ApplyT(func(v LookupSubjectConfigResult) *GetSubjectConfigSchemaRegistryCluster {
		return v.SchemaRegistryCluster
	}).(GetSubjectConfigSchemaRegistryClusterPtrOutput)
}

func (o LookupSubjectConfigResultOutput) SubjectName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubjectConfigResult) string { return v.SubjectName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSubjectConfigResultOutput{})
}

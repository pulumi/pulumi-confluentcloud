// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := confluentcloud.NewKafkaMirrorTopic(ctx, "example", &confluentcloud.KafkaMirrorTopicArgs{
//				SourceKafkaTopic: &confluentcloud.KafkaMirrorTopicSourceKafkaTopicArgs{
//					TopicName: pulumi.String("orders"),
//				},
//				ClusterLink: &confluentcloud.KafkaMirrorTopicClusterLinkArgs{
//					LinkName: pulumi.Any(source_outbound.LinkName),
//				},
//				KafkaCluster: &confluentcloud.KafkaMirrorTopicKafkaClusterArgs{
//					Id:           pulumi.Any(destination.Id),
//					RestEndpoint: pulumi.Any(destination.RestEndpoint),
//					Credentials: &confluentcloud.KafkaMirrorTopicKafkaClusterCredentialsArgs{
//						Key:    pulumi.Any(app_manager_destination_cluster_api_key.Id),
//						Secret: pulumi.Any(app_manager_destination_cluster_api_key.Secret),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Getting Started
//
// The following end-to-end examples might help to get started with `KafkaMirrorTopic` resource:
// * `destination-initiated-cluster-link-rbac`: An example of setting up a *destination* initiated cluster link with a mirror topic
// * `source-initiated-cluster-link-rbac`: An example of setting up a *source* initiated cluster link with a mirror topic
//
// See [Mirror Topics on Confluent Cloud](https://docs.confluent.io/cloud/current/multi-cloud/cluster-linking/mirror-topics-cc.html) to learn more about Mirror Topics on Confluent Cloud.
//
// ## Import
//
// You can import a Kafka mirror topic by using the Kafka cluster ID, cluster link name, and Kafka topic name in the format `<Kafka cluster ID>/<Cluster link name>/<Kafka topic name>`, for example:
//
// $ export IMPORT_KAFKA_API_KEY="<kafka_api_key>"
//
// $ export IMPORT_KAFKA_API_SECRET="<kafka_api_secret>"
//
// $ export IMPORT_KAFKA_REST_ENDPOINT="<kafka_rest_endpoint>"
//
// ```sh
// $ pulumi import confluentcloud:index/kafkaMirrorTopic:KafkaMirrorTopic my_mirror_topic lkc-abc123/my-cluster-link/orders-123
// ```
//
// !> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
type KafkaMirrorTopic struct {
	pulumi.CustomResourceState

	ClusterLink  KafkaMirrorTopicClusterLinkOutput  `pulumi:"clusterLink"`
	KafkaCluster KafkaMirrorTopicKafkaClusterOutput `pulumi:"kafkaCluster"`
	// The name of the mirror topic. Only required when there is a prefix configured on the cluster link. For example, when `<prefix>` is configured for the cluster link, the mirror topic name has to be of the format `<prefix><source_topic_name>`.
	MirrorTopicName  pulumi.StringOutput                    `pulumi:"mirrorTopicName"`
	SourceKafkaTopic KafkaMirrorTopicSourceKafkaTopicOutput `pulumi:"sourceKafkaTopic"`
	Status           pulumi.StringOutput                    `pulumi:"status"`
}

// NewKafkaMirrorTopic registers a new resource with the given unique name, arguments, and options.
func NewKafkaMirrorTopic(ctx *pulumi.Context,
	name string, args *KafkaMirrorTopicArgs, opts ...pulumi.ResourceOption) (*KafkaMirrorTopic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterLink == nil {
		return nil, errors.New("invalid value for required argument 'ClusterLink'")
	}
	if args.KafkaCluster == nil {
		return nil, errors.New("invalid value for required argument 'KafkaCluster'")
	}
	if args.SourceKafkaTopic == nil {
		return nil, errors.New("invalid value for required argument 'SourceKafkaTopic'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KafkaMirrorTopic
	err := ctx.RegisterResource("confluentcloud:index/kafkaMirrorTopic:KafkaMirrorTopic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaMirrorTopic gets an existing KafkaMirrorTopic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaMirrorTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaMirrorTopicState, opts ...pulumi.ResourceOption) (*KafkaMirrorTopic, error) {
	var resource KafkaMirrorTopic
	err := ctx.ReadResource("confluentcloud:index/kafkaMirrorTopic:KafkaMirrorTopic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaMirrorTopic resources.
type kafkaMirrorTopicState struct {
	ClusterLink  *KafkaMirrorTopicClusterLink  `pulumi:"clusterLink"`
	KafkaCluster *KafkaMirrorTopicKafkaCluster `pulumi:"kafkaCluster"`
	// The name of the mirror topic. Only required when there is a prefix configured on the cluster link. For example, when `<prefix>` is configured for the cluster link, the mirror topic name has to be of the format `<prefix><source_topic_name>`.
	MirrorTopicName  *string                           `pulumi:"mirrorTopicName"`
	SourceKafkaTopic *KafkaMirrorTopicSourceKafkaTopic `pulumi:"sourceKafkaTopic"`
	Status           *string                           `pulumi:"status"`
}

type KafkaMirrorTopicState struct {
	ClusterLink  KafkaMirrorTopicClusterLinkPtrInput
	KafkaCluster KafkaMirrorTopicKafkaClusterPtrInput
	// The name of the mirror topic. Only required when there is a prefix configured on the cluster link. For example, when `<prefix>` is configured for the cluster link, the mirror topic name has to be of the format `<prefix><source_topic_name>`.
	MirrorTopicName  pulumi.StringPtrInput
	SourceKafkaTopic KafkaMirrorTopicSourceKafkaTopicPtrInput
	Status           pulumi.StringPtrInput
}

func (KafkaMirrorTopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaMirrorTopicState)(nil)).Elem()
}

type kafkaMirrorTopicArgs struct {
	ClusterLink  KafkaMirrorTopicClusterLink  `pulumi:"clusterLink"`
	KafkaCluster KafkaMirrorTopicKafkaCluster `pulumi:"kafkaCluster"`
	// The name of the mirror topic. Only required when there is a prefix configured on the cluster link. For example, when `<prefix>` is configured for the cluster link, the mirror topic name has to be of the format `<prefix><source_topic_name>`.
	MirrorTopicName  *string                          `pulumi:"mirrorTopicName"`
	SourceKafkaTopic KafkaMirrorTopicSourceKafkaTopic `pulumi:"sourceKafkaTopic"`
	Status           *string                          `pulumi:"status"`
}

// The set of arguments for constructing a KafkaMirrorTopic resource.
type KafkaMirrorTopicArgs struct {
	ClusterLink  KafkaMirrorTopicClusterLinkInput
	KafkaCluster KafkaMirrorTopicKafkaClusterInput
	// The name of the mirror topic. Only required when there is a prefix configured on the cluster link. For example, when `<prefix>` is configured for the cluster link, the mirror topic name has to be of the format `<prefix><source_topic_name>`.
	MirrorTopicName  pulumi.StringPtrInput
	SourceKafkaTopic KafkaMirrorTopicSourceKafkaTopicInput
	Status           pulumi.StringPtrInput
}

func (KafkaMirrorTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaMirrorTopicArgs)(nil)).Elem()
}

type KafkaMirrorTopicInput interface {
	pulumi.Input

	ToKafkaMirrorTopicOutput() KafkaMirrorTopicOutput
	ToKafkaMirrorTopicOutputWithContext(ctx context.Context) KafkaMirrorTopicOutput
}

func (*KafkaMirrorTopic) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaMirrorTopic)(nil)).Elem()
}

func (i *KafkaMirrorTopic) ToKafkaMirrorTopicOutput() KafkaMirrorTopicOutput {
	return i.ToKafkaMirrorTopicOutputWithContext(context.Background())
}

func (i *KafkaMirrorTopic) ToKafkaMirrorTopicOutputWithContext(ctx context.Context) KafkaMirrorTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaMirrorTopicOutput)
}

// KafkaMirrorTopicArrayInput is an input type that accepts KafkaMirrorTopicArray and KafkaMirrorTopicArrayOutput values.
// You can construct a concrete instance of `KafkaMirrorTopicArrayInput` via:
//
//	KafkaMirrorTopicArray{ KafkaMirrorTopicArgs{...} }
type KafkaMirrorTopicArrayInput interface {
	pulumi.Input

	ToKafkaMirrorTopicArrayOutput() KafkaMirrorTopicArrayOutput
	ToKafkaMirrorTopicArrayOutputWithContext(context.Context) KafkaMirrorTopicArrayOutput
}

type KafkaMirrorTopicArray []KafkaMirrorTopicInput

func (KafkaMirrorTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaMirrorTopic)(nil)).Elem()
}

func (i KafkaMirrorTopicArray) ToKafkaMirrorTopicArrayOutput() KafkaMirrorTopicArrayOutput {
	return i.ToKafkaMirrorTopicArrayOutputWithContext(context.Background())
}

func (i KafkaMirrorTopicArray) ToKafkaMirrorTopicArrayOutputWithContext(ctx context.Context) KafkaMirrorTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaMirrorTopicArrayOutput)
}

// KafkaMirrorTopicMapInput is an input type that accepts KafkaMirrorTopicMap and KafkaMirrorTopicMapOutput values.
// You can construct a concrete instance of `KafkaMirrorTopicMapInput` via:
//
//	KafkaMirrorTopicMap{ "key": KafkaMirrorTopicArgs{...} }
type KafkaMirrorTopicMapInput interface {
	pulumi.Input

	ToKafkaMirrorTopicMapOutput() KafkaMirrorTopicMapOutput
	ToKafkaMirrorTopicMapOutputWithContext(context.Context) KafkaMirrorTopicMapOutput
}

type KafkaMirrorTopicMap map[string]KafkaMirrorTopicInput

func (KafkaMirrorTopicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaMirrorTopic)(nil)).Elem()
}

func (i KafkaMirrorTopicMap) ToKafkaMirrorTopicMapOutput() KafkaMirrorTopicMapOutput {
	return i.ToKafkaMirrorTopicMapOutputWithContext(context.Background())
}

func (i KafkaMirrorTopicMap) ToKafkaMirrorTopicMapOutputWithContext(ctx context.Context) KafkaMirrorTopicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaMirrorTopicMapOutput)
}

type KafkaMirrorTopicOutput struct{ *pulumi.OutputState }

func (KafkaMirrorTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaMirrorTopic)(nil)).Elem()
}

func (o KafkaMirrorTopicOutput) ToKafkaMirrorTopicOutput() KafkaMirrorTopicOutput {
	return o
}

func (o KafkaMirrorTopicOutput) ToKafkaMirrorTopicOutputWithContext(ctx context.Context) KafkaMirrorTopicOutput {
	return o
}

func (o KafkaMirrorTopicOutput) ClusterLink() KafkaMirrorTopicClusterLinkOutput {
	return o.ApplyT(func(v *KafkaMirrorTopic) KafkaMirrorTopicClusterLinkOutput { return v.ClusterLink }).(KafkaMirrorTopicClusterLinkOutput)
}

func (o KafkaMirrorTopicOutput) KafkaCluster() KafkaMirrorTopicKafkaClusterOutput {
	return o.ApplyT(func(v *KafkaMirrorTopic) KafkaMirrorTopicKafkaClusterOutput { return v.KafkaCluster }).(KafkaMirrorTopicKafkaClusterOutput)
}

// The name of the mirror topic. Only required when there is a prefix configured on the cluster link. For example, when `<prefix>` is configured for the cluster link, the mirror topic name has to be of the format `<prefix><source_topic_name>`.
func (o KafkaMirrorTopicOutput) MirrorTopicName() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaMirrorTopic) pulumi.StringOutput { return v.MirrorTopicName }).(pulumi.StringOutput)
}

func (o KafkaMirrorTopicOutput) SourceKafkaTopic() KafkaMirrorTopicSourceKafkaTopicOutput {
	return o.ApplyT(func(v *KafkaMirrorTopic) KafkaMirrorTopicSourceKafkaTopicOutput { return v.SourceKafkaTopic }).(KafkaMirrorTopicSourceKafkaTopicOutput)
}

func (o KafkaMirrorTopicOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaMirrorTopic) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type KafkaMirrorTopicArrayOutput struct{ *pulumi.OutputState }

func (KafkaMirrorTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaMirrorTopic)(nil)).Elem()
}

func (o KafkaMirrorTopicArrayOutput) ToKafkaMirrorTopicArrayOutput() KafkaMirrorTopicArrayOutput {
	return o
}

func (o KafkaMirrorTopicArrayOutput) ToKafkaMirrorTopicArrayOutputWithContext(ctx context.Context) KafkaMirrorTopicArrayOutput {
	return o
}

func (o KafkaMirrorTopicArrayOutput) Index(i pulumi.IntInput) KafkaMirrorTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaMirrorTopic {
		return vs[0].([]*KafkaMirrorTopic)[vs[1].(int)]
	}).(KafkaMirrorTopicOutput)
}

type KafkaMirrorTopicMapOutput struct{ *pulumi.OutputState }

func (KafkaMirrorTopicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaMirrorTopic)(nil)).Elem()
}

func (o KafkaMirrorTopicMapOutput) ToKafkaMirrorTopicMapOutput() KafkaMirrorTopicMapOutput {
	return o
}

func (o KafkaMirrorTopicMapOutput) ToKafkaMirrorTopicMapOutputWithContext(ctx context.Context) KafkaMirrorTopicMapOutput {
	return o
}

func (o KafkaMirrorTopicMapOutput) MapIndex(k pulumi.StringInput) KafkaMirrorTopicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaMirrorTopic {
		return vs[0].(map[string]*KafkaMirrorTopic)[vs[1].(string)]
	}).(KafkaMirrorTopicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaMirrorTopicInput)(nil)).Elem(), &KafkaMirrorTopic{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaMirrorTopicArrayInput)(nil)).Elem(), KafkaMirrorTopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaMirrorTopicMapInput)(nil)).Elem(), KafkaMirrorTopicMap{})
	pulumi.RegisterOutputType(KafkaMirrorTopicOutput{})
	pulumi.RegisterOutputType(KafkaMirrorTopicArrayOutput{})
	pulumi.RegisterOutputType(KafkaMirrorTopicMapOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// [![Open Preview](https://img.shields.io/badge/Lifecycle%20Stage-Open%20Preview-%2300afba)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
//
// !> **WARNING:** `getStreamGovernanceRegion` data source is deprecated and will be removed in the next version. Use `getSchemaRegistryRegion` instead.
//
// > **Note:** `getStreamGovernanceRegion` data source is available in **Open Preview** for early adopters. Open Preview features are introduced to gather customer feedback. This feature should be used only for evaluation and non-production testing purposes or to provide feedback to Confluent, particularly as it becomes more widely available in follow-on editions.\
// **Open Preview** features are intended for evaluation use in development and testing environments only, and not for production use. The warranty, SLA, and Support Services provisions of your agreement with Confluent do not apply to Open Preview features. Open Preview features are considered to be a Proof of Concept as defined in the Confluent Cloud Terms of Service. Confluent may discontinue providing preview releases of the Open Preview features at any time in Confluentâ€™s sole discretion.
//
// `getStreamGovernanceRegion` describes a Stream Governance cluster data source.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleStreamGovernanceRegion, err := confluentcloud.GetStreamGovernanceRegion(ctx, &GetStreamGovernanceRegionArgs{
//				Cloud:   "AWS",
//				Region:  "us-east-2",
//				Package: "ESSENTIALS",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("example", exampleStreamGovernanceRegion)
//			return nil
//		})
//	}
//
// ```
func GetStreamGovernanceRegion(ctx *pulumi.Context, args *GetStreamGovernanceRegionArgs, opts ...pulumi.InvokeOption) (*GetStreamGovernanceRegionResult, error) {
	var rv GetStreamGovernanceRegionResult
	err := ctx.Invoke("confluentcloud:index/getStreamGovernanceRegion:getStreamGovernanceRegion", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getStreamGovernanceRegion.
type GetStreamGovernanceRegionArgs struct {
	// The cloud service provider that hosts the region. Accepted values are: `AWS`, `AZURE`, and `GCP`.
	Cloud string `pulumi:"cloud"`
	// The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.
	Package string `pulumi:"package"`
	// The cloud service provider region, for example, `us-east-2`. See [Cloud Providers and Regions](https://docs.confluent.io/cloud/current/clusters/regions.html#cloud-providers-and-regions) for a full list of options for AWS, Azure, and GCP.
	Region string `pulumi:"region"`
}

// A collection of values returned by getStreamGovernanceRegion.
type GetStreamGovernanceRegionResult struct {
	Cloud string `pulumi:"cloud"`
	// (Required String) The ID of the Stream Governance region, for example, `sgreg-1`.
	Id      string `pulumi:"id"`
	Package string `pulumi:"package"`
	Region  string `pulumi:"region"`
}

func GetStreamGovernanceRegionOutput(ctx *pulumi.Context, args GetStreamGovernanceRegionOutputArgs, opts ...pulumi.InvokeOption) GetStreamGovernanceRegionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetStreamGovernanceRegionResult, error) {
			args := v.(GetStreamGovernanceRegionArgs)
			r, err := GetStreamGovernanceRegion(ctx, &args, opts...)
			var s GetStreamGovernanceRegionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetStreamGovernanceRegionResultOutput)
}

// A collection of arguments for invoking getStreamGovernanceRegion.
type GetStreamGovernanceRegionOutputArgs struct {
	// The cloud service provider that hosts the region. Accepted values are: `AWS`, `AZURE`, and `GCP`.
	Cloud pulumi.StringInput `pulumi:"cloud"`
	// The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.
	Package pulumi.StringInput `pulumi:"package"`
	// The cloud service provider region, for example, `us-east-2`. See [Cloud Providers and Regions](https://docs.confluent.io/cloud/current/clusters/regions.html#cloud-providers-and-regions) for a full list of options for AWS, Azure, and GCP.
	Region pulumi.StringInput `pulumi:"region"`
}

func (GetStreamGovernanceRegionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStreamGovernanceRegionArgs)(nil)).Elem()
}

// A collection of values returned by getStreamGovernanceRegion.
type GetStreamGovernanceRegionResultOutput struct{ *pulumi.OutputState }

func (GetStreamGovernanceRegionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStreamGovernanceRegionResult)(nil)).Elem()
}

func (o GetStreamGovernanceRegionResultOutput) ToGetStreamGovernanceRegionResultOutput() GetStreamGovernanceRegionResultOutput {
	return o
}

func (o GetStreamGovernanceRegionResultOutput) ToGetStreamGovernanceRegionResultOutputWithContext(ctx context.Context) GetStreamGovernanceRegionResultOutput {
	return o
}

func (o GetStreamGovernanceRegionResultOutput) Cloud() pulumi.StringOutput {
	return o.ApplyT(func(v GetStreamGovernanceRegionResult) string { return v.Cloud }).(pulumi.StringOutput)
}

// (Required String) The ID of the Stream Governance region, for example, `sgreg-1`.
func (o GetStreamGovernanceRegionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetStreamGovernanceRegionResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetStreamGovernanceRegionResultOutput) Package() pulumi.StringOutput {
	return o.ApplyT(func(v GetStreamGovernanceRegionResult) string { return v.Package }).(pulumi.StringOutput)
}

func (o GetStreamGovernanceRegionResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetStreamGovernanceRegionResult) string { return v.Region }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetStreamGovernanceRegionResultOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// [![Open Preview](https://img.shields.io/badge/Lifecycle%20Stage-Open%20Preview-%2300afba)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
//
// > **Note:** `StreamGovernanceCluster` resource is available in **Open Preview** for early adopters. Open Preview features are introduced to gather customer feedback. This feature should be used only for evaluation and non-production testing purposes or to provide feedback to Confluent, particularly as it becomes more widely available in follow-on editions.\
// **Open Preview** features are intended for evaluation use in development and testing environments only, and not for production use. The warranty, SLA, and Support Services provisions of your agreement with Confluent do not apply to Open Preview features. Open Preview features are considered to be a Proof of Concept as defined in the Confluent Cloud Terms of Service. Confluent may discontinue providing preview releases of the Open Preview features at any time in Confluentâ€™s sole discretion.
//
// `StreamGovernanceCluster` describes a Stream Governance cluster data source.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleUsingIdStreatGovernanceCluster, err := confluentcloud.GetStreatGovernanceCluster(ctx, &GetStreatGovernanceClusterArgs{
//				Id: pulumi.StringRef("lsrc-abc123"),
//				Environment: GetStreatGovernanceClusterEnvironment{
//					Id: "env-xyz456",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("exampleUsingId", exampleUsingIdStreatGovernanceCluster)
//			exampleUsingNameStreatGovernanceCluster, err := confluentcloud.GetStreatGovernanceCluster(ctx, &GetStreatGovernanceClusterArgs{
//				DisplayName: pulumi.StringRef("Stream Governance Package"),
//				Environment: GetStreatGovernanceClusterEnvironment{
//					Id: "env-xyz456",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("exampleUsingName", exampleUsingNameStreatGovernanceCluster)
//			return nil
//		})
//	}
//
// ```
func GetStreatGovernanceCluster(ctx *pulumi.Context, args *GetStreatGovernanceClusterArgs, opts ...pulumi.InvokeOption) (*GetStreatGovernanceClusterResult, error) {
	var rv GetStreatGovernanceClusterResult
	err := ctx.Invoke("confluentcloud:index/getStreatGovernanceCluster:getStreatGovernanceCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getStreatGovernanceCluster.
type GetStreatGovernanceClusterArgs struct {
	// The name for the Stream Governance cluster.
	DisplayName *string                               `pulumi:"displayName"`
	Environment GetStreatGovernanceClusterEnvironment `pulumi:"environment"`
	// The ID of the Environment that the Stream Governance cluster belongs to, for example, `env-xyz456`.
	Id *string `pulumi:"id"`
}

// A collection of values returned by getStreatGovernanceCluster.
type GetStreatGovernanceClusterResult struct {
	// (Required String) An API Version of the schema version of the Stream Governance cluster, for example, `stream-governance/v2`.
	ApiVersion string `pulumi:"apiVersion"`
	// (Required String) The name of the Stream Governance cluster, for example, `Stream Governance Package`.
	DisplayName string                                `pulumi:"displayName"`
	Environment GetStreatGovernanceClusterEnvironment `pulumi:"environment"`
	// (Required String) The HTTP endpoint of the Stream Governance cluster, for example, `https://psrc-00000.us-west-2.aws.confluent.cloud`.
	HttpEndpoint string `pulumi:"httpEndpoint"`
	Id           string `pulumi:"id"`
	// (Required String) A kind of the Stream Governance cluster, for example, `Cluster`.
	Kind string `pulumi:"kind"`
	// (Required String) The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.
	// - `region` (Required Configuration Block) supports the following:
	Package string                             `pulumi:"package"`
	Regions []GetStreatGovernanceClusterRegion `pulumi:"regions"`
	// (Required String) The Confluent Resource Name of the Stream Governance cluster, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/schema-registry=lsrc-abc123`.
	ResourceName string `pulumi:"resourceName"`
}

func GetStreatGovernanceClusterOutput(ctx *pulumi.Context, args GetStreatGovernanceClusterOutputArgs, opts ...pulumi.InvokeOption) GetStreatGovernanceClusterResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetStreatGovernanceClusterResult, error) {
			args := v.(GetStreatGovernanceClusterArgs)
			r, err := GetStreatGovernanceCluster(ctx, &args, opts...)
			var s GetStreatGovernanceClusterResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetStreatGovernanceClusterResultOutput)
}

// A collection of arguments for invoking getStreatGovernanceCluster.
type GetStreatGovernanceClusterOutputArgs struct {
	// The name for the Stream Governance cluster.
	DisplayName pulumi.StringPtrInput                      `pulumi:"displayName"`
	Environment GetStreatGovernanceClusterEnvironmentInput `pulumi:"environment"`
	// The ID of the Environment that the Stream Governance cluster belongs to, for example, `env-xyz456`.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (GetStreatGovernanceClusterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStreatGovernanceClusterArgs)(nil)).Elem()
}

// A collection of values returned by getStreatGovernanceCluster.
type GetStreatGovernanceClusterResultOutput struct{ *pulumi.OutputState }

func (GetStreatGovernanceClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStreatGovernanceClusterResult)(nil)).Elem()
}

func (o GetStreatGovernanceClusterResultOutput) ToGetStreatGovernanceClusterResultOutput() GetStreatGovernanceClusterResultOutput {
	return o
}

func (o GetStreatGovernanceClusterResultOutput) ToGetStreatGovernanceClusterResultOutputWithContext(ctx context.Context) GetStreatGovernanceClusterResultOutput {
	return o
}

// (Required String) An API Version of the schema version of the Stream Governance cluster, for example, `stream-governance/v2`.
func (o GetStreatGovernanceClusterResultOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetStreatGovernanceClusterResult) string { return v.ApiVersion }).(pulumi.StringOutput)
}

// (Required String) The name of the Stream Governance cluster, for example, `Stream Governance Package`.
func (o GetStreatGovernanceClusterResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetStreatGovernanceClusterResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

func (o GetStreatGovernanceClusterResultOutput) Environment() GetStreatGovernanceClusterEnvironmentOutput {
	return o.ApplyT(func(v GetStreatGovernanceClusterResult) GetStreatGovernanceClusterEnvironment { return v.Environment }).(GetStreatGovernanceClusterEnvironmentOutput)
}

// (Required String) The HTTP endpoint of the Stream Governance cluster, for example, `https://psrc-00000.us-west-2.aws.confluent.cloud`.
func (o GetStreatGovernanceClusterResultOutput) HttpEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v GetStreatGovernanceClusterResult) string { return v.HttpEndpoint }).(pulumi.StringOutput)
}

func (o GetStreatGovernanceClusterResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetStreatGovernanceClusterResult) string { return v.Id }).(pulumi.StringOutput)
}

// (Required String) A kind of the Stream Governance cluster, for example, `Cluster`.
func (o GetStreatGovernanceClusterResultOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v GetStreatGovernanceClusterResult) string { return v.Kind }).(pulumi.StringOutput)
}

// (Required String) The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.
// - `region` (Required Configuration Block) supports the following:
func (o GetStreatGovernanceClusterResultOutput) Package() pulumi.StringOutput {
	return o.ApplyT(func(v GetStreatGovernanceClusterResult) string { return v.Package }).(pulumi.StringOutput)
}

func (o GetStreatGovernanceClusterResultOutput) Regions() GetStreatGovernanceClusterRegionArrayOutput {
	return o.ApplyT(func(v GetStreatGovernanceClusterResult) []GetStreatGovernanceClusterRegion { return v.Regions }).(GetStreatGovernanceClusterRegionArrayOutput)
}

// (Required String) The Confluent Resource Name of the Stream Governance cluster, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/schema-registry=lsrc-abc123`.
func (o GetStreatGovernanceClusterResultOutput) ResourceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetStreatGovernanceClusterResult) string { return v.ResourceName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetStreatGovernanceClusterResultOutput{})
}

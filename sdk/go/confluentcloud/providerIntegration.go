// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			staging, err := confluentcloud.NewEnvironment(ctx, "staging", &confluentcloud.EnvironmentArgs{
//				DisplayName: pulumi.String("Staging"),
//				StreamGovernance: &confluentcloud.EnvironmentStreamGovernanceArgs{
//					Package: pulumi.String("ESSENTIALS"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = confluentcloud.NewProviderIntegration(ctx, "main", &confluentcloud.ProviderIntegrationArgs{
//				Environment: &confluentcloud.ProviderIntegrationEnvironmentArgs{
//					Id: staging.ID(),
//				},
//				Aws: &confluentcloud.ProviderIntegrationAwsArgs{
//					CustomerRoleArn: pulumi.Any(customerRoleArn),
//				},
//				DisplayName: pulumi.String("provider_integration_main"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Getting Started
//
// The following end-to-end examples might help to get started with `ProviderIntegration` resource:
// * s3-sink-connector-assume-role: Amazon S3 Sink Connector with IAM role-based authorization using a Provider Integration
//
// ## Import
//
// You can import a Provider Integration by using Environment ID and Provider Integration ID, in the format `<Environment ID>/<Provider Integration ID>`. The following example shows how to import a Provider Integration:
//
// $ export CONFLUENT_CLOUD_API_KEY="<cloud_api_key>"
//
// $ export CONFLUENT_CLOUD_API_SECRET="<cloud_api_secret>"
//
// ```sh
// $ pulumi import confluentcloud:index/providerIntegration:ProviderIntegration main env-abc123/cspi-4xg0q
// ```
//
// !> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
type ProviderIntegration struct {
	pulumi.CustomResourceState

	// (Required Configuration Block) The AWS-specific Provider Integration config details. It supports the following:
	Aws ProviderIntegrationAwsPtrOutput `pulumi:"aws"`
	// The name of the Provider Integration.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment ProviderIntegrationEnvironmentOutput `pulumi:"environment"`
	// (Required List of Strings) List of resource CRNs where this provider integration is being used.
	Usages pulumi.StringArrayOutput `pulumi:"usages"`
}

// NewProviderIntegration registers a new resource with the given unique name, arguments, and options.
func NewProviderIntegration(ctx *pulumi.Context,
	name string, args *ProviderIntegrationArgs, opts ...pulumi.ResourceOption) (*ProviderIntegration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProviderIntegration
	err := ctx.RegisterResource("confluentcloud:index/providerIntegration:ProviderIntegration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProviderIntegration gets an existing ProviderIntegration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProviderIntegration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProviderIntegrationState, opts ...pulumi.ResourceOption) (*ProviderIntegration, error) {
	var resource ProviderIntegration
	err := ctx.ReadResource("confluentcloud:index/providerIntegration:ProviderIntegration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProviderIntegration resources.
type providerIntegrationState struct {
	// (Required Configuration Block) The AWS-specific Provider Integration config details. It supports the following:
	Aws *ProviderIntegrationAws `pulumi:"aws"`
	// The name of the Provider Integration.
	DisplayName *string `pulumi:"displayName"`
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment *ProviderIntegrationEnvironment `pulumi:"environment"`
	// (Required List of Strings) List of resource CRNs where this provider integration is being used.
	Usages []string `pulumi:"usages"`
}

type ProviderIntegrationState struct {
	// (Required Configuration Block) The AWS-specific Provider Integration config details. It supports the following:
	Aws ProviderIntegrationAwsPtrInput
	// The name of the Provider Integration.
	DisplayName pulumi.StringPtrInput
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment ProviderIntegrationEnvironmentPtrInput
	// (Required List of Strings) List of resource CRNs where this provider integration is being used.
	Usages pulumi.StringArrayInput
}

func (ProviderIntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*providerIntegrationState)(nil)).Elem()
}

type providerIntegrationArgs struct {
	// (Required Configuration Block) The AWS-specific Provider Integration config details. It supports the following:
	Aws *ProviderIntegrationAws `pulumi:"aws"`
	// The name of the Provider Integration.
	DisplayName string `pulumi:"displayName"`
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment ProviderIntegrationEnvironment `pulumi:"environment"`
}

// The set of arguments for constructing a ProviderIntegration resource.
type ProviderIntegrationArgs struct {
	// (Required Configuration Block) The AWS-specific Provider Integration config details. It supports the following:
	Aws ProviderIntegrationAwsPtrInput
	// The name of the Provider Integration.
	DisplayName pulumi.StringInput
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment ProviderIntegrationEnvironmentInput
}

func (ProviderIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerIntegrationArgs)(nil)).Elem()
}

type ProviderIntegrationInput interface {
	pulumi.Input

	ToProviderIntegrationOutput() ProviderIntegrationOutput
	ToProviderIntegrationOutputWithContext(ctx context.Context) ProviderIntegrationOutput
}

func (*ProviderIntegration) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderIntegration)(nil)).Elem()
}

func (i *ProviderIntegration) ToProviderIntegrationOutput() ProviderIntegrationOutput {
	return i.ToProviderIntegrationOutputWithContext(context.Background())
}

func (i *ProviderIntegration) ToProviderIntegrationOutputWithContext(ctx context.Context) ProviderIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderIntegrationOutput)
}

// ProviderIntegrationArrayInput is an input type that accepts ProviderIntegrationArray and ProviderIntegrationArrayOutput values.
// You can construct a concrete instance of `ProviderIntegrationArrayInput` via:
//
//	ProviderIntegrationArray{ ProviderIntegrationArgs{...} }
type ProviderIntegrationArrayInput interface {
	pulumi.Input

	ToProviderIntegrationArrayOutput() ProviderIntegrationArrayOutput
	ToProviderIntegrationArrayOutputWithContext(context.Context) ProviderIntegrationArrayOutput
}

type ProviderIntegrationArray []ProviderIntegrationInput

func (ProviderIntegrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProviderIntegration)(nil)).Elem()
}

func (i ProviderIntegrationArray) ToProviderIntegrationArrayOutput() ProviderIntegrationArrayOutput {
	return i.ToProviderIntegrationArrayOutputWithContext(context.Background())
}

func (i ProviderIntegrationArray) ToProviderIntegrationArrayOutputWithContext(ctx context.Context) ProviderIntegrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderIntegrationArrayOutput)
}

// ProviderIntegrationMapInput is an input type that accepts ProviderIntegrationMap and ProviderIntegrationMapOutput values.
// You can construct a concrete instance of `ProviderIntegrationMapInput` via:
//
//	ProviderIntegrationMap{ "key": ProviderIntegrationArgs{...} }
type ProviderIntegrationMapInput interface {
	pulumi.Input

	ToProviderIntegrationMapOutput() ProviderIntegrationMapOutput
	ToProviderIntegrationMapOutputWithContext(context.Context) ProviderIntegrationMapOutput
}

type ProviderIntegrationMap map[string]ProviderIntegrationInput

func (ProviderIntegrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProviderIntegration)(nil)).Elem()
}

func (i ProviderIntegrationMap) ToProviderIntegrationMapOutput() ProviderIntegrationMapOutput {
	return i.ToProviderIntegrationMapOutputWithContext(context.Background())
}

func (i ProviderIntegrationMap) ToProviderIntegrationMapOutputWithContext(ctx context.Context) ProviderIntegrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderIntegrationMapOutput)
}

type ProviderIntegrationOutput struct{ *pulumi.OutputState }

func (ProviderIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderIntegration)(nil)).Elem()
}

func (o ProviderIntegrationOutput) ToProviderIntegrationOutput() ProviderIntegrationOutput {
	return o
}

func (o ProviderIntegrationOutput) ToProviderIntegrationOutputWithContext(ctx context.Context) ProviderIntegrationOutput {
	return o
}

// (Required Configuration Block) The AWS-specific Provider Integration config details. It supports the following:
func (o ProviderIntegrationOutput) Aws() ProviderIntegrationAwsPtrOutput {
	return o.ApplyT(func(v *ProviderIntegration) ProviderIntegrationAwsPtrOutput { return v.Aws }).(ProviderIntegrationAwsPtrOutput)
}

// The name of the Provider Integration.
func (o ProviderIntegrationOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *ProviderIntegration) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
func (o ProviderIntegrationOutput) Environment() ProviderIntegrationEnvironmentOutput {
	return o.ApplyT(func(v *ProviderIntegration) ProviderIntegrationEnvironmentOutput { return v.Environment }).(ProviderIntegrationEnvironmentOutput)
}

// (Required List of Strings) List of resource CRNs where this provider integration is being used.
func (o ProviderIntegrationOutput) Usages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProviderIntegration) pulumi.StringArrayOutput { return v.Usages }).(pulumi.StringArrayOutput)
}

type ProviderIntegrationArrayOutput struct{ *pulumi.OutputState }

func (ProviderIntegrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProviderIntegration)(nil)).Elem()
}

func (o ProviderIntegrationArrayOutput) ToProviderIntegrationArrayOutput() ProviderIntegrationArrayOutput {
	return o
}

func (o ProviderIntegrationArrayOutput) ToProviderIntegrationArrayOutputWithContext(ctx context.Context) ProviderIntegrationArrayOutput {
	return o
}

func (o ProviderIntegrationArrayOutput) Index(i pulumi.IntInput) ProviderIntegrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProviderIntegration {
		return vs[0].([]*ProviderIntegration)[vs[1].(int)]
	}).(ProviderIntegrationOutput)
}

type ProviderIntegrationMapOutput struct{ *pulumi.OutputState }

func (ProviderIntegrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProviderIntegration)(nil)).Elem()
}

func (o ProviderIntegrationMapOutput) ToProviderIntegrationMapOutput() ProviderIntegrationMapOutput {
	return o
}

func (o ProviderIntegrationMapOutput) ToProviderIntegrationMapOutputWithContext(ctx context.Context) ProviderIntegrationMapOutput {
	return o
}

func (o ProviderIntegrationMapOutput) MapIndex(k pulumi.StringInput) ProviderIntegrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProviderIntegration {
		return vs[0].(map[string]*ProviderIntegration)[vs[1].(string)]
	}).(ProviderIntegrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderIntegrationInput)(nil)).Elem(), &ProviderIntegration{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderIntegrationArrayInput)(nil)).Elem(), ProviderIntegrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderIntegrationMapInput)(nil)).Elem(), ProviderIntegrationMap{})
	pulumi.RegisterOutputType(ProviderIntegrationOutput{})
	pulumi.RegisterOutputType(ProviderIntegrationArrayOutput{})
	pulumi.RegisterOutputType(ProviderIntegrationMapOutput{})
}

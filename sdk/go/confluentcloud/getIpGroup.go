// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
//
// `IpGroup` describes an IP Group data source.
//
// > **Note:** See [IP Filtering on Confluent Cloud](https://docs.confluent.io/cloud/current/security/access-control/ip-filtering/overview.html) for more details about the IP Filtering feature, its prerequisites, and its limitations.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := confluentcloud.LookupIpGroup(ctx, &confluentcloud.LookupIpGroupArgs{
//				Id: "ipg-abc123",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("example", example)
//			return nil
//		})
//	}
//
// ```
func LookupIpGroup(ctx *pulumi.Context, args *LookupIpGroupArgs, opts ...pulumi.InvokeOption) (*LookupIpGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupIpGroupResult
	err := ctx.Invoke("confluentcloud:index/getIpGroup:getIpGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIpGroup.
type LookupIpGroupArgs struct {
	// The ID of the IP Group (e.g., `ipg-abc123`).
	Id string `pulumi:"id"`
}

// A collection of values returned by getIpGroup.
type LookupIpGroupResult struct {
	// (Required List of Strings) A list of CIDRs.
	CidrBlocks []string `pulumi:"cidrBlocks"`
	// (Required String) A human-readable name for an IP Group. Can contain any unicode letter or number, the ASCII space character, or any of the following special characters: `[`, `]`, `|`, `&`, `+`, `-`, `_`, `/`, `.`, `,`.
	GroupName string `pulumi:"groupName"`
	Id        string `pulumi:"id"`
}

func LookupIpGroupOutput(ctx *pulumi.Context, args LookupIpGroupOutputArgs, opts ...pulumi.InvokeOption) LookupIpGroupResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupIpGroupResultOutput, error) {
			args := v.(LookupIpGroupArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("confluentcloud:index/getIpGroup:getIpGroup", args, LookupIpGroupResultOutput{}, options).(LookupIpGroupResultOutput), nil
		}).(LookupIpGroupResultOutput)
}

// A collection of arguments for invoking getIpGroup.
type LookupIpGroupOutputArgs struct {
	// The ID of the IP Group (e.g., `ipg-abc123`).
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupIpGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIpGroupArgs)(nil)).Elem()
}

// A collection of values returned by getIpGroup.
type LookupIpGroupResultOutput struct{ *pulumi.OutputState }

func (LookupIpGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIpGroupResult)(nil)).Elem()
}

func (o LookupIpGroupResultOutput) ToLookupIpGroupResultOutput() LookupIpGroupResultOutput {
	return o
}

func (o LookupIpGroupResultOutput) ToLookupIpGroupResultOutputWithContext(ctx context.Context) LookupIpGroupResultOutput {
	return o
}

// (Required List of Strings) A list of CIDRs.
func (o LookupIpGroupResultOutput) CidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupIpGroupResult) []string { return v.CidrBlocks }).(pulumi.StringArrayOutput)
}

// (Required String) A human-readable name for an IP Group. Can contain any unicode letter or number, the ASCII space character, or any of the following special characters: `[`, `]`, `|`, `&`, `+`, `-`, `_`, `/`, `.`, `,`.
func (o LookupIpGroupResultOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpGroupResult) string { return v.GroupName }).(pulumi.StringOutput)
}

func (o LookupIpGroupResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpGroupResult) string { return v.Id }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIpGroupResultOutput{})
}

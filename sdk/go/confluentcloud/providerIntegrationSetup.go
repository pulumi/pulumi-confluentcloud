// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### Azure Provider Integration
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			staging, err := confluentcloud.NewEnvironment(ctx, "staging", &confluentcloud.EnvironmentArgs{
//				DisplayName: pulumi.String("Staging"),
//				StreamGovernance: &confluentcloud.EnvironmentStreamGovernanceArgs{
//					Package: pulumi.String("ESSENTIALS"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			azure, err := confluentcloud.NewProviderIntegrationSetup(ctx, "azure", &confluentcloud.ProviderIntegrationSetupArgs{
//				Environment: &confluentcloud.ProviderIntegrationSetupEnvironmentArgs{
//					Id: staging.ID(),
//				},
//				DisplayName: pulumi.String("azure-integration"),
//				Cloud:       pulumi.String("AZURE"),
//			})
//			if err != nil {
//				return err
//			}
//			// Configure and validate the Azure integration
//			_, err = confluentcloud.NewProviderIntegrationAuthorization(ctx, "azure", &confluentcloud.ProviderIntegrationAuthorizationArgs{
//				ProviderIntegrationId: azure.ID(),
//				Environment: &confluentcloud.ProviderIntegrationAuthorizationEnvironmentArgs{
//					Id: staging.ID(),
//				},
//				Azure: &confluentcloud.ProviderIntegrationAuthorizationAzureArgs{
//					CustomerAzureTenantId: pulumi.String("12345678-1234-1234-1234-123456789abc"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### GCP Provider Integration
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			gcp, err := confluentcloud.NewProviderIntegrationSetup(ctx, "gcp", &confluentcloud.ProviderIntegrationSetupArgs{
//				Environment: &confluentcloud.ProviderIntegrationSetupEnvironmentArgs{
//					Id: pulumi.Any(staging.Id),
//				},
//				DisplayName: pulumi.String("gcp-integration"),
//				Cloud:       pulumi.String("GCP"),
//			})
//			if err != nil {
//				return err
//			}
//			// Configure and validate the GCP integration
//			_, err = confluentcloud.NewProviderIntegrationAuthorization(ctx, "gcp", &confluentcloud.ProviderIntegrationAuthorizationArgs{
//				ProviderIntegrationId: gcp.ID(),
//				Environment: &confluentcloud.ProviderIntegrationAuthorizationEnvironmentArgs{
//					Id: pulumi.Any(staging.Id),
//				},
//				Gcp: &confluentcloud.ProviderIntegrationAuthorizationGcpArgs{
//					CustomerGoogleServiceAccount: pulumi.String("my-sa@my-project.iam.gserviceaccount.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Getting Started
//
// The following end-to-end examples might help to get started with `ProviderIntegrationSetup` resource:
// * provider-integration-azure: Complete Azure Provider Integration setup
// * provider-integration-gcp: Complete GCP Provider Integration setup
//
// ## Import
//
// You can import a Provider Integration by using Environment ID and Provider Integration ID, in the format `<Environment ID>/<Provider Integration ID>`. The following example shows how to import a Provider Integration:
//
// $ export CONFLUENT_CLOUD_API_KEY="<cloud_api_key>"
//
// $ export CONFLUENT_CLOUD_API_SECRET="<cloud_api_secret>"
//
// ```sh
// $ pulumi import confluentcloud:index/providerIntegrationSetup:ProviderIntegrationSetup main env-abc123/cspi-4xg0q
// ```
//
// !> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
type ProviderIntegrationSetup struct {
	pulumi.CustomResourceState

	// The cloud service provider. Supported values are `AZURE` and `GCP`.
	Cloud pulumi.StringOutput `pulumi:"cloud"`
	// The name of the Provider Integration.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment ProviderIntegrationSetupEnvironmentOutput `pulumi:"environment"`
	// (Required String) The status of the Provider Integration. Values are `DRAFT` and `CREATED`.
	Status pulumi.StringOutput `pulumi:"status"`
	// (Required List of Strings) List of resource CRNs where this provider integration is being used.
	Usages pulumi.StringArrayOutput `pulumi:"usages"`
}

// NewProviderIntegrationSetup registers a new resource with the given unique name, arguments, and options.
func NewProviderIntegrationSetup(ctx *pulumi.Context,
	name string, args *ProviderIntegrationSetupArgs, opts ...pulumi.ResourceOption) (*ProviderIntegrationSetup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cloud == nil {
		return nil, errors.New("invalid value for required argument 'Cloud'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProviderIntegrationSetup
	err := ctx.RegisterResource("confluentcloud:index/providerIntegrationSetup:ProviderIntegrationSetup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProviderIntegrationSetup gets an existing ProviderIntegrationSetup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProviderIntegrationSetup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProviderIntegrationSetupState, opts ...pulumi.ResourceOption) (*ProviderIntegrationSetup, error) {
	var resource ProviderIntegrationSetup
	err := ctx.ReadResource("confluentcloud:index/providerIntegrationSetup:ProviderIntegrationSetup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProviderIntegrationSetup resources.
type providerIntegrationSetupState struct {
	// The cloud service provider. Supported values are `AZURE` and `GCP`.
	Cloud *string `pulumi:"cloud"`
	// The name of the Provider Integration.
	DisplayName *string `pulumi:"displayName"`
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment *ProviderIntegrationSetupEnvironment `pulumi:"environment"`
	// (Required String) The status of the Provider Integration. Values are `DRAFT` and `CREATED`.
	Status *string `pulumi:"status"`
	// (Required List of Strings) List of resource CRNs where this provider integration is being used.
	Usages []string `pulumi:"usages"`
}

type ProviderIntegrationSetupState struct {
	// The cloud service provider. Supported values are `AZURE` and `GCP`.
	Cloud pulumi.StringPtrInput
	// The name of the Provider Integration.
	DisplayName pulumi.StringPtrInput
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment ProviderIntegrationSetupEnvironmentPtrInput
	// (Required String) The status of the Provider Integration. Values are `DRAFT` and `CREATED`.
	Status pulumi.StringPtrInput
	// (Required List of Strings) List of resource CRNs where this provider integration is being used.
	Usages pulumi.StringArrayInput
}

func (ProviderIntegrationSetupState) ElementType() reflect.Type {
	return reflect.TypeOf((*providerIntegrationSetupState)(nil)).Elem()
}

type providerIntegrationSetupArgs struct {
	// The cloud service provider. Supported values are `AZURE` and `GCP`.
	Cloud string `pulumi:"cloud"`
	// The name of the Provider Integration.
	DisplayName string `pulumi:"displayName"`
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment ProviderIntegrationSetupEnvironment `pulumi:"environment"`
}

// The set of arguments for constructing a ProviderIntegrationSetup resource.
type ProviderIntegrationSetupArgs struct {
	// The cloud service provider. Supported values are `AZURE` and `GCP`.
	Cloud pulumi.StringInput
	// The name of the Provider Integration.
	DisplayName pulumi.StringInput
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment ProviderIntegrationSetupEnvironmentInput
}

func (ProviderIntegrationSetupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerIntegrationSetupArgs)(nil)).Elem()
}

type ProviderIntegrationSetupInput interface {
	pulumi.Input

	ToProviderIntegrationSetupOutput() ProviderIntegrationSetupOutput
	ToProviderIntegrationSetupOutputWithContext(ctx context.Context) ProviderIntegrationSetupOutput
}

func (*ProviderIntegrationSetup) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderIntegrationSetup)(nil)).Elem()
}

func (i *ProviderIntegrationSetup) ToProviderIntegrationSetupOutput() ProviderIntegrationSetupOutput {
	return i.ToProviderIntegrationSetupOutputWithContext(context.Background())
}

func (i *ProviderIntegrationSetup) ToProviderIntegrationSetupOutputWithContext(ctx context.Context) ProviderIntegrationSetupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderIntegrationSetupOutput)
}

// ProviderIntegrationSetupArrayInput is an input type that accepts ProviderIntegrationSetupArray and ProviderIntegrationSetupArrayOutput values.
// You can construct a concrete instance of `ProviderIntegrationSetupArrayInput` via:
//
//	ProviderIntegrationSetupArray{ ProviderIntegrationSetupArgs{...} }
type ProviderIntegrationSetupArrayInput interface {
	pulumi.Input

	ToProviderIntegrationSetupArrayOutput() ProviderIntegrationSetupArrayOutput
	ToProviderIntegrationSetupArrayOutputWithContext(context.Context) ProviderIntegrationSetupArrayOutput
}

type ProviderIntegrationSetupArray []ProviderIntegrationSetupInput

func (ProviderIntegrationSetupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProviderIntegrationSetup)(nil)).Elem()
}

func (i ProviderIntegrationSetupArray) ToProviderIntegrationSetupArrayOutput() ProviderIntegrationSetupArrayOutput {
	return i.ToProviderIntegrationSetupArrayOutputWithContext(context.Background())
}

func (i ProviderIntegrationSetupArray) ToProviderIntegrationSetupArrayOutputWithContext(ctx context.Context) ProviderIntegrationSetupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderIntegrationSetupArrayOutput)
}

// ProviderIntegrationSetupMapInput is an input type that accepts ProviderIntegrationSetupMap and ProviderIntegrationSetupMapOutput values.
// You can construct a concrete instance of `ProviderIntegrationSetupMapInput` via:
//
//	ProviderIntegrationSetupMap{ "key": ProviderIntegrationSetupArgs{...} }
type ProviderIntegrationSetupMapInput interface {
	pulumi.Input

	ToProviderIntegrationSetupMapOutput() ProviderIntegrationSetupMapOutput
	ToProviderIntegrationSetupMapOutputWithContext(context.Context) ProviderIntegrationSetupMapOutput
}

type ProviderIntegrationSetupMap map[string]ProviderIntegrationSetupInput

func (ProviderIntegrationSetupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProviderIntegrationSetup)(nil)).Elem()
}

func (i ProviderIntegrationSetupMap) ToProviderIntegrationSetupMapOutput() ProviderIntegrationSetupMapOutput {
	return i.ToProviderIntegrationSetupMapOutputWithContext(context.Background())
}

func (i ProviderIntegrationSetupMap) ToProviderIntegrationSetupMapOutputWithContext(ctx context.Context) ProviderIntegrationSetupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderIntegrationSetupMapOutput)
}

type ProviderIntegrationSetupOutput struct{ *pulumi.OutputState }

func (ProviderIntegrationSetupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderIntegrationSetup)(nil)).Elem()
}

func (o ProviderIntegrationSetupOutput) ToProviderIntegrationSetupOutput() ProviderIntegrationSetupOutput {
	return o
}

func (o ProviderIntegrationSetupOutput) ToProviderIntegrationSetupOutputWithContext(ctx context.Context) ProviderIntegrationSetupOutput {
	return o
}

// The cloud service provider. Supported values are `AZURE` and `GCP`.
func (o ProviderIntegrationSetupOutput) Cloud() pulumi.StringOutput {
	return o.ApplyT(func(v *ProviderIntegrationSetup) pulumi.StringOutput { return v.Cloud }).(pulumi.StringOutput)
}

// The name of the Provider Integration.
func (o ProviderIntegrationSetupOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *ProviderIntegrationSetup) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
func (o ProviderIntegrationSetupOutput) Environment() ProviderIntegrationSetupEnvironmentOutput {
	return o.ApplyT(func(v *ProviderIntegrationSetup) ProviderIntegrationSetupEnvironmentOutput { return v.Environment }).(ProviderIntegrationSetupEnvironmentOutput)
}

// (Required String) The status of the Provider Integration. Values are `DRAFT` and `CREATED`.
func (o ProviderIntegrationSetupOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ProviderIntegrationSetup) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// (Required List of Strings) List of resource CRNs where this provider integration is being used.
func (o ProviderIntegrationSetupOutput) Usages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProviderIntegrationSetup) pulumi.StringArrayOutput { return v.Usages }).(pulumi.StringArrayOutput)
}

type ProviderIntegrationSetupArrayOutput struct{ *pulumi.OutputState }

func (ProviderIntegrationSetupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProviderIntegrationSetup)(nil)).Elem()
}

func (o ProviderIntegrationSetupArrayOutput) ToProviderIntegrationSetupArrayOutput() ProviderIntegrationSetupArrayOutput {
	return o
}

func (o ProviderIntegrationSetupArrayOutput) ToProviderIntegrationSetupArrayOutputWithContext(ctx context.Context) ProviderIntegrationSetupArrayOutput {
	return o
}

func (o ProviderIntegrationSetupArrayOutput) Index(i pulumi.IntInput) ProviderIntegrationSetupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProviderIntegrationSetup {
		return vs[0].([]*ProviderIntegrationSetup)[vs[1].(int)]
	}).(ProviderIntegrationSetupOutput)
}

type ProviderIntegrationSetupMapOutput struct{ *pulumi.OutputState }

func (ProviderIntegrationSetupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProviderIntegrationSetup)(nil)).Elem()
}

func (o ProviderIntegrationSetupMapOutput) ToProviderIntegrationSetupMapOutput() ProviderIntegrationSetupMapOutput {
	return o
}

func (o ProviderIntegrationSetupMapOutput) ToProviderIntegrationSetupMapOutputWithContext(ctx context.Context) ProviderIntegrationSetupMapOutput {
	return o
}

func (o ProviderIntegrationSetupMapOutput) MapIndex(k pulumi.StringInput) ProviderIntegrationSetupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProviderIntegrationSetup {
		return vs[0].(map[string]*ProviderIntegrationSetup)[vs[1].(string)]
	}).(ProviderIntegrationSetupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderIntegrationSetupInput)(nil)).Elem(), &ProviderIntegrationSetup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderIntegrationSetupArrayInput)(nil)).Elem(), ProviderIntegrationSetupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderIntegrationSetupMapInput)(nil)).Elem(), ProviderIntegrationSetupMap{})
	pulumi.RegisterOutputType(ProviderIntegrationSetupOutput{})
	pulumi.RegisterOutputType(ProviderIntegrationSetupArrayOutput{})
	pulumi.RegisterOutputType(ProviderIntegrationSetupMapOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### Option #1: Manage multiple Schema Registry clusters in the same Pulumi Stack
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := confluentcloud.NewCatalogEntityAttributes(ctx, "environment", &confluentcloud.CatalogEntityAttributesArgs{
//				SchemaRegistryCluster: &confluentcloud.CatalogEntityAttributesSchemaRegistryClusterArgs{
//					Id: pulumi.Any(essentials.Id),
//				},
//				RestEndpoint: pulumi.Any(essentials.RestEndpoint),
//				Credentials: &confluentcloud.CatalogEntityAttributesCredentialsArgs{
//					Key:    pulumi.String("<Schema Registry API Key for data.confluent_schema_registry_cluster.essentials>"),
//					Secret: pulumi.String("<Schema Registry API Secret for data.confluent_schema_registry_cluster.essentials>"),
//				},
//				EntityName: pulumi.Any(main.Id),
//				EntityType: pulumi.String("cf_environment"),
//				Attributes: pulumi.StringMap{
//					"description": pulumi.String("Environment description"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = confluentcloud.NewCatalogEntityAttributes(ctx, "kafka-cluster", &confluentcloud.CatalogEntityAttributesArgs{
//				SchemaRegistryCluster: &confluentcloud.CatalogEntityAttributesSchemaRegistryClusterArgs{
//					Id: pulumi.Any(essentials.Id),
//				},
//				RestEndpoint: pulumi.Any(essentials.RestEndpoint),
//				Credentials: &confluentcloud.CatalogEntityAttributesCredentialsArgs{
//					Key:    pulumi.String("<Schema Registry API Key for data.confluent_schema_registry_cluster.essentials>"),
//					Secret: pulumi.String("<Schema Registry API Secret for data.confluent_schema_registry_cluster.essentials>"),
//				},
//				EntityName: pulumi.Any(basic.Id),
//				EntityType: pulumi.String("kafka_logical_cluster"),
//				Attributes: pulumi.StringMap{
//					"description": pulumi.String("Kafka Cluster description"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = confluentcloud.NewCatalogEntityAttributes(ctx, "topic", &confluentcloud.CatalogEntityAttributesArgs{
//				SchemaRegistryCluster: &confluentcloud.CatalogEntityAttributesSchemaRegistryClusterArgs{
//					Id: pulumi.Any(essentials.Id),
//				},
//				RestEndpoint: pulumi.Any(essentials.RestEndpoint),
//				Credentials: &confluentcloud.CatalogEntityAttributesCredentialsArgs{
//					Key:    pulumi.String("<Schema Registry API Key for data.confluent_schema_registry_cluster.essentials>"),
//					Secret: pulumi.String("<Schema Registry API Secret for data.confluent_schema_registry_cluster.essentials>"),
//				},
//				EntityName: pulumi.Sprintf("%v:%v", basic.Id, purchase.TopicName),
//				EntityType: pulumi.String("kafka_topic"),
//				Attributes: pulumi.StringMap{
//					"owner":       pulumi.String("dev"),
//					"description": pulumi.String("Kafka topic for orders"),
//					"ownerEmail":  pulumi.String("dev@gmail.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = confluentcloud.NewCatalogEntityAttributes(ctx, "schema", &confluentcloud.CatalogEntityAttributesArgs{
//				SchemaRegistryCluster: &confluentcloud.CatalogEntityAttributesSchemaRegistryClusterArgs{
//					Id: pulumi.Any(essentials.Id),
//				},
//				RestEndpoint: pulumi.Any(essentials.RestEndpoint),
//				Credentials: &confluentcloud.CatalogEntityAttributesCredentialsArgs{
//					Key:    pulumi.String("<Schema Registry API Key for data.confluent_schema_registry_cluster.essentials>"),
//					Secret: pulumi.String("<Schema Registry API Secret for data.confluent_schema_registry_cluster.essentials>"),
//				},
//				EntityName: pulumi.Sprintf("%v:.:%v", essentials.Id, purchaseConfluentSchema.SchemaIdentifier),
//				EntityType: pulumi.String("sr_schema"),
//				Attributes: pulumi.StringMap{
//					"description": pulumi.String("Schema description"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Option #2: Manage a single Schema Registry cluster in the same Pulumi Stack
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := confluentcloud.NewCatalogEntityAttributes(ctx, "environment", &confluentcloud.CatalogEntityAttributesArgs{
//				EntityName: pulumi.Any(environmentId),
//				EntityType: pulumi.String("cf_environment"),
//				Attributes: pulumi.StringMap{
//					"description": pulumi.String("Environment description"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = confluentcloud.NewCatalogEntityAttributes(ctx, "kafka-cluster", &confluentcloud.CatalogEntityAttributesArgs{
//				EntityName: pulumi.Any(kafkaClusterId),
//				EntityType: pulumi.String("kafka_logical_cluster"),
//				Attributes: pulumi.StringMap{
//					"description": pulumi.String("Kafka Cluster description"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = confluentcloud.NewCatalogEntityAttributes(ctx, "topic", &confluentcloud.CatalogEntityAttributesArgs{
//				EntityName: pulumi.Sprintf("%v:%v", kafkaClusterId, kafkaTopicName),
//				EntityType: pulumi.String("kafka_topic"),
//				Attributes: pulumi.StringMap{
//					"owner":       pulumi.String("dev"),
//					"description": pulumi.String("Kafka topic for orders"),
//					"ownerEmail":  pulumi.String("dev@gmail.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = confluentcloud.NewCatalogEntityAttributes(ctx, "schema", &confluentcloud.CatalogEntityAttributesArgs{
//				EntityName: pulumi.Sprintf("%v:.:%v", schemaRegistryClusterId, purchase.SchemaIdentifier),
//				EntityType: pulumi.String("sr_schema"),
//				Attributes: pulumi.StringMap{
//					"description": pulumi.String("Schema description"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// > **Note:** We also support `schemaRegistryRestEndpoint` instead of `catalogRestEndpoint` for the time being.
//
// ## Import
//
// You can import a Catalog Entity Attributes resource by using the Schema Registry Cluster ID, Entity name in the format `<Schema Registry Cluster ID>/<Entity Type>/<Entity Name>/<Comma-Delimited-Attributes>`, for example:
//
// Option #1: Manage multiple Catalog Entity Attributes in the same Pulumi Stack
//
// $ export IMPORT_SCHEMA_REGISTRY_API_KEY="<schema_registry_api_key>"
//
// $ export IMPORT_SCHEMA_REGISTRY_API_SECRET="<schema_registry_api_secret>"
//
// $ export IMPORT_SCHEMA_REGISTRY_REST_ENDPOINT="<schema_registry_rest_endpoint>"
//
// ```sh
// $ pulumi import confluentcloud:index/catalogEntityAttributes:CatalogEntityAttributes environment lsrc-abc123/cf_environment/env-abc123/owner,description,ownerEmail
// ```
//
// Option #2: Manage a single Catalog Entity Attributes in the same Pulumi Stack
//
// ```sh
// $ pulumi import confluentcloud:index/catalogEntityAttributes:CatalogEntityAttributes environment lsrc-abc123/cf_environment/env-abc123/owner,description,ownerEmail
// ```
//
// !> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
type CatalogEntityAttributes struct {
	pulumi.CustomResourceState

	// The attributes.
	Attributes pulumi.StringMapOutput `pulumi:"attributes"`
	// The Cluster API Credentials.
	Credentials CatalogEntityAttributesCredentialsPtrOutput `pulumi:"credentials"`
	// The qualified name of the entity, for example, `${data.confluent_schema_registry_cluster.essentials.id}:.:${confluent_schema.purchase.schema_identifier}`, `${data.confluent_schema_registry_cluster.essentials.id}:${confluent_kafka_cluster.basic.id}:${confluent_kafka_topic.purchase.topic_name}`. Refer to the [Examples of qualified names](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#examples-of-qualified-names) to see the full list of supported values for the `entityName` attribute.
	EntityName pulumi.StringOutput `pulumi:"entityName"`
	// The entity type, for example, `cfEnvironment`, `kafkaLogicalCluster`, `kafkaTopic`, `srSchema`, etc. Refer to the [Entity types](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#entity-types) to see the full list of supported values for the `entityType` attribute.
	EntityType pulumi.StringOutput `pulumi:"entityType"`
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          pulumi.StringPtrOutput                                `pulumi:"restEndpoint"`
	SchemaRegistryCluster CatalogEntityAttributesSchemaRegistryClusterPtrOutput `pulumi:"schemaRegistryCluster"`
}

// NewCatalogEntityAttributes registers a new resource with the given unique name, arguments, and options.
func NewCatalogEntityAttributes(ctx *pulumi.Context,
	name string, args *CatalogEntityAttributesArgs, opts ...pulumi.ResourceOption) (*CatalogEntityAttributes, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EntityName == nil {
		return nil, errors.New("invalid value for required argument 'EntityName'")
	}
	if args.EntityType == nil {
		return nil, errors.New("invalid value for required argument 'EntityType'")
	}
	if args.Credentials != nil {
		args.Credentials = pulumi.ToSecret(args.Credentials).(CatalogEntityAttributesCredentialsPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"credentials",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CatalogEntityAttributes
	err := ctx.RegisterResource("confluentcloud:index/catalogEntityAttributes:CatalogEntityAttributes", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCatalogEntityAttributes gets an existing CatalogEntityAttributes resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCatalogEntityAttributes(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CatalogEntityAttributesState, opts ...pulumi.ResourceOption) (*CatalogEntityAttributes, error) {
	var resource CatalogEntityAttributes
	err := ctx.ReadResource("confluentcloud:index/catalogEntityAttributes:CatalogEntityAttributes", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CatalogEntityAttributes resources.
type catalogEntityAttributesState struct {
	// The attributes.
	Attributes map[string]string `pulumi:"attributes"`
	// The Cluster API Credentials.
	Credentials *CatalogEntityAttributesCredentials `pulumi:"credentials"`
	// The qualified name of the entity, for example, `${data.confluent_schema_registry_cluster.essentials.id}:.:${confluent_schema.purchase.schema_identifier}`, `${data.confluent_schema_registry_cluster.essentials.id}:${confluent_kafka_cluster.basic.id}:${confluent_kafka_topic.purchase.topic_name}`. Refer to the [Examples of qualified names](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#examples-of-qualified-names) to see the full list of supported values for the `entityName` attribute.
	EntityName *string `pulumi:"entityName"`
	// The entity type, for example, `cfEnvironment`, `kafkaLogicalCluster`, `kafkaTopic`, `srSchema`, etc. Refer to the [Entity types](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#entity-types) to see the full list of supported values for the `entityType` attribute.
	EntityType *string `pulumi:"entityType"`
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          *string                                       `pulumi:"restEndpoint"`
	SchemaRegistryCluster *CatalogEntityAttributesSchemaRegistryCluster `pulumi:"schemaRegistryCluster"`
}

type CatalogEntityAttributesState struct {
	// The attributes.
	Attributes pulumi.StringMapInput
	// The Cluster API Credentials.
	Credentials CatalogEntityAttributesCredentialsPtrInput
	// The qualified name of the entity, for example, `${data.confluent_schema_registry_cluster.essentials.id}:.:${confluent_schema.purchase.schema_identifier}`, `${data.confluent_schema_registry_cluster.essentials.id}:${confluent_kafka_cluster.basic.id}:${confluent_kafka_topic.purchase.topic_name}`. Refer to the [Examples of qualified names](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#examples-of-qualified-names) to see the full list of supported values for the `entityName` attribute.
	EntityName pulumi.StringPtrInput
	// The entity type, for example, `cfEnvironment`, `kafkaLogicalCluster`, `kafkaTopic`, `srSchema`, etc. Refer to the [Entity types](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#entity-types) to see the full list of supported values for the `entityType` attribute.
	EntityType pulumi.StringPtrInput
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          pulumi.StringPtrInput
	SchemaRegistryCluster CatalogEntityAttributesSchemaRegistryClusterPtrInput
}

func (CatalogEntityAttributesState) ElementType() reflect.Type {
	return reflect.TypeOf((*catalogEntityAttributesState)(nil)).Elem()
}

type catalogEntityAttributesArgs struct {
	// The attributes.
	Attributes map[string]string `pulumi:"attributes"`
	// The Cluster API Credentials.
	Credentials *CatalogEntityAttributesCredentials `pulumi:"credentials"`
	// The qualified name of the entity, for example, `${data.confluent_schema_registry_cluster.essentials.id}:.:${confluent_schema.purchase.schema_identifier}`, `${data.confluent_schema_registry_cluster.essentials.id}:${confluent_kafka_cluster.basic.id}:${confluent_kafka_topic.purchase.topic_name}`. Refer to the [Examples of qualified names](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#examples-of-qualified-names) to see the full list of supported values for the `entityName` attribute.
	EntityName string `pulumi:"entityName"`
	// The entity type, for example, `cfEnvironment`, `kafkaLogicalCluster`, `kafkaTopic`, `srSchema`, etc. Refer to the [Entity types](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#entity-types) to see the full list of supported values for the `entityType` attribute.
	EntityType string `pulumi:"entityType"`
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          *string                                       `pulumi:"restEndpoint"`
	SchemaRegistryCluster *CatalogEntityAttributesSchemaRegistryCluster `pulumi:"schemaRegistryCluster"`
}

// The set of arguments for constructing a CatalogEntityAttributes resource.
type CatalogEntityAttributesArgs struct {
	// The attributes.
	Attributes pulumi.StringMapInput
	// The Cluster API Credentials.
	Credentials CatalogEntityAttributesCredentialsPtrInput
	// The qualified name of the entity, for example, `${data.confluent_schema_registry_cluster.essentials.id}:.:${confluent_schema.purchase.schema_identifier}`, `${data.confluent_schema_registry_cluster.essentials.id}:${confluent_kafka_cluster.basic.id}:${confluent_kafka_topic.purchase.topic_name}`. Refer to the [Examples of qualified names](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#examples-of-qualified-names) to see the full list of supported values for the `entityName` attribute.
	EntityName pulumi.StringInput
	// The entity type, for example, `cfEnvironment`, `kafkaLogicalCluster`, `kafkaTopic`, `srSchema`, etc. Refer to the [Entity types](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#entity-types) to see the full list of supported values for the `entityType` attribute.
	EntityType pulumi.StringInput
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          pulumi.StringPtrInput
	SchemaRegistryCluster CatalogEntityAttributesSchemaRegistryClusterPtrInput
}

func (CatalogEntityAttributesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*catalogEntityAttributesArgs)(nil)).Elem()
}

type CatalogEntityAttributesInput interface {
	pulumi.Input

	ToCatalogEntityAttributesOutput() CatalogEntityAttributesOutput
	ToCatalogEntityAttributesOutputWithContext(ctx context.Context) CatalogEntityAttributesOutput
}

func (*CatalogEntityAttributes) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogEntityAttributes)(nil)).Elem()
}

func (i *CatalogEntityAttributes) ToCatalogEntityAttributesOutput() CatalogEntityAttributesOutput {
	return i.ToCatalogEntityAttributesOutputWithContext(context.Background())
}

func (i *CatalogEntityAttributes) ToCatalogEntityAttributesOutputWithContext(ctx context.Context) CatalogEntityAttributesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogEntityAttributesOutput)
}

// CatalogEntityAttributesArrayInput is an input type that accepts CatalogEntityAttributesArray and CatalogEntityAttributesArrayOutput values.
// You can construct a concrete instance of `CatalogEntityAttributesArrayInput` via:
//
//	CatalogEntityAttributesArray{ CatalogEntityAttributesArgs{...} }
type CatalogEntityAttributesArrayInput interface {
	pulumi.Input

	ToCatalogEntityAttributesArrayOutput() CatalogEntityAttributesArrayOutput
	ToCatalogEntityAttributesArrayOutputWithContext(context.Context) CatalogEntityAttributesArrayOutput
}

type CatalogEntityAttributesArray []CatalogEntityAttributesInput

func (CatalogEntityAttributesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CatalogEntityAttributes)(nil)).Elem()
}

func (i CatalogEntityAttributesArray) ToCatalogEntityAttributesArrayOutput() CatalogEntityAttributesArrayOutput {
	return i.ToCatalogEntityAttributesArrayOutputWithContext(context.Background())
}

func (i CatalogEntityAttributesArray) ToCatalogEntityAttributesArrayOutputWithContext(ctx context.Context) CatalogEntityAttributesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogEntityAttributesArrayOutput)
}

// CatalogEntityAttributesMapInput is an input type that accepts CatalogEntityAttributesMap and CatalogEntityAttributesMapOutput values.
// You can construct a concrete instance of `CatalogEntityAttributesMapInput` via:
//
//	CatalogEntityAttributesMap{ "key": CatalogEntityAttributesArgs{...} }
type CatalogEntityAttributesMapInput interface {
	pulumi.Input

	ToCatalogEntityAttributesMapOutput() CatalogEntityAttributesMapOutput
	ToCatalogEntityAttributesMapOutputWithContext(context.Context) CatalogEntityAttributesMapOutput
}

type CatalogEntityAttributesMap map[string]CatalogEntityAttributesInput

func (CatalogEntityAttributesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CatalogEntityAttributes)(nil)).Elem()
}

func (i CatalogEntityAttributesMap) ToCatalogEntityAttributesMapOutput() CatalogEntityAttributesMapOutput {
	return i.ToCatalogEntityAttributesMapOutputWithContext(context.Background())
}

func (i CatalogEntityAttributesMap) ToCatalogEntityAttributesMapOutputWithContext(ctx context.Context) CatalogEntityAttributesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogEntityAttributesMapOutput)
}

type CatalogEntityAttributesOutput struct{ *pulumi.OutputState }

func (CatalogEntityAttributesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogEntityAttributes)(nil)).Elem()
}

func (o CatalogEntityAttributesOutput) ToCatalogEntityAttributesOutput() CatalogEntityAttributesOutput {
	return o
}

func (o CatalogEntityAttributesOutput) ToCatalogEntityAttributesOutputWithContext(ctx context.Context) CatalogEntityAttributesOutput {
	return o
}

// The attributes.
func (o CatalogEntityAttributesOutput) Attributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CatalogEntityAttributes) pulumi.StringMapOutput { return v.Attributes }).(pulumi.StringMapOutput)
}

// The Cluster API Credentials.
func (o CatalogEntityAttributesOutput) Credentials() CatalogEntityAttributesCredentialsPtrOutput {
	return o.ApplyT(func(v *CatalogEntityAttributes) CatalogEntityAttributesCredentialsPtrOutput { return v.Credentials }).(CatalogEntityAttributesCredentialsPtrOutput)
}

// The qualified name of the entity, for example, `${data.confluent_schema_registry_cluster.essentials.id}:.:${confluent_schema.purchase.schema_identifier}`, `${data.confluent_schema_registry_cluster.essentials.id}:${confluent_kafka_cluster.basic.id}:${confluent_kafka_topic.purchase.topic_name}`. Refer to the [Examples of qualified names](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#examples-of-qualified-names) to see the full list of supported values for the `entityName` attribute.
func (o CatalogEntityAttributesOutput) EntityName() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogEntityAttributes) pulumi.StringOutput { return v.EntityName }).(pulumi.StringOutput)
}

// The entity type, for example, `cfEnvironment`, `kafkaLogicalCluster`, `kafkaTopic`, `srSchema`, etc. Refer to the [Entity types](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#entity-types) to see the full list of supported values for the `entityType` attribute.
func (o CatalogEntityAttributesOutput) EntityType() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogEntityAttributes) pulumi.StringOutput { return v.EntityType }).(pulumi.StringOutput)
}

// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
func (o CatalogEntityAttributesOutput) RestEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CatalogEntityAttributes) pulumi.StringPtrOutput { return v.RestEndpoint }).(pulumi.StringPtrOutput)
}

func (o CatalogEntityAttributesOutput) SchemaRegistryCluster() CatalogEntityAttributesSchemaRegistryClusterPtrOutput {
	return o.ApplyT(func(v *CatalogEntityAttributes) CatalogEntityAttributesSchemaRegistryClusterPtrOutput {
		return v.SchemaRegistryCluster
	}).(CatalogEntityAttributesSchemaRegistryClusterPtrOutput)
}

type CatalogEntityAttributesArrayOutput struct{ *pulumi.OutputState }

func (CatalogEntityAttributesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CatalogEntityAttributes)(nil)).Elem()
}

func (o CatalogEntityAttributesArrayOutput) ToCatalogEntityAttributesArrayOutput() CatalogEntityAttributesArrayOutput {
	return o
}

func (o CatalogEntityAttributesArrayOutput) ToCatalogEntityAttributesArrayOutputWithContext(ctx context.Context) CatalogEntityAttributesArrayOutput {
	return o
}

func (o CatalogEntityAttributesArrayOutput) Index(i pulumi.IntInput) CatalogEntityAttributesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CatalogEntityAttributes {
		return vs[0].([]*CatalogEntityAttributes)[vs[1].(int)]
	}).(CatalogEntityAttributesOutput)
}

type CatalogEntityAttributesMapOutput struct{ *pulumi.OutputState }

func (CatalogEntityAttributesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CatalogEntityAttributes)(nil)).Elem()
}

func (o CatalogEntityAttributesMapOutput) ToCatalogEntityAttributesMapOutput() CatalogEntityAttributesMapOutput {
	return o
}

func (o CatalogEntityAttributesMapOutput) ToCatalogEntityAttributesMapOutputWithContext(ctx context.Context) CatalogEntityAttributesMapOutput {
	return o
}

func (o CatalogEntityAttributesMapOutput) MapIndex(k pulumi.StringInput) CatalogEntityAttributesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CatalogEntityAttributes {
		return vs[0].(map[string]*CatalogEntityAttributes)[vs[1].(string)]
	}).(CatalogEntityAttributesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogEntityAttributesInput)(nil)).Elem(), &CatalogEntityAttributes{})
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogEntityAttributesArrayInput)(nil)).Elem(), CatalogEntityAttributesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogEntityAttributesMapInput)(nil)).Elem(), CatalogEntityAttributesMap{})
	pulumi.RegisterOutputType(CatalogEntityAttributesOutput{})
	pulumi.RegisterOutputType(CatalogEntityAttributesArrayOutput{})
	pulumi.RegisterOutputType(CatalogEntityAttributesMapOutput{})
}

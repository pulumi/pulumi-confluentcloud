// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := confluentcloud.NewCustomConnectorPluginVersion(ctx, "source", &confluentcloud.CustomConnectorPluginVersionArgs{
//				Version:           pulumi.String("v1.2.4"),
//				Cloud:             pulumi.String("AWS"),
//				DocumentationLink: pulumi.String("https://www.confluent.io/hub/confluentinc/kafka-connect-datagen"),
//				ConnectorClasses: confluentcloud.CustomConnectorPluginVersionConnectorClassArray{
//					&confluentcloud.CustomConnectorPluginVersionConnectorClassArgs{
//						ConnectorClassName: pulumi.String("io.confluent.kafka.connect.datagen.DatagenConnector"),
//						ConnectorType:      pulumi.String("SOURCE"),
//					},
//				},
//				SensitiveConfigProperties: pulumi.StringArray{},
//				Filename:                  pulumi.String("confluentinc-kafka-connect-datagen-0.6.2.zip"),
//				PluginId:                  pulumi.String("ccp-dev-123"),
//				Environment: &confluentcloud.CustomConnectorPluginVersionEnvironmentArgs{
//					Id: pulumi.String("env-devc0k7oxp"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				plugin,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// You can import a Custom Connector Plugin by using a Custom Connector Plugin ID, in the format `<Environment ID>/<Plugin ID>/<Version ID>`. The following example shows how to import a Custom Connector Plugin:
//
// $ export CONFLUENT_CLOUD_API_KEY="<cloud_api_key>"
//
// $ export CONFLUENT_CLOUD_API_SECRET="<cloud_api_secret>"
//
// ```sh
// $ pulumi import confluentcloud:index/customConnectorPluginVersion:CustomConnectorPluginVersion main env-123/plug-123/ccp-ver123xyz
// ```
//
// !> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
type CustomConnectorPluginVersion struct {
	pulumi.CustomResourceState

	// (Required String) The API Version of the schema version of the plugin version, for example, `ccpm/v1`.
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Cloud provider where the Custom Connector Plugin Version archive is uploaded. Accepted values are: `AWS`, `AZURE`, `GCP`.
	Cloud pulumi.StringOutput `pulumi:"cloud"`
	// The Java class name or alias for the connector. You can get the connector class from the connector documentation provided by the developer.
	ConnectorClasses CustomConnectorPluginVersionConnectorClassArrayOutput `pulumi:"connectorClasses"`
	// The documentation link of the Custom Connector Plugin Version.
	DocumentationLink pulumi.StringPtrOutput `pulumi:"documentationLink"`
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment CustomConnectorPluginVersionEnvironmentOutput `pulumi:"environment"`
	// The path to the Custom Connector Plugin Version archive to be uploaded. Accepted archive formats are: `.jar`, `.zip`.
	Filename pulumi.StringOutput `pulumi:"filename"`
	// (Required String) The kind of the Plugin Version, for example, `CustomConnectPluginVersion`.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// The ID of the plugin created using `Plugin` resource, or through other ways.
	PluginId pulumi.StringOutput `pulumi:"pluginId"`
	// The list of sensitive properties. A sensitive property is a connector configuration property that must be hidden after a user enters the property value when setting up the connector, for example, passwords, keys, and tokens. Refer to the developer documentation and add all required and optional sensitive properties that a user could potentially configure for the connector. Marking a property as sensitive ensures that these fields are handled appropriately within the Confluent infrastructure. This includes masking fields, for example in exception logging, and encrypting field values in the underlying data store. You must identify all sensitive properties. Failure to identify sensitive properties can result in the sensitive property value being stored in plain text rather than in encrypted format. Only add connector-specific sensitive properties. Kafka keys, passwords, and service account information should not be entered here.
	SensitiveConfigProperties pulumi.StringArrayOutput `pulumi:"sensitiveConfigProperties"`
	// The version number of the plugin version we want to create. This must start with the character `v` and follow semantic versioning.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewCustomConnectorPluginVersion registers a new resource with the given unique name, arguments, and options.
func NewCustomConnectorPluginVersion(ctx *pulumi.Context,
	name string, args *CustomConnectorPluginVersionArgs, opts ...pulumi.ResourceOption) (*CustomConnectorPluginVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cloud == nil {
		return nil, errors.New("invalid value for required argument 'Cloud'")
	}
	if args.ConnectorClasses == nil {
		return nil, errors.New("invalid value for required argument 'ConnectorClasses'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.Filename == nil {
		return nil, errors.New("invalid value for required argument 'Filename'")
	}
	if args.PluginId == nil {
		return nil, errors.New("invalid value for required argument 'PluginId'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CustomConnectorPluginVersion
	err := ctx.RegisterResource("confluentcloud:index/customConnectorPluginVersion:CustomConnectorPluginVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCustomConnectorPluginVersion gets an existing CustomConnectorPluginVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCustomConnectorPluginVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CustomConnectorPluginVersionState, opts ...pulumi.ResourceOption) (*CustomConnectorPluginVersion, error) {
	var resource CustomConnectorPluginVersion
	err := ctx.ReadResource("confluentcloud:index/customConnectorPluginVersion:CustomConnectorPluginVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CustomConnectorPluginVersion resources.
type customConnectorPluginVersionState struct {
	// (Required String) The API Version of the schema version of the plugin version, for example, `ccpm/v1`.
	ApiVersion *string `pulumi:"apiVersion"`
	// Cloud provider where the Custom Connector Plugin Version archive is uploaded. Accepted values are: `AWS`, `AZURE`, `GCP`.
	Cloud *string `pulumi:"cloud"`
	// The Java class name or alias for the connector. You can get the connector class from the connector documentation provided by the developer.
	ConnectorClasses []CustomConnectorPluginVersionConnectorClass `pulumi:"connectorClasses"`
	// The documentation link of the Custom Connector Plugin Version.
	DocumentationLink *string `pulumi:"documentationLink"`
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment *CustomConnectorPluginVersionEnvironment `pulumi:"environment"`
	// The path to the Custom Connector Plugin Version archive to be uploaded. Accepted archive formats are: `.jar`, `.zip`.
	Filename *string `pulumi:"filename"`
	// (Required String) The kind of the Plugin Version, for example, `CustomConnectPluginVersion`.
	Kind *string `pulumi:"kind"`
	// The ID of the plugin created using `Plugin` resource, or through other ways.
	PluginId *string `pulumi:"pluginId"`
	// The list of sensitive properties. A sensitive property is a connector configuration property that must be hidden after a user enters the property value when setting up the connector, for example, passwords, keys, and tokens. Refer to the developer documentation and add all required and optional sensitive properties that a user could potentially configure for the connector. Marking a property as sensitive ensures that these fields are handled appropriately within the Confluent infrastructure. This includes masking fields, for example in exception logging, and encrypting field values in the underlying data store. You must identify all sensitive properties. Failure to identify sensitive properties can result in the sensitive property value being stored in plain text rather than in encrypted format. Only add connector-specific sensitive properties. Kafka keys, passwords, and service account information should not be entered here.
	SensitiveConfigProperties []string `pulumi:"sensitiveConfigProperties"`
	// The version number of the plugin version we want to create. This must start with the character `v` and follow semantic versioning.
	Version *string `pulumi:"version"`
}

type CustomConnectorPluginVersionState struct {
	// (Required String) The API Version of the schema version of the plugin version, for example, `ccpm/v1`.
	ApiVersion pulumi.StringPtrInput
	// Cloud provider where the Custom Connector Plugin Version archive is uploaded. Accepted values are: `AWS`, `AZURE`, `GCP`.
	Cloud pulumi.StringPtrInput
	// The Java class name or alias for the connector. You can get the connector class from the connector documentation provided by the developer.
	ConnectorClasses CustomConnectorPluginVersionConnectorClassArrayInput
	// The documentation link of the Custom Connector Plugin Version.
	DocumentationLink pulumi.StringPtrInput
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment CustomConnectorPluginVersionEnvironmentPtrInput
	// The path to the Custom Connector Plugin Version archive to be uploaded. Accepted archive formats are: `.jar`, `.zip`.
	Filename pulumi.StringPtrInput
	// (Required String) The kind of the Plugin Version, for example, `CustomConnectPluginVersion`.
	Kind pulumi.StringPtrInput
	// The ID of the plugin created using `Plugin` resource, or through other ways.
	PluginId pulumi.StringPtrInput
	// The list of sensitive properties. A sensitive property is a connector configuration property that must be hidden after a user enters the property value when setting up the connector, for example, passwords, keys, and tokens. Refer to the developer documentation and add all required and optional sensitive properties that a user could potentially configure for the connector. Marking a property as sensitive ensures that these fields are handled appropriately within the Confluent infrastructure. This includes masking fields, for example in exception logging, and encrypting field values in the underlying data store. You must identify all sensitive properties. Failure to identify sensitive properties can result in the sensitive property value being stored in plain text rather than in encrypted format. Only add connector-specific sensitive properties. Kafka keys, passwords, and service account information should not be entered here.
	SensitiveConfigProperties pulumi.StringArrayInput
	// The version number of the plugin version we want to create. This must start with the character `v` and follow semantic versioning.
	Version pulumi.StringPtrInput
}

func (CustomConnectorPluginVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*customConnectorPluginVersionState)(nil)).Elem()
}

type customConnectorPluginVersionArgs struct {
	// Cloud provider where the Custom Connector Plugin Version archive is uploaded. Accepted values are: `AWS`, `AZURE`, `GCP`.
	Cloud string `pulumi:"cloud"`
	// The Java class name or alias for the connector. You can get the connector class from the connector documentation provided by the developer.
	ConnectorClasses []CustomConnectorPluginVersionConnectorClass `pulumi:"connectorClasses"`
	// The documentation link of the Custom Connector Plugin Version.
	DocumentationLink *string `pulumi:"documentationLink"`
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment CustomConnectorPluginVersionEnvironment `pulumi:"environment"`
	// The path to the Custom Connector Plugin Version archive to be uploaded. Accepted archive formats are: `.jar`, `.zip`.
	Filename string `pulumi:"filename"`
	// The ID of the plugin created using `Plugin` resource, or through other ways.
	PluginId string `pulumi:"pluginId"`
	// The list of sensitive properties. A sensitive property is a connector configuration property that must be hidden after a user enters the property value when setting up the connector, for example, passwords, keys, and tokens. Refer to the developer documentation and add all required and optional sensitive properties that a user could potentially configure for the connector. Marking a property as sensitive ensures that these fields are handled appropriately within the Confluent infrastructure. This includes masking fields, for example in exception logging, and encrypting field values in the underlying data store. You must identify all sensitive properties. Failure to identify sensitive properties can result in the sensitive property value being stored in plain text rather than in encrypted format. Only add connector-specific sensitive properties. Kafka keys, passwords, and service account information should not be entered here.
	SensitiveConfigProperties []string `pulumi:"sensitiveConfigProperties"`
	// The version number of the plugin version we want to create. This must start with the character `v` and follow semantic versioning.
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a CustomConnectorPluginVersion resource.
type CustomConnectorPluginVersionArgs struct {
	// Cloud provider where the Custom Connector Plugin Version archive is uploaded. Accepted values are: `AWS`, `AZURE`, `GCP`.
	Cloud pulumi.StringInput
	// The Java class name or alias for the connector. You can get the connector class from the connector documentation provided by the developer.
	ConnectorClasses CustomConnectorPluginVersionConnectorClassArrayInput
	// The documentation link of the Custom Connector Plugin Version.
	DocumentationLink pulumi.StringPtrInput
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment CustomConnectorPluginVersionEnvironmentInput
	// The path to the Custom Connector Plugin Version archive to be uploaded. Accepted archive formats are: `.jar`, `.zip`.
	Filename pulumi.StringInput
	// The ID of the plugin created using `Plugin` resource, or through other ways.
	PluginId pulumi.StringInput
	// The list of sensitive properties. A sensitive property is a connector configuration property that must be hidden after a user enters the property value when setting up the connector, for example, passwords, keys, and tokens. Refer to the developer documentation and add all required and optional sensitive properties that a user could potentially configure for the connector. Marking a property as sensitive ensures that these fields are handled appropriately within the Confluent infrastructure. This includes masking fields, for example in exception logging, and encrypting field values in the underlying data store. You must identify all sensitive properties. Failure to identify sensitive properties can result in the sensitive property value being stored in plain text rather than in encrypted format. Only add connector-specific sensitive properties. Kafka keys, passwords, and service account information should not be entered here.
	SensitiveConfigProperties pulumi.StringArrayInput
	// The version number of the plugin version we want to create. This must start with the character `v` and follow semantic versioning.
	Version pulumi.StringInput
}

func (CustomConnectorPluginVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*customConnectorPluginVersionArgs)(nil)).Elem()
}

type CustomConnectorPluginVersionInput interface {
	pulumi.Input

	ToCustomConnectorPluginVersionOutput() CustomConnectorPluginVersionOutput
	ToCustomConnectorPluginVersionOutputWithContext(ctx context.Context) CustomConnectorPluginVersionOutput
}

func (*CustomConnectorPluginVersion) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomConnectorPluginVersion)(nil)).Elem()
}

func (i *CustomConnectorPluginVersion) ToCustomConnectorPluginVersionOutput() CustomConnectorPluginVersionOutput {
	return i.ToCustomConnectorPluginVersionOutputWithContext(context.Background())
}

func (i *CustomConnectorPluginVersion) ToCustomConnectorPluginVersionOutputWithContext(ctx context.Context) CustomConnectorPluginVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomConnectorPluginVersionOutput)
}

// CustomConnectorPluginVersionArrayInput is an input type that accepts CustomConnectorPluginVersionArray and CustomConnectorPluginVersionArrayOutput values.
// You can construct a concrete instance of `CustomConnectorPluginVersionArrayInput` via:
//
//	CustomConnectorPluginVersionArray{ CustomConnectorPluginVersionArgs{...} }
type CustomConnectorPluginVersionArrayInput interface {
	pulumi.Input

	ToCustomConnectorPluginVersionArrayOutput() CustomConnectorPluginVersionArrayOutput
	ToCustomConnectorPluginVersionArrayOutputWithContext(context.Context) CustomConnectorPluginVersionArrayOutput
}

type CustomConnectorPluginVersionArray []CustomConnectorPluginVersionInput

func (CustomConnectorPluginVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomConnectorPluginVersion)(nil)).Elem()
}

func (i CustomConnectorPluginVersionArray) ToCustomConnectorPluginVersionArrayOutput() CustomConnectorPluginVersionArrayOutput {
	return i.ToCustomConnectorPluginVersionArrayOutputWithContext(context.Background())
}

func (i CustomConnectorPluginVersionArray) ToCustomConnectorPluginVersionArrayOutputWithContext(ctx context.Context) CustomConnectorPluginVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomConnectorPluginVersionArrayOutput)
}

// CustomConnectorPluginVersionMapInput is an input type that accepts CustomConnectorPluginVersionMap and CustomConnectorPluginVersionMapOutput values.
// You can construct a concrete instance of `CustomConnectorPluginVersionMapInput` via:
//
//	CustomConnectorPluginVersionMap{ "key": CustomConnectorPluginVersionArgs{...} }
type CustomConnectorPluginVersionMapInput interface {
	pulumi.Input

	ToCustomConnectorPluginVersionMapOutput() CustomConnectorPluginVersionMapOutput
	ToCustomConnectorPluginVersionMapOutputWithContext(context.Context) CustomConnectorPluginVersionMapOutput
}

type CustomConnectorPluginVersionMap map[string]CustomConnectorPluginVersionInput

func (CustomConnectorPluginVersionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomConnectorPluginVersion)(nil)).Elem()
}

func (i CustomConnectorPluginVersionMap) ToCustomConnectorPluginVersionMapOutput() CustomConnectorPluginVersionMapOutput {
	return i.ToCustomConnectorPluginVersionMapOutputWithContext(context.Background())
}

func (i CustomConnectorPluginVersionMap) ToCustomConnectorPluginVersionMapOutputWithContext(ctx context.Context) CustomConnectorPluginVersionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomConnectorPluginVersionMapOutput)
}

type CustomConnectorPluginVersionOutput struct{ *pulumi.OutputState }

func (CustomConnectorPluginVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomConnectorPluginVersion)(nil)).Elem()
}

func (o CustomConnectorPluginVersionOutput) ToCustomConnectorPluginVersionOutput() CustomConnectorPluginVersionOutput {
	return o
}

func (o CustomConnectorPluginVersionOutput) ToCustomConnectorPluginVersionOutputWithContext(ctx context.Context) CustomConnectorPluginVersionOutput {
	return o
}

// (Required String) The API Version of the schema version of the plugin version, for example, `ccpm/v1`.
func (o CustomConnectorPluginVersionOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomConnectorPluginVersion) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Cloud provider where the Custom Connector Plugin Version archive is uploaded. Accepted values are: `AWS`, `AZURE`, `GCP`.
func (o CustomConnectorPluginVersionOutput) Cloud() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomConnectorPluginVersion) pulumi.StringOutput { return v.Cloud }).(pulumi.StringOutput)
}

// The Java class name or alias for the connector. You can get the connector class from the connector documentation provided by the developer.
func (o CustomConnectorPluginVersionOutput) ConnectorClasses() CustomConnectorPluginVersionConnectorClassArrayOutput {
	return o.ApplyT(func(v *CustomConnectorPluginVersion) CustomConnectorPluginVersionConnectorClassArrayOutput {
		return v.ConnectorClasses
	}).(CustomConnectorPluginVersionConnectorClassArrayOutput)
}

// The documentation link of the Custom Connector Plugin Version.
func (o CustomConnectorPluginVersionOutput) DocumentationLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomConnectorPluginVersion) pulumi.StringPtrOutput { return v.DocumentationLink }).(pulumi.StringPtrOutput)
}

// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
func (o CustomConnectorPluginVersionOutput) Environment() CustomConnectorPluginVersionEnvironmentOutput {
	return o.ApplyT(func(v *CustomConnectorPluginVersion) CustomConnectorPluginVersionEnvironmentOutput {
		return v.Environment
	}).(CustomConnectorPluginVersionEnvironmentOutput)
}

// The path to the Custom Connector Plugin Version archive to be uploaded. Accepted archive formats are: `.jar`, `.zip`.
func (o CustomConnectorPluginVersionOutput) Filename() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomConnectorPluginVersion) pulumi.StringOutput { return v.Filename }).(pulumi.StringOutput)
}

// (Required String) The kind of the Plugin Version, for example, `CustomConnectPluginVersion`.
func (o CustomConnectorPluginVersionOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomConnectorPluginVersion) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// The ID of the plugin created using `Plugin` resource, or through other ways.
func (o CustomConnectorPluginVersionOutput) PluginId() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomConnectorPluginVersion) pulumi.StringOutput { return v.PluginId }).(pulumi.StringOutput)
}

// The list of sensitive properties. A sensitive property is a connector configuration property that must be hidden after a user enters the property value when setting up the connector, for example, passwords, keys, and tokens. Refer to the developer documentation and add all required and optional sensitive properties that a user could potentially configure for the connector. Marking a property as sensitive ensures that these fields are handled appropriately within the Confluent infrastructure. This includes masking fields, for example in exception logging, and encrypting field values in the underlying data store. You must identify all sensitive properties. Failure to identify sensitive properties can result in the sensitive property value being stored in plain text rather than in encrypted format. Only add connector-specific sensitive properties. Kafka keys, passwords, and service account information should not be entered here.
func (o CustomConnectorPluginVersionOutput) SensitiveConfigProperties() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CustomConnectorPluginVersion) pulumi.StringArrayOutput { return v.SensitiveConfigProperties }).(pulumi.StringArrayOutput)
}

// The version number of the plugin version we want to create. This must start with the character `v` and follow semantic versioning.
func (o CustomConnectorPluginVersionOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomConnectorPluginVersion) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type CustomConnectorPluginVersionArrayOutput struct{ *pulumi.OutputState }

func (CustomConnectorPluginVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomConnectorPluginVersion)(nil)).Elem()
}

func (o CustomConnectorPluginVersionArrayOutput) ToCustomConnectorPluginVersionArrayOutput() CustomConnectorPluginVersionArrayOutput {
	return o
}

func (o CustomConnectorPluginVersionArrayOutput) ToCustomConnectorPluginVersionArrayOutputWithContext(ctx context.Context) CustomConnectorPluginVersionArrayOutput {
	return o
}

func (o CustomConnectorPluginVersionArrayOutput) Index(i pulumi.IntInput) CustomConnectorPluginVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CustomConnectorPluginVersion {
		return vs[0].([]*CustomConnectorPluginVersion)[vs[1].(int)]
	}).(CustomConnectorPluginVersionOutput)
}

type CustomConnectorPluginVersionMapOutput struct{ *pulumi.OutputState }

func (CustomConnectorPluginVersionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomConnectorPluginVersion)(nil)).Elem()
}

func (o CustomConnectorPluginVersionMapOutput) ToCustomConnectorPluginVersionMapOutput() CustomConnectorPluginVersionMapOutput {
	return o
}

func (o CustomConnectorPluginVersionMapOutput) ToCustomConnectorPluginVersionMapOutputWithContext(ctx context.Context) CustomConnectorPluginVersionMapOutput {
	return o
}

func (o CustomConnectorPluginVersionMapOutput) MapIndex(k pulumi.StringInput) CustomConnectorPluginVersionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CustomConnectorPluginVersion {
		return vs[0].(map[string]*CustomConnectorPluginVersion)[vs[1].(string)]
	}).(CustomConnectorPluginVersionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CustomConnectorPluginVersionInput)(nil)).Elem(), &CustomConnectorPluginVersion{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomConnectorPluginVersionArrayInput)(nil)).Elem(), CustomConnectorPluginVersionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomConnectorPluginVersionMapInput)(nil)).Elem(), CustomConnectorPluginVersionMap{})
	pulumi.RegisterOutputType(CustomConnectorPluginVersionOutput{})
	pulumi.RegisterOutputType(CustomConnectorPluginVersionArrayOutput{})
	pulumi.RegisterOutputType(CustomConnectorPluginVersionMapOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
//
// `KafkaAcl` provides a Kafka ACL resource that enables creating and deleting Kafka ACLs on Confluent Cloud.
//
// ## Example Usage
//
// ### Option #1: Manage multiple Kafka clusters in the same Pulumi Stack
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := confluentcloud.NewKafkaAcl(ctx, "describe-basic-cluster", &confluentcloud.KafkaAclArgs{
//				KafkaCluster: &confluentcloud.KafkaAclKafkaClusterArgs{
//					Id: pulumi.Any(basic_cluster.Id),
//				},
//				ResourceType: pulumi.String("CLUSTER"),
//				ResourceName: pulumi.String("kafka-cluster"),
//				PatternType:  pulumi.String("LITERAL"),
//				Principal:    pulumi.String("User:sa-xyz123"),
//				Host:         pulumi.String("*"),
//				Operation:    pulumi.String("DESCRIBE"),
//				Permission:   pulumi.String("ALLOW"),
//				RestEndpoint: pulumi.Any(basic_cluster.RestEndpoint),
//				Credentials: &confluentcloud.KafkaAclCredentialsArgs{
//					Key:    pulumi.Any(app_manager_kafka_api_key.Id),
//					Secret: pulumi.Any(app_manager_kafka_api_key.Secret),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Option #2: Manage a single Kafka cluster in the same Pulumi Stack
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := confluentcloud.NewKafkaAcl(ctx, "describe-basic-cluster", &confluentcloud.KafkaAclArgs{
//				ResourceType: pulumi.String("CLUSTER"),
//				ResourceName: pulumi.String("kafka-cluster"),
//				PatternType:  pulumi.String("LITERAL"),
//				Principal:    pulumi.String("User:sa-xyz123"),
//				Host:         pulumi.String("*"),
//				Operation:    pulumi.String("DESCRIBE"),
//				Permission:   pulumi.String("ALLOW"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Getting Started
//
// The following end-to-end examples might help to get started with `KafkaAcl` resource:
//   - basic-kafka-acls: _Basic_ Kafka cluster with authorization using ACLs
//   - basic-kafka-acls-with-alias: _Basic_ Kafka cluster with authorization using ACLs
//   - standard-kafka-acls: _Standard_ Kafka cluster with authorization using ACLs
//   - dedicated-public-kafka-acls: _Dedicated_ Kafka cluster that is accessible over the public internet with authorization using ACLs
//   - dedicated-privatelink-aws-kafka-acls: _Dedicated_ Kafka cluster on AWS that is accessible via PrivateLink connections with authorization using ACLs
//   - dedicated-privatelink-azure-kafka-acls: _Dedicated_ Kafka cluster on Azure that is accessible via PrivateLink connections with authorization using ACLs
//   - dedicated-private-service-connect-gcp-kafka-acls: _Dedicated_ Kafka cluster on GCP that is accessible via Private Service Connect connections with authorization using ACLs
//   - dedicated-private-service-connect-gcp-kafka-rbac: _Dedicated_ Kafka cluster on GCP that is accessible via Private Service Connect connections with authorization using RBAC
//   - dedicated-vnet-peering-azure-kafka-acls: _Dedicated_ Kafka cluster on Azure that is accessible via VPC Peering connections with authorization using ACLs
//   - dedicated-vpc-peering-aws-kafka-acls: _Dedicated_ Kafka cluster on AWS that is accessible via VPC Peering connections with authorization using ACLs
//   - dedicated-vpc-peering-gcp-kafka-acls: _Dedicated_ Kafka cluster on GCP that is accessible via VPC Peering connections with authorization using ACLs
//   - dedicated-transit-gateway-attachment-aws-kafka-acls: _Dedicated_ Kafka cluster on AWS that is accessible via Transit Gateway Endpoint with authorization using ACLs
//   - dedicated-transit-gateway-attachment-aws-kafka-rbac: _Dedicated_ Kafka cluster on AWS that is accessible via Transit Gateway Endpoint with authorization using RBAC
//   - enterprise-privatelinkattachment-aws-kafka-acls: _Enterprise_ Kafka cluster on AWS that is accessible via PrivateLink connections with authorization using ACLs
//
// ## Other Example Usages
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// https://github.com/confluentinc/terraform-provider-confluent/issues/241
//			_, err := confluentcloud.NewKafkaAcl(ctx, "app-producer-write-on-topic", &confluentcloud.KafkaAclArgs{
//				ResourceType: pulumi.String("TOPIC"),
//				ResourceName: pulumi.Any(orders.TopicName),
//				PatternType:  pulumi.String("LITERAL"),
//				Principal:    pulumi.Sprintf("User:%v", this.Id),
//				Host:         pulumi.String("*"),
//				Operation:    pulumi.String("WRITE"),
//				Permission:   pulumi.String("ALLOW"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// You can import Kafka ACLs by using the Kafka cluster ID and attributes of `confluent_kafka_acl` resource in the format `<Kafka cluster ID>/<Kafka ACL resource type>#<Kafka ACL resource name>#<Kafka ACL pattern type>#<Kafka ACL principal>#<Kafka ACL host>#<Kafka ACL operation>#<Kafka ACL permission>`, for example:
//
// Option #1: Manage multiple Kafka clusters in the same Pulumi Stack
//
// $ export IMPORT_KAFKA_API_KEY="<kafka_api_key>"
//
// $ export IMPORT_KAFKA_API_SECRET="<kafka_api_secret>"
//
// $ export IMPORT_KAFKA_REST_ENDPOINT="<kafka_rest_endpoint>"
//
// ```sh
// $ pulumi import confluentcloud:index/kafkaAcl:KafkaAcl describe-cluster "lkc-12345/CLUSTER#kafka-cluster#LITERAL#User:sa-xyz123#*#DESCRIBE#ALLOW"
// ```
//
// Option #2: Manage a single Kafka cluster in the same Pulumi Stack
//
// $ export CONFLUENT_CLOUD_API_KEY="<cloud_api_key>"
//
// $ export CONFLUENT_CLOUD_API_SECRET="<cloud_api_secret>"
//
// ```sh
// $ pulumi import confluentcloud:index/kafkaAcl:KafkaAcl describe-cluster "lkc-12345/CLUSTER#kafka-cluster#LITERAL#User:sa-xyz123#*#DESCRIBE#ALLOW"
// ```
//
// !> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
type KafkaAcl struct {
	pulumi.CustomResourceState

	// The Cluster API Credentials.
	Credentials KafkaAclCredentialsPtrOutput `pulumi:"credentials"`
	// The host for the ACL.
	Host         pulumi.StringOutput           `pulumi:"host"`
	KafkaCluster KafkaAclKafkaClusterPtrOutput `pulumi:"kafkaCluster"`
	// The operation type for the ACL. Accepted values are: `ALL`, `READ`, `WRITE`, `CREATE`, `DELETE`, `ALTER`, `DESCRIBE`, `CLUSTER_ACTION`, `DESCRIBE_CONFIGS`, `ALTER_CONFIGS`, and `IDEMPOTENT_WRITE`.  See [Authorization using ACLs](https://docs.confluent.io/platform/current/kafka/authorization.html#operations) to find mappings of `(resource_type, operation)` to one or more Kafka APIs or request types.
	Operation pulumi.StringOutput `pulumi:"operation"`
	// The pattern type for the ACL. Accepted values are: `LITERAL` and `PREFIXED`.
	PatternType pulumi.StringOutput `pulumi:"patternType"`
	// The permission for the ACL. Accepted values are: `DENY` and `ALLOW`.
	Permission pulumi.StringOutput `pulumi:"permission"`
	// The principal for the ACL.
	Principal pulumi.StringOutput `pulumi:"principal"`
	// The resource name for the ACL. Must be `kafka-cluster` if `resourceType` equals to `CLUSTER`.
	ResourceName pulumi.StringOutput `pulumi:"resourceName"`
	// The type of the resource. Accepted values are: `TOPIC`, `GROUP`, `CLUSTER`, `TRANSACTIONAL_ID`, `DELEGATION_TOKEN`. See [Authorization using ACLs](https://docs.confluent.io/platform/current/kafka/authorization.html#operations) to find definitions of resource types and mappings of `(resource_type, operation)` to one or more Kafka APIs or request types.
	ResourceType pulumi.StringOutput `pulumi:"resourceType"`
	// The REST endpoint of the Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`.
	RestEndpoint pulumi.StringPtrOutput `pulumi:"restEndpoint"`
}

// NewKafkaAcl registers a new resource with the given unique name, arguments, and options.
func NewKafkaAcl(ctx *pulumi.Context,
	name string, args *KafkaAclArgs, opts ...pulumi.ResourceOption) (*KafkaAcl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Host == nil {
		return nil, errors.New("invalid value for required argument 'Host'")
	}
	if args.Operation == nil {
		return nil, errors.New("invalid value for required argument 'Operation'")
	}
	if args.PatternType == nil {
		return nil, errors.New("invalid value for required argument 'PatternType'")
	}
	if args.Permission == nil {
		return nil, errors.New("invalid value for required argument 'Permission'")
	}
	if args.Principal == nil {
		return nil, errors.New("invalid value for required argument 'Principal'")
	}
	if args.ResourceName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceName'")
	}
	if args.ResourceType == nil {
		return nil, errors.New("invalid value for required argument 'ResourceType'")
	}
	if args.Credentials != nil {
		args.Credentials = pulumi.ToSecret(args.Credentials).(KafkaAclCredentialsPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"credentials",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KafkaAcl
	err := ctx.RegisterResource("confluentcloud:index/kafkaAcl:KafkaAcl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaAcl gets an existing KafkaAcl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaAcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaAclState, opts ...pulumi.ResourceOption) (*KafkaAcl, error) {
	var resource KafkaAcl
	err := ctx.ReadResource("confluentcloud:index/kafkaAcl:KafkaAcl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaAcl resources.
type kafkaAclState struct {
	// The Cluster API Credentials.
	Credentials *KafkaAclCredentials `pulumi:"credentials"`
	// The host for the ACL.
	Host         *string               `pulumi:"host"`
	KafkaCluster *KafkaAclKafkaCluster `pulumi:"kafkaCluster"`
	// The operation type for the ACL. Accepted values are: `ALL`, `READ`, `WRITE`, `CREATE`, `DELETE`, `ALTER`, `DESCRIBE`, `CLUSTER_ACTION`, `DESCRIBE_CONFIGS`, `ALTER_CONFIGS`, and `IDEMPOTENT_WRITE`.  See [Authorization using ACLs](https://docs.confluent.io/platform/current/kafka/authorization.html#operations) to find mappings of `(resource_type, operation)` to one or more Kafka APIs or request types.
	Operation *string `pulumi:"operation"`
	// The pattern type for the ACL. Accepted values are: `LITERAL` and `PREFIXED`.
	PatternType *string `pulumi:"patternType"`
	// The permission for the ACL. Accepted values are: `DENY` and `ALLOW`.
	Permission *string `pulumi:"permission"`
	// The principal for the ACL.
	Principal *string `pulumi:"principal"`
	// The resource name for the ACL. Must be `kafka-cluster` if `resourceType` equals to `CLUSTER`.
	ResourceName *string `pulumi:"resourceName"`
	// The type of the resource. Accepted values are: `TOPIC`, `GROUP`, `CLUSTER`, `TRANSACTIONAL_ID`, `DELEGATION_TOKEN`. See [Authorization using ACLs](https://docs.confluent.io/platform/current/kafka/authorization.html#operations) to find definitions of resource types and mappings of `(resource_type, operation)` to one or more Kafka APIs or request types.
	ResourceType *string `pulumi:"resourceType"`
	// The REST endpoint of the Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`.
	RestEndpoint *string `pulumi:"restEndpoint"`
}

type KafkaAclState struct {
	// The Cluster API Credentials.
	Credentials KafkaAclCredentialsPtrInput
	// The host for the ACL.
	Host         pulumi.StringPtrInput
	KafkaCluster KafkaAclKafkaClusterPtrInput
	// The operation type for the ACL. Accepted values are: `ALL`, `READ`, `WRITE`, `CREATE`, `DELETE`, `ALTER`, `DESCRIBE`, `CLUSTER_ACTION`, `DESCRIBE_CONFIGS`, `ALTER_CONFIGS`, and `IDEMPOTENT_WRITE`.  See [Authorization using ACLs](https://docs.confluent.io/platform/current/kafka/authorization.html#operations) to find mappings of `(resource_type, operation)` to one or more Kafka APIs or request types.
	Operation pulumi.StringPtrInput
	// The pattern type for the ACL. Accepted values are: `LITERAL` and `PREFIXED`.
	PatternType pulumi.StringPtrInput
	// The permission for the ACL. Accepted values are: `DENY` and `ALLOW`.
	Permission pulumi.StringPtrInput
	// The principal for the ACL.
	Principal pulumi.StringPtrInput
	// The resource name for the ACL. Must be `kafka-cluster` if `resourceType` equals to `CLUSTER`.
	ResourceName pulumi.StringPtrInput
	// The type of the resource. Accepted values are: `TOPIC`, `GROUP`, `CLUSTER`, `TRANSACTIONAL_ID`, `DELEGATION_TOKEN`. See [Authorization using ACLs](https://docs.confluent.io/platform/current/kafka/authorization.html#operations) to find definitions of resource types and mappings of `(resource_type, operation)` to one or more Kafka APIs or request types.
	ResourceType pulumi.StringPtrInput
	// The REST endpoint of the Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`.
	RestEndpoint pulumi.StringPtrInput
}

func (KafkaAclState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaAclState)(nil)).Elem()
}

type kafkaAclArgs struct {
	// The Cluster API Credentials.
	Credentials *KafkaAclCredentials `pulumi:"credentials"`
	// The host for the ACL.
	Host         string                `pulumi:"host"`
	KafkaCluster *KafkaAclKafkaCluster `pulumi:"kafkaCluster"`
	// The operation type for the ACL. Accepted values are: `ALL`, `READ`, `WRITE`, `CREATE`, `DELETE`, `ALTER`, `DESCRIBE`, `CLUSTER_ACTION`, `DESCRIBE_CONFIGS`, `ALTER_CONFIGS`, and `IDEMPOTENT_WRITE`.  See [Authorization using ACLs](https://docs.confluent.io/platform/current/kafka/authorization.html#operations) to find mappings of `(resource_type, operation)` to one or more Kafka APIs or request types.
	Operation string `pulumi:"operation"`
	// The pattern type for the ACL. Accepted values are: `LITERAL` and `PREFIXED`.
	PatternType string `pulumi:"patternType"`
	// The permission for the ACL. Accepted values are: `DENY` and `ALLOW`.
	Permission string `pulumi:"permission"`
	// The principal for the ACL.
	Principal string `pulumi:"principal"`
	// The resource name for the ACL. Must be `kafka-cluster` if `resourceType` equals to `CLUSTER`.
	ResourceName string `pulumi:"resourceName"`
	// The type of the resource. Accepted values are: `TOPIC`, `GROUP`, `CLUSTER`, `TRANSACTIONAL_ID`, `DELEGATION_TOKEN`. See [Authorization using ACLs](https://docs.confluent.io/platform/current/kafka/authorization.html#operations) to find definitions of resource types and mappings of `(resource_type, operation)` to one or more Kafka APIs or request types.
	ResourceType string `pulumi:"resourceType"`
	// The REST endpoint of the Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`.
	RestEndpoint *string `pulumi:"restEndpoint"`
}

// The set of arguments for constructing a KafkaAcl resource.
type KafkaAclArgs struct {
	// The Cluster API Credentials.
	Credentials KafkaAclCredentialsPtrInput
	// The host for the ACL.
	Host         pulumi.StringInput
	KafkaCluster KafkaAclKafkaClusterPtrInput
	// The operation type for the ACL. Accepted values are: `ALL`, `READ`, `WRITE`, `CREATE`, `DELETE`, `ALTER`, `DESCRIBE`, `CLUSTER_ACTION`, `DESCRIBE_CONFIGS`, `ALTER_CONFIGS`, and `IDEMPOTENT_WRITE`.  See [Authorization using ACLs](https://docs.confluent.io/platform/current/kafka/authorization.html#operations) to find mappings of `(resource_type, operation)` to one or more Kafka APIs or request types.
	Operation pulumi.StringInput
	// The pattern type for the ACL. Accepted values are: `LITERAL` and `PREFIXED`.
	PatternType pulumi.StringInput
	// The permission for the ACL. Accepted values are: `DENY` and `ALLOW`.
	Permission pulumi.StringInput
	// The principal for the ACL.
	Principal pulumi.StringInput
	// The resource name for the ACL. Must be `kafka-cluster` if `resourceType` equals to `CLUSTER`.
	ResourceName pulumi.StringInput
	// The type of the resource. Accepted values are: `TOPIC`, `GROUP`, `CLUSTER`, `TRANSACTIONAL_ID`, `DELEGATION_TOKEN`. See [Authorization using ACLs](https://docs.confluent.io/platform/current/kafka/authorization.html#operations) to find definitions of resource types and mappings of `(resource_type, operation)` to one or more Kafka APIs or request types.
	ResourceType pulumi.StringInput
	// The REST endpoint of the Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`.
	RestEndpoint pulumi.StringPtrInput
}

func (KafkaAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaAclArgs)(nil)).Elem()
}

type KafkaAclInput interface {
	pulumi.Input

	ToKafkaAclOutput() KafkaAclOutput
	ToKafkaAclOutputWithContext(ctx context.Context) KafkaAclOutput
}

func (*KafkaAcl) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaAcl)(nil)).Elem()
}

func (i *KafkaAcl) ToKafkaAclOutput() KafkaAclOutput {
	return i.ToKafkaAclOutputWithContext(context.Background())
}

func (i *KafkaAcl) ToKafkaAclOutputWithContext(ctx context.Context) KafkaAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaAclOutput)
}

// KafkaAclArrayInput is an input type that accepts KafkaAclArray and KafkaAclArrayOutput values.
// You can construct a concrete instance of `KafkaAclArrayInput` via:
//
//	KafkaAclArray{ KafkaAclArgs{...} }
type KafkaAclArrayInput interface {
	pulumi.Input

	ToKafkaAclArrayOutput() KafkaAclArrayOutput
	ToKafkaAclArrayOutputWithContext(context.Context) KafkaAclArrayOutput
}

type KafkaAclArray []KafkaAclInput

func (KafkaAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaAcl)(nil)).Elem()
}

func (i KafkaAclArray) ToKafkaAclArrayOutput() KafkaAclArrayOutput {
	return i.ToKafkaAclArrayOutputWithContext(context.Background())
}

func (i KafkaAclArray) ToKafkaAclArrayOutputWithContext(ctx context.Context) KafkaAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaAclArrayOutput)
}

// KafkaAclMapInput is an input type that accepts KafkaAclMap and KafkaAclMapOutput values.
// You can construct a concrete instance of `KafkaAclMapInput` via:
//
//	KafkaAclMap{ "key": KafkaAclArgs{...} }
type KafkaAclMapInput interface {
	pulumi.Input

	ToKafkaAclMapOutput() KafkaAclMapOutput
	ToKafkaAclMapOutputWithContext(context.Context) KafkaAclMapOutput
}

type KafkaAclMap map[string]KafkaAclInput

func (KafkaAclMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaAcl)(nil)).Elem()
}

func (i KafkaAclMap) ToKafkaAclMapOutput() KafkaAclMapOutput {
	return i.ToKafkaAclMapOutputWithContext(context.Background())
}

func (i KafkaAclMap) ToKafkaAclMapOutputWithContext(ctx context.Context) KafkaAclMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaAclMapOutput)
}

type KafkaAclOutput struct{ *pulumi.OutputState }

func (KafkaAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaAcl)(nil)).Elem()
}

func (o KafkaAclOutput) ToKafkaAclOutput() KafkaAclOutput {
	return o
}

func (o KafkaAclOutput) ToKafkaAclOutputWithContext(ctx context.Context) KafkaAclOutput {
	return o
}

// The Cluster API Credentials.
func (o KafkaAclOutput) Credentials() KafkaAclCredentialsPtrOutput {
	return o.ApplyT(func(v *KafkaAcl) KafkaAclCredentialsPtrOutput { return v.Credentials }).(KafkaAclCredentialsPtrOutput)
}

// The host for the ACL.
func (o KafkaAclOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaAcl) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

func (o KafkaAclOutput) KafkaCluster() KafkaAclKafkaClusterPtrOutput {
	return o.ApplyT(func(v *KafkaAcl) KafkaAclKafkaClusterPtrOutput { return v.KafkaCluster }).(KafkaAclKafkaClusterPtrOutput)
}

// The operation type for the ACL. Accepted values are: `ALL`, `READ`, `WRITE`, `CREATE`, `DELETE`, `ALTER`, `DESCRIBE`, `CLUSTER_ACTION`, `DESCRIBE_CONFIGS`, `ALTER_CONFIGS`, and `IDEMPOTENT_WRITE`.  See [Authorization using ACLs](https://docs.confluent.io/platform/current/kafka/authorization.html#operations) to find mappings of `(resource_type, operation)` to one or more Kafka APIs or request types.
func (o KafkaAclOutput) Operation() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaAcl) pulumi.StringOutput { return v.Operation }).(pulumi.StringOutput)
}

// The pattern type for the ACL. Accepted values are: `LITERAL` and `PREFIXED`.
func (o KafkaAclOutput) PatternType() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaAcl) pulumi.StringOutput { return v.PatternType }).(pulumi.StringOutput)
}

// The permission for the ACL. Accepted values are: `DENY` and `ALLOW`.
func (o KafkaAclOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaAcl) pulumi.StringOutput { return v.Permission }).(pulumi.StringOutput)
}

// The principal for the ACL.
func (o KafkaAclOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaAcl) pulumi.StringOutput { return v.Principal }).(pulumi.StringOutput)
}

// The resource name for the ACL. Must be `kafka-cluster` if `resourceType` equals to `CLUSTER`.
func (o KafkaAclOutput) ResourceName() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaAcl) pulumi.StringOutput { return v.ResourceName }).(pulumi.StringOutput)
}

// The type of the resource. Accepted values are: `TOPIC`, `GROUP`, `CLUSTER`, `TRANSACTIONAL_ID`, `DELEGATION_TOKEN`. See [Authorization using ACLs](https://docs.confluent.io/platform/current/kafka/authorization.html#operations) to find definitions of resource types and mappings of `(resource_type, operation)` to one or more Kafka APIs or request types.
func (o KafkaAclOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaAcl) pulumi.StringOutput { return v.ResourceType }).(pulumi.StringOutput)
}

// The REST endpoint of the Kafka cluster, for example, `https://pkc-00000.us-central1.gcp.confluent.cloud:443`.
func (o KafkaAclOutput) RestEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaAcl) pulumi.StringPtrOutput { return v.RestEndpoint }).(pulumi.StringPtrOutput)
}

type KafkaAclArrayOutput struct{ *pulumi.OutputState }

func (KafkaAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaAcl)(nil)).Elem()
}

func (o KafkaAclArrayOutput) ToKafkaAclArrayOutput() KafkaAclArrayOutput {
	return o
}

func (o KafkaAclArrayOutput) ToKafkaAclArrayOutputWithContext(ctx context.Context) KafkaAclArrayOutput {
	return o
}

func (o KafkaAclArrayOutput) Index(i pulumi.IntInput) KafkaAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaAcl {
		return vs[0].([]*KafkaAcl)[vs[1].(int)]
	}).(KafkaAclOutput)
}

type KafkaAclMapOutput struct{ *pulumi.OutputState }

func (KafkaAclMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaAcl)(nil)).Elem()
}

func (o KafkaAclMapOutput) ToKafkaAclMapOutput() KafkaAclMapOutput {
	return o
}

func (o KafkaAclMapOutput) ToKafkaAclMapOutputWithContext(ctx context.Context) KafkaAclMapOutput {
	return o
}

func (o KafkaAclMapOutput) MapIndex(k pulumi.StringInput) KafkaAclOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaAcl {
		return vs[0].(map[string]*KafkaAcl)[vs[1].(string)]
	}).(KafkaAclOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaAclInput)(nil)).Elem(), &KafkaAcl{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaAclArrayInput)(nil)).Elem(), KafkaAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaAclMapInput)(nil)).Elem(), KafkaAclMap{})
	pulumi.RegisterOutputType(KafkaAclOutput{})
	pulumi.RegisterOutputType(KafkaAclArrayOutput{})
	pulumi.RegisterOutputType(KafkaAclMapOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The provider type for the confluent package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	// The Confluent Cloud API Key.
	CloudApiKey pulumi.StringPtrOutput `pulumi:"cloudApiKey"`
	// The Confluent Cloud API Secret.
	CloudApiSecret pulumi.StringPtrOutput `pulumi:"cloudApiSecret"`
	// The base endpoint of Confluent Cloud API.
	Endpoint pulumi.StringPtrOutput `pulumi:"endpoint"`
	// The Kafka Cluster API Key.
	KafkaApiKey pulumi.StringPtrOutput `pulumi:"kafkaApiKey"`
	// The Kafka Cluster API Secret.
	KafkaApiSecret pulumi.StringPtrOutput `pulumi:"kafkaApiSecret"`
	// The Kafka Cluster REST Endpoint.
	KafkaRestEndpoint pulumi.StringPtrOutput `pulumi:"kafkaRestEndpoint"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		args = &ProviderArgs{}
	}

	if args.CloudApiKey != nil {
		args.CloudApiKey = pulumi.ToSecret(args.CloudApiKey).(pulumi.StringPtrOutput)
	}
	if args.CloudApiSecret != nil {
		args.CloudApiSecret = pulumi.ToSecret(args.CloudApiSecret).(pulumi.StringPtrOutput)
	}
	if args.KafkaApiKey != nil {
		args.KafkaApiKey = pulumi.ToSecret(args.KafkaApiKey).(pulumi.StringPtrOutput)
	}
	if args.KafkaApiSecret != nil {
		args.KafkaApiSecret = pulumi.ToSecret(args.KafkaApiSecret).(pulumi.StringPtrOutput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"cloudApiKey",
		"cloudApiSecret",
		"kafkaApiKey",
		"kafkaApiSecret",
	})
	opts = append(opts, secrets)
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:confluentcloud", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// The Confluent Cloud API Key.
	CloudApiKey *string `pulumi:"cloudApiKey"`
	// The Confluent Cloud API Secret.
	CloudApiSecret *string `pulumi:"cloudApiSecret"`
	// The base endpoint of Confluent Cloud API.
	Endpoint *string `pulumi:"endpoint"`
	// The Kafka Cluster API Key.
	KafkaApiKey *string `pulumi:"kafkaApiKey"`
	// The Kafka Cluster API Secret.
	KafkaApiSecret *string `pulumi:"kafkaApiSecret"`
	// The Kafka Cluster REST Endpoint.
	KafkaRestEndpoint *string `pulumi:"kafkaRestEndpoint"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// The Confluent Cloud API Key.
	CloudApiKey pulumi.StringPtrInput
	// The Confluent Cloud API Secret.
	CloudApiSecret pulumi.StringPtrInput
	// The base endpoint of Confluent Cloud API.
	Endpoint pulumi.StringPtrInput
	// The Kafka Cluster API Key.
	KafkaApiKey pulumi.StringPtrInput
	// The Kafka Cluster API Secret.
	KafkaApiSecret pulumi.StringPtrInput
	// The Kafka Cluster REST Endpoint.
	KafkaRestEndpoint pulumi.StringPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

// The Confluent Cloud API Key.
func (o ProviderOutput) CloudApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.CloudApiKey }).(pulumi.StringPtrOutput)
}

// The Confluent Cloud API Secret.
func (o ProviderOutput) CloudApiSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.CloudApiSecret }).(pulumi.StringPtrOutput)
}

// The base endpoint of Confluent Cloud API.
func (o ProviderOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// The Kafka Cluster API Key.
func (o ProviderOutput) KafkaApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.KafkaApiKey }).(pulumi.StringPtrOutput)
}

// The Kafka Cluster API Secret.
func (o ProviderOutput) KafkaApiSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.KafkaApiSecret }).(pulumi.StringPtrOutput)
}

// The Kafka Cluster REST Endpoint.
func (o ProviderOutput) KafkaRestEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.KafkaRestEndpoint }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
}

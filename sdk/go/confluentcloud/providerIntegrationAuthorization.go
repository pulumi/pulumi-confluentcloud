// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// You can import a Provider Integration Authorization by using Environment ID and Provider Integration ID, in the format `<Environment ID>/<Provider Integration ID>`. The following example shows how to import a Provider Integration Authorization:
//
// $ export CONFLUENT_CLOUD_API_KEY="<cloud_api_key>"
//
// $ export CONFLUENT_CLOUD_API_SECRET="<cloud_api_secret>"
//
// ```sh
// $ pulumi import confluentcloud:index/providerIntegrationAuthorization:ProviderIntegrationAuthorization main env-abc123/cspi-4xg0q
// ```
//
// !> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
type ProviderIntegrationAuthorization struct {
	pulumi.CustomResourceState

	// (Optional Configuration Block) Azure-specific configuration details. It supports the following:
	Azure ProviderIntegrationAuthorizationAzurePtrOutput `pulumi:"azure"`
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment ProviderIntegrationAuthorizationEnvironmentOutput `pulumi:"environment"`
	// (Optional Configuration Block) GCP-specific configuration details. It supports the following:
	Gcp ProviderIntegrationAuthorizationGcpPtrOutput `pulumi:"gcp"`
	// The ID of the provider integration to authorize.
	ProviderIntegrationId pulumi.StringOutput `pulumi:"providerIntegrationId"`
}

// NewProviderIntegrationAuthorization registers a new resource with the given unique name, arguments, and options.
func NewProviderIntegrationAuthorization(ctx *pulumi.Context,
	name string, args *ProviderIntegrationAuthorizationArgs, opts ...pulumi.ResourceOption) (*ProviderIntegrationAuthorization, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.ProviderIntegrationId == nil {
		return nil, errors.New("invalid value for required argument 'ProviderIntegrationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProviderIntegrationAuthorization
	err := ctx.RegisterResource("confluentcloud:index/providerIntegrationAuthorization:ProviderIntegrationAuthorization", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProviderIntegrationAuthorization gets an existing ProviderIntegrationAuthorization resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProviderIntegrationAuthorization(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProviderIntegrationAuthorizationState, opts ...pulumi.ResourceOption) (*ProviderIntegrationAuthorization, error) {
	var resource ProviderIntegrationAuthorization
	err := ctx.ReadResource("confluentcloud:index/providerIntegrationAuthorization:ProviderIntegrationAuthorization", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProviderIntegrationAuthorization resources.
type providerIntegrationAuthorizationState struct {
	// (Optional Configuration Block) Azure-specific configuration details. It supports the following:
	Azure *ProviderIntegrationAuthorizationAzure `pulumi:"azure"`
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment *ProviderIntegrationAuthorizationEnvironment `pulumi:"environment"`
	// (Optional Configuration Block) GCP-specific configuration details. It supports the following:
	Gcp *ProviderIntegrationAuthorizationGcp `pulumi:"gcp"`
	// The ID of the provider integration to authorize.
	ProviderIntegrationId *string `pulumi:"providerIntegrationId"`
}

type ProviderIntegrationAuthorizationState struct {
	// (Optional Configuration Block) Azure-specific configuration details. It supports the following:
	Azure ProviderIntegrationAuthorizationAzurePtrInput
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment ProviderIntegrationAuthorizationEnvironmentPtrInput
	// (Optional Configuration Block) GCP-specific configuration details. It supports the following:
	Gcp ProviderIntegrationAuthorizationGcpPtrInput
	// The ID of the provider integration to authorize.
	ProviderIntegrationId pulumi.StringPtrInput
}

func (ProviderIntegrationAuthorizationState) ElementType() reflect.Type {
	return reflect.TypeOf((*providerIntegrationAuthorizationState)(nil)).Elem()
}

type providerIntegrationAuthorizationArgs struct {
	// (Optional Configuration Block) Azure-specific configuration details. It supports the following:
	Azure *ProviderIntegrationAuthorizationAzure `pulumi:"azure"`
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment ProviderIntegrationAuthorizationEnvironment `pulumi:"environment"`
	// (Optional Configuration Block) GCP-specific configuration details. It supports the following:
	Gcp *ProviderIntegrationAuthorizationGcp `pulumi:"gcp"`
	// The ID of the provider integration to authorize.
	ProviderIntegrationId string `pulumi:"providerIntegrationId"`
}

// The set of arguments for constructing a ProviderIntegrationAuthorization resource.
type ProviderIntegrationAuthorizationArgs struct {
	// (Optional Configuration Block) Azure-specific configuration details. It supports the following:
	Azure ProviderIntegrationAuthorizationAzurePtrInput
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment ProviderIntegrationAuthorizationEnvironmentInput
	// (Optional Configuration Block) GCP-specific configuration details. It supports the following:
	Gcp ProviderIntegrationAuthorizationGcpPtrInput
	// The ID of the provider integration to authorize.
	ProviderIntegrationId pulumi.StringInput
}

func (ProviderIntegrationAuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerIntegrationAuthorizationArgs)(nil)).Elem()
}

type ProviderIntegrationAuthorizationInput interface {
	pulumi.Input

	ToProviderIntegrationAuthorizationOutput() ProviderIntegrationAuthorizationOutput
	ToProviderIntegrationAuthorizationOutputWithContext(ctx context.Context) ProviderIntegrationAuthorizationOutput
}

func (*ProviderIntegrationAuthorization) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderIntegrationAuthorization)(nil)).Elem()
}

func (i *ProviderIntegrationAuthorization) ToProviderIntegrationAuthorizationOutput() ProviderIntegrationAuthorizationOutput {
	return i.ToProviderIntegrationAuthorizationOutputWithContext(context.Background())
}

func (i *ProviderIntegrationAuthorization) ToProviderIntegrationAuthorizationOutputWithContext(ctx context.Context) ProviderIntegrationAuthorizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderIntegrationAuthorizationOutput)
}

// ProviderIntegrationAuthorizationArrayInput is an input type that accepts ProviderIntegrationAuthorizationArray and ProviderIntegrationAuthorizationArrayOutput values.
// You can construct a concrete instance of `ProviderIntegrationAuthorizationArrayInput` via:
//
//	ProviderIntegrationAuthorizationArray{ ProviderIntegrationAuthorizationArgs{...} }
type ProviderIntegrationAuthorizationArrayInput interface {
	pulumi.Input

	ToProviderIntegrationAuthorizationArrayOutput() ProviderIntegrationAuthorizationArrayOutput
	ToProviderIntegrationAuthorizationArrayOutputWithContext(context.Context) ProviderIntegrationAuthorizationArrayOutput
}

type ProviderIntegrationAuthorizationArray []ProviderIntegrationAuthorizationInput

func (ProviderIntegrationAuthorizationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProviderIntegrationAuthorization)(nil)).Elem()
}

func (i ProviderIntegrationAuthorizationArray) ToProviderIntegrationAuthorizationArrayOutput() ProviderIntegrationAuthorizationArrayOutput {
	return i.ToProviderIntegrationAuthorizationArrayOutputWithContext(context.Background())
}

func (i ProviderIntegrationAuthorizationArray) ToProviderIntegrationAuthorizationArrayOutputWithContext(ctx context.Context) ProviderIntegrationAuthorizationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderIntegrationAuthorizationArrayOutput)
}

// ProviderIntegrationAuthorizationMapInput is an input type that accepts ProviderIntegrationAuthorizationMap and ProviderIntegrationAuthorizationMapOutput values.
// You can construct a concrete instance of `ProviderIntegrationAuthorizationMapInput` via:
//
//	ProviderIntegrationAuthorizationMap{ "key": ProviderIntegrationAuthorizationArgs{...} }
type ProviderIntegrationAuthorizationMapInput interface {
	pulumi.Input

	ToProviderIntegrationAuthorizationMapOutput() ProviderIntegrationAuthorizationMapOutput
	ToProviderIntegrationAuthorizationMapOutputWithContext(context.Context) ProviderIntegrationAuthorizationMapOutput
}

type ProviderIntegrationAuthorizationMap map[string]ProviderIntegrationAuthorizationInput

func (ProviderIntegrationAuthorizationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProviderIntegrationAuthorization)(nil)).Elem()
}

func (i ProviderIntegrationAuthorizationMap) ToProviderIntegrationAuthorizationMapOutput() ProviderIntegrationAuthorizationMapOutput {
	return i.ToProviderIntegrationAuthorizationMapOutputWithContext(context.Background())
}

func (i ProviderIntegrationAuthorizationMap) ToProviderIntegrationAuthorizationMapOutputWithContext(ctx context.Context) ProviderIntegrationAuthorizationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderIntegrationAuthorizationMapOutput)
}

type ProviderIntegrationAuthorizationOutput struct{ *pulumi.OutputState }

func (ProviderIntegrationAuthorizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderIntegrationAuthorization)(nil)).Elem()
}

func (o ProviderIntegrationAuthorizationOutput) ToProviderIntegrationAuthorizationOutput() ProviderIntegrationAuthorizationOutput {
	return o
}

func (o ProviderIntegrationAuthorizationOutput) ToProviderIntegrationAuthorizationOutputWithContext(ctx context.Context) ProviderIntegrationAuthorizationOutput {
	return o
}

// (Optional Configuration Block) Azure-specific configuration details. It supports the following:
func (o ProviderIntegrationAuthorizationOutput) Azure() ProviderIntegrationAuthorizationAzurePtrOutput {
	return o.ApplyT(func(v *ProviderIntegrationAuthorization) ProviderIntegrationAuthorizationAzurePtrOutput {
		return v.Azure
	}).(ProviderIntegrationAuthorizationAzurePtrOutput)
}

// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
func (o ProviderIntegrationAuthorizationOutput) Environment() ProviderIntegrationAuthorizationEnvironmentOutput {
	return o.ApplyT(func(v *ProviderIntegrationAuthorization) ProviderIntegrationAuthorizationEnvironmentOutput {
		return v.Environment
	}).(ProviderIntegrationAuthorizationEnvironmentOutput)
}

// (Optional Configuration Block) GCP-specific configuration details. It supports the following:
func (o ProviderIntegrationAuthorizationOutput) Gcp() ProviderIntegrationAuthorizationGcpPtrOutput {
	return o.ApplyT(func(v *ProviderIntegrationAuthorization) ProviderIntegrationAuthorizationGcpPtrOutput { return v.Gcp }).(ProviderIntegrationAuthorizationGcpPtrOutput)
}

// The ID of the provider integration to authorize.
func (o ProviderIntegrationAuthorizationOutput) ProviderIntegrationId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProviderIntegrationAuthorization) pulumi.StringOutput { return v.ProviderIntegrationId }).(pulumi.StringOutput)
}

type ProviderIntegrationAuthorizationArrayOutput struct{ *pulumi.OutputState }

func (ProviderIntegrationAuthorizationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProviderIntegrationAuthorization)(nil)).Elem()
}

func (o ProviderIntegrationAuthorizationArrayOutput) ToProviderIntegrationAuthorizationArrayOutput() ProviderIntegrationAuthorizationArrayOutput {
	return o
}

func (o ProviderIntegrationAuthorizationArrayOutput) ToProviderIntegrationAuthorizationArrayOutputWithContext(ctx context.Context) ProviderIntegrationAuthorizationArrayOutput {
	return o
}

func (o ProviderIntegrationAuthorizationArrayOutput) Index(i pulumi.IntInput) ProviderIntegrationAuthorizationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProviderIntegrationAuthorization {
		return vs[0].([]*ProviderIntegrationAuthorization)[vs[1].(int)]
	}).(ProviderIntegrationAuthorizationOutput)
}

type ProviderIntegrationAuthorizationMapOutput struct{ *pulumi.OutputState }

func (ProviderIntegrationAuthorizationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProviderIntegrationAuthorization)(nil)).Elem()
}

func (o ProviderIntegrationAuthorizationMapOutput) ToProviderIntegrationAuthorizationMapOutput() ProviderIntegrationAuthorizationMapOutput {
	return o
}

func (o ProviderIntegrationAuthorizationMapOutput) ToProviderIntegrationAuthorizationMapOutputWithContext(ctx context.Context) ProviderIntegrationAuthorizationMapOutput {
	return o
}

func (o ProviderIntegrationAuthorizationMapOutput) MapIndex(k pulumi.StringInput) ProviderIntegrationAuthorizationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProviderIntegrationAuthorization {
		return vs[0].(map[string]*ProviderIntegrationAuthorization)[vs[1].(string)]
	}).(ProviderIntegrationAuthorizationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderIntegrationAuthorizationInput)(nil)).Elem(), &ProviderIntegrationAuthorization{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderIntegrationAuthorizationArrayInput)(nil)).Elem(), ProviderIntegrationAuthorizationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderIntegrationAuthorizationMapInput)(nil)).Elem(), ProviderIntegrationAuthorizationMap{})
	pulumi.RegisterOutputType(ProviderIntegrationAuthorizationOutput{})
	pulumi.RegisterOutputType(ProviderIntegrationAuthorizationArrayOutput{})
	pulumi.RegisterOutputType(ProviderIntegrationAuthorizationMapOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := confluentcloud.NewConnectArtifact(ctx, "example", &confluentcloud.ConnectArtifactArgs{
//				DisplayName: pulumi.String("example-connect-artifact"),
//				Cloud:       pulumi.String("AWS"),
//				Environment: &confluentcloud.ConnectArtifactEnvironmentArgs{
//					Id: pulumi.String("env-123456"),
//				},
//				ContentFormat: pulumi.String("JAR"),
//				ArtifactFile:  pulumi.String("path/to/your/artifact.jar"),
//				Description:   pulumi.String("Example Connect Artifact"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// You can import a Connect Artifact by using Environment ID, Cloud, and Connect Artifact ID in the format `<Environment ID>/<cloud>/<Connect Artifact ID>`, for example:
//
// $ export CONFLUENT_CLOUD_API_KEY="<cloud_api_key>"
//
// $ export CONFLUENT_CLOUD_API_SECRET="<cloud_api_secret>"
//
// ```sh
// $ pulumi import confluentcloud:index/connectArtifact:ConnectArtifact example env-123456/AWS/ca-123456
// ```
//
// !> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
type ConnectArtifact struct {
	pulumi.CustomResourceState

	// The artifact file for Connect Artifact in `JAR` or `ZIP` format. This can be relative or absolute path
	ArtifactFile pulumi.StringPtrOutput `pulumi:"artifactFile"`
	// Cloud provider where the Connect Artifact archive is uploaded.
	Cloud pulumi.StringOutput `pulumi:"cloud"`
	// Archive format of the Connect Artifact. Supported formats are `JAR` and `ZIP`.
	ContentFormat pulumi.StringOutput `pulumi:"contentFormat"`
	// Description of the Connect Artifact.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The unique name of the Connect Artifact per cloud, environment scope.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment ConnectArtifactEnvironmentOutput `pulumi:"environment"`
	// Status of the Connect Artifact.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewConnectArtifact registers a new resource with the given unique name, arguments, and options.
func NewConnectArtifact(ctx *pulumi.Context,
	name string, args *ConnectArtifactArgs, opts ...pulumi.ResourceOption) (*ConnectArtifact, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cloud == nil {
		return nil, errors.New("invalid value for required argument 'Cloud'")
	}
	if args.ContentFormat == nil {
		return nil, errors.New("invalid value for required argument 'ContentFormat'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConnectArtifact
	err := ctx.RegisterResource("confluentcloud:index/connectArtifact:ConnectArtifact", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectArtifact gets an existing ConnectArtifact resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectArtifact(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectArtifactState, opts ...pulumi.ResourceOption) (*ConnectArtifact, error) {
	var resource ConnectArtifact
	err := ctx.ReadResource("confluentcloud:index/connectArtifact:ConnectArtifact", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectArtifact resources.
type connectArtifactState struct {
	// The artifact file for Connect Artifact in `JAR` or `ZIP` format. This can be relative or absolute path
	ArtifactFile *string `pulumi:"artifactFile"`
	// Cloud provider where the Connect Artifact archive is uploaded.
	Cloud *string `pulumi:"cloud"`
	// Archive format of the Connect Artifact. Supported formats are `JAR` and `ZIP`.
	ContentFormat *string `pulumi:"contentFormat"`
	// Description of the Connect Artifact.
	Description *string `pulumi:"description"`
	// The unique name of the Connect Artifact per cloud, environment scope.
	DisplayName *string `pulumi:"displayName"`
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment *ConnectArtifactEnvironment `pulumi:"environment"`
	// Status of the Connect Artifact.
	Status *string `pulumi:"status"`
}

type ConnectArtifactState struct {
	// The artifact file for Connect Artifact in `JAR` or `ZIP` format. This can be relative or absolute path
	ArtifactFile pulumi.StringPtrInput
	// Cloud provider where the Connect Artifact archive is uploaded.
	Cloud pulumi.StringPtrInput
	// Archive format of the Connect Artifact. Supported formats are `JAR` and `ZIP`.
	ContentFormat pulumi.StringPtrInput
	// Description of the Connect Artifact.
	Description pulumi.StringPtrInput
	// The unique name of the Connect Artifact per cloud, environment scope.
	DisplayName pulumi.StringPtrInput
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment ConnectArtifactEnvironmentPtrInput
	// Status of the Connect Artifact.
	Status pulumi.StringPtrInput
}

func (ConnectArtifactState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectArtifactState)(nil)).Elem()
}

type connectArtifactArgs struct {
	// The artifact file for Connect Artifact in `JAR` or `ZIP` format. This can be relative or absolute path
	ArtifactFile *string `pulumi:"artifactFile"`
	// Cloud provider where the Connect Artifact archive is uploaded.
	Cloud string `pulumi:"cloud"`
	// Archive format of the Connect Artifact. Supported formats are `JAR` and `ZIP`.
	ContentFormat string `pulumi:"contentFormat"`
	// Description of the Connect Artifact.
	Description *string `pulumi:"description"`
	// The unique name of the Connect Artifact per cloud, environment scope.
	DisplayName string `pulumi:"displayName"`
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment ConnectArtifactEnvironment `pulumi:"environment"`
}

// The set of arguments for constructing a ConnectArtifact resource.
type ConnectArtifactArgs struct {
	// The artifact file for Connect Artifact in `JAR` or `ZIP` format. This can be relative or absolute path
	ArtifactFile pulumi.StringPtrInput
	// Cloud provider where the Connect Artifact archive is uploaded.
	Cloud pulumi.StringInput
	// Archive format of the Connect Artifact. Supported formats are `JAR` and `ZIP`.
	ContentFormat pulumi.StringInput
	// Description of the Connect Artifact.
	Description pulumi.StringPtrInput
	// The unique name of the Connect Artifact per cloud, environment scope.
	DisplayName pulumi.StringInput
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment ConnectArtifactEnvironmentInput
}

func (ConnectArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectArtifactArgs)(nil)).Elem()
}

type ConnectArtifactInput interface {
	pulumi.Input

	ToConnectArtifactOutput() ConnectArtifactOutput
	ToConnectArtifactOutputWithContext(ctx context.Context) ConnectArtifactOutput
}

func (*ConnectArtifact) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectArtifact)(nil)).Elem()
}

func (i *ConnectArtifact) ToConnectArtifactOutput() ConnectArtifactOutput {
	return i.ToConnectArtifactOutputWithContext(context.Background())
}

func (i *ConnectArtifact) ToConnectArtifactOutputWithContext(ctx context.Context) ConnectArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectArtifactOutput)
}

// ConnectArtifactArrayInput is an input type that accepts ConnectArtifactArray and ConnectArtifactArrayOutput values.
// You can construct a concrete instance of `ConnectArtifactArrayInput` via:
//
//	ConnectArtifactArray{ ConnectArtifactArgs{...} }
type ConnectArtifactArrayInput interface {
	pulumi.Input

	ToConnectArtifactArrayOutput() ConnectArtifactArrayOutput
	ToConnectArtifactArrayOutputWithContext(context.Context) ConnectArtifactArrayOutput
}

type ConnectArtifactArray []ConnectArtifactInput

func (ConnectArtifactArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectArtifact)(nil)).Elem()
}

func (i ConnectArtifactArray) ToConnectArtifactArrayOutput() ConnectArtifactArrayOutput {
	return i.ToConnectArtifactArrayOutputWithContext(context.Background())
}

func (i ConnectArtifactArray) ToConnectArtifactArrayOutputWithContext(ctx context.Context) ConnectArtifactArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectArtifactArrayOutput)
}

// ConnectArtifactMapInput is an input type that accepts ConnectArtifactMap and ConnectArtifactMapOutput values.
// You can construct a concrete instance of `ConnectArtifactMapInput` via:
//
//	ConnectArtifactMap{ "key": ConnectArtifactArgs{...} }
type ConnectArtifactMapInput interface {
	pulumi.Input

	ToConnectArtifactMapOutput() ConnectArtifactMapOutput
	ToConnectArtifactMapOutputWithContext(context.Context) ConnectArtifactMapOutput
}

type ConnectArtifactMap map[string]ConnectArtifactInput

func (ConnectArtifactMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectArtifact)(nil)).Elem()
}

func (i ConnectArtifactMap) ToConnectArtifactMapOutput() ConnectArtifactMapOutput {
	return i.ToConnectArtifactMapOutputWithContext(context.Background())
}

func (i ConnectArtifactMap) ToConnectArtifactMapOutputWithContext(ctx context.Context) ConnectArtifactMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectArtifactMapOutput)
}

type ConnectArtifactOutput struct{ *pulumi.OutputState }

func (ConnectArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectArtifact)(nil)).Elem()
}

func (o ConnectArtifactOutput) ToConnectArtifactOutput() ConnectArtifactOutput {
	return o
}

func (o ConnectArtifactOutput) ToConnectArtifactOutputWithContext(ctx context.Context) ConnectArtifactOutput {
	return o
}

// The artifact file for Connect Artifact in `JAR` or `ZIP` format. This can be relative or absolute path
func (o ConnectArtifactOutput) ArtifactFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectArtifact) pulumi.StringPtrOutput { return v.ArtifactFile }).(pulumi.StringPtrOutput)
}

// Cloud provider where the Connect Artifact archive is uploaded.
func (o ConnectArtifactOutput) Cloud() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectArtifact) pulumi.StringOutput { return v.Cloud }).(pulumi.StringOutput)
}

// Archive format of the Connect Artifact. Supported formats are `JAR` and `ZIP`.
func (o ConnectArtifactOutput) ContentFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectArtifact) pulumi.StringOutput { return v.ContentFormat }).(pulumi.StringOutput)
}

// Description of the Connect Artifact.
func (o ConnectArtifactOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectArtifact) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The unique name of the Connect Artifact per cloud, environment scope.
func (o ConnectArtifactOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectArtifact) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
func (o ConnectArtifactOutput) Environment() ConnectArtifactEnvironmentOutput {
	return o.ApplyT(func(v *ConnectArtifact) ConnectArtifactEnvironmentOutput { return v.Environment }).(ConnectArtifactEnvironmentOutput)
}

// Status of the Connect Artifact.
func (o ConnectArtifactOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectArtifact) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type ConnectArtifactArrayOutput struct{ *pulumi.OutputState }

func (ConnectArtifactArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectArtifact)(nil)).Elem()
}

func (o ConnectArtifactArrayOutput) ToConnectArtifactArrayOutput() ConnectArtifactArrayOutput {
	return o
}

func (o ConnectArtifactArrayOutput) ToConnectArtifactArrayOutputWithContext(ctx context.Context) ConnectArtifactArrayOutput {
	return o
}

func (o ConnectArtifactArrayOutput) Index(i pulumi.IntInput) ConnectArtifactOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectArtifact {
		return vs[0].([]*ConnectArtifact)[vs[1].(int)]
	}).(ConnectArtifactOutput)
}

type ConnectArtifactMapOutput struct{ *pulumi.OutputState }

func (ConnectArtifactMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectArtifact)(nil)).Elem()
}

func (o ConnectArtifactMapOutput) ToConnectArtifactMapOutput() ConnectArtifactMapOutput {
	return o
}

func (o ConnectArtifactMapOutput) ToConnectArtifactMapOutputWithContext(ctx context.Context) ConnectArtifactMapOutput {
	return o
}

func (o ConnectArtifactMapOutput) MapIndex(k pulumi.StringInput) ConnectArtifactOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectArtifact {
		return vs[0].(map[string]*ConnectArtifact)[vs[1].(string)]
	}).(ConnectArtifactOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectArtifactInput)(nil)).Elem(), &ConnectArtifact{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectArtifactArrayInput)(nil)).Elem(), ConnectArtifactArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectArtifactMapInput)(nil)).Elem(), ConnectArtifactMap{})
	pulumi.RegisterOutputType(ConnectArtifactOutput{})
	pulumi.RegisterOutputType(ConnectArtifactArrayOutput{})
	pulumi.RegisterOutputType(ConnectArtifactMapOutput{})
}

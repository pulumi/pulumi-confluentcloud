// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
//
// `GroupMapping` describes a Group Mapping data source.
//
// > **Note:** See [Group Mapping in Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/authenticate/sso/group-mapping/overview.html) for more details.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleUsingId, err := confluentcloud.LookupGroupMapping(ctx, &confluentcloud.LookupGroupMappingArgs{
//				Id: pulumi.StringRef("group-abc123"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("exampleUsingId", exampleUsingId)
//			_, err = confluentcloud.LookupGroupMapping(ctx, &confluentcloud.LookupGroupMappingArgs{
//				DisplayName: pulumi.StringRef("Default"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupGroupMapping(ctx *pulumi.Context, args *LookupGroupMappingArgs, opts ...pulumi.InvokeOption) (*LookupGroupMappingResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupGroupMappingResult
	err := ctx.Invoke("confluentcloud:index/getGroupMapping:getGroupMapping", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGroupMapping.
type LookupGroupMappingArgs struct {
	// The name of the Group Mapping.
	//
	// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
	DisplayName *string `pulumi:"displayName"`
	// The ID of the Group Mapping.
	Id *string `pulumi:"id"`
}

// A collection of values returned by getGroupMapping.
type LookupGroupMappingResult struct {
	// (Required String) A description explaining the purpose and use of the group mapping.
	Description string `pulumi:"description"`
	// (Required String) The name of the Group Mapping.
	DisplayName string `pulumi:"displayName"`
	// (Required String) A single group identifier or a condition based on [supported CEL operators](https://docs.confluent.io/cloud/current/access-management/authenticate/sso/group-mapping/overview.html#supported-cel-operators-for-group-mapping) that defines which groups are included.
	Filter string `pulumi:"filter"`
	// (Required String) The ID of the Group Mapping (for example, `group-abc123`).
	Id string `pulumi:"id"`
}

func LookupGroupMappingOutput(ctx *pulumi.Context, args LookupGroupMappingOutputArgs, opts ...pulumi.InvokeOption) LookupGroupMappingResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupGroupMappingResult, error) {
			args := v.(LookupGroupMappingArgs)
			r, err := LookupGroupMapping(ctx, &args, opts...)
			var s LookupGroupMappingResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupGroupMappingResultOutput)
}

// A collection of arguments for invoking getGroupMapping.
type LookupGroupMappingOutputArgs struct {
	// The name of the Group Mapping.
	//
	// > **Note:** Exactly one from the `id` and `displayName` attributes must be specified.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The ID of the Group Mapping.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (LookupGroupMappingOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGroupMappingArgs)(nil)).Elem()
}

// A collection of values returned by getGroupMapping.
type LookupGroupMappingResultOutput struct{ *pulumi.OutputState }

func (LookupGroupMappingResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGroupMappingResult)(nil)).Elem()
}

func (o LookupGroupMappingResultOutput) ToLookupGroupMappingResultOutput() LookupGroupMappingResultOutput {
	return o
}

func (o LookupGroupMappingResultOutput) ToLookupGroupMappingResultOutputWithContext(ctx context.Context) LookupGroupMappingResultOutput {
	return o
}

// (Required String) A description explaining the purpose and use of the group mapping.
func (o LookupGroupMappingResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGroupMappingResult) string { return v.Description }).(pulumi.StringOutput)
}

// (Required String) The name of the Group Mapping.
func (o LookupGroupMappingResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGroupMappingResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// (Required String) A single group identifier or a condition based on [supported CEL operators](https://docs.confluent.io/cloud/current/access-management/authenticate/sso/group-mapping/overview.html#supported-cel-operators-for-group-mapping) that defines which groups are included.
func (o LookupGroupMappingResultOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGroupMappingResult) string { return v.Filter }).(pulumi.StringOutput)
}

// (Required String) The ID of the Group Mapping (for example, `group-abc123`).
func (o LookupGroupMappingResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGroupMappingResult) string { return v.Id }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupGroupMappingResultOutput{})
}

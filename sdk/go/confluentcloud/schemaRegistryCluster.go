// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			development, err := confluentcloud.NewEnvironment(ctx, "development", nil)
//			if err != nil {
//				return err
//			}
//			example, err := confluentcloud.GetSchemaRegistryRegion(ctx, &confluentcloud.GetSchemaRegistryRegionArgs{
//				Cloud:   "AWS",
//				Region:  "us-east-2",
//				Package: "ESSENTIALS",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = confluentcloud.NewSchemaRegistryCluster(ctx, "essentials", &confluentcloud.SchemaRegistryClusterArgs{
//				Package: *pulumi.String(example.Package),
//				Environment: &confluentcloud.SchemaRegistryClusterEnvironmentArgs{
//					Id: development.ID(),
//				},
//				Region: &confluentcloud.SchemaRegistryClusterRegionArgs{
//					Id: *pulumi.String(example.Id),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// You can import a Schema Registry cluster by using Environment ID and Schema Registry cluster ID, in the format `<Environment ID>/<Schema Registry cluster ID>`, for example$ export CONFLUENT_CLOUD_API_KEY="<cloud_api_key>" $ export CONFLUENT_CLOUD_API_SECRET="<cloud_api_secret>"
//
// ```sh
//
//	$ pulumi import confluentcloud:index/schemaRegistryCluster:SchemaRegistryCluster example env-abc123/lsrc-abc123
//
// ```
//
//	!> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
type SchemaRegistryCluster struct {
	pulumi.CustomResourceState

	// (Required String) An API Version of the schema version of the Schema Registry cluster, for example, `srcm/v2`.
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// (Required String) The name of the Schema Registry cluster, for example, `Stream Governance Package`.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment SchemaRegistryClusterEnvironmentOutput `pulumi:"environment"`
	// (Required String) A kind of the Schema Registry cluster, for example, `Cluster`.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.
	Package pulumi.StringOutput               `pulumi:"package"`
	Region  SchemaRegistryClusterRegionOutput `pulumi:"region"`
	// (Required String) The Confluent Resource Name of the Schema Registry cluster, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/schema-registry=lsrc-abc123`.
	ResourceName pulumi.StringOutput `pulumi:"resourceName"`
	// (Required String) The HTTP endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-west-2.aws.confluent.cloud`.
	RestEndpoint pulumi.StringOutput `pulumi:"restEndpoint"`
}

// NewSchemaRegistryCluster registers a new resource with the given unique name, arguments, and options.
func NewSchemaRegistryCluster(ctx *pulumi.Context,
	name string, args *SchemaRegistryClusterArgs, opts ...pulumi.ResourceOption) (*SchemaRegistryCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.Package == nil {
		return nil, errors.New("invalid value for required argument 'Package'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SchemaRegistryCluster
	err := ctx.RegisterResource("confluentcloud:index/schemaRegistryCluster:SchemaRegistryCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSchemaRegistryCluster gets an existing SchemaRegistryCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchemaRegistryCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SchemaRegistryClusterState, opts ...pulumi.ResourceOption) (*SchemaRegistryCluster, error) {
	var resource SchemaRegistryCluster
	err := ctx.ReadResource("confluentcloud:index/schemaRegistryCluster:SchemaRegistryCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SchemaRegistryCluster resources.
type schemaRegistryClusterState struct {
	// (Required String) An API Version of the schema version of the Schema Registry cluster, for example, `srcm/v2`.
	ApiVersion *string `pulumi:"apiVersion"`
	// (Required String) The name of the Schema Registry cluster, for example, `Stream Governance Package`.
	DisplayName *string `pulumi:"displayName"`
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment *SchemaRegistryClusterEnvironment `pulumi:"environment"`
	// (Required String) A kind of the Schema Registry cluster, for example, `Cluster`.
	Kind *string `pulumi:"kind"`
	// The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.
	Package *string                      `pulumi:"package"`
	Region  *SchemaRegistryClusterRegion `pulumi:"region"`
	// (Required String) The Confluent Resource Name of the Schema Registry cluster, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/schema-registry=lsrc-abc123`.
	ResourceName *string `pulumi:"resourceName"`
	// (Required String) The HTTP endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-west-2.aws.confluent.cloud`.
	RestEndpoint *string `pulumi:"restEndpoint"`
}

type SchemaRegistryClusterState struct {
	// (Required String) An API Version of the schema version of the Schema Registry cluster, for example, `srcm/v2`.
	ApiVersion pulumi.StringPtrInput
	// (Required String) The name of the Schema Registry cluster, for example, `Stream Governance Package`.
	DisplayName pulumi.StringPtrInput
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment SchemaRegistryClusterEnvironmentPtrInput
	// (Required String) A kind of the Schema Registry cluster, for example, `Cluster`.
	Kind pulumi.StringPtrInput
	// The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.
	Package pulumi.StringPtrInput
	Region  SchemaRegistryClusterRegionPtrInput
	// (Required String) The Confluent Resource Name of the Schema Registry cluster, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/schema-registry=lsrc-abc123`.
	ResourceName pulumi.StringPtrInput
	// (Required String) The HTTP endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-west-2.aws.confluent.cloud`.
	RestEndpoint pulumi.StringPtrInput
}

func (SchemaRegistryClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*schemaRegistryClusterState)(nil)).Elem()
}

type schemaRegistryClusterArgs struct {
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment SchemaRegistryClusterEnvironment `pulumi:"environment"`
	// The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.
	Package string                      `pulumi:"package"`
	Region  SchemaRegistryClusterRegion `pulumi:"region"`
}

// The set of arguments for constructing a SchemaRegistryCluster resource.
type SchemaRegistryClusterArgs struct {
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment SchemaRegistryClusterEnvironmentInput
	// The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.
	Package pulumi.StringInput
	Region  SchemaRegistryClusterRegionInput
}

func (SchemaRegistryClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*schemaRegistryClusterArgs)(nil)).Elem()
}

type SchemaRegistryClusterInput interface {
	pulumi.Input

	ToSchemaRegistryClusterOutput() SchemaRegistryClusterOutput
	ToSchemaRegistryClusterOutputWithContext(ctx context.Context) SchemaRegistryClusterOutput
}

func (*SchemaRegistryCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaRegistryCluster)(nil)).Elem()
}

func (i *SchemaRegistryCluster) ToSchemaRegistryClusterOutput() SchemaRegistryClusterOutput {
	return i.ToSchemaRegistryClusterOutputWithContext(context.Background())
}

func (i *SchemaRegistryCluster) ToSchemaRegistryClusterOutputWithContext(ctx context.Context) SchemaRegistryClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryClusterOutput)
}

// SchemaRegistryClusterArrayInput is an input type that accepts SchemaRegistryClusterArray and SchemaRegistryClusterArrayOutput values.
// You can construct a concrete instance of `SchemaRegistryClusterArrayInput` via:
//
//	SchemaRegistryClusterArray{ SchemaRegistryClusterArgs{...} }
type SchemaRegistryClusterArrayInput interface {
	pulumi.Input

	ToSchemaRegistryClusterArrayOutput() SchemaRegistryClusterArrayOutput
	ToSchemaRegistryClusterArrayOutputWithContext(context.Context) SchemaRegistryClusterArrayOutput
}

type SchemaRegistryClusterArray []SchemaRegistryClusterInput

func (SchemaRegistryClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SchemaRegistryCluster)(nil)).Elem()
}

func (i SchemaRegistryClusterArray) ToSchemaRegistryClusterArrayOutput() SchemaRegistryClusterArrayOutput {
	return i.ToSchemaRegistryClusterArrayOutputWithContext(context.Background())
}

func (i SchemaRegistryClusterArray) ToSchemaRegistryClusterArrayOutputWithContext(ctx context.Context) SchemaRegistryClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryClusterArrayOutput)
}

// SchemaRegistryClusterMapInput is an input type that accepts SchemaRegistryClusterMap and SchemaRegistryClusterMapOutput values.
// You can construct a concrete instance of `SchemaRegistryClusterMapInput` via:
//
//	SchemaRegistryClusterMap{ "key": SchemaRegistryClusterArgs{...} }
type SchemaRegistryClusterMapInput interface {
	pulumi.Input

	ToSchemaRegistryClusterMapOutput() SchemaRegistryClusterMapOutput
	ToSchemaRegistryClusterMapOutputWithContext(context.Context) SchemaRegistryClusterMapOutput
}

type SchemaRegistryClusterMap map[string]SchemaRegistryClusterInput

func (SchemaRegistryClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SchemaRegistryCluster)(nil)).Elem()
}

func (i SchemaRegistryClusterMap) ToSchemaRegistryClusterMapOutput() SchemaRegistryClusterMapOutput {
	return i.ToSchemaRegistryClusterMapOutputWithContext(context.Background())
}

func (i SchemaRegistryClusterMap) ToSchemaRegistryClusterMapOutputWithContext(ctx context.Context) SchemaRegistryClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryClusterMapOutput)
}

type SchemaRegistryClusterOutput struct{ *pulumi.OutputState }

func (SchemaRegistryClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaRegistryCluster)(nil)).Elem()
}

func (o SchemaRegistryClusterOutput) ToSchemaRegistryClusterOutput() SchemaRegistryClusterOutput {
	return o
}

func (o SchemaRegistryClusterOutput) ToSchemaRegistryClusterOutputWithContext(ctx context.Context) SchemaRegistryClusterOutput {
	return o
}

// (Required String) An API Version of the schema version of the Schema Registry cluster, for example, `srcm/v2`.
func (o SchemaRegistryClusterOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaRegistryCluster) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// (Required String) The name of the Schema Registry cluster, for example, `Stream Governance Package`.
func (o SchemaRegistryClusterOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaRegistryCluster) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
func (o SchemaRegistryClusterOutput) Environment() SchemaRegistryClusterEnvironmentOutput {
	return o.ApplyT(func(v *SchemaRegistryCluster) SchemaRegistryClusterEnvironmentOutput { return v.Environment }).(SchemaRegistryClusterEnvironmentOutput)
}

// (Required String) A kind of the Schema Registry cluster, for example, `Cluster`.
func (o SchemaRegistryClusterOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaRegistryCluster) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// The type of the billing package. Accepted values are: `ESSENTIALS` and `ADVANCED`.
func (o SchemaRegistryClusterOutput) Package() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaRegistryCluster) pulumi.StringOutput { return v.Package }).(pulumi.StringOutput)
}

func (o SchemaRegistryClusterOutput) Region() SchemaRegistryClusterRegionOutput {
	return o.ApplyT(func(v *SchemaRegistryCluster) SchemaRegistryClusterRegionOutput { return v.Region }).(SchemaRegistryClusterRegionOutput)
}

// (Required String) The Confluent Resource Name of the Schema Registry cluster, for example, `crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/schema-registry=lsrc-abc123`.
func (o SchemaRegistryClusterOutput) ResourceName() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaRegistryCluster) pulumi.StringOutput { return v.ResourceName }).(pulumi.StringOutput)
}

// (Required String) The HTTP endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-west-2.aws.confluent.cloud`.
func (o SchemaRegistryClusterOutput) RestEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaRegistryCluster) pulumi.StringOutput { return v.RestEndpoint }).(pulumi.StringOutput)
}

type SchemaRegistryClusterArrayOutput struct{ *pulumi.OutputState }

func (SchemaRegistryClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SchemaRegistryCluster)(nil)).Elem()
}

func (o SchemaRegistryClusterArrayOutput) ToSchemaRegistryClusterArrayOutput() SchemaRegistryClusterArrayOutput {
	return o
}

func (o SchemaRegistryClusterArrayOutput) ToSchemaRegistryClusterArrayOutputWithContext(ctx context.Context) SchemaRegistryClusterArrayOutput {
	return o
}

func (o SchemaRegistryClusterArrayOutput) Index(i pulumi.IntInput) SchemaRegistryClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SchemaRegistryCluster {
		return vs[0].([]*SchemaRegistryCluster)[vs[1].(int)]
	}).(SchemaRegistryClusterOutput)
}

type SchemaRegistryClusterMapOutput struct{ *pulumi.OutputState }

func (SchemaRegistryClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SchemaRegistryCluster)(nil)).Elem()
}

func (o SchemaRegistryClusterMapOutput) ToSchemaRegistryClusterMapOutput() SchemaRegistryClusterMapOutput {
	return o
}

func (o SchemaRegistryClusterMapOutput) ToSchemaRegistryClusterMapOutputWithContext(ctx context.Context) SchemaRegistryClusterMapOutput {
	return o
}

func (o SchemaRegistryClusterMapOutput) MapIndex(k pulumi.StringInput) SchemaRegistryClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SchemaRegistryCluster {
		return vs[0].(map[string]*SchemaRegistryCluster)[vs[1].(string)]
	}).(SchemaRegistryClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaRegistryClusterInput)(nil)).Elem(), &SchemaRegistryCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaRegistryClusterArrayInput)(nil)).Elem(), SchemaRegistryClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaRegistryClusterMapInput)(nil)).Elem(), SchemaRegistryClusterMap{})
	pulumi.RegisterOutputType(SchemaRegistryClusterOutput{})
	pulumi.RegisterOutputType(SchemaRegistryClusterArrayOutput{})
	pulumi.RegisterOutputType(SchemaRegistryClusterMapOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
//
// `Tag` describes a Tag data source.
//
// ## Example Usage
//
// ### Option #1: Manage multiple Schema Registry clusters in the same Pulumi Stack
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := confluentcloud.LookupTag(ctx, &confluentcloud.LookupTagArgs{
//				SchemaRegistryCluster: confluentcloud.GetTagSchemaRegistryCluster{
//					Id: essentials.Id,
//				},
//				RestEndpoint: pulumi.StringRef(essentials.RestEndpoint),
//				Credentials: confluentcloud.GetTagCredentials{
//					Key:    "<Schema Registry API Key for data.confluent_schema_registry_cluster.essentials>",
//					Secret: "<Schema Registry API Secret for data.confluent_schema_registry_cluster.essentials>",
//				},
//				Name: "PII",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Option #2: Manage a single Schema Registry cluster in the same Pulumi Stack
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := confluentcloud.LookupTag(ctx, &confluentcloud.LookupTagArgs{
//				Name: "PII",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// > **Note:** We also support `schemaRegistryRestEndpoint` instead of `catalogRestEndpoint` for the time being.
func LookupTag(ctx *pulumi.Context, args *LookupTagArgs, opts ...pulumi.InvokeOption) (*LookupTagResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTagResult
	err := ctx.Invoke("confluentcloud:index/getTag:getTag", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTag.
type LookupTagArgs struct {
	Credentials *GetTagCredentials `pulumi:"credentials"`
	// The name of the tag, for example, `PII`. The name must not be empty and consist of a letter followed by a sequence of letter, number, space, or _ characters.
	//
	// > **Note:** A Schema Registry API key consists of a key and a secret. Schema Registry API keys are required to interact with Schema Registry clusters in Confluent Cloud. Each Schema Registry API key is valid for one specific Schema Registry cluster.
	Name string `pulumi:"name"`
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          *string                      `pulumi:"restEndpoint"`
	SchemaRegistryCluster *GetTagSchemaRegistryCluster `pulumi:"schemaRegistryCluster"`
}

// A collection of values returned by getTag.
type LookupTagResult struct {
	Credentials *GetTagCredentials `pulumi:"credentials"`
	// (Optional String) The description of the tag.
	Description string `pulumi:"description"`
	// (Optional List of String) The entity types of the tag, this always returns `["cfEntity"]`.
	EntityTypes []string `pulumi:"entityTypes"`
	// (Required String) The ID of the Tag, in the format `<Schema Registry cluster ID>/<Tag name>`, for example, `lsrc-8wrx70/PII`.
	Id                    string                       `pulumi:"id"`
	Name                  string                       `pulumi:"name"`
	RestEndpoint          *string                      `pulumi:"restEndpoint"`
	SchemaRegistryCluster *GetTagSchemaRegistryCluster `pulumi:"schemaRegistryCluster"`
	// (Optional Integer) The version, for example, `1`.
	Version int `pulumi:"version"`
}

func LookupTagOutput(ctx *pulumi.Context, args LookupTagOutputArgs, opts ...pulumi.InvokeOption) LookupTagResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupTagResultOutput, error) {
			args := v.(LookupTagArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("confluentcloud:index/getTag:getTag", args, LookupTagResultOutput{}, options).(LookupTagResultOutput), nil
		}).(LookupTagResultOutput)
}

// A collection of arguments for invoking getTag.
type LookupTagOutputArgs struct {
	Credentials GetTagCredentialsPtrInput `pulumi:"credentials"`
	// The name of the tag, for example, `PII`. The name must not be empty and consist of a letter followed by a sequence of letter, number, space, or _ characters.
	//
	// > **Note:** A Schema Registry API key consists of a key and a secret. Schema Registry API keys are required to interact with Schema Registry clusters in Confluent Cloud. Each Schema Registry API key is valid for one specific Schema Registry cluster.
	Name pulumi.StringInput `pulumi:"name"`
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          pulumi.StringPtrInput               `pulumi:"restEndpoint"`
	SchemaRegistryCluster GetTagSchemaRegistryClusterPtrInput `pulumi:"schemaRegistryCluster"`
}

func (LookupTagOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTagArgs)(nil)).Elem()
}

// A collection of values returned by getTag.
type LookupTagResultOutput struct{ *pulumi.OutputState }

func (LookupTagResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTagResult)(nil)).Elem()
}

func (o LookupTagResultOutput) ToLookupTagResultOutput() LookupTagResultOutput {
	return o
}

func (o LookupTagResultOutput) ToLookupTagResultOutputWithContext(ctx context.Context) LookupTagResultOutput {
	return o
}

func (o LookupTagResultOutput) Credentials() GetTagCredentialsPtrOutput {
	return o.ApplyT(func(v LookupTagResult) *GetTagCredentials { return v.Credentials }).(GetTagCredentialsPtrOutput)
}

// (Optional String) The description of the tag.
func (o LookupTagResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTagResult) string { return v.Description }).(pulumi.StringOutput)
}

// (Optional List of String) The entity types of the tag, this always returns `["cfEntity"]`.
func (o LookupTagResultOutput) EntityTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupTagResult) []string { return v.EntityTypes }).(pulumi.StringArrayOutput)
}

// (Required String) The ID of the Tag, in the format `<Schema Registry cluster ID>/<Tag name>`, for example, `lsrc-8wrx70/PII`.
func (o LookupTagResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTagResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupTagResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTagResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupTagResultOutput) RestEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTagResult) *string { return v.RestEndpoint }).(pulumi.StringPtrOutput)
}

func (o LookupTagResultOutput) SchemaRegistryCluster() GetTagSchemaRegistryClusterPtrOutput {
	return o.ApplyT(func(v LookupTagResult) *GetTagSchemaRegistryCluster { return v.SchemaRegistryCluster }).(GetTagSchemaRegistryClusterPtrOutput)
}

// (Optional Integer) The version, for example, `1`.
func (o LookupTagResultOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTagResult) int { return v.Version }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTagResultOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupTagBinding(ctx *pulumi.Context, args *LookupTagBindingArgs, opts ...pulumi.InvokeOption) (*LookupTagBindingResult, error) {
	var rv LookupTagBindingResult
	err := ctx.Invoke("confluentcloud:index/getTagBinding:getTagBinding", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTagBinding.
type LookupTagBindingArgs struct {
	Credentials *GetTagBindingCredentials `pulumi:"credentials"`
	// The qualified name of the entity., for example, `lsrc-8wrx70:.:100001`.
	EntityName string `pulumi:"entityName"`
	// The entity type, for example, `srSchema`.
	//
	// > **Note:** A Schema Registry API key consists of a key and a secret. Schema Registry API keys are required to interact with Schema Registry clusters in Confluent Cloud. Each Schema Registry API key is valid for one specific Schema Registry cluster.
	EntityType string `pulumi:"entityType"`
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          *string                             `pulumi:"restEndpoint"`
	SchemaRegistryCluster *GetTagBindingSchemaRegistryCluster `pulumi:"schemaRegistryCluster"`
	// The name of the tag to be applied, for example, `PII`. The name must not be empty and consist of a letter followed by a sequence of letter, number, space, or _ characters.
	TagName string `pulumi:"tagName"`
}

// A collection of values returned by getTagBinding.
type LookupTagBindingResult struct {
	Credentials *GetTagBindingCredentials `pulumi:"credentials"`
	EntityName  string                    `pulumi:"entityName"`
	EntityType  string                    `pulumi:"entityType"`
	// (Required String) The ID of the Tag Binding, in the format `<Schema Registry Cluster Id>/<Tag Name>/<Entity Name>/<Entity Type>`, for example, `lsrc-8wrx70/PII/lsrc-8wrx70:.:100001/sr_schema`.
	Id                    string                              `pulumi:"id"`
	RestEndpoint          *string                             `pulumi:"restEndpoint"`
	SchemaRegistryCluster *GetTagBindingSchemaRegistryCluster `pulumi:"schemaRegistryCluster"`
	TagName               string                              `pulumi:"tagName"`
}

func LookupTagBindingOutput(ctx *pulumi.Context, args LookupTagBindingOutputArgs, opts ...pulumi.InvokeOption) LookupTagBindingResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTagBindingResult, error) {
			args := v.(LookupTagBindingArgs)
			r, err := LookupTagBinding(ctx, &args, opts...)
			var s LookupTagBindingResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupTagBindingResultOutput)
}

// A collection of arguments for invoking getTagBinding.
type LookupTagBindingOutputArgs struct {
	Credentials GetTagBindingCredentialsPtrInput `pulumi:"credentials"`
	// The qualified name of the entity., for example, `lsrc-8wrx70:.:100001`.
	EntityName pulumi.StringInput `pulumi:"entityName"`
	// The entity type, for example, `srSchema`.
	//
	// > **Note:** A Schema Registry API key consists of a key and a secret. Schema Registry API keys are required to interact with Schema Registry clusters in Confluent Cloud. Each Schema Registry API key is valid for one specific Schema Registry cluster.
	EntityType pulumi.StringInput `pulumi:"entityType"`
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          pulumi.StringPtrInput                      `pulumi:"restEndpoint"`
	SchemaRegistryCluster GetTagBindingSchemaRegistryClusterPtrInput `pulumi:"schemaRegistryCluster"`
	// The name of the tag to be applied, for example, `PII`. The name must not be empty and consist of a letter followed by a sequence of letter, number, space, or _ characters.
	TagName pulumi.StringInput `pulumi:"tagName"`
}

func (LookupTagBindingOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTagBindingArgs)(nil)).Elem()
}

// A collection of values returned by getTagBinding.
type LookupTagBindingResultOutput struct{ *pulumi.OutputState }

func (LookupTagBindingResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTagBindingResult)(nil)).Elem()
}

func (o LookupTagBindingResultOutput) ToLookupTagBindingResultOutput() LookupTagBindingResultOutput {
	return o
}

func (o LookupTagBindingResultOutput) ToLookupTagBindingResultOutputWithContext(ctx context.Context) LookupTagBindingResultOutput {
	return o
}

func (o LookupTagBindingResultOutput) Credentials() GetTagBindingCredentialsPtrOutput {
	return o.ApplyT(func(v LookupTagBindingResult) *GetTagBindingCredentials { return v.Credentials }).(GetTagBindingCredentialsPtrOutput)
}

func (o LookupTagBindingResultOutput) EntityName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTagBindingResult) string { return v.EntityName }).(pulumi.StringOutput)
}

func (o LookupTagBindingResultOutput) EntityType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTagBindingResult) string { return v.EntityType }).(pulumi.StringOutput)
}

// (Required String) The ID of the Tag Binding, in the format `<Schema Registry Cluster Id>/<Tag Name>/<Entity Name>/<Entity Type>`, for example, `lsrc-8wrx70/PII/lsrc-8wrx70:.:100001/sr_schema`.
func (o LookupTagBindingResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTagBindingResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupTagBindingResultOutput) RestEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTagBindingResult) *string { return v.RestEndpoint }).(pulumi.StringPtrOutput)
}

func (o LookupTagBindingResultOutput) SchemaRegistryCluster() GetTagBindingSchemaRegistryClusterPtrOutput {
	return o.ApplyT(func(v LookupTagBindingResult) *GetTagBindingSchemaRegistryCluster { return v.SchemaRegistryCluster }).(GetTagBindingSchemaRegistryClusterPtrOutput)
}

func (o LookupTagBindingResultOutput) TagName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTagBindingResult) string { return v.TagName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTagBindingResultOutput{})
}

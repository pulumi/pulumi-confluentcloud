// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
//
// `TagBinding` describes a Tag Binding data source.
//
// ## Example Usage
//
// ### Option #1: Manage multiple Schema Registry clusters in the same Pulumi Stack
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := confluentcloud.LookupTagBinding(ctx, &confluentcloud.LookupTagBindingArgs{
//				SchemaRegistryCluster: confluentcloud.GetTagBindingSchemaRegistryCluster{
//					Id: essentials.Id,
//				},
//				RestEndpoint: pulumi.StringRef(essentials.RestEndpoint),
//				Credentials: confluentcloud.GetTagBindingCredentials{
//					Key:    "<Schema Registry API Key for data.confluent_schema_registry_cluster.essentials>",
//					Secret: "<Schema Registry API Secret for data.confluent_schema_registry_cluster.essentials>",
//				},
//				TagName:    "PII",
//				EntityName: "lsrc-8wrx70:.:100001",
//				EntityType: "sr_schema",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Option #2: Manage a single Schema Registry cluster in the same Pulumi Stack
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := confluentcloud.LookupTagBinding(ctx, &confluentcloud.LookupTagBindingArgs{
//				TagName:    "PII",
//				EntityName: "lsrc-8wrx70:.:100001",
//				EntityType: "sr_schema",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// > **Note:** We also support `schemaRegistryRestEndpoint` instead of `catalogRestEndpoint` for the time being.
func LookupTagBinding(ctx *pulumi.Context, args *LookupTagBindingArgs, opts ...pulumi.InvokeOption) (*LookupTagBindingResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTagBindingResult
	err := ctx.Invoke("confluentcloud:index/getTagBinding:getTagBinding", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTagBinding.
type LookupTagBindingArgs struct {
	Credentials *GetTagBindingCredentials `pulumi:"credentials"`
	// The qualified name of the entity, for example, `${data.confluent_schema_registry_cluster.essentials.id}:.:${confluent_schema.purchase.schema_identifier}`, `${data.confluent_schema_registry_cluster.essentials.id}:${confluent_kafka_cluster.basic.id}:${confluent_kafka_topic.purchase.topic_name}`. Refer to the [Examples of qualified names](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#examples-of-qualified-names) to see the full list of supported values for the `entityName` attribute.
	EntityName string `pulumi:"entityName"`
	// The entity type, for example, `srSchema`.
	//
	// > **Note:** A Schema Registry API key consists of a key and a secret. Schema Registry API keys are required to interact with Schema Registry clusters in Confluent Cloud. Each Schema Registry API key is valid for one specific Schema Registry cluster.
	EntityType string `pulumi:"entityType"`
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          *string                             `pulumi:"restEndpoint"`
	SchemaRegistryCluster *GetTagBindingSchemaRegistryCluster `pulumi:"schemaRegistryCluster"`
	// The name of the tag to be applied, for example, `PII`. The name must not be empty and consist of a letter followed by a sequence of letter, number, space, or _ characters.
	TagName string `pulumi:"tagName"`
}

// A collection of values returned by getTagBinding.
type LookupTagBindingResult struct {
	Credentials *GetTagBindingCredentials `pulumi:"credentials"`
	EntityName  string                    `pulumi:"entityName"`
	EntityType  string                    `pulumi:"entityType"`
	// (Required String) The ID of the Tag Binding, in the format `<Schema Registry Cluster Id>/<Tag Name>/<Entity Name>/<Entity Type>`, for example, `lsrc-8wrx70/PII/lsrc-8wrx70:.:100001/sr_schema`.
	Id                    string                              `pulumi:"id"`
	RestEndpoint          *string                             `pulumi:"restEndpoint"`
	SchemaRegistryCluster *GetTagBindingSchemaRegistryCluster `pulumi:"schemaRegistryCluster"`
	TagName               string                              `pulumi:"tagName"`
}

func LookupTagBindingOutput(ctx *pulumi.Context, args LookupTagBindingOutputArgs, opts ...pulumi.InvokeOption) LookupTagBindingResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupTagBindingResultOutput, error) {
			args := v.(LookupTagBindingArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("confluentcloud:index/getTagBinding:getTagBinding", args, LookupTagBindingResultOutput{}, options).(LookupTagBindingResultOutput), nil
		}).(LookupTagBindingResultOutput)
}

// A collection of arguments for invoking getTagBinding.
type LookupTagBindingOutputArgs struct {
	Credentials GetTagBindingCredentialsPtrInput `pulumi:"credentials"`
	// The qualified name of the entity, for example, `${data.confluent_schema_registry_cluster.essentials.id}:.:${confluent_schema.purchase.schema_identifier}`, `${data.confluent_schema_registry_cluster.essentials.id}:${confluent_kafka_cluster.basic.id}:${confluent_kafka_topic.purchase.topic_name}`. Refer to the [Examples of qualified names](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog-rest-apis.html#examples-of-qualified-names) to see the full list of supported values for the `entityName` attribute.
	EntityName pulumi.StringInput `pulumi:"entityName"`
	// The entity type, for example, `srSchema`.
	//
	// > **Note:** A Schema Registry API key consists of a key and a secret. Schema Registry API keys are required to interact with Schema Registry clusters in Confluent Cloud. Each Schema Registry API key is valid for one specific Schema Registry cluster.
	EntityType pulumi.StringInput `pulumi:"entityType"`
	// The REST endpoint of the Schema Registry cluster, for example, `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint          pulumi.StringPtrInput                      `pulumi:"restEndpoint"`
	SchemaRegistryCluster GetTagBindingSchemaRegistryClusterPtrInput `pulumi:"schemaRegistryCluster"`
	// The name of the tag to be applied, for example, `PII`. The name must not be empty and consist of a letter followed by a sequence of letter, number, space, or _ characters.
	TagName pulumi.StringInput `pulumi:"tagName"`
}

func (LookupTagBindingOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTagBindingArgs)(nil)).Elem()
}

// A collection of values returned by getTagBinding.
type LookupTagBindingResultOutput struct{ *pulumi.OutputState }

func (LookupTagBindingResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTagBindingResult)(nil)).Elem()
}

func (o LookupTagBindingResultOutput) ToLookupTagBindingResultOutput() LookupTagBindingResultOutput {
	return o
}

func (o LookupTagBindingResultOutput) ToLookupTagBindingResultOutputWithContext(ctx context.Context) LookupTagBindingResultOutput {
	return o
}

func (o LookupTagBindingResultOutput) Credentials() GetTagBindingCredentialsPtrOutput {
	return o.ApplyT(func(v LookupTagBindingResult) *GetTagBindingCredentials { return v.Credentials }).(GetTagBindingCredentialsPtrOutput)
}

func (o LookupTagBindingResultOutput) EntityName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTagBindingResult) string { return v.EntityName }).(pulumi.StringOutput)
}

func (o LookupTagBindingResultOutput) EntityType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTagBindingResult) string { return v.EntityType }).(pulumi.StringOutput)
}

// (Required String) The ID of the Tag Binding, in the format `<Schema Registry Cluster Id>/<Tag Name>/<Entity Name>/<Entity Type>`, for example, `lsrc-8wrx70/PII/lsrc-8wrx70:.:100001/sr_schema`.
func (o LookupTagBindingResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTagBindingResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupTagBindingResultOutput) RestEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTagBindingResult) *string { return v.RestEndpoint }).(pulumi.StringPtrOutput)
}

func (o LookupTagBindingResultOutput) SchemaRegistryCluster() GetTagBindingSchemaRegistryClusterPtrOutput {
	return o.ApplyT(func(v LookupTagBindingResult) *GetTagBindingSchemaRegistryCluster { return v.SchemaRegistryCluster }).(GetTagBindingSchemaRegistryClusterPtrOutput)
}

func (o LookupTagBindingResultOutput) TagName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTagBindingResult) string { return v.TagName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTagBindingResultOutput{})
}

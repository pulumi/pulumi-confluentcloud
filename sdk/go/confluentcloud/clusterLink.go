// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// You can import a Kafka mirror topic by using the cluster link name, cluster link mode, cluster link connection mode, source Kafka cluster ID, and destination Kafka cluster ID, in the format `<Cluster link name>/<Cluster link mode>/<Cluster connection mode>/<Source Kafka cluster ID>/<Destination Kafka cluster ID>`, for example$ export IMPORT_SOURCE_KAFKA_BOOTSTRAP_ENDPOINT="<source_kafka_bootstrap_endpoint>" $ export IMPORT_SOURCE_KAFKA_API_KEY="<source_kafka_api_key>" $ export IMPORT_SOURCE_KAFKA_API_SECRET="<source_kafka_api_secret>" $ export IMPORT_DESTINATION_KAFKA_REST_ENDPOINT="<destination_kafka_rest_endpoint>" $ export IMPORT_DESTINATION_KAFKA_API_KEY="<destination_kafka_api_key>" $ export IMPORT_DESTINATION_KAFKA_API_SECRET="<destination_kafka_api_secret>"
//
// ```sh
//
//	$ pulumi import confluentcloud:index/clusterLink:ClusterLink my_cluster_link my-cluster-link/DESTINATION/OUTBOUND/lkc-abc123/lkc-xyz456
//
// ```
//
//	!> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
type ClusterLink struct {
	pulumi.CustomResourceState

	// The connection mode of the cluster link. The supported values are `"INBOUND"` and `"OUTBOUND"`. Defaults to `"OUTBOUND"`.
	ConnectionMode          pulumi.StringPtrOutput                   `pulumi:"connectionMode"`
	DestinationKafkaCluster ClusterLinkDestinationKafkaClusterOutput `pulumi:"destinationKafkaCluster"`
	// The name of the cluster link, for example, `my-cluster-link`.
	Link pulumi.StringOutput `pulumi:"link"`
	// The mode of the cluster link. The supported values are `"DESTINATION"` and `"SOURCE"`. Defaults to `"DESTINATION"`.
	LinkMode           pulumi.StringPtrOutput              `pulumi:"linkMode"`
	SourceKafkaCluster ClusterLinkSourceKafkaClusterOutput `pulumi:"sourceKafkaCluster"`
}

// NewClusterLink registers a new resource with the given unique name, arguments, and options.
func NewClusterLink(ctx *pulumi.Context,
	name string, args *ClusterLinkArgs, opts ...pulumi.ResourceOption) (*ClusterLink, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationKafkaCluster == nil {
		return nil, errors.New("invalid value for required argument 'DestinationKafkaCluster'")
	}
	if args.SourceKafkaCluster == nil {
		return nil, errors.New("invalid value for required argument 'SourceKafkaCluster'")
	}
	var resource ClusterLink
	err := ctx.RegisterResource("confluentcloud:index/clusterLink:ClusterLink", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterLink gets an existing ClusterLink resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterLink(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterLinkState, opts ...pulumi.ResourceOption) (*ClusterLink, error) {
	var resource ClusterLink
	err := ctx.ReadResource("confluentcloud:index/clusterLink:ClusterLink", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterLink resources.
type clusterLinkState struct {
	// The connection mode of the cluster link. The supported values are `"INBOUND"` and `"OUTBOUND"`. Defaults to `"OUTBOUND"`.
	ConnectionMode          *string                             `pulumi:"connectionMode"`
	DestinationKafkaCluster *ClusterLinkDestinationKafkaCluster `pulumi:"destinationKafkaCluster"`
	// The name of the cluster link, for example, `my-cluster-link`.
	Link *string `pulumi:"link"`
	// The mode of the cluster link. The supported values are `"DESTINATION"` and `"SOURCE"`. Defaults to `"DESTINATION"`.
	LinkMode           *string                        `pulumi:"linkMode"`
	SourceKafkaCluster *ClusterLinkSourceKafkaCluster `pulumi:"sourceKafkaCluster"`
}

type ClusterLinkState struct {
	// The connection mode of the cluster link. The supported values are `"INBOUND"` and `"OUTBOUND"`. Defaults to `"OUTBOUND"`.
	ConnectionMode          pulumi.StringPtrInput
	DestinationKafkaCluster ClusterLinkDestinationKafkaClusterPtrInput
	// The name of the cluster link, for example, `my-cluster-link`.
	Link pulumi.StringPtrInput
	// The mode of the cluster link. The supported values are `"DESTINATION"` and `"SOURCE"`. Defaults to `"DESTINATION"`.
	LinkMode           pulumi.StringPtrInput
	SourceKafkaCluster ClusterLinkSourceKafkaClusterPtrInput
}

func (ClusterLinkState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterLinkState)(nil)).Elem()
}

type clusterLinkArgs struct {
	// The connection mode of the cluster link. The supported values are `"INBOUND"` and `"OUTBOUND"`. Defaults to `"OUTBOUND"`.
	ConnectionMode          *string                            `pulumi:"connectionMode"`
	DestinationKafkaCluster ClusterLinkDestinationKafkaCluster `pulumi:"destinationKafkaCluster"`
	// The name of the cluster link, for example, `my-cluster-link`.
	Link *string `pulumi:"link"`
	// The mode of the cluster link. The supported values are `"DESTINATION"` and `"SOURCE"`. Defaults to `"DESTINATION"`.
	LinkMode           *string                       `pulumi:"linkMode"`
	SourceKafkaCluster ClusterLinkSourceKafkaCluster `pulumi:"sourceKafkaCluster"`
}

// The set of arguments for constructing a ClusterLink resource.
type ClusterLinkArgs struct {
	// The connection mode of the cluster link. The supported values are `"INBOUND"` and `"OUTBOUND"`. Defaults to `"OUTBOUND"`.
	ConnectionMode          pulumi.StringPtrInput
	DestinationKafkaCluster ClusterLinkDestinationKafkaClusterInput
	// The name of the cluster link, for example, `my-cluster-link`.
	Link pulumi.StringPtrInput
	// The mode of the cluster link. The supported values are `"DESTINATION"` and `"SOURCE"`. Defaults to `"DESTINATION"`.
	LinkMode           pulumi.StringPtrInput
	SourceKafkaCluster ClusterLinkSourceKafkaClusterInput
}

func (ClusterLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterLinkArgs)(nil)).Elem()
}

type ClusterLinkInput interface {
	pulumi.Input

	ToClusterLinkOutput() ClusterLinkOutput
	ToClusterLinkOutputWithContext(ctx context.Context) ClusterLinkOutput
}

func (*ClusterLink) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLink)(nil)).Elem()
}

func (i *ClusterLink) ToClusterLinkOutput() ClusterLinkOutput {
	return i.ToClusterLinkOutputWithContext(context.Background())
}

func (i *ClusterLink) ToClusterLinkOutputWithContext(ctx context.Context) ClusterLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLinkOutput)
}

// ClusterLinkArrayInput is an input type that accepts ClusterLinkArray and ClusterLinkArrayOutput values.
// You can construct a concrete instance of `ClusterLinkArrayInput` via:
//
//	ClusterLinkArray{ ClusterLinkArgs{...} }
type ClusterLinkArrayInput interface {
	pulumi.Input

	ToClusterLinkArrayOutput() ClusterLinkArrayOutput
	ToClusterLinkArrayOutputWithContext(context.Context) ClusterLinkArrayOutput
}

type ClusterLinkArray []ClusterLinkInput

func (ClusterLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterLink)(nil)).Elem()
}

func (i ClusterLinkArray) ToClusterLinkArrayOutput() ClusterLinkArrayOutput {
	return i.ToClusterLinkArrayOutputWithContext(context.Background())
}

func (i ClusterLinkArray) ToClusterLinkArrayOutputWithContext(ctx context.Context) ClusterLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLinkArrayOutput)
}

// ClusterLinkMapInput is an input type that accepts ClusterLinkMap and ClusterLinkMapOutput values.
// You can construct a concrete instance of `ClusterLinkMapInput` via:
//
//	ClusterLinkMap{ "key": ClusterLinkArgs{...} }
type ClusterLinkMapInput interface {
	pulumi.Input

	ToClusterLinkMapOutput() ClusterLinkMapOutput
	ToClusterLinkMapOutputWithContext(context.Context) ClusterLinkMapOutput
}

type ClusterLinkMap map[string]ClusterLinkInput

func (ClusterLinkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterLink)(nil)).Elem()
}

func (i ClusterLinkMap) ToClusterLinkMapOutput() ClusterLinkMapOutput {
	return i.ToClusterLinkMapOutputWithContext(context.Background())
}

func (i ClusterLinkMap) ToClusterLinkMapOutputWithContext(ctx context.Context) ClusterLinkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLinkMapOutput)
}

type ClusterLinkOutput struct{ *pulumi.OutputState }

func (ClusterLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLink)(nil)).Elem()
}

func (o ClusterLinkOutput) ToClusterLinkOutput() ClusterLinkOutput {
	return o
}

func (o ClusterLinkOutput) ToClusterLinkOutputWithContext(ctx context.Context) ClusterLinkOutput {
	return o
}

// The connection mode of the cluster link. The supported values are `"INBOUND"` and `"OUTBOUND"`. Defaults to `"OUTBOUND"`.
func (o ClusterLinkOutput) ConnectionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterLink) pulumi.StringPtrOutput { return v.ConnectionMode }).(pulumi.StringPtrOutput)
}

func (o ClusterLinkOutput) DestinationKafkaCluster() ClusterLinkDestinationKafkaClusterOutput {
	return o.ApplyT(func(v *ClusterLink) ClusterLinkDestinationKafkaClusterOutput { return v.DestinationKafkaCluster }).(ClusterLinkDestinationKafkaClusterOutput)
}

// The name of the cluster link, for example, `my-cluster-link`.
func (o ClusterLinkOutput) Link() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterLink) pulumi.StringOutput { return v.Link }).(pulumi.StringOutput)
}

// The mode of the cluster link. The supported values are `"DESTINATION"` and `"SOURCE"`. Defaults to `"DESTINATION"`.
func (o ClusterLinkOutput) LinkMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterLink) pulumi.StringPtrOutput { return v.LinkMode }).(pulumi.StringPtrOutput)
}

func (o ClusterLinkOutput) SourceKafkaCluster() ClusterLinkSourceKafkaClusterOutput {
	return o.ApplyT(func(v *ClusterLink) ClusterLinkSourceKafkaClusterOutput { return v.SourceKafkaCluster }).(ClusterLinkSourceKafkaClusterOutput)
}

type ClusterLinkArrayOutput struct{ *pulumi.OutputState }

func (ClusterLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterLink)(nil)).Elem()
}

func (o ClusterLinkArrayOutput) ToClusterLinkArrayOutput() ClusterLinkArrayOutput {
	return o
}

func (o ClusterLinkArrayOutput) ToClusterLinkArrayOutputWithContext(ctx context.Context) ClusterLinkArrayOutput {
	return o
}

func (o ClusterLinkArrayOutput) Index(i pulumi.IntInput) ClusterLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClusterLink {
		return vs[0].([]*ClusterLink)[vs[1].(int)]
	}).(ClusterLinkOutput)
}

type ClusterLinkMapOutput struct{ *pulumi.OutputState }

func (ClusterLinkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterLink)(nil)).Elem()
}

func (o ClusterLinkMapOutput) ToClusterLinkMapOutput() ClusterLinkMapOutput {
	return o
}

func (o ClusterLinkMapOutput) ToClusterLinkMapOutputWithContext(ctx context.Context) ClusterLinkMapOutput {
	return o
}

func (o ClusterLinkMapOutput) MapIndex(k pulumi.StringInput) ClusterLinkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClusterLink {
		return vs[0].(map[string]*ClusterLink)[vs[1].(string)]
	}).(ClusterLinkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterLinkInput)(nil)).Elem(), &ClusterLink{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterLinkArrayInput)(nil)).Elem(), ClusterLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterLinkMapInput)(nil)).Elem(), ClusterLinkMap{})
	pulumi.RegisterOutputType(ClusterLinkOutput{})
	pulumi.RegisterOutputType(ClusterLinkArrayOutput{})
	pulumi.RegisterOutputType(ClusterLinkMapOutput{})
}

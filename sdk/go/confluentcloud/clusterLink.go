// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluentcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-confluentcloud/sdk/v2/go/confluentcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// https://docs.confluent.io/cloud/current/multi-cloud/cluster-linking/cluster-links-cc.html#create-a-cluster-link-in-bidirectional-mode
//			_, err := confluentcloud.NewClusterLink(ctx, "east-to-west", &confluentcloud.ClusterLinkArgs{
//				Link:     pulumi.String("bidirectional-link"),
//				LinkMode: pulumi.String("BIDIRECTIONAL"),
//				LocalKafkaCluster: &confluentcloud.ClusterLinkLocalKafkaClusterArgs{
//					Id:           pulumi.Any(east.Id),
//					RestEndpoint: pulumi.Any(east.RestEndpoint),
//					Credentials: &confluentcloud.ClusterLinkLocalKafkaClusterCredentialsArgs{
//						Key:    pulumi.Any(app_manager_east_cluster_api_key.Id),
//						Secret: pulumi.Any(app_manager_east_cluster_api_key.Secret),
//					},
//				},
//				RemoteKafkaCluster: &confluentcloud.ClusterLinkRemoteKafkaClusterArgs{
//					Id:                pulumi.Any(west.Id),
//					BootstrapEndpoint: pulumi.Any(west.BootstrapEndpoint),
//					Credentials: &confluentcloud.ClusterLinkRemoteKafkaClusterCredentialsArgs{
//						Key:    pulumi.Any(app_manager_west_cluster_api_key.Id),
//						Secret: pulumi.Any(app_manager_west_cluster_api_key.Secret),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = confluentcloud.NewClusterLink(ctx, "west-to-east", &confluentcloud.ClusterLinkArgs{
//				Link:     pulumi.String("bidirectional-link"),
//				LinkMode: pulumi.String("BIDIRECTIONAL"),
//				LocalKafkaCluster: &confluentcloud.ClusterLinkLocalKafkaClusterArgs{
//					Id:           pulumi.Any(west.Id),
//					RestEndpoint: pulumi.Any(west.RestEndpoint),
//					Credentials: &confluentcloud.ClusterLinkLocalKafkaClusterCredentialsArgs{
//						Key:    pulumi.Any(app_manager_west_cluster_api_key.Id),
//						Secret: pulumi.Any(app_manager_west_cluster_api_key.Secret),
//					},
//				},
//				RemoteKafkaCluster: &confluentcloud.ClusterLinkRemoteKafkaClusterArgs{
//					Id:                pulumi.Any(east.Id),
//					BootstrapEndpoint: pulumi.Any(east.BootstrapEndpoint),
//					Credentials: &confluentcloud.ClusterLinkRemoteKafkaClusterCredentialsArgs{
//						Key:    pulumi.Any(app_manager_east_cluster_api_key.Id),
//						Secret: pulumi.Any(app_manager_east_cluster_api_key.Secret),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Getting Started
//
// The following end-to-end examples might help to get started with `ClusterLink` resource:
//   - `destination-initiated-cluster-link-rbac`: An example of setting up a _destination_ initiated cluster link with a mirror topic
//   - `source-initiated-cluster-link-rbac`: An example of setting up a _source_ initiated cluster link with a mirror topic
//   - `regular-bidirectional-cluster-link-rbac`: An example of setting up a bidirectional cluster link with 2 mirror topics
//   - `advanced-bidirectional-cluster-link-rbac`: An example of setting up a bidirectional cluster link with 2 mirror topics ([advanced option](https://docs.confluent.io/cloud/current/multi-cloud/cluster-linking/cluster-links-cc.html#create-a-cluster-link-in-bidirectional-mode))
//
// See [Cluster Linking on Confluent Cloud](https://docs.confluent.io/cloud/current/multi-cloud/cluster-linking/index.html) to learn more about Cluster Linking on Confluent Cloud.
//
// ## Import
//
// You can import a Kafka mirror topic by using the cluster link name, cluster link mode, cluster link connection mode,
//
// source (or local for bidirectional cluster links) Kafka cluster ID, and destination (or remote  for bidirectional cluster links) Kafka cluster ID, in the format `<Cluster link name>/<Cluster link mode>/<Cluster connection mode>/<Source (Local) Kafka cluster ID>/<Destination (Remote) Kafka cluster ID>`, for example:
//
// Option #1 when using source-initiated or destination-initiated cluster links
//
// $ export IMPORT_SOURCE_KAFKA_BOOTSTRAP_ENDPOINT="<source_kafka_bootstrap_endpoint>"
//
// $ export IMPORT_SOURCE_KAFKA_API_KEY="<source_kafka_api_key>"
//
// $ export IMPORT_SOURCE_KAFKA_API_SECRET="<source_kafka_api_secret>"
//
// $ export IMPORT_DESTINATION_KAFKA_REST_ENDPOINT="<destination_kafka_rest_endpoint>"
//
// $ export IMPORT_DESTINATION_KAFKA_API_KEY="<destination_kafka_api_key>"
//
// $ export IMPORT_DESTINATION_KAFKA_API_SECRET="<destination_kafka_api_secret>"
//
// ```sh
// $ pulumi import confluentcloud:index/clusterLink:ClusterLink my_cluster_link my-cluster-link/DESTINATION/OUTBOUND/lkc-abc123/lkc-xyz456
// ```
//
// Option #2 when using bidirectional cluster links
//
// $ export IMPORT_LOCAL_KAFKA_BOOTSTRAP_ENDPOINT="<local_kafka_bootstrap_endpoint>"
//
// $ export IMPORT_LOCAL_KAFKA_API_KEY="<local_kafka_api_key>"
//
// $ export IMPORT_LOCAL_KAFKA_API_SECRET="<local_kafka_api_secret>"
//
// $ export IMPORT_REMOTE_KAFKA_REST_ENDPOINT="<remote_kafka_rest_endpoint>"
//
// $ export IMPORT_REMOTE_KAFKA_API_KEY="<remote_kafka_api_key>"
//
// $ export IMPORT_REMOTE_KAFKA_API_SECRET="<remote_kafka_api_secret>"
//
// ```sh
// $ pulumi import confluentcloud:index/clusterLink:ClusterLink my_cluster_link my-cluster-link/BIDIRECTIONAL/OUTBOUND/lkc-abc123/lkc-xyz456
// ```
//
// !> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.
type ClusterLink struct {
	pulumi.CustomResourceState

	// The custom cluster link settings to set:
	Config pulumi.StringMapOutput `pulumi:"config"`
	// The connection mode of the cluster link. The supported values are `"INBOUND"` and `"OUTBOUND"`. Defaults to `"OUTBOUND"`.
	ConnectionMode          pulumi.StringPtrOutput                      `pulumi:"connectionMode"`
	DestinationKafkaCluster ClusterLinkDestinationKafkaClusterPtrOutput `pulumi:"destinationKafkaCluster"`
	// The name of the cluster link, for example, `my-cluster-link`.
	Link pulumi.StringOutput `pulumi:"link"`
	// The mode of the cluster link. The supported values are `"DESTINATION"`, `"SOURCE"`, and `"BIDIRECTIONAL"`. Defaults to `"DESTINATION"`.
	LinkMode           pulumi.StringPtrOutput                 `pulumi:"linkMode"`
	LocalKafkaCluster  ClusterLinkLocalKafkaClusterPtrOutput  `pulumi:"localKafkaCluster"`
	RemoteKafkaCluster ClusterLinkRemoteKafkaClusterPtrOutput `pulumi:"remoteKafkaCluster"`
	SourceKafkaCluster ClusterLinkSourceKafkaClusterPtrOutput `pulumi:"sourceKafkaCluster"`
}

// NewClusterLink registers a new resource with the given unique name, arguments, and options.
func NewClusterLink(ctx *pulumi.Context,
	name string, args *ClusterLinkArgs, opts ...pulumi.ResourceOption) (*ClusterLink, error) {
	if args == nil {
		args = &ClusterLinkArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClusterLink
	err := ctx.RegisterResource("confluentcloud:index/clusterLink:ClusterLink", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterLink gets an existing ClusterLink resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterLink(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterLinkState, opts ...pulumi.ResourceOption) (*ClusterLink, error) {
	var resource ClusterLink
	err := ctx.ReadResource("confluentcloud:index/clusterLink:ClusterLink", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterLink resources.
type clusterLinkState struct {
	// The custom cluster link settings to set:
	Config map[string]string `pulumi:"config"`
	// The connection mode of the cluster link. The supported values are `"INBOUND"` and `"OUTBOUND"`. Defaults to `"OUTBOUND"`.
	ConnectionMode          *string                             `pulumi:"connectionMode"`
	DestinationKafkaCluster *ClusterLinkDestinationKafkaCluster `pulumi:"destinationKafkaCluster"`
	// The name of the cluster link, for example, `my-cluster-link`.
	Link *string `pulumi:"link"`
	// The mode of the cluster link. The supported values are `"DESTINATION"`, `"SOURCE"`, and `"BIDIRECTIONAL"`. Defaults to `"DESTINATION"`.
	LinkMode           *string                        `pulumi:"linkMode"`
	LocalKafkaCluster  *ClusterLinkLocalKafkaCluster  `pulumi:"localKafkaCluster"`
	RemoteKafkaCluster *ClusterLinkRemoteKafkaCluster `pulumi:"remoteKafkaCluster"`
	SourceKafkaCluster *ClusterLinkSourceKafkaCluster `pulumi:"sourceKafkaCluster"`
}

type ClusterLinkState struct {
	// The custom cluster link settings to set:
	Config pulumi.StringMapInput
	// The connection mode of the cluster link. The supported values are `"INBOUND"` and `"OUTBOUND"`. Defaults to `"OUTBOUND"`.
	ConnectionMode          pulumi.StringPtrInput
	DestinationKafkaCluster ClusterLinkDestinationKafkaClusterPtrInput
	// The name of the cluster link, for example, `my-cluster-link`.
	Link pulumi.StringPtrInput
	// The mode of the cluster link. The supported values are `"DESTINATION"`, `"SOURCE"`, and `"BIDIRECTIONAL"`. Defaults to `"DESTINATION"`.
	LinkMode           pulumi.StringPtrInput
	LocalKafkaCluster  ClusterLinkLocalKafkaClusterPtrInput
	RemoteKafkaCluster ClusterLinkRemoteKafkaClusterPtrInput
	SourceKafkaCluster ClusterLinkSourceKafkaClusterPtrInput
}

func (ClusterLinkState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterLinkState)(nil)).Elem()
}

type clusterLinkArgs struct {
	// The custom cluster link settings to set:
	Config map[string]string `pulumi:"config"`
	// The connection mode of the cluster link. The supported values are `"INBOUND"` and `"OUTBOUND"`. Defaults to `"OUTBOUND"`.
	ConnectionMode          *string                             `pulumi:"connectionMode"`
	DestinationKafkaCluster *ClusterLinkDestinationKafkaCluster `pulumi:"destinationKafkaCluster"`
	// The name of the cluster link, for example, `my-cluster-link`.
	Link *string `pulumi:"link"`
	// The mode of the cluster link. The supported values are `"DESTINATION"`, `"SOURCE"`, and `"BIDIRECTIONAL"`. Defaults to `"DESTINATION"`.
	LinkMode           *string                        `pulumi:"linkMode"`
	LocalKafkaCluster  *ClusterLinkLocalKafkaCluster  `pulumi:"localKafkaCluster"`
	RemoteKafkaCluster *ClusterLinkRemoteKafkaCluster `pulumi:"remoteKafkaCluster"`
	SourceKafkaCluster *ClusterLinkSourceKafkaCluster `pulumi:"sourceKafkaCluster"`
}

// The set of arguments for constructing a ClusterLink resource.
type ClusterLinkArgs struct {
	// The custom cluster link settings to set:
	Config pulumi.StringMapInput
	// The connection mode of the cluster link. The supported values are `"INBOUND"` and `"OUTBOUND"`. Defaults to `"OUTBOUND"`.
	ConnectionMode          pulumi.StringPtrInput
	DestinationKafkaCluster ClusterLinkDestinationKafkaClusterPtrInput
	// The name of the cluster link, for example, `my-cluster-link`.
	Link pulumi.StringPtrInput
	// The mode of the cluster link. The supported values are `"DESTINATION"`, `"SOURCE"`, and `"BIDIRECTIONAL"`. Defaults to `"DESTINATION"`.
	LinkMode           pulumi.StringPtrInput
	LocalKafkaCluster  ClusterLinkLocalKafkaClusterPtrInput
	RemoteKafkaCluster ClusterLinkRemoteKafkaClusterPtrInput
	SourceKafkaCluster ClusterLinkSourceKafkaClusterPtrInput
}

func (ClusterLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterLinkArgs)(nil)).Elem()
}

type ClusterLinkInput interface {
	pulumi.Input

	ToClusterLinkOutput() ClusterLinkOutput
	ToClusterLinkOutputWithContext(ctx context.Context) ClusterLinkOutput
}

func (*ClusterLink) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLink)(nil)).Elem()
}

func (i *ClusterLink) ToClusterLinkOutput() ClusterLinkOutput {
	return i.ToClusterLinkOutputWithContext(context.Background())
}

func (i *ClusterLink) ToClusterLinkOutputWithContext(ctx context.Context) ClusterLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLinkOutput)
}

// ClusterLinkArrayInput is an input type that accepts ClusterLinkArray and ClusterLinkArrayOutput values.
// You can construct a concrete instance of `ClusterLinkArrayInput` via:
//
//	ClusterLinkArray{ ClusterLinkArgs{...} }
type ClusterLinkArrayInput interface {
	pulumi.Input

	ToClusterLinkArrayOutput() ClusterLinkArrayOutput
	ToClusterLinkArrayOutputWithContext(context.Context) ClusterLinkArrayOutput
}

type ClusterLinkArray []ClusterLinkInput

func (ClusterLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterLink)(nil)).Elem()
}

func (i ClusterLinkArray) ToClusterLinkArrayOutput() ClusterLinkArrayOutput {
	return i.ToClusterLinkArrayOutputWithContext(context.Background())
}

func (i ClusterLinkArray) ToClusterLinkArrayOutputWithContext(ctx context.Context) ClusterLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLinkArrayOutput)
}

// ClusterLinkMapInput is an input type that accepts ClusterLinkMap and ClusterLinkMapOutput values.
// You can construct a concrete instance of `ClusterLinkMapInput` via:
//
//	ClusterLinkMap{ "key": ClusterLinkArgs{...} }
type ClusterLinkMapInput interface {
	pulumi.Input

	ToClusterLinkMapOutput() ClusterLinkMapOutput
	ToClusterLinkMapOutputWithContext(context.Context) ClusterLinkMapOutput
}

type ClusterLinkMap map[string]ClusterLinkInput

func (ClusterLinkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterLink)(nil)).Elem()
}

func (i ClusterLinkMap) ToClusterLinkMapOutput() ClusterLinkMapOutput {
	return i.ToClusterLinkMapOutputWithContext(context.Background())
}

func (i ClusterLinkMap) ToClusterLinkMapOutputWithContext(ctx context.Context) ClusterLinkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLinkMapOutput)
}

type ClusterLinkOutput struct{ *pulumi.OutputState }

func (ClusterLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLink)(nil)).Elem()
}

func (o ClusterLinkOutput) ToClusterLinkOutput() ClusterLinkOutput {
	return o
}

func (o ClusterLinkOutput) ToClusterLinkOutputWithContext(ctx context.Context) ClusterLinkOutput {
	return o
}

// The custom cluster link settings to set:
func (o ClusterLinkOutput) Config() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ClusterLink) pulumi.StringMapOutput { return v.Config }).(pulumi.StringMapOutput)
}

// The connection mode of the cluster link. The supported values are `"INBOUND"` and `"OUTBOUND"`. Defaults to `"OUTBOUND"`.
func (o ClusterLinkOutput) ConnectionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterLink) pulumi.StringPtrOutput { return v.ConnectionMode }).(pulumi.StringPtrOutput)
}

func (o ClusterLinkOutput) DestinationKafkaCluster() ClusterLinkDestinationKafkaClusterPtrOutput {
	return o.ApplyT(func(v *ClusterLink) ClusterLinkDestinationKafkaClusterPtrOutput { return v.DestinationKafkaCluster }).(ClusterLinkDestinationKafkaClusterPtrOutput)
}

// The name of the cluster link, for example, `my-cluster-link`.
func (o ClusterLinkOutput) Link() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterLink) pulumi.StringOutput { return v.Link }).(pulumi.StringOutput)
}

// The mode of the cluster link. The supported values are `"DESTINATION"`, `"SOURCE"`, and `"BIDIRECTIONAL"`. Defaults to `"DESTINATION"`.
func (o ClusterLinkOutput) LinkMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterLink) pulumi.StringPtrOutput { return v.LinkMode }).(pulumi.StringPtrOutput)
}

func (o ClusterLinkOutput) LocalKafkaCluster() ClusterLinkLocalKafkaClusterPtrOutput {
	return o.ApplyT(func(v *ClusterLink) ClusterLinkLocalKafkaClusterPtrOutput { return v.LocalKafkaCluster }).(ClusterLinkLocalKafkaClusterPtrOutput)
}

func (o ClusterLinkOutput) RemoteKafkaCluster() ClusterLinkRemoteKafkaClusterPtrOutput {
	return o.ApplyT(func(v *ClusterLink) ClusterLinkRemoteKafkaClusterPtrOutput { return v.RemoteKafkaCluster }).(ClusterLinkRemoteKafkaClusterPtrOutput)
}

func (o ClusterLinkOutput) SourceKafkaCluster() ClusterLinkSourceKafkaClusterPtrOutput {
	return o.ApplyT(func(v *ClusterLink) ClusterLinkSourceKafkaClusterPtrOutput { return v.SourceKafkaCluster }).(ClusterLinkSourceKafkaClusterPtrOutput)
}

type ClusterLinkArrayOutput struct{ *pulumi.OutputState }

func (ClusterLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterLink)(nil)).Elem()
}

func (o ClusterLinkArrayOutput) ToClusterLinkArrayOutput() ClusterLinkArrayOutput {
	return o
}

func (o ClusterLinkArrayOutput) ToClusterLinkArrayOutputWithContext(ctx context.Context) ClusterLinkArrayOutput {
	return o
}

func (o ClusterLinkArrayOutput) Index(i pulumi.IntInput) ClusterLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClusterLink {
		return vs[0].([]*ClusterLink)[vs[1].(int)]
	}).(ClusterLinkOutput)
}

type ClusterLinkMapOutput struct{ *pulumi.OutputState }

func (ClusterLinkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterLink)(nil)).Elem()
}

func (o ClusterLinkMapOutput) ToClusterLinkMapOutput() ClusterLinkMapOutput {
	return o
}

func (o ClusterLinkMapOutput) ToClusterLinkMapOutputWithContext(ctx context.Context) ClusterLinkMapOutput {
	return o
}

func (o ClusterLinkMapOutput) MapIndex(k pulumi.StringInput) ClusterLinkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClusterLink {
		return vs[0].(map[string]*ClusterLink)[vs[1].(string)]
	}).(ClusterLinkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterLinkInput)(nil)).Elem(), &ClusterLink{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterLinkArrayInput)(nil)).Elem(), ClusterLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterLinkMapInput)(nil)).Elem(), ClusterLinkMap{})
	pulumi.RegisterOutputType(ClusterLinkOutput{})
	pulumi.RegisterOutputType(ClusterLinkArrayOutput{})
	pulumi.RegisterOutputType(ClusterLinkMapOutput{})
}

# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ByokKeyArgs', 'ByokKey']

@pulumi.input_type
class ByokKeyArgs:
    def __init__(__self__, *,
                 aws: Optional[pulumi.Input['ByokKeyAwsArgs']] = None,
                 azure: Optional[pulumi.Input['ByokKeyAzureArgs']] = None):
        """
        The set of arguments for constructing a ByokKey resource.
        :param pulumi.Input['ByokKeyAwsArgs'] aws: (Optional Configuration Block) supports the following:
        :param pulumi.Input['ByokKeyAzureArgs'] azure: (Optional Configuration Block) supports the following:
        """
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if azure is not None:
            pulumi.set(__self__, "azure", azure)

    @property
    @pulumi.getter
    def aws(self) -> Optional[pulumi.Input['ByokKeyAwsArgs']]:
        """
        (Optional Configuration Block) supports the following:
        """
        return pulumi.get(self, "aws")

    @aws.setter
    def aws(self, value: Optional[pulumi.Input['ByokKeyAwsArgs']]):
        pulumi.set(self, "aws", value)

    @property
    @pulumi.getter
    def azure(self) -> Optional[pulumi.Input['ByokKeyAzureArgs']]:
        """
        (Optional Configuration Block) supports the following:
        """
        return pulumi.get(self, "azure")

    @azure.setter
    def azure(self, value: Optional[pulumi.Input['ByokKeyAzureArgs']]):
        pulumi.set(self, "azure", value)


@pulumi.input_type
class _ByokKeyState:
    def __init__(__self__, *,
                 aws: Optional[pulumi.Input['ByokKeyAwsArgs']] = None,
                 azure: Optional[pulumi.Input['ByokKeyAzureArgs']] = None):
        """
        Input properties used for looking up and filtering ByokKey resources.
        :param pulumi.Input['ByokKeyAwsArgs'] aws: (Optional Configuration Block) supports the following:
        :param pulumi.Input['ByokKeyAzureArgs'] azure: (Optional Configuration Block) supports the following:
        """
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if azure is not None:
            pulumi.set(__self__, "azure", azure)

    @property
    @pulumi.getter
    def aws(self) -> Optional[pulumi.Input['ByokKeyAwsArgs']]:
        """
        (Optional Configuration Block) supports the following:
        """
        return pulumi.get(self, "aws")

    @aws.setter
    def aws(self, value: Optional[pulumi.Input['ByokKeyAwsArgs']]):
        pulumi.set(self, "aws", value)

    @property
    @pulumi.getter
    def azure(self) -> Optional[pulumi.Input['ByokKeyAzureArgs']]:
        """
        (Optional Configuration Block) supports the following:
        """
        return pulumi.get(self, "azure")

    @azure.setter
    def azure(self, value: Optional[pulumi.Input['ByokKeyAzureArgs']]):
        pulumi.set(self, "azure", value)


class ByokKey(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aws: Optional[pulumi.Input[pulumi.InputType['ByokKeyAwsArgs']]] = None,
                 azure: Optional[pulumi.Input[pulumi.InputType['ByokKeyAzureArgs']]] = None,
                 __props__=None):
        """
        ## Import

        You can import a BYOK Key by using BYOK Key ID. The following example shows how to import a BYOK Key$ export CONFLUENT_CLOUD_API_KEY="<cloud_api_key>" $ export CONFLUENT_CLOUD_API_SECRET="<cloud_api_secret>"

        ```sh
         $ pulumi import confluentcloud:index/byokKey:ByokKey aws_key cck-abcde
        ```

         !> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ByokKeyAwsArgs']] aws: (Optional Configuration Block) supports the following:
        :param pulumi.Input[pulumi.InputType['ByokKeyAzureArgs']] azure: (Optional Configuration Block) supports the following:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ByokKeyArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Import

        You can import a BYOK Key by using BYOK Key ID. The following example shows how to import a BYOK Key$ export CONFLUENT_CLOUD_API_KEY="<cloud_api_key>" $ export CONFLUENT_CLOUD_API_SECRET="<cloud_api_secret>"

        ```sh
         $ pulumi import confluentcloud:index/byokKey:ByokKey aws_key cck-abcde
        ```

         !> **Warning:** Do not forget to delete terminal command history afterwards for security purposes.

        :param str resource_name: The name of the resource.
        :param ByokKeyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ByokKeyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aws: Optional[pulumi.Input[pulumi.InputType['ByokKeyAwsArgs']]] = None,
                 azure: Optional[pulumi.Input[pulumi.InputType['ByokKeyAzureArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ByokKeyArgs.__new__(ByokKeyArgs)

            __props__.__dict__["aws"] = aws
            __props__.__dict__["azure"] = azure
        super(ByokKey, __self__).__init__(
            'confluentcloud:index/byokKey:ByokKey',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            aws: Optional[pulumi.Input[pulumi.InputType['ByokKeyAwsArgs']]] = None,
            azure: Optional[pulumi.Input[pulumi.InputType['ByokKeyAzureArgs']]] = None) -> 'ByokKey':
        """
        Get an existing ByokKey resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ByokKeyAwsArgs']] aws: (Optional Configuration Block) supports the following:
        :param pulumi.Input[pulumi.InputType['ByokKeyAzureArgs']] azure: (Optional Configuration Block) supports the following:
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ByokKeyState.__new__(_ByokKeyState)

        __props__.__dict__["aws"] = aws
        __props__.__dict__["azure"] = azure
        return ByokKey(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def aws(self) -> pulumi.Output['outputs.ByokKeyAws']:
        """
        (Optional Configuration Block) supports the following:
        """
        return pulumi.get(self, "aws")

    @property
    @pulumi.getter
    def azure(self) -> pulumi.Output['outputs.ByokKeyAzure']:
        """
        (Optional Configuration Block) supports the following:
        """
        return pulumi.get(self, "azure")

